
        "eax7	6
        "
        "lda     =6, dl
        "tsx2    datecv
        "
        "lda     =21, dl
        "tsx2    datecv

        "lda     =23, dl
        "tsx2    datecv

        "lda     =1, dl
        "tsx2    datecv

        "ldaq    date

        "mvne	(),(),()			" edit the date and time
        "desc4ns	date,8
        "desc9a	datedit,12
        "desc6a	rdctime,12

        "dis
        
        "call    ioa(msg1, rdctime, rdctime+1)

        "dis
        
        "lda     =1000000
        "sta     divisor
        
        "ldaq    dividend
        "lls     1
        "dvf     divisor     " should produce 123


        "lda    =-123454321
        "sta     quot
        "call    ioa(msgQ, quot)


        "ldq     dividend+1
        "div     divisor
        "stq     quot
        "call    ioa(msgQ, quot)


        "dis
        
    	tsx2	rd_clock
        staq	TimeODay        "MM/DD HH:MM
        "call    ioa(msg1, rdctime, rdctime+1)
        call    ioa(MSGtime, rdclock.day_name, TimeODay, TimeODay+1, rdclock.month_name, rdclock.year)

        call    ioa(MSGtime2, rdclock.day_name, rdclock.month_name, rdclock.hr, rdclock.min, rdclock.sec, rdclock.zone_name,  rdclock.year, TimeODay, TimeODay+1)

        dis

        even
dividend:   dec 0, 123000000
divisor:    dec 1000000

quot:       bss 1
msgQ:       acc     "Quotient = ^d\r\n"

msg1:      acc         "Date: ^g^g \r\n"
msg2:      acc         "Result: ^n (^a)\r\n"

MSGtime:    acc     "The date is: ^a ^g^g ^a ^d\r\n"
MSGtime2:   acc     "The date is: ^a ^a ^d:^d:^d ^a ^d (^g^g)\r\n"

        even
Date:   bss     2
TimeODay:   bss     2


" Derived from  ...... rdclock.incl.alm

"	tsx2	rd_clock
"	staq	MM/DD HH:MM

"	ldaq	clocktime
"	tsx2	cv_clock
"	staq	MM/DD HH:MM

rd_clock:	rccl                "read the clock

cv_clock:	staq	rdctime     " save clock reading
	stx2	datx2               " save XR's
	stx0	datx2+1             " ..

	lda     28,dl               " Initialize montab
	sta     montab+1			" to prime Feb

"	lda     =aclok              " find clock config card
"	tsx2	getconf
"	tra     no_clok_card		" Use default
"	ldq     com|1,7
"	stq     rdclock.zone_temp	" Delta hours
"	ldq     com|2,7
"	stq     rdclock.zone_name	" Name of zone

no_clok_card:
	ldaq	rdctime             " Get clock reading
	lls     1                   " Set for dvf
	dvf     =1000000			" Get seconds since 1900.
	llr     36                  " Into Q.
	div     60,dl               " Seconds since min to A, mins to Q.
	sta     rdclock.sec         " Save for inspection.
	div     60,dl               " Min since hr to A, hrs to Q.
	sta     rdclock.min
"
"	Set up X7 for field filling.
"
	eax7	6
	tsx2	datecv              " Convert the minutes.
	sbq     rdclock.zone_temp	" Adjust for GMT.
	div     24,dl               " Days since 1900 in q.
	stq     rdclock.day_of_century	" save for  later.
	sta     rdclock.hr          " Hours since daybreak.
	tsx2	datecv              " Convert the hours

	div     365*4+1,dl          " get leap year cycle
	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
	tmi     *+2                 " no
	aos     montab+1			" allow for feb 29

	qls     2                   " 4*# leap year cycles
	adlq	1901,dl
	stq     rdclock.year		" Save

	llr     36
	div     365,dl              " Years complete since l.y.c. =>Q
                                " Days since that year end => A

	cmpq	4,dl                " Dec 31st of leap year?
	tnz     *+3                 " No.
	sbq     1,dl                " Adjust year and
	lda     365,dl              " day numbers.

	asq     rdclock.year		" Add in years complete.
	eax6	0                   " search for correct month
	rpt     12,1,tmi			" ..
	sba     montab,6			" subtract off days for each month
	ada     -1,6                " put back last entry
	ada     1,dl                " plus one more
	sta     rdclock.day_of_month	" Day of month
	tsx2	datecv              " convert day

	eaa     0,6
	sbla	montab,du			" get index into month table
	arl     18                  "..
	sta     rdclock.month		" Save month number
	ldq     rdc.months-1,al		" Get name of month.
	stq     rdclock.month_name
	tsx2	datecv              " convert month

    mvne	(),(),()			" edit the date and time
	desc4ns	date,8
	desc9a	datedit,12
	desc6a	rdctime,12

	ldq     rdclock.day_of_century
	adq     2,dl                " Bump Tuesday into place.
	div     7,dl
	sta     rdclock.day_of_week
	ldq     rdc.days,al         " Get name of day.
	stq     rdclock.day_name

	ldaq	rdctime             " get conversion in AQ
datx2:	eax2	*			" restore XR's
	eax0    *               " ..
	tra     0,2             " return to caller


datecv:	sta	datenum			" save number

	btd     (),(x7)         " convert into proper place
	desc9a	datenum,4
	desc4ns	date,2

	eax7	-2,7			" move offset index
	tra     0,2             " and return

"
" Usefull outside visible variables rdclock.xxxxx

rdclock.hr:
	bss	,1
rdclock.min:
	bss	,1
rdclock.sec:
	bss	,1
rdclock.month:
	bss	,1
rdclock.month_name:
	bss	,1
rdclock.day_of_month:
	bss	,1
rdclock.day_of_week:
	bss	,1
rdclock.day_name:
	bss	,1
rdclock.year:
	bss	,1
rdclock.day_of_century:
	bss	,1
rdclock.zone_temp:
	"dec	5
    dec    8       "were PST here!
rdclock.zone_name:
	"aci	'est '
    aci	'pst '

datenum:	bss	,1
date:	bss	,1

	even
rdctime:	bss	,2

montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31

datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
	vfd	9/insp,o9/15,9/mvc+2,9/insm+1

rdc.days: aci	'sun mon tue wed thurfri sat '

rdc.months: 
	aci	'jan feb mar apr may jun jul aug septoct nov dec '

    include alm/eis_micro_ops.incl.alm

" End of include file ...... rdclock.incl.alm

"
"
"                                          -----------------------------------------------------------
"
"
"
" Historical Background
"
" This edition of the Multics software materials and documentation is provided and donated
" to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
" as a contribution to computer science knowledge.  
" This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
" Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
" and Bull HN Information Systems Inc. to the development of this operating system. 
" Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
" renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
" of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for
" managing computer hardware properly and for executing programs. Many subsequent operating systems
" incorporated Multics principles.
" Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
" as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .
"
"                                          -----------------------------------------------------------
"
" Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
" fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
" and that both the copyright notice and historical background and this permission notice appear in supporting
" documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
" to distribution of the programs without specific prior written permission.
"    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
"    Copyright 2006 by Bull HN Information Systems Inc.
"    Copyright 2006 by Bull SAS
"    All Rights Reserved
"
"
        include     Utils.as8
        

