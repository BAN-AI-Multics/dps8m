# DPS/8M simulator: src/Makefile.dev
# vim: filetype=make:tabstop=4:tw=78:noexpandtab

###############################################################################
#
# Copyright (c) 2021 Jeffrey H. Johnson <trnsz@pobox.com>
# Copyright (c) 2021-2022 The DPS8M Development Team
#
# All rights reserved.
#
# This software is made available under the terms of the ICU
# License, version 1.8.1 or later.  For more details, see the
# LICENSE.md file at the top-level directory of this distribution.
#
###############################################################################

###############################################################################
# Development Tools Targets                                                 \
    # XXXX:    # --------------------- Development Tools --------------------
###############################################################################

###############################################################################
# Check installed developer git pre-commit hook, excluding CI/CD builds

ifndef HOOK_WARNED
 ifndef CI_JOB_ID
  ifeq (,$(wildcard ./.git/hooks/pre-commit))
    $(warning WARNING: git pre-commit hook is not installed!)
    $(warning Install with "$(CP) ./.githooks/pre-commit ./.git/hooks")
    HOOK_WARNED=1
    export HOOK_WARNED
  endif
  ifneq (,$(shell $(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit       \
    2> /dev/null))
    $(warning $(shell "$(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit" \
      > /dev/null 2>&1 || $(PRINTF) '%s\n'                                    \
        "NOTICE: Installed git pre-commit hook differs from reference."       \
          2> /dev/null || $(TRUE)))
    HOOK_WARNED=1
    export HOOK_WARNED
  endif
  ifneq (,$(shell $(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit       \
    2> /dev/null))
    $(warning $(shell "$(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit" \
      > /dev/null 2>&1 || $(PRINTF) '%s\n'                                    \
        "Use '$(CP) ./.githooks/pre-commit ./.git/hooks' to reinstall."       \
          2> /dev/null || $(TRUE)))
  endif
 endif
endif

###############################################################################
# Displays preprocessor definitions

.PHONY: printdefs
printdefs:                                                                    \
    # printdefs:    # Display selected preprocessor defines
	@( $(CD) "$$($(GIT) rev-parse --show-toplevel)/./src/unifdef" &&          \
     $(MAKE) --no-print-directory -C "." "silently" )
	@( ( $(FIND) . -name '*.[ch]' -exec $(SH) -c "export n2=\"{}\";           \
     $(PRINTF) '%s ' \"\$${n2:?}\";                                           \
      "$$($(GIT) rev-parse --show-toplevel)/./src/unifdef/unifdef" "-Stn"     \
       \"\$${n2:?}\"" \; | while read -r n; do $(PRINTF) '%s  %s \n'          \
        $$($(PRINTF) '%s ' "$${n:?}" | $(WC) -w) "$${n:?}"; done           |  \
         $(SORT) -urn | $(EXPAND) | $(CUT) -d ' ' -f 2-                    |  \
          $(SED) -e 's/ S.._.*H_ / /g' -e 's/ DEC.* / /g' | $(TR) -s ' '   |  \
           $(SED) -e 's/^\ //g' | $(SED) -e 's/^\.\/.*\.[ch] \./\./g'         \
            -e 's/^\.\/.*[ch] $$//g' | $(GREP) -v '^$$') ) | while read       \
             line; do $(PRINTF) '%s\n' "$${line:?} "                       |  \
              $(AWK) '{ for (i=1; i<=NF; i++) if (!a[$$i]++)                  \
               printf("%s%s", $$i, FS); } { printf("\n"); }'; done         |  \
                $(SED) 's/ /: /'

###############################################################################
# Convenience target: Runs Cppcheck

.PHONY: cppcheck
cppcheck:                                                                     \
    # cppcheck:    # Check Cppcheck linter and save output
	-@$(RMF) ./cppcheck.txt > /dev/null 2>&1 || $(TRUE)
	@( $(PRINTF) '%s\n' "Starting in 5s, saving output to cppcheck.txt";      \
      $(SLEEP) 5 && ./src/ci-kit/cppcheck.sh 2> "cppcheck.txt" || $(TRUE) )

###############################################################################
# Convenience target: Cppi scan/check

.PHONY: cppiscan
cppiscan:                                                                     \
    # cppiscan:    # Verify C preprocessor nesting indents
	@$(SETV); ( $(PRINTF) '%s\n' "*** Listing files with cppi:";              \
      $(CPPI) -l $$($(GIT) ls-files | $(GREP) -v 'ci-kit/' 2> /dev/null |     \
        $(GREP) "\.[ch]$$" 2> /dev/null | $(SORT) -u | $(GREP) -v " ");       \
          $(PRINTF) '%s\n' "*** End of listing" )

###############################################################################
# Convenience target: Cppi fix/repair

.PHONY: cppifix
cppifix:                                                                      \
    # cppifix:    # Repair C preprocessor nesting indents
	@$(SETV); for i in $$($(CPPI) -l $$($(GIT) ls-files |                     \
      $(GREP) -v 'ci-kit/' 2> /dev/null| $(GREP) "\.[ch]$$" 2> /dev/null |    \
       $(SORT) -u | $(GREP) -v " ")); do $(PRINTF) '%s\n' "*** cppi $${i:?}"; \
        $(CPPI) "$${i:?}" > "$${i:?}.ifx" && $(CP) "$${i:?}.ifx" "$${i:?}" && \
         $(RMF) "$${i:?}.ifx"; done

###############################################################################
# Convenience target: Runs Oracle Developer Studio 12.6 Lint

.PHONY: orstlint
orstlint:                                                                     \
    # orstlint:    # Runs Oracle Studio Lint & save output
	-@$(RMF) ./orstlint.txt > /dev/null 2>&1 || $(TRUE)
	@( $(PRINTF) '%s\n' "Starting now, saving output to orstlint.txt";        \
      export CSTD="gnu11" && export CFLAGS="-DNO_C_ELLIPSIS" && cd src/dps8   \
       && $(MAKE) -i -k -s dps8 CC="$(ORSTLINT) -u -xO5 -m64 -xCC -a          \
        -errshort=full -err=warn -errfmt=src -errtags=yes -m -v -x            \
         -features=gcc_enums                                                  \
          -erroff=E_STATIC_UNUSED,E_CONSTANT_CONDITION,E_SEC_STRNCPY_WARN"    \
          SUNPRO=1 SUNLINT=1 NEED_128=1 --output-sync ) 2>&1 |                \
          $(GREP) -v -E '(^make: .* Error 2$$|no output created$$|make: .* not remade because of errors.$$|^lint.*annot find source file.*\.o$$|^lint:.*o input source files specified.*no output generated$$)' | $(TEE) orstlint.txt; \
           $(CAT) orstlint.txt | $(GREP) '^E_' | $(CUT) -d ',' -f 1 |         \
            $(SORT) | $(UNIQ) -c | $(SORT) -rn | $(TEE) -a orstlint.txt

###############################################################################

# Local Variables:
# mode: make
# tab-width: 4
# End:
