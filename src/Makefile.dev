# DPS8M simulator: src/Makefile.dev
# vim: filetype=make:tabstop=4:tw=79:noexpandtab
# SPDX-License-Identifier: ICU
# scspell-id: 0495e6fe-f62b-11ec-ab1d-80ee73e9b8e7

###############################################################################
#
# Copyright (c) 2021 Jeffrey H. Johnson <trnsz@pobox.com>
# Copyright (c) 2021-2022 The DPS8M Development Team
#
# All rights reserved.
#
# This software is made available under the terms of the ICU
# License, version 1.8.1 or later.  For more details, see the
# LICENSE.md file at the top-level directory of this distribution.
#
###############################################################################

###############################################################################
# Development Tools Targets                                                 \
    # XXXX:    # --------------------- Development Tools --------------------
###############################################################################

###############################################################################
# Check installed developer git pre-commit hook, excluding CI/CD builds

ifndef HOOK_WARNED
 ifndef CI_JOB_ID
  ifeq (,$(wildcard ./.git/hooks/pre-commit))
    $(warning WARNING: git pre-commit hook is not installed!)
    $(warning Install with "$(CP) ./.githooks/pre-commit ./.git/hooks")
    HOOK_WARNED=1
    export HOOK_WARNED
  endif
  ifneq (,$(shell $(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit       \
    2> /dev/null))
    $(warning $(shell "$(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit" \
      > /dev/null 2>&1 || $(PRINTF) '%s\n'                                    \
        "NOTICE: Installed git pre-commit hook differs from reference."       \
          2> /dev/null || $(TRUE)))
    HOOK_WARNED=1
    export HOOK_WARNED
  endif
  ifneq (,$(shell $(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit       \
    2> /dev/null))
    $(warning $(shell "$(CMP) ./.git/hooks/pre-commit ./.githooks/pre-commit" \
      > /dev/null 2>&1 || $(PRINTF) '%s\n'                                    \
        "Use '$(CP) ./.githooks/pre-commit ./.git/hooks' to reinstall."       \
          2> /dev/null || $(TRUE)))
  endif
 endif
endif

###############################################################################
# Regenerate build system dependencies

MKDEP_OPTS := "-D__MINGW64__=1" "-DTESTING=1"
DO_MAKEDEP := for j in $(MKDEP_OPTS) ; do $(FIND) . -name '*.c' -exec         \
              $(MAKEDEPEND) -w1 -Y -f- -- "$${j:?}" -- "{}" 2> /dev/null \;   \
              2> /dev/null ; done | $(SED) -e 's/^\.\///' 2> /dev/null |      \
              $(GREP) '^.*: .*$$' | $(ENV) LC_ALL=C $(SORT) -u | $(TEE)       \
              "./Dependency" 2> /dev/null | $(WC) -l 2> /dev/null | $(AWK)    \
              '/./ { print " - "$$0" rule(s)" }' 2> /dev/null | $(TR) -s ' '  \
              2> /dev/null ||                                                 \
                $(PRINTF) '%s\n' " - Error generating dependencies!"

.PHONY: predep predepend
ifneq (,$(findstring dep,$(MAKECMDGOALS)))
.NOTPARALLEL: predep predepend
endif
predep predepend:
	@$(PRINTF) '%s\n' "" 2> /dev/null |                                       \
      $(MAKEDEPEND) -w1 -Y -f- -s'# OK' 2> /dev/null |                        \
        $(GREP) -q '^# OK$$' 2> /dev/null ||                                  \
          {                                                                   \
            $(PRINTF) '%s\n'                                                  \
              "ERROR: Unusable or missing \"makedepend\" utility!" ;          \
            $(SLEEP) 1 > /dev/null 2>&1 ;                                     \
            exit 1 ;                                                          \
          }
	@$(PRINTF) 'DEPEND: %s\n' "ver.h" ;                                       \
      ( $(CD) "src/dps8" && $(MAKE) -j 1 -s "ver.h" )
	@$(PRINTF) 'DEPEND: %s\n' "sysdefs.h" ;                                   \
      ( $(CD) "src/dps8" && $(MAKE) -j 1 -s "sysdefs.h" )
	@$(PRINTF) 'DEPEND: %s\n' "errnos.h" ;                                    \
      ( $(CD) "src/dps8" && $(MAKE) -j 1 -s "errnos.h" )

.PHONY: dep depend predepend
ifneq (,$(findstring dep,$(MAKECMDGOALS)))
.NOTPARALLEL: dep depend predepend
endif
dep depend: predepend                                                         \
    # depend:    # Regenerates build system dependencies
	@$(PRINTF) 'DEPEND: %s' "decNumber" ;                                     \
      ( $(CD) "src/decNumber" && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "dps8" ;                                          \
      ( $(CD) "src/dps8"      && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "dpsprintf" ;                                     \
      ( $(CD) "src/dpsprintf" && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "empty" ;                                         \
      ( $(CD) "src/empty"     && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "mcmb" ;                                          \
      ( $(CD) "src/mcmb"      && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "prt2pdf" ;                                       \
      ( $(CD) "src/prt2pdf"   && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "punutil" ;                                       \
      ( $(CD) "src/punutil"   && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "simh" ;                                          \
      ( $(CD) "src/simh"      && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "unifdef" ;                                       \
      ( $(CD) "src/unifdef"   && $(DO_MAKEDEP) )
	@$(PRINTF) 'DEPEND: %s' "vmpctool" ;                                      \
      ( $(CD) "src/vmpctool"  && $(DO_MAKEDEP) )

###############################################################################
# Remove dependencies for untracked C files

DO_CLEANDEP := $(TEST) -f ./Dependency && { BCDC=$$($(WC) -l ./Dependency 2>  \
               /dev/null | $(CUT) -d '.' -f 1 2> /dev/null ) ; $(PRINTF)      \
               ' - %s > ' "$${BCDC:-0}" | $(TR) -s ' '; $(PRINTF) '%s\n'      \
               "($$( $(GIT) status -uall -s *.c 2> /dev/null | $(GREP) '^?? ' \
               2> /dev/null | $(CUT) -d ' ' -f2- 2> /dev/null | $(AWK)        \
               '/./ { print "^"$$0": " }' 2> /dev/null | $(SED) 's/\./\\\./g' \
               2> /dev/null | $(TR) '\n' ' ' 2> /dev/null | $(TR) ' ' '|' 2>  \
               /dev/null ))" | $(SED) -e 's/|)$$/)/' -e 's/|)/)/' -e          \
               's/||/|/g' 2> /dev/null | $(AWK)                               \
               '{ print("grep -vE \047"$$0"\047 ./Dependency >                \
               ./.Dependency && mv -f ./.Dependency ./Dependency ; rm -f      \
               ./.Dependency"); }' 2> /dev/null | $(GREP) -v "'()'" 2>        \
               /dev/null | $(SED) 's/\\\.c:/\\\.o: /g' 2> /dev/null | sh &&   \
               $(PRINTF) '%s\n' "$$( $(WC) -l ./Dependency 2> /dev/null |     \
               $(CUT) -d '.' -f 1 2> /dev/null | $(TR) -d ' ' 2> /dev/null    \
               ) rule(s)"; } ; $(RMF) ./.Dependency > /dev/null 2>&1 ;        \
               $(TOUCH) ./Dependency > /dev/null 2>&1 || $(TRUE) > /dev/null  \
               2>&1

.PHONY: dependclean depclean cleandepend cleandep
ifneq (,$(findstring dep,$(MAKECMDGOALS)))
.NOTPARALLEL: dependclean depclean cleandepend cleandep
endif
dependclean depclean cleandepend cleandep:                                    \
    # cleandep:    # Cleans-up untracked file dependencies
	@$(PRINTF) 'DEPEND: %s' "decNumber" ;                                     \
      ( $(CD) "src/decNumber" && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "dps8" ;                                          \
      ( $(CD) "src/dps8"      && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "dpsprintf" ;                                     \
      ( $(CD) "src/dpsprintf" && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "empty" ;                                         \
      ( $(CD) "src/empty"     && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "mcmb" ;                                          \
      ( $(CD) "src/mcmb"      && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "prt2pdf" ;                                       \
      ( $(CD) "src/prt2pdf"   && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "punutil" ;                                       \
      ( $(CD) "src/punutil"   && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "simh" ;                                          \
      ( $(CD) "src/simh"      && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "unifdef" ;                                       \
      ( $(CD) "src/unifdef"   && $(DO_CLEANDEP) )
	@$(PRINTF) 'DEPEND: %s' "vmpctool" ;                                      \
      ( $(CD) "src/vmpctool"  && $(DO_CLEANDEP) )

###############################################################################
# Displays preprocessor definitions

.PHONY: printdefs
printdefs:                                                                    \
    # printdefs:    # Display selected preprocessor defines
	@( $(CD) "$$($(GIT) rev-parse --show-toplevel)/./src/unifdef" &&          \
     $(MAKE) --no-print-directory -C "." "silently" )
	@( ( $(FIND) . -name '*.[ch]' -exec $(SH) -c "export n2=\"{}\";           \
     $(PRINTF) '%s ' \"\$${n2:?}\";                                           \
      "$$($(GIT) rev-parse --show-toplevel)/./src/unifdef/unifdef" "-Stn"     \
       \"\$${n2:?}\"" \; | while read -r n; do $(PRINTF) '%s  %s \n'          \
        $$($(PRINTF) '%s ' "$${n:?}" | $(WC) -w) "$${n:?}"; done           |  \
         $(SORT) -urn | $(EXPAND) | $(CUT) -d ' ' -f 2-                    |  \
          $(SED) -e 's/ S.._.*H_ / /g' -e 's/ DEC.* / /g' | $(TR) -s ' '   |  \
           $(SED) -e 's/^\ //g' | $(SED) -e 's/^\.\/.*\.[ch] \./\./g'         \
            -e 's/^\.\/.*[ch] $$//g' | $(GREP) -v '^$$') ) | while read       \
             line; do $(PRINTF) '%s\n' "$${line:?} "                       |  \
              $(AWK) '{ for (i=1; i<=NF; i++) if (!a[$$i]++)                  \
               printf("%s%s", $$i, FS); } { printf("\n"); }'; done         |  \
                $(SED) 's/ /: /'

###############################################################################
# Convenience target: Runs Cppcheck

.PHONY: cppcheck
cppcheck:                                                                     \
    # cppcheck:    # Check Cppcheck linter and save output
	-@$(RMF) ./cppcheck.txt > /dev/null 2>&1 || $(TRUE)
	-@$(TEST) -z "$(HTMLOUT)" ||                                              \
      $(PRINTF) '%s\n' "CPPCHECK: HTML report generation enabled."
	-@$(TEST) -z "$(HTMLOUT)" &&                                              \
      $(PRINTF) '%s\n'                                                        \
        "CPPCHECK: Set \"HTMLOUT=1\" to enable HTML report generation." ||    \
          $(TRUE)
	@( $(PRINTF) '%s\n' "Starting in 5s, saving output to cppcheck.txt";      \
      $(SLEEP) 5 && $(PRINTF) '%s\n' "" &&                                    \
        ./src/ci-kit/cppcheck.sh 2> "cppcheck.txt" || $(TRUE) )
	-@$(TEST) -z "$(HTMLOUT)" ||                                              \
      $(TEST) -d "./cppcheck" &&                                              \
        $(PRINTF) '%s\n'                                                      \
          "CPPCHECK: Check the \"./cppcheck\" directory for HTML reports."

###############################################################################
# Convenience target: Cppi scan/check

.PHONY: cppiscan
cppiscan:                                                                     \
    # cppiscan:    # Verify C preprocessor nesting indents
	@$(SETV); ( $(PRINTF) '%s\n' "*** Listing files with cppi:";              \
      $(CPPI) -l $$($(GIT) ls-files | $(GREP) -v 'ci-kit/' 2> /dev/null |     \
        $(GREP) "\.[ch]$$" 2> /dev/null | $(SORT) -u | $(GREP) -v " ");       \
          $(PRINTF) '%s\n' "*** End of listing" )

###############################################################################
# Convenience target: Cppi fix/repair

.PHONY: cppifix
cppifix:                                                                      \
    # cppifix:    # Repair C preprocessor nesting indents
	@$(SETV); for i in $$($(CPPI) -l $$($(GIT) ls-files |                     \
      $(GREP) -v 'ci-kit/' 2> /dev/null| $(GREP) "\.[ch]$$" 2> /dev/null |    \
       $(SORT) -u | $(GREP) -v " ")); do $(PRINTF) '%s\n' "*** cppi $${i:?}"; \
        $(CPPI) "$${i:?}" > "$${i:?}.ifx" && $(CP) "$${i:?}.ifx" "$${i:?}" && \
         $(RMF) "$${i:?}.ifx"; done

###############################################################################
# Convenience target: Runs Oracle Developer Studio 12.6 Lint

.PHONY: orstlint
orstlint:                                                                     \
    # orstlint:    # Runs Oracle Studio Lint & save output
	-@$(RMF) ./orstlint.txt > /dev/null 2>&1 || $(TRUE)
	@( $(PRINTF) '%s\n' "Starting now, saving output to orstlint.txt";        \
      export CSTD="gnu11" && export CFLAGS="-DNO_C_ELLIPSIS" && cd src/dps8   \
       && $(MAKE) -i -k -s dps8 CC="$(ORSTLINT) -u -xO5 -m64 -xCC -a          \
        -errshort=full -err=warn -errfmt=src -errtags=yes -m -v -x            \
         -features=gcc_enums                                                  \
          -erroff=E_STATIC_UNUSED,E_CONSTANT_CONDITION,E_SEC_STRNCPY_WARN"    \
          SUNPRO=1 SUNLINT=1 NEED_128=1 --output-sync ) 2>&1 |                \
          $(GREP) -v -E '(^make: .* Error 2$$|no output created$$|make: .* not remade because of errors.$$|^lint.*annot find source file.*\.o$$|^lint:.*o input source files specified.*no output generated$$)' | $(TEE) orstlint.txt; \
           $(CAT) orstlint.txt | $(GREP) '^E_' | $(CUT) -d ',' -f 1 |         \
            $(SORT) | $(UNIQ) -c | $(SORT) -rn | $(TEE) -a orstlint.txt

###############################################################################
# Convenience target: Runs the Clang Analyzer & save output

.PHONY: clsanalz
clsanalz:                                                                     \
    # clsanalz:    # Runs the Clang Analyzer & save output
	@$(TEST) -x "./src/ci-kit/scan-build.sh" &&                               \
      $(ENV) sh "./src/ci-kit/scan-build.sh"

###############################################################################
# Convenience target: scspell check scspell-id tagged files

.PHONY: scspell
scspell:                                                                      \
    # scspell:    # scspell check scspell-id tagged files
	@$(SCSPELLCMD) --version 2>&1 | $(GREP) -q '^scspell ' 2> /dev/null ||    \
      { $(PRINTF) '%s\n' "ERROR: $(SCSPELLCMD) command unusable."; exit 1 ; }
	@$(TEST) -f "./.scspell/dictionary.txt" 2> /dev/null ||                   \
      { $(PRINTF) '%s\n' "ERROR: scspell dictionary not found."; exit 1 ; }
	@{ for i in $$( $(FIND) "./" -exec $(GREP) -al 'scspell-id: ' "{}"        \
      2> "/dev/null" \; 2> "/dev/null" | $(GREP) -v '^\./\.git/' ); do        \
        $(PRINTF) 'SCSPELL: %s\n' "$${i:?}" ; $(SCSPELLCMD)                   \
          --override-dictionary "./.scspell/dictionary.txt" "$${i:?}";        \
            done ; }

###############################################################################
# Convenience target: Display files without scspell-id tags

.PHONY: lmscspell
lmscspell:                                                                    \
    # lmscspell:    # Display files without scspell-id tags
	@$(SCSPELLCMD) --version 2>&1 | $(GREP) -q '^scspell ' 2> /dev/null ||    \
      { $(PRINTF) '%s\n' "ERROR: $(SCSPELLCMD) command unusable."; exit 1 ; }
	@$(PRINTF) '%s\n' "*** Begin lmscspell"
	@$(GREP) -riaL 'scspell-id: ' | $(GREP) -Ev '(\.o$$|\.lz$$|\.txt$$|\.ec$$|\.ref$$|\.list$$|\.mem$$|\.out$$|\.ascii$$|dps8\/ver.h$$|dps8\/errnos.h$$|dps8\/sysdefs.h$$|perf_test\/trivial.pl1$$|\.Attic\/|\.pdf$$|\.o$$|\.d$$|\.svg$$|\.exe$$|.\yml.in$$|rebuild\.env$$|^\.git\/.|Dependency$$|tags$$|TAGS$$|bound_library_wired_$$|nqueens$$|nqueensx$$|trivial$$|segldr_boot$$|segldr_bootx$$|\/mcmb$$|\/dps8$$|\/empty$$|\/prt2pdf$$|\/unifdef$$|\/vmpctool$$|\/punutil$$|GPATH$$|\.license$$)' || $(TRUE)
	@$(PRINTF) '%s\n' "*** End lmscspell"

###############################################################################
# Convenience target: Check SPDX license data using reuse (WIP)

# TODO: Identify and mark files (in src/dps8) that need Multics tags.

# Requires reuse, GNU utilities, etc.  Tested with reuse 0.13.0.
.PHONY: spdxcheck
spdxcheck:                                                                    \
    # spdxcheck:    # Check SPDX licensing data using reuse
	@$(REUSETOOL) --version 2>&1 | $(GREP) -q '^reuse ' 2> /dev/null ||       \
      { $(PRINTF) '%s\n' "ERROR: $(REUSETOOL) command unusable."; exit 1 ; }
	@$(PRINTF) '%s\n' "*** Begin spdxcheck"
	@$(REUSETOOL) lint | $(GREP) -v '^$$' | $(SED) -n                         \
      '/^# MISSING COPYRIGHT AND LICENSING INFORMATION/,//p' | $(GREP) -v     \
        'of the REUSE Specification' | $(SED) -e 's/^\*/  \*/'                \
          -e 's/^#/\n\*/' -e 's/^\(The following \)/\n\* \1/' |               \
            $(GREP) -Ev '(* Bad licenses:|* Deprecated licenses:|* Licenses without file extension:|* Missing licenses:|* Unused licenses:|* Used licenses:)' || $(TRUE)
	@$(PRINTF) '%s\n' "*** End spdxcheck"

###############################################################################

# Local Variables:
# mode: make
# tab-width: 4
# End:
