# SPDX-License-Identifier: MIT
# scspell-id: a0892c14-f62b-11ec-a6ad-80ee73e9b8e7
# Copyright (c) 2021-2023 The DPS8M Development Team

############################################################################

set word l
set userName Clayton
set projName SysAdmin
set password password

#exp_internal -f ci_t2.debug.log 1

remove_nulls 1
match_max 14096
set timeout 750000

cd ./run

proc   w {     } { expect -re {\nr [0-9]+:[0-9]+ .*\r}; sleep 0.1 }
proc  wi {     } { expect -re {Input.\r}; sleep 0.1 }
proc  wn {     } { expect -re {\n}; sleep 0.1 }
proc  sw { txt } { send $txt; send "\r"; w  }
proc swi { txt } { send $txt; send "\r"; wi }
proc swn { txt } { send $txt; send "\r"; wn }
proc  wf {     } { expect -re {\nr  [0-9]+\r}; sleep 0.2 }
proc swf { txt } { send $txt; send "\r"; wf }

spawn telnet -E 127.0.0.1 "$env(FNPPORT)"
set telnetID $spawn_id

expect -re {HSLA Port \((d\.h\d+)}
puts " "
set channel $expect_out(1,string)
send "$channel\r"

expect "Load = "; sleep 0.1
send "$word $userName $projName\r"
expect "Password:"; sleep 0.1
sw "$password"

sw "set_tty -delay 0,0,0,0,0,0"
sw "set_tty -modes ^ll"
sw "date_time"
sw "spg 1 -of spg.log"

sw "io_call attach test tape_nstd_ foo"
sw "io_call open test sqi"
sw "io_call read test -sm r1"

send "backup_load\r"
expect "tape label:"; sleep 1
send "12.8LISTINGS\r"

expect "reloaded?"; sleep 1
sw "n"

sw "eis_tester >tools>et_scripts -repeat 2"
sw "rl -a"
swi "edm bad_divide_et_script"
swn "inst      dv3d      -nt \"divide using 3 args - repro zerodivide\""
swn "          -mf1      ar"
swn "          -mf2      ar"
swn "          -mf3      ar;"
swn ""
swn "desc 1    -sd f     -nn 61;             /* float dec(59) divisor  */"
swn "desc 2    -sd f     -nn 61;             /* float dec(59) dividend */"
swn "desc 3    -sd l     -sf 0     -nn 60;   /* fixed dec(59,0) quotient */"
swn ""
swn "data 1    \"+\" (58) \"0\" \"8\" 000;         /* divisor  = 8.0  */"
swn "data 2    \"+\" (58) \"0\" \"1\" 077;         /* dividend = 1e63 */"
swn "data 3    \"+10097419586828951109270125635619663739817042369395494461060\";"
swn "                                        /* quotient = 1.0097419586828951109270125635619663739817042369395494461060 */"
swn "."
swn "w"
sw "q"
sw "eis_tester bad_divide_et_script -long -repeat 2"
sw "rl -a"
sw "delete bad_divide_et_script"

swi "edm testluf.basic"
swn "10 PRINT \"Lockup fault test ...\""
swn "20 PRINT \"Expect: Useless loop\""
swn "30 GOTO 30"
swn "40 END"
swn "."
swn "w"
sw "q"
sw "basic -compile testluf"
sw "delete testluf.basic"
sw "testluf"
sw "rl -a"
sw "delete testluf"

sw "test_cpu -exclude 51"
sw "rl -a"
sw "test_cpu -select 51"
sw "rl -a"

sw "instr_speed"
sw "rl -a"

sw "check_cpu_speed"
sw "rl -a"

swi "edm stt.pl1"
swn "stt: proc();"
swn "  dcl  ioa_ entry() options(variable);"
swn ""
swn "  dcl 1 d aligned,"
swn "      2 n fixed bin(17)   unal,"
swn "      2 pad1 bit(1)       unal,"
swn "      2 fd5 fixed dec(5)  unal,"
swn "      2 pad2 bit(1)       unal,"
swn "      2 fd6 fixed dec(6)  unal,"
swn "      2 pad3 bit(1)       unal;"
swn ""
swn "     call ioa_ (\"  addr(d)         = ^p\", addr(d));"
swn "     call ioa_ (\"  addr(d.n)       = ^p\", addr(d.n));"
swn "     call ioa_ (\"  addr(d.pad1)    = ^p\", addr(d.pad1));"
swn "     call ioa_ (\"  addr(d.fd5)     = ^p\", addr(d.fd5));"
swn "     call ioa_ (\"  addr(d.pad2)    = ^p\", addr(d.pad2));"
swn "     call ioa_ (\"  addr(d.fd6)     = ^p\", addr(d.fd6));"
swn "     call ioa_ (\"  addr(d.pad3)    = ^p\", addr(d.pad3));"
swn ""
swn "  dcl 1 e aligned,"
swn "      2 n fixed bin(17)   unal,"
swn "      2 pad1 bit(1)       unal,"
swn "      2 fd5 float dec(5)  unal,"
swn "      2 pad2 bit(1)       unal,"
swn "      2 fd6 float dec(6)  unal,"
swn "      2 pad3 bit(1)       unal;"
swn ""
swn "     call ioa_ (\"  addr(e)         = ^p\", addr(e));"
swn "     call ioa_ (\"  addr(e.n)       = ^p\", addr(e.n));"
swn "     call ioa_ (\"  addr(e.pad1)    = ^p\", addr(e.pad1));"
swn "     call ioa_ (\"  addr(e.fd5)     = ^p\", addr(e.fd5));"
swn "     call ioa_ (\"  addr(e.pad2)    = ^p\", addr(e.pad2));"
swn "     call ioa_ (\"  addr(e.fd6)     = ^p\", addr(e.fd6));"
swn "     call ioa_ (\"  addr(e.pad3)    = ^p\", addr(e.pad3));"
swn ""
swn "     end stt;"
swn "."
swn "w"
sw "q"
sw "pl1 stt"
sw "stt"

swi "edm test_f2_data_.cds"
swn "/* HISTORY COMMENTS:"
swn "  1) change(2021-05-04,GDixon):"
swn "     Programs for checking existence of Directed Fault 3 error."
swn "                                                   END HISTORY COMMENTS */"
swn " "
swn "test_f2_data_:"
swn "     proc ();"
swn " "
swn "  dcl  create_data_segment_ entry (ptr, fixed bin (35));"
swn "  dcl  code fixed bin (35);"
swn "  dcl (dimension, addr, size, string)        builtin;"
swn " "
swn "  dcl 1 info aligned,                                       /* The data structure prepared by this .cds file.  Each   */"
swn "                                                            /*  level 2 structure defines an entrypoint created in    */"
swn "                                                            /*  the object segment output by the cds translator.      */"
swn "      2 integers,"
swn "        3 count     fixed bin init(5),"
swn "        3 iArray (5) fixed bin init(1, 2, 3, 4, 5),"
swn "      2 squares,"
swn "        3 count     fixed bin init(5),"
swn "        3 sArray (5) fixed bin init(1, 4, 9, 16, 25);"
swn " "
swn "     code = info.squares.count;"
swn "%page;"
swn "/* Now setup the call to create the mbuild_info_ data base */"
swn " "
swn "  dcl  1 cdsa aligned like cds_args;"
swn "  dcl  DATA_NAME char (15) aligned internal static options (constant) init(\"test_f2_data_\"),"
swn "       exclude_pad (1) char (32) aligned static options (constant) init(\"pad*\");"
swn ""
swn "     cdsa.sections (1).p = addr (info);"
swn "     cdsa.sections (1).len = size (info);"
swn "     cdsa.sections (1).struct_name = \"info\";"
swn "     cdsa.seg_name = DATA_NAME;"
swn "     cdsa.num_exclude_names = 1;"
swn "     cdsa.exclude_array_ptr = addr (exclude_pad);"
swn "     string (cdsa.switches) = \"0\"b;"
swn "     cdsa.switches.have_text = \"1\"b;"
swn "     call create_data_segment_ (addr (cdsa), code);"
swn "     return;"
swn " "
swn "%page;"
swn "%include cds_args;"
swn " "
swn "     end test_f2_data_;"
swn "."
swn "w"
sw "q"

swi "edm test_f2_prep.ec"
swn "&version 2"
swn "&-"
swn "&- HISTORY COMMENTS:"
swn "&-  1) change(2021-05-04,GDixon):"
swn "&-     Programs for checking existence of Directed Fault 3 error."
swn "&-                                                      END HISTORY COMMENTS"
swn "&-"
swn "&trace off"
swn "&-"
swn "&print Compiling test_f2.pl1 and test_f2_data_.cds..."
swn "delete tst_f2 test_f2_data_ -brief"
swn "pl1 test_f2 -ot -tb"
swn "cds test_f2_data_"
swn "&-"
swn "&print"
swn "&print"
swn "&print To run the test, type:  test_f2 N"
swn "&print  where N is an integer between 1 and 5 inclusive."
swn "&print"
swn "&print Each invocation of the command looks up a value for the Nth element"
swn "&print of an external array; then looks it up a second time."
swn "&print"
swn "&print If the DF3 issue is present, the first attempt produces the wrong"
swn "&print result (Test FAILS!).  The second attempt succeeds.  Subsequent"
swn "&print attempts to use test_f2 in the same process all succeed UNTIL"
swn "&print the test_f2 command is terminated:  tm test_f2"
swn "&print"
swn "&print This termination removes test_f2 linkage data from the process,"
swn "&print so the next invocation of the command has to re-snap the link to"
swn "&print the external test_f2_data_ segment; this snap triggers the error"
swn "&print on the first attempted access to the data segment."
swn "&quit"
swn "."
swn "w"
sw "q"

swi "edm test_f2.pl1"
swn "/****^  HISTORY COMMENTS:"
swn "  1) change(2021-05-04,GDixon):"
swn "     Programs for checking existence of Directed Fault 3 error."
swn "                                                   END HISTORY COMMENTS */"
swn " "
swn "test_f2:"
swn "     proc ();"
swn " "
swn "  dcl  cu_\$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));"
swn "  dcl  ioa_ entry() options(variable);"
swn "  dcl  code fixed bin (35);"
swn "  dcl (addr, dimension, length, size, string, verify)     builtin;"
swn " "
swn "  dcl 1 expected aligned,                                   /* The data structure prepared in the test_f2_data_.cds  */"
swn "                                                            /*  file.                                                */"
swn "      2 integers,"
swn "        3 count     fixed bin init(5),"
swn "        3 iArray (5) fixed bin init(1, 2, 3, 4, 5),"
swn "      2 squares,"
swn "        3 count     fixed bin init(5),"
swn "        3 sArray (5) fixed bin init(1, 4, 9, 16, 25);"
swn " "
swn " "
swn "  dcl  test_f2_data_\$integers fixed bin external;"
swn "  dcl  test_f2_data_\$squares fixed bin external;"
swn " "
swn "  dcl 1 linked_integers aligned based (addr (test_f2_data_\$integers)),"
swn "        2 count     fixed bin,"
swn "        2 array     (0 refer (linked_integers.count)) fixed bin;"
swn "  dcl 1 linked_squares  aligned based (addr (test_f2_data_\$squares)),"
swn "        2 count     fixed bin,"
swn "        2 array     (0 refer (linked_squares.count))  fixed bin;"
swn " "
swn "  dcl  arg char(arg_len) based(arg_ptr),"
swn "       arg_len fixed bin(21),"
swn "       arg_ptr ptr;"
swn "  dcl (check, index, int, ub) fixed bin aligned;"
swn "  dcl  test_result char(40) var;"
swn " "
swn "     call cu_\$arg_ptr(1, arg_ptr, arg_len, code);"
swn "     if  arg_ptr = null()  then do;"
swn "          call ioa_ (\"test_f2 - Missing argument\");"
swn "          call ioa_ (\"           Argument must be an integer between 1 and 5 inclusive.\");          "
swn "          return;"
swn "          end;"
swn " "
swn "     if  length(arg) = 0 |"
swn "         verify(arg, \"0123456789\") > 0  then do;"
swn "BAD_ARG:  call ioa_ (\"test_f2 - Invalid argument: \"\"^a\"\" \", arg);"
swn "          call ioa_ (\"           Argument must be an integer between 1 and 5 inclusive.\");"
swn "          return;"
swn "          end;"
swn " "
swn "     index = binary (arg, 17, 0);"
swn "     if  index < 1  |  index > 5  then goto BAD_ARG;"
swn " "
swn "                                                            /* Attempt 1 will fail if DF3 bug is present.             */"
swn "     int = linked_squares.array(index);                     /*  DF3 occurs in this statement.                         */"
swn "     ub  = linked_squares.count;"
swn " "
swn "     if  int ^= expected.squares.sArray(index)  then"
swn "          test_result = \"Test FAILED!\";"
swn "     else test_result = \"Test PASSED\";"
swn " "
swn "     call ioa_ (\"test_f2:  ^a\", test_result);"
swn "     call ioa_ (\"^-   squares(^d) = ^d^- Expected value: ^d\", index, int, expected.squares.sArray(index));"
swn " "
swn "                                                            /* Attempt 2 succeeds because link is now snapped.        */"
swn "     int = linked_squares.array(index);                     /*  No DF3 occurs in this statement.                      */"
swn "     ub  = linked_squares.count;"
swn " "
swn "     if  int ^= expected.squares.sArray(index)  then"
swn "          test_result = \"Test FAILED!\";"
swn "     else test_result = \"Test PASSED\";"
swn " "
swn "     call ioa_ (\"test_f2:  ^a\", test_result);"
swn "     call ioa_ (\"^-   squares(^d) = ^d^- Expected value: ^d\", index, int, expected.squares.sArray(index));"
swn " "
swn " "
swn "     end test_f2;"
swn "."
swn "w"
sw "q"

sw "ec test_f2_prep.ec"
sw "test_f2 3"

swi "edm hello.pl1"
swn "world: procedure options(main);"
swn "  dcl sysprint file output print stream;"
swn "  put list (\"Multics rulez; UNIX droolz\");"
swn "  put skip;"
swn "end world;"
swn "."
swn "w"
sw "q"
sw "pl1 hello"
sw "hello\$world"

swi "edm hello.pascal"
swn "Program Hello (Output);"
swn "Begin"
swn "WriteLn ('Multics rulez; UNIX droolz');"
swn "End."
swn "."
swn "w"
sw "q"
sw "pascal hello"
sw "hello"
sw "rl"
sw "new_proc"

send "apl\r"
expect "      "
send "'MULTICS RULEZ, UNIX DROOLZ'\r"
expect "      "
sw ")OFF"

swi "edm hello.cobol"
swn "000100 IDENTIFICATION DIVISION."
swn "000200 PROGRAM-ID.     HELLOWORLD."
swn "000300"
swn "000400*"
swn "000500 ENVIRONMENT DIVISION."
swn "000600 CONFIGURATION SECTION."
swn "000700 SOURCE-COMPUTER. RM-COBOL."
swn "000800 OBJECT-COMPUTER. RM-COBOL."
swn "000900"
swn "001000 DATA DIVISION."
swn "001100 FILE SECTION."
swn "001200"
swn "100000 PROCEDURE DIVISION."
swn "100100"
swn "100200 MAIN-LOGIC SECTION."
swn "100300 BEGIN."
swn "100500     DISPLAY \"Multics rulez, UNIX droolz\"."
swn "100600     STOP RUN."
swn "100700 MAIN-LOGIC-EXIT."
swn "100800     EXIT."
swn "."
swn "w"
sw "q"
sw "cobol hello"
sw "hello\$HELLOWORLD"

send "lisp\r"
expect "*\r"
send "(print \"Multics rulez; UNIX droolz\")\r"
expect "t \r"
sw "(quit)"

swi "edm hello.basic"
swn "10 print \"Multics rulez; UNIX droolz\""
swn "20 end"
swn "."
swn "w"
sw "q"
sw "basic hello"

swi "edm hello.fortran"
swn "      print 100"
swn "  100 format ('Multics rulez; UNIX droolz')"
swn "      end"
swn "."
swn "w"
sw "q"
sw "fortran hello"
sw "hello"

swi "edm hello.c"
swn "main ()"
swn "  {"
swn "    printf (\"Multics rulez; UNIX droolz\\n\");"
swn "  }"
swn "."
swn "w"
sw "q"
sw ">sl3p>cc>x>cc hello.c"
sw "a.out"

sw "dl hello"

swi "edm hello.bcpl"
swn "get \"head\""
swn "external"
swn "  \$("
swn "    Start = \"hello\$hello\""
swn "  \$)"
swn "let Start () be main"
swn "\$("
swn "  WriteS (\"Multics rulez, UNIX droolz*n*n\")"
swn "\$)"

swn "."
swn "w"
sw "q"
sw "bcpl hello.bcpl"
sw "hello"

swi "edm hello.cmdb"
swn "domain: char_5 char (5), char_80 char (80);"
swn "attribute: key char_5, value char_80;"
swn "relation: Entry (key* value);"
swn "."
swn "w"
sw "q"
sw "create_mrds_db hello.cmdb hello.db"
sw "mrc open hello eu"
sw "mrc store 1 Entry \"hello\" \"Multics rulez, UNIX droolz\""
sw "mrc store 1 Entry \"other\" \"All the world is not a VAX\""
sw "mrc retrieve 2 1 \"-range (e Entry) -select e.key e.value -where e.key = \"\"hello\"\"\""
sw "mrc close 1"

swf "fast"
swf "new hello.basic"
swn "10 print \"Multics rulez; UNIX droolz\""
swn "20 end"
swf "run"
send "new hello.fortran\r"
expect "quit ?"; sleep 1
swf "y"
swn "10 print 100"
swn "20 100 format ('Multics rulez; UNIX droolz')"
swn "30 end"
swf "run"
send "q\r"
expect "quit ?"; sleep 1
sw "y"

swi "edm hfp.fortran"
swn "      double precision x"
swn "      x = 1.0"
swn "      do 10 i = 1, 130"
swn "      x = x * 2.0"
swn "      print *, i, x"
swn "   10 continue"
swn "      end"
swn "."
swn "w"
sw "q"
sw "fortran hfp"
sw "hfp"
sw "rl"
sw "fortran -hfp hfp"
sw "hfp"

sw "cd fnp"
sw "cwd fnp"
sw "cp >ldd>mcs>info>site_mcs.bind_fnp"
sw "ac x (\[segs >ldd>mcs>s>*.s.archive -absp])"
sw "map355 (\[segs *.map355]) -list"
sw "bind_fnp site_mcs -list"
sw "cwd"

sw "ac x >ldd>unb>o>bound_emacs_full_ e_macops_"
sw "rename e_macops_ e_macops_orig_"
sw "ac x >ldd>unb>s>bound_emacs_full_.s e_macops_.lisp"
sw "lcp e_macops_"
sw "cob e_macops_orig_ e_macops_"

sw "cwd"

sw "pae -a"
sw "meter_signal -nfaults 25 -nframes 5 -nhandlers 2 -unclaimed 3"
sw "copy_as_meters stat_seg"
sw "print_meters stat_seg"
sw "hc_pf_meters"
sw "intm"
sw "alarm_clock_meters"
sw "disk_meters -lg"
sw "file_system_meters -ast -pg"
sw "ptp"
sw "tcm"
sw "cache_meters"
sw "link_meters"
sw "response_meters"
sw "system_link_meters"
sw "ttm"
sw "tcm"

sw "psl -admin"
sw "psl -as"
sw "psl -mcl iolog"
sw "psl -syserr"

sw "list_vols"
sw "check_mdcs root"
sw "check_mdcs RingZero"
sw "check_sst_size"
sw "check_tc_data_size"
sw "disk_queue dska"
sw "disk_usage_stat >"
sw "release"
sw "display_cpu_error"
sw "io_error_summary"
sw "ddl dska_00a -long"
sw "ddl dska_00b -long"
sw "ddl dska_00c -long"
sw "ddl dska_01a -long"
sw "ddl dska_01b -long"
sw "ddl dska_01c -long"
sw "display_pvte dska_00a -long"
sw "display_pvte dska_00b -long"
sw "display_pvte dska_00c -long"
sw "display_pvte dska_01a -long"
sw "display_pvte dska_01b -long"
sw "display_pvte dska_01c -long"
sw "display_ioi_data -a -fc"
sw "display_psp"
sw "print_devices"
sw "sweep"
sw "disk_stat_print -lv"

sw "spg -ht"
sw "pr spg.log"

swn "logout\r"
sleep 2
set timeout 4

# Scram
exec kill -9 [exp_pid $telnetID]; sleep 3
close $telnetID
exit
