	COMPILATION LISTING OF SEGMENT rcp_pointers_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  0947.2 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 rcp_pointers_:  procedure;
       14 
       15 /*	This program is an internal interface of RCP.
       16**	Created on 07/31/75 by Bill Silver.
       17**
       18**	This program returns pointers to rcp_data or rcp_com_seg.
       19**	This program has the following entries:
       20**	     1.	data    -	Returns a pointer to rcp_data.
       21**	     2.	com_seg -	Returns a pointer to rcp_com_seg.
       22**/
       23 
       24 dcl	ecode		fixed bin(35);
       25 
       26 dcl	com_seg_init_flag	bit(1)		/* ON => com_seg_ptr initialized. */
       27 	internal static	init ("0"b);
       28 dcl	data_init_flag	bit(1)		/* ON => data_ptr initialized. */
       29 	internal static	init ("0"b);
       30 
       31 dcl	com_seg_ptr	ptr	internal static;
       32 dcl	data_ptr		ptr	internal static;
       33 
       34 dcl	hcs_$initiate	entry  (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35));
       35 /*	*/
       36 data:  	entry  returns (ptr);
       37 
       38 	if   ^data_init_flag		/* Have we initiated pointer to rcp_data? */
       39 	     then do;			/* No. */
       40 		call hcs_$initiate (">system_library_1", "rcp_data", "", 0, 0, data_ptr, ecode);
       41 		data_init_flag = "1"b;
       42 	     end;
       43 
       44 	return (data_ptr);
       45 
       46 
       47 
       48 com_seg:	entry  returns (ptr);
       49 
       50 	if   ^com_seg_init_flag		/* Have we initiated pointer to rcp_com_seg? */
       51 	     then do;			/* No. */
       52 		call hcs_$initiate (">system_library_1", "rcp_com_seg", "", 0, 0, com_seg_ptr, ecode);
       53 		com_seg_init_flag = "1"b;
       54 	     end;
       55 
       56 	return (com_seg_ptr);
       57 
       58 
       59 	end  rcp_pointers_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0807.0  rcp_pointers_.pl1                 >spec>install>1111>rcp_pointers_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
com_seg_init_flag               000010 internal static bit(1)                   initial packed unaligned dcl 26 set ref 50 53*
com_seg_ptr                     000012 internal static pointer                  dcl 31 set ref 52* 56
data_init_flag                  000011 internal static bit(1)                   initial packed unaligned dcl 28 set ref 38 41*
data_ptr                        000014 internal static pointer                  dcl 32 set ref 40* 44
ecode                           000100 automatic       fixed bin(35,0)          dcl 24 set ref 40* 52*
hcs_$initiate                   000016 constant        entry                    external dcl 34 ref 40 52

NAMES DECLARED BY EXPLICIT CONTEXT.
com_seg                         000142 constant        entry                    external dcl 48
data                            000044 constant        entry                    external dcl 36
rcp_pointers_                   000031 constant        entry                    external dcl 13

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       310         330     241         320
Length       502     241        20         135      47           6

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rcp_pointers_                       136 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 com_seg_init_flag           rcp_pointers_
000011 data_init_flag              rcp_pointers_
000012 com_seg_ptr                 rcp_pointers_
000014 data_ptr                    rcp_pointers_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rcp_pointers_            000100 ecode                       rcp_pointers_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return_mac          signal_op           ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$initiate

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000030        36 000040        38 000052        40 000054        41 000123        44 000126        48 000140
     50 000150        52 000153        53 000224        56 000227


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
