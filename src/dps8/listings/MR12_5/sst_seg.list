	COMPILATION LISTING OF SEGMENT !BBBJZjXjfgFhhG
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1006.1 mst Sat
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*   *                                                         *
        5*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*   *                                                         *
        7*   * Copyright (c) 1972 by Massachusetts Institute of        *
        8*   * Technology and Honeywell Information Systems, Inc.      *
        9*   *                                                         *
       10*   *********************************************************** */
       11 
       12 
       13 sst_seg: procedure ();
       14 
       15 /* This creates the sst_seg database. Because there are no initializations performed herein,
       16*   the sst is simply declared as an automatic buffer, since it is not necessary to take
       17*   base-relative offsets. */
       18 
       19 /* Rewritten 04/19/81, W. Olin Sibert */
       20 
       21 dcl  code fixed bin (35);
       22 dcl 1 cdsa like cds_args aligned;
       23 dcl 1 sst_automatic aligned like sst automatic;
       24 
       25 dcl  create_data_segment_ entry (ptr, fixed bin (35));
       26 dcl  com_err_ entry options (variable);
       27 
       28 dcl  WHOAMI char (32) internal static options (constant) init ("sst_seg");
       29 dcl  EXCLUDE_ARRAY (1) char (32) internal static options (constant) init ("pad*");
       30 
       31 dcl (addr, dimension, null, size) builtin;
       32 
       33 /*  */
       34 
       35 	sstp = addr (sst_automatic);			/* Fill our automatic copy with zeros */
       36 	unspec (sst) = ""b;
       37 
       38 	if size (sst) ^= 512 then do; 		/* Bad */
       39 	     call com_err_ (0, WHOAMI, "The sst structure must be exactly 512 words long, not ^d.", size (sst));
       40 	     return;
       41 	     end;
       42 
       43 	unspec (cdsa) = ""b;
       44 	cdsa.have_text = "1"b;
       45 	cdsa.p (1) = sstp;
       46 	cdsa.len (1) = size (sst);
       47 	cdsa.struct_name (1) = "sst";
       48 
       49 	cdsa.seg_name = WHOAMI;
       50 	cdsa.num_exclude_names = dimension (EXCLUDE_ARRAY, 1);
       51 	cdsa.exclude_array_ptr = addr (EXCLUDE_ARRAY);
       52 
       53 	call create_data_segment_ (addr (cdsa), code);
       54 
       55 	if code ^= 0 then
       56 	     call com_err_ (code, WHOAMI, "Creating sst_seg.");
       57 
       58 	return;
       59 
       60  /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
       60 
       61  /*   BEGIN INCLUDE FILE ... sst.incl.pl1 ... January 1971 */
  2     2 /* Note: This include file has an ALM counterpart made with cif. Keep it up to date */
  2     3 /* Deleted paging device info and added pc segmove info, Benson Margulies 84-01-03 */
  2     4 /* Added covert channel meters, Keith Loepere 85-01-08. */
  2     5 
  2     6 dcl  sst_seg$ external;
  2     7 dcl  sstp ptr;
  2     8 
  2     9 dcl 1 sst based (sstp) aligned,
  2    10     2 space (8) fixed bin,				/* empty space to watch for bugs */
  2    11 
  2    12 /* SST HEADER */
  2    13 
  2    14     2 pre_page_time fixed bin (71),			/* total time spent pre-paging */
  2    15     2 post_purge_time fixed bin (71),			/* total time spent post-purging */
  2    16     2 post_in_core fixed bin,				/* total pages in core (and in list) at purge time */
  2    17     2 thrashing fixed bin,				/* meter of thrashing being done on system */
  2    18     2 npfs_misses fixed bin,				/* meter of times npfs was on when pre-paging */
  2    19     2 salv fixed bin,				/* flag which is ^=0 if and only if salvaging */
  2    20 
  2    21     2 ptl bit (36),					/* global page table loop lock */
  2    22     2 astl bit (36),				/* global ast allocation block lock */
  2    23     2 astl_event bit (36),				/* event used when waiting for AST lock */
  2    24     2 astl_notify_requested bit (1) aligned,		/* flag to notify AST lock */
  2    25     2 nused fixed bin,				/* number of pages on used list */
  2    26     2 ptwbase fixed bin (24),				/* absolute address of page table array */
  2    27     2 tfreep ptr,					/* pointer to first trailer on free list */
  2    28 
  2    29     2 astap ptr,					/* aste array pointer */
  2    30     2 ptl_wait_ct fixed bin,				/* pxss: number is >= # of processes waiting to ptl */
  2    31     2 astsize fixed bin,				/* size of an AST entry */
  2    32     2 cmesize fixed bin,				/* size of a CME entry */
  2    33     2 root_astep ptr,				/* pointer to the root AST entry */
  2    34 
  2    35     2 pts (0: 3) fixed bin,				/* array of page table sizes */
  2    36     2 level (0:3),					/* per-list information about ASTE's */
  2    37       3 (ausedp, no_aste) bit (18) unaligned,		/* used list and count of number of entries */
  2    38 
  2    39     2 (atempp, atempp1) bit (18) unal,			/* temp seg list pointer */
  2    40     2 dm_enabled bit (1) aligned,			/* ON => journal seg exists */
  2    41     2 (ainitp, ainitp1) bit (18) unal,			/* init seg list pointer */
  2    42     2 strsize fixed bin,				/* Trailer size in words. */
  2    43 
  2    44 /* CORE MAP HEADER */
  2    45 
  2    46     2 cmp ptr,					/* pointer to start of core map */
  2    47     2 usedp bit (18),				/* pointer to first used core block */
  2    48     2 wtct fixed bin,				/* count of pages being written */
  2    49 
  2    50     2 startp bit (18),				/* pointer to solid page for lap counting (fsdct) */
  2    51     2 removep bit (18),				/* pointer to list of pages being removed from use */
  2    52 						/* MISC */
  2    53 
  2    54     2 double_write fixed bin,				/* trigger for store through scheme */
  2    55 						/* 0 = no double writes,
  2    56*						   1 = all non-pd pages get written,
  2    57*						   2 = all directories get written */
  2    58     2 temp_w_event bit (36) aligned,			/* wait event for temp wiring lock */
  2    59     2 root_pvtx fixed bin,				/* pvtx or rpv */
  2    60     2 nolock bit (1) aligned,				/* if on, don't lock ptl on interrupts */
  2    61 
  2    62     2 fc_skips_pinned fixed bin (35),			/* number of skips over pinned page in find_core */
  2    63     2 cl_skips_pinned fixed bin (35),			/* number of skips over pinned page in claim_mod_core */
  2    64     2 ast_ht_ptr ptr,				/* AST hast table pointer */
  2    65     2 ast_ht_n_buckets fixed bin,			/* number of buckets in AST hash table */
  2    66     2 ast_ht_uid_mask bit (36) aligned,			/* mask to strip out low-order bits of uid */
  2    67     2 meter_ast_locking fixed bin,			/* non-zero enables AST lock meters */
  2    68     2 checksum_filemap fixed bin,			/* non-zero enables filemap checksumming */
  2    69 
  2    70     2 page_read_errors fixed bin,			/* read errors posted to page control */
  2    71     2 page_write_errors fixed bin,			/* write errors posted to page control */
  2    72 
  2    73     2 cycle_pv_allocation fixed bin,			/* flag to cycle VTOCE allocation among PVs */
  2    74 
  2    75     2 n_trailers fixed bin,				/* Number of trailer entries in str_seg */
  2    76     2 synch_activations fixed bin (35),			/* Activation attempts for synchronized segs */
  2    77     2 synch_skips fixed bin (35),			/* get_aste skips because not synchronized */
  2    78 
  2    79     2 lock_waits fixed bin,				/* Number of times we had to wait for a lock */
  2    80     2 total_locks_set fixed bin,			/* Total number of block locks set */
  2    81     2 pdir_page_faults fixed bin,			/* total page faults off >pdd */
  2    82     2 level_1_page_faults fixed bin,			/* total page faults in sys libes */
  2    83     2 dir_page_faults fixed bin,			/* Total page faults on directories */
  2    84     2 ring_0_page_faults fixed bin,			/* page faults in ring 0 */
  2    85     2 rqover fixed bin (35),				/* errcode for record quota overflow */
  2    86     2 pc_io_waits fixed bin,				/* Number of times pc had to wait on io */
  2    87 
  2    88 
  2    89 /*  The following (until pdmap) used to be the 'cnt' in cnt.incl.pl1 */
  2    90 
  2    91     2 steps fixed bin,				/* number of steps taken around used list */
  2    92     2 needc fixed bin,				/* number of times core page needed */
  2    93     2 ceiling fixed bin,				/* number of times ceiling hit */
  2    94     2 ctwait fixed bin,				/* number of times write counter was full */
  2    95     2 wired fixed bin,				/* number of pages wired by pc */
  2    96     2 laps fixed bin,				/* number of times around used list */
  2    97     2 skipw fixed bin,				/* number of pages skiped because they were wired */
  2    98     2 skipu fixed bin,				/* because of being used */
  2    99 
  2   100     2 skipm fixed bin,				/* because of being modified */
  2   101     2 skipos fixed bin,				/* because out of service */
  2   102     2 aused fixed bin,				/* number of AST entries on used list */
  2   103     2 damaged_ct fixed bin,				/* count of segments that system damaged */
  2   104     2 deact_count fixed bin,				/* count of deactivations */
  2   105     2 demand_deact_attempts fixed bin,			/* user requested deactivations */
  2   106     2 demand_deactivations fixed bin,			/* user instigated deactivations */
  2   107 
  2   108     2 reads (8) fixed bin,				/* number of reads for each did */
  2   109     2 writes (8) fixed bin,				/* number of writes for each did */
  2   110 
  2   111     2 short_pf_count fixed bin,			/* count of page faults on out of service pages */
  2   112     2 loop_locks fixed bin,				/* count of times locked PTL */
  2   113     2 loop_lock_time fixed bin (71),			/* time spent looping on PTL */
  2   114     2 cpu_sf_time fixed bin (71),			/* cpu time spent in seg_fault */
  2   115     2 total_sf_pf fixed bin,				/* total page faults while in seg_fault */
  2   116     2 total_sf fixed bin,				/* total number of seg_faults */
  2   117     2 pre_page_size fixed bin,			/* total pre-pagings expected */
  2   118     2 post_list_size fixed bin,
  2   119     2 post_purgings fixed bin,			/* total number of post-purgings */
  2   120     2 post_purge_calls fixed bin,			/* total number of calls to post-purge */
  2   121     2 pre_page_calls fixed bin,			/* total number of calls tp pre-page */
  2   122     2 pre_page_list_size fixed bin,
  2   123     2 pre_page_misses fixed bin,			/* total number of misses in pre-page list */
  2   124     2 pre_pagings fixed bin,				/* total number of pre-pagings */
  2   125 
  2   126 /*  TEMPORARY WIRED PROCEDURE INFO  */
  2   127 
  2   128     2 wire_proc_data (8) fixed bin (71),		/* data for wire_proc */
  2   129 
  2   130 /* MAIN MEMORY USAGE INFORMATION */
  2   131 
  2   132     2 abs_wired_count fixed bin,			/* count of abs-wired pages */
  2   133     2 system_type fixed bin,				/* ADP_SYSTEM or L68_SYSTEM */
  2   134     2 wired_copies fixed bin,				/* number of times a wired page was copied */
  2   135     2 recopies fixed bin,				/* number of times recopied because modified */
  2   136     2 first_core_block fixed bin,			/* core map index for first block of core */
  2   137     2 last_core_block fixed bin,			/* core map index for last block of core */
  2   138     2 fw_retries fixed bin (35),			/* force_write retries due to ASTE move */
  2   139     2 pvhtp ptr unaligned,				/* ptr to PV hold table for debugging */
  2   140 
  2   141 /*  AST METERS  */
  2   142 
  2   143     2 askipsize (0: 3) fixed bin,			/* array of skips because wrong AST size */
  2   144     2 aneedsize (0: 3) fixed bin,			/* array of times needed each size */
  2   145 
  2   146     2 stepsa fixed bin,				/* count of steps taken looking for an AST entry */
  2   147     2 askipsehs fixed bin,				/* count of skips because EHS was ON */
  2   148     2 asearches fixed bin,				/* count of full searches made */
  2   149     2 askipslevel fixed bin,				/* count of skips because pages were in core */
  2   150     2 askipsinit fixed bin,				/* count of times turned OFF init switch */
  2   151     2 acost fixed bin,				/* cumulative cost of deactivations */
  2   152     2 askipslock fixed bin,				/* count of skips because couldn't lock parent */
  2   153     2 askipdius fixed bin,				/* count of skips because DIUS was on */
  2   154 
  2   155     2 alaps fixed bin,				/* lap counter for AST list */
  2   156     2 updates fixed bin,				/* calls to updateb */
  2   157     2 setfaults_all fixed bin,			/* setfaults done to the entire SDW */
  2   158     2 setfaults_acc fixed bin,			/* setfaults done to the access field */
  2   159     2 total_bf fixed bin,				/* count of bound faults */
  2   160     2 total_bf_pf fixed bin,				/* page faults during bound faults */
  2   161     2 cpu_bf_time fixed bin (71),			/* cpu time spent in bound fault */
  2   162 
  2   163     2 asteps (0: 3) fixed bin,			/* per-size AST step counters */
  2   164 
  2   165     2 ast_locked_at_time fixed bin (71),		/* clock reading when ast last locked */
  2   166     2 ast_locked_total_time fixed bin (71),		/* total real time the ast lock was locked */
  2   167     2 ast_lock_wait_time fixed bin (71),		/* total real time of all waiting on ast lock */
  2   168     2 ast_locking_count fixed bin (35),			/* number of times ast was locked */
  2   169     2 cleanup_count fixed bin,			/* calls to pc$cleanup */
  2   170     2 cleanup_real_time fixed bin (71),			/* total real time in pc$cleanup */
  2   171 
  2   172 /* PRE-PAGE METERS */
  2   173 
  2   174     2 tree_count (0: 63) fixed bin,			/* counters for pre-page decisions */
  2   175 
  2   176     2 pp_meters (0: 63) fixed bin,			/* counters for measuring pre-page success */
  2   177 
  2   178 
  2   179     2 wusedp bit (18) aligned,			/* Relative cmep to next cme for writing */
  2   180     2 write_hunts fixed bin,				/* Times claim_mod_core invoked */
  2   181     2 claim_skip_cme fixed bin,			/* Times unacceptable cme found by c_m_c */
  2   182     2 claim_skip_free fixed bin,			/* Times free cme passed by c_m_c */
  2   183     2 claim_notmod fixed bin,				/* Times c_m_c passed pure page */
  2   184     2 claim_passed_used fixed bin,			/* Times used page seen */
  2   185     2 claim_skip_ptw fixed bin,			/* Times c_m_c saw unacceptable ptw */
  2   186     2 claim_writes fixed bin,				/* Writes queued by c_m_c */
  2   187     2 claim_steps fixed bin,				/* Steps passed in core claiming */
  2   188     2 pre_seeks_failed fixed bin,			/* counter of times quick find_core_ failed */
  2   189     2 resurrections fixed bin,			/* nulled addresses reinstated */
  2   190     2 volmap_seg_page_faults fixed bin (35),		/* Pseudo-page faults on volmap_seg */
  2   191     2 oopv fixed bin,				/* out-of-physical-volume page faults */
  2   192     2 dblw_resurrections fixed bin,			/* addresses resurrected by double-writing */
  2   193     2 sgm_time fixed bin (71),			/* Time (VCPU) in seg mover */
  2   194     2 sgm_pf fixed bin,				/* Page faults in seg moving */
  2   195     2 bad_sgms fixed bin,				/* Seg moves that failed */
  2   196     2 sgm_sgft fixed bin,				/* Seg faults in seg moves */
  2   197     2 good_sgms fixed bin,				/* Seg moves that completed */
  2   198     2 claim_runs fixed bin,				/* Times claim_mod_core had to run */
  2   199     2 activations fixed bin,				/* total count of activations */
  2   200     2 dir_activations fixed bin,			/* count of directory activations */
  2   201     2 hedge_updatevs fixed bin,			/* call-in updatevs */
  2   202     2 hedge_writes fixed bin,				/* call in core flush writes */
  2   203     2 evict_recover_data,				/* see evict_page.alm */
  2   204      3 evict_ptp bit (18) unal,			/* ptp of page being moved */
  2   205      3 evict_phmbit bit (18) unal,			/* N/Z if page was mod */
  2   206 
  2   207 /* Data for metering force_write facility 08/19/78 */
  2   208 
  2   209     2 force_swrites fixed bin,			/* Calls on segments to force write */
  2   210     2 force_pwrites fixed bin,			/* Mod pages so written */
  2   211     2 fw_none fixed bin,				/* Force write wrote none */
  2   212     2 force_updatevs fixed bin,			/* Updatev's so forced */
  2   213 
  2   214     2 pf_unlock_ptl_time fixed bin (71),		/* Time unlocking ptln page faults */
  2   215     2 pf_unlock_ptl_meterings fixed bin,
  2   216 
  2   217     2 makeknown_activations fixed bin (35),		/* activations at makeknown time */
  2   218     2 backup_activations fixed bin (35),		/* activations for backup */
  2   219     2 metering_flags aligned,				/* small chunks of misc. information */
  2   220       3 activate_activated bit (1) unal,		/* ON => last call to activate entry actually activated something */
  2   221       3 pad bit (35) unal,
  2   222     2 seg_fault_calls fixed bin (35),			/* number calls to seg_fault for explicit activation */
  2   223 
  2   224 /* METERS FOR STACK TRUNCATION */
  2   225 
  2   226     2 (stk_truncate_should_didnt,			/* counts */
  2   227        stk_truncate_should_did,
  2   228        stk_truncate_shouldnt_didnt,
  2   229        stk_truncate_shouldnt_did) fixed bin (35),
  2   230     2 stk_pages_truncated fixed bin (35),
  2   231     2 stk_pages_truncated_in_core fixed bin (35),
  2   232 
  2   233 /* SUPPORT FOR PC SEGMOVES */
  2   234 
  2   235     2 segmove_lock aligned,
  2   236       3 pid bit (36) aligned,
  2   237       3 event bit (36) aligned,
  2   238       3 notify bit (1) aligned,
  2   239     2 segmove_io_limit fixed bin, /* max read aheads */
  2   240     2 segmove_found_synch fixed bin (35), /* cme.synch_held */
  2   241     2 segmove_synch_disappeared fixed bin (35), /* page$check_synch fixed */
  2   242     2 segmove_n_reads fixed bin (35), /* total IO's queued. */
  2   243     2 segmove_max_tries fixed bin (35), /* max times through the read loop */
  2   244 
  2   245     2 segmove_astep ptr unal,				/* if non-null, addresses to be rescued from old_addr_astep */
  2   246     2 segmove_pvtx fixed bin,				/* if segmove_astep nonnull, valid */
  2   247     2 segmove_vtocx fixed bin,			/* ditto */
  2   248     2 segmove_old_addr_astep ptr unaligned,		/* ditto */
  2   249     2 segmove_new_addr_astep ptr unaligned,		/* if non-null, the addresses must be deposited. */
  2   250 
  2   251     2 mod_during_write fixed bin,			/* times a page was modified while it was being written */
  2   252     2 zero_pages fixed bin,				/* count of pages truncated because all zero */
  2   253     2 trace_sw aligned,				/* tracing control flags */
  2   254       3 pad_trace bit (32) unaligned,
  2   255       3 pc_trace_pf bit (1) unaligned,			/* tracing for page faults, done, etc. */
  2   256       3 tty_trace bit (1) unaligned,
  2   257       3 pc_trace bit (1) unaligned,			/* flag used by page control primitives */
  2   258       3 sc_trace bit (1) unaligned,			/* flag used by segment control primitives */
  2   259     2 new_pages fixed bin,				/* newly created pages */
  2   260     2 ast_track bit (1) aligned,			/* "1"b => keep SST name table */
  2   261     2 dirlock_writebehind fixed bin,			/* =1 to flush modified dir pages in lock$unlock */
  2   262     2 write_limit fixed bin,				/* Max # of outstanding writes by page control */
  2   263     2 crash_test_segmove bit (1) aligned,		/* crash in mid-segmove */
  2   264     2 delayed_seg_state_chg fixed bin (35),		/* count of times a process was delayed in affecting a seg state */
  2   265     2 audit_seg_state_chg fixed bin (35),		/* count of times a process was audited for excessive seg state changes */
  2   266     2 seg_state_chg_delay fixed bin (52),		/* total times processes were delayed for covert channels */
  2   267     2 seg_state_change_limit fixed bin,			/* number of events over which we determine covert channel bandwidth */
  2   268     2 max_seg_state_change_bw fixed bin,		/* maximum bps for covert channel before we delay */
  2   269     2 audit_seg_state_change_bw fixed bin,		/* maximum bps for covert channel before we audit */
  2   270     2 seg_state_chg_operation bit (36) aligned,		/* access_operation_ value for excessive_seg_state_chg */
  2   271     2 pad4 (126) bit (36) aligned;			/* padding to 512 words (1000)8 */
  2   272 
  2   273 /* END INCLUDE FILE sst.incl.pl1 */
       61 
       62 
       63 	end sst_seg;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0900.4  !BBBJZjXjfgFhhG.pl1               >spec>install>1115>sst_seg.cds
60           1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
61           2    01/30/85  1523.9  sst.incl.pl1                      >ldd>include>sst.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
EXCLUDE_ARRAY                   000000 constant        char(32)                 initial array packed unaligned dcl 29 set ref 50 51
WHOAMI                          000010 constant        char(32)                 initial packed unaligned dcl 28 set ref 39* 49 55*
addr                                                   builtin function         dcl 31 ref 35 51 53 53
cds_args                               based           structure                level 1 dcl 1-3
cdsa                            000102 automatic       structure                level 1 dcl 22 set ref 43* 53 53
code                            000100 automatic       fixed bin(35,0)          dcl 21 set ref 53* 55 55*
com_err_                        000014 constant        entry                    external dcl 26 ref 39 55
create_data_segment_            000012 constant        entry                    external dcl 25 ref 53
dimension                                              builtin function         dcl 31 ref 50
exclude_array_ptr        42     000102 automatic       pointer                  level 2 dcl 22 set ref 51*
have_text                44(02) 000102 automatic       bit(1)                   level 3 packed packed unaligned dcl 22 set ref 44*
len                       2     000102 automatic       fixed bin(18,0)          array level 3 dcl 22 set ref 46*
num_exclude_names        40     000102 automatic       fixed bin(17,0)          level 2 dcl 22 set ref 50*
p                               000102 automatic       pointer                  array level 3 dcl 22 set ref 45*
sections                        000102 automatic       structure                array level 2 dcl 22
seg_name                 30     000102 automatic       char(32)                 level 2 dcl 22 set ref 49*
size                                                   builtin function         dcl 31 ref 38 39 39 46
sst                                    based           structure                level 1 dcl 2-9 set ref 36* 38 39 39 46
sst_automatic                   000150 automatic       structure                level 1 dcl 23 set ref 35
sstp                            001150 automatic       pointer                  dcl 2-7 set ref 35* 36 38 39 39 45 46 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
                                                                                  2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9 2-9
struct_name               3     000102 automatic       char(32)                 array level 3 dcl 22 set ref 47*
switches                 44     000102 automatic       structure                level 2 dcl 22

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
exclude_names                          based           char(32)                 array packed unaligned dcl 1-18
null                                                   builtin function         dcl 31
sst_seg$                        000016 external static fixed bin(17,0)          dcl 2-6

NAME DECLARED BY EXPLICIT CONTEXT.
sst_seg                         000054 constant        entry                    external dcl 13

NAME DECLARED BY CONTEXT OR IMPLICATION.
unspec                                                 builtin function         set ref 36 43*

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       262         302     205         272
Length     10162     205        20        7643      54           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sst_seg                             656 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sst_seg                  000100 code                        sst_seg
                         000102 cdsa                        sst_seg
                         000150 sst_automatic               sst_seg
                         001150 sstp                        sst_seg

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000053        35 000061        36 000063        38 000066        39 000071        40 000122        43 000123
     44 000126        45 000130        46 000131        47 000132        49 000135        50 000140        51 000142
     53 000144        55 000156        58 000204


Object Segment >spec>install>1115>sst_seg
Created on 11/11/89  1006.2 mst Sat
by Hirneisen.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0    1000    3376    3406    3406
Length    4063    1000    2376      10     441       0


192 Definitions:


segname:    sst_seg

text|214        abs_wired_count
text|241        acost
text|517        activations
text|52         ainitp
text|2772       ainitp1
text|244        alaps
text|230        aneedsize
text|236        asearches
text|243        askipdius
text|235        askipsehs
text|240        askipsinit
text|224        askipsize
text|237        askipslevel
text|242        askipslock
text|72         ast_ht_n_buckets
text|70         ast_ht_ptr
text|73         ast_ht_uid_mask
text|264        ast_lock_wait_time
text|260        ast_locked_at_time
text|262        ast_locked_total_time
text|266        ast_locking_count
text|566        ast_track
text|30         astap
text|254        asteps
text|21         astl
text|22         astl_event
text|23         astl_notify_requested
text|33         astsize
text|50         atempp
text|2662       atempp1
text|600        audit_seg_state_change_bw
text|573        audit_seg_state_chg
text|126        aused
text|534        backup_activations
text|513        bad_sgms
text|116        ceiling
text|75         checksum_filemap
text|67         cl_skips_pinned
text|476        claim_notmod
text|477        claim_passed_used
text|516        claim_runs
text|474        claim_skip_cme
text|475        claim_skip_free
text|500        claim_skip_ptw
text|502        claim_steps
text|501        claim_writes
text|267        cleanup_count
text|270        cleanup_real_time
text|34         cmesize
text|54         cmp
text|252        cpu_bf_time
text|160        cpu_sf_time
text|571        crash_test_segmove
text|117        ctwait
text|100        cycle_pv_allocation
text|127        damaged_ct
text|507        dblw_resurrections
text|130        deact_count
text|572        delayed_seg_state_chg
text|131        demand_deact_attempts
text|132        demand_deactivations
text|520        dir_activations
text|110        dir_page_faults
text|567        dirlock_writebehind
text|51         dm_enabled
text|62         double_write
text|523        evict_recover_data
text|66         fc_skips_pinned
text|220        first_core_block
text|525        force_pwrites
text|524        force_swrites
text|527        force_updatevs
text|526        fw_none
text|222        fw_retries
text|515        good_sgms
text|521        hedge_updatevs
text|522        hedge_writes
text|121        laps
text|221        last_core_block
text|44         level
text|107        level_1_page_faults
text|104        lock_waits
text|156        loop_lock_time
text|154        loop_locks
text|533        makeknown_activations
text|577        max_seg_state_change_bw
text|74         meter_ast_locking
text|535        metering_flags
text|562        mod_during_write
text|101        n_trailers
text|115        needc
text|565        new_pages
text|65         nolock
text|16         npfs_misses
text|24         nused
text|506        oopv
text|76         page_read_errors
text|77         page_write_errors
text|113        pc_io_waits
text|106        pdir_page_faults
text|532        pf_unlock_ptl_meterings
text|530        pf_unlock_ptl_time
text|14         post_in_core
text|165        post_list_size
text|167        post_purge_calls
text|12         post_purge_time
text|166        post_purgings
text|372        pp_meters
text|170        pre_page_calls
text|171        pre_page_list_size
text|172        pre_page_misses
text|164        pre_page_size
text|10         pre_page_time
text|173        pre_pagings
text|503        pre_seeks_failed
text|20         ptl
text|32         ptl_wait_ct
text|40         pts
text|25         ptwbase
text|223        pvhtp
text|133        reads
text|217        recopies
text|61         removep
text|504        resurrections
text|111        ring_0_page_faults
text|36         root_astep
text|64         root_pvtx
text|112        rqover
text|17         salv
text|536        seg_fault_calls
text|576        seg_state_change_limit
text|574        seg_state_chg_delay
text|601        seg_state_chg_operation
text|555        segmove_astep
text|551        segmove_found_synch
text|550        segmove_io_limit
text|545        segmove_lock
text|554        segmove_max_tries
text|553        segmove_n_reads
text|561        segmove_new_addr_astep
text|560        segmove_old_addr_astep
text|556        segmove_pvtx
text|552        segmove_synch_disappeared
text|557        segmove_vtocx
text|247        setfaults_acc
text|246        setfaults_all
text|512        sgm_pf
text|514        sgm_sgft
text|510        sgm_time
text|153        short_pf_count
text|124        skipm
text|125        skipos
text|123        skipu
text|122        skipw
text|0          space
text|60         startp
text|114        steps
text|234        stepsa
text|543        stk_pages_truncated
text|544        stk_pages_truncated_in_core
text|540        stk_truncate_should_did
text|537        stk_truncate_should_didnt
text|542        stk_truncate_shouldnt_did
text|541        stk_truncate_shouldnt_didnt
text|53         strsize
symb|0          symbol_table
text|102        synch_activations
text|103        synch_skips
text|215        system_type
text|63         temp_w_event
text|26         tfreep
text|15         thrashing
text|250        total_bf
text|251        total_bf_pf
text|105        total_locks_set
text|163        total_sf
text|162        total_sf_pf
text|564        trace_sw
text|272        tree_count
text|245        updates
text|56         usedp
text|505        volmap_seg_page_faults
text|174        wire_proc_data
text|120        wired
text|216        wired_copies
text|473        write_hunts
text|570        write_limit
text|143        writes
text|57         wtct
text|472        wusedp
text|563        zero_pages


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
