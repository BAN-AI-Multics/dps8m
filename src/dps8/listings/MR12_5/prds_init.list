	COMPILATION LISTING OF SEGMENT prds_init
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1027.5 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 /* PRDS_INIT - Copy Template Info into new PRDS.
       14*          Modified 2/11/76 by Noel I. Morris	
       15*	Modified 2/22/81 by J. Bongiovanni for fast connect code initialization
       16*	       and to move some initializations from prds.cds
       17*											*/
       18 
       19 prds_init: proc (pp, tag, idle_ptr);
       20 
       21 dcl  pp ptr,
       22      idle_ptr ptr,
       23      tag fixed bin (3);
       24 
       25 dcl  p1 ptr,
       26      code fixed bin (35),
       27      basedptr ptr based (pp),
       28      basedbit36 bit (36) aligned based (pp),
       29      basedfixed fixed bin(17) based (pp) ;
       30 
       31 
       32 
       33 
       34 dcl fast_connect_init entry (ptr, fixed bin (3), fixed bin (35));
       35 dcl syserr entry options (variable);
       36 
       37 dcl  prds$ fixed bin ext,
       38      prds$cache_luf_reg bit (36) aligned ext,
       39      prds$processor_tag ext bit (36) aligned,
       40      prds$idle_ptr ptr ext;
       41 
       42 dcl (addr, null, ptr, rel, size) builtin;
       43 
       44 
       45 
  1     1 /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  1     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  1     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  1     4 /*	Modified April 1983 by C. Hornig for tasking */
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  1     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  1     9*     added the heap_header_ptr definition.
  1    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  1    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  1    12*     Modified to support control point management.  These changes were actually
  1    13*     made in February 1985 by G. Palter.
  1    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  1    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  1    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  1    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  1    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  1    19*     (ITS pair).
  1    20*                                                   END HISTORY COMMENTS */
  1    21 
  1    22 /* format: style2 */
  1    23 
  1    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  1    25 
  1    26      dcl	   1 stack_header	      based (sb) aligned,
  1    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  1    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  1    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  1    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  1    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  1    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  1    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  1    34 	     2 pad4	      bit (2) unal,
  1    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  1    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  1    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  1    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  1    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  1    40 	     2 null_ptr	      ptr,		/*  (16)  */
  1    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  1    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  1    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  1    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  1    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  1    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  1    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  1    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  1    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  1    50 	     2 return_no_pop_op_ptr
  1    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  1    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  1    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  1    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  1    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  1    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  1    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  1    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  1    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  1    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  1    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  1    62 	     2 trace,
  1    63 	       3 frames,
  1    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  1    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  1    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  1    67 	     2 pad2	      bit (36),		/*  (61) */
  1    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  1    69 
  1    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  1    71 
  1    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  1    73 						/* (551) octal */
  1    74 
  1    75 
  1    76 /*	The following constants are offsets within this transfer vector table.  */
  1    77 
  1    78      dcl	   (
  1    79 	   call_offset	      fixed bin init (271),
  1    80 	   push_offset	      fixed bin init (272),
  1    81 	   return_offset	      fixed bin init (273),
  1    82 	   return_no_pop_offset   fixed bin init (274),
  1    83 	   entry_offset	      fixed bin init (275)
  1    84 	   )		      internal static;
  1    85 
  1    86 
  1    87 
  1    88 
  1    89 
  1    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  1    91*	move the whole stack header should use this overlay.
  1    92**/
  1    93 
  1    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  1    95 
  1    96 
  1    97 
  1    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
       46 
       47 
       48 
       49 
       50 /* Copy the stack header from the top of the prds.
       51*   Then set up the stack pointer.
       52*    */
       53 	sb = addr (prds$);
       54 	pp -> stack_header_overlay = sb -> stack_header_overlay;
       55 
       56 	pp -> stack_header.signal_ptr = null ();
       57 	pp -> stack_header.sct_ptr = null ();
       58 
       59 	p1 = ptr (pp, rel (addr (prds$cache_luf_reg)));
       60 	p1 -> basedbit36 = "000000000003"b3;
       61 
       62 	p1 = ptr (pp, rel (addr (prds$processor_tag)));
       63 	p1 -> basedfixed = tag;
       64 
       65 	p1 = ptr (pp, rel (addr (prds$idle_ptr)));
       66 	p1 -> basedptr = idle_ptr;
       67 
       68 	call fast_connect_init (pp, tag, code);
       69 	if code^=0 
       70 	     then call syserr (1, "prds_init: Invalid size for prds$fast_connect_code");
       71 
       72 	return;
       73 
       74 /* BEGIN MESSAGE DOCUMENTATION
       75*
       76*Message:
       77*prds_init: Invalid size for prds$fast_connect_code
       78*
       79*S:	$crash
       80*
       81*T:	$init
       82*
       83*M:	There is an inconsistency between modules prds and
       84*fast_connect_init on the boot tape.  Specifically, the amount of
       85*space allocated for fast connect code in the prds does not
       86*agree with the size of the code in fast_connect_init.  The
       87*most likely cause is that one of these modules is not
       88*up to date.
       89*
       90*A:	$contact_sa
       91*A new boot tape must be generated with the proper versions of
       92*modules prds and fast_connect_init.
       93*
       94*
       95*END MESSAGE DOCUMENTATION */
       96 
       97      end prds_init;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0825.5  prds_init.pl1                     >special_ldd>install>MR12.3-1114>prds_init.pl1
46           1    11/07/86  1550.3  stack_header.incl.pl1             >ldd>include>stack_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 42 ref 53 59 62 65
basedbit36                             based           bit(36)                  dcl 25 set ref 60*
basedfixed                             based           fixed bin(17,0)          dcl 25 set ref 63*
basedptr                               based           pointer                  dcl 25 set ref 66*
code                            000102 automatic       fixed bin(35,0)          dcl 25 set ref 68* 69
fast_connect_init               000010 constant        entry                    external dcl 34 ref 68
idle_ptr                               parameter       pointer                  dcl 21 ref 19 66
null                                                   builtin function         dcl 42 ref 56 57
p1                              000100 automatic       pointer                  dcl 25 set ref 59* 60 62* 63 65* 66
pp                                     parameter       pointer                  dcl 21 set ref 19 54 56 57 59 62 65 68*
prds$                           000014 external static fixed bin(17,0)          dcl 37 set ref 53
prds$cache_luf_reg              000016 external static bit(36)                  dcl 37 set ref 59
prds$idle_ptr                   000022 external static pointer                  dcl 37 set ref 65
prds$processor_tag              000020 external static bit(36)                  dcl 37 set ref 62
ptr                                                    builtin function         dcl 42 ref 59 62 65
rel                                                    builtin function         dcl 42 ref 59 62 65
sb                              000104 automatic       pointer                  dcl 1-24 set ref 53* 54 54
sct_ptr                  54            based           pointer                  level 2 dcl 1-26 set ref 57*
signal_ptr               30            based           pointer                  level 2 dcl 1-26 set ref 56*
size                                                   builtin function         dcl 42 ref 54
stack_header                           based           structure                level 1 dcl 1-26 set ref 54
stack_header_overlay                   based           fixed bin(17,0)          array dcl 1-94 set ref 54* 54
syserr                          000012 constant        entry                    external dcl 35 ref 69
tag                                    parameter       fixed bin(3,0)           dcl 21 set ref 19 63 68*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
call_offset                            internal static fixed bin(17,0)          initial dcl 1-78
entry_offset                           internal static fixed bin(17,0)          initial dcl 1-78
push_offset                            internal static fixed bin(17,0)          initial dcl 1-78
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 1-78
return_offset                          internal static fixed bin(17,0)          initial dcl 1-78
tv_offset                              internal static fixed bin(17,0)          initial dcl 1-72

NAME DECLARED BY EXPLICIT CONTEXT.
prds_init                       000027 constant        entry                    external dcl 19

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       240         264     145         250
Length       454     145        24         154      72           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
prds_init                           110 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
prds_init                000100 p1                          prds_init
                         000102 code                        prds_init
                         000104 sb                          prds_init

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
fast_connect_init             syserr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
prds$                         prds$cache_luf_reg            prds$idle_ptr                 prds$processor_tag




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000023        53 000034        54 000036        56 000044        57 000046        59 000051        60 000057
     62 000061        63 000067        65 000071        66 000077        68 000102        69 000120        72 000144


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
