	COMPILATION LISTING OF SEGMENT !BBBJZjXlNzZfNz
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1037.0 mst Sat
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*   *                                                         *
        5*   * Copyright, (C) Honeywell Bull Inc., 1987                *
        6*   *                                                         *
        7*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        8*   *                                                         *
        9*   * Copyright (c) 1972 by Massachusetts Institute of        *
       10*   * Technology and Honeywell Information Systems, Inc.      *
       11*   *                                                         *
       12*   *********************************************************** */
       13 
       14 
       15 
       16 
       17 /* HISTORY COMMENTS:
       18*  1) change(89-10-02,Farley), approve(89-10-19,MCR8144),
       19*     audit(89-10-20,Parisek), install(89-10-30,MR12.3-1102):
       20*     Corrected the declaration of access_audit_count.  It had two "fixed bin"
       21*     dcls that are now being diagnosed as a severity-3 error with rev 32e of
       22*     the pl1 compiler.
       23*                                                   END HISTORY COMMENTS */
       24 
       25 
       26 /* format: style3,idind30 */
       27 
       28 active_hardcore_data:
       29      proc;
       30 
       31 /* This program creates the active_hardcore_data data base */
       32 
       33 /* Last modified (Date and reason):
       34*   2/6/76	by S. Webber Initial coding */
       35 /* 9/76 by S. Barr to add hash table sizes and new alloc sizes */
       36 /* Modified 7/77 by THVV for new system_free_seg stuff */
       37 /* 10/18/77 RE Mullen to set system_free_seg event to nonzero */
       38 /* 10/3/79 by BSG for ahd$n_dir_sizes */
       39 /* 03*12*80 by BIM for the io_daemon tag'ed rule */
       40 /* December 1981 by C. Hornig to remove dir sizes. */
       41 /* BIM 4/82 remove system_free_seg. */
       42 /* June 1982 by J. Bongiovanni to add pdd, sl1 unique id */
       43 /* 830621 BIM for validation_fix_severity, a tuning parameter */
       44 /* 84-11-09 by EJ Sharpe for new access_audit_* meter arrays */
       45 /* 84-11-23 by KP Loepere to move pam flush stuff from active_all_rings_data. */
       46 /* 84-12-27 by KP Loepere for pdir_dir_quota. */
       47 /* 85-01-09 by EJ Sharpe for access_audit_num_meters */
       48 /* 1985-01-27, EJ Sharpe: removed old protection_audit_ meters */
       49 /* 1985-04-08, BIM: audit_ring1_fs_object_ops */
       50 
       51 /* Automatic */
       52 
       53 dcl	1 cdsa			aligned like cds_args;
       54 dcl	code			fixed bin (35);
       55 dcl	pam_flush_buffer_size	fixed bin;
       56 
       57 /* Static */
       58 
       59 dcl	active_hardcore_dataname	char (20) aligned static init ("active_hardcore_data") options (constant);
       60 dcl	exclude_pad		(1) char (32) aligned static options (constant) init ("pad*");
       61 
       62 /* Builtins */
       63 
       64 dcl	(addr, bin, dimension, hbound, mod, rel, size, string, unspec)
       65 				builtin;
       66 
       67 /* Entries */
       68 
       69 dcl	com_err_			entry options (variable);
       70 dcl	create_data_segment_	entry (ptr, fixed bin (35));
       71 
       72 	pam_flush_buffer_size = dimension (active_hardcore_data$pam_flush_buffer, 1);
       73 
       74 	begin;					/* allow automatic size for pam_flush_buffer */
       75 
       76 dcl	1 AHD			aligned automatic,
       77 	  2 user_unlock_lock	bit (36),		/* lock set when unlocking invalid user lock */
       78 						/* per-system constants */
       79 	  2 pdir_quota		fixed bin (35),	/* max system quota on pdr */
       80 	  2 pdir_dir_quota		fixed bin (35),
       81 	  2 cold_boot_switch	bit (36),		/* indicates if boot is cold or warm */
       82 	  2 sl1_uid		bit (36),		/* unique ID of current sl1 */
       83 	  2 pdd_uid		bit (36),		/* unique ID of current pdd */
       84 	  2 dir_arearp		fixed bin (35),	/* offset of allocation area */
       85 	  2 metering_interval	fixed bin (35),	/* 30 days in fs time */
       86 	  2 nalloc_sizes		fixed bin (35),	/* no. of allocation sizes in dir */
       87 	  2 alloc_sizes		bit (0) aligned,	/* Some ALM programs reference as an array */
       88 	  2 aclsize		fixed bin (35),	/* Size of an ACL entry */
       89 	  2 ensize		fixed bin (35),	/* Size of an entry name */
       90 	  2 elcsize		fixed bin (35),	/* entry/link common size */
       91 	  2 esize			fixed bin (35),	/* Size of an entry */
       92 	  2 link_max		fixed bin,	/* Largest size of a link */
       93 	  2 ht_sizes		(3) fixed bin,	/* Hash table blocks for sizes 2,  3,  and 4 */
       94 	  2 dir_hdrsize		fixed bin (35),	/* Number of words in directory header */
       95 	  2 num_hash_table_sizes	fixed bin (35),	/* Number of hash table sizes */
       96 	  2 hash_table_sizes	(4) fixed bin (35), /* Hash table sizes */
       97 	  2 pad1			(11) fixed bin (35),/* directory sizes used to be here */
       98 	  2 audit_ring1_fs_object_ops bit (1) aligned,	/* never turn on pds$no_audit_ring1_fs_object_ops */
       99 	  2 link_meters		(72) fixed bin (35),/* meters of linker */
      100 	  2 lock_meters,				/* meters for dir locks */
      101 	    3 lock		bit (36),		/* lock for lock meters */
      102 	    3 total_waits		fixed bin,	/* no. of times waited for lock */
      103 	    3 total_time_waiting	fixed bin (52),	/* time spent waiting for locks */
      104 	    3 max_time_waiting	fixed bin (52),	/* most time waiting for locks */
      105 	    3 l_meters		(0:2),		/* meters for locks for reading writing and modifying */
      106 	      4 total_locks		fixed bin,	/* no. of locks for this purpose */
      107 	      4 total_pf		fixed bin,	/* pfs taken while locked for this purpose */
      108 	      4 total_cpu		fixed bin (71),	/* time spent locked for this purpose */
      109 	      4 max_cpu		fixed bin (71),	/* most time spent locked for this purpose */
      110 	      4 max_pf		fixed bin,	/* pfs taken while most time spent */
      111 	      4 total_dirpf		fixed bin,	/* dir pfs taken while locked */
      112 	      4 max_dirpf		fixed bin,	/* dir pfs taken while most time spent locked */
      113 	      4 padl		fixed bin,
      114 	  2 max_hashes		fixed bin (35),	/* longest hash search */
      115 	  2 hashes		(12) fixed bin (35),/* histogram of length of hash searches */
      116 	  2 total_cpu_ac		fixed bin (71),	/* time of access computations */
      117 	  2 max_cpu_ac		fixed bin (71),	/* time of longest access computation */
      118 	  2 total_ac		fixed bin (35),	/* no. of access computations */
      119 	  2 total_pf_ac		fixed bin (35),	/* pfs while computing access */
      120 	  2 max_pf_ac		fixed bin (35),	/* most pfs during access computation */
      121 	  2 pf_long_ac		fixed bin (35),	/* pfs for longest access computation */
      122 	  2 nacls_long_ac		fixed bin (35),	/* no. ACL entries searched during longest access computation */
      123 	  2 max_acls_ac		fixed bin (35),	/* most ACL entries searched during access computation */
      124 	  2 acls_ac		(0:12) fixed bin (35),
      125 						/* histogram of ACL entries searched during access computations */
      126 	  2 pad2			fixed bin,
      127 /**** meters for access_audit_  */
      128 /****     There are currently 42 buckets.  The number is
      129*		derived from the number of audit flags as follows:
      130*		
      131*		1) There are 6 buckets for each object type audited
      132*		(currently fsobj, fsattr, rcp, admin, special, and
      133*		other).  The 6 buckets are for grant/deny of the read,
      134*		modify, and modify_access operation types.
      135*
      136*		2) There is one bucket for each event flag (currently
      137*		priv_op, admin_op, fault, small_channel, and
      138*		moderate_channel).
      139*
      140*		3) The last bucket is reserved for events which do not
      141*		fit into any other bucket (mostly for debugging) */
      142 	  2 access_audit_num_meters /* constant 42 */
      143 				fixed bin,
      144 	  2 access_audit_count /* number of invocations */
      145 				(42) fixed bin (35),
      146 	  2 access_audit_check_count /* number of invocations just to check flags */
      147 				(42) fixed bin (35),
      148 	  2 access_audit_cpu_time /* total VCPU time */
      149 				(42) fixed bin (71),
      150 	  2 access_audit_pagefaults /* total pagefaults */
      151 				(42) fixed bin (35),
      152 	  2 pad3			(28) fixed bin,	/* system default search rules data for initiate_search_rules */
      153 	  2 search_rules_lock,			/* Lock on default search rules */
      154 	    3 pid			bit (36),
      155 	    3 event		fixed bin (35),
      156 	    3 notify_sw		bit (1),
      157 	  2 n_sr_tags		fixed bin,	/* Number of search rule tags */
      158 	  2 n_sys_rules		fixed bin,	/* Number of search rules */
      159 	  2 sr_tag		(36),		/* array of rule tags */
      160 	    3 name		char (32),	/* tag name */
      161 	    3 flag		bit (36),		/* tag key */
      162 	  2 search_rule		(50),		/* array of dir names */
      163 	    3 name		char (168),	/* dir name */
      164 	    3 flag		bit (36),		/* which tags want this dir */
      165 	  2 validation_fix_severity	fixed bin,
      166 	  2 pam_flush_level		fixed bin (35),	/* # this bootload */
      167 	  2 pam_flush_buffer	(pam_flush_buffer_size) bit (36);
      168 
      169 /* Now begins the initialization */
      170 
      171 	     unspec (AHD) = ""b;
      172 	     AHD.validation_fix_severity = -1;		/* no syserr at all */
      173 	     AHD.search_rules_lock.event = 101101101000000000000000000b;
      174 						/* Event is 000555000000 */
      175 	     AHD.search_rule (1).name = "initiated_segments";
      176 	     AHD.search_rule (2).name = "referencing_dir";
      177 	     AHD.search_rule (3).name = "working_dir";
      178 	     AHD.search_rule (4).name = ">system_library_standard";
      179 	     AHD.search_rule (5).name = ">system_library_unbundled";
      180 	     AHD.search_rule (6).name = ">system_library_1";
      181 	     AHD.search_rule (7).name = ">system_library_tools";
      182 	     AHD.search_rule (8).name = ">system_library_auth_maint";
      183 	     AHD.search_rule (1).flag = "101"b;
      184 	     AHD.search_rule (2).flag = "101"b;
      185 	     AHD.search_rule (3).flag = "101"b;
      186 	     AHD.search_rule (4).flag = "111"b;
      187 	     AHD.search_rule (5).flag = "111"b;
      188 	     AHD.search_rule (6).flag = "111"b;
      189 	     AHD.search_rule (7).flag = "111"b;
      190 	     AHD.search_rule (8).flag = "110"b;
      191 	     AHD.sr_tag (1).name = "default";
      192 	     AHD.sr_tag (2).name = "system_libraries";
      193 	     AHD.sr_tag (3).name = "io_daemon";
      194 	     AHD.sr_tag (1).flag = "1"b;		/* 10000000..  */
      195 	     AHD.sr_tag (2).flag = "01"b;		/* 0100000.... */
      196 	     AHD.sr_tag (3).flag = "001"b;		/* 0010000.... */
      197 	     AHD.n_sr_tags = 3;
      198 	     AHD.n_sys_rules = 8;
      199 	     AHD.pdir_quota = 1024;
      200 	     AHD.pdir_dir_quota = 102;
      201 	     AHD.num_hash_table_sizes = 4;
      202 	     AHD.hash_table_sizes (1) = 61;
      203 	     AHD.hash_table_sizes (2) = 251;
      204 	     AHD.hash_table_sizes (3) = 1021;
      205 	     AHD.hash_table_sizes (4) = 2039;
      206 	     AHD.metering_interval = 39550767;		/* 30 days in file system time */
      207 	     AHD.nalloc_sizes = 8;
      208 	     AHD.aclsize = 8;
      209 	     AHD.ensize = 14;
      210 	     AHD.elcsize = 24;
      211 	     AHD.esize = 38;
      212 	     AHD.link_max = 72;
      213 	     AHD.ht_sizes (1) = 130;
      214 	     AHD.ht_sizes (2) = 516;
      215 	     AHD.ht_sizes (3) = 1024;
      216 	     AHD.dir_hdrsize = 64;
      217 	     AHD.dir_arearp = AHD.dir_hdrsize;		/* area follows header */
      218 	     AHD.access_audit_num_meters = hbound (access_audit_count, 1);
      219 
      220 /* Now make some checks on alignment of certain variables */
      221 
      222 	     call check (addr (AHD.total_cpu), "total_cpu", 2);
      223 	     call check (addr (AHD.max_cpu), "max_cpu", 2);
      224 	     call check (addr (AHD.total_cpu_ac), "total_cpu_ac", 2);
      225 	     call check (addr (AHD.max_cpu_ac), "max_cpu_ac", 2);
      226 	     call check (addr (AHD.pad3), "pad3", 2);
      227 
      228 /* Now set up call to create data base */
      229 
      230 	     cdsa.sections (1).p = addr (AHD);
      231 	     cdsa.sections (1).len = size (AHD);
      232 	     cdsa.sections (1).struct_name = "AHD";
      233 
      234 	     cdsa.seg_name = "active_hardcore_data";
      235 	     cdsa.num_exclude_names = 1;
      236 	     cdsa.exclude_array_ptr = addr (exclude_pad);
      237 
      238 	     string (cdsa.switches) = "0"b;
      239 	     cdsa.switches.have_text = "1"b;
      240 
      241 	     call create_data_segment_ (addr (cdsa), code);
      242 
      243 check:
      244      proc (where, message, modulo);
      245 
      246 dcl	where			ptr;
      247 dcl	message			char (*);
      248 dcl	modulo			fixed bin;
      249 
      250 	if mod (bin (rel (where), 18), modulo) ^= 0
      251 	then call com_err_ (0, active_hardcore_dataname, "The variable ^a is not aligned on a ^d-word boundary.",
      252 		message, modulo);
      253 
      254      end check;
      255 	end;					/* begin block */
      256 
  1     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
      257 
      258 
  2     1 /* BEGIN INCLUDE FILE pathname_am.incl.pl1 MODIFIED Februrary 2, 1976 BY R. Bratt */
  2     2 /* Modified November 1984 by Keith Loepere to change PAM to use uid's. */
  2     3 
  2     4 dcl  active_hardcore_data$pam_flush_level fixed bin (34) ext,
  2     5      active_hardcore_data$pam_flush_buffer (0:31) bit (36) aligned ext;
  2     6 
  2     7 dcl  pds$pathname_am ext;
  2     8 
  2     9 dcl  PAM_name_max_lth fixed bin (17) static options (constant) init (68);
  2    10 
  2    11 dcl  amp ptr;
  2    12 dcl 1 pam aligned based (amp),
  2    13     2 (fp,					/* head of circular pam entry list */
  2    14      bp) ptr unaligned,
  2    15     2 (sets,					/* number of times a pathname was loaded into pam */
  2    16      gets,					/* number of requests for segno given pathname */
  2    17      hits,					/* number of sucessful searches for segno */
  2    18      getps,					/* number of requests for pathname given segno */
  2    19      hitps,					/* number of sucessful searches for pathname */
  2    20      rejects,					/* number of pathnames that were too big to fit in pam */
  2    21      clears,					/* number of times a directory was terminated */
  2    22      cleared,					/* number of entries wiped in clears */
  2    23      flushes,					/* number of times pam was flushed due to directory rename */
  2    24      flushed,					/* number of entries cleared in response to flushes */
  2    25      overflows,					/* number of times entire pam had to be flushed */
  2    26      overflow_uids,					/* number of times too many uids in flush buffer appeared in addr space */
  2    27      initial_flush_level,				/* global pam flush level at process creation time */
  2    28      flush_level) fixed bin (35),			/* last pam flush level seen */
  2    29     2 search (30) aligned,
  2    30       3 fp ptr unaligned,
  2    31       3 bp ptr unaligned,
  2    32       3 segno fixed bin (17) unaligned,
  2    33       3 name_len fixed bin (17) unaligned,
  2    34       3 name char (68);
  2    35 
  2    36 dcl  amep ptr;
  2    37 dcl 1 ame based (amep) like pam.search;
  2    38 
  2    39 /* END INCLUDE FILE pathname_am.incl.pl1             						*/
      259 
      260 
  3     1 /* BEGIN INCLUDE FILE syserr_constants.incl.pl1 ... 11/11/80 W. Olin Sibert */
  3     2 /* 85-02-12, EJ Sharpe - Added sorting class constants, removed AIM_MESSAGE, added new action code names. */
  3     3 /* 85-04-24, G. Palter - Renamed SYSERR_UNUSED_10 to SYSERR_RING1_ERROR to reflect its actual use. */
  3     4 
  3     5 /* This include file has an ALM version.  Keep 'em in sync! */
  3     6 
  3     7 dcl (
  3     8 
  3     9 /* The following constants define the message action codes.  This indicates
  3    10*how a message is to be handled.  */
  3    11 
  3    12      SYSERR_CRASH_SYSTEM	init (1),			
  3    13      CRASH		init (1), 		/* Crash the system, and bleat plaintively. */
  3    14 
  3    15      SYSERR_TERMINATE_PROCESS	init (2),
  3    16      TERMINATE_PROCESS	init (2), 		/* Terminate the process, print the message, and beep. */
  3    17 
  3    18      SYSERR_PRINT_WITH_ALARM	init (3),
  3    19      BEEP 		init (3), 		/* Beep and print the message on the console. */
  3    20 
  3    21      SYSERR_PRINT_ON_CONSOLE	init (0),
  3    22      ANNOUNCE		init (0), 		/* Just print the message on the console. */
  3    23 
  3    24      SYSERR_LOG_OR_PRINT	init (4),
  3    25      LOG			init (4), 		/* Log the message, or print it if it can't be logged */
  3    26 
  3    27      SYSERR_LOG_OR_DISCARD	init (5),
  3    28      JUST_LOG		init (5), 		/* Just try to log the message, and discard it if it can't be */
  3    29 
  3    30 
  3    31 /* The following constants are added to the normal severities to indicate
  3    32*different sorting classes of messages.  */
  3    33 
  3    34      SYSERR_SYSTEM_ERROR	init (00),		/* indicates a standard level system error */
  3    35      SYSERR_RING1_ERROR	init (10),		/* indicates an error detected in ring 1 (mseg_, RCP) */
  3    36      SYSERR_COVERT_CHANNEL	init (20),		/* indicates covert channel audit trail message */
  3    37      SYSERR_UNSUCCESSFUL_ACCESS init (30),		/* indicates access denial audit trail message */
  3    38      SYSERR_SUCCESSFUL_ACCESS	init (40)			/* indicates access grant audit trail message */
  3    39 	) fixed bin internal static options (constant);
  3    40 
  3    41 /* END INCLUDE FILE syserr_constants.incl.pl1 */
      261 
      262      end active_hardcore_data;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0824.5  !BBBJZjXlNzZfNz.pl1               >special_ldd>install>MR12.3-1114>active_hardcore_data.cds
257          1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
259          2    01/30/85  1221.4  pathname_am.incl.pl1              >ldd>include>pathname_am.incl.pl1
261          3    05/17/85  0615.7  syserr_constants.incl.pl1         >ldd>include>syserr_constants.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AHD                             000100 automatic       structure                level 1 dcl 76 set ref 171* 230 231
SYSERR_LOG_OR_DISCARD           000000 constant        fixed bin(17,0)          initial dcl 3-7
access_audit_count      267     000100 automatic       fixed bin(35,0)          array level 2 dcl 76 set ref 218
access_audit_num_meters
                        266     000100 automatic       fixed bin(17,0)          level 2 dcl 76 set ref 218*
aclsize                  11     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 208*
active_hardcore_data$pam_flush_buffer
                                000020 external static bit(36)                  array dcl 2-4 ref 72
active_hardcore_dataname        000011 constant        char(20)                 initial dcl 59 set ref 250*
addr                                                   builtin function         dcl 64 ref 222 222 223 223 224 224 225 225 226 226
                                                                                  230 236 241 241
amp                             000150 automatic       pointer                  dcl 2-11 ref 2-12 2-12 2-12 2-12 2-12 2-12 2-12 2-12
                                                                                  2-12 2-12 2-12 2-12 2-12 2-12 2-12 2-12 2-12 2-12
                                                                                  2-12 2-12 2-12 2-12 2-12
bin                                                    builtin function         dcl 64 ref 250
cds_args                               based           structure                level 1 dcl 1-3
cdsa                            000100 automatic       structure                level 1 dcl 53 set ref 241 241
code                            000145 automatic       fixed bin(35,0)          dcl 54 set ref 241*
com_err_                        000012 constant        entry                    external dcl 69 ref 250
create_data_segment_            000014 constant        entry                    external dcl 70 ref 241
dimension                                              builtin function         dcl 64 ref 72
dir_arearp                6     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 217*
dir_hdrsize              21     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 216* 217
elcsize                  13     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 210*
ensize                   12     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 209*
esize                    14     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 211*
event                   647     000100 automatic       fixed bin(35,0)          level 3 dcl 76 set ref 173*
exclude_array_ptr        42     000100 automatic       pointer                  level 2 dcl 53 set ref 236*
exclude_pad                     000001 constant        char(32)                 initial array dcl 60 set ref 236
flag                   1431     000100 automatic       bit(36)                  array level 3 in structure "AHD" dcl 76
                                                                                  in begin block on line 74 set ref 183* 184* 185*
                                                                                  186* 187* 188* 189* 190*
flag                    663     000100 automatic       bit(36)                  array level 3 in structure "AHD" dcl 76
                                                                                  in begin block on line 74 set ref 194* 195* 196*
hash_table_sizes         23     000100 automatic       fixed bin(35,0)          array level 2 dcl 76 set ref 202* 203* 204* 205*
have_text                44(02) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 53 set ref 239*
hbound                                                 builtin function         dcl 64 ref 218
ht_sizes                 16     000100 automatic       fixed bin(17,0)          array level 2 dcl 76 set ref 213* 214* 215*
l_meters                162     000100 automatic       structure                array level 3 dcl 76
len                       2     000100 automatic       fixed bin(18,0)          array level 3 dcl 53 set ref 231*
link_max                 15     000100 automatic       fixed bin(17,0)          level 2 dcl 76 set ref 212*
lock_meters             154     000100 automatic       structure                level 2 dcl 76
max_cpu                 166     000100 automatic       fixed bin(71,0)          array level 4 dcl 76 set ref 223 223
max_cpu_ac              240     000100 automatic       fixed bin(71,0)          level 2 dcl 76 set ref 225 225
message                                parameter       char                     packed unaligned dcl 247 set ref 243 250*
metering_interval         7     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 206*
mod                                                    builtin function         dcl 64 ref 250
modulo                                 parameter       fixed bin(17,0)          dcl 248 set ref 243 250 250*
n_sr_tags               651     000100 automatic       fixed bin(17,0)          level 2 dcl 76 set ref 197*
n_sys_rules             652     000100 automatic       fixed bin(17,0)          level 2 dcl 76 set ref 198*
nalloc_sizes             10     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 207*
name                    653     000100 automatic       char(32)                 array level 3 in structure "AHD" dcl 76
                                                                                  in begin block on line 74 set ref 191* 192* 193*
name                   1357     000100 automatic       char(168)                array level 3 in structure "AHD" dcl 76
                                                                                  in begin block on line 74 set ref 175* 176* 177*
                                                                                  178* 179* 180* 181* 182*
num_exclude_names        40     000100 automatic       fixed bin(17,0)          level 2 dcl 53 set ref 235*
num_hash_table_sizes     22     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 201*
p                               000100 automatic       pointer                  array level 3 dcl 53 set ref 230*
pad3                    612     000100 automatic       fixed bin(17,0)          array level 2 dcl 76 set ref 226 226
pam                                    based           structure                level 1 dcl 2-12
pam_flush_buffer_size           000146 automatic       fixed bin(17,0)          dcl 55 set ref 72* 76
pdir_dir_quota            2     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 200*
pdir_quota                1     000100 automatic       fixed bin(35,0)          level 2 dcl 76 set ref 199*
rel                                                    builtin function         dcl 64 ref 250
search                   20            based           structure                array level 2 dcl 2-12
search_rule            1357     000100 automatic       structure                array level 2 dcl 76
search_rules_lock       646     000100 automatic       structure                level 2 dcl 76
sections                        000100 automatic       structure                array level 2 dcl 53
seg_name                 30     000100 automatic       char(32)                 level 2 dcl 53 set ref 234*
size                                                   builtin function         dcl 64 ref 231
sr_tag                  653     000100 automatic       structure                array level 2 dcl 76
string                                                 builtin function         dcl 64 set ref 238*
struct_name               3     000100 automatic       char(32)                 array level 3 dcl 53 set ref 232*
switches                 44     000100 automatic       structure                level 2 dcl 53 set ref 238*
total_cpu               164     000100 automatic       fixed bin(71,0)          array level 4 dcl 76 set ref 222 222
total_cpu_ac            236     000100 automatic       fixed bin(71,0)          level 2 dcl 76 set ref 224 224
unspec                                                 builtin function         dcl 64 set ref 171*
validation_fix_severity
                       5525     000100 automatic       fixed bin(17,0)          level 2 dcl 76 set ref 172*
where                                  parameter       pointer                  dcl 246 ref 243 250

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ANNOUNCE                               constant        fixed bin(17,0)          initial dcl 3-7
BEEP                                   constant        fixed bin(17,0)          initial dcl 3-7
CRASH                                  constant        fixed bin(17,0)          initial dcl 3-7
JUST_LOG                               constant        fixed bin(17,0)          initial dcl 3-7
LOG                                    constant        fixed bin(17,0)          initial dcl 3-7
PAM_name_max_lth                       constant        fixed bin(17,0)          initial dcl 2-9
SYSERR_COVERT_CHANNEL                  constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_CRASH_SYSTEM                    constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_LOG_OR_PRINT                    constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_PRINT_ON_CONSOLE                constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_PRINT_WITH_ALARM                constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_RING1_ERROR                     constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_SUCCESSFUL_ACCESS               constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_SYSTEM_ERROR                    constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_TERMINATE_PROCESS               constant        fixed bin(17,0)          initial dcl 3-7
SYSERR_UNSUCCESSFUL_ACCESS             constant        fixed bin(17,0)          initial dcl 3-7
TERMINATE_PROCESS                      constant        fixed bin(17,0)          initial dcl 3-7
active_hardcore_data$pam_flush_level
                                000016 external static fixed bin(34,0)          dcl 2-4
ame                                    based           structure                level 1 packed packed unaligned dcl 2-37
amep                            000152 automatic       pointer                  dcl 2-36
exclude_names                          based           char(32)                 array packed unaligned dcl 1-18
pds$pathname_am                 000022 external static fixed bin(17,0)          dcl 2-7

NAMES DECLARED BY EXPLICIT CONTEXT.
active_hardcore_data            000157 constant        entry                    external dcl 28
check                           000501 constant        entry                    internal dcl 243 ref 222 223 224 225 226

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       774        1020     670        1004
Length      4414     670        24        3360     103           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
active_hardcore_data                108 external procedure  is an external procedure.  
begin block on line 74              128 begin block         uses auto adjustable storage.  
check                                   internal procedure  shares stack frame of begin block on line 74.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
active_hardcore_data     000100 cdsa                        active_hardcore_data
                         000145 code                        active_hardcore_data
                         000146 pam_flush_buffer_size       active_hardcore_data
                         000150 amp                         active_hardcore_data
                         000152 amep                        active_hardcore_data
begin block on line 74   000100 AHD                         begin block on line 74

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
enter_begin_block   leave_begin_block   call_ext_out_desc   call_ext_out        return_mac          alloc_auto_adj
mdfx1               ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
active_hardcore_data$pam_flush_buffer




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     28 000156        72 000164        74 000166        76 000171       171 000200       172 000210       173 000212
    175 000214       176 000217       177 000222       178 000225       179 000230       180 000233       181 000236
    182 000241       183 000244       184 000246       185 000247       186 000250       187 000252       188 000253
    189 000254       190 000255       191 000257       192 000262       193 000265       194 000270       195 000272
    196 000274       197 000276       198 000300       199 000302       200 000304       201 000306       202 000310
    203 000312       204 000314       205 000316       206 000320       207 000322       208 000324       209 000325
    210 000327       211 000331       212 000333       213 000335       214 000337       215 000341       216 000343
    217 000345       218 000347       222 000351       223 000364       224 000376       225 000413       226 000427
    230 000441       231 000444       232 000447       234 000452       235 000455       236 000457       238 000461
    239 000462       241 000464       255 000477       243 000501       250 000512       254 000560       262 000561


Object Segment >special_ldd>install>MR12.3-1114>active_hardcore_data
Created on 11/11/89  1037.2 mst Sat
by Hirneisen.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0    5570    6300    6310    6310
Length    7040    5570     510      10     514       0


48 Definitions:


segname:    active_hardcore_data

text|341        access_audit_check_count
text|267        access_audit_count
text|414        access_audit_cpu_time
text|266        access_audit_num_meters
text|540        access_audit_pagefaults
text|250        acls_ac
text|11         aclsize
text|11         alloc_sizes
text|42         audit_ring1_fs_object_ops
text|3          cold_boot_switch
text|6          dir_arearp
text|21         dir_hdrsize
text|13         elcsize
text|12         ensize
text|14         esize
text|23         hash_table_sizes
text|221        hashes
text|16         ht_sizes
text|15         link_max
text|43         link_meters
text|154        lock_meters
text|247        max_acls_ac
text|240        max_cpu_ac
text|220        max_hashes
text|244        max_pf_ac
text|7          metering_interval
text|651        n_sr_tags
text|652        n_sys_rules
text|246        nacls_long_ac
text|10         nalloc_sizes
text|22         num_hash_table_sizes
text|5527       pam_flush_buffer
text|5526       pam_flush_level
text|5          pdd_uid
text|2          pdir_dir_quota
text|1          pdir_quota
text|245        pf_long_ac
text|1357       search_rule
text|646        search_rules_lock
text|4          sl1_uid
text|653        sr_tag
symb|0          symbol_table
text|242        total_ac
text|236        total_cpu_ac
text|243        total_pf_ac
text|0          user_unlock_lock
text|5525       validation_fix_severity


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
