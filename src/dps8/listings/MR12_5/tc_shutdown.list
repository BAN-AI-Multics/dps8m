	COMPILATION LISTING OF SEGMENT tc_shutdown
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1040.9 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 tc_shutdown: proc;
       14 
       15 /* Modified by E Stone on 5/74 to call deactivate_segs rather than deact_proc and to turn wait enable on */
       16 
       17 dcl  aptptr ptr,					/* pointer to apt entry */
       18      sstp ptr,					/* pointer to SST */
       19      pds_astep ptr;					/* pointer to the aste for the pds of a process */
       20 
       21 dcl  i fixed bin,					/* variable used to loop through APT */
       22      state fixed bin,				/* executation state of a process */
       23      size fixed bin,				/* number of entries in APT */
       24      length fixed bin;				/* number of words per apte */
       25 
       26 dcl  sst_seg$ fixed bin ext,
       27      tc_data$apt_size fixed bin ext,
       28      tc_data$apt_entry_size fixed bin ext,
       29      tc_data$initializer_id ext bit (36) aligned,
       30      tc_data$system_shutdown fixed bin ext,
       31      tc_data$wait_enable fixed bin ext,
       32      tc_data$apt fixed bin ext;
       33 
       34 dcl  deactivate_segs entry (ptr);
       35 
       36 dcl (addr, addrel, bin) builtin;
       37 
  1     1 /*  BEGIN INCLUDE FILE ... apte.incl.pl1 */
  1     2 
  1     3 /* Modified 1984-11-11 by E. Swenson for IPC event channel validation. */
  1     4 
  1     5 dcl  aptep pointer;
  1     6 
  1     7 dcl 1 apte based (aptep) aligned,			/* APT entry declaration for an active (known) process */
  1     8     2 thread unaligned,				/* List thread */
  1     9       3 fp bit (18),				/* Forward pointer */
  1    10       3 bp bit (18),				/* Backward pointer */
  1    11     2 flags unaligned,				/* Flags and miscellaneous */
  1    12       3 mbz bit (1),				/* This bit must be zero (sentinel bit) */
  1    13       3 wakeup_waiting bit (1),			/* ON if process has received wakeup */
  1    14       3 stop_pending bit (1),				/* ON if process has received stop connect */
  1    15       3 pre_empted bit (1),				/* ON if process is being pre-empted by get_processor */
  1    16       3 hproc bit (1),				/* ON if process is hardcore process */
  1    17       3 loaded bit (1),				/* ON if required per-process pages are in memory and wired */
  1    18       3 eligible bit (1),				/* ON if process is eligible */
  1    19       3 idle bit (1),				/* ON if  this is an idle process */
  1    20       3 interaction bit (1),				/* ON if process has interacted recently */
  1    21       3 pre_empt_pending bit (1),			/* ON if process has received pre-empt connect */
  1    22       3 default_procs_required bit (1),			/* ON if apte.procs_required is system default */
  1    23       3 realtime_burst bit (1),			/* ON if next eligibility is realtime */
  1    24       3 always_loaded bit (1),			/* ON if process is not to be unloaded */
  1    25       3 dbr_loaded bit (1),				/* ON if DBR is loaded on some CPU */
  1    26       3 being_loaded bit (1),				/* ON if somebody loading this process */
  1    27       3 shared_stack_0 bit (1),			/* ON if a shared stack_0 is assigned */
  1    28       3 page_wait_flag bit (1),			/* flag ON if waiting for page */
  1    29       3 firstsw bit (1),				/* OFF until process is intialized */
  1    30       3 state bit (18),				/* execution state */
  1    31     2 page_faults fixed bin (35),			/* total page faults for the process */
  1    32     2 processid bit (36),				/* bit 0-17: offset of ATPE */
  1    33 						/* bit 18-35: sequential number */
  1    34     2 te fixed bin (35),				/* virtual time since eligibility award */
  1    35     2 ts fixed bin (35),				/* virtual time since scheduling */
  1    36     2 ti fixed bin (35),				/* virtual time since interaction */
  1    37     2 timax fixed bin (35),				/* maximum value allowed for apte.ti */
  1    38 
  1    39 /* * * * * * * * */
  1    40 
  1    41     2 ipc_pointers unaligned,
  1    42       3 event_thread bit (18),			/* relative pointer to ITT list */
  1    43       3 pad3 bit (18),
  1    44     2 ips_message bit (36),				/* IPS signals pending */
  1    45     2 asteps unaligned,				/* relative ASTE pointers */
  1    46       3 pds bit (18),				/* PDS (per-process) */
  1    47       3 dseg bit (18),				/* DSEG (per-process) */
  1    48       3 prds bit (18),				/* PRDS (per-processor) */
  1    49     2 savex7 bit (18) unaligned,			/* x7 at call to getwork (return point in pxss) */
  1    50     2 term_processid bit (36),			/* process to send wakeup at temination */
  1    51     2 lock_id bit (36),				/* File System unqieu ID associated with process */
  1    52     2 time_used_clock fixed bin (71),			/* Total CPU time when process last lost CPU */
  1    53 
  1    54 /* * * * * * * * */
  1    55 
  1    56     2 wait_event bit (36) aligned,			/* Event ID process awaiting */
  1    57     2 wct_index bit (18) unaligned,			/* rel offset of WCTE */
  1    58     2 flags2 unaligned,
  1    59       3 priority_scheduling bit (1),			/* ON if guaranteed eligibility */
  1    60       3 special_wakeups bit (6),			/* Special wakeup channels */
  1    61       3 pad7 bit (7),
  1    62       3 batch bit (1),				/* ON if absentee */
  1    63       3 pr_tag bit (3),				/* CPU tag running or last run */
  1    64     2 state_change_time fixed bin (71),			/* Time apte.state last changed */
  1    65     2 alarm_event fixed bin (71),			/* wakeup event for alarm clock manager */
  1    66     2 alarm_time_thread bit (18) unaligned,		/* thread of processes with pending alarms */
  1    67     2 alarm_time bit (54) unaligned,			/* wakeup time for alarm */
  1    68 
  1    69 /* * * * * * */
  1    70 
  1    71     2 term_channel fixed bin (71),			/* wakeup event for account overflow */
  1    72     2 ws_size fixed bin,				/* working set estimate for the process */
  1    73     2 temax fixed bin (35),				/* maximum eligibility slice (vcpu) */
  1    74     2 deadline fixed bin (71),			/* time of next run */
  1    75     2 lock bit (18) unaligned,			/* 0 => APTE locked, unlocked => return point of last unlock */
  1    76     2 unusable bit (18) unaligned,			/* locking routines destroy */
  1    77     2 cpu_monitor fixed bin (35),			/* if not 0, send wakeup to term_processid when virtual cpu
  1    78*						/* reaches this (units = 1/1024 sec) */
  1    79     2 paging_measure fixed bin (71),			/* cumulative memory units */
  1    80     2 access_authorization bit (72),			/* authorization of this process */
  1    81     2 dbr fixed bin (71),				/* DBR value (constant since DSEG entry-held) */
  1    82 
  1    83     2 virtual_cpu_time fixed bin (71),			/* cumulative virtual CPU time for the process */
  1    84     2 ittes_sent fixed bin (18),			/* Unprocessed ITTs sent by this process */
  1    85     2 ittes_got fixed bin (18),			/* Unprocessed ITTs received by this process */
  1    86 
  1    87 /*  Cells used to drive and instrument finite-state model for response time
  1    88*    measurement. Maintained by meter_response_time */
  1    89 
  1    90     2 current_response_state fixed bin (17) unaligned,	/* Process state in modle */
  1    91     2 pad18 bit (18) unaligned,
  1    92     2 number_processing fixed bin (35),			/* Number interactions */
  1    93     2 last_response_state_time fixed bin (71),		/* Clock time at last response state change */
  1    94     2 total_processing_time fixed bin (71),		/* Total interaction processing time */
  1    95 
  1    96 /* * * * * * */
  1    97 
  1    98     2 begin_interaction_vcpu fixed bin (71),		/* Virtual cpu at beginning of last interaction */
  1    99 
  1   100 /*  End of cells for finite-state model */
  1   101 
  1   102     2 saved_temax fixed bin (35),			/* temax at eligibility award */
  1   103     2 procs_required bit (8) unaligned,			/* bit mask of CPUs this process can run */
  1   104     2 pad4 bit (28) unaligned,
  1   105     2 ipc_r_offset fixed bin (18) unsigned,
  1   106     2 ipc_r_factor fixed bin (35) unsigned,
  1   107     2 apad (10) fixed bin (35);
  1   108 
  1   109 /*  END INCLUDE FILE ... apte.incl.pl1 */
       38 
       39 
       40 /* 
       41*   */
       42 
       43 	tc_data$system_shutdown = 1;
       44 	tc_data$wait_enable = 0;			/* make sure we are only process running */
       45 
       46 	aptptr = addr (tc_data$apt);
       47 	size = tc_data$apt_size;
       48 	length = tc_data$apt_entry_size;
       49 	sstp = addr (sst_seg$);
       50 
       51 /* destroy all processes except initializer and idle processes */
       52 
       53 	do i = 1 to size;
       54 	     state = bin(aptptr -> apte.flags.state, 18);
       55 	     if state = 0 | state = 5
       56 		then go to end_apt_loop;
       57 	     if aptptr -> apte.processid = tc_data$initializer_id
       58 		then go to end_apt_loop;
       59 	     if aptptr -> apte.flags.idle
       60 		| aptptr -> apte.flags.hproc
       61 		then go to end_apt_loop;
       62 	     pds_astep = ptr (sstp, aptptr -> apte.asteps.pds);
       63 	     call deactivate_segs (pds_astep);
       64 
       65 end_apt_loop:  
       66 	     aptptr = addrel (aptptr, length);
       67 	end;
       68 
       69 /* 	return;				/* All done */
       70 
       71      end tc_shutdown;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0800.7  tc_shutdown.pl1                   >spec>install>1110>tc_shutdown.pl1
38           1    01/06/85  1422.2  apte.incl.pl1                     >ldd>include>apte.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 36 ref 46 49
addrel                                                 builtin function         dcl 36 ref 65
apte                                   based           structure                level 1 dcl 1-7
aptptr                          000100 automatic       pointer                  dcl 17 set ref 46* 54 57 59 59 62 65* 65
asteps                   12            based           structure                level 2 packed packed unaligned dcl 1-7
bin                                                    builtin function         dcl 36 ref 54
deactivate_segs                 000026 constant        entry                    external dcl 34 ref 63
flags                     1            based           structure                level 2 packed packed unaligned dcl 1-7
hproc                     1(04)        based           bit(1)                   level 3 packed packed unaligned dcl 1-7 ref 59
i                               000106 automatic       fixed bin(17,0)          dcl 21 set ref 53*
idle                      1(07)        based           bit(1)                   level 3 packed packed unaligned dcl 1-7 ref 59
length                          000111 automatic       fixed bin(17,0)          dcl 21 set ref 48* 65
pds                      12            based           bit(18)                  level 3 packed packed unaligned dcl 1-7 ref 62
pds_astep                       000104 automatic       pointer                  dcl 17 set ref 62* 63*
processid                 3            based           bit(36)                  level 2 dcl 1-7 ref 57
size                            000110 automatic       fixed bin(17,0)          dcl 21 set ref 47* 53
sst_seg$                        000010 external static fixed bin(17,0)          dcl 26 set ref 49
sstp                            000102 automatic       pointer                  dcl 17 set ref 49* 62
state                     1(18)        based           bit(18)                  level 3 in structure "apte" packed packed unaligned
                                                                                  dcl 1-7 in procedure "tc_shutdown" ref 54
state                           000107 automatic       fixed bin(17,0)          dcl 21 in procedure "tc_shutdown" set ref 54* 55 55
tc_data$apt                     000024 external static fixed bin(17,0)          dcl 26 set ref 46
tc_data$apt_entry_size          000014 external static fixed bin(17,0)          dcl 26 ref 48
tc_data$apt_size                000012 external static fixed bin(17,0)          dcl 26 ref 47
tc_data$initializer_id          000016 external static bit(36)                  dcl 26 ref 57
tc_data$system_shutdown         000020 external static fixed bin(17,0)          dcl 26 set ref 43*
tc_data$wait_enable             000022 external static fixed bin(17,0)          dcl 26 set ref 44*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
aptep                                  automatic       pointer                  dcl 1-5

NAMES DECLARED BY EXPLICIT CONTEXT.
end_apt_loop                    000063 constant        label                    dcl 65 ref 55 57 59
tc_shutdown                     000001 constant        entry                    external dcl 13

NAME DECLARED BY CONTEXT OR IMPLICATION.
ptr                                                    builtin function         ref 62

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       202         232      72         212
Length       420      72        30         151     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tc_shutdown                          80 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tc_shutdown              000100 aptptr                      tc_shutdown
                         000102 sstp                        tc_shutdown
                         000104 pds_astep                   tc_shutdown
                         000106 i                           tc_shutdown
                         000107 state                       tc_shutdown
                         000110 size                        tc_shutdown
                         000111 length                      tc_shutdown

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
deactivate_segs

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sst_seg$                      tc_data$apt                   tc_data$apt_entry_size        tc_data$apt_size
tc_data$initializer_id        tc_data$system_shutdown       tc_data$wait_enable




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000000        43 000006        44 000010        46 000011        47 000013        48 000015        49 000017
     53 000021        54 000031        55 000035        57 000041        59 000045        62 000050        63 000055
     65 000063        67 000067        71 000071


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
