ASSEMBLY LISTING OF SEGMENT >spec>install>1115>vtoc_search.alm                                                                                                                                      
ASSEMBLED ON:	11/11/89  0939.6 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                                     8  
                                     9  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    10  "
                                    11  "	vtoc_search - Routine to manage vtoc_buffer_seg's 
                                    12  "	     hash table
                                    13  "
                                    14  "	Entries:
                                    15  "
                                    16  "	     hash_in  - hashes a VTOCE buffer desc into a list
                                    17  "
                                    18  "	     hash_out - hashes a VTOCE buffer desc out of a list
                                    19  "
                                    20  "	     search - searches for a given PVTE, VTOCE index
                                    21  "
                                    22  "	Written February 1982 by J. Bongiovanni
                                    23  "
                                    24  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    25  
    000000                          26  	name	vtoc_search
                                    27  
                        000002      28  	entry	hash_in
                        000015      29  	entry	hash_out
                        000037      30  	entry	search
                                    31  
                                    32  	temp	save_pvtx_vtocx
                                    33  
    000000                          34  null_ptr:
    000000  aa   077777 000043      35  	its	-1,1
    000001  aa   000001 000000 
                                    36  "
                                    37  	include vtoc_buffer
                                   1-1  
                                   1-2  
                                   1-3       "BEGIN INCLUDE FILE vtoc_buffer.incl.alm
                                   1-4  
                                   1-5  
                                   1-6  	"Created 11/08/82  1802.8 est Mon by convert_include_file,
                                   1-7  	"   Version of 07/15/82  2104.3 est Thu.
                                   1-8  
                                   1-9  	"Made from >udd>m>bongo>htd>dm_dir>vtoc_buffer.incl.pl1,
                                  1-10  	"   modified 11/08/82  1535.3 est Mon
                                  1-11  
                                  1-12  "
                                  1-13  "	Structure vtoc_buffer
                                  1-14  "
                                  1-15  
                        000000    1-16  	equ	vtoc_buffer.lock,0		" LEVEL 2
                                  1-17  
                        000000    1-18  	equ	vtoc_buffer.processid,0
                        000001    1-19  	equ	vtoc_buffer.wait_event,1
                                  1-20  
                        000002    1-21  	equ	vtoc_buffer.notify_sw_word,2
                        400000    1-22  	bool	vtoc_buffer.notify_sw,400000	" DU
                                  1-23  
                        000003    1-24  	equ	vtoc_buffer.n_bufs,3
                        000004    1-25  	equ	vtoc_buffer.n_hash_buckets,4
                        000005    1-26  	equ	vtoc_buffer.hash_mask,5
                        000006    1-27  	equ	vtoc_buffer.abs_addr,6
                                  1-28  
                                  1-29  "	equ	vtoc_buffer.wait_event_constant_word,7
                                  1-30  "	equ	vtoc_buffer.wait_event_constant_shift,0
                                  1-31  
                        000010    1-32  	equ	vtoc_buffer.buf_desc_offset,8	" UPPER
                                  1-33  
                        000011    1-34  	equ	vtoc_buffer.buf_offset,9	" UPPER
                                  1-35  
                        000012    1-36  	equ	vtoc_buffer.hash_table_offset,10 " UPPER
                                  1-37  
                        000013    1-38  	equ	vtoc_buffer.search_index,11
                        000014    1-39  	equ	vtoc_buffer.unsafe_pvtx,12
                                  1-40  "	equ	vtoc_buffer.scavenger_free_p_clock,13
                        000016    1-41  	equ	vtoc_buffer.meters,14	" LEVEL 2
                                  1-42  
                        000016    1-43  	equ	vtoc_buffer.call_get,14
                        000017    1-44  	equ	vtoc_buffer.call_put,15
                        000020    1-45  	equ	vtoc_buffer.call_alloc,16
                        000021    1-46  	equ	vtoc_buffer.call_free,17
                        000022    1-47  	equ	vtoc_buffer.call_await,18
                        000023    1-48  	equ	vtoc_buffer.steps,19
                        000024    1-49  	equ	vtoc_buffer.skip_os,20
                        000025    1-50  	equ	vtoc_buffer.skip_hot,21
                        000026    1-51  	equ	vtoc_buffer.skip_wait,22
                        000027    1-52  	equ	vtoc_buffer.disk_reads,23
                        000030    1-53  	equ	vtoc_buffer.disk_writes,24
                        000031    1-54  	equ	vtoc_buffer.get_buffer_calls,25
                        000032    1-55  	equ	vtoc_buffer.get_buffer_hits,26
                        000033    1-56  	equ	vtoc_buffer.wait_calls,27
                        000034    1-57  	equ	vtoc_buffer.wait_os,28
                                  1-58  "	equ	vtoc_buffer.scavenger_free_checks,29
                                  1-59  "	equ	vtoc_buffer.scavenger_free_losses,30
                                  1-60  
                        000056    1-61  	equ	vtoc_buffer.hash_table,46	" UPPER
                                  1-62  
                        000000    1-63  	equ	vtoc_buffer.buf_desc,0	" LEVEL 2
                                  1-64  
                        000000    1-65  	equ	vtoc_buffer.buffer,0	" LEVEL 2
                                  1-66  
                                  1-67  
                                  1-68  "
                                  1-69  "	Structure vtoc_buf_desc_array
                                  1-70  "
                                  1-71  
                                  1-72  "
                                  1-73  "	Structure vtoc_buf_desc
                                  1-74  "
                        000003    1-75  	equ	vtoc_buf_desc_size,3
                                  1-76  
                        000000    1-77  	equ	vtoc_buf_desc.pvtx,0	" UPPER
                        000000    1-78  	equ	vtoc_buf_desc.vtocx,0	" LOWER
                                  1-79  
                        000001    1-80  	equ	vtoc_buf_desc.parts_used_word,1
                        000041    1-81  	equ	vtoc_buf_desc.parts_used_shift,33
                        000007    1-82  	bool	vtoc_buf_desc.parts_used_mask,000007
                        000001    1-83  	equ	vtoc_buf_desc.err_word,1
                        040000    1-84  	bool	vtoc_buf_desc.err,040000	" DU
                        000001    1-85  	equ	vtoc_buf_desc.notify_sw_word,1
                        020000    1-86  	bool	vtoc_buf_desc.notify_sw,020000 " DU
                        000001    1-87  	equ	vtoc_buf_desc.write_sw_word,1
                        010000    1-88  	bool	vtoc_buf_desc.write_sw,010000	" DU
                        000001    1-89  	equ	vtoc_buf_desc.os_word,1
                        004000    1-90  	bool	vtoc_buf_desc.os,004000	" DU
                        000001    1-91  	equ	vtoc_buf_desc.ioq_word,1
                        002000    1-92  	bool	vtoc_buf_desc.ioq,002000	" DU
                        000001    1-93  	equ	vtoc_buf_desc.used_word,1
                        001000    1-94  	bool	vtoc_buf_desc.used,001000	" DU
                        000001    1-95  	equ	vtoc_buf_desc.wait_index,1	" LOWER
                                  1-96  
                        000002    1-97  	equ	vtoc_buf_desc.ht_thread,2	" UPPER
                        000002    1-98  	equ	vtoc_buf_desc.buf_rel,2	" LOWER
                                  1-99  
                                 1-100  "
                                 1-101  "	Structure vtoce_buffer_array
                                 1-102  "
                                 1-103  
                                 1-104  "
                                 1-105  "	Structure vtoce_buffer
                                 1-106  "
                        000300   1-107  	equ	vtoce_buffer_size,192
                                 1-108  
                                 1-109  
                        000000   1-110  	equ	vtoce_buffer.parts,0	" LEVEL 2
                                 1-111  
                        000000   1-112  	equ	vtoce_buffer.words,0
                                 1-113  
                        000003   1-114  	equ	N_PARTS_PER_VTOCE,3		" MANIFEST
                        000100   1-115  	equ	VTOCE_PART_SIZE,64		" MANIFEST
                        000300   1-116  	equ	VTOCE_BUFFER_SIZE,0192	" MANIFEST
                        000005   1-117  	equ	N_VTOCE_PER_RECORD,5	" MANIFEST
                        000003   1-118  	equ	N_SECTOR_PER_VTOCE,3	" MANIFEST
                                 1-119  
                                 1-120       "END INCLUDE FILE vtoc_buffer.incl.alm
                                    38  "
                                    39  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    40  "
                                    41  "	call vtoc_search$hash_in (vtoc_buf_descp)
                                    42  "
                                    43  "	     where vtoc_buf_descp -> buffer descriptor of interest
                                    44  "
                                    45  "	Must be called with VTOC buffer locked
                                    46  "
                                    47  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    48  
    000002                          49  hash_in:
    000002  aa   000060 6270 00     50  	push
    000003  aa  7 00040 2721 20
    000004  aa  0 00002 3521 20     51  	eppbp	ap|2,*		" bp -> vtoc_buf_descp
    000005  aa  2 00000 3521 20     52  	eppbp	bp|0,*		" bp -> vtoc_buf_desc
    000006  aa  2 00000 2351 00     53  	lda	bp|vtoc_buf_desc.pvtx " Areg has pvtx in Upper, vtocx in Lower
    000007  0a   000071 7070 00     54  	tsx7	setup		" Set pointers, compute hash table index
    000010  aa  2 00000 6201 00     55  	eax0	bp|0		" x0 = offset of this vtoc_buf_desc
    000011  aa  3 00056 2231 12     56  	ldx3	bb|vtoc_buffer.hash_table,x2 " x3 = 1st offset this bucket
    000012  aa  3 00056 7401 12     57  	stx0	bb|vtoc_buffer.hash_table,x2 " Make this the first
    000013  aa  2 00002 7431 00     58  	stx3	bp|vtoc_buf_desc.ht_thread   " And the first shall be next
    000014  aa  7 00042 7101 20     59  	return
                                    60  "
                                    61  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    62  "
                                    63  "	call vtoc_search$hash_out (vtoc_buf_descp)
                                    64  "
                                    65  "	where vtoc_buf_descp -> VTOC buffer descriptor of interest
                                    66  "
                                    67  "	This must be called with the VTOC buffer lock
                                    68  "
                                    69  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    70  
    000015                          71  hash_out:
    000015  aa   000060 6270 00     72  	push
    000016  aa  7 00040 2721 20
    000017  aa  0 00002 3521 20     73  	eppbp	ap|2,*		" bp -> vtoc_buf_descp
    000020  aa  2 00000 3521 20     74  	eppbp	bp|0,*		" bp -> vtoc_buf_desc
    000021  aa  2 00000 2351 00     75  	lda	bp|vtoc_buf_desc.pvtx " Areg has pvtx in Upper, vtocx in Lower
    000022  0a   000071 7070 00     76  	tsx7	setup		" Set pointers, compute hash index
    000023  0a   000056 7070 00     77  	tsx7	search_it		" Look for this one in list
    000024  aa   000000 6210 11     78  	eax1	0,x1		" Found?
    000025  0a   000036 6000 00     79  	tze	hash_out_returns	" No - shouldn't happen
    000026  aa  2 00002 2231 00     80  	ldx3	bp|vtoc_buf_desc.ht_thread  " x3 = offset of next after this
    000027  aa   000000 6200 10     81  	eax0	0,x0		" x0 = offset of previous
    000030  0a   000033 6000 00     82  	tze	hash_out_empty	" None previous
    000031  aa  3 00002 7431 10     83  	stx3	bb|vtoc_buf_desc.ht_thread,x0 " Link previous to next
    000032  0a   000034 7100 00     84  	tra	hash_out_common
    000033                          85  hash_out_empty:
    000033  aa  3 00056 7431 12     86  	stx3	bb|vtoc_buffer.hash_table,x2  " Make next the first
    000034                          87  hash_out_common:
    000034  aa   000000 6230 00     88  	eax3	0		" Clear thread offset
    000035  aa  2 00002 7431 00     89  	stx3	bp|vtoc_buf_desc.ht_thread  " In this one
    000036                          90  hash_out_returns:
    000036  aa  7 00042 7101 20     91  	return
                                    92  "
                                    93  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                    94  "
                                    95  "	call vtoc_search$search (pvtx, vtocx, vtoc_buf_descp)
                                    96  "
                                    97  "	where
                                    98  "
                                    99  "	     pvtx = rel offset of PVTE (Input)
                                   100  "	     vtocx = VTOCE index (Input)
                                   101  "	     vtoc_buf_descp = ptr to vtoc_buf_desc or null
                                   102  "
                                   103  "	This must be called with the VTOC buffer lock.
                                   104  "
                                   105  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                   106  
    000037                         107  search:
    000037  aa   000060 6270 00    108  	push
    000040  aa  7 00040 2721 20
    000041  aa  0 00002 2351 20    109  	lda	ap|2,*		" pvtx 
    000042  aa   777777 3750 07    110  	ana	-1,dl		" Strip out any garbage
    000043  aa   000022 7350 00    111  	als	18		" pvtx in Upper
    000044  aa  0 00004 2751 20    112  	ora	ap|4,*		" vtocx in Lower
    000045  0a   000071 7070 00    113  	tsx7	setup		" Set pointers, compute hash index
    000046  0a   000056 7070 00    114  	tsx7	search_it		" Search hash thread
    000047  aa   000000 6210 11    115  	eax1	0,x1		" x1 = offset of buf desc
    000050  0a   000053 6000 00    116  	tze	search_not_found	" Not there
    000051  aa  3 00000 3521 11    117  	eppbp	bb|0,x1		" bp -> buffer descriptor
    000052  0a   000054 7100 00    118  	tra	search_returns
    000053                         119  search_not_found:
    000053  0a   000000 3520 20    120  	eppbp	null_ptr,*
    000054                         121  search_returns:
    000054  aa  0 00006 2521 20    122  	spribp	ap|6,*		" Return pointer or null
    000055  aa  7 00042 7101 20    123  	return
                                   124  "
                                   125  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                   126  "
                                   127  "	Internal procedure to search
                                   128  "
                                   129  "	tsx7	search_it
                                   130  "
                                   131  "	On entry,
                                   132  "
                                   133  "	     bb -> vtoc_buffer_seg
                                   134  "	     Areg has pvte rel in Upper, vtocx in Lower
                                   135  "	     x2 = hash index
                                   136  "
                                   137  "	On exit,
                                   138  "
                                   139  "	     x0 = offset of previous in thread (0 if none)
                                   140  "	     x1 = offset of this entry (0 if none)
                                   141  "
                                   142  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                   143  
    000056                         144  search_it:
    000056  aa   000000 6200 00    145  	eax0	0		" Initialize to none
    000057  aa   000000 6210 00    146  	eax1	0
    000060  aa  3 00056 2211 12    147  	ldx1	bb|vtoc_buffer.hash_table,x2 " x1 = offset of first
    000061  aa   000000 6000 17    148  	tze	0,x7		" None
                                   149  
    000062                         150  search_it_loop:
    000062  aa  3 00000 1151 11    151  	cmpa	bb|vtoc_buf_desc.pvtx,x1 " This one a match
    000063  aa   000000 6000 17    152  	tze	0,x7		" yes - exit
    000064  aa   000000 6200 11    153  	eax0	0,x1		" Previous = current
    000065  aa  3 00002 2211 11    154  	ldx1	bb|vtoc_buf_desc.ht_thread,x1  " Next
    000066  0a   000062 6010 00    155  	tnz	search_it_loop	" Next exists
    000067  aa   000000 6210 00    156  	eax1	0		" Not found
    000070  aa   000000 7100 17    157  	tra	0,x7
                                   158  "
                                   159  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                   160  "
                                   161  "	Internal procedure to set pointers and compute hash index
                                   162  "
                                   163  "	tsx7	setup
                                   164  "
                                   165  "	On entry,
                                   166  "
                                   167  "	     Areg has pvtx in Upper, vtocx in Lower
                                   168  "
                                   169  "	On exit,
                                   170  "
                                   171  "	     bb -> vtoc_buffer_seg
                                   172  "
                                   173  "	     x2 = hash index
                                   174  "
                                   175  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " 
                                   176  
    000071                         177  setup:
    000071  4a  4 00010 3535 20    178  	eppbb	vtoc_buffer_seg$
    000072  aa  6 00050 7551 00    179  	sta	save_pvtx_vtocx	" pvtx, vtocx
    000073  aa  6 00050 2361 00    180  	ldq	save_pvtx_vtocx
                                   181  
    000074  aa   000022 7720 00    182  	qrl	18
    000075  aa  6 00050 6761 00    183  	erq	save_pvtx_vtocx
    000076  aa  3 00005 3761 00    184  	anq	bb|vtoc_buffer.hash_mask
    000077  aa   000000 6220 06    185  	eax2	0,ql
                                   186  
    000100  aa   000000 7100 17    187  	tra	0,x7
                                   188  
                                   189  
                                   190  	end
ENTRY SEQUENCES
     
    000101  5a   000024 0000 00
    000102  aa  7 00046 2721 20
    000103  0a   000002 7100 00
    000104  5a   000016 0000 00
    000105  aa  7 00046 2721 20
    000106  0a   000015 7100 00
    000107  5a   000011 0000 00
    000110  aa  7 00046 2721 20
    000111  0a   000037 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000112  5a   000003 000000 
    000113  5a   000040 600000 
    000114  aa   000000 000000 
    000115  55   000011 000002 
    000116  5a   000002 400003 
    000117  55   000006 000011 
    000120  aa  013 166 164 157
    000121  aa  143 137 163 145
    000122  aa  141 162 143 150
    000123  55   000016 000003 
    000124  0a   000110 500000 
    000125  55   000014 000003 
    000126  aa  006 163 145 141         search
    000127  aa  162 143 150 000
    000130  55   000024 000011 
    000131  0a   000105 500000 
    000132  55   000021 000003 
    000133  aa  010 150 141 163         hash_out
    000134  aa  150 137 157 165
    000135  aa  164 000 000 000
    000136  55   000031 000016 
    000137  0a   000102 500000 
    000140  55   000027 000003 
    000141  aa  007 150 141 163         hash_in
    000142  aa  150 137 151 156
    000143  55   000002 000024 
    000144  6a   000000 400002 
    000145  55   000034 000003 
    000146  aa  014 163 171 155         symbol_table
    000147  aa  142 157 154 137
    000150  aa  164 141 142 154
    000151  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000152  aa   000000 000015 
    000153  aa   000000 000000 
    000154  5a   000016 000000 
    000155  5a   000011 000000 
    000156  aa   000000 000000 
    000157  aa   000000 000000 
    000160  aa   000000 000000 
    000161  5a   000024 000000 
    000162  5a   000031 000000 
    000163  aa   000000 000000 
    000164  aa   000000 000000 
    000165  aa   000000 000000 
    000166  aa   000000 000000 
    000167  aa   000000 000000 

EXTERNAL NAMES

    000170  aa  017 166 164 157         vtoc_buffer_seg
    000171  aa  143 137 142 165
    000172  aa  146 146 145 162
    000173  aa  137 163 145 147

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000174  aa   000003 000000 
    000175  5a   000056 000000 
    000176  aa   000001 000000 
    000177  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000200  5a   000062 000000 
    000201  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000112 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000012 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         vtoc_buffer_seg|       
    000011  5a   000066 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   251033 146514 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000155 
    000020  aa   000000 000120 
    000021  aa   000135 000131 
    000022  aa   000146 000120 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000042 
    000067  aa   175453 027306 
    000070  aa   000000 117547 
    000071  aa   223452 600000 
    000072  aa   000107 000041 
    000073  aa   113434 242342 
    000074  aa   000000 111347 
    000075  aa   432131 600000 
    000076  aa   076163 160145          >spec>install>1115>vtoc_search.alm
    000077  aa   143076 151156 
    000100  aa   163164 141154 
    000101  aa   154076 061061 
    000102  aa   061065 076166 
    000103  aa   164157 143137 
    000104  aa   163145 141162 
    000105  aa   143150 056141 
    000106  aa   154155 040040 
    000107  aa   076154 144144          >ldd>include>vtoc_buffer.incl.alm
    000110  aa   076151 156143 
    000111  aa   154165 144145 
    000112  aa   076166 164157 
    000113  aa   143137 142165 
    000114  aa   146146 145162 
    000115  aa   056151 156143 
    000116  aa   154056 141154 
    000117  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           2    hash_in                  vtoc_search:   28,   49.
          15    hash_out                 vtoc_search:   29,   71.
          34    hash_out_common          vtoc_search:   84,   87.
          33    hash_out_empty           vtoc_search:   82,   85.
          36    hash_out_returns         vtoc_search:   79,   90.
           0    null_ptr                 vtoc_search:   34,  120.
           3    N_PARTS_PER_VTOCE        vtoc_buffer:  114.
           3    N_SECTOR_PER_VTOCE       vtoc_buffer:  118.
           5    N_VTOCE_PER_RECORD       vtoc_buffer:  117.
          50    save_pvtx_vtocx          vtoc_search:   32,  179,  180,  183.
          37    search                   vtoc_search:   30,  107.
          56    search_it                vtoc_search:   77,  114,  144.
          62    search_it_loop           vtoc_search:  150,  155.
          53    search_not_found         vtoc_search:  116,  119.
          54    search_returns           vtoc_search:  118,  121.
          71    setup                    vtoc_search:   54,   76,  113,  177.
           0    vtoce_buffer.parts       vtoc_buffer:  110.
           0    vtoce_buffer.words       vtoc_buffer:  112.
         300    VTOCE_BUFFER_SIZE        vtoc_buffer:  116.
         300    vtoce_buffer_size        vtoc_buffer:  107.
         100    VTOCE_PART_SIZE          vtoc_buffer:  115.
           6    vtoc_buffer.abs_addr     vtoc_buffer:   27.
           0    vtoc_buffer.buffer       vtoc_buffer:   65.
           0    vtoc_buffer.buf_desc     vtoc_buffer:   63.
          10    vtoc_buffer.buf_desc_offset    vtoc_buffer:   32.
          11    vtoc_buffer.buf_offset   vtoc_buffer:   34.
          20    vtoc_buffer.call_alloc   vtoc_buffer:   45.
          22    vtoc_buffer.call_await   vtoc_buffer:   47.
          21    vtoc_buffer.call_free    vtoc_buffer:   46.
          16    vtoc_buffer.call_get     vtoc_buffer:   43.
          17    vtoc_buffer.call_put     vtoc_buffer:   44.
          27    vtoc_buffer.disk_reads   vtoc_buffer:   52.
          30    vtoc_buffer.disk_writes  vtoc_buffer:   53.
          31    vtoc_buffer.get_buffer_calls   vtoc_buffer:   54.
          32    vtoc_buffer.get_buffer_hits    vtoc_buffer:   55.
           5    vtoc_buffer.hash_mask    vtoc_search:  184,
                                         vtoc_buffer:   26.
          56    vtoc_buffer.hash_table   vtoc_search:   56,   57,   86,  147,
                                         vtoc_buffer:   61.
          12    vtoc_buffer.hash_table_offset  vtoc_buffer:   36.
           0    vtoc_buffer.lock         vtoc_buffer:   16.
          16    vtoc_buffer.meters       vtoc_buffer:   41.
      400000    vtoc_buffer.notify_sw    vtoc_buffer:   22.
           2    vtoc_buffer.notify_sw_word     vtoc_buffer:   21.
           3    vtoc_buffer.n_bufs       vtoc_buffer:   24.
           4    vtoc_buffer.n_hash_buckets     vtoc_buffer:   25.
           0    vtoc_buffer.processid    vtoc_buffer:   18.
          13    vtoc_buffer.search_index       vtoc_buffer:   38.
          25    vtoc_buffer.skip_hot     vtoc_buffer:   50.
          24    vtoc_buffer.skip_os      vtoc_buffer:   49.
          26    vtoc_buffer.skip_wait    vtoc_buffer:   51.
          23    vtoc_buffer.steps        vtoc_buffer:   48.
          14    vtoc_buffer.unsafe_pvtx  vtoc_buffer:   39.
          33    vtoc_buffer.wait_calls   vtoc_buffer:   56.
           1    vtoc_buffer.wait_event   vtoc_buffer:   19.
          34    vtoc_buffer.wait_os      vtoc_buffer:   57.
                vtoc_buffer_seg          vtoc_search:  178.
           2    vtoc_buf_desc.buf_rel    vtoc_buffer:   98.
       40000    vtoc_buf_desc.err        vtoc_buffer:   84.
           1    vtoc_buf_desc.err_word   vtoc_buffer:   83.
           2    vtoc_buf_desc.ht_thread  vtoc_search:   58,   80,   83,   89,  154,
                                         vtoc_buffer:   97.
        2000    vtoc_buf_desc.ioq        vtoc_buffer:   92.
           1    vtoc_buf_desc.ioq_word   vtoc_buffer:   91.
       20000    vtoc_buf_desc.notify_sw  vtoc_buffer:   86.
           1    vtoc_buf_desc.notify_sw_word   vtoc_buffer:   85.
        4000    vtoc_buf_desc.os         vtoc_buffer:   90.
           1    vtoc_buf_desc.os_word    vtoc_buffer:   89.
           7    vtoc_buf_desc.parts_used_mask  vtoc_buffer:   82.
          41    vtoc_buf_desc.parts_used_shift       vtoc_buffer:   81.
           1    vtoc_buf_desc.parts_used_word  vtoc_buffer:   80.
           0    vtoc_buf_desc.pvtx       vtoc_search:   53,   75,  151,
                                         vtoc_buffer:   77.
        1000    vtoc_buf_desc.used       vtoc_buffer:   94.
           1    vtoc_buf_desc.used_word  vtoc_buffer:   93.
           0    vtoc_buf_desc.vtocx      vtoc_buffer:   78.
           1    vtoc_buf_desc.wait_index       vtoc_buffer:   95.
       10000    vtoc_buf_desc.write_sw   vtoc_buffer:   88.
           1    vtoc_buf_desc.write_sw_word    vtoc_buffer:   87.
           3    vtoc_buf_desc_size       vtoc_buffer:   75.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
