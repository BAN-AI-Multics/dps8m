ASSEMBLY LISTING OF SEGMENT >spec>install>1115>initializer_mdc_.alm                                                                                                                                 
ASSEMBLED ON:	11/11/89  0934.1 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  "	Privileged gate to Master Directory Control.
                                    13  "	This gate has ring brackets of (1,1,5).
                                    14  "	Its ACL gives RE access to Initializer.SysDaemon.z
                                    15  "
                                    16  " Modified 07/27/84 by EJ Sharpe - remove entries "chname_hv" and "make_link"
                                    17  "		since hdx will now handle those operations internally
                                    18  "		Also moved entries "delete_hv", "read_hv", "read_pv", and
                                    19  "		"write_hv" to the  gate "mdc_priv_"
                                    20  "
                                    21  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    22  
                                    23  	gate_info	initializer_mdc_
                                        	use	transfer_vector
    000000  0a   000034 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000034  aa  7 00046 2721 20         .actor:	getlp
    000035  aa  0 00002 3521 20         	eppbp	ap|2,*
    000036  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000037  0a   000053 6000 00         	tze	.return_name	zero length => get name
                                        
    000040  aa   000001 0350 07         	adla	1,dl		include length of acc
    000041  aa  0 00004 4501 20         	stz	ap|4,*
    000042  0a   000066 7000 00         	tsx0	.search_defs
                                        
    000043  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000044  aa   277777 600005          	desc9a	bp|-1(3),al
    000045  aa   300000 000005          	desc9a	bb|0,al
    000046  0a   000076 6010 00         	tnz	.next_def
                                        
    000047  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000050  aa   000022 7710 00         	arl	18
    000051  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000052  aa  7 00044 7101 20         	short_return
                                        
    000053                              .return_name:
    000053  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000054  0a   000066 7000 00         	tsx0	.search_defs
                                        
    000055  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000056  0a   000076 6010 00         	tnz	.next_def
                                        
    000057  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000060  aa   000033 7710 00         	arl	27
    000061  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000062  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000063  aa   300000 200005          	desc9a	bb|0(1),al
    000064  aa   200000 000005          	desc9a	bp|0,al
                                        
    000065  aa  7 00044 7101 20         	short_return
                                        
    000066                              .search_defs:
    000066  aa   000000 6220 00         	eax2	0
    000067  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000070                              .defs_loop:
    000070  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000071  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000072  0a   000076 6010 00         	tnz	.next_def
                                        
    000073  aa  1 00002 2271 12         	ldx7	ab|2,2
    000074  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000075  aa   000000 7100 10         	tra	0,0		test definition
    000076                              .next_def:
    000076  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000077  0a   000070 6010 00         	tnz	.defs_loop
                                        
    000100  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000101  aa   000060 6270 00         .setup:	push
    000102  aa  7 00040 2721 20
    000103  aa  7 00046 2721 20         	getlp
    000104  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000105  0a   000132 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000106  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000107  0a   000132 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000110  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000111  0a   000120 3500 00
    000112  4a  4 00010 3521 20
    000113  aa  6 00040 7531 00
    000114  aa  7 00036 6701 20
    000115  aa  6 00000 1731 00
    000116  aa  6 00040 0731 00
    000117  aa   000000 000000          	oct	0
                                        
                                        	even
    000120                              signal_arglist:
    000120  aa   000002 000004          	zero	2,4
    000121  aa   000002 000000          	zero	2,0
    000122  0a   000126 0000 00         	arg	.gate_errorname
    000123  aa   000000 0000 00         	arg
    000124  0a   000131 0000 00         	arg	.gate_errordesc
    000125  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000126                              .gate_errorname:
    000126  aa  147 141 164 145         	aci	"gate_error"
    000127  aa  137 145 162 162
    000130  aa  157 162 000 000
    000131                              .gate_errordesc:
    000131  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000132                              .no_gate_error:
    000132  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    24  
                                    25  	gate	assert,mdx,assert,0
                        000001          	segdef	assert
    000001                              assert:
    000001  0a   000134 7100 00         	tra	assert.e
    000133  aa   000000 000000          	zero	0*2,0
    000134                              assert.e:
    000134  0a   000101 7020 00         	tsx2	.setup
    000135  aa   000000 6340 07         	ldi	=0,dl
    000136  4a  4 00012 3521 20         	short_call mdx$assert(ap|0)
    000137  aa  7 00036 6701 20
    000140  aa  6 00030 3701 20
    000141  aa  7 00042 7101 20         	return
                                        
                                    26  	gate	check_mount,wdx,check_mount,3
                        000002          	segdef	check_mount
    000002                              check_mount:
    000002  0a   000143 7100 00         	tra	check_mount.e
    000142  aa   000006 000000          	zero	3*2,0
    000143                              check_mount.e:
    000143  0a   000101 7020 00         	tsx2	.setup
    000144  aa   000000 6340 07         	ldi	=0,dl
    000145  4a  4 00014 3521 20         	short_call wdx$check_mount(ap|0)
    000146  aa  7 00036 6701 20
    000147  aa  6 00030 3701 20
    000150  aa  7 00042 7101 20         	return
                                        
                                    27  	gate	countervalidate_label_,countervalidate_label_,countervalidate_label_,4
                        000003          	segdef	countervalidate_label_
    000003                              countervalidate_label_:
    000003  0a   000152 7100 00         	tra	countervalidate_label_.e
    000151  aa   000010 000000          	zero	4*2,0
    000152                              countervalidate_label_.e:
    000152  0a   000101 7020 00         	tsx2	.setup
    000153  aa   000000 6340 07         	ldi	=0,dl
    000154  4a  4 00016 3521 20         	short_call countervalidate_label_$countervalidate_label_(ap|0)
    000155  aa  7 00036 6701 20
    000156  aa  6 00030 3701 20
    000157  aa  7 00042 7101 20         	return
                                        
                                    28  	gate	demount_lv,mdx,demount_lv,3
                        000004          	segdef	demount_lv
    000004                              demount_lv:
    000004  0a   000161 7100 00         	tra	demount_lv.e
    000160  aa   000006 000000          	zero	3*2,0
    000161                              demount_lv.e:
    000161  0a   000101 7020 00         	tsx2	.setup
    000162  aa   000000 6340 07         	ldi	=0,dl
    000163  4a  4 00020 3521 20         	short_call mdx$demount_lv(ap|0)
    000164  aa  7 00036 6701 20
    000165  aa  6 00030 3701 20
    000166  aa  7 00042 7101 20         	return
                                        
                                    29  	gate	demount_pv,mdx,demount_pv,2
                        000005          	segdef	demount_pv
    000005                              demount_pv:
    000005  0a   000170 7100 00         	tra	demount_pv.e
    000167  aa   000004 000000          	zero	2*2,0
    000170                              demount_pv.e:
    000170  0a   000101 7020 00         	tsx2	.setup
    000171  aa   000000 6340 07         	ldi	=0,dl
    000172  4a  4 00022 3521 20         	short_call mdx$demount_pv(ap|0)
    000173  aa  7 00036 6701 20
    000174  aa  6 00030 3701 20
    000175  aa  7 00042 7101 20         	return
                                        
                                    30  	gate	forget,mdx,forget,0
                        000006          	segdef	forget
    000006                              forget:
    000006  0a   000177 7100 00         	tra	forget.e
    000176  aa   000000 000000          	zero	0*2,0
    000177                              forget.e:
    000177  0a   000101 7020 00         	tsx2	.setup
    000200  aa   000000 6340 07         	ldi	=0,dl
    000201  4a  4 00024 3521 20         	short_call mdx$forget(ap|0)
    000202  aa  7 00036 6701 20
    000203  aa  6 00030 3701 20
    000204  aa  7 00042 7101 20         	return
                                        
                                    31  	gate	free_lvate,wdx,free_lvate,1
                        000007          	segdef	free_lvate
    000007                              free_lvate:
    000007  0a   000206 7100 00         	tra	free_lvate.e
    000205  aa   000002 000000          	zero	1*2,0
    000206                              free_lvate.e:
    000206  0a   000101 7020 00         	tsx2	.setup
    000207  aa   000000 6340 07         	ldi	=0,dl
    000210  4a  4 00026 3521 20         	short_call wdx$free_lvate(ap|0)
    000211  aa  7 00036 6701 20
    000212  aa  6 00030 3701 20
    000213  aa  7 00042 7101 20         	return
                                        
                                    32  	gate	get_lv_pvinfo,volume_registration_mgr_,get_lv_pvinfo,0
                        000010          	segdef	get_lv_pvinfo
    000010                              get_lv_pvinfo:
    000010  0a   000215 7100 00         	tra	get_lv_pvinfo.e
    000214  aa   000000 000000          	zero	0*2,0
    000215                              get_lv_pvinfo.e:
    000215  0a   000101 7020 00         	tsx2	.setup
    000216  aa   000000 6340 07         	ldi	=0,dl
    000217  4a  4 00030 3521 20         	short_call volume_registration_mgr_$get_lv_pvinfo(ap|0)
    000220  aa  7 00036 6701 20
    000221  aa  6 00030 3701 20
    000222  aa  7 00042 7101 20         	return
                                        
                                    33  	gate	init,mdx,init,0
                        000011          	segdef	init
    000011                              init:
    000011  0a   000224 7100 00         	tra	init.e
    000223  aa   000000 000000          	zero	0*2,0
    000224                              init.e:
    000224  0a   000101 7020 00         	tsx2	.setup
    000225  aa   000000 6340 07         	ldi	=0,dl
    000226  4a  4 00032 3521 20         	short_call mdx$init(ap|0)
    000227  aa  7 00036 6701 20
    000230  aa  6 00030 3701 20
    000231  aa  7 00042 7101 20         	return
                                        
                                    34  	gate	init_lvat,wdx,init,2
                        000012          	segdef	init_lvat
    000012                              init_lvat:
    000012  0a   000233 7100 00         	tra	init_lvat.e
    000232  aa   000004 000000          	zero	2*2,0
    000233                              init_lvat.e:
    000233  0a   000101 7020 00         	tsx2	.setup
    000234  aa   000000 6340 07         	ldi	=0,dl
    000235  4a  4 00034 3521 20         	short_call wdx$init(ap|0)
    000236  aa  7 00036 6701 20
    000237  aa  6 00030 3701 20
    000240  aa  7 00042 7101 20         	return
                                        
                                    35  	gate	invalidate_lvate,wdx,invalidate_lvate,1
                        000013          	segdef	invalidate_lvate
    000013                              invalidate_lvate:
    000013  0a   000242 7100 00         	tra	invalidate_lvate.e
    000241  aa   000002 000000          	zero	1*2,0
    000242                              invalidate_lvate.e:
    000242  0a   000101 7020 00         	tsx2	.setup
    000243  aa   000000 6340 07         	ldi	=0,dl
    000244  4a  4 00036 3521 20         	short_call wdx$invalidate_lvate(ap|0)
    000245  aa  7 00036 6701 20
    000246  aa  6 00030 3701 20
    000247  aa  7 00042 7101 20         	return
                                        
                                    36  	gate	lvat_scan_lv,wdx,scan_lv,3
                        000014          	segdef	lvat_scan_lv
    000014                              lvat_scan_lv:
    000014  0a   000251 7100 00         	tra	lvat_scan_lv.e
    000250  aa   000006 000000          	zero	3*2,0
    000251                              lvat_scan_lv.e:
    000251  0a   000101 7020 00         	tsx2	.setup
    000252  aa   000000 6340 07         	ldi	=0,dl
    000253  4a  4 00040 3521 20         	short_call wdx$scan_lv(ap|0)
    000254  aa  7 00036 6701 20
    000255  aa  6 00030 3701 20
    000256  aa  7 00042 7101 20         	return
                                        
                                    37  	gate	mhv,mdx,mhv,0
                        000015          	segdef	mhv
    000015                              mhv:
    000015  0a   000260 7100 00         	tra	mhv.e
    000257  aa   000000 000000          	zero	0*2,0
    000260                              mhv.e:
    000260  0a   000101 7020 00         	tsx2	.setup
    000261  aa   000000 6340 07         	ldi	=0,dl
    000262  4a  4 00042 3521 20         	short_call mdx$mhv(ap|0)
    000263  aa  7 00036 6701 20
    000264  aa  6 00030 3701 20
    000265  aa  7 00042 7101 20         	return
                                        
                                    38  	gate	mhvmessage,wdx,mhvmessage,2
                        000016          	segdef	mhvmessage
    000016                              mhvmessage:
    000016  0a   000267 7100 00         	tra	mhvmessage.e
    000266  aa   000004 000000          	zero	2*2,0
    000267                              mhvmessage.e:
    000267  0a   000101 7020 00         	tsx2	.setup
    000270  aa   000000 6340 07         	ldi	=0,dl
    000271  4a  4 00044 3521 20         	short_call wdx$mhvmessage(ap|0)
    000272  aa  7 00036 6701 20
    000273  aa  6 00030 3701 20
    000274  aa  7 00042 7101 20         	return
                                        
                                    39  	gate	poll_mounts,wdx,poll_mounts,3
                        000017          	segdef	poll_mounts
    000017                              poll_mounts:
    000017  0a   000276 7100 00         	tra	poll_mounts.e
    000275  aa   000006 000000          	zero	3*2,0
    000276                              poll_mounts.e:
    000276  0a   000101 7020 00         	tsx2	.setup
    000277  aa   000000 6340 07         	ldi	=0,dl
    000300  4a  4 00046 3521 20         	short_call wdx$poll_mounts(ap|0)
    000301  aa  7 00036 6701 20
    000302  aa  6 00030 3701 20
    000303  aa  7 00042 7101 20         	return
                                        
                                    40  	gate	read_disk_table,mdx,read_disk_table,0
                        000020          	segdef	read_disk_table
    000020                              read_disk_table:
    000020  0a   000305 7100 00         	tra	read_disk_table.e
    000304  aa   000000 000000          	zero	0*2,0
    000305                              read_disk_table.e:
    000305  0a   000101 7020 00         	tsx2	.setup
    000306  aa   000000 6340 07         	ldi	=0,dl
    000307  4a  4 00050 3521 20         	short_call mdx$read_disk_table(ap|0)
    000310  aa  7 00036 6701 20
    000311  aa  6 00030 3701 20
    000312  aa  7 00042 7101 20         	return
                                        
                                    41  	gate	respond_mount_lv,wdx,respond_mount_lv,4
                        000021          	segdef	respond_mount_lv
    000021                              respond_mount_lv:
    000021  0a   000314 7100 00         	tra	respond_mount_lv.e
    000313  aa   000010 000000          	zero	4*2,0
    000314                              respond_mount_lv.e:
    000314  0a   000101 7020 00         	tsx2	.setup
    000315  aa   000000 6340 07         	ldi	=0,dl
    000316  4a  4 00052 3521 20         	short_call wdx$respond_mount_lv(ap|0)
    000317  aa  7 00036 6701 20
    000320  aa  6 00030 3701 20
    000321  aa  7 00042 7101 20         	return
                                        
                                    42  	gate	retrieve_lvate,wdx,retrieve_lvate,3
                        000022          	segdef	retrieve_lvate
    000022                              retrieve_lvate:
    000022  0a   000323 7100 00         	tra	retrieve_lvate.e
    000322  aa   000006 000000          	zero	3*2,0
    000323                              retrieve_lvate.e:
    000323  0a   000101 7020 00         	tsx2	.setup
    000324  aa   000000 6340 07         	ldi	=0,dl
    000325  4a  4 00054 3521 20         	short_call wdx$retrieve_lvate(ap|0)
    000326  aa  7 00036 6701 20
    000327  aa  6 00030 3701 20
    000330  aa  7 00042 7101 20         	return
                                        
                                    43  	gate	rlvolcheck,mdx,rlvolcheck,4
                        000023          	segdef	rlvolcheck
    000023                              rlvolcheck:
    000023  0a   000332 7100 00         	tra	rlvolcheck.e
    000331  aa   000010 000000          	zero	4*2,0
    000332                              rlvolcheck.e:
    000332  0a   000101 7020 00         	tsx2	.setup
    000333  aa   000000 6340 07         	ldi	=0,dl
    000334  4a  4 00056 3521 20         	short_call mdx$rlvolcheck(ap|0)
    000335  aa  7 00036 6701 20
    000336  aa  6 00030 3701 20
    000337  aa  7 00042 7101 20         	return
                                        
                                    44  	gate	scan_process_lvat,wdx,scan_process,3
                        000024          	segdef	scan_process_lvat
    000024                              scan_process_lvat:
    000024  0a   000341 7100 00         	tra	scan_process_lvat.e
    000340  aa   000006 000000          	zero	3*2,0
    000341                              scan_process_lvat.e:
    000341  0a   000101 7020 00         	tsx2	.setup
    000342  aa   000000 6340 07         	ldi	=0,dl
    000343  4a  4 00060 3521 20         	short_call wdx$scan_process(ap|0)
    000344  aa  7 00036 6701 20
    000345  aa  6 00030 3701 20
    000346  aa  7 00042 7101 20         	return
                                        
                                    45  	gate	set_lv_pdir_bit,mdx,set_lv_pdir_bit,3
                        000025          	segdef	set_lv_pdir_bit
    000025                              set_lv_pdir_bit:
    000025  0a   000350 7100 00         	tra	set_lv_pdir_bit.e
    000347  aa   000006 000000          	zero	3*2,0
    000350                              set_lv_pdir_bit.e:
    000350  0a   000101 7020 00         	tsx2	.setup
    000351  aa   000000 6340 07         	ldi	=0,dl
    000352  4a  4 00062 3521 20         	short_call mdx$set_lv_pdir_bit(ap|0)
    000353  aa  7 00036 6701 20
    000354  aa  6 00030 3701 20
    000355  aa  7 00042 7101 20         	return
                                        
                                    46  	gate	set_vacate_pdirs_bit,mdx,set_vacate_pdirs_bit,3
                        000026          	segdef	set_vacate_pdirs_bit
    000026                              set_vacate_pdirs_bit:
    000026  0a   000357 7100 00         	tra	set_vacate_pdirs_bit.e
    000356  aa   000006 000000          	zero	3*2,0
    000357                              set_vacate_pdirs_bit.e:
    000357  0a   000101 7020 00         	tsx2	.setup
    000360  aa   000000 6340 07         	ldi	=0,dl
    000361  4a  4 00064 3521 20         	short_call mdx$set_vacate_pdirs_bit(ap|0)
    000362  aa  7 00036 6701 20
    000363  aa  6 00030 3701 20
    000364  aa  7 00042 7101 20         	return
                                        
                                    47  	gate	set_lvat_info,wdx,set_lvinfo,3
                        000027          	segdef	set_lvat_info
    000027                              set_lvat_info:
    000027  0a   000366 7100 00         	tra	set_lvat_info.e
    000365  aa   000006 000000          	zero	3*2,0
    000366                              set_lvat_info.e:
    000366  0a   000101 7020 00         	tsx2	.setup
    000367  aa   000000 6340 07         	ldi	=0,dl
    000370  4a  4 00066 3521 20         	short_call wdx$set_lvinfo(ap|0)
    000371  aa  7 00036 6701 20
    000372  aa  6 00030 3701 20
    000373  aa  7 00042 7101 20         	return
                                        
                                    48  	gate	ss_io_reconfig,mdx,ss_io_reconfig,3
                        000030          	segdef	ss_io_reconfig
    000030                              ss_io_reconfig:
    000030  0a   000375 7100 00         	tra	ss_io_reconfig.e
    000374  aa   000006 000000          	zero	3*2,0
    000375                              ss_io_reconfig.e:
    000375  0a   000101 7020 00         	tsx2	.setup
    000376  aa   000000 6340 07         	ldi	=0,dl
    000377  4a  4 00070 3521 20         	short_call mdx$ss_io_reconfig(ap|0)
    000400  aa  7 00036 6701 20
    000401  aa  6 00030 3701 20
    000402  aa  7 00042 7101 20         	return
                                        
                                    49  	gate	take,mdx,take,0
                        000031          	segdef	take
    000031                              take:
    000031  0a   000404 7100 00         	tra	take.e
    000403  aa   000000 000000          	zero	0*2,0
    000404                              take.e:
    000404  0a   000101 7020 00         	tsx2	.setup
    000405  aa   000000 6340 07         	ldi	=0,dl
    000406  4a  4 00072 3521 20         	short_call mdx$take(ap|0)
    000407  aa  7 00036 6701 20
    000410  aa  6 00030 3701 20
    000411  aa  7 00042 7101 20         	return
                                        
                                    50  	gate	volsalv,mdx,volsalv,4
                        000032          	segdef	volsalv
    000032                              volsalv:
    000032  0a   000413 7100 00         	tra	volsalv.e
    000412  aa   000010 000000          	zero	4*2,0
    000413                              volsalv.e:
    000413  0a   000101 7020 00         	tsx2	.setup
    000414  aa   000000 6340 07         	ldi	=0,dl
    000415  4a  4 00074 3521 20         	short_call mdx$volsalv(ap|0)
    000416  aa  7 00036 6701 20
    000417  aa  6 00030 3701 20
    000420  aa  7 00042 7101 20         	return
                                        
                                    51  
                                    52  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000422  5a   000003 000000 
    000423  5a   000272 600000 
    000424  aa   000000 000000 
    000425  55   000013 000002 
    000426  5a   000002 400003 
    000427  55   000006 000013 
    000430  aa  020 151 156 151
    000431  aa  164 151 141 154
    000432  aa  151 172 145 162
    000433  aa  137 155 144 143
    000434  aa  137 000 000 000
    000435  55   000020 000003 
    000436  0a   000032 400000 
    000437  55   000016 000003 
    000440  aa  007 166 157 154         volsalv
    000441  aa  163 141 154 166
    000442  55   000025 000013 
    000443  0a   000031 400000 
    000444  55   000023 000003 
    000445  aa  004 164 141 153         take
    000446  aa  145 000 000 000
    000447  55   000034 000020 
    000450  0a   000030 400000 
    000451  55   000030 000003 
    000452  aa  016 163 163 137         ss_io_reconfig
    000453  aa  151 157 137 162
    000454  aa  145 143 157 156
    000455  aa  146 151 147 000
    000456  55   000043 000025 
    000457  0a   000027 400000 
    000460  55   000037 000003 
    000461  aa  015 163 145 164         set_lvat_info
    000462  aa  137 154 166 141
    000463  aa  164 137 151 156
    000464  aa  146 157 000 000
    000465  55   000054 000034 
    000466  0a   000026 400000 
    000467  55   000046 000003 
    000470  aa  024 163 145 164         set_vacate_pdirs_bit
    000471  aa  137 166 141 143
    000472  aa  141 164 145 137
    000473  aa  160 144 151 162
    000474  aa  163 137 142 151
    000475  aa  164 000 000 000
    000476  55   000063 000043 
    000477  0a   000025 400000 
    000500  55   000057 000003 
    000501  aa  017 163 145 164         set_lv_pdir_bit
    000502  aa  137 154 166 137
    000503  aa  160 144 151 162
    000504  aa  137 142 151 164
    000505  55   000073 000054 
    000506  0a   000024 400000 
    000507  55   000066 000003 
    000510  aa  021 163 143 141         scan_process_lvat
    000511  aa  156 137 160 162
    000512  aa  157 143 145 163
    000513  aa  163 137 154 166
    000514  aa  141 164 000 000
    000515  55   000101 000063 
    000516  0a   000023 400000 
    000517  55   000076 000003 
    000520  aa  012 162 154 166         rlvolcheck
    000521  aa  157 154 143 150
    000522  aa  145 143 153 000
    000523  55   000110 000073 
    000524  0a   000022 400000 
    000525  55   000104 000003 
    000526  aa  016 162 145 164         retrieve_lvate
    000527  aa  162 151 145 166
    000530  aa  145 137 154 166
    000531  aa  141 164 145 000
    000532  55   000120 000101 
    000533  0a   000021 400000 
    000534  55   000113 000003 
    000535  aa  020 162 145 163         respond_mount_lv
    000536  aa  160 157 156 144
    000537  aa  137 155 157 165
    000540  aa  156 164 137 154
    000541  aa  166 000 000 000
    000542  55   000127 000110 
    000543  0a   000020 400000 
    000544  55   000123 000003 
    000545  aa  017 162 145 141         read_disk_table
    000546  aa  144 137 144 151
    000547  aa  163 153 137 164
    000550  aa  141 142 154 145
    000551  55   000135 000120 
    000552  0a   000017 400000 
    000553  55   000132 000003 
    000554  aa  013 160 157 154         poll_mounts
    000555  aa  154 137 155 157
    000556  aa  165 156 164 163
    000557  55   000143 000127 
    000560  0a   000016 400000 
    000561  55   000140 000003 
    000562  aa  012 155 150 166         mhvmessage
    000563  aa  155 145 163 163
    000564  aa  141 147 145 000
    000565  55   000147 000135 
    000566  0a   000015 400000 
    000567  55   000146 000003 
    000570  aa  003 155 150 166         mhv
    000571  55   000156 000143 
    000572  0a   000014 400000 
    000573  55   000152 000003 
    000574  aa  014 154 166 141         lvat_scan_lv
    000575  aa  164 137 163 143
    000576  aa  141 156 137 154
    000577  aa  166 000 000 000
    000600  55   000166 000147 
    000601  0a   000013 400000 
    000602  55   000161 000003 
    000603  aa  020 151 156 166         invalidate_lvate
    000604  aa  141 154 151 144
    000605  aa  141 164 145 137
    000606  aa  154 166 141 164
    000607  aa  145 000 000 000
    000610  55   000174 000156 
    000611  0a   000012 400000 
    000612  55   000171 000003 
    000613  aa  011 151 156 151         init_lvat
    000614  aa  164 137 154 166
    000615  aa  141 164 000 000
    000616  55   000201 000166 
    000617  0a   000011 400000 
    000620  55   000177 000003 
    000621  aa  004 151 156 151         init
    000622  aa  164 000 000 000
    000623  55   000210 000174 
    000624  0a   000010 400000 
    000625  55   000204 000003 
    000626  aa  015 147 145 164         get_lv_pvinfo
    000627  aa  137 154 166 137
    000630  aa  160 166 151 156
    000631  aa  146 157 000 000
    000632  55   000216 000201 
    000633  0a   000007 400000 
    000634  55   000213 000003 
    000635  aa  012 146 162 145         free_lvate
    000636  aa  145 137 154 166
    000637  aa  141 164 145 000
    000640  55   000223 000210 
    000641  0a   000006 400000 
    000642  55   000221 000003 
    000643  aa  006 146 157 162         forget
    000644  aa  147 145 164 000
    000645  55   000231 000216 
    000646  0a   000005 400000 
    000647  55   000226 000003 
    000650  aa  012 144 145 155         demount_pv
    000651  aa  157 165 156 164
    000652  aa  137 160 166 000
    000653  55   000237 000223 
    000654  0a   000004 400000 
    000655  55   000234 000003 
    000656  aa  012 144 145 155         demount_lv
    000657  aa  157 165 156 164
    000660  aa  137 154 166 000
    000661  55   000250 000231 
    000662  0a   000003 400000 
    000663  55   000242 000003 
    000664  aa  026 143 157 165         countervalidate_label_
    000665  aa  156 164 145 162
    000666  aa  166 141 154 151
    000667  aa  144 141 164 145
    000670  aa  137 154 141 142
    000671  aa  145 154 137 000
    000672  55   000256 000237 
    000673  0a   000002 400000 
    000674  55   000253 000003 
    000675  aa  013 143 150 145         check_mount
    000676  aa  143 153 137 155
    000677  aa  157 165 156 164
    000700  55   000263 000250 
    000701  0a   000001 400000 
    000702  55   000261 000003 
    000703  aa  006 141 163 163         assert
    000704  aa  145 162 164 000
    000705  55   000002 000256 
    000706  6a   000000 400002 
    000707  55   000266 000003 
    000710  aa  014 163 171 155         symbol_table
    000711  aa  142 157 154 137
    000712  aa  164 141 142 154
    000713  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000714  aa   000000 000065 
    000715  aa   000000 000000 
    000716  aa   000000 000000 
    000717  aa   000000 000000 
    000720  5a   000020 000000 
    000721  5a   000073 000000 
    000722  5a   000201 000000 
    000723  aa   000000 000000 
    000724  5a   000143 000000 
    000725  5a   000043 000000 
    000726  5a   000110 000000 
    000727  5a   000156 000000 
    000730  5a   000166 000000 
    000731  5a   000025 000000 
    000732  aa   000000 000000 
    000733  5a   000101 000000 
    000734  aa   000000 000000 
    000735  aa   000000 000000 
    000736  aa   000000 000000 
    000737  5a   000054 000000 
    000740  5a   000174 000000 
    000741  5a   000210 000000 
    000742  5a   000250 000000 
    000743  5a   000034 000000 
    000744  5a   000013 000000 
    000745  aa   000000 000000 
    000746  aa   000000 000000 
    000747  aa   000000 000000 
    000750  aa   000000 000000 
    000751  5a   000147 000000 
    000752  5a   000263 000000 
    000753  aa   000000 000000 
    000754  5a   000063 000000 
    000755  5a   000127 000000 
    000756  aa   000000 000000 
    000757  aa   000000 000000 
    000760  aa   000000 000000 
    000761  aa   000000 000000 
    000762  5a   000223 000000 
    000763  5a   000231 000000 
    000764  aa   000000 000000 
    000765  aa   000000 000000 
    000766  5a   000216 000000 
    000767  aa   000000 000000 
    000770  aa   000000 000000 
    000771  aa   000000 000000 
    000772  aa   000000 000000 
    000773  5a   000120 000000 
    000774  5a   000135 000000 
    000775  5a   000237 000000 
    000776  5a   000256 000000 
    000777  aa   000000 000000 
    001000  aa   000000 000000 
    001001  aa   000000 000000 

EXTERNAL NAMES

    001002  aa  012 163 145 164         set_lvinfo
    001003  aa  137 154 166 151
    001004  aa  156 146 157 000
    001005  aa  014 163 143 141         scan_process
    001006  aa  156 137 160 162
    001007  aa  157 143 145 163
    001010  aa  163 000 000 000
    001011  aa  007 163 143 141         scan_lv
    001012  aa  156 137 154 166
    001013  aa  030 166 157 154         volume_registration_mgr_
    001014  aa  165 155 145 137
    001015  aa  162 145 147 151
    001016  aa  163 164 162 141
    001017  aa  164 151 157 156
    001020  aa  137 155 147 162
    001021  aa  137 000 000 000
    001022  aa  003 167 144 170         wdx
    001023  aa  003 155 144 170         mdx
    001024  aa  007 163 151 147         signal_
    001025  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001026  aa   000004 000000 
    001027  55   000401 000016 
    001030  aa   000004 000000 
    001031  55   000401 000023 
    001032  aa   000004 000000 
    001033  55   000401 000030 
    001034  aa   000004 000000 
    001035  55   000400 000360 
    001036  aa   000004 000000 
    001037  55   000401 000046 
    001040  aa   000004 000000 
    001041  55   000401 000057 
    001042  aa   000004 000000 
    001043  55   000400 000363 
    001044  aa   000004 000000 
    001045  55   000401 000076 
    001046  aa   000004 000000 
    001047  55   000400 000104 
    001050  aa   000004 000000 
    001051  55   000400 000113 
    001052  aa   000004 000000 
    001053  55   000401 000123 
    001054  aa   000004 000000 
    001055  55   000400 000132 
    001056  aa   000004 000000 
    001057  55   000400 000140 
    001060  aa   000004 000000 
    001061  55   000401 000146 
    001062  aa   000004 000000 
    001063  55   000400 000367 
    001064  aa   000004 000000 
    001065  55   000400 000161 
    001066  aa   000004 000000 
    001067  55   000400 000177 
    001070  aa   000004 000000 
    001071  55   000401 000177 
    001072  aa   000004 000000 
    001073  55   000371 000204 
    001074  aa   000004 000000 
    001075  55   000400 000213 
    001076  aa   000004 000000 
    001077  55   000401 000221 
    001100  aa   000004 000000 
    001101  55   000401 000226 
    001102  aa   000004 000000 
    001103  55   000401 000234 
    001104  aa   000004 000000 
    001105  55   000242 000242 
    001106  aa   000004 000000 
    001107  55   000400 000253 
    001110  aa   000004 000000 
    001111  55   000401 000261 
    001112  aa   000004 000000 
    001113  55   000402 000402 
    001114  aa   000001 000000 
    001115  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001116  5a   000404 000000 
    001117  5a   000406 000000 
    001120  5a   000410 000000 
    001121  5a   000412 000000 
    001122  5a   000414 000000 
    001123  5a   000416 000000 
    001124  5a   000420 000000 
    001125  5a   000422 000000 
    001126  5a   000424 000000 
    001127  5a   000426 000000 
    001130  5a   000430 000000 
    001131  5a   000432 000000 
    001132  5a   000434 000000 
    001133  5a   000436 000000 
    001134  5a   000440 000000 
    001135  5a   000442 000000 
    001136  5a   000444 000000 
    001137  5a   000446 000000 
    001140  5a   000450 000000 
    001141  5a   000452 000000 
    001142  5a   000454 000000 
    001143  5a   000456 000000 
    001144  5a   000460 000000 
    001145  5a   000462 000000 
    001146  5a   000464 000000 
    001147  5a   000466 000000 
    001150  5a   000470 000000 
    001151  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000422 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000076 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000526 0000 00
    000012  9a   777766 0000 46         mdx|assert
    000013  5a   000525 0000 00
    000014  9a   777764 0000 46         wdx|check_mount
    000015  5a   000524 0000 00
    000016  9a   777762 0000 46         countervalidate_label_|countervalidate_label_
    000017  5a   000523 0000 00
    000020  9a   777760 0000 46         mdx|demount_lv
    000021  5a   000522 0000 00
    000022  9a   777756 0000 46         mdx|demount_pv
    000023  5a   000521 0000 00
    000024  9a   777754 0000 46         mdx|forget
    000025  5a   000520 0000 00
    000026  9a   777752 0000 46         wdx|free_lvate
    000027  5a   000517 0000 00
    000030  9a   777750 0000 46         volume_registration_mgr_|get_lv_pvinfo
    000031  5a   000516 0000 00
    000032  9a   777746 0000 46         mdx|init
    000033  5a   000515 0000 00
    000034  9a   777744 0000 46         wdx|init
    000035  5a   000514 0000 00
    000036  9a   777742 0000 46         wdx|invalidate_lvate
    000037  5a   000513 0000 00
    000040  9a   777740 0000 46         wdx|scan_lv
    000041  5a   000512 0000 00
    000042  9a   777736 0000 46         mdx|mhv
    000043  5a   000511 0000 00
    000044  9a   777734 0000 46         wdx|mhvmessage
    000045  5a   000510 0000 00
    000046  9a   777732 0000 46         wdx|poll_mounts
    000047  5a   000507 0000 00
    000050  9a   777730 0000 46         mdx|read_disk_table
    000051  5a   000506 0000 00
    000052  9a   777726 0000 46         wdx|respond_mount_lv
    000053  5a   000505 0000 00
    000054  9a   777724 0000 46         wdx|retrieve_lvate
    000055  5a   000504 0000 00
    000056  9a   777722 0000 46         mdx|rlvolcheck
    000057  5a   000503 0000 00
    000060  9a   777720 0000 46         wdx|scan_process
    000061  5a   000502 0000 00
    000062  9a   777716 0000 46         mdx|set_lv_pdir_bit
    000063  5a   000501 0000 00
    000064  9a   777714 0000 46         mdx|set_vacate_pdirs_bit
    000065  5a   000500 0000 00
    000066  9a   777712 0000 46         wdx|set_lvinfo
    000067  5a   000477 0000 00
    000070  9a   777710 0000 46         mdx|ss_io_reconfig
    000071  5a   000476 0000 00
    000072  9a   777706 0000 46         mdx|take
    000073  5a   000475 0000 00
    000074  9a   777704 0000 46         mdx|volsalv
    000075  5a   000474 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   246501 434573 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000261 
    000020  aa   000000 000121 
    000021  aa   000171 000155 
    000022  aa   000252 000121 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000047 
    000067  aa   175453 027732 
    000070  aa   000000 117547 
    000071  aa   225515 400000 
    000072  aa   000110 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   076163 160145          >spec>install>1115>initializer_mdc_.alm
    000077  aa   143076 151156 
    000100  aa   163164 141154 
    000101  aa   154076 061061 
    000102  aa   061065 076151 
    000103  aa   156151 164151 
    000104  aa   141154 151172 
    000105  aa   145162 137155 
    000106  aa   144143 137056 
    000107  aa   141154 155040 
    000110  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000111  aa   076151 156143 
    000112  aa   154165 144145 
    000113  aa   076147 141164 
    000114  aa   145137 155141 
    000115  aa   143162 157163 
    000116  aa   056151 156143 
    000117  aa   154056 141154 
    000120  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          34    .actor                   initializer_mdc_:    23.
          70    .defs_loop               initializer_mdc_:    23.
         131    .gate_errordesc          initializer_mdc_:    23.
         126    .gate_errorname          initializer_mdc_:    23.
          76    .next_def                initializer_mdc_:    23.
         132    .no_gate_error           initializer_mdc_:    23.
          53    .return_name             initializer_mdc_:    23.
          66    .search_defs             initializer_mdc_:    23.
         101    .setup                   initializer_mdc_:    23,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
                                                              35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
                                                              46,   47,   48,   49,   50.
           1    assert                   initializer_mdc_:    25.
         134    assert.e                 initializer_mdc_:    25.
           2    check_mount              initializer_mdc_:    26.
         143    check_mount.e            initializer_mdc_:    26.
           3    countervalidate_label_   initializer_mdc_:    27.
         152    countervalidate_label_.e       initializer_mdc_:    27.
           4    demount_lv               initializer_mdc_:    28.
         161    demount_lv.e             initializer_mdc_:    28.
           5    demount_pv               initializer_mdc_:    29.
         170    demount_pv.e             initializer_mdc_:    29.
           6    forget                   initializer_mdc_:    30.
         177    forget.e                 initializer_mdc_:    30.
           7    free_lvate               initializer_mdc_:    31.
         206    free_lvate.e             initializer_mdc_:    31.
          10    get_lv_pvinfo            initializer_mdc_:    32.
         215    get_lv_pvinfo.e          initializer_mdc_:    32.
          11    init                     initializer_mdc_:    33,   34.
         224    init.e                   initializer_mdc_:    33.
          12    init_lvat                initializer_mdc_:    34.
         233    init_lvat.e              initializer_mdc_:    34.
          13    invalidate_lvate         initializer_mdc_:    35.
         242    invalidate_lvate.e       initializer_mdc_:    35.
          14    lvat_scan_lv             initializer_mdc_:    36.
         251    lvat_scan_lv.e           initializer_mdc_:    36.
          34    main                     initializer_mdc_:    23,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
                                                              35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
                                                              46,   47,   48,   49,   50.
                mdx                      initializer_mdc_:    25,   28,   29,   30,   33,   37,   40,   43,   45,   46,   48,
                                                              49,   50.
          15    mhv                      initializer_mdc_:    37.
         260    mhv.e                    initializer_mdc_:    37.
          16    mhvmessage               initializer_mdc_:    38.
         267    mhvmessage.e             initializer_mdc_:    38.
          17    poll_mounts              initializer_mdc_:    39.
         276    poll_mounts.e            initializer_mdc_:    39.
          20    read_disk_table          initializer_mdc_:    40.
         305    read_disk_table.e        initializer_mdc_:    40.
          21    respond_mount_lv         initializer_mdc_:    41.
         314    respond_mount_lv.e       initializer_mdc_:    41.
          22    retrieve_lvate           initializer_mdc_:    42.
         323    retrieve_lvate.e         initializer_mdc_:    42.
          23    rlvolcheck               initializer_mdc_:    43.
         332    rlvolcheck.e             initializer_mdc_:    43.
                scan_lv                  initializer_mdc_:    36.
                scan_process             initializer_mdc_:    44.
          24    scan_process_lvat        initializer_mdc_:    44.
         341    scan_process_lvat.e      initializer_mdc_:    44.
          27    set_lvat_info            initializer_mdc_:    47.
         366    set_lvat_info.e          initializer_mdc_:    47.
                set_lvinfo               initializer_mdc_:    47.
          25    set_lv_pdir_bit          initializer_mdc_:    45.
         350    set_lv_pdir_bit.e        initializer_mdc_:    45.
          26    set_vacate_pdirs_bit     initializer_mdc_:    46.
         357    set_vacate_pdirs_bit.e   initializer_mdc_:    46.
                signal_                  initializer_mdc_:    23.
         120    signal_arglist           initializer_mdc_:    23.
          30    ss_io_reconfig           initializer_mdc_:    48.
         375    ss_io_reconfig.e         initializer_mdc_:    48.
          31    take                     initializer_mdc_:    49.
         404    take.e                   initializer_mdc_:    49.
           0    transfer_vector          initializer_mdc_:    23,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
                                                              35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
                                                              46,   47,   48,   49,   50.
          33    tv_end                   initializer_mdc_:    23.
          32    volsalv                  initializer_mdc_:    50.
         413    volsalv.e                initializer_mdc_:    50.
                volume_registration_mgr_       initializer_mdc_:    32.
                wdx                      initializer_mdc_:    26,   31,   34,   35,   36,   38,   39,   41,   42,   44,   47.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
