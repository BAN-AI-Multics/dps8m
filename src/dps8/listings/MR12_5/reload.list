	COMPILATION LISTING OF SEGMENT reload
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  0932.6 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 						/* Driver for mload procedure. */
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 reload:						/* Created 21 May 1969, R H Campbell. */
       19      procedure;					/* Modified 15 March 1970, R H Campbell. */
       20 						/* Last mod by Kobziar, 1 May 75 to add system_release entry */
       21 /* -dprint and -no_dprint added 03/19/80 S. Herbst */
       22 /* Changed dprinting to see -ds, -he, and -rqt 12/01/81 S. Herbst */
       23 /* Changed to dprint -no_endpage since map is already page-formatted 01/21/82 S. Herbst */
       24 /* Updated dprint_defaults structure to reflect latest dprint_arg.incl.pl1 04/01/85 Steve Herbst */
       25 
       26 
       27 /****^  HISTORY COMMENTS:
       28*  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
       29*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
       30*     Updated to use version 9 of dprint_msg structure.
       31*  2) change(88-10-27,Brunelle), approve(88-10-27,MCR7911),
       32*     audit(88-10-18,Wallman), install(88-10-28,MR12.2-1199):
       33*     Upgraded to use new version of dprint_args structure.
       34*                                                   END HISTORY COMMENTS */
       35 
       36 
       37 
       38 dcl (cold, complete, print_map, array) bit (1) init ("0"b); /* Flags to remember mode of operation. */
       39 dcl  map_name char (64),				/* The reload map segment name. */
       40      arg_array (20) char (32) aligned;
       41 
       42 dcl (dir char (168),
       43      ent char (32)) aligned,
       44      rings (3) fixed bin (6),
       45      error_table_$noarg ext fixed bin,
       46      error_table_$namedup ext fixed bin;
       47 dcl  device char (8);				/* Device map is attached to. */
       48 dcl  mode char (0);					/* Mode of attachment. */
       49 dcl  tchar char (1) based;				/* Test character */
       50 dcl  mname char (32);
       51 dcl  code fixed bin;				/* Error status code. */
       52 dcl (l, n) fixed bin;				/* Temporary. */
       53 dcl (ap, alp, sp) pointer;				/* Pointer to argument,  IO status string. */
       54 dcl  arg based char (n);
       55 dcl  error_table_$ionmat external fixed bin;		/* Error code from ios_. */
       56 dcl  date_name_ entry (char (*), char (*), char (*), char (*), fixed bin);
       57 dcl  backup_load entry;
       58 dcl  com_err_ entry options (variable),
       59      cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
       60      cu_$arg_list_ptr entry (pointer),
       61      bk_arg_reader_$reload_arg_reader entry (fixed bin, pointer, fixed bin),
       62      bk_arg_reader_$array_arg_reader entry ((20) char (32) aligned, fixed bin),
       63      dprint_ entry (char(*) aligned, char(*) aligned, ptr, fixed bin),
       64      expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
       65      hcs_$status_minf entry (char (*) aligned, char (*) aligned, fixed bin (1),
       66 		fixed bin, fixed bin (35), fixed bin),
       67      hcs_$append_branchx entry (char (*) aligned, char (*) aligned, fixed bin (5), (3) fixed bin (6),
       68      char (*) aligned, fixed bin (1), fixed bin (1), fixed bin (24), fixed bin),
       69      hcs_$acl_add1 entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5),
       70     (3) fixed bin (6), fixed bin),
       71      get_group_id_$tag_star returns (char (32) aligned),
       72      cu_$level_get returns (fixed bin),
       73     (ioa_, ioa_$rsnnl) entry options (variable),		/* Variable arguments. */
       74      ios_$attach entry (char (*), char (*), char (*), char (*), bit (72) aligned),
       75      ios_$detach entry (char (*), char (*), char (*), bit (72) aligned),
       76      ios_$get_at_entry_ entry (char (*), char (*), char (*), char (*), fixed bin),
       77      unique_chars_ entry (bit (*) aligned) returns (char (15) aligned);
       78 
       79 dcl (addr, max) builtin;
       80 
  1     1 /* BEGIN INCLUDE FILE ... bk_ss_.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(87-03-03,GWMay), approve(87-03-03,MCR7627), audit(87-03-13,Farley),
  1     6*     install(87-03-30,MR12.1-1018):
  1     7*     added a writing_map switch to indicate when the dump map is being written.
  1     8*                                                   END HISTORY COMMENTS */
  1     9 
  1    10 
  1    11 /* Modified: July 1982 by G. Palter to add data for true AIM support in IMFT */
  1    12 /* Modified: August 1983 by Robert Coren to add minimum access class */
  1    13 /* Modified: November 1983 by Robert Coren to add "upgrade_to_user_auth" flag */
  1    14 
  1    15 /* Hierarchy dumper/reloader static data */
  1    16 
  1    17 dcl (bk_ss_$allow_dir_overwrite bit (1) aligned,		/* ON => allow reloaded seg to overwrite dir */
  1    18      bk_ss_$areap pointer,				/* pointer to list dir area */
  1    19      bk_ss_$brief_mapsw bit (1) aligned,		/* no form-feed for each control file entry */
  1    20      bk_ss_$caller_handles_conditions bit (1) aligned,	/* ON => caller has an any_other handler (for IMFT Daemon) */
  1    21      bk_ss_$control_name char(168),			/* control file path for dumping */
  1    22      bk_ss_$control_ptr pointer,			/* Ptr to control structure for sub entries */
  1    23      bk_ss_$cross_retrievesw bit (1) aligned,		/* ON => cross-retrieving this entry */
  1    24      bk_ss_$data_iocb pointer,			/* IOCB for dumping/reloading if bk_ss_$preattached */
  1    25      bk_ss_$date fixed binary (52),			/* dump all modified since this date */
  1    26      bk_ss_$datesw bit (1) aligned,			/* Flags presence of a date input */
  1    27      bk_ss_$debugsw bit (1) aligned,			/* Flag to prevent calls to hphcs_ */
  1    28      bk_ss_$dir_trim bit (1) aligned,			/* Flag to allow deletion of directories */
  1    29      bk_ss_$dprint_destination char (24),		/* for start_dump and reload, -ds for dprinting maps */
  1    30      bk_ss_$dprint_destination_setsw bit (1) aligned,
  1    31      bk_ss_$dprint_heading char (64),			/* for start_dump and reload, -he for dprinting maps */
  1    32      bk_ss_$dprint_heading_setsw bit (1) aligned,
  1    33      bk_ss_$dprint_queue fixed bin,			/* Queue number for dprinting maps and error files */
  1    34      bk_ss_$dprint_request_type char (24),		/* for start_dump and reload, -rqt for dprinting maps */
  1    35      bk_ss_$dprint_request_type_setsw bit (1) aligned,
  1    36      bk_ss_$dprintsw bit (1) aligned,			/* Whether to dprint maps for start_dump and reload */
  1    37      bk_ss_$dtdsw bit (1) aligned,			/* Flag to check if modified since last dumped */
  1    38      bk_ss_$ename char(32) aligned,			/* Branch entry to dump */
  1    39      bk_ss_$err_label label,				/* Place to go to attempt error recovery */
  1    40      bk_ss_$err_onlinesw bit(1) aligned,		/* Flag error output to be online, default to a file */
  1    41      bk_ss_$error fixed binary,			/* Code for location from which signal expected */
  1    42      bk_ss_$holdsw bit(1) aligned,			/* controls dismounting of tape for dumper */
  1    43      bk_ss_$hp pointer,				/* Pointer to preamble header */
  1    44      bk_ss_$ignore_dates bit (1) aligned,		/* Flag to skip check if have older info on tape */
  1    45      bk_ss_$mapsw bit (1) aligned,			/* Flag map output */
  1    46      bk_ss_$myname char(16),				/* Name by which backup was called */
  1    47      bk_ss_$namesw bit (1) aligned,			/* Flag to dump named branch only */
  1    48      bk_ss_$no_contin bit (1) aligned,			/* Flag to end dump after catchup dump. */
  1    49      bk_ss_$no_output bit (1) aligned,			/* Flag test run or dbugging dumper.  No tape output.*/
  1    50      bk_ss_$no_primary bit (1) aligned,			/* Flag saying do not use primary pathnames */
  1    51      bk_ss_$no_reload bit (1) aligned,			/* Flag debuging reloader.  Do not write in hierarchy. */
  1    52      bk_ss_$no_setlvid bit (1) aligned,			/* Flag to surpress setting of sons lvid on reload */
  1    53      bk_ss_$ntapes fixed bin,				/* number of tape copies for dumper */
  1    54      bk_ss_$onlysw bit (1) aligned,			/* ON => disable hiearchy sweep (dumping) or stop when all
  1    55*						   requests satisfied (loading) */
  1    56      bk_ss_$operator char(32),			/* operator name */
  1    57      bk_ss_$path_index fixed bin,			/* index of entry in backup_control structure */
  1    58      bk_ss_$pathsw bit(1) aligned,			/* starting directory path given to dumper */
  1    59      bk_ss_$preattached bit(1) aligned,			/* ON => caller has setup I/O switch for dumping/reloading */
  1    60      bk_ss_$pvsw  bit(1) aligned,			/* Flag to enable physical volume recovery */
  1    61      bk_ss_$pvname char(32) aligned,			/* Physical volume name */
  1    62      bk_ss_$qchecksw bit(1) aligned,			/* Flag to prevent suspension of quota checking */
  1    63      bk_ss_$quotasw bit(1) aligned,			/* Flag to allow quota setting */
  1    64      bk_ss_$restart_dumpsw bit(1) aligned,		/* restarting complete or catchup from given point */
  1    65      bk_ss_$restart_path char(168) aligned,		/* where to restart complete or catchup dump */
  1    66      bk_ss_$restart_plen fixed bin,			/* length of restart pathname */
  1    67      bk_ss_$retrieval_index fixed bin,			/* Index of entry in bk_retrieve's structure */
  1    68      bk_ss_$retrievesw bit (1) aligned,			/* Flags retrieval */
  1    69      bk_ss_$rlen fixed bin,				/* Length if current restart dir for recursion */
  1    70      bk_ss_$rname char(168),				/* retrieval file name */
  1    71      bk_ss_$rsize fixed bin,				/* length of retrieval file name */
  1    72      bk_ss_$save_path char(168),			/* starting directory for dump */
  1    73      bk_ss_$save_plen fixed bin,			/* length of starting directory name */
  1    74      bk_ss_$save_time fixed bin(52),			/* date, time of start of dump */
  1    75      bk_ss_$segptr pointer,
  1    76      bk_ss_$set_dtd bit (1) aligned,			/* ON to always set dtd when dumping, OFF never */
  1    77      bk_ss_$set_dtd_explicit bit (1) aligned,		/* ON to follow bk_ss_$set_dtd, OFF usual algorithm */
  1    78      bk_ss_$sp pointer,
  1    79      bk_ss_$sub_entry bit(1) aligned,			/* ON for backup_dump_ and backup_load_ */
  1    80      bk_ss_$sub_entry_errfile bit(1) aligned,		/* ON => backup_dump_ and backup_load_ should create error files */
  1    81      bk_ss_$tapesw bit(1) aligned,			/* Flag to indicate tape output */
  1    82      bk_ss_$trimsw bit(1) aligned,			/* Flag to trim directories on reload */
  1    83      bk_ss_$volume_set_name char (32),			/* For future arg -volume_set_name */
  1    84      bk_ss_$wakeup_interval fixed bin(52),		/* interval between wakeups of dumper in micro secs. */
  1    85      bk_ss_$wasnt_known bit(1) aligned,			/* Flag for segment termination */
  1    86      bk_ss_$enforce_max_access_class bit (1) aligned,	/* ON => don't dump anything above give access class */
  1    87      bk_ss_$maximum_access_class bit (72) aligned,	/* the access class to enforce on all branches */
  1    88      bk_ss_$enforce_min_access_class bit (1) aligned,	/* ON => don't dump anything below give access class */
  1    89      bk_ss_$minimum_access_class bit (72) aligned,	/* the minimum access class to enforce on all branches */
  1    90      bk_ss_$dont_dump_upgraded_dirs bit (1) aligned,	/* ON => don't dump any directory above given access class */
  1    91      bk_ss_$maximum_dir_access_class bit (72) aligned,	/* the access class to enforce on directories */
  1    92      bk_ss_$check_effective_access bit (1) aligned,	/* ON => don't dump branches given user can't access */
  1    93      bk_ss_$upgrade_to_user_auth bit (1) aligned,		/* ON => set access class of branch being dumped to user's authorization */
  1    94      bk_ss_$user_id character (32) unaligned,		/* the user's Person.Project.tag */
  1    95      bk_ss_$user_authorization bit (72) aligned,		/* the user's process authorization */
  1    96      bk_ss_$user_ring fixed binary,			/* the user's ring of execution */
  1    97      bk_ss_$restore_access_class bit (1) aligned,		/* ON => restore access class even when debugging */
  1    98      bk_ss_$enforce_minimum_ring bit (1) aligned,		/* ON => don't give anything lower ring bracket */
  1    99      bk_ss_$minimum_ring fixed binary,			/* the minimum ring bracket to be used */
  1   100      bk_ss_$translate_access_class bit (1) aligned,	/* ON => translate access classes read from tape */
  1   101      bk_ss_$source_attributes_ptr pointer,		/* -> source system's AIM attributes */
  1   102      bk_ss_$target_attributes_ptr pointer,		/* -> target system's AIM attributes */
  1   103      bk_ss_$writing_map bit (1) aligned)                    /* ON => in backup_map$try_write */
  1   104 	external static;
  1   105 
  1   106 /* END INCLUDE FILE ... bk_ss_.incl.pl1 */
       81 
       82 
  2     1 /* include io_status */
  2     2 dcl 1 status, 					/* I/O system status string. */
  2     3     2 code fixed binary,				/* Overall error code. */
  2     4     2 bits, 					/* Fine structure. */
  2     5       3 successful bit (4), 				/* Logical/physical initiation/termination. */
  2     6       3 transaction_terminated bit (1), 		/* No further status change. */
  2     7       3 unassigned bit (4),
  2     8       3 end_of_data bit (1), 				/* Obvious. */
  2     9       3 pad bit (5),
  2    10       3 ioname_detached bit (1), 			/* .. */
  2    11       3 pad2 bit (20),
  2    12      status_bits based (sp) bit (72) aligned; 		/* Overlay for IO calls. */
  2    13 						/* end io_status */
       83 
       84 
  3     1 /* BEGIN INCLUDE FILE ... dprint_arg.incl.pl1 */
  3     2 /* Modified 11/13/74 by Noel I. Morris */
  3     3 /* Modified: 10 April 1981 by G. Palter for version 6 structure -- longer request type names */
  3     4 /* Modified: 30 April 1982 by R. Kovalcik for version 7 structure -- defer_until_process_terminataion */
  3     5 /* Modified: November 1983 by C. Marker for version 8 structure -- no_separator */
  3     6 
  3     7 /****^  HISTORY COMMENTS:
  3     8*  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
  3     9*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
  3    10*     Add line_nbrs bit for line-numbered printouts, version 9.
  3    11*  2) change(88-02-05,Farley), approve(88-02-05,PBF7686), audit(88-02-05,GWMay),
  3    12*     install(88-02-05,MR12.2-1022):
  3    13*     Corrected alignment of line_nbrs, was aligned s/b unaligned..
  3    14*  3) change(88-08-29,Farley), approve(88-09-16,MCR7911),
  3    15*     audit(88-09-29,Wallman), install(88-10-28,MR12.2-1199):
  3    16*     Created a new 64 character forms_name variable, which supersedes the old
  3    17*     char 24 form_name variable, version 10.
  3    18*                                                   END HISTORY COMMENTS */
  3    19 
  3    20 
  3    21 dcl  dpap ptr;					/* ptr to argument structure */
  3    22 dcl  1 dprint_arg_buf aligned like dprint_arg;		/* Automatic storage for arg. */
  3    23 
  3    24 dcl  1 dprint_arg based (dpap) aligned,			/* argument structure */
  3    25        2 version fixed bin,				/* version number of dcl - current version is 9 */
  3    26        2 copies fixed bin,				/* number of copies wanted */
  3    27        2 delete fixed bin,				/* 1=delete after print */
  3    28        2 queue fixed bin,				/* print queue */
  3    29        2 pt_pch fixed bin,				/* 1=print, 2=punch */
  3    30        2 notify fixed bin,				/* 1 = notify user when done */
  3    31        2 heading char (64),				/* first page heading */
  3    32        2 output_module fixed bin,			/* 1=print, 2=7punch, 3=mcc, 4=raw, 5=plotter */
  3    33        2 dest char (12),				/* version 5 made this a pad - see destination below */
  3    34 						/* limit of version 1 structure */
  3    35        2 carriage_control,				/* Carriage control flags. */
  3    36          3 nep bit (1) unal,				/* TRUE if print trhu perf. */
  3    37          3 single bit (1) unal,			/* TRUE if ignore FF and VT */
  3    38          3 non_edited bit (1) unal,			/* TRUE if printing in non-edited mode */
  3    39          3 truncate bit (1) unal,			/* TRUE if truncating lines at line length */
  3    40          3 center_top_label bit (1) unal,		/* TRUE if top label to be centered */
  3    41          3 center_bottom_label bit (1) unal,		/* TRUE if bottom label to be centered */
  3    42          3 esc bit (1) unal,				/* version 5 TRUE if text escapes are to be processed */
  3    43          3 no_separator bit (1) unal,			/* version 8 TRUE if the inner head and tail sheets are to be suppressed. */
  3    44          3 line_nbrs bit (1) unal,			/* version 9, line numbers */
  3    45          3 padding bit (27) unal,
  3    46        2 pad (30) fixed bin,
  3    47        2 forms char (8),				/* version 5 made this a pad - see form_name below */
  3    48        2 lmargin fixed bin,				/* left margin */
  3    49        2 line_lth fixed bin,				/* max line lth */
  3    50 						/* limit of version 2 structure */
  3    51        2 class char (8),				/* version 6 made this a pad - see request_type below */
  3    52        2 page_lth fixed bin,				/* Paper length arg */
  3    53 						/* limit of version 3 structure */
  3    54        2 top_label char (136),			/* top-of-page label */
  3    55        2 bottom_label char (136),			/* bottom-of-page label */
  3    56 						/* limit of version 4 structure */
  3    57        2 bit_count fixed bin (35),			/* segment bit count */
  3    58        2 form_name char (24),				/* name of special forms needed - moved from forms */
  3    59 						/* version 10 made this a pad - see forms_name below */
  3    60        2 destination char (24),			/* the long destination - moved from dest */
  3    61        2 chan_stop_path char (168),			/* path of user channel stops - future */
  3    62 						/* limit of version 5 structure */
  3    63        2 request_type character (24) unaligned,		/* request type for the request */
  3    64                                                             /* limit of version 6 structure */
  3    65        2 defer_until_process_termination fixed bin,	/* 1 = don't process request until requesting process terminates */
  3    66        2 forms_name char (64) unal;			/* name of special forms needed - moved from form_name */
  3    67                                                             /* limit of version 10 structure */
  3    68 
  3    69 dcl  dprint_arg_version_1 fixed bin int static options (constant) init (1);
  3    70 dcl  dprint_arg_version_2 fixed bin int static options (constant) init (2);
  3    71 dcl  dprint_arg_version_3 fixed bin int static options (constant) init (3);
  3    72 dcl  dprint_arg_version_4 fixed bin int static options (constant) init (4);
  3    73 dcl  dprint_arg_version_5 fixed bin int static options (constant) init (5);
  3    74 dcl  dprint_arg_version_6 fixed bin int static options (constant) init (6);
  3    75 dcl  dprint_arg_version_7 fixed bin int static options (constant) init (7);
  3    76 dcl  dprint_arg_version_8 fixed bin int static options (constant) init (8);
  3    77 dcl  dprint_arg_version_9 fixed bin int static options (constant) init (9);
  3    78 dcl  dprint_arg_version_10 fixed bin int static options (constant) init (10);
  3    79 						/* current version */
  3    80 
  3    81 dcl  (
  3    82      DP_PRINT init (1),
  3    83      DP_PUNCH init (2),
  3    84      DP_PLOT init (3)
  3    85      ) fixed bin static options (constant);		/* for dprint_arg.pt_pch */
  3    86 
  3    87 /* END INCLUDE FILE ... dprint_arg.incl.pl1 */
       85 
       86 
       87 dcl 1 dprint_defaults aligned,			/* argument structure */
       88     2 version fixed bin init (9),			/* version number of dcl */
       89     2 copies fixed bin init (1),			/* number of copies wanted */
       90     2 delete fixed bin init(0),			/* 1=delete after print */
       91     2 queue fixed bin init(-1),			/* default print queue */
       92     2 pt_pch fixed bin init (1),			/* 1=print, 2=punch */
       93     2 notify fixed bin init (0),			/* 1 = notify user when done */
       94     2 heading char (64) init (""),			/* first page heading */
       95     2 output_module fixed bin init (1),			/* 1=print, 2=7punch, 3=mcc, 4=raw */
       96     2 dest char (12) init (""),			/* destination */
       97 
       98 /* limit of version 1 structure */
       99 
      100     2 carriage_control,				/* Carriage control flags. */
      101       3 nep bit (1) unal init ("0"b),			/* TRUE if print thru perf. */
      102       3 single bit (1) unal init ("0"b),		/* TRUE if ignore FF and VT */
      103       3 non_edited bit (1) unal init ("0"b),		/* TRUE if printing in non-edited mode */
      104       3 truncate bit (1) unal init ("0"b),                  /* TRUE if truncating lines at line length */
      105       3 center_top_label bit (1) unal init ("0"b),	/* TRUE if top label to be centered */
      106       3 center_bottom_label bit (1) unal init ("0"b),	/* TRUE if bottom label to be centered */
      107       3 esc bit (1) unal init ("0"b),
      108       3 no_separator bit (1) unal init ("0"b),
      109       3 line_nbrs bit (1) unal init ("0"b),
      110       3 padding bit (27) unal init ((27)"0"b),
      111     2 pad (30) fixed bin init ((30)0),
      112     2 forms char (8) init (""),			/* forms required */
      113     2 lmargin fixed bin init (0),			/* left margin */
      114     2 line_lth fixed bin init (-1),			/* max line lth */
      115 
      116 /* limit of version 2 structure */
      117 
      118     2 class char(8) init (""),			/* obsolete: device class */
      119     2 page_lth fixed bin init (-1),			/* Paper length arg */
      120 
      121 /* limit of version 3 structure */
      122 
      123     2 top_label char(136) init (""),			/* top-of-page label */
      124     2 bottom_label char(136) init (""),			/* bottom-of-page label */
      125 
      126 /* limit of version 4 structure */
      127 
      128     2 bit_count fixed bin (35) init (0),
      129     2 form_name char (24) init (""),
      130     2 destination char (24) init (""),
      131     2 chan_stop_path char (168) init (""),
      132 
      133 /* limit of version 5 structure */
      134 
      135     2 request_type char (24) unaligned init (""),	/* default request type */
      136        2 defer_until_process_termination fixed bin init (0),
      137 				/* 1 = don't process terminates      */
      138     2 forms_name char (64) unaligned init ("");
      139 /**/
      140 join_reload:
      141 	cold = ""b;				/* Entry for complete reload on "warm" system. */
      142 	print_map = "1"b;				/* Set flags to indicate operation. */
      143 	bk_ss_$myname = "reload";
      144 	go to squo;				/* Go to common code. */
      145 						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      146 reload_arg_array: entry (arg_array);
      147 	array = "1"b;				/* set flag */
      148 	goto join_reload;				/* use common code */
      149 						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ** * */
      150 system_release: entry;				/* trim everything, tape info overwrites always */
      151 	cold = "0"b;
      152 	print_map = "0"b;
      153 	bk_ss_$myname = "reload";			/* function as a reload */
      154 	bk_ss_$ignore_dates = "1"b;			/* all info on tape gets in */
      155 	bk_ss_$dir_trim = "1"b;			/* directories go too */
      156 	go to squo;
      157 						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      158 iload:	entry;					/* For complete (initial) reload on "cold" system. */
      159 	cold = "1"b;				/* Set up flags. */
      160 	print_map = "0"b;				/* .. */
      161 	bk_ss_$myname = "iload";
      162 squo:	bk_ss_$trimsw = "1"b;			/*  Set to trim for reload */
      163 	complete = "1"b;				/* Complete dump wanted */
      164 	bk_ss_$quotasw = "1"b;			/* Allow quota setting on reload */
      165 	go to reset_control;				/* Go start processing. */
      166 						/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      167 retrieve:	entry;					/* Entry to start retrieve-by-name. */
      168 	cold, complete, print_map = ""b;		/* Set up flags for retrieval. */
      169 	bk_ss_$quotasw = ""b;			/* No quota changing on retrieval */
      170 	bk_ss_$datesw = ""b;			/* Flag to load segment dumped after given date */
      171 	bk_ss_$myname = "retrieve";
      172 	bk_ss_$trimsw = ""b;			/* No trim on retrieve */
      173 reset_control:
      174 	bk_ss_$sub_entry = "0"b;
      175 	bk_ss_$pvname = "";
      176 	bk_ss_$pvsw = "0"b;
      177 	bk_ss_$rname = "";
      178 	bk_ss_$retrievesw = "0"b;
      179 	bk_ss_$rsize = 0;
      180 start:
      181 	n = 1;					/* Set up to read first arg if any */
      182 
      183 	if ^complete then do;			/* This is a retrieval */
      184 	     call cu_$arg_ptr (1, ap, n, code);
      185 	     if code ^= 0 then do;			/* arg is required */
      186 		call com_err_ (code, bk_ss_$myname, "Control file path required.");
      187 		go to ended;
      188 	     end;
      189 
      190 	     if ap -> tchar = "-" then do;		/* Prepare to call argument reader */
      191 		n = 1;				/* Start with first arg */
      192 		go to arg_reader;
      193 	     end;
      194 	     bk_ss_$rname = ap -> arg;		/* Save retrieval control file name */
      195 	     bk_ss_$retrievesw = "1"b;		/* Flag retrieval */
      196 	     bk_ss_$rsize = n;			/* And length. */
      197 
      198 	     n = 2;				/* Set up arg number for arg reader */
      199 
      200 	end;
      201 
      202 arg_reader:
      203 	bk_ss_$mapsw = "1"b;			/* First set some switches */
      204 	if ^array then do;
      205 	     call cu_$arg_list_ptr (alp);		/* Get a pointer to the argument list */
      206 	     call bk_arg_reader_$reload_arg_reader (n, alp, code);
      207 	end;
      208 	else call bk_arg_reader_$array_arg_reader (arg_array, code);
      209 	if code ^= 0 then if code ^= error_table_$noarg then go to ended;
      210 
      211 	if bk_ss_$myname = "retrieve"			/* Is this supposed to be a retrieval */
      212 	then if bk_ss_$retrievesw			/* If this is a retrieval */
      213 	     then call ioa_$rsnnl ("^a.retrieve.map", map_name, l, bk_ss_$rname); /* Construct name using argument. */
      214 	     else do;
      215 		call ioa_ ("No retrieval file argument given");
      216 		go to ended;
      217 	     end;
      218 
      219 	else if bk_ss_$debugsw then do;		/* Just debuging or user trying to use this */
      220 	     call date_name_ ("", "", "reload.map", mname, code); /* Make up a map name */
      221 	     if code ^= 0 then do;
      222 		call com_err_ (code, "reload", "Termination on error from date_name_");
      223 		go to ended;
      224 	     end;
      225 	     map_name = mname;			/* Copy map name */
      226 	     l = 32;
      227 	end;
      228 
      229 	else do;					/* This is for real */
      230 	     if cold then do;			/* For COLD reload */
      231 		rings (1), rings (2), rings (3) = 7;
      232 		call hcs_$append_branchx (">", "reload_dir", 01011b, rings,
      233 		     (get_group_id_$tag_star ()), 1, 0, 0, code);
      234 		if code ^= 0 then if code ^= error_table_$namedup then go to ended; /* Can it be created? */
      235 		call hcs_$acl_add1 (">", "reload_dir", "*.SysDaemon.*", 01011b, rings, code);
      236 		if code ^= 0 then go to ended;
      237 	     end;
      238 						/* Put map in special directory */
      239 	     call ioa_$rsnnl (">reload_dir>^a.reload.map", map_name, l, unique_chars_ (""b));
      240 	end;
      241 
      242 	rings (1), rings (2), rings (3) = max ((cu_$level_get ()), 4);
      243 
      244 	call expand_path_ (addr (map_name), l, addr (dir), addr (ent), code);
      245 	call hcs_$append_branchx (dir, ent, 01011b, rings, (get_group_id_$tag_star ()), 0, 0, 0, code);
      246 	if (code = 0) | (code = error_table_$namedup)
      247 	then call hcs_$acl_add1 (dir, ent, "*.SysDaemon.*", 01011b, rings, code);
      248 	sp = addr (status);				/* Set up pointer to status structure. */
      249 	call ios_$attach ("map", "file_", map_name, "w", sp -> status_bits); /* Try to attach the map. */
      250 	if status.code = error_table_$ionmat then do;	/* If name already attached, use it. */
      251 	     if print_map then do;			/* Will we need the name of the map file? */
      252 		call ios_$get_at_entry_ ("map", device, map_name, mode, code); /* Get AT info. */
      253 		if code = 0 then do;		/* OK? */
      254 		     if device ^= "file_" then	/* Is it a file? */
      255 			print_map = ""b;		/* No, we can't print it. */
      256 		end;
      257 		else do;				/* No, gripe. */
      258 		     call com_err_ (code, bk_ss_$myname, "ios_$get_at_entry_ for map");
      259 		     print_map = ""b;		/* We can't print the map. */
      260 		end;
      261 	     end;
      262 	end;
      263 	else if status.code ^= 0 then do;		/* All OK? */
      264 	     call com_err_ (status.code, bk_ss_$myname, "ios_$attach for ^a", map_name);
      265 	     go to ended;				/* Quit. */
      266 	end;
      267 
      268 	call backup_load ();			/* Start the loading */
      269 
      270 done:	call ios_$detach ("map", "", "", sp -> status_bits); /* Detach the map. */
      271 	if status.code ^= 0 then			/* If not all OK, type comment, but ignore. */
      272 	     call com_err_ (status.code, bk_ss_$myname, "ios_$detach for ^a", map_name);
      273 	if print_map & bk_ss_$dprintsw then do;			/* Can we print the map? */
      274 	     dpap = addr(dprint_arg_buf);
      275 	     dprint_arg_buf = dprint_defaults;
      276 	     dprint_arg.nep = "1"b;			/* -no_endpage since map is already page-formatted */
      277 	     dprint_arg_buf.queue = bk_ss_$dprint_queue;
      278 	     if bk_ss_$dprint_destination_setsw then dprint_arg_buf.destination = bk_ss_$dprint_destination;
      279 	     else dprint_arg_buf.destination = "BACKUP";
      280 	     if bk_ss_$dprint_heading_setsw then dprint_arg_buf.heading = bk_ss_$dprint_heading;
      281 	     else dprint_arg_buf.heading = "RELOAD MAP";
      282 	     if bk_ss_$dprint_request_type_setsw then dprint_arg_buf.request_type = bk_ss_$dprint_request_type;
      283 	     call hcs_$status_minf (dir, ent, 1, 0, dprint_arg_buf.bit_count, code);
      284 
      285 	     call dprint_ ( dir, ent, dpap, code );
      286 	     if code ^= 0
      287 		then call com_err_ ( code, bk_ss_$myname, "Unable to dprint map." );
      288 	     end;
      289 
      290 ended:	bk_ss_$myname = "";				/* we are no more */
      291      end reload;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0805.5  reload.pl1                        >spec>install>1111>reload.pl1
81           1    04/02/87  2006.7  bk_ss_.incl.pl1                   >ldd>include>bk_ss_.incl.pl1
83           2    05/06/74  1742.1  io_status.incl.pl1                >ldd>include>io_status.incl.pl1
85           3    11/09/88  0759.7  dprint_arg.incl.pl1               >ldd>include>dprint_arg.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 79 ref 244 244 244 244 244 244 248 274
alp                             000232 automatic       pointer                  dcl 53 set ref 205* 206*
ap                              000230 automatic       pointer                  dcl 53 set ref 184* 190 194
arg                                    based           char                     packed unaligned dcl 54 ref 194
arg_array                              parameter       char(32)                 array dcl 39 set ref 146 208*
array                           000103 automatic       bit(1)                   initial packed unaligned dcl 38 set ref 38* 147* 204
backup_load                     000020 constant        entry                    external dcl 57 ref 268
bit_count               204     000242 automatic       fixed bin(35,0)          level 2 in structure "dprint_arg_buf" dcl 3-22
                                                                                  in procedure "reload" set ref 283*
bit_count               204     000564 automatic       fixed bin(35,0)          initial level 2 in structure "dprint_defaults"
                                                                                  dcl 87 in procedure "reload" set ref 87*
bk_arg_reader_$array_arg_reader 000032 constant        entry                    external dcl 58 ref 208
bk_arg_reader_$reload_arg_reader
                                000030 constant        entry                    external dcl 58 ref 206
bk_ss_$datesw                   000066 external static bit(1)                   dcl 1-17 set ref 170*
bk_ss_$debugsw                  000070 external static bit(1)                   dcl 1-17 ref 219
bk_ss_$dir_trim                 000072 external static bit(1)                   dcl 1-17 set ref 155*
bk_ss_$dprint_destination       000074 external static char(24)                 packed unaligned dcl 1-17 ref 278
bk_ss_$dprint_destination_setsw 000076 external static bit(1)                   dcl 1-17 ref 278
bk_ss_$dprint_heading           000100 external static char(64)                 packed unaligned dcl 1-17 ref 280
bk_ss_$dprint_heading_setsw     000102 external static bit(1)                   dcl 1-17 ref 280
bk_ss_$dprint_queue             000104 external static fixed bin(17,0)          dcl 1-17 ref 277
bk_ss_$dprint_request_type      000106 external static char(24)                 packed unaligned dcl 1-17 ref 282
bk_ss_$dprint_request_type_setsw
                                000110 external static bit(1)                   dcl 1-17 ref 282
bk_ss_$dprintsw                 000112 external static bit(1)                   dcl 1-17 ref 273
bk_ss_$ignore_dates             000114 external static bit(1)                   dcl 1-17 set ref 154*
bk_ss_$mapsw                    000116 external static bit(1)                   dcl 1-17 set ref 202*
bk_ss_$myname                   000120 external static char(16)                 packed unaligned dcl 1-17 set ref 143* 153* 161*
                                                                                  171* 186* 211 258* 264* 271* 286* 290*
bk_ss_$pvname                   000124 external static char(32)                 dcl 1-17 set ref 175*
bk_ss_$pvsw                     000122 external static bit(1)                   dcl 1-17 set ref 176*
bk_ss_$quotasw                  000126 external static bit(1)                   dcl 1-17 set ref 164* 169*
bk_ss_$retrievesw               000130 external static bit(1)                   dcl 1-17 set ref 178* 195* 211
bk_ss_$rname                    000132 external static char(168)                packed unaligned dcl 1-17 set ref 177* 194* 211*
bk_ss_$rsize                    000134 external static fixed bin(17,0)          dcl 1-17 set ref 179* 196*
bk_ss_$sub_entry                000136 external static bit(1)                   dcl 1-17 set ref 173*
bk_ss_$trimsw                   000140 external static bit(1)                   dcl 1-17 set ref 162* 172*
bottom_label            142     000564 automatic       char(136)                initial level 2 dcl 87 set ref 87*
carriage_control         32            based           structure                level 2 in structure "dprint_arg" dcl 3-24
                                                                                  in procedure "reload"
carriage_control         32     000564 automatic       structure                level 2 in structure "dprint_defaults" dcl 87
                                                                                  in procedure "reload"
center_bottom_label      32(05) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
center_top_label         32(04) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
chan_stop_path          221     000564 automatic       char(168)                initial level 2 dcl 87 set ref 87*
class                    75     000564 automatic       char(8)                  initial level 2 dcl 87 set ref 87*
code                            000224 automatic       fixed bin(17,0)          dcl 51 in procedure "reload" set ref 184* 185 186*
                                                                                  206* 208* 209 209 220* 221 222* 232* 234 234 235*
                                                                                  236 244* 245* 246 246 246* 252* 253 258* 283* 285*
                                                                                  286 286*
code                            000236 automatic       fixed bin(17,0)          level 2 in structure "status" dcl 2-2 in procedure
                                                                                  "reload" set ref 250 263 264* 271 271*
cold                            000100 automatic       bit(1)                   initial packed unaligned dcl 38 set ref 38* 140*
                                                                                  151* 159* 168* 230
com_err_                        000022 constant        entry                    external dcl 58 ref 186 222 258 264 271 286
complete                        000101 automatic       bit(1)                   initial packed unaligned dcl 38 set ref 38* 163*
                                                                                  168* 183
copies                    1     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
cu_$arg_list_ptr                000026 constant        entry                    external dcl 58 ref 205
cu_$arg_ptr                     000024 constant        entry                    external dcl 58 ref 184
cu_$level_get                   000050 constant        entry                    external dcl 58 ref 242
date_name_                      000016 constant        entry                    external dcl 56 ref 220
defer_until_process_termination
                        301     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
delete                    2     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
dest                     27     000564 automatic       char(12)                 initial level 2 dcl 87 set ref 87*
destination             213     000242 automatic       char(24)                 level 2 in structure "dprint_arg_buf" dcl 3-22
                                                                                  in procedure "reload" set ref 278* 279*
destination             213     000564 automatic       char(24)                 initial level 2 in structure "dprint_defaults"
                                                                                  dcl 87 in procedure "reload" set ref 87*
device                          000212 automatic       char(8)                  packed unaligned dcl 47 set ref 252* 254
dir                             000124 automatic       char(168)                dcl 42 set ref 244 244 245* 246* 283* 285*
dpap                            000240 automatic       pointer                  dcl 3-21 set ref 274* 276 285*
dprint_                         000034 constant        entry                    external dcl 58 ref 285
dprint_arg                             based           structure                level 1 dcl 3-24
dprint_arg_buf                  000242 automatic       structure                level 1 dcl 3-22 set ref 274 275*
dprint_defaults                 000564 automatic       structure                level 1 dcl 87 set ref 275
ent                             000176 automatic       char(32)                 dcl 42 set ref 244 244 245* 246* 283* 285*
error_table_$ionmat             000014 external static fixed bin(17,0)          dcl 55 ref 250
error_table_$namedup            000012 external static fixed bin(17,0)          dcl 42 ref 234 246
error_table_$noarg              000010 external static fixed bin(17,0)          dcl 42 ref 209
esc                      32(06) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
expand_path_                    000036 constant        entry                    external dcl 58 ref 244
form_name               205     000564 automatic       char(24)                 initial level 2 dcl 87 set ref 87*
forms                    71     000564 automatic       char(8)                  initial level 2 dcl 87 set ref 87*
forms_name              302     000564 automatic       char(64)                 initial level 2 packed packed unaligned dcl 87 set
                                                                                  ref 87*
get_group_id_$tag_star          000046 constant        entry                    external dcl 58 ref 232 245
hcs_$acl_add1                   000044 constant        entry                    external dcl 58 ref 235 246
hcs_$append_branchx             000042 constant        entry                    external dcl 58 ref 232 245
hcs_$status_minf                000040 constant        entry                    external dcl 58 ref 283
heading                   6     000564 automatic       char(64)                 initial level 2 in structure "dprint_defaults"
                                                                                  dcl 87 in procedure "reload" set ref 87*
heading                   6     000242 automatic       char(64)                 level 2 in structure "dprint_arg_buf" dcl 3-22
                                                                                  in procedure "reload" set ref 280* 281*
ioa_                            000052 constant        entry                    external dcl 58 ref 215
ioa_$rsnnl                      000054 constant        entry                    external dcl 58 ref 211 239
ios_$attach                     000056 constant        entry                    external dcl 58 ref 249
ios_$detach                     000060 constant        entry                    external dcl 58 ref 270
ios_$get_at_entry_              000062 constant        entry                    external dcl 58 ref 252
l                               000225 automatic       fixed bin(17,0)          dcl 52 set ref 211* 226* 239* 244*
line_lth                 74     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
line_nbrs                32(08) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
lmargin                  73     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
map_name                        000104 automatic       char(64)                 packed unaligned dcl 39 set ref 211* 225* 239* 244
                                                                                  244 249* 252* 264* 271*
max                                                    builtin function         dcl 79 ref 242
mname                           000214 automatic       char(32)                 packed unaligned dcl 50 set ref 220* 225
mode                            000214 automatic       char                     packed unaligned dcl 48 set ref 252*
n                               000226 automatic       fixed bin(17,0)          dcl 52 set ref 180* 184* 191* 194 196 198* 206*
nep                      32            based           bit(1)                   level 3 in structure "dprint_arg" packed packed
                                                                                  unaligned dcl 3-24 in procedure "reload" set ref
                                                                                  276*
nep                      32     000564 automatic       bit(1)                   initial level 3 in structure "dprint_defaults"
                                                                                  packed packed unaligned dcl 87 in procedure
                                                                                  "reload" set ref 87*
no_separator             32(07) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
non_edited               32(02) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
notify                    5     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
output_module            26     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
pad                      33     000564 automatic       fixed bin(17,0)          initial array level 2 dcl 87 set ref 87*
padding                  32(09) 000564 automatic       bit(27)                  initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
page_lth                 77     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
print_map                       000102 automatic       bit(1)                   initial packed unaligned dcl 38 set ref 38* 142*
                                                                                  152* 160* 168* 251 254* 259* 273
pt_pch                    4     000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*
queue                     3     000242 automatic       fixed bin(17,0)          level 2 in structure "dprint_arg_buf" dcl 3-22
                                                                                  in procedure "reload" set ref 277*
queue                     3     000564 automatic       fixed bin(17,0)          initial level 2 in structure "dprint_defaults"
                                                                                  dcl 87 in procedure "reload" set ref 87*
request_type            273     000564 automatic       char(24)                 initial level 2 in structure "dprint_defaults"
                                                                                  packed packed unaligned dcl 87 in procedure
                                                                                  "reload" set ref 87*
request_type            273     000242 automatic       char(24)                 level 2 in structure "dprint_arg_buf" packed packed
                                                                                  unaligned dcl 3-22 in procedure "reload" set ref
                                                                                  282*
rings                           000206 automatic       fixed bin(6,0)           array dcl 42 set ref 231* 231* 231* 232* 235* 242*
                                                                                  242* 242* 245* 246*
single                   32(01) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
sp                              000234 automatic       pointer                  dcl 53 set ref 248* 249 270
status                          000236 automatic       structure                level 1 unaligned dcl 2-2 set ref 248
status_bits                            based           bit(72)                  dcl 2-2 set ref 249* 270*
tchar                                  based           char(1)                  packed unaligned dcl 49 ref 190
top_label               100     000564 automatic       char(136)                initial level 2 dcl 87 set ref 87*
truncate                 32(03) 000564 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 87 set
                                                                                  ref 87*
unique_chars_                   000064 constant        entry                    external dcl 58 ref 239 239
version                         000564 automatic       fixed bin(17,0)          initial level 2 dcl 87 set ref 87*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
DP_PLOT                                internal static fixed bin(17,0)          initial dcl 3-81
DP_PRINT                               internal static fixed bin(17,0)          initial dcl 3-81
DP_PUNCH                               internal static fixed bin(17,0)          initial dcl 3-81
bk_ss_$allow_dir_overwrite             external static bit(1)                   dcl 1-17
bk_ss_$areap                           external static pointer                  dcl 1-17
bk_ss_$brief_mapsw                     external static bit(1)                   dcl 1-17
bk_ss_$caller_handles_conditions       external static bit(1)                   dcl 1-17
bk_ss_$check_effective_access          external static bit(1)                   dcl 1-17
bk_ss_$control_name                    external static char(168)                packed unaligned dcl 1-17
bk_ss_$control_ptr                     external static pointer                  dcl 1-17
bk_ss_$cross_retrievesw                external static bit(1)                   dcl 1-17
bk_ss_$data_iocb                       external static pointer                  dcl 1-17
bk_ss_$date                            external static fixed bin(52,0)          dcl 1-17
bk_ss_$dont_dump_upgraded_dirs         external static bit(1)                   dcl 1-17
bk_ss_$dtdsw                           external static bit(1)                   dcl 1-17
bk_ss_$ename                           external static char(32)                 dcl 1-17
bk_ss_$enforce_max_access_class        external static bit(1)                   dcl 1-17
bk_ss_$enforce_min_access_class        external static bit(1)                   dcl 1-17
bk_ss_$enforce_minimum_ring            external static bit(1)                   dcl 1-17
bk_ss_$err_label                       external static label variable           dcl 1-17
bk_ss_$err_onlinesw                    external static bit(1)                   dcl 1-17
bk_ss_$error                           external static fixed bin(17,0)          dcl 1-17
bk_ss_$holdsw                          external static bit(1)                   dcl 1-17
bk_ss_$hp                              external static pointer                  dcl 1-17
bk_ss_$maximum_access_class            external static bit(72)                  dcl 1-17
bk_ss_$maximum_dir_access_class        external static bit(72)                  dcl 1-17
bk_ss_$minimum_access_class            external static bit(72)                  dcl 1-17
bk_ss_$minimum_ring                    external static fixed bin(17,0)          dcl 1-17
bk_ss_$namesw                          external static bit(1)                   dcl 1-17
bk_ss_$no_contin                       external static bit(1)                   dcl 1-17
bk_ss_$no_output                       external static bit(1)                   dcl 1-17
bk_ss_$no_primary                      external static bit(1)                   dcl 1-17
bk_ss_$no_reload                       external static bit(1)                   dcl 1-17
bk_ss_$no_setlvid                      external static bit(1)                   dcl 1-17
bk_ss_$ntapes                          external static fixed bin(17,0)          dcl 1-17
bk_ss_$onlysw                          external static bit(1)                   dcl 1-17
bk_ss_$operator                        external static char(32)                 packed unaligned dcl 1-17
bk_ss_$path_index                      external static fixed bin(17,0)          dcl 1-17
bk_ss_$pathsw                          external static bit(1)                   dcl 1-17
bk_ss_$preattached                     external static bit(1)                   dcl 1-17
bk_ss_$qchecksw                        external static bit(1)                   dcl 1-17
bk_ss_$restart_dumpsw                  external static bit(1)                   dcl 1-17
bk_ss_$restart_path                    external static char(168)                dcl 1-17
bk_ss_$restart_plen                    external static fixed bin(17,0)          dcl 1-17
bk_ss_$restore_access_class            external static bit(1)                   dcl 1-17
bk_ss_$retrieval_index                 external static fixed bin(17,0)          dcl 1-17
bk_ss_$rlen                            external static fixed bin(17,0)          dcl 1-17
bk_ss_$save_path                       external static char(168)                packed unaligned dcl 1-17
bk_ss_$save_plen                       external static fixed bin(17,0)          dcl 1-17
bk_ss_$save_time                       external static fixed bin(52,0)          dcl 1-17
bk_ss_$segptr                          external static pointer                  dcl 1-17
bk_ss_$set_dtd                         external static bit(1)                   dcl 1-17
bk_ss_$set_dtd_explicit                external static bit(1)                   dcl 1-17
bk_ss_$source_attributes_ptr           external static pointer                  dcl 1-17
bk_ss_$sp                              external static pointer                  dcl 1-17
bk_ss_$sub_entry_errfile               external static bit(1)                   dcl 1-17
bk_ss_$tapesw                          external static bit(1)                   dcl 1-17
bk_ss_$target_attributes_ptr           external static pointer                  dcl 1-17
bk_ss_$translate_access_class          external static bit(1)                   dcl 1-17
bk_ss_$upgrade_to_user_auth            external static bit(1)                   dcl 1-17
bk_ss_$user_authorization              external static bit(72)                  dcl 1-17
bk_ss_$user_id                         external static char(32)                 packed unaligned dcl 1-17
bk_ss_$user_ring                       external static fixed bin(17,0)          dcl 1-17
bk_ss_$volume_set_name                 external static char(32)                 packed unaligned dcl 1-17
bk_ss_$wakeup_interval                 external static fixed bin(52,0)          dcl 1-17
bk_ss_$wasnt_known                     external static bit(1)                   dcl 1-17
bk_ss_$writing_map                     external static bit(1)                   dcl 1-17
dprint_arg_version_1                   internal static fixed bin(17,0)          initial dcl 3-69
dprint_arg_version_10                  internal static fixed bin(17,0)          initial dcl 3-78
dprint_arg_version_2                   internal static fixed bin(17,0)          initial dcl 3-70
dprint_arg_version_3                   internal static fixed bin(17,0)          initial dcl 3-71
dprint_arg_version_4                   internal static fixed bin(17,0)          initial dcl 3-72
dprint_arg_version_5                   internal static fixed bin(17,0)          initial dcl 3-73
dprint_arg_version_6                   internal static fixed bin(17,0)          initial dcl 3-74
dprint_arg_version_7                   internal static fixed bin(17,0)          initial dcl 3-75
dprint_arg_version_8                   internal static fixed bin(17,0)          initial dcl 3-76
dprint_arg_version_9                   internal static fixed bin(17,0)          initial dcl 3-77

NAMES DECLARED BY EXPLICIT CONTEXT.
arg_reader                      000556 constant        label                    dcl 202 ref 192
done                            001631 constant        label                    dcl 270
ended                           002072 constant        label                    dcl 290 ref 187 209 216 223 234 236 265
iload                           000402 constant        entry                    external dcl 158
join_reload                     000332 constant        label                    dcl 140 ref 148
reload                          000324 constant        entry                    external dcl 18
reload_arg_array                000346 constant        entry                    external dcl 146
reset_control                   000446 constant        label                    dcl 173 ref 165
retrieve                        000425 constant        entry                    external dcl 167
squo                            000420 constant        label                    dcl 162 ref 144 156
start                           000462 constant        label                    dcl 180
system_release                  000360 constant        entry                    external dcl 150

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2640        3002    2112        2650
Length      3326    2112       142         307     526           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
reload                              698 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
reload                   000100 cold                        reload
                         000101 complete                    reload
                         000102 print_map                   reload
                         000103 array                       reload
                         000104 map_name                    reload
                         000124 dir                         reload
                         000176 ent                         reload
                         000206 rings                       reload
                         000212 device                      reload
                         000214 mode                        reload
                         000214 mname                       reload
                         000224 code                        reload
                         000225 l                           reload
                         000226 n                           reload
                         000230 ap                          reload
                         000232 alp                         reload
                         000234 sp                          reload
                         000236 status                      reload
                         000240 dpap                        reload
                         000242 dprint_arg_buf              reload
                         000564 dprint_defaults             reload

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
backup_load                   bk_arg_reader_$array_arg_reader
bk_arg_reader_$reload_arg_reader                            com_err_                      cu_$arg_list_ptr
cu_$arg_ptr                   cu_$level_get                 date_name_                    dprint_
expand_path_                  get_group_id_$tag_star        hcs_$acl_add1                 hcs_$append_branchx
hcs_$status_minf              ioa_                          ioa_$rsnnl                    ios_$attach
ios_$detach                   ios_$get_at_entry_            unique_chars_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
bk_ss_$datesw                 bk_ss_$debugsw                bk_ss_$dir_trim               bk_ss_$dprint_destination
bk_ss_$dprint_destination_setsw                             bk_ss_$dprint_heading         bk_ss_$dprint_heading_setsw
bk_ss_$dprint_queue           bk_ss_$dprint_request_type    bk_ss_$dprint_request_type_setsw
bk_ss_$dprintsw               bk_ss_$ignore_dates           bk_ss_$mapsw                  bk_ss_$myname
bk_ss_$pvname                 bk_ss_$pvsw                   bk_ss_$quotasw                bk_ss_$retrievesw
bk_ss_$rname                  bk_ss_$rsize                  bk_ss_$sub_entry              bk_ss_$trimsw
error_table_$ionmat           error_table_$namedup          error_table_$noarg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     38 000174        87 000200        18 000323       140 000332       142 000333       143 000335       144 000342
    146 000343       147 000354       148 000356       150 000357       151 000366       152 000367       153 000370
    154 000375       155 000377       156 000400       158 000401       159 000410       160 000412       161 000413
    162 000420       163 000421       164 000422       165 000423       167 000424       168 000433       169 000436
    170 000440       171 000441       172 000445       173 000446       175 000447       176 000453       177 000454
    178 000460       179 000461       180 000462       183 000464       184 000466       185 000503       186 000505
    187 000531       190 000532       191 000537       192 000541       194 000542       195 000550       196 000552
    198 000554       202 000556       204 000561       205 000563       206 000571       207 000604       208 000605
    209 000616       211 000623       215 000666       216 000701       217 000702       219 000703       220 000705
    221 000740       222 000742       223 000770       225 000771       226 000774       227 000776       230 000777
    231 001001       232 001005       234 001100       235 001105       236 001161       239 001163       242 001230
    244 001246       245 001273       246 001356       248 001430       249 001432       250 001471       251 001475
    252 001477       253 001531       254 001533       256 001540       258 001541       259 001565       262 001566
    263 001567       264 001571       265 001623       268 001624       270 001631       271 001657       273 001711
    274 001716       275 001720       276 001723       277 001725       278 001727       279 001736       280 001741
    281 001750       282 001753       283 001761       285 002017       286 002044       290 002072       291 002077


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
