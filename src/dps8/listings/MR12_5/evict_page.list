ASSEMBLY LISTING OF SEGMENT >spec>install>1111>evict_page.alm                                                                                                                                       
ASSEMBLED ON:	11/11/89  0931.1 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  """"""""""""""""""""""""""""""""""""""""""""""""""
                                    13  "
                                    14  "	call page$evict (cmep, event);
                                    15  "
                                    16  "	forces current occupant out of core pointed to by cmep
                                    17  "	Event returned non-zero if waiting necessary.
                                    18  "
                                    19  "	May take 2 calls for wired os page.
                                    20  "
                                    21  "	Bernard Greenberg, May 16, 1974
                                    22  "	Adjusted for pc_recover_sst, BSG, 9/3/77
                                    23  "	Modified for cam_cache by J. Bongiovanni 2/23/81
                                    24  "	Modified 03/14/81, W. Olin Sibert, for ADP conversion
                                    25  "	Modified for read_page_abs calling sequence by J. Bongiovanni 2/26/82
                                    26  "	Modified to move core map, E. N. Kittlitz, 6/21/82.
                                    27  "	Modified to call page_synch$move, Chris Jones, 05/09/84.
                                    28  "
                                    29  """"""""""""""""""""""""""""""""""""""""""""""""""
                                    30  
                                    31  
                                    32  	include	ptw
                                   1-1  " BEGIN INCLUDE FILE ... ptw.incl.alm ... 03/01/81, for ADP conversion
                                   1-2  
                                   1-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	ptw.l68
                                   2-1  
                                   2-2  
                                   2-3       "BEGIN INCLUDE FILE ptw.l68.incl.alm
                                   2-4  
                                   2-5  
                                   2-6  	"Created 04/05/81  1616.0 est Sun by convert_include_file,
                                   2-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   2-8  
                                   2-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>ptw.l68.incl.pl1,
                                  2-10  	"   modified 03/20/81  1815.9 est Fri
                                  2-11  
                                  2-12  "
                                  2-13  "	Structure core_ptw
                                  2-14  "
                        000026    2-15  	equ	core_ptw.frame_shift,22
                        037777    2-16  	bool	core_ptw.frame_mask,037777
                        000000    2-17  	equ	core_ptw.flags,0	" LOWER
                        000016    2-18  	equ	core_ptw.add_type_shift,14
                        000017    2-19  	bool	core_ptw.add_type_mask,000017
                        020000    2-20  	bool	core_ptw.first,020000	" DL
                        010000    2-21  	bool	core_ptw.er,010000	" DL
                        002000    2-22  	bool	core_ptw.unusable1,002000	" DL
                        001000    2-23  	bool	core_ptw.phu,001000	" DL
                        000400    2-24  	bool	core_ptw.phm1,000400	" DL
                        000200    2-25  	bool	core_ptw.nypd,000200	" DL
                        000100    2-26  	bool	core_ptw.phm,000100	" DL
                        000040    2-27  	bool	core_ptw.phu1,000040	" DL
                        000020    2-28  	bool	core_ptw.wired,000020	" DL
                        000010    2-29  	bool	core_ptw.os,000010	" DL
                        000004    2-30  	bool	core_ptw.valid,000004	" DL
                        000000    2-31  	equ	core_ptw.df_no_shift,0
                        000003    2-32  	bool	core_ptw.df_no_mask,000003
                                  2-33  
                                  2-34  "
                                  2-35  "	Structure ptw
                                  2-36  "
                        000000    2-37  	equ	ptw.add,0		" UPPER
                        000000    2-38  	equ	ptw.flags,0		" LOWER
                        000016    2-39  	equ	ptw.add_type_shift,14
                        000017    2-40  	bool	ptw.add_type_mask,000017
                        020000    2-41  	bool	ptw.first,020000	" DL
                        010000    2-42  	bool	ptw.er,010000		" DL
                        002000    2-43  	bool	ptw.unusable1,002000	" DL
                        001000    2-44  	bool	ptw.phu,001000		" DL
                        000400    2-45  	bool	ptw.phm1,000400		" DL
                        000200    2-46  	bool	ptw.nypd,000200		" DL
                        000100    2-47  	bool	ptw.phm,000100		" DL
                        000040    2-48  	bool	ptw.phu1,000040		" DL
                        000020    2-49  	bool	ptw.wired,000020	" DL
                        000010    2-50  	bool	ptw.os,000010		" DL
                        000004    2-51  	bool	ptw.valid,000004	" DL
                        000000    2-52  	equ	ptw.df_no_shift,0
                        000003    2-53  	bool	ptw.df_no_mask,000003
                                  2-54  
                                  2-55       "END INCLUDE FILE ptw.l68.incl.alm
                                        "	ifend
                                   1-6  
                                   1-7  	iftarget	adp
                                        "	 include	ptw.adp
                                        "	ifend
                                  1-10  
                                  1-11  " END INCLUDE FILE ... ptw.incl.alm
                                    33  	include	sdw
                                   3-1  " BEGIN INCLUDE FILE ... sdw.incl.alm ... 03/01/81, for ADP conversion
                                   3-2  
                                   3-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	sdw.l68
                                   4-1  
                                   4-2  
                                   4-3       "BEGIN INCLUDE FILE sdw.l68.incl.alm
                                   4-4  
                                   4-5  
                                   4-6  	"Created 04/05/81  1616.1 est Sun by convert_include_file,
                                   4-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   4-8  
                                   4-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>sdw.l68.incl.pl1,
                                  4-10  	"   modified 03/20/81  2215.5 est Fri
                                  4-11  
                                  4-12  "
                                  4-13  "	Structure sdw
                                  4-14  "
                        000002    4-15  	equ	sdw_size,2
                                  4-16  
                        000000    4-17  	equ	sdw.add_word,0
                        000014    4-18  	equ	sdw.add_shift,12
                        000000    4-19  	equ	sdw.rings_word,0
                        000003    4-20  	equ	sdw.rings_shift,3
                        000777    4-21  	bool	sdw.rings_mask,000777
                        000000    4-22  	equ	sdw.r1_word,0
                        000011    4-23  	equ	sdw.r1_shift,9
                        000007    4-24  	bool	sdw.r1_mask,000007
                        000000    4-25  	equ	sdw.r2_word,0
                        000006    4-26  	equ	sdw.r2_shift,6
                        000007    4-27  	bool	sdw.r2_mask,000007
                        000000    4-28  	equ	sdw.r3_word,0
                        000003    4-29  	equ	sdw.r3_shift,3
                        000007    4-30  	bool	sdw.r3_mask,000007
                        000000    4-31  	equ	sdw.valid_word,0
                        000004    4-32  	bool	sdw.valid,000004	" DL
                        000000    4-33  	equ	sdw.df_no_word,0
                        000000    4-34  	equ	sdw.df_no_shift,0
                        000003    4-35  	bool	sdw.df_no_mask,000003
                                  4-36  
                        000001    4-37  	equ	sdw.bound_word,1
                        000025    4-38  	equ	sdw.bound_shift,21
                        037777    4-39  	bool	sdw.bound_mask,037777
                        000001    4-40  	equ	sdw.access_word,1
                        000021    4-41  	equ	sdw.access_shift,17
                        000017    4-42  	bool	sdw.access_mask,000017
                        000001    4-43  	equ	sdw.read_word,1
                        000004    4-44  	bool	sdw.read,000004		" DU
                        000001    4-45  	equ	sdw.execute_word,1
                        000002    4-46  	bool	sdw.execute,000002	" DU
                        000001    4-47  	equ	sdw.write_word,1
                        000001    4-48  	bool	sdw.write,000001	" DU
                        000001    4-49  	equ	sdw.privileged_word,1
                        400000    4-50  	bool	sdw.privileged,400000	" DL
                        000001    4-51  	equ	sdw.unpaged_word,1
                        200000    4-52  	bool	sdw.unpaged,200000	" DL
                        000001    4-53  	equ	sdw.not_a_gate_word,1
                        100000    4-54  	bool	sdw.not_a_gate,100000	" DL
                        000001    4-55  	equ	sdw.cache_word,1
                        040000    4-56  	bool	sdw.cache,040000	" DL
                        000001    4-57  	equ	sdw.entry_bound_word,1
                        000000    4-58  	equ	sdw.entry_bound_shift,0
                        037777    4-59  	bool	sdw.entry_bound_mask,037777
                                  4-60  
                                  4-61       "END INCLUDE FILE sdw.l68.incl.alm
                                        "	ifend
                                   3-6  
                                   3-7  	iftarget	adp
                                        "	 include	sdw.adp
                                        "	ifend
                                  3-10  
                                  3-11  " END INCLUDE FILE ... sdw.incl.alm
                                    34  	include	aste
                                   5-1  
                                   5-2  
                                   5-3       "BEGIN INCLUDE FILE aste.incl.alm
                                   5-4  
                                   5-5  
                                   5-6  	"Created 01/14/85  1523.3 est Mon by convert_include_file,
                                   5-7  	"   Version of 01/09/85  0954.4 est Wed.
                                   5-8  
                                   5-9  	"Made from >Pool>m>loe>incl>aste.incl.pl1,
                                  5-10  	"   modified 01/08/85  1115.0 est Tue
                                  5-11  
                                  5-12  "
                                  5-13  "	Structure aste
                                  5-14  "
                        000014    5-15  	equ	aste_size,12
                                  5-16  
                        000000    5-17  	equ	aste.fp,0			" UPPER
                        000000    5-18  	equ	aste.bp,0			" LOWER
                                  5-19  
                        000001    5-20  	equ	aste.infl,1		" UPPER
                        000001    5-21  	equ	aste.infp,1		" LOWER
                                  5-22  
                        000002    5-23  	equ	aste.strp,2		" UPPER
                        000002    5-24  	equ	aste.par_astep,2		" LOWER
                                  5-25  
                        000003    5-26  	equ	aste.uid,3
                                  5-27  
                        000004    5-28  	equ	aste.msl_word,4
                        000033    5-29  	equ	aste.msl_shift,27
                        000777    5-30  	bool	aste.msl_mask,000777
                        000004    5-31  	equ	aste.pvtx_word,4
                        000022    5-32  	equ	aste.pvtx_shift,18
                        000777    5-33  	bool	aste.pvtx_mask,000777
                        000004    5-34  	equ	aste.vtocx,4		" LOWER
                                  5-35  
                        000005    5-36  	equ	aste.usedf_word,5
                        400000    5-37  	bool	aste.usedf,400000		" DU
                        000005    5-38  	equ	aste.init_word,5
                        200000    5-39  	bool	aste.init,200000		" DU
                        000005    5-40  	equ	aste.gtus_word,5
                        100000    5-41  	bool	aste.gtus,100000		" DU
                        000005    5-42  	equ	aste.gtms_word,5
                        040000    5-43  	bool	aste.gtms,040000		" DU
                        000005    5-44  	equ	aste.hc_word,5
                        020000    5-45  	bool	aste.hc,020000		" DU
                        000005    5-46  	equ	aste.hc_sdw_word,5
                        010000    5-47  	bool	aste.hc_sdw,010000		" DU
                        000005    5-48  	equ	aste.any_access_on_word,5
                        004000    5-49  	bool	aste.any_access_on,004000	" DU
                        000005    5-50  	equ	aste.write_access_on_word,5
                        002000    5-51  	bool	aste.write_access_on,002000	" DU
                        000005    5-52  	equ	aste.inhibit_cache_word,5
                        001000    5-53  	bool	aste.inhibit_cache,001000	" DU
                        000005    5-54  	equ	aste.explicit_deact_ok_word,5
                        000400    5-55  	bool	aste.explicit_deact_ok,000400	" DU
                        000005    5-56  	equ	aste.deact_error_word,5
                        000200    5-57  	bool	aste.deact_error,000200	" DU
                        000005    5-58  	equ	aste.hc_part_word,5
                        000100    5-59  	bool	aste.hc_part,000100		" DU
                        000005    5-60  	equ	aste.fm_damaged_word,5
                        000040    5-61  	bool	aste.fm_damaged,000040	" DU
                        000005    5-62  	equ	aste.multi_class_word,5
                        000020    5-63  	bool	aste.multi_class,000020	" DU
                        000005    5-64  	equ	aste.dius_word,5
                        000002    5-65  	bool	aste.dius,000002		" DU
                        000005    5-66  	equ	aste.nid_word,5
                        000001    5-67  	bool	aste.nid,000001		" DU
                        000005    5-68  	equ	aste.dmpr_pad_word,5
                        400000    5-69  	bool	aste.dmpr_pad,400000	" DL
                        000005    5-70  	equ	aste.ehs_word,5
                        200000    5-71  	bool	aste.ehs,200000		" DL
                        000005    5-72  	equ	aste.nqsw_word,5
                        100000    5-73  	bool	aste.nqsw,100000		" DL
                        000005    5-74  	equ	aste.dirsw_word,5
                        040000    5-75  	bool	aste.dirsw,040000		" DL
                        000005    5-76  	equ	aste.master_dir_word,5
                        020000    5-77  	bool	aste.master_dir,020000	" DL
                        000005    5-78  	equ	aste.volmap_seg_word,5
                        010000    5-79  	bool	aste.volmap_seg,010000	" DL
                        000005    5-80  	equ	aste.tqsw_word,5
                        004000    5-81  	bool	aste.tqsw,004000		" DL
                                  5-82  
                        000006    5-83  	equ	aste.dtu,6
                        000007    5-84  	equ	aste.dtm,7
                                  5-85  
                        000010    5-86  	equ	aste.quota,8		" UPPER
                                  5-87  
                        000011    5-88  	equ	aste.used,9		" UPPER
                                  5-89  
                        000012    5-90  	equ	aste.csl_word,10
                        000033    5-91  	equ	aste.csl_shift,27
                        000777    5-92  	bool	aste.csl_mask,000777
                        000012    5-93  	equ	aste.fmchanged_word,10
                        000400    5-94  	bool	aste.fmchanged,000400	" DU
                        000012    5-95  	equ	aste.fms_word,10
                        000200    5-96  	bool	aste.fms,000200		" DU
                        000012    5-97  	equ	aste.npfs_word,10
                        000100    5-98  	bool	aste.npfs,000100		" DU
                        000012    5-99  	equ	aste.gtpd_word,10
                        000040   5-100  	bool	aste.gtpd,000040		" DU
                        000012   5-101  	equ	aste.dnzp_word,10
                        000020   5-102  	bool	aste.dnzp,000020		" DU
                        000012   5-103  	equ	aste.per_process_word,10
                        000010   5-104  	bool	aste.per_process,000010	" DU
                        000012   5-105  	equ	aste.ddnp_word,10
                        000004   5-106  	bool	aste.ddnp,000004		" DU
                        000012   5-107  	equ	aste.records_word,10
                        000011   5-108  	equ	aste.records_shift,9
                        000777   5-109  	bool	aste.records_mask,000777
                        000012   5-110  	equ	aste.np_word,10
                        000000   5-111  	equ	aste.np_shift,0
                        000777   5-112  	bool	aste.np_mask,000777
                                 5-113  
                        000013   5-114  	equ	aste.ht_fp,11		" UPPER
                        000013   5-115  	equ	aste.fmchanged1_word,11
                        400000   5-116  	bool	aste.fmchanged1,400000	" DL
                        000013   5-117  	equ	aste.damaged_word,11
                        200000   5-118  	bool	aste.damaged,200000		" DL
                        000013   5-119  	equ	aste.pack_ovfl_word,11
                        100000   5-120  	bool	aste.pack_ovfl,100000	" DL
                        000013   5-121  	equ	aste.synchronized_word,11
                        040000   5-122  	bool	aste.synchronized,040000	" DL
                        000013   5-123  	equ	aste.ptsi_word,11
                        000006   5-124  	equ	aste.ptsi_shift,6
                        000003   5-125  	bool	aste.ptsi_mask,000003
                        000013   5-126  	equ	aste.marker_word,11
                        000000   5-127  	equ	aste.marker_shift,0
                        000077   5-128  	bool	aste.marker_mask,000077
                                 5-129  
                                 5-130  "
                                 5-131  "	Structure aste_part
                                 5-132  "
                        000014   5-133  	equ	aste_part_size,12
                                 5-134  
                                 5-135  
                        000000   5-136  	equ	aste_part.one,0
                        000001   5-137  	equ	aste_part.two,1		" DOUBLE
                                 5-138  
                        000013   5-139  	equ	aste_part.three_word,11
                        000000   5-140  	equ	aste_part.three_shift,0
                        000377   5-141  	bool	aste_part.three_mask,000377
                                 5-142  
                                 5-143  "
                                 5-144  "	Structure seg_aste
                                 5-145  "
                        000014   5-146  	equ	seg_aste_size,12
                                 5-147  
                                 5-148  
                        000010   5-149  	equ	seg_aste.usage,8
                                 5-150  
                                 5-151       "END INCLUDE FILE aste.incl.alm
                                    35  	include	stack_frame
                                   6-1  "
                                   6-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   6-3  "
                                   6-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   6-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   6-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   6-7  "
                        000020     6-8  	equ	stack_frame.prev_sp,16
                        000020     6-9  	equ	stack_frame.condition_word,16
                        000022    6-10  	equ	stack_frame.next_sp,18
                        000022    6-11  	equ	stack_frame.signaller_word,18
                        000024    6-12  	equ	stack_frame.return_ptr,20
                        000026    6-13  	equ	stack_frame.entry_ptr,22
                        000030    6-14  	equ	stack_frame.operator_ptr,24
                        000030    6-15  	equ	stack_frame.lp_ptr,24
                        000032    6-16  	equ	stack_frame.arg_ptr,26
                        000034    6-17  	equ	stack_frame.static_ptr,28
                        000035    6-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    6-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    6-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    6-21  	equ	stack_frame.translator_id,31
                        000040    6-22  	equ	stack_frame.regs,32
                        000060    6-23  	equ	stack_frame.min_length,48
                        000020    6-24  	equ	stack_frame.flag_word,16
                        020000    6-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    6-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    6-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    6-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    6-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    6-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    6-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    6-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  6-33  
                                  6-34  "
                                  6-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  6-36  "
                                    36  	include	mc
                                   7-1  "
                                   7-2  "	BEGIN INCLUDE FILE  mc.incl.alm  6/72 SHW
                                   7-3  "	Modified 8/80 by J. A. Bush for dps8/70M CPU
                                   7-4  "
                                   7-5  
                                   7-6  "	General layout of data items.
                                   7-7  
                        000000     7-8  	equ	mc.prs,0		pointer registers
                        000020     7-9  	equ	mc.regs,16	registers
                        000030    7-10  	equ	mc.scu,24		SCU data
                        000050    7-11  	equ	mc.eis_info,40	pointers and lengths for EIS
                                  7-12  
                                  7-13  "	Temporary storage for software
                                  7-14  
                        000040    7-15  	equ	mc.mask,32	system controller mask at time of fault
                        000042    7-16  	equ	mc.ips_temp,34	temporary storage for IPS info
                        000043    7-17  	equ	mc.errcode,35	error code
                        000044    7-18  	equ	mc.fim_temp,36	temporary to hold fault index and unique index
                        000045    7-19  	equ	mc.fault_reg,37	fault register
                        000046    7-20  	equ	mc.fault_time,38	time of fault
                        000046    7-21  	equ	mc.cpu_type_word,38	CPU type from  rsw (2). overlays part of time word
                        300000    7-22  	bool	mc.cpu_type_mask,300000 DU
                        000046    7-23  	equ	mc.ext_fault_reg,38	ext fault reg for dps8. overlays part of time word
                        077774    7-24  	bool	mc.ext_fault_reg_mask,77774 DU
                        000003    7-25  	equ	mc.cpu_type_shift,3 positions to shift right or left
                                  7-26  
                                  7-27  
                                  7-28  
                                  7-29  "	SCU  DATA
                                  7-30  
                                  7-31  "	WORD  (0)		PROCEDURE POINTER REGISTER
                                  7-32  
                        000030    7-33  	equ	mc.scu.ppr.prr_word,24	Procedure Ring Register
                        000000    7-34  	equ	scu.ppr.prr_word,0
                        700000    7-35  	bool	scu.ppr.prr_mask,700000	DU
                        000041    7-36  	equ	scu.ppr.prr_shift,33
                                  7-37  
                        000030    7-38  	equ	mc.scu.ppr.psr_word,24	Procedure Segment Register
                        000000    7-39  	equ	scu.ppr.psr_word,0
                        077777    7-40  	bool	scu.ppr.psr_mask,077777	DU
                        000022    7-41  	equ	scu.ppr.psr_shift,18
                                  7-42  
                        000030    7-43  	equ	mc.scu.ppr.p_word,24	Procedure Privileged Bit
                        000000    7-44  	equ	scu.ppr.p_word,0
                        400000    7-45  	bool	scu.ppr.p,400000		DL
                                  7-46  
                                  7-47  "	  APPENDING UNIT STATUS
                        000030    7-48  	equ	mc.scu.apu_stat_word,24	APPENDING UNIT STATUS
                        000000    7-49  	equ	scu.apu_stat_word,0		
                                  7-50  
                        200000    7-51  	bool	scu.apu.xsf,200000		DL - Ext Seg Flag - IT mod.
                        100000    7-52  	bool	scu.apu.sdwm,100000		DL - Match in SDW Ass. Mem.
                        040000    7-53  	bool	scu.apu.sd_on,040000	DL - SDW Ass. Mem.  ON
                        020000    7-54  	bool	scu.apu.ptwm,020000		DL - Match in PTW Ass. Mem.
                        010000    7-55  	bool	scu.apu.pt_on,010000	DL - PTW Ass. Mem.  ON
                        004000    7-56  	bool	scu.apu.pi_ap,004000	DL - Instr fetch or Append cycle
                        002000    7-57  	bool	scu.apu.dsptw,002000	DL - Fetch of DSPTW
                        001000    7-58  	bool	scu.apu.sdwnp,001000	DL - Fetch of SDW non-paged
                        000400    7-59  	bool	scu.apu.sdwp,000400		DL - Fetch of SDW paged
                        000200    7-60  	bool	scu.apu.ptw,000200		DL - Fetch of PTW
                        000100    7-61  	bool	scu.apu.ptw2,000100		DL - Fetch of pre-paged  PTW
                        000040    7-62  	bool	scu.apu.fap,000040		DL - Fetch of final address paged
                        000020    7-63  	bool	scu.apu.fanp,000020		DL - Fetch final address non-paged
                        000010    7-64  	bool	scu.apu.fabs,000010		DL - Fetch of final address absolute
                                  7-65  
                        000030    7-66  	equ	mc.scu.fault_cntr_word,24	Num of retrys of EIS instructions.
                        000000    7-67  	equ	scu.fault_cntr_word,0	
                                  7-68  
                        000007    7-69  	bool	scu.fault_cntr_mask,000007
                                  7-70  
                                  7-71  
                                  7-72  "	WORD  (1)		FAULT DATA
                                  7-73  
                        000031    7-74  	equ	mc.scu.fault_data_word,25	FAULT  DATA
                        000001    7-75  	equ	scu.fault_data_word,1
                                  7-76  
                        400000    7-77  	bool	scu.fd.iro,400000		DU - Illegal Ring Order
                        200000    7-78  	bool	scu.fd.oeb,200000		DU - Not In Execute Bracket
                        100000    7-79  	bool	scu.fd.e_off,100000		DU - No  Execute
                        040000    7-80  	bool	scu.fd.orb,040000		DU - Not In Read Bracket
                        020000    7-81  	bool	scu.fd.r_off,020000		DU - No  Read
                        010000    7-82  	bool	scu.fd.owb,010000		DU - Not In Write Bracket
                        004000    7-83  	bool	scu.fd.w_off,004000		DU - No  Write
                        002000    7-84  	bool	scu.fd.no_ga,002000		DU - Not A Gate
                        001000    7-85  	bool	scu.fd.ocb,001000		DU - Not in  Call Bracket
                        000400    7-86  	bool	scu.fd.ocall,000400		DU - Outward Call
                        000200    7-87  	bool	scu.fd.boc,000200		DU - Bad Outward Call
                        000100    7-88  	bool	scu.fd.inret,000100		DU - Inward Return
                        000040    7-89  	bool	scu.fd.crt,000040		DU - Cross  Ring Transfer
                        000020    7-90  	bool	scu.fd.ralr,000020		DU - Ring   Alarm
                        000010    7-91  	bool	scu.fd.am_er,000010		DU - Assoc. Mem. Fault
                        000004    7-92  	bool	scu.fd.oosb,000004		DU - Out Of Bounds
                        000002    7-93  	bool	scu.fd.paru,000002		DU - Parity Upper
                        000001    7-94  	bool	scu.fd.parl,000001		DU - Parity Lower
                                  7-95  
                        400000    7-96  	bool	scu.fd.onc_1,400000		DL - Op Not Complete
                        200000    7-97  	bool	scu.fd.onc_2,200000		DL - Op Not Complete
                                  7-98  
                                  7-99  "  	  GROUP II  FAULT DATA
                        400000   7-100  	bool	scu.fd.isn,400000		DU - Illegal Segment Number
                        200000   7-101  	bool	scu.fd.ioc,200000		DU - Illegal Op Code
                        100000   7-102  	bool	scu.fd.ia_im,100000		DU - Illegal Addr - Modifier
                        040000   7-103  	bool	scu.fd.isp,040000		DU - Illegal Slave Procedure
                        020000   7-104  	bool	scu.fd.ipr,020000		DU - Illegal Procedure
                        010000   7-105  	bool	scu.fd.nea,010000		DU - Non Existent Address
                        004000   7-106  	bool	scu.fd.oobb,004000		DU - Out Of  Bounds
                                 7-107  
                        000031   7-108  	equ	mc.scu.port_stat_word,25	PORT STATUS
                        000001   7-109  	equ	scu.port_stat_word,1
                                 7-110  
                        170000   7-111  	bool	scu.ial_mask,170000		DL - Illegal Action Lines
                        000014   7-112  	equ	scu.ial_shift,12
                                 7-113  
                        007000   7-114  	bool	scu.iac_mask,007000		DL - Illegal Action Channel
                        000011   7-115  	equ	scu.iac_shift,9
                                 7-116  
                        000700   7-117  	bool	scu.con_chan_mask,000700	DL - Connect Channel
                        000006   7-118  	equ	scu.con_chan_shift,6
                                 7-119  
                        000076   7-120  	bool	scu.fi_num_mask,000076	DL - Fault / Interrupt  Number
                        000001   7-121  	equ	scu.fi_num_shift,1
                                 7-122  
                        000001   7-123  	bool	scu.fi_flag_mask,000001	DL - Fault / Interrupt  Flag
                                 7-124  
                                 7-125  
                                 7-126  "	WORD  (2)		TEMPORARY POINTER REGISTER
                                 7-127  
                        000032   7-128  	equ	mc.scu.tpr.trr_word,26	Temporary Ring Register
                        000002   7-129  	equ	scu.tpr.trr_word,2
                        700000   7-130  	bool	scu.tpr.trr_mask,700000	DU
                        000041   7-131  	equ	scu.tpr.trr_shift,33
                                 7-132  
                        000032   7-133  	equ	mc.scu.tpr.tsr_word,26	Temporary Segment Register
                        000002   7-134  	equ	scu.tpr.tsr_word,2
                        077777   7-135  	bool	scu.tpr.tsr_mask,077777	DU
                        000022   7-136  	equ	scu.tpr.tsr_shift,18
                                 7-137  
                        000032   7-138  	equ	mc.scu.cpu_no_word,26	CPU  Number
                        000002   7-139  	equ	scu.cpu_no_word,2
                                 7-140  
                        000700   7-141  	bool	scu.cpu_no_mask,000700	DL
                        000006   7-142  	equ	scu.cpu_shift,6
                                 7-143  
                        000032   7-144  	equ	mc.scu.delta_word,26	Tally Modification DELTA
                        000002   7-145  	equ	scu.delta_word,2
                                 7-146  
                        000077   7-147  	bool	scu.delta_mask,000077	DL
                                 7-148  
                                 7-149  
                                 7-150  "	WORD  (3)		TSR STATUS
                                 7-151  
                        000033   7-152  	equ	mc.scu.tsr_stat_word,27	TSR STATUS for 1,2, and 3
                        000003   7-153  	equ	scu.tsr_stat_word,3		Word Instructions
                                 7-154  
                        777700   7-155  	bool	scu.tsr_stat_mask,777700	DL - All of Status
                        000006   7-156  	equ	scu.tsr_stat_shift,6
                                 7-157  
                        740000   7-158  	bool	scu.tsna_mask,740000	DL - Word 1 Status
                        700000   7-159  	bool	scu.tsna.prn_mask,700000	DL - Word 1 PR num
                        000017   7-160  	equ	scu.tsna.prn_shift,15
                        040000   7-161  	bool	scu.tsna.prv,040000		DL - Word 1 PR valid bit
                                 7-162  
                        036000   7-163  	bool	scu.tsnb_mask,036000	DL - Word 2 Status
                        034000   7-164  	bool	scu.tsnb.prn_mask,034000	DL - Word 2 PR num
                        000013   7-165  	equ	scu.tsnb.prn_shift,11
                        002000   7-166  	bool	scu.tsnb.prv,002000		DL - Word 2 PR valid bit
                                 7-167  
                        000013   7-168  	bool	scu.tsnc_mask,0013		DL - Word 3 Status
                        001600   7-169  	bool 	scu.tsnc.prn_mask,001600	DL - Word 3 PR num
                        000007   7-170  	equ	scu.tsnc.prn_shift,7
                        000100   7-171  	bool	scu.tsnc.prv,000100		DL - Word 3 PR valid bit
                                 7-172  
                                 7-173  
                        000033   7-174  	equ	mc.scu.tpr.tbr_word,27	TPR.TBR  Field
                        000003   7-175  	equ	scu.tpr.tbr_word,3
                                 7-176  
                        000077   7-177  	bool	scu.tpr.tbr_mask,000077	DL
                                 7-178  
                                 7-179  
                                 7-180  "	WORD  (4)		INSTRUCTION COUNTER
                                 7-181  
                        000034   7-182  	equ	mc.scu.ilc_word,28		INSTRUCTION  COUNTER
                        000004   7-183  	equ	scu.ilc_word,4
                        000022   7-184  	equ	scu.ilc_shift,18
                                 7-185  
                        000034   7-186  	equ	mc.scu.indicators_word,28	INDICATOR  REGISTERS
                        000004   7-187  	equ	scu.indicators_word,4
                                 7-188  
                        400000   7-189  	bool	scu.ir.zero,400000		DL - Zero  Indicator
                        200000   7-190  	bool	scu.ir.neg,200000		DL - Negative Indicator
                        100000   7-191  	bool	scu.ir.carry,100000		DL - Carry Indicator
                        040000   7-192  	bool	scu.ir.ovfl,040000		DL - Overflow Indicator
                        020000   7-193  	bool	scu.ir.eovf,020000		DL - Exponent Overflow  Ind
                        010000   7-194  	bool	scu.ir.eufl,010000		DL - Exponent Underflow Ind
                        004000   7-195  	bool	scu.ir.oflm,004000		DL - Overflow Mask Indicator
                        002000   7-196  	bool	scu.ir.tro,002000		DL - Tally Runout  Indicator
                        001000   7-197  	bool	scu.ir.par,001000		DL - Parity  Indicator
                        000400   7-198  	bool	scu.ir.parm,000400		DL - Parity  Mask  Indicator
                        000200   7-199  	bool	scu.ir.bm,000200			DL - Bar  Mode  Indicator
                        000100   7-200  	bool	scu.ir.tru,000100		DL - Truncation Indicator
                        000040   7-201  	bool	scu.ir.mif,000040		DL - Multiword  Indicator
                        000020   7-202  	bool	scu.ir.abs,000020		DL - Absolute   Indicator
                        000010   7-203  	bool	scu.ir.hex,000010		DL - Hexadecimal Indicator
                                 7-204  
                                 7-205  "	WORD  (5)		COMPUTED ADDRESS
                                 7-206  
                        000035   7-207  	equ	mc.scu.ca_word,29		COMPUTED  ADDRESS
                        000005   7-208  	equ	scu.ca_word,5
                        000022   7-209  	equ	scu.ca_shift,18
                                 7-210  
                        000035   7-211  	equ	mc.scu.cu_stat_word,29	CONTROL UNIT STATUS
                        000005   7-212  	equ	scu.cu_stat_word,5
                                 7-213  
                        400000   7-214  	bool	scu.cu.rf,400000		DL - Repeat First
                                 7-215  "					On First Cycle of Repeat Inst.
                        200000   7-216  	bool	scu.cu.rpt,200000		DL - Repeat Instruction
                        100000   7-217  	bool	scu.cu.rd,100000		DL - Repeat Double Instr.
                        040000   7-218  	bool	scu.cu.rl,040000		DL - Repeat Link   Instr.
                                 7-219  
                        020000   7-220  	bool	scu.cu.pot,020000		DL - IT Modification
                        010000   7-221  	bool	scu.cu.pon,010000		DL - Return Type Instruction
                                 7-222  
                        004000   7-223  	bool	scu.cu.xde,004000		DL - XDE from Even Location
                        002000   7-224  	bool	scu.cu.xdo,002000		DL - XDE from Odd  Location
                                 7-225  
                        001000   7-226  	bool	scu.cu.poa,001000		DL - Operand Preparation
                        000400   7-227  	bool	scu.cu.rfi,000400		DL - Tells CPU to refetch instruction
                                 7-228  "	This Bit  Not Used    (000200)
                        000100   7-229  	bool	scu.cu.if,000100		DL - Fault occurred during instruction fetch
                                 7-230  
                        000035   7-231  	equ	mc.scu.cpu_tag_word,29	Computed Tag Field
                        000005   7-232  	equ	scu.cpu_tag_word,5
                                 7-233  
                        000007   7-234  	bool	scu.cpu_tag_mask,000007	DL
                                 7-235  
                                 7-236  
                                 7-237  "	WORDS  (6,7)	INSTRUCTIONS
                                 7-238  
                        000036   7-239  	equ	scu.even_inst_word,30	Even Instruction
                                 7-240  
                        000037   7-241  	equ	scu.odd_inst_word,31	Odd  Instruction
                                 7-242  
                                 7-243  
                                 7-244  "	END INCLUDE FILE incl.alm
                                    37  	include	null_addresses
                                   8-1  "	BEGIN INCLUDE FILE null_addresses.incl.alm
                                   8-2  "	Added segmove values, Benson Margulies, 84-01.
                                   8-3  "
                        377007     8-4  	bool	pc_move_page_table_1_null,377007
                        377010     8-5  	bool	pc_move_page_table_2_null,377010
                        377011     8-6  	bool	get_aste_null,377011
                        377012     8-7  	bool	make_sdw_null,377012
                        377013     8-8  	bool	deactivate_null,377013
                        377015     8-9  	bool	page_bad_pd_null,377015
                        377016    8-10  	bool	list_deposit_null,377016
                        377017    8-11  	bool	get_file_map_null,377017
                        377020    8-12  	bool	fill_page_table_null,377020
                        377021    8-13  	bool	init_sst_null,377021
                        377022    8-14  	bool	get_file_map_vt_null,377022
                        377023    8-15  	bool	unprotected_null,377023
                        377024    8-16  	bool	page_bad_null,377024
                        377025    8-17  	bool	page_problem_null,377025
                        377026    8-18  	bool	page_parity_null,377026
                        377027    8-19  	bool	page_devparity_null,377027
                        377030    8-20  	bool	segmove_old_addr_null,377030
                        377031    8-21  	bool	segmove_new_addr_null,377031
                        377772    8-22  	bool	get_file_map_dumper_non_null,377772
                        377777    8-23  	bool	append_null,377777
                                  8-24  
                                  8-25  "	END INCLUDE FILE null_addresses.incl.alm
                                    38  	include	add_type
                                   9-1  "
                                   9-2  "	BEGIN INCLUDE FILE add_type.incl.alm 02/14/75
                                   9-3  "
                                   9-4  
                                   9-5  "	This file defines the interpretation of the add_type
                                   9-6  "	field of a ptw or cme.
                                   9-7  
                        400000     9-8  	bool	add_type.core,400000   "DL core address - S/B only in PTW
                        200000     9-9  	bool	add_type.disk,200000   "DL disk address
                        100000    9-10  	bool	add_type.pd,100000	   "DL paging device record number
                        040000    9-11  	bool	add_type.reserved,040000 "DL reserved for future use
                                  9-12  
                        740000    9-13  	bool	add_type.non_null,740000 "DL not a null address
                                  9-14  
                                  9-15  "
                                  9-16  "	END INCLUDE FILE add_type.incl.alm
                                  9-17  "
                                    39  	include	page_info
                                  10-1  "	BEGIN INCLUDE FILE page_info.incl.alm  --  6/72
                                  10-2  "
                                  10-3  " Modified 02/22/81, W. Olin Sibert, for ADP conversion
                                  10-4  " Modified 06/23/82, E. N. Kittlitz, to move core map.
                                  10-5  "
                        000012    10-6  	equ	page_power,10		" 2**10 = size of page
                        000001    10-7  	bool	df1,000001		" directed fault 1 on page fault
                                  10-8  
                 777777 740000    10-9  	bool	address_mask,777777740000	" Mask for PTW add, add_type compares
                                 10-10  					" Use as =v36/address_mask
                                 10-11  
                        400000   10-12  	bool	ptw.nulled,400000		" flag for testing addresses
                                 10-13  
                        100000   10-14  	bool	int,100000		" Disk dim flags
                        000020   10-15  	bool	pri,000020
                        000004   10-16  	bool	no_post,000004
                                 10-17  
                        000003   10-18  	equ	sst,3			" Standard pointer and index
                        000003   10-19  	equ	pdm,sst			" register usage
                        000003   10-20  	equ	ast,sst
                        000002   10-21  	equ	ptw,2
                                 10-22  
                                 10-23  "	Various AST masks which are not
                                 10-24  "	expressible in standard notation
                                 10-25  "
                        777000   10-26  	bool	aste.csl_mask_inner,777000
                        777000   10-27  	bool	aste.records_mask_inner,777000
                                 10-28  
                        000000   10-29  	equ	fault_entry,0		" Flags indicating how we
                        000001   10-30  	equ	read_entry,1		" were entered
                        000002   10-31  	equ	write_entry,2
                        000003   10-32  	equ	pre_page_entry,3
                        000004   10-33  	equ	post_purge_entry,4
                        000005   10-34  	equ	pd_flush_entry,5
                        000006   10-35  	equ	evict_entry,6
                        000007   10-36  	equ	abs_wire_entry,7
                        000010   10-37  	equ	cleanup_entry,8
                                 10-38  
                                 10-39  " Constants for manipulating core addresses and PTWs. The core address
                                 10-40  " is a fixed bin (35) aligned, and must be moved to/from the appropriate
                                 10-41  " field in the SDW or PTW.
                                 10-42  "
                                 10-43  	iftarget	l68
                        777760          	   bool	ptw_add_mask,777760 " Page number
                        777760          	   bool	sdw_add_mask,777760 " Page number
                 000077 777777          	   bool	coreadd_mask,000077777777 " Mask for coreadd in AL
                                        
                        000014          	   equ	coreadd_to_ptw.ls,12
                        000014          	   equ	coreadd_to_sdw.ls,12
                        000014          	   equ	ptw_to_coreadd.rl,12
                        000014          	   equ	sdw_to_coreadd.rl,12
                        000002          	   equ	cmep_to_ptw.ls,2
                        000002          	   equ	cmep_to_sdw.ls,2
                        000002          	   equ	ptw_to_cmep.rl,2
                        000024          	   equ	ptw_to_cmep_lower.rl,20
                        000002          	   equ	sdw_to_cmep.rl,2
                                        "	ifend
                                 10-58  
                                 10-59  	iftarget	adp
                                        "	   bool	ptw_add_mask,177777 " Page number
                                        "	   bool	sdw_add_mask,777774 " Page number
                                        "	   bool	coreadd_mask,000377777777 " Mask for coreadd in AL
                                        "
                                        "	   equ	coreadd_to_ptw.ls,8
                                        "	   equ	coreadd_to_sdw.ls,10
                                        "	   equ	ptw_to_coreadd.rl,8
                                        "	   equ	sdw_to_coreadd.rl,10
                                        "	   equ	cmep_to_ptw.rl,2	" Must shift backwards
                                        "	   equ	cmep_to_sdw.ls,0
                                        "	   equ	ptw_to_cmep.ls,2	" Must shift backwards
                                        "	   equ	ptw_to_cmep_lower.rl,16
                                        "	   equ	sdw_to_cmep.rl,0
                                        "	ifend
                                 10-74  
                        000012   10-75  	equ	cmep_to_coreadd.rl,10	.cmep to coreadd
                        000012   10-76  	equ	coreadd_to_cmep.ls,10	coreadd to .cmep
                                 10-77  
                                 10-78  " 
                                 10-79  "
                                 10-80  " Assorted general purpose macros used in PC. These will be changed
                                 10-81  " when address types are changed for 20 bit addresses. Additionally,
                                 10-82  " for more accurate metering on the ADP, the metering macros should
                                 10-83  " modified to update the metering cells uninterruptably.
                                 10-84  "
                                 10-85  
                                 10-86  	macro	missing
                              1  10-87  	ife	&2,()
                              2  10-88  	  warn	(&1: Argument missing.)
                              3  10-89  	ifend
                              4  10-90  	&end
                                 10-91  "
                                 10-92  " staddra and staddrq store the address portion (upper 22 bits) of the A or Q
                                 10-93  " into the specified location.
                                 10-94  "
                                 10-95  	macro	staddra
                              1  10-96  	missing	staddra,&1
                              2  10-97  	era	&F1
                              3  10-98  	ana	=v36/address_mask
                              4  10-99  	ersa	&F1
                              5 10-100  	&end
                                10-101  
                                10-102  	macro	staddrq
                              1 10-103  	missing	staddrq,&1
                              2 10-104  	erq	&F1
                              3 10-105  	anq	=v36/address_mask
                              4 10-106  	ersq	&F1
                              5 10-107  	&end
                                10-108  
                                10-109  "	Macros for metering 6/23/80
                                10-110  
                                10-111  	macro	read_clock
                              1 10-112  	iftarget	l68
                              2 10-113  	  rccl	sys_info$clock_,*
                              3 10-114  	ifend
                              4 10-115  	iftarget adp
                              5 10-116  	  rccl	0
                              6 10-117  	ifend
                              7 10-118  	&end
                                10-119  
                                10-120  	macro	increment
                              1 10-121  	missing	increment,&1
                              2 10-122  	aos	&1
                              3 10-123  	&end
                                10-124  
                                10-125  	macro	store_clock
                              1 10-126  	missing	store_clock,&1
                              2 10-127  	read_clock
                              3 10-128  	staq	&1
                              4 10-129  	&end
                                10-130  
                                10-131  	macro	meter_time
                              1 10-132  	missing	meter_time,&3
                              2 10-133  	increment &3
                              3 10-134  	read_clock
                              4 10-135  	sbaq	&1
                              5 10-136  	adaq	&2
                              6 10-137  	staq	&2
                              7 10-138  	&end
                                10-139  
                                10-140  "	END INCLUDE FILE  page_info.incl.alm
                                    40  	include	sst
                                  11-1  
                                  11-2  
                                  11-3       "BEGIN INCLUDE FILE sst.incl.alm
                                  11-4  
                                  11-5  
                                  11-6  	"Created 01/14/85  1523.7 est Mon by convert_include_file,
                                  11-7  	"   Version of 01/09/85  0954.4 est Wed.
                                  11-8  
                                  11-9  	"Made from >Pool>m>loe>incl>sst.incl.pl1,
                                 11-10  	"   modified 01/09/85  1148.3 est Wed
                                 11-11  
                                 11-12  "
                                 11-13  "	Structure sst
                                 11-14  "
                        001000   11-15  	equ	sst_size,512
                                 11-16  
                                 11-17  
                        000000   11-18  	equ	sst.space,0
                        000010   11-19  	equ	sst.pre_page_time,8		" DOUBLE
                        000012   11-20  	equ	sst.post_purge_time,10	" DOUBLE
                        000014   11-21  	equ	sst.post_in_core,12
                        000015   11-22  	equ	sst.thrashing,13
                        000016   11-23  	equ	sst.npfs_misses,14
                        000017   11-24  	equ	sst.salv,15
                        000020   11-25  	equ	sst.ptl,16
                        000021   11-26  	equ	sst.astl,17
                        000022   11-27  	equ	sst.astl_event,18
                                 11-28  
                        000023   11-29  	equ	sst.astl_notify_requested_word,19
                        400000   11-30  	bool	sst.astl_notify_requested,400000 " DU
                                 11-31  
                        000024   11-32  	equ	sst.nused,20
                        000025   11-33  	equ	sst.ptwbase,21
                        000026   11-34  	equ	sst.tfreep,22
                        000030   11-35  	equ	sst.astap,24
                        000032   11-36  	equ	sst.ptl_wait_ct,26
                        000033   11-37  	equ	sst.astsize,27
                        000034   11-38  	equ	sst.cmesize,28
                        000036   11-39  	equ	sst.root_astep,30
                        000040   11-40  	equ	sst.pts,32
                        000044   11-41  	equ	sst.level,36		" LEVEL 2
                                 11-42  
                        000044   11-43  	equ	sst.ausedp,36		" UPPER
                        000044   11-44  	equ	sst.no_aste,36		" LOWER
                                 11-45  
                        000050   11-46  	equ	sst.atempp,40		" UPPER
                        000050   11-47  	equ	sst.atempp1,40		" LOWER
                                 11-48  
                        000051   11-49  	equ	sst.dm_enabled_word,41
                        400000   11-50  	bool	sst.dm_enabled,400000	" DU
                                 11-51  
                        000052   11-52  	equ	sst.ainitp,42		" UPPER
                        000052   11-53  	equ	sst.ainitp1,42		" LOWER
                                 11-54  
                        000053   11-55  	equ	sst.strsize,43
                        000054   11-56  	equ	sst.cmp,44
                                 11-57  
                        000056   11-58  	equ	sst.usedp,46		" UPPER
                                 11-59  
                        000057   11-60  	equ	sst.wtct,47
                                 11-61  
                        000060   11-62  	equ	sst.startp,48		" UPPER
                                 11-63  
                        000061   11-64  	equ	sst.removep,49		" UPPER
                                 11-65  
                        000062   11-66  	equ	sst.double_write,50
                        000063   11-67  	equ	sst.temp_w_event,51
                        000064   11-68  	equ	sst.root_pvtx,52
                                 11-69  
                        000065   11-70  	equ	sst.nolock_word,53
                        400000   11-71  	bool	sst.nolock,400000		" DU
                                 11-72  
                        000066   11-73  	equ	sst.fc_skips_pinned,54
                        000067   11-74  	equ	sst.cl_skips_pinned,55
                        000070   11-75  	equ	sst.ast_ht_ptr,56
                        000072   11-76  	equ	sst.ast_ht_n_buckets,58
                        000073   11-77  	equ	sst.ast_ht_uid_mask,59
                        000074   11-78  	equ	sst.meter_ast_locking,60
                        000075   11-79  	equ	sst.checksum_filemap,61
                        000076   11-80  	equ	sst.page_read_errors,62
                        000077   11-81  	equ	sst.page_write_errors,63
                        000100   11-82  	equ	sst.cycle_pv_allocation,64
                        000101   11-83  	equ	sst.n_trailers,65
                        000102   11-84  	equ	sst.synch_activations,66
                        000103   11-85  	equ	sst.synch_skips,67
                        000104   11-86  	equ	sst.lock_waits,68
                        000105   11-87  	equ	sst.total_locks_set,69
                        000106   11-88  	equ	sst.pdir_page_faults,70
                        000107   11-89  	equ	sst.level_1_page_faults,71
                        000110   11-90  	equ	sst.dir_page_faults,72
                        000111   11-91  	equ	sst.ring_0_page_faults,73
                        000112   11-92  	equ	sst.rqover,74
                        000113   11-93  	equ	sst.pc_io_waits,75
                        000114   11-94  	equ	sst.steps,76
                        000115   11-95  	equ	sst.needc,77
                        000116   11-96  	equ	sst.ceiling,78
                        000117   11-97  	equ	sst.ctwait,79
                        000120   11-98  	equ	sst.wired,80
                        000121   11-99  	equ	sst.laps,81
                        000122  11-100  	equ	sst.skipw,82
                        000123  11-101  	equ	sst.skipu,83
                        000124  11-102  	equ	sst.skipm,84
                        000125  11-103  	equ	sst.skipos,85
                        000126  11-104  	equ	sst.aused,86
                        000127  11-105  	equ	sst.damaged_ct,87
                        000130  11-106  	equ	sst.deact_count,88
                        000131  11-107  	equ	sst.demand_deact_attempts,89
                        000132  11-108  	equ	sst.demand_deactivations,90
                        000133  11-109  	equ	sst.reads,91
                        000143  11-110  	equ	sst.writes,99
                        000153  11-111  	equ	sst.short_pf_count,107
                        000154  11-112  	equ	sst.loop_locks,108
                        000156  11-113  	equ	sst.loop_lock_time,110	" DOUBLE
                        000160  11-114  	equ	sst.cpu_sf_time,112		" DOUBLE
                        000162  11-115  	equ	sst.total_sf_pf,114
                        000163  11-116  	equ	sst.total_sf,115
                        000164  11-117  	equ	sst.pre_page_size,116
                        000165  11-118  	equ	sst.post_list_size,117
                        000166  11-119  	equ	sst.post_purgings,118
                        000167  11-120  	equ	sst.post_purge_calls,119
                        000170  11-121  	equ	sst.pre_page_calls,120
                        000171  11-122  	equ	sst.pre_page_list_size,121
                        000172  11-123  	equ	sst.pre_page_misses,122
                        000173  11-124  	equ	sst.pre_pagings,123
                        000174  11-125  	equ	sst.wire_proc_data,124	" DOUBLE
                        000214  11-126  	equ	sst.abs_wired_count,140
                        000215  11-127  	equ	sst.system_type,141
                        000216  11-128  	equ	sst.wired_copies,142
                        000217  11-129  	equ	sst.recopies,143
                        000220  11-130  	equ	sst.first_core_block,144
                        000221  11-131  	equ	sst.last_core_block,145
                        000222  11-132  	equ	sst.fw_retries,146
                        000223  11-133  	equ	sst.pvhtp,147
                        000224  11-134  	equ	sst.askipsize,148
                        000230  11-135  	equ	sst.aneedsize,152
                        000234  11-136  	equ	sst.stepsa,156
                        000235  11-137  	equ	sst.askipsehs,157
                        000236  11-138  	equ	sst.asearches,158
                        000237  11-139  	equ	sst.askipslevel,159
                        000240  11-140  	equ	sst.askipsinit,160
                        000241  11-141  	equ	sst.acost,161
                        000242  11-142  	equ	sst.askipslock,162
                        000243  11-143  	equ	sst.askipdius,163
                        000244  11-144  	equ	sst.alaps,164
                        000245  11-145  	equ	sst.updates,165
                        000246  11-146  	equ	sst.setfaults_all,166
                        000247  11-147  	equ	sst.setfaults_acc,167
                        000250  11-148  	equ	sst.total_bf,168
                        000251  11-149  	equ	sst.total_bf_pf,169
                        000252  11-150  	equ	sst.cpu_bf_time,170		" DOUBLE
                        000254  11-151  	equ	sst.asteps,172
                        000260  11-152  	equ	sst.ast_locked_at_time,176	" DOUBLE
                        000262  11-153  	equ	sst.ast_locked_total_time,178	" DOUBLE
                        000264  11-154  	equ	sst.ast_lock_wait_time,180	" DOUBLE
                        000266  11-155  	equ	sst.ast_locking_count,182
                        000267  11-156  	equ	sst.cleanup_count,183
                        000270  11-157  	equ	sst.cleanup_real_time,184	" DOUBLE
                        000272  11-158  	equ	sst.tree_count,186
                        000372  11-159  	equ	sst.pp_meters,250
                                11-160  
                        000472  11-161  	equ	sst.wusedp,314		" UPPER
                                11-162  
                        000473  11-163  	equ	sst.write_hunts,315
                        000474  11-164  	equ	sst.claim_skip_cme,316
                        000475  11-165  	equ	sst.claim_skip_free,317
                        000476  11-166  	equ	sst.claim_notmod,318
                        000477  11-167  	equ	sst.claim_passed_used,319
                        000500  11-168  	equ	sst.claim_skip_ptw,320
                        000501  11-169  	equ	sst.claim_writes,321
                        000502  11-170  	equ	sst.claim_steps,322
                        000503  11-171  	equ	sst.pre_seeks_failed,323
                        000504  11-172  	equ	sst.resurrections,324
                        000505  11-173  	equ	sst.volmap_seg_page_faults,325
                        000506  11-174  	equ	sst.oopv,326
                        000507  11-175  	equ	sst.dblw_resurrections,327
                        000510  11-176  	equ	sst.sgm_time,328		" DOUBLE
                        000512  11-177  	equ	sst.sgm_pf,330
                        000513  11-178  	equ	sst.bad_sgms,331
                        000514  11-179  	equ	sst.sgm_sgft,332
                        000515  11-180  	equ	sst.good_sgms,333
                        000516  11-181  	equ	sst.claim_runs,334
                        000517  11-182  	equ	sst.activations,335
                        000520  11-183  	equ	sst.dir_activations,336
                        000521  11-184  	equ	sst.hedge_updatevs,337
                        000522  11-185  	equ	sst.hedge_writes,338
                        000523  11-186  	equ	sst.evict_recover_data,339	" LEVEL 2
                                11-187  
                        000523  11-188  	equ	sst.evict_ptp,339		" UPPER
                        000523  11-189  	equ	sst.evict_phmbit,339	" LOWER
                                11-190  
                        000524  11-191  	equ	sst.force_swrites,340
                        000525  11-192  	equ	sst.force_pwrites,341
                        000526  11-193  	equ	sst.fw_none,342
                        000527  11-194  	equ	sst.force_updatevs,343
                        000530  11-195  	equ	sst.pf_unlock_ptl_time,344	" DOUBLE
                        000532  11-196  	equ	sst.pf_unlock_ptl_meterings,346
                        000533  11-197  	equ	sst.makeknown_activations,347
                        000534  11-198  	equ	sst.backup_activations,348
                        000535  11-199  	equ	sst.metering_flags,349	" LEVEL 2
                                11-200  
                        400000  11-201  	bool	sst.activate_activated,400000	" DU
                                11-202  
                        000536  11-203  	equ	sst.seg_fault_calls,350
                        000537  11-204  	equ	sst.stk_truncate_should_didnt,351
                        000540  11-205  	equ	sst.stk_truncate_should_did,352
                        000541  11-206  	equ	sst.stk_truncate_shouldnt_didnt,353
                        000542  11-207  	equ	sst.stk_truncate_shouldnt_did,354
                        000543  11-208  	equ	sst.stk_pages_truncated,355
                        000544  11-209  	equ	sst.stk_pages_truncated_in_core,356
                        000545  11-210  	equ	sst.segmove_lock,357	" LEVEL 2
                                11-211  
                        000545  11-212  	equ	sst.pid,357
                        000546  11-213  	equ	sst.event,358
                                11-214  
                        000547  11-215  	equ	sst.notify_word,359
                        400000  11-216  	bool	sst.notify,400000		" DU
                                11-217  
                        000550  11-218  	equ	sst.segmove_io_limit,360
                        000551  11-219  	equ	sst.segmove_found_synch,361
                        000552  11-220  	equ	sst.segmove_synch_disappeared,362
                        000553  11-221  	equ	sst.segmove_n_reads,363
                        000554  11-222  	equ	sst.segmove_max_tries,364
                        000555  11-223  	equ	sst.segmove_astep,365
                        000556  11-224  	equ	sst.segmove_pvtx,366
                        000557  11-225  	equ	sst.segmove_vtocx,367
                        000560  11-226  	equ	sst.segmove_old_addr_astep,368
                        000561  11-227  	equ	sst.segmove_new_addr_astep,369
                        000562  11-228  	equ	sst.mod_during_write,370
                        000563  11-229  	equ	sst.zero_pages,371
                        000564  11-230  	equ	sst.trace_sw,372		" LEVEL 2
                                11-231  
                        000010  11-232  	bool	sst.pc_trace_pf,000010	" DL
                        000004  11-233  	bool	sst.tty_trace,000004	" DL
                        000002  11-234  	bool	sst.pc_trace,000002		" DL
                        000001  11-235  	bool	sst.sc_trace,000001		" DL
                                11-236  
                        000565  11-237  	equ	sst.new_pages,373
                                11-238  
                        000566  11-239  	equ	sst.ast_track_word,374
                        400000  11-240  	bool	sst.ast_track,400000	" DU
                                11-241  
                        000567  11-242  	equ	sst.dirlock_writebehind,375
                        000570  11-243  	equ	sst.write_limit,376
                                11-244  
                        000571  11-245  	equ	sst.crash_test_segmove_word,377
                        400000  11-246  	bool	sst.crash_test_segmove,400000	" DU
                                11-247  
                        000572  11-248  	equ	sst.delayed_seg_state_chg,378
                        000573  11-249  	equ	sst.audit_seg_state_chg,379
                        000574  11-250  	equ	sst.seg_state_chg_delay,380	" DOUBLE
                        000576  11-251  	equ	sst.seg_state_change_limit,382
                        000577  11-252  	equ	sst.max_seg_state_change_bw,383
                        000600  11-253  	equ	sst.audit_seg_state_change_bw,384
                        000601  11-254  	equ	sst.seg_state_chg_operation,385
                                11-255  
                                11-256       "END INCLUDE FILE sst.incl.alm
                                    41  	include	cmp
                                  12-1  "
                                  12-2  "	BEGIN INCLUDE FILE	cmp.incl.alm	October 1982
                                  12-3  "
                        000004    12-4  	equ	cme_size,4	Size of a CME
                                  12-5  
                        000000    12-6  	equ	cme.fp,0		forward pointer to next core map entry (DU)
                        000000    12-7  	equ	cme.bp,0		backward pointer to previous core map entry (DL)
                                  12-8  
                        000001    12-9  	equ	cme.devadd,1	device address of page in the core block
                        000001   12-10  	equ	cme.flags,1	word containing various flags
                        740000   12-11  	bool	cme.did_mask,740000	mask for extracting device ID from core map entry
                        010000   12-12  	bool	cme.synch_held,010000 page of synch seg held in mem (DL)
                        004000   12-13  	bool	cme.io,004000	read/write bit (DL)
                        001000   12-14  	bool	cme.er,001000	error on previous I/O
                        000400   12-15  	bool	cme.removing,000400	page is being removed
                        000200   12-16  	bool	cme.abs_w,000200	page may not be moved
                        000100   12-17  	bool	cme.abs_usable,000100 page may be assigned with fixed abs addr
                        000040   12-18  	bool	cme.notify_requested,000040 ptw event must be notified on completion
                        000010   12-19  	bool	cme.phm_hedge,000010 periodic write scheduler
                        000007   12-20  	bool	cme.contr,000007	port number of controller in which core block is located
                                 12-21  
                        000002   12-22  	equ	cme.ptwp,2	page table word pointer (DU)
                        000002   12-23  	equ	cme.astep,2	AST entry ptr (DL)
                                 12-24  
                        000003   12-25  	equ	cme.pin_counter,3	number times to skip eviction (DU)
                        000003   12-26  	equ	cme.synch_page_entryp,3 rel ptr to synch page entry
                                 12-27  	
                                 12-28  "	END INCLUDE FILE cmp.incl.alm
                                    42  	include	pxss_page_stack
                                  13-1  "
                                  13-2  "	BEGIN INCLUDE FILE  pxss_page_stack.incl.alm     July 1982
                                  13-3  "
                                  13-4  
                        000006    13-5  	equ	pxss_stack_size,6	" size of x7 save stack used by pxss
                        000015    13-6  	equ	stack_size,13	" size of x7 save stack used by page control
                                  13-7  
                                  13-8  	temp8	notify_regs
                                  13-9  	temp	save_stack(stack_size),stackp
                                 13-10  	tempd	pre_time,pre_temp(3)
                                 13-11  	tempd	arg(11),temp
                                 13-12  	tempd	stock_temp,volmap_temp,volmap_save_ptr
                                 13-13  	tempd	tmp_ev_channel,tmp_ev_message,apt_ptr,getwork_temp,delta_t
                                 13-14  	tempd	lock_volmap_temp_1,free_store_temp_1,volmap_save_sdw
                                 13-15  	temp	cmep,total_steps,temp1,temp2,volmap_temp_1,volmap_temp_2
                                 13-16  	temp	pvtx,core_add,count,entry_sw,ptp_astep,inter,devadd,errcode
                                 13-17  	temp	tmp_ring,dev_signal,before,depth,x5
                                 13-18  	temp	tmp_event,pxss_save_stack(pxss_stack_size),pxss_stackp
                                 13-19  	temp	stock_temp_1,stock_temp_2,free_store_temp,savx2_3
                                 13-20  	temp	lock_volmap_temp
                                 13-21  	temp	volmap_page_temp
                                 13-22  	tempd	free_store_start_time,post_io_start_time
                                 13-23  
                                 13-24  	temp	done_astep,volmap_page_temp_1
                                 13-25  	temp	vtocx,pageno
                                 13-26  
                                 13-27  	tempd	page_synch_temp,page_synch_time
                                 13-28  	temp	page_synch_index
                                 13-29  
                                 13-30  	temp	pc_err_type,pc_err_ptwp,pc_err_astep
                                 13-31  	tempd	pf_sdw
                                 13-32  
                                 13-33  	temp	pad(22)		" to grow compatibly
                                 13-34  "
                                 13-35  "	END INCLUDE FILE  pxss_page_stack.incl.alm
                                 13-36  "
                                    43  
                                    44  " 
                                    45  
    000000                          46  	name	evict_page
                                    47  
                                    48  
                        000141      49  	segdef	evict,wire_abs
                                    50  
                                    51  
                        000010      52  	link	abs_seg_link,abs_seg$
                                    53  
                                    54  "
    000000  aa   000300 6270 00     55  evict:	push	"		set up stack frame
    000001  aa  7 00040 2721 20
    000002  aa   000006 2350 07     56  	lda	evict_entry,dl	set up entry flag
    000003  aa  6 00175 7551 00     57  	sta	entry_sw
    000004  aa  0 00002 3521 20     58  	eppbp	ap|2,*		point to first arg
    000005  aa  2 00000 3521 20     59  	eppbp	bp|0,*		point to cme of interest
    000006  aa  0 00004 4501 20     60  	stz	ap|4,*		zero wait event
    000007  aa  2 00000 6241 00     61  	eax4	bp|0		get cmep into x4
    000010  4a  4 00012 3531 20     62  	epbpbb	sst$		bb -> SST through out page
    000011  4a  4 00014 7061 20     63  	tsx6	page_fault$init_savex	set up for internal calls
    000012  aa  6 00100 7441 00     64  	stx4	pre_temp		save cmep
                                    65  
    000013  0a   000312 7060 00     66  	tsx6	make_ptw		compute coreadd
    000014  aa  6 00101 7561 00     67  	stq	pre_temp+1	save coreadd
    000015  aa  6 00173 7561 00     68  	stq	core_add
                                    69  
    000016  4a  4 00016 2221 20     70  	ldx2	page_fault$cme_ptwp,*4 see if in use
    000017  0a   000053 6000 00     71  	tze	.ret		no, can return
    000020  4a  4 00020 7231 20     72  	lxl3	page_fault$cme_astep,*4 pick up astep
    000021  aa  6 00176 7421 00     73  	stx2	ptp_astep		save page pointer
    000022  aa  6 00176 4431 00     74  	sxl3	ptp_astep		and astep
    000023  aa  3 00000 3521 12     75  	eppbp	sst|0,2		point to ptw with bp
    000024  aa  2 00000 2351 00     76  	lda	ptw|0		now inspect ptw
    000025  aa   000010 3150 07     77  	cana	ptw.os,dl		read or write going on?
    000026  0a   000056 6010 00     78  	tnz	await_ptw		yes, must wait for ptw event
    000027  aa   000020 3150 07     79  	cana	ptw.wired,dl	wired page, not out of service
    000030  0a   000061 6010 00     80  	tnz	move_wired
                                    81  
    000031  aa   000005 3350 07     82  	lca	ptw.valid+1,dl	set to turn off access
    000032  aa  2 00000 3551 00     83  	ansa	ptw|0		turn off access
    000033  4a  4 00022 7071 20     84  	tsx7	cam_cache$cam_cache	tell world, blast out of caches
                                    85  				"core_add set by make_ptw call above
    000034  aa  2 00000 2351 00     86  	lda	ptw|0		look at ptw now
    000035  aa   000500 3150 07     87  	cana	ptw.phm+ptw.phm1,dl	see if modified at _a_n_y time previous
    000036  0a   000054 6000 00     88  	tze	not_mod_ptw	no, very easy case
                                    89  
    000037  4a  4 00024 7071 20     90  	tsx7	page_fault$find_core_	get a page to move into
    000040  0a   000247 7070 00     91  	tsx7	set_up_abs_seg_2	get destination abs seg on ab
    000041  0a   000320 7060 00     92  	tsx6	make_from_abs_seg	get ap abs seg together
    000042  0a   000230 7070 00     93  	tsx7	move_page		move page into new location
    000043  0a   000273 7070 00     94  	tsx7	swap_cme		fix core map
    000044  4a  4 00026 2351 20     95  	lda	page_fault$cme_flags,*x5
    000045  aa   010000 3150 07     96  	cana	cme.synch_held,dl
    000046  aa   000002 6000 04     97  	tze	2,ic
    000047  4a  4 00030 7071 20     98  	tsx7	page_synch$move	" update dm_journal_seg_
    000050  0a   000263 7070 00     99  	tsx7	swap_ptw		change ptw and open it
    000051  aa  6 00203 2341 00    100  	szn	dev_signal	did parity wipe page out?
    000052  0a   000124 6010 00    101  	tnz	parity_destroys_page tough _.
    000053  aa  7 00042 7101 20    102  .ret:	return	"		done
                                   103  "
                                   104  
    000054                         105  not_mod_ptw:	"		page was not modified - make find_core_ look guilty
    000054  4a  4 00032 7071 20    106  	tsx7	page_fault$cleanup_page	do find-core wrap-up
    000055  aa  7 00042 7101 20    107  	return
                                   108  
                                   109  
    000056                         110  await_ptw:	"		come here to wait for out of service
    000056  aa  6 00032 3501 20    111  	eppap	sp|stack_frame.arg_ptr,*	get ptr to arglist
    000057  aa  0 00004 4421 20    112  	sxl2	ap|4,*		set wait event
    000060  aa  7 00042 7101 20    113  	return
                                   114  
                                   115  
    000061                         116  move_wired:	"		very hard case- move wired page
    000061  4a  4 00024 7071 20    117  	tsx7	page_fault$find_core_	get new place for page
    000062  0a   000247 7070 00    118  	tsx7	set_up_abs_seg_2	get ab-based abs-seg
    000063  0a   000320 7060 00    119  	tsx6	make_from_abs_seg	set up 'from' abs seg
    000064  aa  6 00176 2221 00    120  	ldx2	ptp_astep		restore original ptw ptr
    000065  aa  3 00000 3521 12    121  	eppbp	sst|0,2
                                   122  
    000066                         123  move_merge:
    000066  aa  2 00000 2351 00    124  	lda	ptw|0		get ptw
    000067  aa   000100 3750 07    125  	ana	ptw.phm,dl	isolate mod bit
    000070  aa  3 00523 7551 00    126  	sta	sst|sst.evict_phmbit	save for pcrsst
    000071  aa  3 00523 7421 00    127  	stx2	sst|sst.evict_ptp	now recoverable till stz, then ok.
    000072  aa  2 00000 6551 00    128  	ersa	ptw|0		possibly turn off, in an RAR way
    000073  aa   000000 6250 05    129  	eax5	0,al		save state of modified bit
                                   130  
    000074  4a  4 00034 7071 20    131  	tsx7	cam_cache$cam_ptws		drive page out of cache and ptwams
    000075  0a   000230 7070 00    132  	tsx7	move_page
    000076  4a  4 00036 7071 20    133  	tsx7	cam_cache$cam_with_wait	stop the world
    000077  aa  2 00000 2351 00    134  	lda	ptw|0		look at ptw once more now
    000100  aa   000100 3150 07    135  	cana	ptw.phm,dl	see if moved any time in between
    000101  0a   000104 6000 00    136  	tze	not_mod_during_move
                                   137  
    000102  0a   000230 7070 00    138  	tsx7	move_page		move with world stopped
                                   139  	increment	sst|sst.recopies	meter
                                        	missing	increment,sst|sst.recopies
    000103  aa  3 00217 0541 00         	aos	sst|sst.recopies
                                   140  
    000104                         141  not_mod_during_move:
    000104  aa   000000 6350 15    142  	eaa	0,5		restore old mod bit
    000105  aa   000022 7710 00    143  	arl	18
    000106  aa  2 00000 2551 00    144  	orsa	ptw|0
    000107  aa  3 00523 4501 00    145  	stz	sst|sst.evict_ptp	tell pcrsst its safe.
    000110  0a   000273 7070 00    146  	tsx7	swap_cme		move core map data around.
    000111  4a  4 00026 2351 20    147  	lda	page_fault$cme_flags,*x5
    000112  aa   010000 3150 07    148  	cana	cme.synch_held,dl
    000113  aa   000002 6000 04    149  	tze	2,ic
    000114  4a  4 00030 7071 20    150  	tsx7	page_synch$move	" update dm_journal_seg_
    000115  0a   000263 7070 00    151  	tsx7	swap_ptw		fix the ptw
    000116  4a  4 00040 4501 20    152  	stz	scs$cam_wait	release everybody
    000117  aa   000000 5324 00    153  	camp
    000120  aa   000004 5320 00    154  	cams	4		CLEAR CACHE
    000121  aa  6 00203 2341 00    155  	szn	dev_signal	did parity galumph the page?
    000122  0a   000124 6010 00    156  	tnz	parity_destroys_page
    000123  aa  7 00042 7101 20    157  	return	"		and we are done
                                   158  "  "
                                   159  "
                                   160  "	Damage segment due to parity error.
                                   161  "	Continue to use page.
                                   162  "
    000124                         163  parity_destroys_page:
                                   164  
    000124  aa   000400 2350 03    165  	lda	aste.fmchanged,du
    000125  aa  3 00012 2551 13    166  	orsa	ast|aste.fmchanged_word,3	"damage seg
    000126  aa   200000 2350 07    167  	lda	aste.damaged,dl
    000127  aa  3 00013 2551 13    168  	orsa	ast|aste.damaged_word,3
                                   169  
    000130  aa  6 00101 2351 00    170  	lda	pre_temp+1	set up params for report call
    000131  aa  6 00173 7551 00    171  	sta	core_add
    000132  aa  6 00100 2241 00    172  	ldx4	pre_temp		old frame of interest
                                   173  
    000133  aa  2 00000 2351 00    174  	lda	ptw|0		wired case?
    000134  aa   000020 3150 07    175  	cana	ptw.wired,dl
    000135  4a  4 00042 6011 20    176  	tnz	page_error$wired_parity_error crash
                                   177  
    000136  4a  4 00044 7071 20    178  	tsx7	page_error$page_move_parity
    000137  4a  4 00046 7071 20    179  	tsx7	page_fault$delete_mm_frame 	take mem out of use
    000140  0a   000053 7100 00    180  	tra	.ret
                                   181  "
                                   182  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   183  "							"
                                   184  "							"
                                   185  "	call page$wire_abs (cmep, event, astep, i);		"
                                   186  "							"
                                   187  "	wires page (astep, i) into core pointed to by cmep	"
                                   188  "	may take up to 3 calls, as per convention.		"
                                   189  "							"
                                   190  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   191  
    000141  aa   000300 6270 00    192  wire_abs:	push			"get stack together
    000142  aa  7 00040 2721 20
    000143  aa   000007 2350 07    193  	lda	abs_wire_entry,dl	set entry indr
    000144  aa  6 00175 7551 00    194  	sta	entry_sw
    000145  4a  4 00014 7061 20    195  	tsx6	page_fault$init_savex	set up call stack
    000146  aa  0 00006 3521 20    196  	eppbp	ap|6,*		bp -> astep
    000147  aa  2 00000 3521 20    197  	eppbp	bp|0,*		bp -> aste
    000150  aa  2 00000 6231 00    198  	eax3	bp|0		set x3 to aste
    000151  aa  2 00000 3531 00    199  	epbpbb	bp|0		bb		-> sst$+0
    000152  aa  0 00010 7201 20    200  	lxl0	ap|8,*		x0 contains i
    000153  aa  2 00014 3521 10    201  	eppbp	bp|aste_size,0	bp -> ptw
    000154  aa  2 00000 6221 00    202  	eax2	bp|0		x2 -> ptw
                                   203  
    000155  aa  0 00004 4501 20    204  	stz	ap|4,*		init wait event
    000156  aa  0 00002 3715 20    205  	epplb	ap|2,*		lb -> cmep
    000157  aa  5 00000 6241 20    206  	eax4	lb|0,*		x4 -> cme
    000160  aa  6 00176 7421 00    207  	stx2	ptp_astep		save x2 similarly
    000161  aa  6 00176 4431 00    208  	sxl3	ptp_astep		and astep
                                   209  
    000162  aa   000020 2350 07    210  	lda	ptw.wired,dl	attempt to wire page wherever it is -
                                   211  				"This deterministically  suppresses further writes,
                                   212  				" causes page to stay in if os on read.
                                   213  
    000163  aa  2 00000 3151 00    214  	cana	ptw|0		see if already wired
    000164  0a   000167 6010 00    215  	tnz	already_wired	dont wire it, already wired
    000165  aa  2 00000 2551 00    216  	orsa	ptw|0
                                   217  	increment	sst|sst.wired	maintain meter
                                        	missing	increment,sst|sst.wired
    000166  aa  3 00120 0541 00         	aos	sst|sst.wired
                                   218  
    000167                         219  already_wired:
    000167  aa  2 00000 2351 00    220  	lda	ptw|0		inspect the ptw
    000170  aa   000010 3150 07    221  	cana	ptw.os,dl		see if reading or writing
    000171  0a   000056 6010 00    222  	tnz	await_ptw		wait for ptw event
    000172  aa   000004 3150 07    223  	cana	ptw.valid,dl	see if in core now
    000173  0a   000212 6010 00    224  	tnz	in_core_now	already in - move if not already in place
    000174  aa   010000 3150 07    225  	cana	ptw.er,dl		previous error?
    000175  0a   000200 6000 00    226  	tze	absread.not_prev_error
                                   227  
    000176  4a  4 00050 7071 20    228  	tsx7	page_fault$disk_offlinep
    000177  0a   000207 7100 00    229  	 tra	absread.await_any
    000200                         230  absread.not_prev_error:
    000200  4a  4 00052 7071 20    231  	tsx7	page_fault$read_page_abs	attempt to read page in
    000201  0a   000205 7100 00    232  	 tra	await_a		wait for event
    000202  0a   000204 7100 00    233  	 tra	absread.no_wait
    000203  0a   000207 7100 00    234  	 tra	absread.await_any	volmap event
                                   235  
                                   236  "
                                   237  "	If read_page_abs said no event, then page is in.
                                   238  "
    000204                         239  absread.no_wait:
    000204  aa  7 00042 7101 20    240  	return
                                   241  
    000205                         242  await_a:
    000205  aa   000000 6220 01    243  	eax2	0,au		wait for event in a
    000206  0a   000056 7100 00    244  	tra	await_ptw
                                   245  
    000207                         246  absread.await_any:
    000207  aa  6 00032 3501 20    247  	eppap	sp|stack_frame.arg_ptr,*
    000210  aa  0 00004 7551 20    248  	sta	ap|4,*
    000211  aa  7 00042 7101 20    249  	return
                                   250  
                                   251  
                                   252  
    000212                         253  in_core_now:			"page already in core, might be in right place,
                                   254  				"then again, might not
    000212  0a   000312 7060 00    255  	tsx6	make_ptw		get current ptw for cme
    000213  aa  2 00000 6751 00    256  	era	ptw|0		compare with real ptw
    000214  aa   777760 3750 03    257  	ana	ptw_add_mask,du	look at only address
    000215  0a   000053 6000 00    258  	tze	.ret		in core, right place, access on, abs wired. GREAT!
                                   259  
    000216  0a   000247 7070 00    260  	tsx7	set_up_abs_seg_2	set up 'to' abs_seg
    000217  aa  2 00000 2351 00    261  	lda	ptw|0		get current home of page
    000220  aa   777760 3750 03    262  	ana	ptw_add_mask,du	get only address bits
    000221  aa   000014 7710 00    263  	arl	ptw_to_coreadd.rl	align to coreadd (ADP/L68 OK)
    000222  aa  6 00173 7551 00    264  	sta	core_add		set up for set_up_abs_seg
    000223  aa   000012 7350 00    265  	als	coreadd_to_cmep.ls	get in cmep units (ADP/L68 OK)
    000224  aa  3 00054 6351 61    266  	eaa	sst|sst.cmp,*au	get cmep
    000225  aa  6 00100 7551 00    267  	sta	pre_temp
    000226  4a  4 00054 7061 20    268  	tsx6	page_fault$set_up_abs_seg	set up 'from' abs seg
    000227  0a   000066 7100 00    269  	tra	move_merge	move the page
                                   270  " "
                                   271  "
                                   272  "
                                   273  "	subroutines
                                   274  "
    000230                         275  move_page:	"		move a page from the ap abs seg to the ab abs seg
    000230  aa  6 00203 4501 00    276  	stz	dev_signal	init parity check
    000231                         277  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000231  aa   000600 6342 07    278  	ldi	scu.ir.bm+scu.ir.parm,dl	clear out inds, set parmask
    000232  aa   010000 2352 07    279  	lda	1024*4,dl
    000233  aa  0 00140 1007 40    280  	mlr	(pr,rl),(pr,rl)
    000234  aa   000000 000005     281  	desc9a	ap|0,al
    000235  aa   100000 000005     282  	desc9a	ab|0,al
    000236  aa   000000 0112 00    283  	nop	0
    000237  aa   000000 0112 00    284  	nop	0		allow cp and cx boards to synchronize
    000240  aa  6 00134 7543 00    285  	sti	temp
    000241  aa   000200 6342 07    286  	ldi	scu.ir.bm,dl
    000242  aa   000000 0112 00    287  	nop	0
    000243                         288  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
    000243  aa  6 00134 2351 00    289  	lda	temp		get ir
    000244  aa   001000 3750 07    290  	ana	scu.ir.par,dl
    000245  aa  6 00203 2551 00    291  	orsa	dev_signal	store it
    000246  aa   000000 7100 17    292  	tra	0,7
                                   293  
                                   294  
    000247                         295  set_up_abs_seg_2:			" set up abs seg on ab - assumes x4 -> cme
    000247  4a  4 00010 2201 00    296  	ldx0	lp|abs_seg_link
    000250  4a  4 00010 0201 00    297  	adlx0	lp|abs_seg_link	" get 2*segno in x0
    000251  aa   000000 6350 14    298  	eaa	0,x4		" Get CMEP in A, and
    000252  aa  3 00055 1351 00    299  	sbla	sst|sst.cmp+1	" convert to CME offset
    000253  aa   000002 7350 00    300  	als	cmep_to_sdw.ls	" Convert to SDW address (ADP/L68 OK)
                                   301  
    000254  aa   000000 6360 00    302  	eaq	0		" zero the q
    000255  0a   000324 2770 00    303  	oraq	sdw_bits
    000256  4a  4 00056 7571 20    304  	staq	dseg$+0,x0	" store in dseg
                                   305  
                                   306  	iftarget	l68		" CAM is different on ADP/L68
    000257  aa   000000 5320 00         	  cams	0		" clear am of segs
    000260  aa   000000 5324 00         	  camp	0		" and poss abs-seg pages
                                        "	ifend
                                   310  	iftarget	adp
                                        "	  cams	0		" clear am of segs
                                        "	  camp	0		" and poss abs-seg pages
                                        "	ifend
                                   314  
    000261  4a  4 00010 3515 20    315  	eppab	lp|abs_seg_link,*	" Point PR1 at the abs_seg
    000262  aa   000000 7100 17    316  	tra	0,x7		" and return
                                   317  
                                   318  " 
                                   319  
    000263                         320  swap_ptw:
                                   321  				"makes ptw point at cme of x4
    000263  0a   000312 7060 00    322  	tsx6	make_ptw
    000264  aa   400000 2750 07    323  	ora	add_type.core,dl
                                   324  	staddra	ptw|0		store in ptw
                                        	missing	staddra,ptw|0
    000265  aa  2 00000 6751 00         	era	ptw|0
    000266  0a   000326 3750 00         	ana	=v36/address_mask
    000267  aa  2 00000 6551 00         	ersa	ptw|0
    000270  aa   000004 2350 07    325  	lda	ptw.valid,dl	get access bit
    000271  aa  2 00000 2551 00    326  	orsa	ptw|0		turn on access if not there already
    000272  aa   000000 7100 17    327  	tra	0,7
                                   328  
    000273                         329  swap_cme:	"			cleans up cme's for swap_ptw
    000273  aa  6 00176 2221 00    330  	ldx2	ptp_astep		restore ptw if clobbered
    000274  aa  6 00176 7231 00    331  	lxl3	ptp_astep		restore astep
    000275  aa  3 00000 3521 12    332  	eppbp	sst|0,2
    000276  aa  6 00100 2251 00    333  	ldx5	pre_temp		"old" cme
                                   334  
    000277  4a  4 00060 2351 20    335  	lda	page_fault$cme_devadd,*5 get "old" (only) devadd
                                   336  	staddra	page_fault$cme_devadd,*4 move to "new" cme, which is still free.
                                        	missing	staddra,page_fault$cme_devadd
    000300  4a  4 00062 6751 20         	era	page_fault$cme_devadd,*4
    000301  0a   000326 3750 00         	ana	=v36/address_mask
    000302  4a  4 00062 6551 20         	ersa	page_fault$cme_devadd,*4
    000303  4a  4 00020 4431 20    337  	sxl3	page_fault$cme_astep,*4 still unofficial
    000304  aa   000000 6200 00    338  	eax0	0		get a zero ready.
                                   339  
                                   340  "
                                   341  "	The interval between the next two instructions is unsafe
                                   342  "	with respect to pc_recover_sst. If somehow (only possibility is
                                   343  "	operand cpu error on this cpu) we lose control between them, pcrsst
                                   344  "	will clobber this page. This is not bad.
                                   345  "
    000305  aa   000000 0110 03    346  	even
    000306                         347  	inhibit	on <+><+><+><+><+><+><+><+><+><+><+><+>
    000306  4a  4 00064 7403 20    348  	stx0	page_fault$cme_ptwp,*5 It's not in old one,
    000307  4a  4 00016 7423 20    349  	stx2	page_fault$cme_ptwp,*4 It's now in new one.
    000310                         350  	inhibit	off <-><-><-><-><-><-><-><-><-><-><-><->
                                   351  
    000310  4a  4 00066 4401 20    352  	sxl0	page_fault$cme_astep,*5 for cleanliness only.
    000311  aa   000000 7100 17    353  	tra	0,7
                                   354  
    000312                         355  make_ptw: 			" subr to make ptw (and addr in QL) from x4
    000312  aa   000000 6350 14    356  	eaa	0,x4		get cmep
    000313  aa  3 00055 1351 00    357  	sbla	sst|sst.cmp+1	get offset
                                   358  
                                   359  	iftarget	l68		" L68 & ADP shift differently here
    000314  aa   000002 7350 00         	  als	cmep_to_ptw.ls	" make PTW addr from cmep offset
                                        "	ifend
                                   362  	iftarget	adp
                                        "	  arl	cmep_to_ptw.rl	" make PTW addr from cmep offset
                                        "	ifend
                                   365  
    000315  aa   000000 6360 01    366  	eaq	0,au		make lower in q
    000316  aa   000014 7720 00    367  	qrl	ptw_to_coreadd.rl (ADP/L68 OK)
    000317  aa   000000 7100 16    368  	tra	0,x6
                                   369  
    000320                         370  make_from_abs_seg:	" Common, TSX6 subroutine, relys on page_fault to TRA back
    000320  aa  6 00101 2361 00    371  	ldq	pre_temp+1	get 'from' core_add
    000321  aa  6 00173 7561 00    372  	stq	core_add		set for page_fault routine
    000322  4a  4 00054 7101 20    373  	tra	page_fault$set_up_abs_seg	finish same
                                   374  
                                   375  
                                   376  "  "
                                   377  "
                                   378  "	constants
                                   379  "
    000323  aa   000000 0110 03    380  	even
    000324                         381  sdw_bits: 		" Bits for abs-seg SDW -- it is
                                   382  			" Address 0, read/write, one unpaged page
                                   383  
                                   384  	iftarget	L68	" SDW is different format for each
    000324  aa   000000 000004          	  vfd	18/0,18/sdw.valid
    000325  aa   000775 200000          	  vfd	1/0,14/(1024/16)-1,3/sdw.read+sdw.write,18/sdw.unpaged
                                        "	ifend
                                   388  
                                   389  	iftarget	ADP
                                        "	  vfd	18/0,18/sdw.valid
                                        "	  vfd	14/(1024/16)-1,4/0,18/sdw.read+sdw.write+sdw.unpaged
                                        "	ifend
                                   393  
                                   394  	end
LITERALS
     
    000326  aa   777777 740000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000327  5a   000003 000000 
    000330  5a   000033 600000 
    000331  aa   000000 000000 
    000332  55   000011 000002 
    000333  5a   000002 400003 
    000334  55   000006 000011 
    000335  aa  012 145 166 151
    000336  aa  143 164 137 160
    000337  aa  141 147 145 000
    000340  55   000017 000003 
    000341  0a   000141 400000 
    000342  55   000014 000003 
    000343  aa  010 167 151 162         wire_abs
    000344  aa  145 137 141 142
    000345  aa  163 000 000 000
    000346  55   000024 000011 
    000347  0a   000000 400000 
    000350  55   000022 000003 
    000351  aa  005 145 166 151         evict
    000352  aa  143 164 000 000
    000353  55   000002 000017 
    000354  6a   000000 400002 
    000355  55   000027 000003 
    000356  aa  014 163 171 155         symbol_table
    000357  aa  142 157 154 137
    000360  aa  164 141 142 154
    000361  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000362  aa   000000 000015 
    000363  aa   000000 000000 
    000364  aa   000000 000000 
    000365  aa   000000 000000 
    000366  aa   000000 000000 
    000367  aa   000000 000000 
    000370  aa   000000 000000 
    000371  5a   000024 000000 
    000372  aa   000000 000000 
    000373  aa   000000 000000 
    000374  aa   000000 000000 
    000375  5a   000017 000000 
    000376  aa   000000 000000 
    000377  5a   000011 000000 

EXTERNAL NAMES

    000400  aa  012 143 155 145         cme_devadd
    000401  aa  137 144 145 166
    000402  aa  141 144 144 000
    000403  aa  004 144 163 145         dseg
    000404  aa  147 000 000 000
    000405  aa  016 163 145 164         set_up_abs_seg
    000406  aa  137 165 160 137
    000407  aa  141 142 163 137
    000410  aa  163 145 147 000
    000411  aa  015 162 145 141         read_page_abs
    000412  aa  144 137 160 141
    000413  aa  147 145 137 141
    000414  aa  142 163 000 000
    000415  aa  015 144 151 163         disk_offlinep
    000416  aa  153 137 157 146
    000417  aa  146 154 151 156
    000420  aa  145 160 000 000
    000421  aa  017 144 145 154         delete_mm_frame
    000422  aa  145 164 145 137
    000423  aa  155 155 137 146
    000424  aa  162 141 155 145
    000425  aa  020 160 141 147         page_move_parity
    000426  aa  145 137 155 157
    000427  aa  166 145 137 160
    000430  aa  141 162 151 164
    000431  aa  171 000 000 000
    000432  aa  022 167 151 162         wired_parity_error
    000433  aa  145 144 137 160
    000434  aa  141 162 151 164
    000435  aa  171 137 145 162
    000436  aa  162 157 162 000
    000437  aa  012 160 141 147         page_error
    000440  aa  145 137 145 162
    000441  aa  162 157 162 000
    000442  aa  010 143 141 155         cam_wait
    000443  aa  137 167 141 151
    000444  aa  164 000 000 000
    000445  aa  003 163 143 163         scs
    000446  aa  015 143 141 155         cam_with_wait
    000447  aa  137 167 151 164
    000450  aa  150 137 167 141
    000451  aa  151 164 000 000
    000452  aa  010 143 141 155         cam_ptws
    000453  aa  137 160 164 167
    000454  aa  163 000 000 000
    000455  aa  014 143 154 145         cleanup_page
    000456  aa  141 156 165 160
    000457  aa  137 160 141 147
    000460  aa  145 000 000 000
    000461  aa  004 155 157 166         move
    000462  aa  145 000 000 000
    000463  aa  012 160 141 147         page_synch
    000464  aa  145 137 163 171
    000465  aa  156 143 150 000
    000466  aa  011 143 155 145         cme_flags
    000467  aa  137 146 154 141
    000470  aa  147 163 000 000
    000471  aa  012 146 151 156         find_core_
    000472  aa  144 137 143 157
    000473  aa  162 145 137 000
    000474  aa  011 143 141 155         cam_cache
    000475  aa  137 143 141 143
    000476  aa  150 145 000 000
    000477  aa  011 143 155 145         cme_astep
    000500  aa  137 141 163 164
    000501  aa  145 160 000 000
    000502  aa  010 143 155 145         cme_ptwp
    000503  aa  137 160 164 167
    000504  aa  160 000 000 000
    000505  aa  012 151 156 151         init_savex
    000506  aa  164 137 163 141
    000507  aa  166 145 170 000
    000510  aa  012 160 141 147         page_fault
    000511  aa  145 137 146 141
    000512  aa  165 154 164 000
    000513  aa  003 163 163 164         sst
    000514  aa  007 141 142 163         abs_seg
    000515  aa  137 163 145 147

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000516  aa   000004 000000 
    000517  55   000161 000051 
    000520  aa   000003 000000 
    000521  5a   000054 000000 
    000522  aa   000004 000000 
    000523  55   000161 000056 
    000524  aa   000004 000000 
    000525  55   000161 000062 
    000526  aa   000004 000000 
    000527  55   000161 000066 
    000530  aa   000004 000000 
    000531  55   000161 000072 
    000532  aa   000004 000000 
    000533  55   000110 000076 
    000534  aa   000004 000000 
    000535  55   000110 000103 
    000536  aa   000004 000000 
    000537  55   000116 000113 
    000540  aa   000004 000000 
    000541  55   000145 000117 
    000542  aa   000004 000000 
    000543  55   000145 000123 
    000544  aa   000004 000000 
    000545  55   000161 000126 
    000546  aa   000004 000000 
    000547  55   000134 000132 
    000550  aa   000004 000000 
    000551  55   000161 000137 
    000552  aa   000004 000000 
    000553  55   000161 000142 
    000554  aa   000004 000000 
    000555  55   000145 000145 
    000556  aa   000004 000000 
    000557  55   000161 000150 
    000560  aa   000004 000000 
    000561  55   000161 000153 
    000562  aa   000004 000000 
    000563  55   000161 000156 
    000564  aa   000003 000000 
    000565  5a   000164 000000 
    000566  aa   000003 000000 
    000567  5a   000165 000000 
    000570  aa   000001 000000 
    000571  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000572  5a   000167 000000 
    000573  5a   000171 000000 
    000574  5a   000173 000000 
    000575  5a   000175 000000 
    000576  5a   000177 000000 
    000577  5a   000201 000000 
    000600  5a   000203 000000 
    000601  5a   000205 000000 
    000602  5a   000207 000000 
    000603  5a   000211 000000 
    000604  5a   000213 000000 
    000605  5a   000215 000000 
    000606  5a   000217 000000 
    000607  5a   000221 000000 
    000610  5a   000223 000000 
    000611  5a   000225 000000 
    000612  5a   000227 000000 
    000613  5a   000231 000000 
    000614  5a   000233 000000 
    000615  5a   000235 000000 
    000616  5a   000237 000000 
    000617  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000327 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000070 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         abs_seg|       
    000011  5a   000267 0000 00
    000012  9a   777766 0000 46         sst|       
    000013  5a   000266 0000 00
    000014  9a   777764 0000 46         page_fault|init_savex
    000015  5a   000265 0000 00
    000016  9a   777762 0000 46         page_fault|cme_ptwp
    000017  5a   000264 0000 74
    000020  9a   777760 0000 46         page_fault|cme_astep
    000021  5a   000263 0000 74
    000022  9a   777756 0000 46         cam_cache|cam_cache
    000023  5a   000262 0000 00
    000024  9a   777754 0000 46         page_fault|find_core_
    000025  5a   000261 0000 00
    000026  9a   777752 0000 46         page_fault|cme_flags
    000027  5a   000260 0000 75
    000030  9a   777750 0000 46         page_synch|move
    000031  5a   000257 0000 00
    000032  9a   777746 0000 46         page_fault|cleanup_page
    000033  5a   000256 0000 00
    000034  9a   777744 0000 46         cam_cache|cam_ptws
    000035  5a   000255 0000 00
    000036  9a   777742 0000 46         cam_cache|cam_with_wait
    000037  5a   000254 0000 00
    000040  9a   777740 0000 46         scs|cam_wait
    000041  5a   000253 0000 00
    000042  9a   777736 0000 46         page_error|wired_parity_error
    000043  5a   000252 0000 00
    000044  9a   777734 0000 46         page_error|page_move_parity
    000045  5a   000251 0000 00
    000046  9a   777732 0000 46         page_fault|delete_mm_frame
    000047  5a   000250 0000 00
    000050  9a   777730 0000 46         page_fault|disk_offlinep
    000051  5a   000247 0000 00
    000052  9a   777726 0000 46         page_fault|read_page_abs
    000053  5a   000246 0000 00
    000054  9a   777724 0000 46         page_fault|set_up_abs_seg
    000055  5a   000245 0000 00
    000056  9a   777722 0000 46         dseg|       
    000057  5a   000244 0000 10
    000060  9a   777720 0000 46         page_fault|cme_devadd
    000061  5a   000243 0000 75
    000062  9a   777716 0000 46         page_fault|cme_devadd
    000063  5a   000243 0000 74
    000064  9a   777714 0000 46         page_fault|cme_ptwp
    000065  5a   000264 0000 75
    000066  9a   777712 0000 46         page_fault|cme_astep
    000067  5a   000263 0000 75
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   245221 210512 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000442 
    000020  aa   000000 000334 
    000021  aa   000375 000362 
    000022  aa   000423 000334 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000016 
    000066  aa   000156 000041 
    000067  aa   175453 017623 
    000070  aa   000000 117547 
    000071  aa   176313 400000 
    000072  aa   000167 000031 
    000073  aa   102456 350276 
    000074  aa   000000 110246 
    000075  aa   520730 400000 
    000076  aa   000176 000035 
    000077  aa   106701 740574 
    000100  aa   000000 110670 
    000101  aa   206425 200000 
    000102  aa   000206 000031 
    000103  aa   102456 350277 
    000104  aa   000000 110246 
    000105  aa   520732 400000 
    000106  aa   000215 000035 
    000107  aa   106701 740565 
    000110  aa   000000 110670 
    000111  aa   206245 200000 
    000112  aa   000225 000032 
    000113  aa   133234 136212 
    000114  aa   000000 113324 
    000115  aa   322064 200000 
    000116  aa   000234 000041 
    000117  aa   052721 247134 
    000120  aa   000000 105272 
    000121  aa   317215 400000 
    000122  aa   000245 000030 
    000123  aa   123154 505731 
    000124  aa   000000 112316 
    000125  aa   133412 600000 
    000126  aa   000253 000044 
    000127  aa   127236 043542 
    000130  aa   000000 112724 
    000131  aa   701746 200000 
    000132  aa   000264 000036 
    000133  aa   043243 127123 
    000134  aa   000000 103437 
    000135  aa   275656 200000 
    000136  aa   000274 000037 
    000137  aa   112456 132235 
    000140  aa   000000 111250 
    000141  aa   530556 400000 
    000142  aa   000304 000031 
    000143  aa   133234 136144 
    000144  aa   000000 113324 
    000145  aa   322064 400000 
    000146  aa   000313 000031 
    000147  aa   113434 242275 
    000150  aa   000000 111347 
    000151  aa   432071 000000 
    000152  aa   000322 000045 
    000153  aa   133234 136230 
    000154  aa   000000 113324 
    000155  aa   322064 400000 
    000156  aa   076163 160145          >spec>install>1111>evict_page.alm
    000157  aa   143076 151156 
    000160  aa   163164 141154 
    000161  aa   154076 061061 
    000162  aa   061061 076145 
    000163  aa   166151 143164 
    000164  aa   137160 141147 
    000165  aa   145056 141154 
    000166  aa   155040 040040 
    000167  aa   076154 144144          >ldd>include>ptw.incl.alm
    000170  aa   076151 156143 
    000171  aa   154165 144145 
    000172  aa   076160 164167 
    000173  aa   056151 156143 
    000174  aa   154056 141154 
    000175  aa   155040 040040 
    000176  aa   076154 144144          >ldd>include>ptw.l68.incl.alm
    000177  aa   076151 156143 
    000200  aa   154165 144145 
    000201  aa   076160 164167 
    000202  aa   056154 066070 
    000203  aa   056151 156143 
    000204  aa   154056 141154 
    000205  aa   155040 040040 
    000206  aa   076154 144144          >ldd>include>sdw.incl.alm
    000207  aa   076151 156143 
    000210  aa   154165 144145 
    000211  aa   076163 144167 
    000212  aa   056151 156143 
    000213  aa   154056 141154 
    000214  aa   155040 040040 
    000215  aa   076154 144144          >ldd>include>sdw.l68.incl.alm
    000216  aa   076151 156143 
    000217  aa   154165 144145 
    000220  aa   076163 144167 
    000221  aa   056154 066070 
    000222  aa   056151 156143 
    000223  aa   154056 141154 
    000224  aa   155040 040040 
    000225  aa   076154 144144          >ldd>include>aste.incl.alm
    000226  aa   076151 156143 
    000227  aa   154165 144145 
    000230  aa   076141 163164 
    000231  aa   145056 151156 
    000232  aa   143154 056141 
    000233  aa   154155 040040 
    000234  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000235  aa   076151 156143 
    000236  aa   154165 144145 
    000237  aa   076163 164141 
    000240  aa   143153 137146 
    000241  aa   162141 155145 
    000242  aa   056151 156143 
    000243  aa   154056 141154 
    000244  aa   155040 040040 
    000245  aa   076154 144144          >ldd>include>mc.incl.alm
    000246  aa   076151 156143 
    000247  aa   154165 144145 
    000250  aa   076155 143056 
    000251  aa   151156 143154 
    000252  aa   056141 154155 
    000253  aa   076154 144144          >ldd>include>null_addresses.incl.alm
    000254  aa   076151 156143 
    000255  aa   154165 144145 
    000256  aa   076156 165154 
    000257  aa   154137 141144 
    000260  aa   144162 145163 
    000261  aa   163145 163056 
    000262  aa   151156 143154 
    000263  aa   056141 154155 
    000264  aa   076154 144144          >ldd>include>add_type.incl.alm
    000265  aa   076151 156143 
    000266  aa   154165 144145 
    000267  aa   076141 144144 
    000270  aa   137164 171160 
    000271  aa   145056 151156 
    000272  aa   143154 056141 
    000273  aa   154155 040040 
    000274  aa   076154 144144          >ldd>include>page_info.incl.alm
    000275  aa   076151 156143 
    000276  aa   154165 144145 
    000277  aa   076160 141147 
    000300  aa   145137 151156 
    000301  aa   146157 056151 
    000302  aa   156143 154056 
    000303  aa   141154 155040 
    000304  aa   076154 144144          >ldd>include>sst.incl.alm
    000305  aa   076151 156143 
    000306  aa   154165 144145 
    000307  aa   076163 163164 
    000310  aa   056151 156143 
    000311  aa   154056 141154 
    000312  aa   155040 040040 
    000313  aa   076154 144144          >ldd>include>cmp.incl.alm
    000314  aa   076151 156143 
    000315  aa   154165 144145 
    000316  aa   076143 155160 
    000317  aa   056151 156143 
    000320  aa   154056 141154 
    000321  aa   155040 040040 
    000322  aa   076154 144144          >ldd>include>pxss_page_stack.incl.alm
    000323  aa   076151 156143 
    000324  aa   154165 144145 
    000325  aa   076160 170163 
    000326  aa   163137 160141 
    000327  aa   147145 137163 
    000330  aa   164141 143153 
    000331  aa   056151 156143 
    000332  aa   154056 141154 
    000333  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          53    .ret                     evict_page:    71,  102,  180,  258.
         207    absread.await_any        evict_page:   229,  234,  246.
         200    absread.not_prev_error   evict_page:   226,  230.
         204    absread.no_wait          evict_page:   233,  239.
                abs_seg                  evict_page:    52.
          10    abs_seg_link             evict_page:    52,  296,  297,  315.
           7    abs_wire_entry           evict_page:   193,
                                         page_info:     36.
      740000    address_mask             evict_page:   324,  336,
                                         page_info:      9.
      400000    add_type.core            evict_page:   323,
                                         add_type:       8.
      200000    add_type.disk            add_type:       9.
      740000    add_type.non_null        add_type:      13.
      100000    add_type.pd              add_type:      10.
       40000    add_type.reserved        add_type:      11.
         167    already_wired            evict_page:   215,  219.
      377777    append_null              null_addresses:      23.
         150    apt_ptr                  pxss_page_stack:     13.
         106    arg                      pxss_page_stack:     11.
           3    ast                      evict_page:   166,  168,
                                         page_info:     20.
        4000    aste.any_access_on       aste:          49.
           5    aste.any_access_on_word  aste:          48.
           0    aste.bp                  aste:          18.
         777    aste.csl_mask            aste:          92.
      777000    aste.csl_mask_inner      page_info:     26.
          33    aste.csl_shift           aste:          91.
          12    aste.csl_word            aste:          90.
      200000    aste.damaged             evict_page:   167,
                                         aste:         118.
          13    aste.damaged_word        evict_page:   168,
                                         aste:         117.
           4    aste.ddnp                aste:         106.
          12    aste.ddnp_word           aste:         105.
         200    aste.deact_error         aste:          57.
           5    aste.deact_error_word    aste:          56.
       40000    aste.dirsw               aste:          75.
           5    aste.dirsw_word          aste:          74.
           2    aste.dius                aste:          65.
           5    aste.dius_word           aste:          64.
      400000    aste.dmpr_pad            aste:          69.
           5    aste.dmpr_pad_word       aste:          68.
          20    aste.dnzp                aste:         102.
          12    aste.dnzp_word           aste:         101.
           7    aste.dtm                 aste:          84.
           6    aste.dtu                 aste:          83.
      200000    aste.ehs                 aste:          71.
           5    aste.ehs_word            aste:          70.
         400    aste.explicit_deact_ok   aste:          55.
           5    aste.explicit_deact_ok_word    aste:          54.
         400    aste.fmchanged           evict_page:   165,
                                         aste:          94.
      400000    aste.fmchanged1          aste:         116.
          13    aste.fmchanged1_word     aste:         115.
          12    aste.fmchanged_word      evict_page:   166,
                                         aste:          93.
         200    aste.fms                 aste:          96.
          12    aste.fms_word            aste:          95.
          40    aste.fm_damaged          aste:          61.
           5    aste.fm_damaged_word     aste:          60.
           0    aste.fp                  aste:          17.
       40000    aste.gtms                aste:          43.
           5    aste.gtms_word           aste:          42.
          40    aste.gtpd                aste:         100.
          12    aste.gtpd_word           aste:          99.
      100000    aste.gtus                aste:          41.
           5    aste.gtus_word           aste:          40.
       20000    aste.hc                  aste:          45.
         100    aste.hc_part             aste:          59.
           5    aste.hc_part_word        aste:          58.
       10000    aste.hc_sdw              aste:          47.
           5    aste.hc_sdw_word         aste:          46.
           5    aste.hc_word             aste:          44.
          13    aste.ht_fp               aste:         114.
           1    aste.infl                aste:          20.
           1    aste.infp                aste:          21.
        1000    aste.inhibit_cache       aste:          53.
           5    aste.inhibit_cache_word  aste:          52.
      200000    aste.init                aste:          39.
           5    aste.init_word           aste:          38.
          77    aste.marker_mask         aste:         128.
           0    aste.marker_shift        aste:         127.
          13    aste.marker_word         aste:         126.
       20000    aste.master_dir          aste:          77.
           5    aste.master_dir_word     aste:          76.
         777    aste.msl_mask            aste:          30.
          33    aste.msl_shift           aste:          29.
           4    aste.msl_word            aste:          28.
          20    aste.multi_class         aste:          63.
           5    aste.multi_class_word    aste:          62.
           1    aste.nid                 aste:          67.
           5    aste.nid_word            aste:          66.
         100    aste.npfs                aste:          98.
          12    aste.npfs_word           aste:          97.
         777    aste.np_mask             aste:         112.
           0    aste.np_shift            aste:         111.
          12    aste.np_word             aste:         110.
      100000    aste.nqsw                aste:          73.
           5    aste.nqsw_word           aste:          72.
      100000    aste.pack_ovfl           aste:         120.
          13    aste.pack_ovfl_word      aste:         119.
           2    aste.par_astep           aste:          24.
          10    aste.per_process         aste:         104.
          12    aste.per_process_word    aste:         103.
           3    aste.ptsi_mask           aste:         125.
           6    aste.ptsi_shift          aste:         124.
          13    aste.ptsi_word           aste:         123.
         777    aste.pvtx_mask           aste:          33.
          22    aste.pvtx_shift          aste:          32.
           4    aste.pvtx_word           aste:          31.
          10    aste.quota               aste:          86.
         777    aste.records_mask        aste:         109.
      777000    aste.records_mask_inner  page_info:     27.
          11    aste.records_shift       aste:         108.
          12    aste.records_word        aste:         107.
           2    aste.strp                aste:          23.
       40000    aste.synchronized        aste:         122.
          13    aste.synchronized_word   aste:         121.
        4000    aste.tqsw                aste:          81.
           5    aste.tqsw_word           aste:          80.
           3    aste.uid                 aste:          26.
          11    aste.used                aste:          88.
      400000    aste.usedf               aste:          37.
           5    aste.usedf_word          aste:          36.
       10000    aste.volmap_seg          aste:          79.
           5    aste.volmap_seg_word     aste:          78.
           4    aste.vtocx               aste:          34.
        2000    aste.write_access_on     aste:          51.
           5    aste.write_access_on_word      aste:          50.
           0    aste_part.one            aste:         136.
         377    aste_part.three_mask     aste:         141.
           0    aste_part.three_shift    aste:         140.
          13    aste_part.three_word     aste:         139.
           1    aste_part.two            aste:         137.
          14    aste_part_size           aste:         133.
          14    aste_size                evict_page:   201,
                                         aste:          15.
         205    await_a                  evict_page:   232,  242.
          56    await_ptw                evict_page:    78,  110,  222,  244.
         204    before                   pxss_page_stack:     17.
                cam_cache                evict_page:    84,  131,  133.
                cam_ptws                 evict_page:   131.
                cam_wait                 evict_page:   152.
                cam_with_wait            evict_page:   133.
          10    cleanup_entry            page_info:     37.
                cleanup_page             evict_page:   106.
         100    cme.abs_usable           cmp:           17.
         200    cme.abs_w                cmp:           16.
           2    cme.astep                cmp:           23.
           0    cme.bp                   cmp:            7.
           7    cme.contr                cmp:           20.
           1    cme.devadd               cmp:            9.
      740000    cme.did_mask             cmp:           11.
        1000    cme.er                   cmp:           14.
           1    cme.flags                cmp:           10.
           0    cme.fp                   cmp:            6.
        4000    cme.io                   cmp:           13.
          40    cme.notify_requested     cmp:           18.
          10    cme.phm_hedge            cmp:           19.
           3    cme.pin_counter          cmp:           25.
           2    cme.ptwp                 cmp:           22.
         400    cme.removing             cmp:           15.
       10000    cme.synch_held           evict_page:    96,  148,
                                         cmp:           12.
           3    cme.synch_page_entryp    cmp:           26.
         164    cmep                     pxss_page_stack:     15.
          12    cmep_to_coreadd.rl       page_info:     75.
           2    cmep_to_ptw.ls           evict_page:   361,
                                         page_info:     57.
           2    cmep_to_sdw.ls           evict_page:   300,
                                         page_info:     57.
                cme_astep                evict_page:    72,  337,  352.
                cme_devadd               evict_page:   335,  336.
                cme_flags                evict_page:    95,  147.
                cme_ptwp                 evict_page:    70,  348,  349.
           4    cme_size                 cmp:            4.
      777777    coreadd_mask             page_info:     57.
          12    coreadd_to_cmep.ls       evict_page:   265,
                                         page_info:     76.
          14    coreadd_to_ptw.ls        page_info:     57.
          14    coreadd_to_sdw.ls        page_info:     57.
         173    core_add                 evict_page:    68,  171,  264,  372,
                                         pxss_page_stack:     16.
          17    core_ptw.add_type_mask   ptw.l68:       19.
          16    core_ptw.add_type_shift  ptw.l68:       18.
           3    core_ptw.df_no_mask      ptw.l68:       32.
           0    core_ptw.df_no_shift     ptw.l68:       31.
       10000    core_ptw.er              ptw.l68:       21.
       20000    core_ptw.first           ptw.l68:       20.
           0    core_ptw.flags           ptw.l68:       17.
       37777    core_ptw.frame_mask      ptw.l68:       16.
          26    core_ptw.frame_shift     ptw.l68:       15.
         200    core_ptw.nypd            ptw.l68:       25.
          10    core_ptw.os              ptw.l68:       29.
         100    core_ptw.phm             ptw.l68:       26.
         400    core_ptw.phm1            ptw.l68:       24.
        1000    core_ptw.phu             ptw.l68:       23.
          40    core_ptw.phu1            ptw.l68:       27.
        2000    core_ptw.unusable1       ptw.l68:       22.
           4    core_ptw.valid           ptw.l68:       30.
          20    core_ptw.wired           ptw.l68:       28.
         174    count                    pxss_page_stack:     16.
      377013    deactivate_null          null_addresses:       8.
                delete_mm_frame          evict_page:   179.
         154    delta_t                  pxss_page_stack:     13.
         205    depth                    pxss_page_stack:     17.
         200    devadd                   pxss_page_stack:     16.
         203    dev_signal               evict_page:   100,  155,  276,  291,
                                         pxss_page_stack:     17.
           1    df1                      page_info:      7.
                disk_offlinep            evict_page:   228.
         232    done_astep               pxss_page_stack:     24.
                dseg                     evict_page:   304.
         175    entry_sw                 evict_page:    57,  194,
                                         pxss_page_stack:     16.
         201    errcode                  pxss_page_stack:     16.
           0    evict                    evict_page:    49,   55.
           6    evict_entry              evict_page:    56,
                                         page_info:     35.
           0    fault_entry              page_info:     29.
      377020    fill_page_table_null     null_addresses:      12.
                find_core_               evict_page:    90,  117.
         226    free_store_start_time    pxss_page_stack:     22.
         221    free_store_temp          pxss_page_stack:     19.
         160    free_store_temp_1        pxss_page_stack:     14.
         152    getwork_temp             pxss_page_stack:     13.
      377011    get_aste_null            null_addresses:       6.
      377772    get_file_map_dumper_non_null   null_addresses:      22.
      377017    get_file_map_null        null_addresses:      11.
      377022    get_file_map_vt_null     null_addresses:      14.
                init_savex               evict_page:    63,  195.
      377021    init_sst_null            null_addresses:      13.
      100000    int                      page_info:     14.
         177    inter                    pxss_page_stack:     16.
         212    in_core_now              evict_page:   224,  253.
      377016    list_deposit_null        null_addresses:      10.
         223    lock_volmap_temp         pxss_page_stack:     20.
         156    lock_volmap_temp_1       pxss_page_stack:     14.
         320    make_from_abs_seg        evict_page:    92,  119,  370.
         312    make_ptw                 evict_page:    66,  255,  322,  355.
      377012    make_sdw_null            null_addresses:       7.
      300000    mc.cpu_type_mask         mc:            22.
           3    mc.cpu_type_shift        mc:            25.
          46    mc.cpu_type_word         mc:            21.
          50    mc.eis_info              mc:            11.
          43    mc.errcode               mc:            17.
          46    mc.ext_fault_reg         mc:            23.
       77774    mc.ext_fault_reg_mask    mc:            24.
          45    mc.fault_reg             mc:            19.
          46    mc.fault_time            mc:            20.
          44    mc.fim_temp              mc:            18.
          42    mc.ips_temp              mc:            16.
          40    mc.mask                  mc:            15.
           0    mc.prs                   mc:             8.
          20    mc.regs                  mc:             9.
          30    mc.scu                   mc:            10.
          30    mc.scu.apu_stat_word     mc:            48.
          35    mc.scu.ca_word           mc:           207.
          32    mc.scu.cpu_no_word       mc:           138.
          35    mc.scu.cpu_tag_word      mc:           231.
          35    mc.scu.cu_stat_word      mc:           211.
          32    mc.scu.delta_word        mc:           144.
          30    mc.scu.fault_cntr_word   mc:            66.
          31    mc.scu.fault_data_word   mc:            74.
          34    mc.scu.ilc_word          mc:           182.
          34    mc.scu.indicators_word   mc:           186.
          31    mc.scu.port_stat_word    mc:           108.
          30    mc.scu.ppr.prr_word      mc:            33.
          30    mc.scu.ppr.psr_word      mc:            38.
          30    mc.scu.ppr.p_word        mc:            43.
          33    mc.scu.tpr.tbr_word      mc:           174.
          32    mc.scu.tpr.trr_word      mc:           128.
          32    mc.scu.tpr.tsr_word      mc:           133.
          33    mc.scu.tsr_stat_word     mc:           152.
                move                     evict_page:    98,  150.
          66    move_merge               evict_page:   123,  269.
         230    move_page                evict_page:    93,  132,  138,  275.
          61    move_wired               evict_page:    80,  116.
          50    notify_regs              pxss_page_stack:      8.
         104    not_mod_during_move      evict_page:   136,  141.
          54    not_mod_ptw              evict_page:    88,  105.
           4    no_post                  page_info:     16.
         250    pad                      pxss_page_stack:     33.
         235    pageno                   pxss_page_stack:     25.
      377024    page_bad_null            null_addresses:      16.
      377015    page_bad_pd_null         null_addresses:       9.
      377027    page_devparity_null      null_addresses:      19.
                page_error               evict_page:   176,  178.
                page_fault               evict_page:    63,   70,   72,   90,   95,  106,  117,  147,  179,  195,  228,  231,
                                                       268,  335,  336,  337,  348,  349,  352,  373.
                page_move_parity         evict_page:   178.
      377026    page_parity_null         null_addresses:      18.
          12    page_power               page_info:      6.
      377025    page_problem_null        null_addresses:      17.
                page_synch               evict_page:    98,  150.
         242    page_synch_index         pxss_page_stack:     28.
         236    page_synch_temp          pxss_page_stack:     27.
         240    page_synch_time          pxss_page_stack:     27.
         124    parity_destroys_page     evict_page:   101,  156,  163.
         245    pc_err_astep             pxss_page_stack:     30.
         244    pc_err_ptwp              pxss_page_stack:     30.
         243    pc_err_type              pxss_page_stack:     30.
      377007    pc_move_page_table_1_null      null_addresses:       4.
      377010    pc_move_page_table_2_null      null_addresses:       5.
           3    pdm                      page_info:     19.
           5    pd_flush_entry           page_info:     34.
         246    pf_sdw                   pxss_page_stack:     31.
         230    post_io_start_time       pxss_page_stack:     22.
           4    post_purge_entry         page_info:     33.
           3    pre_page_entry           page_info:     32.
         100    pre_temp                 evict_page:    64,   67,  170,  172,  267,  333,  371,
                                         pxss_page_stack:     10.
          76    pre_time                 pxss_page_stack:     10.
          20    pri                      page_info:     15.
         176    ptp_astep                evict_page:    73,   74,  120,  207,  208,  330,  331,
                                         pxss_page_stack:     16.
           2    ptw                      evict_page:    76,   83,   86,  124,  128,  134,  144,  174,  214,  216,  220,  256,
                                                       261,  324,  326,
                                         page_info:     21.
           0    ptw.add                  ptw.l68:       37.
          17    ptw.add_type_mask        ptw.l68:       40.
          16    ptw.add_type_shift       ptw.l68:       39.
           3    ptw.df_no_mask           ptw.l68:       53.
           0    ptw.df_no_shift          ptw.l68:       52.
       10000    ptw.er                   evict_page:   225,
                                         ptw.l68:       42.
       20000    ptw.first                ptw.l68:       41.
           0    ptw.flags                ptw.l68:       38.
      400000    ptw.nulled               page_info:     12.
         200    ptw.nypd                 ptw.l68:       46.
          10    ptw.os                   evict_page:    77,  221,
                                         ptw.l68:       50.
         100    ptw.phm                  evict_page:    87,  125,  135,
                                         ptw.l68:       47.
         400    ptw.phm1                 evict_page:    87,
                                         ptw.l68:       45.
        1000    ptw.phu                  ptw.l68:       44.
          40    ptw.phu1                 ptw.l68:       48.
        2000    ptw.unusable1            ptw.l68:       43.
           4    ptw.valid                evict_page:    82,  223,  325,
                                         ptw.l68:       51.
          20    ptw.wired                evict_page:    79,  175,  210,
                                         ptw.l68:       49.
      777760    ptw_add_mask             evict_page:   257,  262,
                                         page_info:     57.
           2    ptw_to_cmep.rl           page_info:     57.
          24    ptw_to_cmep_lower.rl     page_info:     57.
          14    ptw_to_coreadd.rl        evict_page:   263,  367,
                                         page_info:     57.
         172    pvtx                     pxss_page_stack:     16.
         210    pxss_save_stack          pxss_page_stack:     18.
         216    pxss_stackp              pxss_page_stack:     18.
           6    pxss_stack_size          pxss_page_stack:      5,   18.
           1    read_entry               page_info:     30.
                read_page_abs            evict_page:   231.
          60    save_stack               pxss_page_stack:      9.
         222    savx2_3                  pxss_page_stack:     19.
                scs                      evict_page:   152.
        2000    scu.apu.dsptw            mc:            57.
          10    scu.apu.fabs             mc:            64.
          20    scu.apu.fanp             mc:            63.
          40    scu.apu.fap              mc:            62.
        4000    scu.apu.pi_ap            mc:            56.
         200    scu.apu.ptw              mc:            60.
         100    scu.apu.ptw2             mc:            61.
       20000    scu.apu.ptwm             mc:            54.
       10000    scu.apu.pt_on            mc:            55.
      100000    scu.apu.sdwm             mc:            52.
        1000    scu.apu.sdwnp            mc:            58.
         400    scu.apu.sdwp             mc:            59.
       40000    scu.apu.sd_on            mc:            53.
      200000    scu.apu.xsf              mc:            51.
           0    scu.apu_stat_word        mc:            49.
          22    scu.ca_shift             mc:           209.
           5    scu.ca_word              mc:           208.
         700    scu.con_chan_mask        mc:           117.
           6    scu.con_chan_shift       mc:           118.
         700    scu.cpu_no_mask          mc:           141.
           2    scu.cpu_no_word          mc:           139.
           6    scu.cpu_shift            mc:           142.
           7    scu.cpu_tag_mask         mc:           234.
           5    scu.cpu_tag_word         mc:           232.
         100    scu.cu.if                mc:           229.
        1000    scu.cu.poa               mc:           226.
       10000    scu.cu.pon               mc:           221.
       20000    scu.cu.pot               mc:           220.
      100000    scu.cu.rd                mc:           217.
      400000    scu.cu.rf                mc:           214.
         400    scu.cu.rfi               mc:           227.
       40000    scu.cu.rl                mc:           218.
      200000    scu.cu.rpt               mc:           216.
        4000    scu.cu.xde               mc:           223.
        2000    scu.cu.xdo               mc:           224.
           5    scu.cu_stat_word         mc:           212.
          77    scu.delta_mask           mc:           147.
           2    scu.delta_word           mc:           145.
          36    scu.even_inst_word       mc:           239.
           7    scu.fault_cntr_mask      mc:            69.
           0    scu.fault_cntr_word      mc:            67.
           1    scu.fault_data_word      mc:            75.
          10    scu.fd.am_er             mc:            91.
         200    scu.fd.boc               mc:            87.
          40    scu.fd.crt               mc:            89.
      100000    scu.fd.e_off             mc:            79.
      100000    scu.fd.ia_im             mc:           102.
         100    scu.fd.inret             mc:            88.
      200000    scu.fd.ioc               mc:           101.
       20000    scu.fd.ipr               mc:           104.
      400000    scu.fd.iro               mc:            77.
      400000    scu.fd.isn               mc:           100.
       40000    scu.fd.isp               mc:           103.
       10000    scu.fd.nea               mc:           105.
        2000    scu.fd.no_ga             mc:            84.
         400    scu.fd.ocall             mc:            86.
        1000    scu.fd.ocb               mc:            85.
      200000    scu.fd.oeb               mc:            78.
      400000    scu.fd.onc_1             mc:            96.
      200000    scu.fd.onc_2             mc:            97.
        4000    scu.fd.oobb              mc:           106.
           4    scu.fd.oosb              mc:            92.
       40000    scu.fd.orb               mc:            80.
       10000    scu.fd.owb               mc:            82.
           1    scu.fd.parl              mc:            94.
           2    scu.fd.paru              mc:            93.
          20    scu.fd.ralr              mc:            90.
       20000    scu.fd.r_off             mc:            81.
        4000    scu.fd.w_off             mc:            83.
           1    scu.fi_flag_mask         mc:           123.
          76    scu.fi_num_mask          mc:           120.
           1    scu.fi_num_shift         mc:           121.
        7000    scu.iac_mask             mc:           114.
          11    scu.iac_shift            mc:           115.
      170000    scu.ial_mask             mc:           111.
          14    scu.ial_shift            mc:           112.
          22    scu.ilc_shift            mc:           184.
           4    scu.ilc_word             mc:           183.
           4    scu.indicators_word      mc:           187.
          20    scu.ir.abs               mc:           202.
         200    scu.ir.bm                evict_page:   278,  286,
                                         mc:           199.
      100000    scu.ir.carry             mc:           191.
       20000    scu.ir.eovf              mc:           193.
       10000    scu.ir.eufl              mc:           194.
          10    scu.ir.hex               mc:           203.
          40    scu.ir.mif               mc:           201.
      200000    scu.ir.neg               mc:           190.
        4000    scu.ir.oflm              mc:           195.
       40000    scu.ir.ovfl              mc:           192.
        1000    scu.ir.par               evict_page:   290,
                                         mc:           197.
         400    scu.ir.parm              evict_page:   278,
                                         mc:           198.
        2000    scu.ir.tro               mc:           196.
         100    scu.ir.tru               mc:           200.
      400000    scu.ir.zero              mc:           189.
          37    scu.odd_inst_word        mc:           241.
           1    scu.port_stat_word       mc:           109.
      400000    scu.ppr.p                mc:            45.
      700000    scu.ppr.prr_mask         mc:            35.
          41    scu.ppr.prr_shift        mc:            36.
           0    scu.ppr.prr_word         mc:            34.
       77777    scu.ppr.psr_mask         mc:            40.
          22    scu.ppr.psr_shift        mc:            41.
           0    scu.ppr.psr_word         mc:            39.
           0    scu.ppr.p_word           mc:            44.
          77    scu.tpr.tbr_mask         mc:           177.
           3    scu.tpr.tbr_word         mc:           175.
      700000    scu.tpr.trr_mask         mc:           130.
          41    scu.tpr.trr_shift        mc:           131.
           2    scu.tpr.trr_word         mc:           129.
       77777    scu.tpr.tsr_mask         mc:           135.
          22    scu.tpr.tsr_shift        mc:           136.
           2    scu.tpr.tsr_word         mc:           134.
      700000    scu.tsna.prn_mask        mc:           159.
          17    scu.tsna.prn_shift       mc:           160.
       40000    scu.tsna.prv             mc:           161.
      740000    scu.tsna_mask            mc:           158.
       34000    scu.tsnb.prn_mask        mc:           164.
          13    scu.tsnb.prn_shift       mc:           165.
        2000    scu.tsnb.prv             mc:           166.
       36000    scu.tsnb_mask            mc:           163.
        1600    scu.tsnc.prn_mask        mc:           169.
           7    scu.tsnc.prn_shift       mc:           170.
         100    scu.tsnc.prv             mc:           171.
          13    scu.tsnc_mask            mc:           168.
      777700    scu.tsr_stat_mask        mc:           155.
           6    scu.tsr_stat_shift       mc:           156.
           3    scu.tsr_stat_word        mc:           153.
          17    sdw.access_mask          sdw.l68:       42.
          21    sdw.access_shift         sdw.l68:       41.
           1    sdw.access_word          sdw.l68:       40.
          14    sdw.add_shift            sdw.l68:       18.
           0    sdw.add_word             sdw.l68:       17.
       37777    sdw.bound_mask           sdw.l68:       39.
          25    sdw.bound_shift          sdw.l68:       38.
           1    sdw.bound_word           sdw.l68:       37.
       40000    sdw.cache                sdw.l68:       56.
           1    sdw.cache_word           sdw.l68:       55.
           3    sdw.df_no_mask           sdw.l68:       35.
           0    sdw.df_no_shift          sdw.l68:       34.
           0    sdw.df_no_word           sdw.l68:       33.
       37777    sdw.entry_bound_mask     sdw.l68:       59.
           0    sdw.entry_bound_shift    sdw.l68:       58.
           1    sdw.entry_bound_word     sdw.l68:       57.
           2    sdw.execute              sdw.l68:       46.
           1    sdw.execute_word         sdw.l68:       45.
      100000    sdw.not_a_gate           sdw.l68:       54.
           1    sdw.not_a_gate_word      sdw.l68:       53.
      400000    sdw.privileged           sdw.l68:       50.
           1    sdw.privileged_word      sdw.l68:       49.
           7    sdw.r1_mask              sdw.l68:       24.
          11    sdw.r1_shift             sdw.l68:       23.
           0    sdw.r1_word              sdw.l68:       22.
           7    sdw.r2_mask              sdw.l68:       27.
           6    sdw.r2_shift             sdw.l68:       26.
           0    sdw.r2_word              sdw.l68:       25.
           7    sdw.r3_mask              sdw.l68:       30.
           3    sdw.r3_shift             sdw.l68:       29.
           0    sdw.r3_word              sdw.l68:       28.
           4    sdw.read                 evict_page:   387,
                                         sdw.l68:       44.
           1    sdw.read_word            sdw.l68:       43.
         777    sdw.rings_mask           sdw.l68:       21.
           3    sdw.rings_shift          sdw.l68:       20.
           0    sdw.rings_word           sdw.l68:       19.
      200000    sdw.unpaged              evict_page:   387,
                                         sdw.l68:       52.
           1    sdw.unpaged_word         sdw.l68:       51.
           4    sdw.valid                evict_page:   387,
                                         sdw.l68:       32.
           0    sdw.valid_word           sdw.l68:       31.
           1    sdw.write                evict_page:   387,
                                         sdw.l68:       48.
           1    sdw.write_word           sdw.l68:       47.
      777760    sdw_add_mask             page_info:     57.
         324    sdw_bits                 evict_page:   303,  381.
           2    sdw_size                 sdw.l68:       15.
           2    sdw_to_cmep.rl           page_info:     57.
          14    sdw_to_coreadd.rl        page_info:     57.
      377031    segmove_new_addr_null    null_addresses:      21.
      377030    segmove_old_addr_null    null_addresses:      20.
          10    seg_aste.usage           aste:         149.
          14    seg_aste_size            aste:         146.
                set_up_abs_seg           evict_page:   268,  373.
         247    set_up_abs_seg_2         evict_page:    91,  118,  260,  295.
           3    sst                      evict_page:    62,   75,  121,  126,  127,  139,  145,  217,  266,  299,  332,  357,
                                         page_info:     18,   19,   20.
         214    sst.abs_wired_count      sst:          126.
         241    sst.acost                sst:          141.
      400000    sst.activate_activated   sst:          201.
         517    sst.activations          sst:          182.
          52    sst.ainitp               sst:           52.
          52    sst.ainitp1              sst:           53.
         244    sst.alaps                sst:          144.
         230    sst.aneedsize            sst:          135.
         236    sst.asearches            sst:          138.
         243    sst.askipdius            sst:          143.
         235    sst.askipsehs            sst:          137.
         240    sst.askipsinit           sst:          140.
         224    sst.askipsize            sst:          134.
         237    sst.askipslevel          sst:          139.
         242    sst.askipslock           sst:          142.
          30    sst.astap                sst:           35.
         254    sst.asteps               sst:          151.
          21    sst.astl                 sst:           26.
          22    sst.astl_event           sst:           27.
      400000    sst.astl_notify_requested      sst:           30.
          23    sst.astl_notify_requested_word       sst:           29.
          33    sst.astsize              sst:           37.
          72    sst.ast_ht_n_buckets     sst:           76.
          70    sst.ast_ht_ptr           sst:           75.
          73    sst.ast_ht_uid_mask      sst:           77.
         260    sst.ast_locked_at_time   sst:          152.
         262    sst.ast_locked_total_time      sst:          153.
         266    sst.ast_locking_count    sst:          155.
         264    sst.ast_lock_wait_time   sst:          154.
      400000    sst.ast_track            sst:          240.
         566    sst.ast_track_word       sst:          239.
          50    sst.atempp               sst:           46.
          50    sst.atempp1              sst:           47.
         600    sst.audit_seg_state_change_bw  sst:          253.
         573    sst.audit_seg_state_chg  sst:          249.
         126    sst.aused                sst:          104.
          44    sst.ausedp               sst:           43.
         534    sst.backup_activations   sst:          198.
         513    sst.bad_sgms             sst:          178.
         116    sst.ceiling              sst:           96.
          75    sst.checksum_filemap     sst:           79.
         476    sst.claim_notmod         sst:          166.
         477    sst.claim_passed_used    sst:          167.
         516    sst.claim_runs           sst:          181.
         474    sst.claim_skip_cme       sst:          164.
         475    sst.claim_skip_free      sst:          165.
         500    sst.claim_skip_ptw       sst:          168.
         502    sst.claim_steps          sst:          170.
         501    sst.claim_writes         sst:          169.
         267    sst.cleanup_count        sst:          156.
         270    sst.cleanup_real_time    sst:          157.
          67    sst.cl_skips_pinned      sst:           74.
          34    sst.cmesize              sst:           38.
          54    sst.cmp                  evict_page:   266,  299,  357,
                                         sst:           56.
         252    sst.cpu_bf_time          sst:          150.
         160    sst.cpu_sf_time          sst:          114.
      400000    sst.crash_test_segmove   sst:          246.
         571    sst.crash_test_segmove_word    sst:          245.
         117    sst.ctwait               sst:           97.
         100    sst.cycle_pv_allocation  sst:           82.
         127    sst.damaged_ct           sst:          105.
         507    sst.dblw_resurrections   sst:          175.
         130    sst.deact_count          sst:          106.
         572    sst.delayed_seg_state_chg      sst:          248.
         132    sst.demand_deactivations       sst:          108.
         131    sst.demand_deact_attempts      sst:          107.
         567    sst.dirlock_writebehind  sst:          242.
         520    sst.dir_activations      sst:          183.
         110    sst.dir_page_faults      sst:           90.
      400000    sst.dm_enabled           sst:           50.
          51    sst.dm_enabled_word      sst:           49.
          62    sst.double_write         sst:           66.
         546    sst.event                sst:          213.
         523    sst.evict_phmbit         evict_page:   126,
                                         sst:          189.
         523    sst.evict_ptp            evict_page:   127,  145,
                                         sst:          188.
         523    sst.evict_recover_data   sst:          186.
          66    sst.fc_skips_pinned      sst:           73.
         220    sst.first_core_block     sst:          130.
         525    sst.force_pwrites        sst:          192.
         524    sst.force_swrites        sst:          191.
         527    sst.force_updatevs       sst:          194.
         526    sst.fw_none              sst:          193.
         222    sst.fw_retries           sst:          132.
         515    sst.good_sgms            sst:          180.
         521    sst.hedge_updatevs       sst:          184.
         522    sst.hedge_writes         sst:          185.
         121    sst.laps                 sst:           99.
         221    sst.last_core_block      sst:          131.
          44    sst.level                sst:           41.
         107    sst.level_1_page_faults  sst:           89.
         104    sst.lock_waits           sst:           86.
         154    sst.loop_locks           sst:          112.
         156    sst.loop_lock_time       sst:          113.
         533    sst.makeknown_activations      sst:          197.
         577    sst.max_seg_state_change_bw    sst:          252.
         535    sst.metering_flags       sst:          199.
          74    sst.meter_ast_locking    sst:           78.
         562    sst.mod_during_write     sst:          228.
         115    sst.needc                sst:           95.
         565    sst.new_pages            sst:          237.
      400000    sst.nolock               sst:           71.
          65    sst.nolock_word          sst:           70.
      400000    sst.notify               sst:          216.
         547    sst.notify_word          sst:          215.
          44    sst.no_aste              sst:           44.
          16    sst.npfs_misses          sst:           23.
          24    sst.nused                sst:           32.
         101    sst.n_trailers           sst:           83.
         506    sst.oopv                 sst:          174.
          76    sst.page_read_errors     sst:           80.
          77    sst.page_write_errors    sst:           81.
         113    sst.pc_io_waits          sst:           93.
           2    sst.pc_trace             sst:          234.
          10    sst.pc_trace_pf          sst:          232.
         106    sst.pdir_page_faults     sst:           88.
         532    sst.pf_unlock_ptl_meterings    sst:          196.
         530    sst.pf_unlock_ptl_time   sst:          195.
         545    sst.pid                  sst:          212.
          14    sst.post_in_core         sst:           21.
         165    sst.post_list_size       sst:          118.
         167    sst.post_purge_calls     sst:          120.
          12    sst.post_purge_time      sst:           20.
         166    sst.post_purgings        sst:          119.
         372    sst.pp_meters            sst:          159.
         170    sst.pre_page_calls       sst:          121.
         171    sst.pre_page_list_size   sst:          122.
         172    sst.pre_page_misses      sst:          123.
         164    sst.pre_page_size        sst:          117.
          10    sst.pre_page_time        sst:           19.
         173    sst.pre_pagings          sst:          124.
         503    sst.pre_seeks_failed     sst:          171.
          20    sst.ptl                  sst:           25.
          32    sst.ptl_wait_ct          sst:           36.
          40    sst.pts                  sst:           40.
          25    sst.ptwbase              sst:           33.
         223    sst.pvhtp                sst:          133.
         133    sst.reads                sst:          109.
         217    sst.recopies             evict_page:   139,
                                         sst:          129.
          61    sst.removep              sst:           64.
         504    sst.resurrections        sst:          172.
         111    sst.ring_0_page_faults   sst:           91.
          36    sst.root_astep           sst:           39.
          64    sst.root_pvtx            sst:           68.
         112    sst.rqover               sst:           92.
          17    sst.salv                 sst:           24.
           1    sst.sc_trace             sst:          235.
         555    sst.segmove_astep        sst:          223.
         551    sst.segmove_found_synch  sst:          219.
         550    sst.segmove_io_limit     sst:          218.
         545    sst.segmove_lock         sst:          210.
         554    sst.segmove_max_tries    sst:          222.
         561    sst.segmove_new_addr_astep     sst:          227.
         553    sst.segmove_n_reads      sst:          221.
         560    sst.segmove_old_addr_astep     sst:          226.
         556    sst.segmove_pvtx         sst:          224.
         552    sst.segmove_synch_disappeared  sst:          220.
         557    sst.segmove_vtocx        sst:          225.
         536    sst.seg_fault_calls      sst:          203.
         576    sst.seg_state_change_limit     sst:          251.
         574    sst.seg_state_chg_delay  sst:          250.
         601    sst.seg_state_chg_operation    sst:          254.
         247    sst.setfaults_acc        sst:          147.
         246    sst.setfaults_all        sst:          146.
         512    sst.sgm_pf               sst:          177.
         514    sst.sgm_sgft             sst:          179.
         510    sst.sgm_time             sst:          176.
         153    sst.short_pf_count       sst:          111.
         124    sst.skipm                sst:          102.
         125    sst.skipos               sst:          103.
         123    sst.skipu                sst:          101.
         122    sst.skipw                sst:          100.
           0    sst.space                sst:           18.
          60    sst.startp               sst:           62.
         114    sst.steps                sst:           94.
         234    sst.stepsa               sst:          136.
         543    sst.stk_pages_truncated  sst:          208.
         544    sst.stk_pages_truncated_in_core      sst:          209.
         542    sst.stk_truncate_shouldnt_did  sst:          207.
         541    sst.stk_truncate_shouldnt_didnt      sst:          206.
         540    sst.stk_truncate_should_did    sst:          205.
         537    sst.stk_truncate_should_didnt  sst:          204.
          53    sst.strsize              sst:           55.
         102    sst.synch_activations    sst:           84.
         103    sst.synch_skips          sst:           85.
         215    sst.system_type          sst:          127.
          63    sst.temp_w_event         sst:           67.
          26    sst.tfreep               sst:           34.
          15    sst.thrashing            sst:           22.
         250    sst.total_bf             sst:          148.
         251    sst.total_bf_pf          sst:          149.
         105    sst.total_locks_set      sst:           87.
         163    sst.total_sf             sst:          116.
         162    sst.total_sf_pf          sst:          115.
         564    sst.trace_sw             sst:          230.
         272    sst.tree_count           sst:          158.
           4    sst.tty_trace            sst:          233.
         245    sst.updates              sst:          145.
          56    sst.usedp                sst:           58.
         505    sst.volmap_seg_page_faults     sst:          173.
         120    sst.wired                evict_page:   217,
                                         sst:           98.
         216    sst.wired_copies         sst:          128.
         174    sst.wire_proc_data       sst:          125.
         143    sst.writes               sst:          110.
         473    sst.write_hunts          sst:          163.
         570    sst.write_limit          sst:          243.
          57    sst.wtct                 sst:           60.
         472    sst.wusedp               sst:          161.
         563    sst.zero_pages           sst:          229.
        1000    sst_size                 sst:           15.
          75    stackp                   pxss_page_stack:      9.
          32    stack_frame.arg_ptr      evict_page:   111,  247,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          15    stack_size               pxss_page_stack:      6,    9.
         136    stock_temp               pxss_page_stack:     12.
         217    stock_temp_1             pxss_page_stack:     19.
         220    stock_temp_2             pxss_page_stack:     19.
         273    swap_cme                 evict_page:    94,  146,  329.
         263    swap_ptw                 evict_page:    99,  151,  320.
         134    temp                     evict_page:   285,  289,
                                         pxss_page_stack:     11.
         166    temp1                    pxss_page_stack:     15.
         167    temp2                    pxss_page_stack:     15.
         207    tmp_event                pxss_page_stack:     18.
         144    tmp_ev_channel           pxss_page_stack:     13.
         146    tmp_ev_message           pxss_page_stack:     13.
         202    tmp_ring                 pxss_page_stack:     17.
         165    total_steps              pxss_page_stack:     15.
      377023    unprotected_null         null_addresses:      15.
         224    volmap_page_temp         pxss_page_stack:     21.
         233    volmap_page_temp_1       pxss_page_stack:     24.
         142    volmap_save_ptr          pxss_page_stack:     12.
         162    volmap_save_sdw          pxss_page_stack:     14.
         140    volmap_temp              pxss_page_stack:     12.
         170    volmap_temp_1            pxss_page_stack:     15.
         171    volmap_temp_2            pxss_page_stack:     15.
         234    vtocx                    pxss_page_stack:     25.
                wired_parity_error       evict_page:   176.
         141    wire_abs                 evict_page:    49,  192.
           2    write_entry              page_info:     31.
         206    x5                       pxss_page_stack:     17.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
