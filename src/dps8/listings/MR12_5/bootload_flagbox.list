ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.3-1114>bootload_flagbox.alm                                                                                                                   
ASSEMBLED ON:	11/11/89  0936.6 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                                     8  
                                     9  " BOOTLOAD_FLAGBOX
                                    10  "
                                    11  " This program initializes the segment "flagbox", used for communication
                                    12  " between bce/Multics.
                                    13  "
                                    14  " 11/04/80, W. Olin Sibert
                                    15  " 83-84, Keith Loepere for the MR11 bce.
                                    16  
    000000                          17  	name	bootload_flagbox
    000000                          18  	decor	L68
                                    19  
                                    20  	include	bootload_equs
                                   1-1  " BEGIN INCLUDE FILE bootload_equs.incl.alm
                                   1-2  " Created 10/04/80 W. Olin Sibert, mostly from bootstrap1
                                   1-3  " Modified by almost everyone, it seems.
                                   1-4  " Last modified for MR11 bootload Multics addresses starting in 1983 by
                                   1-5  "     Keith Loepere.
                                   1-6  "
                                   1-7  " This include file describes various things used by the programs in
                                   1-8  " bound_bootload_0.
                                   1-9  
                                  1-10  " Default pointer register usage:
                                  1-11  
                        000000    1-12  	equ	ds,0		" Descriptor segment
                        000001    1-13  	equ	seg2,1		" Another temporary
                        000002    1-14  	equ	mb,2		" IOM mailbox
                        000003    1-15  	equ	slt,3		" Segment loading table (SLT)
                        000004    1-16  	equ	nt,4		" Name_table
                        000005    1-17  	equ	prb,5		" Physical_record_buffer
                        000006    1-18  	equ	seg,6		" Temporary
                        000007    1-19  	equ	fv,7		" Interrupt and fault vectors
                                  1-20  
                                  1-21  " Macros
                                  1-22  
                                  1-23  	macro	equ_o
                              1   1-24  	maclist	off,save
                              2   1-25  	bool	&U,&2
                              3   1-26  	equ	&1,&U
                              4   1-27  	maclist	restore
                              5   1-28  &end
                                  1-29  
                                  1-30  	macro	set_o
                              1   1-31  	maclist	off,save
                              2   1-32  	bool	&U,&2
                              3   1-33  	set	&1,&U
                              4   1-34  	maclist	restore
                              5   1-35  &end
                                  1-36  
                                  1-37  	macro	include_nolist
                              1   1-38  	maclist	off,save
                              2   1-39  	include	&1
                              3   1-40  	maclist	restore
                              4   1-41  &end
                                  1-42  
                                  1-43  	macro	Bpush
                              1   1-44  	stx2	bootload_0$entry_stack_ptr,id
                              2   1-45  	ttn	bootload_error$out_of_stack
                              3   1-46  &end
                                  1-47  
                                  1-48  " 	Breturn	offset-from-return-point
                                  1-49  
                                  1-50  	macro	Breturn
                              1   1-51  	ldx2	bootload_0$entry_stack_ptr,di
                              2   1-52  	tra	0+&1,x2
                              3   1-53  &end
                                  1-54  
                                  1-55  "	Bentry	name,offset-from-return-point
                                  1-56  
                                  1-57  	macro	Bentry
                              1   1-58  	segdef	&1
                              2   1-59  	macro	&1_return
                              3   1-60  	Breturn	&<&K,2&[0&;&2&]
                              4   1-61  &&end
                              5   1-62  &end
                                  1-63  
                                  1-64  " 	Bentry_internal	name,offset_from_return_point
                                  1-65  
                                  1-66  	macro	Bentry_internal
                              1   1-67  	macro	&1_return	
                              2   1-68  	Breturn	&<&K,2&[0&;&2&]
                              3   1-69  &&end
                              4   1-70  &end
                                  1-71  
                                  1-72  
                                  1-73  " Definitions
                                  1-74  
                                  1-75  	equ_o	bostoe_absloc,10000		" bos_teohold
                                  1-76  	equ_o	bostoe_lth,2000
                                  1-77  
                                  1-78  	equ_o	fgbx_absloc,24000		" now in bce toehold
                                  1-79  	equ_o	fgbx_lth,2000
                                  1-80  
                                  1-81  	equ_o	toe_absloc,24000		" bootload Multics toehold
                                  1-82  	equ_o	toe_lth,4000		" This starts at a 0 mod 4 
                                  1-83  					" page address.  It is 
                                  1-84  					" bound as first element
                                  1-85  					" of bound_bootload_0.
                                  1-86  
                                  1-87  	equ_o	bbl0_absloc,24000		" bound_bootload_0 location
                                  1-88  	equ_o	bbl0_lth,22000		" and length.
                                  1-89  
                                  1-90  	equ_o	toedata_absloc,46000	" toehold_data
                                  1-91  	equ_o	toedata_lth,4000
                                  1-92  
                                  1-93  	equ_o	upt_absloc,52000		" unpaged_page_tables
                                  1-94  	equ_o	upt_lth,2000
                                  1-95  
                                  1-96  	equ_o	iupt_absloc,54000		" init_unpaged_page_tables
                                  1-97  	equ_o	iupt_lth,2000
                                  1-98  
                                  1-99  	equ_o	bkpt_absloc,56000		" breakpoint_page
                                 1-100  	equ_o	bkpt_lth,2000
                                 1-101  
                                 1-102  	equ_o	prb_absloc,60000		" physical_record_buffer
                                 1-103  	equ_o	prb_lth,6000		" memory past here up for 
                                 1-104  					" grabs
                                 1-105  
                                 1-106  " END INCLUDE FILE bootload_equs.incl.alm
                                    21  	include	flagbox
                                   2-1  
                                   2-2  
                                   2-3       "BEGIN INCLUDE FILE flagbox.incl.alm
                                   2-4  
                                   2-5  
                                   2-6  " HISTORY COMMENTS:
                                   2-7  "  1) change(87-03-03,Farley), approve(87-04-15,MCR7661),
                                   2-8  "     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
                                   2-9  "     Added io_reconfig flag to inhibit BCE from attempting an emergency
                                  2-10  "     shutdown when the data in memory could be corrupted.
                                  2-11  "                                                      END HISTORY COMMENTS
                                  2-12  
                                  2-13  
                                  2-14  
                                  2-15  
                                  2-16  	"Created 03/03/87  1026.3 mst Tue by convert_include_file,
                                  2-17  	"   Version of 01/09/85  0754.4 mst Wed.
                                  2-18  
                                  2-19  	"Made from >udd>m>Farley>install_dir>rcf>flagbox.incl.pl1,
                                  2-20  	"   modified 02/26/87  1355.3 mst Thu
                                  2-21  
                                  2-22  "
                                  2-23  "	Structure fgbx
                                  2-24  "
                        000140    2-25  	equ	fgbx_size,96
                                  2-26  
                                  2-27  
                        000000    2-28  	equ	fgbx.toehold_used,0
                                  2-29  
                        000040    2-30  	equ	fgbx.flags_word,32
                        400000    2-31  	bool	fgbx.flags,400000		" DU
                                  2-32  
                        000041    2-33  	equ	fgbx.slt_segno,33		" UPPER
                                  2-34  
                        000043    2-35  	equ	fgbx.rtb,35		" LEVEL 2
                                  2-36  
                        400000    2-37  	bool	fgbx.ssenb,400000		" DU
                        200000    2-38  	bool	fgbx.call_bce,200000	" DU
                        100000    2-39  	bool	fgbx.shut,100000		" DU
                        040000    2-40  	bool	fgbx.mess,040000		" DU
                        020000    2-41  	bool	fgbx.alert,020000		" DU
                        010000    2-42  	bool	fgbx.breakpoint,010000	" DU
                        004000    2-43  	bool	fgbx.manual_crash,004000	" DU
                        002000    2-44  	bool	fgbx.io_reconfig,002000	" DU
                        000001    2-45  	equ	fgbx.bce_entry_shift,1
                        000077    2-46  	bool	fgbx.bce_entry_mask,000077
                                  2-47  
                        000044    2-48  	equ	fgbx.sentinel,36
                        000054    2-49  	equ	fgbx.sst_sdw,44		" DOUBLE
                        000056    2-50  	equ	fgbx.hc_dbr,46		" DOUBLE
                        000060    2-51  	equ	fgbx.message,48
                        000100    2-52  	equ	fgbx.return_to_bce_command,64
                                  2-53  
                                  2-54       "END INCLUDE FILE flagbox.incl.alm
                                    22  	include	toe_hold
                                   3-1  
                                   3-2  
                                   3-3       "BEGIN INCLUDE FILE toe_hold.incl.alm
                                   3-4  
                                   3-5  
                                   3-6  	"Created 04/16/84  1150.7 est Mon by convert_include_file,
                                   3-7  	"   Version of 11/07/82  1445.1 est Sun.
                                   3-8  
                                   3-9  	"Made from >cdd>incl>x>toe_hold.incl.pl1,
                                  3-10  	"   modified 04/16/84  1150.7 est Mon
                                  3-11  
                                  3-12  "
                                  3-13  "	Structure toe_hold
                                  3-14  "
                        004000    3-15  	equ	toe_hold_size,2048
                                  3-16  
                                  3-17  
                        000000    3-18  	equ	toe_hold.entry_sequences,0	" DOUBLE
                        000040    3-19  	equ	toe_hold.flagbox,32
                        000220    3-20  	equ	toe_hold.paths,144		" LEVEL 2
                                  3-21  
                        000240    3-22  	equ	toe_hold.n_paths_used,160
                        000241    3-23  	equ	toe_hold.memory_state,161
                        000242    3-24  	equ	toe_hold.bce_dbr,162	" DOUBLE
                        002760    3-25  	equ	toe_hold.multics_state,1520	" LEVEL 2
                                  3-26  
                                  3-27  
                                  3-28  "
                                  3-29  "	Structure io_path
                                  3-30  "
                        000004    3-31  	equ	io_path_size,4
                                  3-32  
                        000000    3-33  	equ	io_path.pcw,0		" DOUBLE
                                  3-34  
                        000002    3-35  	equ	io_path.port_number_word,2
                        000041    3-36  	equ	io_path.port_number_shift,33
                        000007    3-37  	bool	io_path.port_number_mask,000007
                        000002    3-38  	equ	io_path.iom_number_word,2
                        000022    3-39  	equ	io_path.iom_number_shift,18
                        077777    3-40  	bool	io_path.iom_number_mask,077777
                        000002    3-41  	equ	io_path.channel_number,2	" LOWER
                                  3-42  
                        000000    3-43  	equ	TOE_HOLD_CRASH_ENTRY,0	" MANIFEST
                        000001    3-44  	equ	TOE_HOLD_ESD_ENTRY,1	" MANIFEST
                        000002    3-45  	equ	TOE_HOLD_DUMP_ENTRY,2	" MANIFEST
                        000003    3-46  	equ	TOE_HOLD_MULTICS_ENTRY,3	" MANIFEST
                        000004    3-47  	equ	TOE_HOLD_RESTART_ENTRY,4	" MANIFEST
                        000005    3-48  	equ	TOE_HOLD_BOOT_ENTRY,5	" MANIFEST
                        000014    3-49  	equ	TOE_HOLD_BOS_ENTRY,12	" MANIFEST
                        000015    3-50  	equ	TOE_HOLD_BOS_NO_SAVE_ENTRY,13	" MANIFEST
                        000016    3-51  	equ	TOE_HOLD_BOS_MULTICS_ENTRY,14	" MANIFEST
                                  3-52  
                                  3-53  "
                                  3-54  "	Structure mc_state
                                  3-55  "
                        001020    3-56  	equ	mc_state_size,528
                                  3-57  
                        000000    3-58  	equ	mc_state.mc_,0		" LEVEL 2
                                  3-59  
                        000060    3-60  	equ	mc_state.masks,48
                        000100    3-61  	equ	mc_state.interrupt,64	" DOUBLE
                        000102    3-62  	equ	mc_state.mode_reg,66
                        000103    3-63  	equ	mc_state.cache_mode_reg,67
                        000104    3-64  	equ	mc_state.dbr,68		" DOUBLE
                        000106    3-65  	equ	mc_state.cfg,70		" DOUBLE
                        000110    3-66  	equ	mc_state.bar,72
                        000111    3-67  	equ	mc_state.old_memory_state,73
                        000120    3-68  	equ	mc_state.ou_history_registers,80 " DOUBLE
                        000160    3-69  	equ	mc_state.cu_history_registers,112 " DOUBLE
                        000220    3-70  	equ	mc_state.du_history_registers,144 " DOUBLE
                        000260    3-71  	equ	mc_state.apu_history_registers,176 " DOUBLE
                        000320    3-72  	equ	mc_state.ptwam_ptrs,208
                        000420    3-73  	equ	mc_state.ptwam_regs,272
                        000520    3-74  	equ	mc_state.sdwam_ptrs,336
                        000620    3-75  	equ	mc_state.sdwam_regs,400	" DOUBLE
                                  3-76  
                        000000    3-77  	equ	Initial_undefined,0		" MANIFEST
                        000001    3-78  	equ	At_bce__early,1		" MANIFEST
                        000002    3-79  	equ	At_bce__boot,2		" MANIFEST
                        000003    3-80  	equ	Multics,3			" MANIFEST
                        000004    3-81  	equ	Undefined_saving_state,4	" MANIFEST
                        000005    3-82  	equ	Undefined_reading_bce,5	" MANIFEST
                        000006    3-83  	equ	At_bce__crash,6		" MANIFEST
                        000007    3-84  	equ	At_bce__shutdown,7		" MANIFEST
                        000010    3-85  	equ	Undefined_continue,8	" MANIFEST
                        000011    3-86  	equ	Undefined_saving_mem,9	" MANIFEST
                                  3-87  
                                  3-88  "
                                  3-89  "	Structure mc
                                  3-90  "
                        000060    3-91  	equ	mc_size,48
                                  3-92  
                        000000    3-93  	equ	mc.prs,0
                                  3-94  
                        000020    3-95  	equ	mc.regs_word,16
                        001532    3-96  	equ	mc.regs_shift,858
                        000020    3-97  	equ	mc.x,16			" UPPER
                                  3-98  
                        000024    3-99  	equ	mc.a,20
                        000025   3-100  	equ	mc.q,21
                                 3-101  
                        000026   3-102  	equ	mc.e_word,22
                        000034   3-103  	equ	mc.e_shift,28
                        000377   3-104  	bool	mc.e_mask,000377
                                 3-105  
                        000027   3-106  	equ	mc.t_word,23
                        000011   3-107  	equ	mc.t_shift,9
                        000027   3-108  	equ	mc.ralr_word,23
                        000000   3-109  	equ	mc.ralr_shift,0
                        000007   3-110  	bool	mc.ralr_mask,000007
                                 3-111  
                        000030   3-112  	equ	mc.scu,24
                        000040   3-113  	equ	mc.mask,32		" DOUBLE
                        000042   3-114  	equ	mc.ips_temp,34
                                 3-115  
                        000043   3-116  	equ	mc.errcode_word,35
                        000000   3-117  	equ	mc.errcode_shift,0
                                 3-118  
                        000044   3-119  	equ	mc.fim_temp_word,36
                        000000   3-120  	equ	mc.fim_temp_shift,0
                        000044   3-121  	equ	mc.unique_index,36		" UPPER
                        000044   3-122  	equ	mc.resignal_word,36
                        400000   3-123  	bool	mc.resignal,400000		" DL
                        000044   3-124  	equ	mc.fcode_word,36
                        000000   3-125  	equ	mc.fcode_shift,0
                        377777   3-126  	bool	mc.fcode_mask,377777
                                 3-127  
                        000045   3-128  	equ	mc.fault_reg,37
                                 3-129  
                        000046   3-130  	equ	mc.cpu_type_word,38
                        000041   3-131  	equ	mc.cpu_type_shift,33
                        000003   3-132  	bool	mc.cpu_type_mask,000003
                        000046   3-133  	equ	mc.ext_fault_reg_word,38
                        000022   3-134  	equ	mc.ext_fault_reg_shift,18
                        077777   3-135  	bool	mc.ext_fault_reg_mask,077777
                                 3-136  
                        000046   3-137  	equ	mc.fault_time,38		" DOUBLE
                        000050   3-138  	equ	mc.eis_info,40
                                 3-139  
                        000000   3-140  	equ	apx,0			" MANIFEST
                        000001   3-141  	equ	abx,1			" MANIFEST
                        000002   3-142  	equ	bpx,2			" MANIFEST
                        000003   3-143  	equ	bbx,3			" MANIFEST
                        000004   3-144  	equ	lpx,4			" MANIFEST
                        000005   3-145  	equ	lbx,5			" MANIFEST
                        000006   3-146  	equ	spx,6			" MANIFEST
                        000007   3-147  	equ	sbx,7			" MANIFEST
                                 3-148  
                                 3-149  "
                                 3-150  "	Structure scu
                                 3-151  "
                        000010   3-152  	equ	scu_size,8
                                 3-153  
                        000000   3-154  	equ	scu.ppr_word,0
                        000021   3-155  	equ	scu.ppr_shift,17
                        000041   3-156  	equ	scu.prr_shift,33
                        000007   3-157  	bool	scu.prr_mask,000007
                        000022   3-158  	equ	scu.psr_shift,18
                        077777   3-159  	bool	scu.psr_mask,077777
                        400000   3-160  	bool	scu.p,400000		" DL
                        000000   3-161  	equ	scu.apu_word,0
                        000003   3-162  	equ	scu.apu_shift,3
                        037777   3-163  	bool	scu.apu_mask,037777
                        200000   3-164  	bool	scu.xsf,200000		" DL
                        100000   3-165  	bool	scu.sdwm,100000		" DL
                        040000   3-166  	bool	scu.sd_on,040000		" DL
                        020000   3-167  	bool	scu.ptwm,020000		" DL
                        010000   3-168  	bool	scu.pt_on,010000		" DL
                        004000   3-169  	bool	scu.pi_ap,004000		" DL
                        002000   3-170  	bool	scu.dsptw,002000		" DL
                        001000   3-171  	bool	scu.sdwnp,001000		" DL
                        000400   3-172  	bool	scu.sdwp,000400		" DL
                        000200   3-173  	bool	scu.ptw,000200		" DL
                        000100   3-174  	bool	scu.ptw2,000100		" DL
                        000040   3-175  	bool	scu.fap,000040		" DL
                        000020   3-176  	bool	scu.fanp,000020		" DL
                        000010   3-177  	bool	scu.fabs,000010		" DL
                        000000   3-178  	equ	scu.fault_cntr_word,0
                        000000   3-179  	equ	scu.fault_cntr_shift,0
                        000007   3-180  	bool	scu.fault_cntr_mask,000007
                                 3-181  
                        000001   3-182  	equ	scu.fd_word,1
                        000020   3-183  	equ	scu.fd_shift,16
                        000001   3-184  	equ	scu.iro_word,1
                        400000   3-185  	bool	scu.iro,400000		" DU
                        000001   3-186  	equ	scu.oeb_word,1
                        200000   3-187  	bool	scu.oeb,200000		" DU
                        000001   3-188  	equ	scu.e_off_word,1
                        100000   3-189  	bool	scu.e_off,100000		" DU
                        000001   3-190  	equ	scu.orb_word,1
                        040000   3-191  	bool	scu.orb,040000		" DU
                        000001   3-192  	equ	scu.r_off_word,1
                        020000   3-193  	bool	scu.r_off,020000		" DU
                        000001   3-194  	equ	scu.owb_word,1
                        010000   3-195  	bool	scu.owb,010000		" DU
                        000001   3-196  	equ	scu.w_off_word,1
                        004000   3-197  	bool	scu.w_off,004000		" DU
                        000001   3-198  	equ	scu.no_ga_word,1
                        002000   3-199  	bool	scu.no_ga,002000		" DU
                        000001   3-200  	equ	scu.ocb_word,1
                        001000   3-201  	bool	scu.ocb,001000		" DU
                        000001   3-202  	equ	scu.ocall_word,1
                        000400   3-203  	bool	scu.ocall,000400		" DU
                        000001   3-204  	equ	scu.boc_word,1
                        000200   3-205  	bool	scu.boc,000200		" DU
                        000001   3-206  	equ	scu.inret_word,1
                        000100   3-207  	bool	scu.inret,000100		" DU
                        000001   3-208  	equ	scu.crt_word,1
                        000040   3-209  	bool	scu.crt,000040		" DU
                        000001   3-210  	equ	scu.ralr_word,1
                        000020   3-211  	bool	scu.ralr,000020		" DU
                        000001   3-212  	equ	scu.am_er_word,1
                        000010   3-213  	bool	scu.am_er,000010		" DU
                        000001   3-214  	equ	scu.oosb_word,1
                        000004   3-215  	bool	scu.oosb,000004		" DU
                        000001   3-216  	equ	scu.paru_word,1
                        000002   3-217  	bool	scu.paru,000002		" DU
                        000001   3-218  	equ	scu.parl_word,1
                        000001   3-219  	bool	scu.parl,000001		" DU
                        000001   3-220  	equ	scu.onc_1_word,1
                        400000   3-221  	bool	scu.onc_1,400000		" DL
                        000001   3-222  	equ	scu.onc_2_word,1
                        200000   3-223  	bool	scu.onc_2,200000		" DL
                        000001   3-224  	equ	scu.port_stat_word,1
                        000006   3-225  	equ	scu.port_stat_shift,6
                        001777   3-226  	bool	scu.port_stat_mask,001777
                        000001   3-227  	equ	scu.ial_word,1
                        000014   3-228  	equ	scu.ial_shift,12
                        000017   3-229  	bool	scu.ial_mask,000017
                        000001   3-230  	equ	scu.iac_word,1
                        000011   3-231  	equ	scu.iac_shift,9
                        000007   3-232  	bool	scu.iac_mask,000007
                        000001   3-233  	equ	scu.con_chan_word,1
                        000006   3-234  	equ	scu.con_chan_shift,6
                        000007   3-235  	bool	scu.con_chan_mask,000007
                        000001   3-236  	equ	scu.fi_num_word,1
                        000001   3-237  	equ	scu.fi_num_shift,1
                        000037   3-238  	bool	scu.fi_num_mask,000037
                        000001   3-239  	equ	scu.fi_flag_word,1
                        000001   3-240  	bool	scu.fi_flag,000001		" DL
                                 3-241  
                        000002   3-242  	equ	scu.tpr,2			" UPPER
                        000002   3-243  	equ	scu.trr_word,2
                        000041   3-244  	equ	scu.trr_shift,33
                        000007   3-245  	bool	scu.trr_mask,000007
                        000002   3-246  	equ	scu.tsr_word,2
                        000022   3-247  	equ	scu.tsr_shift,18
                        077777   3-248  	bool	scu.tsr_mask,077777
                        000002   3-249  	equ	scu.cpu_no_word,2
                        000006   3-250  	equ	scu.cpu_no_shift,6
                        000007   3-251  	bool	scu.cpu_no_mask,000007
                        000002   3-252  	equ	scu.delta_word,2
                        000000   3-253  	equ	scu.delta_shift,0
                        000077   3-254  	bool	scu.delta_mask,000077
                                 3-255  
                        000003   3-256  	equ	scu.word3,3		" UPPER
                        000003   3-257  	equ	scu.tsr_stat_word,3
                        000006   3-258  	equ	scu.tsr_stat_shift,6
                        007777   3-259  	bool	scu.tsr_stat_mask,007777
                        000003   3-260  	equ	scu.tsna_word,3
                        000016   3-261  	equ	scu.tsna_shift,14
                        000017   3-262  	bool	scu.tsna_mask,000017
                        000003   3-263  	equ	scu.tsnb_word,3
                        000012   3-264  	equ	scu.tsnb_shift,10
                        000017   3-265  	bool	scu.tsnb_mask,000017
                        000003   3-266  	equ	scu.tsnc_word,3
                        000006   3-267  	equ	scu.tsnc_shift,6
                        000017   3-268  	bool	scu.tsnc_mask,000017
                        000003   3-269  	equ	scu.tpr_tbr_word,3
                        000000   3-270  	equ	scu.tpr_tbr_shift,0
                        000077   3-271  	bool	scu.tpr_tbr_mask,000077
                                 3-272  
                        000004   3-273  	equ	scu.ilc,4			" UPPER
                        000004   3-274  	equ	scu.ir,4			" LOWER
                        000004   3-275  	equ	scu.zero_word,4
                        400000   3-276  	bool	scu.zero,400000		" DL
                        000004   3-277  	equ	scu.neg_word,4
                        200000   3-278  	bool	scu.neg,200000		" DL
                        000004   3-279  	equ	scu.carry_word,4
                        100000   3-280  	bool	scu.carry,100000		" DL
                        000004   3-281  	equ	scu.ovfl_word,4
                        040000   3-282  	bool	scu.ovfl,040000		" DL
                        000004   3-283  	equ	scu.eovf_word,4
                        020000   3-284  	bool	scu.eovf,020000		" DL
                        000004   3-285  	equ	scu.eufl_word,4
                        010000   3-286  	bool	scu.eufl,010000		" DL
                        000004   3-287  	equ	scu.oflm_word,4
                        004000   3-288  	bool	scu.oflm,004000		" DL
                        000004   3-289  	equ	scu.tro_word,4
                        002000   3-290  	bool	scu.tro,002000		" DL
                        000004   3-291  	equ	scu.par_word,4
                        001000   3-292  	bool	scu.par,001000		" DL
                        000004   3-293  	equ	scu.parm_word,4
                        000400   3-294  	bool	scu.parm,000400		" DL
                        000004   3-295  	equ	scu.bm_word,4
                        000200   3-296  	bool	scu.bm,000200		" DL
                        000004   3-297  	equ	scu.tru_word,4
                        000100   3-298  	bool	scu.tru,000100		" DL
                        000004   3-299  	equ	scu.mif_word,4
                        000040   3-300  	bool	scu.mif,000040		" DL
                        000004   3-301  	equ	scu.abs_word,4
                        000020   3-302  	bool	scu.abs,000020		" DL
                        000004   3-303  	equ	scu.hex_word,4
                        000010   3-304  	bool	scu.hex,000010		" DL
                                 3-305  
                        000005   3-306  	equ	scu.ca,5			" UPPER
                        000005   3-307  	equ	scu.cu_word,5
                        000006   3-308  	equ	scu.cu_shift,6
                        007777   3-309  	bool	scu.cu_mask,007777
                        000005   3-310  	equ	scu.rf_word,5
                        400000   3-311  	bool	scu.rf,400000		" DL
                        000005   3-312  	equ	scu.rpt_word,5
                        200000   3-313  	bool	scu.rpt,200000		" DL
                        000005   3-314  	equ	scu.rd_word,5
                        100000   3-315  	bool	scu.rd,100000		" DL
                        000005   3-316  	equ	scu.rl_word,5
                        040000   3-317  	bool	scu.rl,040000		" DL
                        000005   3-318  	equ	scu.pot_word,5
                        020000   3-319  	bool	scu.pot,020000		" DL
                        000005   3-320  	equ	scu.pon_word,5
                        010000   3-321  	bool	scu.pon,010000		" DL
                        000005   3-322  	equ	scu.xde_word,5
                        004000   3-323  	bool	scu.xde,004000		" DL
                        000005   3-324  	equ	scu.xdo_word,5
                        002000   3-325  	bool	scu.xdo,002000		" DL
                        000005   3-326  	equ	scu.poa_word,5
                        001000   3-327  	bool	scu.poa,001000		" DL
                        000005   3-328  	equ	scu.rfi_word,5
                        000400   3-329  	bool	scu.rfi,000400		" DL
                        000005   3-330  	equ	scu.its_word,5
                        000200   3-331  	bool	scu.its,000200		" DL
                        000005   3-332  	equ	scu.if_word,5
                        000100   3-333  	bool	scu.if,000100		" DL
                        000005   3-334  	equ	scu.cpu_tag_word,5
                        000000   3-335  	equ	scu.cpu_tag_shift,0
                        000077   3-336  	bool	scu.cpu_tag_mask,000077
                                 3-337  
                        000006   3-338  	equ	scu.even_inst,6
                        000007   3-339  	equ	scu.odd_inst,7
                                 3-340  
                                 3-341  "
                                 3-342  "	Structure scux
                                 3-343  "
                        000010   3-344  	equ	scux_size,8
                                 3-345  
                                 3-346  
                        000001   3-347  	equ	scux.fd_word,1
                        000000   3-348  	equ	scux.fd_shift,0
                        000001   3-349  	equ	scux.isn_word,1
                        400000   3-350  	bool	scux.isn,400000		" DU
                        000001   3-351  	equ	scux.ioc_word,1
                        200000   3-352  	bool	scux.ioc,200000		" DU
                        000001   3-353  	equ	scux.ia_am_word,1
                        100000   3-354  	bool	scux.ia_am,100000		" DU
                        000001   3-355  	equ	scux.isp_word,1
                        040000   3-356  	bool	scux.isp,040000		" DU
                        000001   3-357  	equ	scux.ipr_word,1
                        020000   3-358  	bool	scux.ipr,020000		" DU
                        000001   3-359  	equ	scux.nea_word,1
                        010000   3-360  	bool	scux.nea,010000		" DU
                        000001   3-361  	equ	scux.oobb_word,1
                        004000   3-362  	bool	scux.oobb,004000		" DU
                                 3-363  
                        000003   3-364  	equ	scux.tsr_stat_word,3
                        000006   3-365  	equ	scux.tsr_stat_shift,6
                        007777   3-366  	bool	scux.tsr_stat_mask,007777
                                 3-367  
                        000006   3-368  	equ	scux.instr,6
                                 3-369  
                                 3-370       "END INCLUDE FILE toe_hold.incl.alm
                                    23  " 
                                    24  "
                                    25  " This code is executed just after we have created the bootload DSEG,
                                    26  " before anything else is done. 
                                    27  
                        000000      28  	segdef	preinit
                                    29  
                                    30  preinit:	Bpush
    000000  4a  4 00010 7421 20         	stx2	bootload_0$entry_stack_ptr,id
    000001  4a  4 00012 6065 20         	ttn	bootload_error$out_of_stack
    000002  4a  4 00014 3721 20     31  	epp	seg,template_slt_$toehold_ptr,*
    000003  4a  4 00016 3515 20     32  	epp	seg2,template_slt_$bos_toehold_ptr,*
                                    33  
    000004  aa   000100 1004 00     34  	mlr	(),(pr),fill(000)	" Clear out the flagbox
    000005  aa   000000 000000      35  	desc9a	0,0
    000006  aa   600040 000600      36  	desc9a	seg|fgbx.flags_word,fgbx_size*4
                                    37  
    000007  aa  6 00056 1541 00     38  	sdbr	seg|fgbx.hc_dbr
                                    39  
    000010  4a  4 00020 2271 20     40  	ldx7	template_slt_$slt_ptr
    000011  aa  6 00041 7471 00     41  	stx7	seg|fgbx.slt_segno
                                    42  
    000012  4a  4 00022 2341 20     43  	szn	bootload_info$assume_config_deck " see if info from
    000013  0a   000025 6000 00     44  	tze	bos_absent	" IOM suggests BOS
                                    45  
                                    46  " We were booted either from BOS or an IIOC.  Check for BOS sentinel.
                                    47  
    000014  aa  0 00000 1065 00     48  	cmpc	(pr),()
    000015  aa   100024 000040      49  	desc9a	seg2|20,32		" BOS sentinel in flagbox
    000016  0a   000050 000040      50  	desc9a	test_sentinel,32
    000017  0a   000025 6010 00     51  	tnz	bos_absent
                                    52  
    000020  4a  4 00024 4501 20     53  	stz	bootload_info$cold_disk_mpc   " BOS loaded this
                                    54  
    000021  aa   000100 1004 00     55  	mlr	(),(pr)			" save BOS entries
    000022  0a   000042 000030      56  	desc9a	BOS_entries,3*2*4
    000023  aa   600030 000030      57  	desc9a	seg|TOE_HOLD_BOS_ENTRY*2,3*2*4
    000024  0a   000034 7100 00     58  	tra	return
                                    59  
    000025                          60  bos_absent:
    000025  4a  4 00022 4501 20     61  	stz	bootload_info$assume_config_deck
                                    62  
    000026  aa   400000 2350 03     63  	lda	=o400000,du
    000027  4a  4 00024 7551 20     64  	sta	bootload_info$cold_disk_mpc	" we must load
                                    65  
    000030  aa  6 00000 2371 00     66  	ldaq	seg|TOE_HOLD_CRASH_ENTRY*2	" make goto BOS -> goto bce
    000031  aa  6 00030 7571 00     67  	staq	seg|TOE_HOLD_BOS_ENTRY*2
    000032  aa  6 00032 7571 00     68  	staq	seg|TOE_HOLD_BOS_NO_SAVE_ENTRY*2
    000033  aa  6 00034 7571 00     69  	staq	seg|TOE_HOLD_BOS_MULTICS_ENTRY*2
                                    70  
    000034  aa  6 00000 2371 00     71  return:	ldaq	seg|TOE_HOLD_CRASH_ENTRY	" make 10000 -> goto bce
    000035  aa  1 00000 7571 00     72  	staq	seg2|0
    000036  aa  1 00002 7571 00     73  	staq	seg2|2
    000037  aa  1 00004 7571 00     74  	staq	seg2|4
                                    75  	Breturn
    000040  4a  4 00026 2221 20         	ldx2	bootload_0$entry_stack_ptr,di
    000041  aa   000000 7100 12         	tra	0+,x2
                                    76  
                        010000      77  	bool	bos_origsetup,10000
                        000007      78  	bool	bos_switchentry,7
                        000010      79  	bool	bos_bos_entry,10
                        000011      80  	bool	bos_mulentry,11
                        000370      81  	bool	bos_tscu,370
                                    82  
    000042                          83  	inhibit	on			<><><>ON<><><>
    000042                          84  BOS_entries:
    000042  aa   010370 6572 00     85  	scu	bos_origsetup+bos_tscu
    000043  aa   010007 6302 00     86  	ret	bos_origsetup+bos_switchentry
                                    87  
    000044  aa   010370 6572 00     88  	scu	bos_origsetup+bos_tscu
    000045  aa   010010 6302 00     89  	ret	bos_origsetup+bos_bos_entry
                                    90  
    000046  aa   010370 6572 00     91  	scu	bos_origsetup+bos_tscu
    000047  aa   010011 6302 00     92  	ret	bos_origsetup+bos_mulentry
                                    93   
    000050                          94  	inhibit	off			<><><>OFF<><><>
                                    95  
    000050                          96  test_sentinel:
    000050  aa  106 154 141 147     97  	aci	"Flagbox & Toehold Valid",32
    000051  aa  142 157 170 040
    000052  aa  046 040 124 157
    000053  aa  145 150 157 154
    000054  aa  144 040 126 141
    000055  aa  154 151 144 040
    000056  aa  040 040 040 040
    000057  aa  040 040 040 040
                                    98  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000060  5a   000003 000000 
    000061  5a   000027 600000 
    000062  aa   000000 000000 
    000063  55   000013 000002 
    000064  5a   000002 400003 
    000065  55   000006 000013 
    000066  aa  020 142 157 157
    000067  aa  164 154 157 141
    000070  aa  144 137 146 154
    000071  aa  141 147 142 157
    000072  aa  170 000 000 000
    000073  55   000020 000003 
    000074  0a   000000 400000 
    000075  55   000016 000003 
    000076  aa  007 160 162 145         preinit
    000077  aa  151 156 151 164
    000100  55   000002 000013 
    000101  6a   000000 400002 
    000102  55   000023 000003 
    000103  aa  014 163 171 155         symbol_table
    000104  aa  142 157 154 137
    000105  aa  164 141 142 154
    000106  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000107  aa   000000 000015 
    000110  aa   000000 000000 
    000111  aa   000000 000000 
    000112  aa   000000 000000 
    000113  aa   000000 000000 
    000114  5a   000013 000000 
    000115  aa   000000 000000 
    000116  5a   000020 000000 
    000117  aa   000000 000000 
    000120  aa   000000 000000 
    000121  aa   000000 000000 
    000122  aa   000000 000000 
    000123  aa   000000 000000 
    000124  aa   000000 000000 

EXTERNAL NAMES

    000125  aa  015 143 157 154         cold_disk_mpc
    000126  aa  144 137 144 151
    000127  aa  163 153 137 155
    000130  aa  160 143 000 000
    000131  aa  022 141 163 163         assume_config_deck
    000132  aa  165 155 145 137
    000133  aa  143 157 156 146
    000134  aa  151 147 137 144
    000135  aa  145 143 153 000
    000136  aa  015 142 157 157         bootload_info
    000137  aa  164 154 157 141
    000140  aa  144 137 151 156
    000141  aa  146 157 000 000
    000142  aa  007 163 154 164         slt_ptr
    000143  aa  137 160 164 162
    000144  aa  017 142 157 163         bos_toehold_ptr
    000145  aa  137 164 157 145
    000146  aa  150 157 154 144
    000147  aa  137 160 164 162
    000150  aa  013 164 157 145         toehold_ptr
    000151  aa  150 157 154 144
    000152  aa  137 160 164 162
    000153  aa  015 164 145 155         template_slt_
    000154  aa  160 154 141 164
    000155  aa  145 137 163 154
    000156  aa  164 137 000 000
    000157  aa  014 157 165 164         out_of_stack
    000160  aa  137 157 146 137
    000161  aa  163 164 141 143
    000162  aa  153 000 000 000
    000163  aa  016 142 157 157         bootload_error
    000164  aa  164 154 157 141
    000165  aa  144 137 145 162
    000166  aa  162 157 162 000
    000167  aa  017 145 156 164         entry_stack_ptr
    000170  aa  162 171 137 163
    000171  aa  164 141 143 153
    000172  aa  137 160 164 162
    000173  aa  012 142 157 157         bootload_0
    000174  aa  164 154 157 141
    000175  aa  144 137 060 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000176  aa   000004 000000 
    000177  55   000056 000045 
    000200  aa   000004 000000 
    000201  55   000056 000051 
    000202  aa   000004 000000 
    000203  55   000073 000062 
    000204  aa   000004 000000 
    000205  55   000073 000064 
    000206  aa   000004 000000 
    000207  55   000073 000070 
    000210  aa   000004 000000 
    000211  55   000103 000077 
    000212  aa   000004 000000 
    000213  55   000113 000107 
    000214  aa   000001 000000 
    000215  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000216  5a   000116 000000 
    000217  5a   000120 000000 
    000220  5a   000122 000000 
    000221  5a   000124 000000 
    000222  5a   000126 000000 
    000223  5a   000130 000000 
    000224  5a   000132 000000 
    000225  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000060 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000030 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         bootload_0|entry_stack_ptr
    000011  5a   000144 0000 56
    000012  9a   777766 0000 46         bootload_error|out_of_stack
    000013  5a   000143 0000 00
    000014  9a   777764 0000 46         template_slt_|toehold_ptr
    000015  5a   000142 0000 20
    000016  9a   777762 0000 46         template_slt_|bos_toehold_ptr
    000017  5a   000141 0000 20
    000020  9a   777760 0000 46         template_slt_|slt_ptr
    000021  5a   000140 0000 00
    000022  9a   777756 0000 46         bootload_info|assume_config_deck
    000023  5a   000137 0000 00
    000024  9a   777754 0000 46         bootload_info|cold_disk_mpc
    000025  5a   000136 0000 00
    000026  9a   777752 0000 46         bootload_0|entry_stack_ptr
    000027  5a   000144 0000 54
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   247575 110421 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000220 
    000020  aa   000000 000155 
    000021  aa   000172 000164 
    000022  aa   000207 000155 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000065 
    000067  aa   175453 021650 
    000070  aa   000000 117547 
    000071  aa   215115 200000 
    000072  aa   000124 000043 
    000073  aa   127236 043477 
    000074  aa   000000 112724 
    000075  aa   701742 600000 
    000076  aa   000135 000035 
    000077  aa   153072 447700 
    000100  aa   000000 115333 
    000101  aa   300226 600000 
    000102  aa   000145 000036 
    000103  aa   127236 043574 
    000104  aa   000000 112724 
    000105  aa   701751 400000 
    000106  aa   076163 160145          >special_ldd>install>MR12.3-1114>bootload_flagbox.alm
    000107  aa   143151 141154 
    000110  aa   137154 144144 
    000111  aa   076151 156163 
    000112  aa   164141 154154 
    000113  aa   076115 122061 
    000114  aa   062056 063055 
    000115  aa   061061 061064 
    000116  aa   076142 157157 
    000117  aa   164154 157141 
    000120  aa   144137 146154 
    000121  aa   141147 142157 
    000122  aa   170056 141154 
    000123  aa   155040 040040 
    000124  aa   076154 144144          >ldd>include>bootload_equs.incl.alm
    000125  aa   076151 156143 
    000126  aa   154165 144145 
    000127  aa   076142 157157 
    000130  aa   164154 157141 
    000131  aa   144137 145161 
    000132  aa   165163 056151 
    000133  aa   156143 154056 
    000134  aa   141154 155040 
    000135  aa   076154 144144          >ldd>include>flagbox.incl.alm
    000136  aa   076151 156143 
    000137  aa   154165 144145 
    000140  aa   076146 154141 
    000141  aa   147142 157170 
    000142  aa   056151 156143 
    000143  aa   154056 141154 
    000144  aa   155040 040040 
    000145  aa   076154 144144          >ldd>include>toe_hold.incl.alm
    000146  aa   076151 156143 
    000147  aa   154165 144145 
    000150  aa   076164 157145 
    000151  aa   137150 157154 
    000152  aa   144056 151156 
    000153  aa   143154 056141 
    000154  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

       10000    .._00000                 bootload_equs:       75.
        2000    .._00001                 bootload_equs:       76.
       24000    .._00002                 bootload_equs:       78.
        2000    .._00003                 bootload_equs:       79.
       24000    .._00004                 bootload_equs:       81.
        4000    .._00005                 bootload_equs:       82.
       24000    .._00006                 bootload_equs:       87.
       22000    .._00007                 bootload_equs:       88.
       46000    .._00010                 bootload_equs:       90.
        4000    .._00011                 bootload_equs:       91.
       52000    .._00012                 bootload_equs:       93.
        2000    .._00013                 bootload_equs:       94.
       54000    .._00014                 bootload_equs:       96.
        2000    .._00015                 bootload_equs:       97.
       56000    .._00016                 bootload_equs:       99.
        2000    .._00017                 bootload_equs:      100.
       60000    .._00020                 bootload_equs:      102.
        6000    .._00021                 bootload_equs:      103.
           1    abx                      toe_hold:     141.
           0    apx                      toe_hold:     140.
                assume_config_deck       bootload_flagbox:    43,   61.
           2    At_bce__boot             toe_hold:      79.
           6    At_bce__crash            toe_hold:      83.
           1    At_bce__early            toe_hold:      78.
           7    At_bce__shutdown         toe_hold:      84.
       24000    bbl0_absloc              bootload_equs:       87.
       22000    bbl0_lth                 bootload_equs:       88.
           3    bbx                      toe_hold:     143.
       56000    bkpt_absloc              bootload_equs:       99.
        2000    bkpt_lth                 bootload_equs:      100.
                bootload_0               bootload_flagbox:    30,   75.
                bootload_error           bootload_flagbox:    30.
                bootload_info            bootload_flagbox:    43,   53,   61,   64.
       10000    bostoe_absloc            bootload_equs:       75.
        2000    bostoe_lth               bootload_equs:       76.
          25    bos_absent               bootload_flagbox:    44,   51,   60.
          10    bos_bos_entry            bootload_flagbox:    79,   89.
          42    BOS_entries              bootload_flagbox:    56,   84.
          11    bos_mulentry             bootload_flagbox:    80,   92.
       10000    bos_origsetup            bootload_flagbox:    77,   85,   86,   88,   89,   91,   92.
           7    bos_switchentry          bootload_flagbox:    78,   86.
                bos_toehold_ptr          bootload_flagbox:    32.
         370    bos_tscu                 bootload_flagbox:    81,   85,   88,   91.
           2    bpx                      toe_hold:     142.
                cold_disk_mpc            bootload_flagbox:    53,   64.
           0    ds                       bootload_equs:       12.
                entry_stack_ptr          bootload_flagbox:    30,   75.
       20000    fgbx.alert               flagbox:       41.
          77    fgbx.bce_entry_mask      flagbox:       46.
           1    fgbx.bce_entry_shift     flagbox:       45.
       10000    fgbx.breakpoint          flagbox:       42.
      200000    fgbx.call_bce            flagbox:       38.
      400000    fgbx.flags               flagbox:       31.
          40    fgbx.flags_word          bootload_flagbox:    36,
                                         flagbox:       30.
          56    fgbx.hc_dbr              bootload_flagbox:    38,
                                         flagbox:       50.
        2000    fgbx.io_reconfig         flagbox:       44.
        4000    fgbx.manual_crash        flagbox:       43.
       40000    fgbx.mess                flagbox:       40.
          60    fgbx.message             flagbox:       51.
         100    fgbx.return_to_bce_command     flagbox:       52.
          43    fgbx.rtb                 flagbox:       35.
          44    fgbx.sentinel            flagbox:       48.
      100000    fgbx.shut                flagbox:       39.
          41    fgbx.slt_segno           bootload_flagbox:    41,
                                         flagbox:       33.
      400000    fgbx.ssenb               flagbox:       37.
          54    fgbx.sst_sdw             flagbox:       49.
           0    fgbx.toehold_used        flagbox:       28.
       24000    fgbx_absloc              bootload_equs:       78.
        2000    fgbx_lth                 bootload_equs:       79.
         140    fgbx_size                bootload_flagbox:    36,
                                         flagbox:       25.
           7    fv                       bootload_equs:       19.
           0    Initial_undefined        toe_hold:      77.
           2    io_path.channel_number   toe_hold:      41.
       77777    io_path.iom_number_mask  toe_hold:      40.
          22    io_path.iom_number_shift       toe_hold:      39.
           2    io_path.iom_number_word  toe_hold:      38.
           0    io_path.pcw              toe_hold:      33.
           7    io_path.port_number_mask       toe_hold:      37.
          41    io_path.port_number_shift      toe_hold:      36.
           2    io_path.port_number_word       toe_hold:      35.
           4    io_path_size             toe_hold:      31.
       54000    iupt_absloc              bootload_equs:       96.
        2000    iupt_lth                 bootload_equs:       97.
           5    lbx                      toe_hold:     145.
           4    lpx                      toe_hold:     144.
           2    mb                       bootload_equs:       14.
          24    mc.a                     toe_hold:      99.
           3    mc.cpu_type_mask         toe_hold:     132.
          41    mc.cpu_type_shift        toe_hold:     131.
          46    mc.cpu_type_word         toe_hold:     130.
          50    mc.eis_info              toe_hold:     138.
           0    mc.errcode_shift         toe_hold:     117.
          43    mc.errcode_word          toe_hold:     116.
       77777    mc.ext_fault_reg_mask    toe_hold:     135.
          22    mc.ext_fault_reg_shift   toe_hold:     134.
          46    mc.ext_fault_reg_word    toe_hold:     133.
         377    mc.e_mask                toe_hold:     104.
          34    mc.e_shift               toe_hold:     103.
          26    mc.e_word                toe_hold:     102.
          45    mc.fault_reg             toe_hold:     128.
          46    mc.fault_time            toe_hold:     137.
      377777    mc.fcode_mask            toe_hold:     126.
           0    mc.fcode_shift           toe_hold:     125.
          44    mc.fcode_word            toe_hold:     124.
           0    mc.fim_temp_shift        toe_hold:     120.
          44    mc.fim_temp_word         toe_hold:     119.
          42    mc.ips_temp              toe_hold:     114.
          40    mc.mask                  toe_hold:     113.
           0    mc.prs                   toe_hold:      93.
          25    mc.q                     toe_hold:     100.
           7    mc.ralr_mask             toe_hold:     110.
           0    mc.ralr_shift            toe_hold:     109.
          27    mc.ralr_word             toe_hold:     108.
        1532    mc.regs_shift            toe_hold:      96.
          20    mc.regs_word             toe_hold:      95.
      400000    mc.resignal              toe_hold:     123.
          44    mc.resignal_word         toe_hold:     122.
          30    mc.scu                   toe_hold:     112.
          11    mc.t_shift               toe_hold:     107.
          27    mc.t_word                toe_hold:     106.
          44    mc.unique_index          toe_hold:     121.
          20    mc.x                     toe_hold:      97.
          60    mc_size                  toe_hold:      91.
         260    mc_state.apu_history_registers       toe_hold:      71.
         110    mc_state.bar             toe_hold:      66.
         103    mc_state.cache_mode_reg  toe_hold:      63.
         106    mc_state.cfg             toe_hold:      65.
         160    mc_state.cu_history_registers  toe_hold:      69.
         104    mc_state.dbr             toe_hold:      64.
         220    mc_state.du_history_registers  toe_hold:      70.
         100    mc_state.interrupt       toe_hold:      61.
          60    mc_state.masks           toe_hold:      60.
           0    mc_state.mc_             toe_hold:      58.
         102    mc_state.mode_reg        toe_hold:      62.
         111    mc_state.old_memory_state      toe_hold:      67.
         120    mc_state.ou_history_registers  toe_hold:      68.
         320    mc_state.ptwam_ptrs      toe_hold:      72.
         420    mc_state.ptwam_regs      toe_hold:      73.
         520    mc_state.sdwam_ptrs      toe_hold:      74.
         620    mc_state.sdwam_regs      toe_hold:      75.
        1020    mc_state_size            toe_hold:      56.
           3    Multics                  toe_hold:      80.
           4    nt                       bootload_equs:       16.
                out_of_stack             bootload_flagbox:    30.
           5    prb                      bootload_equs:       17.
       60000    prb_absloc               bootload_equs:      102.
        6000    prb_lth                  bootload_equs:      103.
           0    preinit                  bootload_flagbox:    28,   30.
          34    return                   bootload_flagbox:    58,   71.
           7    sbx                      toe_hold:     147.
          20    scu.abs                  toe_hold:     302.
           4    scu.abs_word             toe_hold:     301.
          10    scu.am_er                toe_hold:     213.
           1    scu.am_er_word           toe_hold:     212.
       37777    scu.apu_mask             toe_hold:     163.
           3    scu.apu_shift            toe_hold:     162.
           0    scu.apu_word             toe_hold:     161.
         200    scu.bm                   toe_hold:     296.
           4    scu.bm_word              toe_hold:     295.
         200    scu.boc                  toe_hold:     205.
           1    scu.boc_word             toe_hold:     204.
           5    scu.ca                   toe_hold:     306.
      100000    scu.carry                toe_hold:     280.
           4    scu.carry_word           toe_hold:     279.
           7    scu.con_chan_mask        toe_hold:     235.
           6    scu.con_chan_shift       toe_hold:     234.
           1    scu.con_chan_word        toe_hold:     233.
           7    scu.cpu_no_mask          toe_hold:     251.
           6    scu.cpu_no_shift         toe_hold:     250.
           2    scu.cpu_no_word          toe_hold:     249.
          77    scu.cpu_tag_mask         toe_hold:     336.
           0    scu.cpu_tag_shift        toe_hold:     335.
           5    scu.cpu_tag_word         toe_hold:     334.
          40    scu.crt                  toe_hold:     209.
           1    scu.crt_word             toe_hold:     208.
        7777    scu.cu_mask              toe_hold:     309.
           6    scu.cu_shift             toe_hold:     308.
           5    scu.cu_word              toe_hold:     307.
          77    scu.delta_mask           toe_hold:     254.
           0    scu.delta_shift          toe_hold:     253.
           2    scu.delta_word           toe_hold:     252.
        2000    scu.dsptw                toe_hold:     170.
       20000    scu.eovf                 toe_hold:     284.
           4    scu.eovf_word            toe_hold:     283.
       10000    scu.eufl                 toe_hold:     286.
           4    scu.eufl_word            toe_hold:     285.
           6    scu.even_inst            toe_hold:     338.
      100000    scu.e_off                toe_hold:     189.
           1    scu.e_off_word           toe_hold:     188.
          10    scu.fabs                 toe_hold:     177.
          20    scu.fanp                 toe_hold:     176.
          40    scu.fap                  toe_hold:     175.
           7    scu.fault_cntr_mask      toe_hold:     180.
           0    scu.fault_cntr_shift     toe_hold:     179.
           0    scu.fault_cntr_word      toe_hold:     178.
          20    scu.fd_shift             toe_hold:     183.
           1    scu.fd_word              toe_hold:     182.
           1    scu.fi_flag              toe_hold:     240.
           1    scu.fi_flag_word         toe_hold:     239.
          37    scu.fi_num_mask          toe_hold:     238.
           1    scu.fi_num_shift         toe_hold:     237.
           1    scu.fi_num_word          toe_hold:     236.
          10    scu.hex                  toe_hold:     304.
           4    scu.hex_word             toe_hold:     303.
           7    scu.iac_mask             toe_hold:     232.
          11    scu.iac_shift            toe_hold:     231.
           1    scu.iac_word             toe_hold:     230.
          17    scu.ial_mask             toe_hold:     229.
          14    scu.ial_shift            toe_hold:     228.
           1    scu.ial_word             toe_hold:     227.
         100    scu.if                   toe_hold:     333.
           5    scu.if_word              toe_hold:     332.
           4    scu.ilc                  toe_hold:     273.
         100    scu.inret                toe_hold:     207.
           1    scu.inret_word           toe_hold:     206.
           4    scu.ir                   toe_hold:     274.
      400000    scu.iro                  toe_hold:     185.
           1    scu.iro_word             toe_hold:     184.
         200    scu.its                  toe_hold:     331.
           5    scu.its_word             toe_hold:     330.
          40    scu.mif                  toe_hold:     300.
           4    scu.mif_word             toe_hold:     299.
      200000    scu.neg                  toe_hold:     278.
           4    scu.neg_word             toe_hold:     277.
        2000    scu.no_ga                toe_hold:     199.
           1    scu.no_ga_word           toe_hold:     198.
         400    scu.ocall                toe_hold:     203.
           1    scu.ocall_word           toe_hold:     202.
        1000    scu.ocb                  toe_hold:     201.
           1    scu.ocb_word             toe_hold:     200.
           7    scu.odd_inst             toe_hold:     339.
      200000    scu.oeb                  toe_hold:     187.
           1    scu.oeb_word             toe_hold:     186.
        4000    scu.oflm                 toe_hold:     288.
           4    scu.oflm_word            toe_hold:     287.
      400000    scu.onc_1                toe_hold:     221.
           1    scu.onc_1_word           toe_hold:     220.
      200000    scu.onc_2                toe_hold:     223.
           1    scu.onc_2_word           toe_hold:     222.
           4    scu.oosb                 toe_hold:     215.
           1    scu.oosb_word            toe_hold:     214.
       40000    scu.orb                  toe_hold:     191.
           1    scu.orb_word             toe_hold:     190.
       40000    scu.ovfl                 toe_hold:     282.
           4    scu.ovfl_word            toe_hold:     281.
       10000    scu.owb                  toe_hold:     195.
           1    scu.owb_word             toe_hold:     194.
      400000    scu.p                    toe_hold:     160.
        1000    scu.par                  toe_hold:     292.
           1    scu.parl                 toe_hold:     219.
           1    scu.parl_word            toe_hold:     218.
         400    scu.parm                 toe_hold:     294.
           4    scu.parm_word            toe_hold:     293.
           2    scu.paru                 toe_hold:     217.
           1    scu.paru_word            toe_hold:     216.
           4    scu.par_word             toe_hold:     291.
        4000    scu.pi_ap                toe_hold:     169.
        1000    scu.poa                  toe_hold:     327.
           5    scu.poa_word             toe_hold:     326.
       10000    scu.pon                  toe_hold:     321.
           5    scu.pon_word             toe_hold:     320.
        1777    scu.port_stat_mask       toe_hold:     226.
           6    scu.port_stat_shift      toe_hold:     225.
           1    scu.port_stat_word       toe_hold:     224.
       20000    scu.pot                  toe_hold:     319.
           5    scu.pot_word             toe_hold:     318.
          21    scu.ppr_shift            toe_hold:     155.
           0    scu.ppr_word             toe_hold:     154.
           7    scu.prr_mask             toe_hold:     157.
          41    scu.prr_shift            toe_hold:     156.
       77777    scu.psr_mask             toe_hold:     159.
          22    scu.psr_shift            toe_hold:     158.
         200    scu.ptw                  toe_hold:     173.
         100    scu.ptw2                 toe_hold:     174.
       20000    scu.ptwm                 toe_hold:     167.
       10000    scu.pt_on                toe_hold:     168.
          20    scu.ralr                 toe_hold:     211.
           1    scu.ralr_word            toe_hold:     210.
      100000    scu.rd                   toe_hold:     315.
           5    scu.rd_word              toe_hold:     314.
      400000    scu.rf                   toe_hold:     311.
         400    scu.rfi                  toe_hold:     329.
           5    scu.rfi_word             toe_hold:     328.
           5    scu.rf_word              toe_hold:     310.
       40000    scu.rl                   toe_hold:     317.
           5    scu.rl_word              toe_hold:     316.
      200000    scu.rpt                  toe_hold:     313.
           5    scu.rpt_word             toe_hold:     312.
       20000    scu.r_off                toe_hold:     193.
           1    scu.r_off_word           toe_hold:     192.
      100000    scu.sdwm                 toe_hold:     165.
        1000    scu.sdwnp                toe_hold:     171.
         400    scu.sdwp                 toe_hold:     172.
       40000    scu.sd_on                toe_hold:     166.
           2    scu.tpr                  toe_hold:     242.
          77    scu.tpr_tbr_mask         toe_hold:     271.
           0    scu.tpr_tbr_shift        toe_hold:     270.
           3    scu.tpr_tbr_word         toe_hold:     269.
        2000    scu.tro                  toe_hold:     290.
           4    scu.tro_word             toe_hold:     289.
           7    scu.trr_mask             toe_hold:     245.
          41    scu.trr_shift            toe_hold:     244.
           2    scu.trr_word             toe_hold:     243.
         100    scu.tru                  toe_hold:     298.
           4    scu.tru_word             toe_hold:     297.
          17    scu.tsna_mask            toe_hold:     262.
          16    scu.tsna_shift           toe_hold:     261.
           3    scu.tsna_word            toe_hold:     260.
          17    scu.tsnb_mask            toe_hold:     265.
          12    scu.tsnb_shift           toe_hold:     264.
           3    scu.tsnb_word            toe_hold:     263.
          17    scu.tsnc_mask            toe_hold:     268.
           6    scu.tsnc_shift           toe_hold:     267.
           3    scu.tsnc_word            toe_hold:     266.
       77777    scu.tsr_mask             toe_hold:     248.
          22    scu.tsr_shift            toe_hold:     247.
        7777    scu.tsr_stat_mask        toe_hold:     259.
           6    scu.tsr_stat_shift       toe_hold:     258.
           3    scu.tsr_stat_word        toe_hold:     257.
           2    scu.tsr_word             toe_hold:     246.
           3    scu.word3                toe_hold:     256.
        4000    scu.w_off                toe_hold:     197.
           1    scu.w_off_word           toe_hold:     196.
        4000    scu.xde                  toe_hold:     323.
           5    scu.xde_word             toe_hold:     322.
        2000    scu.xdo                  toe_hold:     325.
           5    scu.xdo_word             toe_hold:     324.
      200000    scu.xsf                  toe_hold:     164.
      400000    scu.zero                 toe_hold:     276.
           4    scu.zero_word            toe_hold:     275.
           0    scux.fd_shift            toe_hold:     348.
           1    scux.fd_word             toe_hold:     347.
      100000    scux.ia_am               toe_hold:     354.
           1    scux.ia_am_word          toe_hold:     353.
           6    scux.instr               toe_hold:     368.
      200000    scux.ioc                 toe_hold:     352.
           1    scux.ioc_word            toe_hold:     351.
       20000    scux.ipr                 toe_hold:     358.
           1    scux.ipr_word            toe_hold:     357.
      400000    scux.isn                 toe_hold:     350.
           1    scux.isn_word            toe_hold:     349.
       40000    scux.isp                 toe_hold:     356.
           1    scux.isp_word            toe_hold:     355.
       10000    scux.nea                 toe_hold:     360.
           1    scux.nea_word            toe_hold:     359.
        4000    scux.oobb                toe_hold:     362.
           1    scux.oobb_word           toe_hold:     361.
        7777    scux.tsr_stat_mask       toe_hold:     366.
           6    scux.tsr_stat_shift      toe_hold:     365.
           3    scux.tsr_stat_word       toe_hold:     364.
          10    scux_size                toe_hold:     344.
          10    scu_size                 toe_hold:     152.
           6    seg                      bootload_flagbox:    31,   36,   38,   41,   57,   66,   67,   68,   69,   71,
                                         bootload_equs:       18.
           1    seg2                     bootload_flagbox:    32,   49,   72,   73,   74,
                                         bootload_equs:       13.
           3    slt                      bootload_equs:       15.
                slt_ptr                  bootload_flagbox:    40.
           6    spx                      toe_hold:     146.
                template_slt_            bootload_flagbox:    31,   32,   40.
          50    test_sentinel            bootload_flagbox:    50,   96.
       46000    toedata_absloc           bootload_equs:       90.
        4000    toedata_lth              bootload_equs:       91.
                toehold_ptr              bootload_flagbox:    31.
       24000    toe_absloc               bootload_equs:       81.
         242    toe_hold.bce_dbr         toe_hold:      24.
           0    toe_hold.entry_sequences       toe_hold:      18.
          40    toe_hold.flagbox         toe_hold:      19.
         241    toe_hold.memory_state    toe_hold:      23.
        2760    toe_hold.multics_state   toe_hold:      25.
         240    toe_hold.n_paths_used    toe_hold:      22.
         220    toe_hold.paths           toe_hold:      20.
           5    TOE_HOLD_BOOT_ENTRY      toe_hold:      48.
          14    TOE_HOLD_BOS_ENTRY       bootload_flagbox:    57,   67,
                                         toe_hold:      49.
          16    TOE_HOLD_BOS_MULTICS_ENTRY     bootload_flagbox:    69,
                                               toe_hold:      51.
          15    TOE_HOLD_BOS_NO_SAVE_ENTRY     bootload_flagbox:    68,
                                               toe_hold:      50.
           0    TOE_HOLD_CRASH_ENTRY     bootload_flagbox:    66,   71,
                                         toe_hold:      43.
           2    TOE_HOLD_DUMP_ENTRY      toe_hold:      45.
           1    TOE_HOLD_ESD_ENTRY       toe_hold:      44.
           3    TOE_HOLD_MULTICS_ENTRY   toe_hold:      46.
           4    TOE_HOLD_RESTART_ENTRY   toe_hold:      47.
        4000    toe_hold_size            toe_hold:      15.
        4000    toe_lth                  bootload_equs:       82.
          10    Undefined_continue       toe_hold:      85.
           5    Undefined_reading_bce    toe_hold:      82.
          11    Undefined_saving_mem     toe_hold:      86.
           4    Undefined_saving_state   toe_hold:      81.
       52000    upt_absloc               bootload_equs:       93.
        2000    upt_lth                  bootload_equs:       94.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
