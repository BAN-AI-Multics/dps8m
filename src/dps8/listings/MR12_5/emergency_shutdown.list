ASSEMBLY LISTING OF SEGMENT >spec>install>1115>emergency_shutdown.alm                                                                                                                               
ASSEMBLED ON:	11/11/89  0939.0 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  "
                                    13  "  EMERGENCY_SHUTDOWN
                                    14  
    000000                          15  	name	emergency_shutdown
                                    16  
                                    17  "
                                    18  " This module is designed to be entered from BOS after a crash,
                                    19  " It will attempt to salvage the contents of core by
                                    20  " 1. set up an initial environment to clear I/O devices,
                                    21  " 2. flushing out all unwired pages
                                    22  " 3. deactivating all segments
                                    23  "
                                    24  " Last Modified: (Date and Reason)
                                    25  "
                                    26  " 10/11/83, Keith Loepere for paged unpaged stacks.
                                    27  " 09/18/83, E. A. Ranzenbach to call syserr_real$syserr_reset before ocdcm_$esd_reset
                                    28  " 06/20/83, E. A. Ranzenbach, for new ocdcm_$esd_reset call
                                    29  " 09/28/82, J. Bongiovanni, to run on any CPU
                                    30  " 03/01/81, W. Olin Sibert, for ADP conversion (Phase One)
                                    31  " 01/20/81 by C. Hornig for io_manager
                                    32  " 05/10/79 by B. Greenberg for shared stack_0's
                                    33  " 03/10/76 by S. Webber 
                                    34  " 08/31/73 by R.B.Snyder to remove tra 0 at entry.
                                    35  " 07/21/71 by Richard H. Gumpertz to get rid of prds$+<stb_pointer>, etc.
                                    36  " Redesigned: N. I. Morris, 5/71
                                    37  " Modified for new file system: S. H. Webber, 4/69
                                    38  " Initial coding: T. H. Van Vleck, 2/69
                                    39  " Design: N. I. Morris, 11/68
                                    40  "
                                    41  
                                    42  	iftarget	adp
                                        "	  warn	(This has not been converted yet for the ADP. Beware.)
                                        "	ifend
                                    45  
                                    46  
                                    47  
                        000212      48  	segdef	entry,lp,pp
                                    49  
                                    50  	include	sdw
                                   1-1  " BEGIN INCLUDE FILE ... sdw.incl.alm ... 03/01/81, for ADP conversion
                                   1-2  
                                   1-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	sdw.l68
                                   2-1  
                                   2-2  
                                   2-3       "BEGIN INCLUDE FILE sdw.l68.incl.alm
                                   2-4  
                                   2-5  
                                   2-6  	"Created 04/05/81  1616.1 est Sun by convert_include_file,
                                   2-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   2-8  
                                   2-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>sdw.l68.incl.pl1,
                                  2-10  	"   modified 03/20/81  2215.5 est Fri
                                  2-11  
                                  2-12  "
                                  2-13  "	Structure sdw
                                  2-14  "
                        000002    2-15  	equ	sdw_size,2
                                  2-16  
                        000000    2-17  	equ	sdw.add_word,0
                        000014    2-18  	equ	sdw.add_shift,12
                        000000    2-19  	equ	sdw.rings_word,0
                        000003    2-20  	equ	sdw.rings_shift,3
                        000777    2-21  	bool	sdw.rings_mask,000777
                        000000    2-22  	equ	sdw.r1_word,0
                        000011    2-23  	equ	sdw.r1_shift,9
                        000007    2-24  	bool	sdw.r1_mask,000007
                        000000    2-25  	equ	sdw.r2_word,0
                        000006    2-26  	equ	sdw.r2_shift,6
                        000007    2-27  	bool	sdw.r2_mask,000007
                        000000    2-28  	equ	sdw.r3_word,0
                        000003    2-29  	equ	sdw.r3_shift,3
                        000007    2-30  	bool	sdw.r3_mask,000007
                        000000    2-31  	equ	sdw.valid_word,0
                        000004    2-32  	bool	sdw.valid,000004	" DL
                        000000    2-33  	equ	sdw.df_no_word,0
                        000000    2-34  	equ	sdw.df_no_shift,0
                        000003    2-35  	bool	sdw.df_no_mask,000003
                                  2-36  
                        000001    2-37  	equ	sdw.bound_word,1
                        000025    2-38  	equ	sdw.bound_shift,21
                        037777    2-39  	bool	sdw.bound_mask,037777
                        000001    2-40  	equ	sdw.access_word,1
                        000021    2-41  	equ	sdw.access_shift,17
                        000017    2-42  	bool	sdw.access_mask,000017
                        000001    2-43  	equ	sdw.read_word,1
                        000004    2-44  	bool	sdw.read,000004		" DU
                        000001    2-45  	equ	sdw.execute_word,1
                        000002    2-46  	bool	sdw.execute,000002	" DU
                        000001    2-47  	equ	sdw.write_word,1
                        000001    2-48  	bool	sdw.write,000001	" DU
                        000001    2-49  	equ	sdw.privileged_word,1
                        400000    2-50  	bool	sdw.privileged,400000	" DL
                        000001    2-51  	equ	sdw.unpaged_word,1
                        200000    2-52  	bool	sdw.unpaged,200000	" DL
                        000001    2-53  	equ	sdw.not_a_gate_word,1
                        100000    2-54  	bool	sdw.not_a_gate,100000	" DL
                        000001    2-55  	equ	sdw.cache_word,1
                        040000    2-56  	bool	sdw.cache,040000	" DL
                        000001    2-57  	equ	sdw.entry_bound_word,1
                        000000    2-58  	equ	sdw.entry_bound_shift,0
                        037777    2-59  	bool	sdw.entry_bound_mask,037777
                                  2-60  
                                  2-61       "END INCLUDE FILE sdw.l68.incl.alm
                                        "	ifend
                                   1-6  
                                   1-7  	iftarget	adp
                                        "	 include	sdw.adp
                                        "	ifend
                                  1-10  
                                  1-11  " END INCLUDE FILE ... sdw.incl.alm
                                    51  	include	ptw
                                   3-1  " BEGIN INCLUDE FILE ... ptw.incl.alm ... 03/01/81, for ADP conversion
                                   3-2  
                                   3-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	ptw.l68
                                   4-1  
                                   4-2  
                                   4-3       "BEGIN INCLUDE FILE ptw.l68.incl.alm
                                   4-4  
                                   4-5  
                                   4-6  	"Created 04/05/81  1616.0 est Sun by convert_include_file,
                                   4-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   4-8  
                                   4-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>ptw.l68.incl.pl1,
                                  4-10  	"   modified 03/20/81  1815.9 est Fri
                                  4-11  
                                  4-12  "
                                  4-13  "	Structure core_ptw
                                  4-14  "
                        000026    4-15  	equ	core_ptw.frame_shift,22
                        037777    4-16  	bool	core_ptw.frame_mask,037777
                        000000    4-17  	equ	core_ptw.flags,0	" LOWER
                        000016    4-18  	equ	core_ptw.add_type_shift,14
                        000017    4-19  	bool	core_ptw.add_type_mask,000017
                        020000    4-20  	bool	core_ptw.first,020000	" DL
                        010000    4-21  	bool	core_ptw.er,010000	" DL
                        002000    4-22  	bool	core_ptw.unusable1,002000	" DL
                        001000    4-23  	bool	core_ptw.phu,001000	" DL
                        000400    4-24  	bool	core_ptw.phm1,000400	" DL
                        000200    4-25  	bool	core_ptw.nypd,000200	" DL
                        000100    4-26  	bool	core_ptw.phm,000100	" DL
                        000040    4-27  	bool	core_ptw.phu1,000040	" DL
                        000020    4-28  	bool	core_ptw.wired,000020	" DL
                        000010    4-29  	bool	core_ptw.os,000010	" DL
                        000004    4-30  	bool	core_ptw.valid,000004	" DL
                        000000    4-31  	equ	core_ptw.df_no_shift,0
                        000003    4-32  	bool	core_ptw.df_no_mask,000003
                                  4-33  
                                  4-34  "
                                  4-35  "	Structure ptw
                                  4-36  "
                        000000    4-37  	equ	ptw.add,0		" UPPER
                        000000    4-38  	equ	ptw.flags,0		" LOWER
                        000016    4-39  	equ	ptw.add_type_shift,14
                        000017    4-40  	bool	ptw.add_type_mask,000017
                        020000    4-41  	bool	ptw.first,020000	" DL
                        010000    4-42  	bool	ptw.er,010000		" DL
                        002000    4-43  	bool	ptw.unusable1,002000	" DL
                        001000    4-44  	bool	ptw.phu,001000		" DL
                        000400    4-45  	bool	ptw.phm1,000400		" DL
                        000200    4-46  	bool	ptw.nypd,000200		" DL
                        000100    4-47  	bool	ptw.phm,000100		" DL
                        000040    4-48  	bool	ptw.phu1,000040		" DL
                        000020    4-49  	bool	ptw.wired,000020	" DL
                        000010    4-50  	bool	ptw.os,000010		" DL
                        000004    4-51  	bool	ptw.valid,000004	" DL
                        000000    4-52  	equ	ptw.df_no_shift,0
                        000003    4-53  	bool	ptw.df_no_mask,000003
                                  4-54  
                                  4-55       "END INCLUDE FILE ptw.l68.incl.alm
                                        "	ifend
                                   3-6  
                                   3-7  	iftarget	adp
                                        "	 include	ptw.adp
                                        "	ifend
                                  3-10  
                                  3-11  " END INCLUDE FILE ... ptw.incl.alm
                                    52  	include	scs
                                   5-1  "	BEGIN INCLUDE FILE scs.incl.alm  2/4/76 S. Webber
                                   5-2  "	Modified 80 Sep 19 by Art Beattie:  added hbound_processor_data.
                                   5-3  
                        400000     5-4  	bool	processor_data.online,400000 "DU
                        200000     5-5  	bool	processor_data.offline,200000	"DU
                        020000     5-6  	bool	processor_data.delete_cpu,020000	"DU
                        010000     5-7  	bool	processor_data.interrupt_cpu,010000	"DU
                        004000     5-8  	bool	processor_data.halted_cpu,004000	"DU
                        000007     5-9  	bool	processor_data.port_mask,000007	"DL
                        000007    5-10  	bool	hbound_processor_data,7
                                  5-11  
                                  5-12  "	END INCLUDE FILE scs.incl.alm
                                    53  	include	stack_header
                                   6-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   6-2  "
                                   6-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   6-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   6-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   6-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   6-7  
                                   6-8  " HISTORY COMMENTS:
                                   6-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  6-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  6-11  "     added the heap_header_ptr definition
                                  6-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  6-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  6-14  "     Modified to support control point management.  These changes were
                                  6-15  "     actually made in February 1985 by G. Palter.
                                  6-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  6-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  6-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  6-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  6-20  "     some space int the stack header and change the cpd_ptr unal to
                                  6-21  "     cpm_data_ptr (ITS pair).
                                  6-22  "                                                      END HISTORY COMMENTS
                                  6-23  
                        000004    6-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    6-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  6-26  
                        000010    6-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    6-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    6-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    6-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    6-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    6-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    6-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    6-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  6-35  
                        000020    6-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    6-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    6-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    6-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  6-40  
                        000030    6-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    6-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    6-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    6-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  6-45  
                        000040    6-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    6-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    6-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    6-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  6-50  
                        000050    6-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    6-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    6-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    6-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  6-55  
                        000060    6-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    6-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    6-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    6-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    6-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    6-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    6-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    6-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    6-64  	equ	stack_header_end,64			length of stack header
                                  6-65  
                                  6-66  
                                  6-67  
                                  6-68  
                        000000    6-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    6-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  6-71  
                                  6-72  "	The  following constant is an offset within the  pl1  operators table.
                                  6-73  "	It  references a  transfer vector table.
                                  6-74  
                        000551    6-75  	bool	tv_offset,551
                                  6-76  
                                  6-77  
                                  6-78  "	The  following constants are offsets within this transfer vector table.
                                  6-79  
                        001170    6-80  	equ	call_offset,tv_offset+271
                        001171    6-81  	equ	push_offset,tv_offset+272
                        001172    6-82  	equ	return_offset,tv_offset+273
                        001173    6-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    6-84  	equ	entry_offset,tv_offset+275
                                  6-85  
                                  6-86  
                                  6-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    54  
                                    55  	include	apte
                                   7-1  "	BEGIN INCLUDE FILE apte.incl.alm
                                   7-2  "
                                   7-3  "
                                   7-4  " HISTORY COMMENTS:
                                   7-5  "  1) change(86-08-09,Kissel), approve(86-08-12,MCR7479),
                                   7-6  "     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
                                   7-7  "     Added the ipc_r_offset, ipc_r_factor, and apad fields from the pl1
                                   7-8  "     include file to support async event channel wakeups.
                                   7-9  "                                                      END HISTORY COMMENTS
                                  7-10  
                        000000    7-11  	equ	apte.thread,0
                        000000    7-12  	equ	apte.fp,0			"UPPER
                        000000    7-13  	equ	apte.bp,0			"LOWER
                                  7-14  
                        000001    7-15  	equ	apte.flags,1
                        000001    7-16  	equ	apte.sentinel,1
                        400000    7-17  	bool	apte.mbz,400000		"DU
                        200000    7-18  	bool	apte.wakeup_waiting,200000	"DU
                        100000    7-19  	bool	apte.stop_pending,100000	"DU
                        040000    7-20  	bool	apte.pre_empted,040000	"DU
                        020000    7-21  	bool	apte.hproc,020000		"DU
                        010000    7-22  	bool	apte.loaded,010000		"DU
                        004000    7-23  	bool	apte.eligible,004000	"DU
                        002000    7-24  	bool	apte.idle,002000		"DU
                        001000    7-25  	bool	apte.interaction,001000	"DU
                        000400    7-26  	bool	apte.pre_empt_pending,000400	"DU
                        000200    7-27  	bool	apte.default_procs_required,000200 "DU
                        000100    7-28  	bool	apte.realtime_burst,000100	"DU
                        000040    7-29  	bool	apte.always_loaded,000040	"DU
                        000020    7-30  	bool	apte.dbr_loaded,000020	"DU
                        000010    7-31  	bool	apte.being_loaded,000010	"DU
                        000004    7-32  	bool	apte.shared_stack_0,000004	"DU
                        000002    7-33  	bool	apte.page_wait_flag,000002	"DU
                        000001    7-34  	bool	apte.firstsw,000001		"DU
                        000001    7-35  	equ	apte.state,1		"LOWER
                                  7-36  
                        000002    7-37  	equ	apte.page_faults,2
                                  7-38  
                        000003    7-39  	equ	apte.processid,3
                                  7-40  
                        000004    7-41  	equ	apte.te,4
                                  7-42  
                        000005    7-43  	equ	apte.ts,5
                                  7-44  
                        000006    7-45  	equ	apte.ti,6
                                  7-46  
                        000007    7-47  	equ	apte.timax,7
                                  7-48  
                        000010    7-49  	equ	apte.ipc_pointers,8
                        000010    7-50  	equ	apte.event_thread,8		"UPPER
                                  7-51  
                        000011    7-52  	equ	apte.ips_message,9
                                  7-53  
                        000012    7-54  	equ	apte.asteps,10
                        000012    7-55  	equ	apte.pds,10		"UPPER
                        000012    7-56  	equ	apte.dseg,10		"LOWER
                                  7-57  
                        000013    7-58  	equ	apte.prds,11		"UPPER
                        000013    7-59  	equ	apte.savex7,11		"LOWER
                                  7-60  
                        000014    7-61  	equ	apte.term_processid,12
                                  7-62  
                        000015    7-63  	equ	apte.lock_id,13
                        000016    7-64  	equ	apte.time_used_clock,14
                                  7-65  
                        000020    7-66  	equ	apte.wait_event,16
                                  7-67  
                        000021    7-68  	equ	apte.wct_index,17		"UPPER
                        000021    7-69  	equ	apte.flags2,17		"LOWER
                        400000    7-70  	bool	apte.prior_sched,400000	"DL
                        000023    7-71  	equ	apte.chans_offset,19
                        374000    7-72  	bool	apte.special_chans,374000	"DL
                        000021    7-73  	equ	apte.batch_word,17
                        000010    7-74  	bool	apte.batch,000010		"DL
                        000007    7-75  	bool	apte.pr_tag_mask,000007
                                  7-76  
                        000022    7-77  	equ	apte.state_change_time,18
                                  7-78  
                        000024    7-79  	equ	apte.alarm_event,20
                                  7-80  
                        000026    7-81  	equ	apte.alarm_time_thread,22	"UPPER
                        000026    7-82  	equ	apte.alarm_time,22
                                  7-83  
                        000030    7-84  	equ	apte.term_channel,24
                                  7-85  
                        000032    7-86  	equ	apte.ws_size,26
                                  7-87  
                        000033    7-88  	equ	apte.temax,27
                                  7-89  
                        000034    7-90  	equ	apte.deadline,28
                                  7-91  
                        000036    7-92  	equ	apte.lock,30
                                  7-93  
                        000037    7-94  	equ	apte.cpu_monitor,31		units = 1/1024 sec
                                  7-95  
                        000040    7-96  	equ	apte.paging_measure,32
                                  7-97  
                        000042    7-98  	equ	apte.access_authorization,34 	"DOUBLE WORD
                        400000    7-99  	bool	apte.no_ipc_check,400000	"DL
                                 7-100  
                        000044   7-101  	equ	apte.dbr,36
                                 7-102  
                        000046   7-103  	equ	apte.virtual_cpu_time,38
                                 7-104  
                        000050   7-105  	equ	apte.ittes_sent,40
                        000051   7-106  	equ	apte.ittes_got,41
                                 7-107  
                        000052   7-108  	equ	apte.current_response_state,42	" DU
                        000053   7-109  	equ	apte.number_processing,43
                        000054   7-110  	equ	apte.last_response_state_time,44
                        000056   7-111  	equ	apte.total_processing_time,46
                        000060   7-112  	equ	apte.begin_interaction_vcpu,48
                                 7-113  
                        000062   7-114  	equ	apte.saved_temax,50
                        000063   7-115  	equ	apte.procs_required,51
                        776000   7-116  	bool	apte.procs_required_mask,776000	" DU
                                 7-117  
                        000064   7-118  	equ	apte.ipc_r_offset,52
                        000065   7-119  	equ	apte.ipc_r_factor,53
                        000066   7-120  	equ	apte.apad,54
                                 7-121  
                        000100   7-122  	equ	size_of_apt_entry,64
                                 7-123  
                                 7-124  "	MISC OLD DCLS.
                                 7-125  
                        000013   7-126  	equ	apte.le_shift,11
                        000175   7-127  	bool	apte.timer_factor,175
                                 7-128  
                                 7-129  
                                 7-130  "
                                 7-131  "	END INCLUDE FILE apte.incl.alm
                                 7-132  "
                                    56  	include	state_equs
                                   8-1  "	BEGIN INCLUDE FILE state_equs.incl.alm
                                   8-2  
                        000000     8-3  	equ	empty,0
                        000001     8-4  	equ	running,1
                        000002     8-5  	equ	ready,2
                        000003     8-6  	equ	waiting,3
                        000004     8-7  	equ	blocked,4
                        000005     8-8  	equ	stopped,5
                        000006     8-9  	equ	ptlocking,6
                                  8-10  
                                  8-11  "	END INCLUDE FILE state_equs.incl.alm
                                    57  
                                    58  	include	stack_frame
                                   9-1  "
                                   9-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   9-3  "
                                   9-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   9-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   9-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   9-7  "
                        000020     9-8  	equ	stack_frame.prev_sp,16
                        000020     9-9  	equ	stack_frame.condition_word,16
                        000022    9-10  	equ	stack_frame.next_sp,18
                        000022    9-11  	equ	stack_frame.signaller_word,18
                        000024    9-12  	equ	stack_frame.return_ptr,20
                        000026    9-13  	equ	stack_frame.entry_ptr,22
                        000030    9-14  	equ	stack_frame.operator_ptr,24
                        000030    9-15  	equ	stack_frame.lp_ptr,24
                        000032    9-16  	equ	stack_frame.arg_ptr,26
                        000034    9-17  	equ	stack_frame.static_ptr,28
                        000035    9-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    9-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    9-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    9-21  	equ	stack_frame.translator_id,31
                        000040    9-22  	equ	stack_frame.regs,32
                        000060    9-23  	equ	stack_frame.min_length,48
                        000020    9-24  	equ	stack_frame.flag_word,16
                        020000    9-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    9-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    9-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    9-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    9-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    9-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    9-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    9-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  9-33  
                                  9-34  "
                                  9-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  9-36  "
                                    59  
                                    60  	include	sst
                                  10-1  
                                  10-2  
                                  10-3       "BEGIN INCLUDE FILE sst.incl.alm
                                  10-4  
                                  10-5  
                                  10-6  	"Created 01/14/85  1523.7 est Mon by convert_include_file,
                                  10-7  	"   Version of 01/09/85  0954.4 est Wed.
                                  10-8  
                                  10-9  	"Made from >Pool>m>loe>incl>sst.incl.pl1,
                                 10-10  	"   modified 01/09/85  1148.3 est Wed
                                 10-11  
                                 10-12  "
                                 10-13  "	Structure sst
                                 10-14  "
                        001000   10-15  	equ	sst_size,512
                                 10-16  
                                 10-17  
                        000000   10-18  	equ	sst.space,0
                        000010   10-19  	equ	sst.pre_page_time,8		" DOUBLE
                        000012   10-20  	equ	sst.post_purge_time,10	" DOUBLE
                        000014   10-21  	equ	sst.post_in_core,12
                        000015   10-22  	equ	sst.thrashing,13
                        000016   10-23  	equ	sst.npfs_misses,14
                        000017   10-24  	equ	sst.salv,15
                        000020   10-25  	equ	sst.ptl,16
                        000021   10-26  	equ	sst.astl,17
                        000022   10-27  	equ	sst.astl_event,18
                                 10-28  
                        000023   10-29  	equ	sst.astl_notify_requested_word,19
                        400000   10-30  	bool	sst.astl_notify_requested,400000 " DU
                                 10-31  
                        000024   10-32  	equ	sst.nused,20
                        000025   10-33  	equ	sst.ptwbase,21
                        000026   10-34  	equ	sst.tfreep,22
                        000030   10-35  	equ	sst.astap,24
                        000032   10-36  	equ	sst.ptl_wait_ct,26
                        000033   10-37  	equ	sst.astsize,27
                        000034   10-38  	equ	sst.cmesize,28
                        000036   10-39  	equ	sst.root_astep,30
                        000040   10-40  	equ	sst.pts,32
                        000044   10-41  	equ	sst.level,36		" LEVEL 2
                                 10-42  
                        000044   10-43  	equ	sst.ausedp,36		" UPPER
                        000044   10-44  	equ	sst.no_aste,36		" LOWER
                                 10-45  
                        000050   10-46  	equ	sst.atempp,40		" UPPER
                        000050   10-47  	equ	sst.atempp1,40		" LOWER
                                 10-48  
                        000051   10-49  	equ	sst.dm_enabled_word,41
                        400000   10-50  	bool	sst.dm_enabled,400000	" DU
                                 10-51  
                        000052   10-52  	equ	sst.ainitp,42		" UPPER
                        000052   10-53  	equ	sst.ainitp1,42		" LOWER
                                 10-54  
                        000053   10-55  	equ	sst.strsize,43
                        000054   10-56  	equ	sst.cmp,44
                                 10-57  
                        000056   10-58  	equ	sst.usedp,46		" UPPER
                                 10-59  
                        000057   10-60  	equ	sst.wtct,47
                                 10-61  
                        000060   10-62  	equ	sst.startp,48		" UPPER
                                 10-63  
                        000061   10-64  	equ	sst.removep,49		" UPPER
                                 10-65  
                        000062   10-66  	equ	sst.double_write,50
                        000063   10-67  	equ	sst.temp_w_event,51
                        000064   10-68  	equ	sst.root_pvtx,52
                                 10-69  
                        000065   10-70  	equ	sst.nolock_word,53
                        400000   10-71  	bool	sst.nolock,400000		" DU
                                 10-72  
                        000066   10-73  	equ	sst.fc_skips_pinned,54
                        000067   10-74  	equ	sst.cl_skips_pinned,55
                        000070   10-75  	equ	sst.ast_ht_ptr,56
                        000072   10-76  	equ	sst.ast_ht_n_buckets,58
                        000073   10-77  	equ	sst.ast_ht_uid_mask,59
                        000074   10-78  	equ	sst.meter_ast_locking,60
                        000075   10-79  	equ	sst.checksum_filemap,61
                        000076   10-80  	equ	sst.page_read_errors,62
                        000077   10-81  	equ	sst.page_write_errors,63
                        000100   10-82  	equ	sst.cycle_pv_allocation,64
                        000101   10-83  	equ	sst.n_trailers,65
                        000102   10-84  	equ	sst.synch_activations,66
                        000103   10-85  	equ	sst.synch_skips,67
                        000104   10-86  	equ	sst.lock_waits,68
                        000105   10-87  	equ	sst.total_locks_set,69
                        000106   10-88  	equ	sst.pdir_page_faults,70
                        000107   10-89  	equ	sst.level_1_page_faults,71
                        000110   10-90  	equ	sst.dir_page_faults,72
                        000111   10-91  	equ	sst.ring_0_page_faults,73
                        000112   10-92  	equ	sst.rqover,74
                        000113   10-93  	equ	sst.pc_io_waits,75
                        000114   10-94  	equ	sst.steps,76
                        000115   10-95  	equ	sst.needc,77
                        000116   10-96  	equ	sst.ceiling,78
                        000117   10-97  	equ	sst.ctwait,79
                        000120   10-98  	equ	sst.wired,80
                        000121   10-99  	equ	sst.laps,81
                        000122  10-100  	equ	sst.skipw,82
                        000123  10-101  	equ	sst.skipu,83
                        000124  10-102  	equ	sst.skipm,84
                        000125  10-103  	equ	sst.skipos,85
                        000126  10-104  	equ	sst.aused,86
                        000127  10-105  	equ	sst.damaged_ct,87
                        000130  10-106  	equ	sst.deact_count,88
                        000131  10-107  	equ	sst.demand_deact_attempts,89
                        000132  10-108  	equ	sst.demand_deactivations,90
                        000133  10-109  	equ	sst.reads,91
                        000143  10-110  	equ	sst.writes,99
                        000153  10-111  	equ	sst.short_pf_count,107
                        000154  10-112  	equ	sst.loop_locks,108
                        000156  10-113  	equ	sst.loop_lock_time,110	" DOUBLE
                        000160  10-114  	equ	sst.cpu_sf_time,112		" DOUBLE
                        000162  10-115  	equ	sst.total_sf_pf,114
                        000163  10-116  	equ	sst.total_sf,115
                        000164  10-117  	equ	sst.pre_page_size,116
                        000165  10-118  	equ	sst.post_list_size,117
                        000166  10-119  	equ	sst.post_purgings,118
                        000167  10-120  	equ	sst.post_purge_calls,119
                        000170  10-121  	equ	sst.pre_page_calls,120
                        000171  10-122  	equ	sst.pre_page_list_size,121
                        000172  10-123  	equ	sst.pre_page_misses,122
                        000173  10-124  	equ	sst.pre_pagings,123
                        000174  10-125  	equ	sst.wire_proc_data,124	" DOUBLE
                        000214  10-126  	equ	sst.abs_wired_count,140
                        000215  10-127  	equ	sst.system_type,141
                        000216  10-128  	equ	sst.wired_copies,142
                        000217  10-129  	equ	sst.recopies,143
                        000220  10-130  	equ	sst.first_core_block,144
                        000221  10-131  	equ	sst.last_core_block,145
                        000222  10-132  	equ	sst.fw_retries,146
                        000223  10-133  	equ	sst.pvhtp,147
                        000224  10-134  	equ	sst.askipsize,148
                        000230  10-135  	equ	sst.aneedsize,152
                        000234  10-136  	equ	sst.stepsa,156
                        000235  10-137  	equ	sst.askipsehs,157
                        000236  10-138  	equ	sst.asearches,158
                        000237  10-139  	equ	sst.askipslevel,159
                        000240  10-140  	equ	sst.askipsinit,160
                        000241  10-141  	equ	sst.acost,161
                        000242  10-142  	equ	sst.askipslock,162
                        000243  10-143  	equ	sst.askipdius,163
                        000244  10-144  	equ	sst.alaps,164
                        000245  10-145  	equ	sst.updates,165
                        000246  10-146  	equ	sst.setfaults_all,166
                        000247  10-147  	equ	sst.setfaults_acc,167
                        000250  10-148  	equ	sst.total_bf,168
                        000251  10-149  	equ	sst.total_bf_pf,169
                        000252  10-150  	equ	sst.cpu_bf_time,170		" DOUBLE
                        000254  10-151  	equ	sst.asteps,172
                        000260  10-152  	equ	sst.ast_locked_at_time,176	" DOUBLE
                        000262  10-153  	equ	sst.ast_locked_total_time,178	" DOUBLE
                        000264  10-154  	equ	sst.ast_lock_wait_time,180	" DOUBLE
                        000266  10-155  	equ	sst.ast_locking_count,182
                        000267  10-156  	equ	sst.cleanup_count,183
                        000270  10-157  	equ	sst.cleanup_real_time,184	" DOUBLE
                        000272  10-158  	equ	sst.tree_count,186
                        000372  10-159  	equ	sst.pp_meters,250
                                10-160  
                        000472  10-161  	equ	sst.wusedp,314		" UPPER
                                10-162  
                        000473  10-163  	equ	sst.write_hunts,315
                        000474  10-164  	equ	sst.claim_skip_cme,316
                        000475  10-165  	equ	sst.claim_skip_free,317
                        000476  10-166  	equ	sst.claim_notmod,318
                        000477  10-167  	equ	sst.claim_passed_used,319
                        000500  10-168  	equ	sst.claim_skip_ptw,320
                        000501  10-169  	equ	sst.claim_writes,321
                        000502  10-170  	equ	sst.claim_steps,322
                        000503  10-171  	equ	sst.pre_seeks_failed,323
                        000504  10-172  	equ	sst.resurrections,324
                        000505  10-173  	equ	sst.volmap_seg_page_faults,325
                        000506  10-174  	equ	sst.oopv,326
                        000507  10-175  	equ	sst.dblw_resurrections,327
                        000510  10-176  	equ	sst.sgm_time,328		" DOUBLE
                        000512  10-177  	equ	sst.sgm_pf,330
                        000513  10-178  	equ	sst.bad_sgms,331
                        000514  10-179  	equ	sst.sgm_sgft,332
                        000515  10-180  	equ	sst.good_sgms,333
                        000516  10-181  	equ	sst.claim_runs,334
                        000517  10-182  	equ	sst.activations,335
                        000520  10-183  	equ	sst.dir_activations,336
                        000521  10-184  	equ	sst.hedge_updatevs,337
                        000522  10-185  	equ	sst.hedge_writes,338
                        000523  10-186  	equ	sst.evict_recover_data,339	" LEVEL 2
                                10-187  
                        000523  10-188  	equ	sst.evict_ptp,339		" UPPER
                        000523  10-189  	equ	sst.evict_phmbit,339	" LOWER
                                10-190  
                        000524  10-191  	equ	sst.force_swrites,340
                        000525  10-192  	equ	sst.force_pwrites,341
                        000526  10-193  	equ	sst.fw_none,342
                        000527  10-194  	equ	sst.force_updatevs,343
                        000530  10-195  	equ	sst.pf_unlock_ptl_time,344	" DOUBLE
                        000532  10-196  	equ	sst.pf_unlock_ptl_meterings,346
                        000533  10-197  	equ	sst.makeknown_activations,347
                        000534  10-198  	equ	sst.backup_activations,348
                        000535  10-199  	equ	sst.metering_flags,349	" LEVEL 2
                                10-200  
                        400000  10-201  	bool	sst.activate_activated,400000	" DU
                                10-202  
                        000536  10-203  	equ	sst.seg_fault_calls,350
                        000537  10-204  	equ	sst.stk_truncate_should_didnt,351
                        000540  10-205  	equ	sst.stk_truncate_should_did,352
                        000541  10-206  	equ	sst.stk_truncate_shouldnt_didnt,353
                        000542  10-207  	equ	sst.stk_truncate_shouldnt_did,354
                        000543  10-208  	equ	sst.stk_pages_truncated,355
                        000544  10-209  	equ	sst.stk_pages_truncated_in_core,356
                        000545  10-210  	equ	sst.segmove_lock,357	" LEVEL 2
                                10-211  
                        000545  10-212  	equ	sst.pid,357
                        000546  10-213  	equ	sst.event,358
                                10-214  
                        000547  10-215  	equ	sst.notify_word,359
                        400000  10-216  	bool	sst.notify,400000		" DU
                                10-217  
                        000550  10-218  	equ	sst.segmove_io_limit,360
                        000551  10-219  	equ	sst.segmove_found_synch,361
                        000552  10-220  	equ	sst.segmove_synch_disappeared,362
                        000553  10-221  	equ	sst.segmove_n_reads,363
                        000554  10-222  	equ	sst.segmove_max_tries,364
                        000555  10-223  	equ	sst.segmove_astep,365
                        000556  10-224  	equ	sst.segmove_pvtx,366
                        000557  10-225  	equ	sst.segmove_vtocx,367
                        000560  10-226  	equ	sst.segmove_old_addr_astep,368
                        000561  10-227  	equ	sst.segmove_new_addr_astep,369
                        000562  10-228  	equ	sst.mod_during_write,370
                        000563  10-229  	equ	sst.zero_pages,371
                        000564  10-230  	equ	sst.trace_sw,372		" LEVEL 2
                                10-231  
                        000010  10-232  	bool	sst.pc_trace_pf,000010	" DL
                        000004  10-233  	bool	sst.tty_trace,000004	" DL
                        000002  10-234  	bool	sst.pc_trace,000002		" DL
                        000001  10-235  	bool	sst.sc_trace,000001		" DL
                                10-236  
                        000565  10-237  	equ	sst.new_pages,373
                                10-238  
                        000566  10-239  	equ	sst.ast_track_word,374
                        400000  10-240  	bool	sst.ast_track,400000	" DU
                                10-241  
                        000567  10-242  	equ	sst.dirlock_writebehind,375
                        000570  10-243  	equ	sst.write_limit,376
                                10-244  
                        000571  10-245  	equ	sst.crash_test_segmove_word,377
                        400000  10-246  	bool	sst.crash_test_segmove,400000	" DU
                                10-247  
                        000572  10-248  	equ	sst.delayed_seg_state_chg,378
                        000573  10-249  	equ	sst.audit_seg_state_chg,379
                        000574  10-250  	equ	sst.seg_state_chg_delay,380	" DOUBLE
                        000576  10-251  	equ	sst.seg_state_change_limit,382
                        000577  10-252  	equ	sst.max_seg_state_change_bw,383
                        000600  10-253  	equ	sst.audit_seg_state_change_bw,384
                        000601  10-254  	equ	sst.seg_state_chg_operation,385
                                10-255  
                                10-256       "END INCLUDE FILE sst.incl.alm
                                    61  
                                    62  	include	unpaged_page_tables
                                  11-1  
                                  11-2  
                                  11-3       "BEGIN INCLUDE FILE unpaged_page_tables.incl.alm
                                  11-4  
                                  11-5  
                                  11-6  	"Created 03/01/84  1645.1 est Thu by convert_include_file,
                                  11-7  	"   Version of 11/07/82  1445.1 est Sun.
                                  11-8  
                                  11-9  	"Made from >bootload>update>incl>unpaged_page_tables.incl.pl1,
                                 11-10  	"   modified 03/01/84  1645.1 est Thu
                                 11-11  
                                 11-12  "
                                 11-13  "	Structure upt
                                 11-14  "
                                 11-15  
                        000000   11-16  	equ	upt.sst_absloc,0
                        000001   11-17  	equ	upt.sst_last_loc,1
                        000002   11-18  	equ	upt.upt_absloc,2
                        000003   11-19  	equ	upt.upt_last_loc,3
                        000004   11-20  	equ	upt.iupt_absloc,4
                        000005   11-21  	equ	upt.iupt_last_loc,5
                        000006   11-22  	equ	upt.current_length,6
                        000007   11-23  	equ	upt.max_length,7
                        000010   11-24  	equ	upt.first_entry,8		" LEVEL 2
                                 11-25  
                                 11-26  
                                 11-27  "
                                 11-28  "	Structure upt_entry
                                 11-29  "
                        000000   11-30  	equ	upt_entry.size,0
                        000001   11-31  	equ	upt_entry.segno,1
                        000002   11-32  	equ	upt_entry.ptws,2
                                 11-33  
                                 11-34       "END INCLUDE FILE unpaged_page_tables.incl.alm
                        000000      63  	equ	bsmbx,0
                                    64  
                                    65  	tempd	arglist(2)	argument list
                                    66  	tempd	temp_ptr		temporary pointer
                                    67  
                                    68  
                                    69  
                                    70  
                                    71  
                                    72  "
                                    73  "
    000000                          74  	inhibit	on		<+><+><+><+><+><+><+><+><+><+><+><+>
                                    75  
    000000  aa   000210 3702 24     76  entry:	epplp	lp-*,ic*		get linkage pointer
    000001  aa   000211 3506 24     77  	epbpap	pp-*,ic*		get procedure segno
    000002  aa  0 00003 7103 00     78  	tra	ap|*+1		enter appending mode
                                    79  
                                    80  " Disable the traffic controller and indicate
                                    81  " system is in the throes of a shutdown.
                                    82  
    000003  4a  4 00010 4503 20     83  	stz	tc_data$wait_enable	turn OFF multiprogramming
    000004  aa   000001 3352 07     84  	lca	1,dl
    000005  4a  4 00012 7553 20     85  	sta	tc_data$apt_lock	unlock the APT
    000006  4a  4 00014 5543 20     86  	stc1	tc_data$metering_lock  unlock metering lock
    000007  4a  4 00016 3523 20     87  	eppbp	tc_data$apt	unlock APTEs
    000010  4a  4 00020 7213 20     88  	lxl1	tc_data$apt_size
    000011  aa   777777 6212 11     89  ul_apte:	eax1	-1,1
    000012  0a   000016 6042 00     90  	tmi	ul_apte_done
    000013  aa  2 00036 5543 00     91  	stc1	bp|apte.lock
    000014  aa  2 00100 3523 00     92  	eppbp	bp|size_of_apt_entry
    000015  0a   000011 7102 00     93  	tra	ul_apte
    000016                          94  ul_apte_done:
    000016  4a  4 00022 5543 20     95  	stc1	tc_data$system_shutdown  for simplified actions
                                    96  
                                    97  " We have only one processor running (we hope!) so
                                    98  " must tell the system before any page faults cause connect
                                    99  
    000017  4a  4 00024 2353 20    100  	lda	prds$processor_pattern  use the processor we were returned on
    000020  4a  4 00026 7553 20    101  	sta	scs$processor	and no others
    000021  4a  4 00030 4503 20    102  	stz	scs$connect_lock	undo connect lock
    000022  4a  4 00032 4503 20    103  	stz	scs$cam_wait	undo cam wait flags
    000023  4a  4 00034 4503 20    104  	stz	scs$sys_trouble_pending  undo sys trouble cells
    000024  4a  4 00036 4503 20    105  	stz	scs$trouble_flags	..
    000025  4a  4 00040 4503 20    106  	stz	scs$bos_restart_flags  ..
                                   107  
                                   108  " Set this processor as the BOS processor, and set up the SCS appropriately
                                   109  " Since BOS came here, we have an interrupt mask.
                                   110  
    000026  4a  4 00042 7213 20    111  	lxl1	prds$processor_tag	needed for masking, etc.
    000027  4a  4 00044 4413 20    112  	sxl1	scs$bos_processor_tag	We can now RTB
    000030  4a  4 00046 7203 20    113  	lxl0	scs$interrupt_controller	Bootload SCU number
    000031  4a  4 00050 3517 20    114  	eppab	scs$port_addressing_word,x0	ab -> word containing port number for Bootload SCU
    000032  4a  4 00052 5413 20    115  	sprpab	scs$mask_ptr,x1		Set mask pointer this CPU
    000033  0a   000220 2352 00    116  	lda	rmcm_instruction
    000034  4a  4 00054 7553 20    117  	sta	scs$read_mask,x1		Set RMCM instruction
    000035  0a   000221 2352 00    118  	lda	smcm_instruction
    000036  4a  4 00056 7553 20    119  	sta	scs$set_mask,x1		Set SMCM instruction
                                   120  
                                   121  " Mask down to sys_level.  No interrupts may be taken now.
                                   122  
    000037  4a  4 00060 2373 20    123  	ldaq	scs$sys_level	mask down
    000040  4a  4 00052 7613 20    124  	lprpab	scs$mask_ptr,1
    000041  4a  4 00056 7163 20    125  	xec	scs$set_mask,1
                                   126  
                                   127  
                                   128  " 
                                   129  
                                   130  " Now switch to the idle process for this processor
                                   131  
    000042  4a  4 00062 7623 20    132  	lprpbp	scs$idle_aptep,1
    000043  aa  2 00044 2323 00    133  	ldbr	bp|apte.dbr	note that prds is already good
                                   134  
                                   135  " Now turn ON delete_cpu for all other processor in case they start up
                                   136  
    000044  aa   000003 2352 07    137  	lda	3,dl		start with last CPU tag
    000045  aa   020000 2362 03    138  	ldq	processor_data.delete_cpu,du
    000046                         139  on_loop:
    000046  4a  4 00042 1153 20    140  	cmpa	prds$processor_tag	skip our own
    000047  0a   000051 6002 00    141  	tze	skip_ours
    000050  4a  4 00064 2563 20    142  	orsq	scs$processor_data,al  turn ON bit
    000051  aa   000001 1352 07    143  skip_ours:sbla	1,dl
    000052  0a   000046 6052 00    144  	tpl	on_loop
                                   145  
                                   146  
                                   147  
                                   148  " 
                                   149  
                                   150  " Establish stack frame at base of PRDS.
                                   151  
    000053  4a  4 00066 3723 20    152  	eppsp	prds$+stack_header.stack_begin_ptr,*
    000054  aa  6 00000 3733 00    153  	epbpsb	sp|0		generate pointer to base of stack
    000055  0a   000216 2272 00    154  	ldx7	push		get size of stack frame in X7
    000056  aa  6 00000 3503 17    155  	eppap	sp|0,7		next SP
    000057  aa  6 00022 2503 00    156  	spriap	sp|stack_frame.next_sp
    000060  aa  7 00024 2503 00    157  	spriap	sb|stack_header.stack_end_ptr
    000061  0a   000214 2372 00    158  	ldaq	null		null last SP
    000062  aa  6 00020 7573 00    159  	staq	sp|stack_frame.prev_sp
                                   160  
                                   161  " Reset locks and switches to allow smooth shutdown.
                                   162  
    000063  4a  4 00070 4503 20    163  	stz	sst_seg$+sst.astl	unlock the global AST lock
    000064  4a  4 00072 4503 20    164  	stz	scs$reconfig_lock	undo the reconfiguration lock
                                   165  
                                   166  " Call  ocdcm_$esd_reset to reset the oc_data  and  syserr_real$syserr_reset to
                                   167  " reset the  log_data.
                                   168  
    000065  4a  4 00074 3523 20    169  	eppbp	syserr_real$syserr_reset
    000066  aa  6 00050 4503 00    170  	stz	arglist
    000067  aa  6 00051 4503 00    171  	stz	arglist+1
    000070  0a   000200 7072 00    172  	tsx7	call_out
                                   173  
    000071  4a  4 00076 3523 20    174  	eppbp	ocdcm_$esd_reset
    000072  0a   000200 7072 00    175  	tsx7	call_out
                                   176  
                                   177  
                                   178  " RESET IOM_MANAGER. Clear out any pending iom status.
                                   179  
    000073  0a   000222 3522 00    180  	eppbp	=1		bp -> constant 1
    000074  aa  6 00052 2523 00    181  	spribp	arglist+2		set argument list
    000075  aa   004000 4312 07    182  	fld	=1b24,dl		set argument list header
    000076  aa   000004 2752 07    183  	ora	=o4,dl		..
    000077  aa  6 00050 7573 00    184  	staq	arglist		..
                                   185  
    000100  4a  4 00100 3523 20    186  	eppbp	io_manager$reset	bp -> iom_manager$iom_reset entry
    000101  0a   000200 7072 00    187  	tsx7	call_out		make the call
                                   188  
    000102  4a  4 00102 3523 20    189  	eppbp	page$esd_reset	reset paging dims
    000103  0a   000200 7072 00    190  	tsx7	call_out
                                   191  
    000104  4a  4 00104 3523 20    192  	eppbp	pc_recover_sst$pc_recover_sst	recompute page control state.
    000105  0a   000200 7072 00    193  	tsx7	call_out
                                   194  
    000106  4a  4 00106 3523 20    195  	eppbp	page$time_out
    000107  0a   000200 7072 00    196  	tsx7	call_out
                                   197  
    000110  4a  4 00110 3523 20    198  	eppbp	disk_emergency$test_all_drives_masked
    000111  0a   000200 7072 00    199  	tsx7	call_out
                                   200  " 
                                   201  
                                   202  " Abandon the prds and use some reasonable stack.
                                   203  
    000112  4a  4 00112 2373 20    204  	ldaq	prds$+stack_header.stack_begin_ptr
    000113  4a  4 00114 7573 20    205  	staq	prds$+stack_header.stack_end_ptr
                                   206  
    000114  0a   000224 3722 20    207  	eppsp	=its(-1,1),*	This just keeps page faults from crashing
                                   208  
                                   209  " Now get ourselves a PDS to work with. We will use the template_pds by copying
                                   210  " our header into it, wiring the first page, and then placing the SDW for template_pds
                                   211  " in the slot for PDS.
                                   212  
    000115  4a  4 00116 2133 20    213  	epaq	template_pds$+0	get segno of template_pds
    000116  aa   000001 7352 00    214  	als	1		times 2 for DSEG index
    000117  aa   000000 6202 01    215  	eax0	0,au		save for later
    000120  4a  4 00120 2353 20    216  	lda	dseg$+0,au	pick up SDW for template_pds
    000121  aa   000014 7712 00    217  	arl	sdw.add_shift	adjust page table address
    000122  4a  4 00122 1353 20    218  	sbla	sst$+sst.ptwbase	convert to SST offset
    000123  aa   000020 2362 07    219  	ldq	ptw.wired,dl	turn wired bit ON in the first PTW
    000124  4a  4 00124 2563 20    220  	orsq	sst$+0,al		..
                                   221  
                                   222  " Now touch the page, causing a page fault (probably)
                                   223  
    000125  4a  4 00116 2343 20    224  	szn	template_pds$+0	PAGE FAULT (I HOPE IT WORKS)
                                   225  
    000126  4a  4 00126 2133 20    226  	epaq	pds$+0		get segment number of PDS
    000127  aa   000001 7352 00    227  	als	1		times 2 for DSEG index
    000130  aa   000000 6212 01    228  	eax1	0,au		save for later
                                   229  
    000131  4a  4 00130 2353 20    230  	lda	dseg$+sdw.bound_word,x1 " Get bound from SDW
    000132  aa   000025 7712 00    231  	arl	sdw.bound_shift
    000133  aa   037777 3752 07    232  	ana	sdw.bound_mask,dl	" Mask it off
    000134  aa   000001 0352 07    233  	adla	1,dl		" Add one to convert to 16 word blocks
    000135  aa   000030 7352 00    234  	als	18+4+2		" And convert to a character count, in AU
                                   235  
    000136  4a  4 00126 3523 20    236  	eppbp	pds$		get pointers to data to move
    000137  4a  4 00116 3537 20    237  	eppbb	template_pds$+0	..
    000140  aa  0 00140 1007 40    238  	mlr	(pr,rl),(pr,rl),fill(0)
    000141  aa   200000 000001     239  	desc9a	bp|0,au
    000142  aa   300000 000001     240  	desc9a	bb|0,au
                                   241  
    000143  4a  4 00132 2373 20    242  	ldaq	dseg$,0		now move the SDW
    000144  4a  4 00134 7573 20    243  	staq	dseg$,1		..
    000145  aa   000000 5322 00    244  	cams
    000146  aa   000000 5326 00    245  	camp
                                   246  
                                   247  
                                   248  "
                                   249  "	Use initialization stack.
                                   250  "
                                   251  "	"From dust to dust....
                                   252  "
    000147  4a  4 00136 3737 20    253  	eppsb	inzr_stk0$
    000150  aa  7 00000 2133 00    254  	epaq	sb|0
    000151  aa   000001 7352 00    255  	als	1
    000152  4a  4 00140 6537 20    256  	sprisb	pds$stack_0_ptr
    000153  4a  4 00120 3523 20    257  	eppbp	dseg$,au
    000154  4a  4 00142 2523 20    258  	spribp	pds$stack_0_sdwp
                                   259  
                                   260  "	Re-init the stack end pointer.
                                   261  "
    000155  aa  7 00200 3723 00    262  	eppsp	sb|128
    000156  aa  7 00022 6523 00    263  	sprisp	sb|stack_header.stack_begin_ptr
    000157  aa  7 00024 6523 00    264  	sprisp	sb|stack_header.stack_end_ptr
                                   265  
                                   266  "	Make sure none of the pages of the stack are wired now,
                                   267  "	just so pmut will understand the starting state.
                                   268  
    000160  aa  2 00000 2353 00    269  	lda	bp|0		get the first word of the SDW
    000161  aa   000014 7712 00    270  	arl	sdw.add_shift	shift to leave the address
    000162  4a  4 00144 1153 20    271  	cmpa	unpaged_page_tables$0+upt.sst_last_loc	page table out of sst
    000163  0a   000177 6056 00    272  	tpnz	unpaged			=> unpaged
    000164  4a  4 00146 1353 20    273  	sbla	unpaged_page_tables$0+upt.sst_absloc	offset SDW addr in SST
    000165  0a   000177 6042 00    274  	tmi	unpaged
                                   275  
    000166  4a  4 00150 3537 20    276  	eppbb	sst$		get ptr to SST
    000167  aa  3 00000 3537 05    277  	eppbb	bb|0,al		bb -> PTW's of stack
                                   278  
    000170  aa   000021 3352 07    279  	lca	ptw.wired+1,dl	form mask to reset wired bits
                                   280  
    000171  aa  2 00001 2363 00    281  	ldq	bp|1		get bound field from stack SDW
    000172  aa   000011 7722 00    282  	qrl	9		shift to get number of PTW's - 1
    000173  aa   000000 6202 02    283  	eax0	0,qu		put into X0 for loop count
                                   284  
    000174  aa  3 00000 3553 10    285  uw_loop:	ansa	bb|0,0		mask out ptw.wired
    000175  aa   777777 6202 10    286  	eax0	-1,0		count
    000176  0a   000174 6052 00    287  	tpl	uw_loop		process all PTW's (about 16?)
                                   288  
    000177  4a  4 00152 7103 20    289  unpaged:	tra	wired_shutdown$wired_emergency
                                   290  
                                   291  " 
                                   292  
                                   293  " All calls out are made by this subroutine.
                                   294  
    000200                         295  call_out:
    000200  aa  6 00000 2543 00    296  	call	bp|0(arglist)	make the call
    000201  aa  6 00050 3503 00
    000202  aa  2 00000 3523 00
    000203  aa  6 00040 7533 00
    000204  aa  7 00036 6703 20
    000205  aa  6 00000 1733 00
    000206  aa  6 00040 0733 00
                                   297  
    000207  aa   000000 7102 17    298  	tra	0,7		and return to caller
                                   299  
                                   300  
                                   301  " 
                                   302  
                                   303  " Storage & constants.
                                   304  
                                   305  	even
    000210  aa   000000 000043     306  lp:	its	0,0		somebody must set these.
    000211  aa   000000 000000 
    000212  aa   000000 000043     307  pp:	its	0,0
    000213  aa   000000 000000 
    000214  aa   077777 000043     308  null:	its	-1,1
    000215  aa   000001 000000 
                                   309  
    000216  aa   000060 6272 00    310  push:	push			" to get stack frame size
    000217  aa  7 00040 2723 20
                                   311  
    000220                         312  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
                                   313  
    000220                         314  rmcm_instruction:
    000220  aa  1 00000 2333 20    315  	rmcm	ab|0,*
    000221                         316  smcm_instruction:
    000221  aa  1 00000 5533 20    317  	smcm	ab|0,*
                                   318  
    000222                         319  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
                                   320  
                                   321  	end
LITERALS
     
    000222  aa   000000 000001 
    000224  aa   077777 000043 
    000225  aa   000001 000000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000226  5a   000003 000000 
    000227  5a   000037 600000 
    000230  aa   000000 000000 
    000231  55   000013 000002 
    000232  5a   000002 400003 
    000233  55   000006 000013 
    000234  aa  022 145 155 145
    000235  aa  162 147 145 156
    000236  aa  143 171 137 163
    000237  aa  150 165 164 144
    000240  aa  157 167 156 000
    000241  55   000017 000003 
    000242  0a   000212 400000 
    000243  55   000016 000003 
    000244  aa  002 160 160 000         pp
    000245  55   000023 000013 
    000246  0a   000210 400000 
    000247  55   000022 000003 
    000250  aa  002 154 160 000         lp
    000251  55   000030 000017 
    000252  0a   000000 400000 
    000253  55   000026 000003 
    000254  aa  005 145 156 164         entry
    000255  aa  162 171 000 000
    000256  55   000002 000023 
    000257  6a   000000 400002 
    000260  55   000033 000003 
    000261  aa  014 163 171 155         symbol_table
    000262  aa  142 157 154 137
    000263  aa  164 141 142 154
    000264  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000265  aa   000000 000015 
    000266  5a   000017 000000 
    000267  aa   000000 000000 
    000270  aa   000000 000000 
    000271  aa   000000 000000 
    000272  aa   000000 000000 
    000273  aa   000000 000000 
    000274  5a   000030 000000 
    000275  5a   000023 000000 
    000276  aa   000000 000000 
    000277  5a   000013 000000 
    000300  aa   000000 000000 
    000301  aa   000000 000000 
    000302  aa   000000 000000 

EXTERNAL NAMES

    000303  aa  017 167 151 162         wired_emergency
    000304  aa  145 144 137 145
    000305  aa  155 145 162 147
    000306  aa  145 156 143 171
    000307  aa  016 167 151 162         wired_shutdown
    000310  aa  145 144 137 163
    000311  aa  150 165 164 144
    000312  aa  157 167 156 000
    000313  aa  023 165 156 160         unpaged_page_tables
    000314  aa  141 147 145 144
    000315  aa  137 160 141 147
    000316  aa  145 137 164 141
    000317  aa  142 154 145 163
    000320  aa  014 163 164 141         stack_0_sdwp
    000321  aa  143 153 137 060
    000322  aa  137 163 144 167
    000323  aa  160 000 000 000
    000324  aa  013 163 164 141         stack_0_ptr
    000325  aa  143 153 137 060
    000326  aa  137 160 164 162
    000327  aa  011 151 156 172         inzr_stk0
    000330  aa  162 137 163 164
    000331  aa  153 060 000 000
    000332  aa  003 160 144 163         pds
    000333  aa  003 163 163 164         sst
    000334  aa  004 144 163 145         dseg
    000335  aa  147 000 000 000
    000336  aa  014 164 145 155         template_pds
    000337  aa  160 154 141 164
    000340  aa  145 137 160 144
    000341  aa  163 000 000 000
    000342  aa  026 164 145 163         test_all_drives_masked
    000343  aa  164 137 141 154
    000344  aa  154 137 144 162
    000345  aa  151 166 145 163
    000346  aa  137 155 141 163
    000347  aa  153 145 144 000
    000350  aa  016 144 151 163         disk_emergency
    000351  aa  153 137 145 155
    000352  aa  145 162 147 145
    000353  aa  156 143 171 000
    000354  aa  010 164 151 155         time_out
    000355  aa  145 137 157 165
    000356  aa  164 000 000 000
    000357  aa  016 160 143 137         pc_recover_sst
    000360  aa  162 145 143 157
    000361  aa  166 145 162 137
    000362  aa  163 163 164 000
    000363  aa  004 160 141 147         page
    000364  aa  145 000 000 000
    000365  aa  005 162 145 163         reset
    000366  aa  145 164 000 000
    000367  aa  012 151 157 137         io_manager
    000370  aa  155 141 156 141
    000371  aa  147 145 162 000
    000372  aa  011 145 163 144         esd_reset
    000373  aa  137 162 145 163
    000374  aa  145 164 000 000
    000375  aa  006 157 143 144         ocdcm_
    000376  aa  143 155 137 000
    000377  aa  014 163 171 163         syserr_reset
    000400  aa  145 162 162 137
    000401  aa  162 145 163 145
    000402  aa  164 000 000 000
    000403  aa  013 163 171 163         syserr_real
    000404  aa  145 162 162 137
    000405  aa  162 145 141 154
    000406  aa  015 162 145 143         reconfig_lock
    000407  aa  157 156 146 151
    000410  aa  147 137 154 157
    000411  aa  143 153 000 000
    000412  aa  007 163 163 164         sst_seg
    000413  aa  137 163 145 147
    000414  aa  016 160 162 157         processor_data
    000415  aa  143 145 163 163
    000416  aa  157 162 137 144
    000417  aa  141 164 141 000
    000420  aa  012 151 144 154         idle_aptep
    000421  aa  145 137 141 160
    000422  aa  164 145 160 000
    000423  aa  011 163 171 163         sys_level
    000424  aa  137 154 145 166
    000425  aa  145 154 000 000
    000426  aa  010 163 145 164         set_mask
    000427  aa  137 155 141 163
    000430  aa  153 000 000 000
    000431  aa  011 162 145 141         read_mask
    000432  aa  144 137 155 141
    000433  aa  163 153 000 000
    000434  aa  010 155 141 163         mask_ptr
    000435  aa  153 137 160 164
    000436  aa  162 000 000 000
    000437  aa  024 160 157 162         port_addressing_word
    000440  aa  164 137 141 144
    000441  aa  144 162 145 163
    000442  aa  163 151 156 147
    000443  aa  137 167 157 162
    000444  aa  144 000 000 000
    000445  aa  024 151 156 164         interrupt_controller
    000446  aa  145 162 162 165
    000447  aa  160 164 137 143
    000450  aa  157 156 164 162
    000451  aa  157 154 154 145
    000452  aa  162 000 000 000
    000453  aa  021 142 157 163         bos_processor_tag
    000454  aa  137 160 162 157
    000455  aa  143 145 163 163
    000456  aa  157 162 137 164
    000457  aa  141 147 000 000
    000460  aa  015 160 162 157         processor_tag
    000461  aa  143 145 163 163
    000462  aa  157 162 137 164
    000463  aa  141 147 000 000
    000464  aa  021 142 157 163         bos_restart_flags
    000465  aa  137 162 145 163
    000466  aa  164 141 162 164
    000467  aa  137 146 154 141
    000470  aa  147 163 000 000
    000471  aa  015 164 162 157         trouble_flags
    000472  aa  165 142 154 145
    000473  aa  137 146 154 141
    000474  aa  147 163 000 000
    000475  aa  023 163 171 163         sys_trouble_pending
    000476  aa  137 164 162 157
    000477  aa  165 142 154 145
    000500  aa  137 160 145 156
    000501  aa  144 151 156 147
    000502  aa  010 143 141 155         cam_wait
    000503  aa  137 167 141 151
    000504  aa  164 000 000 000
    000505  aa  014 143 157 156         connect_lock
    000506  aa  156 145 143 164
    000507  aa  137 154 157 143
    000510  aa  153 000 000 000
    000511  aa  011 160 162 157         processor
    000512  aa  143 145 163 163
    000513  aa  157 162 000 000
    000514  aa  003 163 143 163         scs
    000515  aa  021 160 162 157         processor_pattern
    000516  aa  143 145 163 163
    000517  aa  157 162 137 160
    000520  aa  141 164 164 145
    000521  aa  162 156 000 000
    000522  aa  004 160 162 144         prds
    000523  aa  163 000 000 000
    000524  aa  017 163 171 163         system_shutdown
    000525  aa  164 145 155 137
    000526  aa  163 150 165 164
    000527  aa  144 157 167 156
    000530  aa  010 141 160 164         apt_size
    000531  aa  137 163 151 172
    000532  aa  145 000 000 000
    000533  aa  003 141 160 164         apt
    000534  aa  015 155 145 164         metering_lock
    000535  aa  145 162 151 156
    000536  aa  147 137 154 157
    000537  aa  143 153 000 000
    000540  aa  010 141 160 164         apt_lock
    000541  aa  137 154 157 143
    000542  aa  153 000 000 000
    000543  aa  013 167 141 151         wait_enable
    000544  aa  164 137 145 156
    000545  aa  141 142 154 145
    000546  aa  007 164 143 137         tc_data
    000547  aa  144 141 164 141

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000550  aa   000004 000000 
    000551  55   000061 000055 
    000552  aa   000003 000000 
    000553  5a   000065 000000 
    000554  aa   000004 000000 
    000555  55   000104 000072 
    000556  aa   000004 000000 
    000557  55   000104 000076 
    000560  aa   000003 000000 
    000561  5a   000101 000000 
    000562  aa   000003 000000 
    000563  5a   000104 000000 
    000564  aa   000003 000000 
    000565  5a   000105 000000 
    000566  aa   000003 000000 
    000567  5a   000106 000000 
    000570  aa   000003 000000 
    000571  5a   000110 000000 
    000572  aa   000004 000000 
    000573  55   000122 000114 
    000574  aa   000004 000000 
    000575  55   000135 000126 
    000576  aa   000004 000000 
    000577  55   000131 000131 
    000600  aa   000004 000000 
    000601  55   000135 000144 
    000602  aa   000004 000000 
    000603  55   000141 000137 
    000604  aa   000004 000000 
    000605  55   000147 000144 
    000606  aa   000004 000000 
    000607  55   000155 000151 
    000610  aa   000004 000000 
    000611  55   000266 000160 
    000612  aa   000003 000000 
    000613  5a   000164 000000 
    000614  aa   000003 000000 
    000615  5a   000274 000000 
    000616  aa   000004 000000 
    000617  55   000266 000166 
    000620  aa   000004 000000 
    000621  55   000266 000172 
    000622  aa   000004 000000 
    000623  55   000266 000175 
    000624  aa   000004 000000 
    000625  55   000266 000200 
    000626  aa   000004 000000 
    000627  55   000266 000203 
    000630  aa   000004 000000 
    000631  55   000266 000206 
    000632  aa   000004 000000 
    000633  55   000266 000211 
    000634  aa   000004 000000 
    000635  55   000266 000217 
    000636  aa   000004 000000 
    000637  55   000266 000225 
    000640  aa   000004 000000 
    000641  55   000274 000232 
    000642  aa   000004 000000 
    000643  55   000266 000236 
    000644  aa   000004 000000 
    000645  55   000266 000243 
    000646  aa   000004 000000 
    000647  55   000266 000247 
    000650  aa   000004 000000 
    000651  55   000266 000254 
    000652  aa   000004 000000 
    000653  55   000266 000257 
    000654  aa   000004 000000 
    000655  55   000266 000263 
    000656  aa   000004 000000 
    000657  55   000274 000267 
    000660  aa   000004 000000 
    000661  55   000320 000276 
    000662  aa   000004 000000 
    000663  55   000320 000302 
    000664  aa   000004 000000 
    000665  55   000320 000305 
    000666  aa   000004 000000 
    000667  55   000320 000306 
    000670  aa   000004 000000 
    000671  55   000320 000312 
    000672  aa   000004 000000 
    000673  55   000320 000315 
    000674  aa   000001 000000 
    000675  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000676  5a   000322 000000 
    000677  5a   000324 000000 
    000700  5a   000324 000001 
    000701  5a   000326 000000 
    000702  5a   000330 000000 
    000703  5a   000332 000000 
    000704  5a   000340 000001 
    000705  5a   000334 000000 
    000706  5a   000336 000000 
    000707  5a   000336 000025 
    000710  5a   000340 000000 
    000711  5a   000342 000000 
    000712  5a   000366 000024 
    000713  5a   000344 000000 
    000714  5a   000346 000000 
    000715  5a   000350 000000 
    000716  5a   000352 000000 
    000717  5a   000354 000000 
    000720  5a   000356 000000 
    000721  5a   000360 000000 
    000722  5a   000362 000000 
    000723  5a   000364 000021 
    000724  5a   000366 000022 
    000725  5a   000370 000000 
    000726  5a   000372 000000 
    000727  5a   000374 000000 
    000730  5a   000376 000000 
    000731  5a   000400 000000 
    000732  5a   000402 000000 
    000733  5a   000404 000000 
    000734  5a   000406 000000 
    000735  5a   000410 000000 
    000736  5a   000412 000000 
    000737  5a   000414 000000 
    000740  5a   000416 000000 
    000741  5a   000420 000000 
    000742  5a   000422 000000 
    000743  5a   000424 000000 
    000744  5a   000426 000000 
    000745  5a   000430 000000 
    000746  5a   000432 000000 
    000747  5a   000434 000000 
    000750  5a   000436 000000 
    000751  5a   000440 000000 
    000752  5a   000442 000000 
    000753  5a   000444 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000226 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000154 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         tc_data|wait_enable
    000011  5a   000525 0000 00
    000012  9a   777766 0000 46         tc_data|apt_lock
    000013  5a   000524 0000 00
    000014  9a   777764 0000 46         tc_data|metering_lock
    000015  5a   000523 0000 00
    000016  9a   777762 0000 46         tc_data|apt
    000017  5a   000522 0000 00
    000020  9a   777760 0000 46         tc_data|apt_size
    000021  5a   000521 0000 00
    000022  9a   777756 0000 46         tc_data|system_shutdown
    000023  5a   000520 0000 00
    000024  9a   777754 0000 46         prds|processor_pattern
    000025  5a   000517 0000 00
    000026  9a   777752 0000 46         scs|processor
    000027  5a   000516 0000 00
    000030  9a   777750 0000 46         scs|connect_lock
    000031  5a   000515 0000 00
    000032  9a   777746 0000 46         scs|cam_wait
    000033  5a   000514 0000 00
    000034  9a   777744 0000 46         scs|sys_trouble_pending
    000035  5a   000513 0000 00
    000036  9a   777742 0000 46         scs|trouble_flags
    000037  5a   000512 0000 00
    000040  9a   777740 0000 46         scs|bos_restart_flags
    000041  5a   000511 0000 00
    000042  9a   777736 0000 46         prds|processor_tag
    000043  5a   000510 0000 00
    000044  9a   777734 0000 46         scs|bos_processor_tag
    000045  5a   000507 0000 00
    000046  9a   777732 0000 46         scs|interrupt_controller
    000047  5a   000506 0000 00
    000050  9a   777730 0000 46         scs|port_addressing_word
    000051  5a   000505 0000 10
    000052  9a   777726 0000 46         scs|mask_ptr
    000053  5a   000504 0000 11
    000054  9a   777724 0000 46         scs|read_mask
    000055  5a   000503 0000 11
    000056  9a   777722 0000 46         scs|set_mask
    000057  5a   000502 0000 11
    000060  9a   777720 0000 46         scs|sys_level
    000061  5a   000501 0000 00
    000062  9a   777716 0000 46         scs|idle_aptep
    000063  5a   000500 0000 11
    000064  9a   777714 0000 46         scs|processor_data
    000065  5a   000477 0000 05
    000066  9a   777712 0000 46         prds|       
    000067  5a   000476 0000 20
    000070  9a   777710 0000 46         sst_seg|       
    000071  5a   000475 0000 00
    000072  9a   777706 0000 46         scs|reconfig_lock
    000073  5a   000474 0000 00
    000074  9a   777704 0000 46         syserr_real|syserr_reset
    000075  5a   000473 0000 00
    000076  9a   777702 0000 46         ocdcm_|esd_reset
    000077  5a   000472 0000 00
    000100  9a   777700 0000 46         io_manager|reset
    000101  5a   000471 0000 00
    000102  9a   777676 0000 46         page|esd_reset
    000103  5a   000470 0000 00
    000104  9a   777674 0000 46         pc_recover_sst|pc_recover_sst
    000105  5a   000467 0000 00
    000106  9a   777672 0000 46         page|time_out
    000107  5a   000466 0000 00
    000110  9a   777670 0000 46         disk_emergency|test_all_drives_masked
    000111  5a   000465 0000 00
    000112  9a   777666 0000 46         prds|       
    000113  5a   000476 0000 00
    000114  9a   777664 0000 46         prds|       
    000115  5a   000464 0000 00
    000116  9a   777662 0000 46         template_pds|       
    000117  5a   000463 0000 00
    000120  9a   777660 0000 46         dseg|       
    000121  5a   000462 0000 01
    000122  9a   777656 0000 46         sst|       
    000123  5a   000461 0000 00
    000124  9a   777654 0000 46         sst|       
    000125  5a   000460 0000 05
    000126  9a   777652 0000 46         pds|       
    000127  5a   000457 0000 00
    000130  9a   777650 0000 46         dseg|       
    000131  5a   000456 0000 11
    000132  9a   777646 0000 46         dseg|       
    000133  5a   000462 0000 10
    000134  9a   777644 0000 46         dseg|       
    000135  5a   000462 0000 11
    000136  9a   777642 0000 46         inzr_stk0|       
    000137  5a   000455 0000 00
    000140  9a   777640 0000 46         pds|stack_0_ptr
    000141  5a   000454 0000 00
    000142  9a   777636 0000 46         pds|stack_0_sdwp
    000143  5a   000453 0000 00
    000144  9a   777634 0000 46         unpaged_page_tables|       
    000145  5a   000452 0000 00
    000146  9a   777632 0000 46         unpaged_page_tables|       
    000147  5a   000451 0000 00
    000150  9a   777630 0000 46         sst|       
    000151  5a   000460 0000 00
    000152  9a   777626 0000 46         wired_shutdown|wired_emergency
    000153  5a   000450 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   250626 170671 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000444 
    000020  aa   000000 000311 
    000021  aa   000360 000334 
    000022  aa   000426 000311 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000014 
    000066  aa   000146 000051 
    000067  aa   175453 027467 
    000070  aa   000000 117547 
    000071  aa   224202 600000 
    000072  aa   000161 000031 
    000073  aa   102456 350277 
    000074  aa   000000 110246 
    000075  aa   520732 400000 
    000076  aa   000170 000035 
    000077  aa   106701 740565 
    000100  aa   000000 110670 
    000101  aa   206245 200000 
    000102  aa   000200 000031 
    000103  aa   102456 350276 
    000104  aa   000000 110246 
    000105  aa   520730 400000 
    000106  aa   000207 000035 
    000107  aa   106701 740574 
    000110  aa   000000 110670 
    000111  aa   206425 200000 
    000112  aa   000217 000031 
    000113  aa   075522 764240 
    000114  aa   000000 107555 
    000115  aa   332322 000000 
    000116  aa   000226 000042 
    000117  aa   147777 464111 
    000120  aa   000000 115000 
    000121  aa   507463 000000 
    000122  aa   000237 000032 
    000123  aa   147777 464062 
    000124  aa   000000 115000 
    000125  aa   507456 000000 
    000126  aa   000246 000040 
    000127  aa   046742 631025 
    000130  aa   000000 104674 
    000131  aa   403663 000000 
    000132  aa   000256 000041 
    000133  aa   052721 247134 
    000134  aa   000000 105272 
    000135  aa   317215 400000 
    000136  aa   000267 000031 
    000137  aa   133234 136144 
    000140  aa   000000 113324 
    000141  aa   322064 400000 
    000142  aa   000276 000051 
    000143  aa   127236 043612 
    000144  aa   000000 112724 
    000145  aa   701752 000000 
    000146  aa   076163 160145          >spec>install>1115>emergency_shutdown.alm
    000147  aa   143076 151156 
    000150  aa   163164 141154 
    000151  aa   154076 061061 
    000152  aa   061065 076145 
    000153  aa   155145 162147 
    000154  aa   145156 143171 
    000155  aa   137163 150165 
    000156  aa   164144 157167 
    000157  aa   156056 141154 
    000160  aa   155040 040040 
    000161  aa   076154 144144          >ldd>include>sdw.incl.alm
    000162  aa   076151 156143 
    000163  aa   154165 144145 
    000164  aa   076163 144167 
    000165  aa   056151 156143 
    000166  aa   154056 141154 
    000167  aa   155040 040040 
    000170  aa   076154 144144          >ldd>include>sdw.l68.incl.alm
    000171  aa   076151 156143 
    000172  aa   154165 144145 
    000173  aa   076163 144167 
    000174  aa   056154 066070 
    000175  aa   056151 156143 
    000176  aa   154056 141154 
    000177  aa   155040 040040 
    000200  aa   076154 144144          >ldd>include>ptw.incl.alm
    000201  aa   076151 156143 
    000202  aa   154165 144145 
    000203  aa   076160 164167 
    000204  aa   056151 156143 
    000205  aa   154056 141154 
    000206  aa   155040 040040 
    000207  aa   076154 144144          >ldd>include>ptw.l68.incl.alm
    000210  aa   076151 156143 
    000211  aa   154165 144145 
    000212  aa   076160 164167 
    000213  aa   056154 066070 
    000214  aa   056151 156143 
    000215  aa   154056 141154 
    000216  aa   155040 040040 
    000217  aa   076154 144144          >ldd>include>scs.incl.alm
    000220  aa   076151 156143 
    000221  aa   154165 144145 
    000222  aa   076163 143163 
    000223  aa   056151 156143 
    000224  aa   154056 141154 
    000225  aa   155040 040040 
    000226  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000227  aa   076151 156143 
    000230  aa   154165 144145 
    000231  aa   076163 164141 
    000232  aa   143153 137150 
    000233  aa   145141 144145 
    000234  aa   162056 151156 
    000235  aa   143154 056141 
    000236  aa   154155 040040 
    000237  aa   076154 144144          >ldd>include>apte.incl.alm
    000240  aa   076151 156143 
    000241  aa   154165 144145 
    000242  aa   076141 160164 
    000243  aa   145056 151156 
    000244  aa   143154 056141 
    000245  aa   154155 040040 
    000246  aa   076154 144144          >ldd>include>state_equs.incl.alm
    000247  aa   076151 156143 
    000250  aa   154165 144145 
    000251  aa   076163 164141 
    000252  aa   164145 137145 
    000253  aa   161165 163056 
    000254  aa   151156 143154 
    000255  aa   056141 154155 
    000256  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000257  aa   076151 156143 
    000260  aa   154165 144145 
    000261  aa   076163 164141 
    000262  aa   143153 137146 
    000263  aa   162141 155145 
    000264  aa   056151 156143 
    000265  aa   154056 141154 
    000266  aa   155040 040040 
    000267  aa   076154 144144          >ldd>include>sst.incl.alm
    000270  aa   076151 156143 
    000271  aa   154165 144145 
    000272  aa   076163 163164 
    000273  aa   056151 156143 
    000274  aa   154056 141154 
    000275  aa   155040 040040 
    000276  aa   076154 144144          >ldd>include>unpaged_page_tables.incl.alm
    000277  aa   076151 156143 
    000300  aa   154165 144145 
    000301  aa   076165 156160 
    000302  aa   141147 145144 
    000303  aa   137160 141147 
    000304  aa   145137 164141 
    000305  aa   142154 145163 
    000306  aa   056151 156143 
    000307  aa   154056 141154 
    000310  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

                apt                      emergency_shutdown:        87.
          42    apte.access_authorization      apte:          98.
          24    apte.alarm_event         apte:          79.
          26    apte.alarm_time          apte:          82.
          26    apte.alarm_time_thread   apte:          81.
          40    apte.always_loaded       apte:          29.
          66    apte.apad                apte:         120.
          12    apte.asteps              apte:          54.
          10    apte.batch               apte:          74.
          21    apte.batch_word          apte:          73.
          60    apte.begin_interaction_vcpu    apte:         112.
          10    apte.being_loaded        apte:          31.
           0    apte.bp                  apte:          13.
          23    apte.chans_offset        apte:          71.
          37    apte.cpu_monitor         apte:          94.
          52    apte.current_response_state    apte:         108.
          44    apte.dbr                 emergency_shutdown:       133,
                                         apte:         101.
          20    apte.dbr_loaded          apte:          30.
          34    apte.deadline            apte:          90.
         200    apte.default_procs_required    apte:          27.
          12    apte.dseg                apte:          56.
        4000    apte.eligible            apte:          23.
          10    apte.event_thread        apte:          50.
           1    apte.firstsw             apte:          34.
           1    apte.flags               apte:          15.
          21    apte.flags2              apte:          69.
           0    apte.fp                  apte:          12.
       20000    apte.hproc               apte:          21.
        2000    apte.idle                apte:          24.
        1000    apte.interaction         apte:          25.
          10    apte.ipc_pointers        apte:          49.
          65    apte.ipc_r_factor        apte:         119.
          64    apte.ipc_r_offset        apte:         118.
          11    apte.ips_message         apte:          52.
          51    apte.ittes_got           apte:         106.
          50    apte.ittes_sent          apte:         105.
          54    apte.last_response_state_time  apte:         110.
          13    apte.le_shift            apte:         126.
       10000    apte.loaded              apte:          22.
          36    apte.lock                emergency_shutdown:        91,
                                         apte:          92.
          15    apte.lock_id             apte:          63.
      400000    apte.mbz                 apte:          17.
      400000    apte.no_ipc_check        apte:          99.
          53    apte.number_processing   apte:         109.
           2    apte.page_faults         apte:          37.
           2    apte.page_wait_flag      apte:          33.
          40    apte.paging_measure      apte:          96.
          12    apte.pds                 apte:          55.
          13    apte.prds                apte:          58.
       40000    apte.pre_empted          apte:          20.
         400    apte.pre_empt_pending    apte:          26.
      400000    apte.prior_sched         apte:          70.
           3    apte.processid           apte:          39.
          63    apte.procs_required      apte:         115.
      776000    apte.procs_required_mask       apte:         116.
           7    apte.pr_tag_mask         apte:          75.
         100    apte.realtime_burst      apte:          28.
          62    apte.saved_temax         apte:         114.
          13    apte.savex7              apte:          59.
           1    apte.sentinel            apte:          16.
           4    apte.shared_stack_0      apte:          32.
      374000    apte.special_chans       apte:          72.
           1    apte.state               apte:          35.
          22    apte.state_change_time   apte:          77.
      100000    apte.stop_pending        apte:          19.
           4    apte.te                  apte:          41.
          33    apte.temax               apte:          88.
          30    apte.term_channel        apte:          84.
          14    apte.term_processid      apte:          61.
           0    apte.thread              apte:          11.
           6    apte.ti                  apte:          45.
           7    apte.timax               apte:          47.
         175    apte.timer_factor        apte:         127.
          16    apte.time_used_clock     apte:          64.
          56    apte.total_processing_time     apte:         111.
           5    apte.ts                  apte:          43.
          46    apte.virtual_cpu_time    apte:         103.
          20    apte.wait_event          apte:          66.
      200000    apte.wakeup_waiting      apte:          18.
          21    apte.wct_index           apte:          68.
          32    apte.ws_size             apte:          86.
                apt_lock                 emergency_shutdown:        85.
                apt_size                 emergency_shutdown:        88.
          50    arglist                  emergency_shutdown:        65,  170,  171,  181,  184,  296.
           4    blocked                  state_equs:     7.
                bos_processor_tag        emergency_shutdown:       112.
                bos_restart_flags        emergency_shutdown:       106.
           0    bsmbx                    emergency_shutdown:        63.
        1170    call_offset              stack_header:        80.
         200    call_out                 emergency_shutdown:       172,  175,  187,  190,  193,  196,  199,  295.
                cam_wait                 emergency_shutdown:       103.
                connect_lock             emergency_shutdown:       102.
          17    core_ptw.add_type_mask   ptw.l68:       19.
          16    core_ptw.add_type_shift  ptw.l68:       18.
           3    core_ptw.df_no_mask      ptw.l68:       32.
           0    core_ptw.df_no_shift     ptw.l68:       31.
       10000    core_ptw.er              ptw.l68:       21.
       20000    core_ptw.first           ptw.l68:       20.
           0    core_ptw.flags           ptw.l68:       17.
       37777    core_ptw.frame_mask      ptw.l68:       16.
          26    core_ptw.frame_shift     ptw.l68:       15.
         200    core_ptw.nypd            ptw.l68:       25.
          10    core_ptw.os              ptw.l68:       29.
         100    core_ptw.phm             ptw.l68:       26.
         400    core_ptw.phm1            ptw.l68:       24.
        1000    core_ptw.phu             ptw.l68:       23.
          40    core_ptw.phu1            ptw.l68:       27.
        2000    core_ptw.unusable1       ptw.l68:       22.
           4    core_ptw.valid           ptw.l68:       30.
          20    core_ptw.wired           ptw.l68:       28.
                disk_emergency           emergency_shutdown:       198.
                dseg                     emergency_shutdown:       216,  230,  242,  243,  257.
           0    empty                    state_equs:     3.
           0    entry                    emergency_shutdown:        48,   76.
        1174    entry_offset             stack_header:        84.
                esd_reset                emergency_shutdown:       174,  189.
           7    hbound_processor_data    scs:           10.
                idle_aptep               emergency_shutdown:       132.
                interrupt_controller     emergency_shutdown:       113.
                inzr_stk0                emergency_shutdown:       253.
                io_manager               emergency_shutdown:       186.
         210    lp                       emergency_shutdown:        48,   76,  306.
                mask_ptr                 emergency_shutdown:       115,  124.
                metering_lock            emergency_shutdown:        86.
         214    null                     emergency_shutdown:       158,  308.
                ocdcm_                   emergency_shutdown:       174.
          46    on_loop                  emergency_shutdown:       139,  144.
                page                     emergency_shutdown:       189,  195.
                pc_recover_sst           emergency_shutdown:       192.
                pds                      emergency_shutdown:       226,  236,  256,  258.
                port_addressing_word     emergency_shutdown:       114.
         212    pp                       emergency_shutdown:        48,   77,  307.
                prds                     emergency_shutdown:       100,  111,  140,  152,  204,  205.
                processor                emergency_shutdown:       101.
                processor_data           emergency_shutdown:       142.
       20000    processor_data.delete_cpu      emergency_shutdown:       138,
                                               scs:            6.
        4000    processor_data.halted_cpu      scs:            8.
       10000    processor_data.interrupt_cpu   scs:            7.
      200000    processor_data.offline   scs:            5.
      400000    processor_data.online    scs:            4.
           7    processor_data.port_mask       scs:            9.
                processor_pattern        emergency_shutdown:       100.
                processor_tag            emergency_shutdown:       111,  140.
           6    ptlocking                state_equs:     9.
           0    ptw.add                  ptw.l68:       37.
          17    ptw.add_type_mask        ptw.l68:       40.
          16    ptw.add_type_shift       ptw.l68:       39.
           3    ptw.df_no_mask           ptw.l68:       53.
           0    ptw.df_no_shift          ptw.l68:       52.
       10000    ptw.er                   ptw.l68:       42.
       20000    ptw.first                ptw.l68:       41.
           0    ptw.flags                ptw.l68:       38.
         200    ptw.nypd                 ptw.l68:       46.
          10    ptw.os                   ptw.l68:       50.
         100    ptw.phm                  ptw.l68:       47.
         400    ptw.phm1                 ptw.l68:       45.
        1000    ptw.phu                  ptw.l68:       44.
          40    ptw.phu1                 ptw.l68:       48.
        2000    ptw.unusable1            ptw.l68:       43.
           4    ptw.valid                ptw.l68:       51.
          20    ptw.wired                emergency_shutdown:       219,  279,
                                         ptw.l68:       49.
         216    push                     emergency_shutdown:       154,  310.
        1171    push_offset              stack_header:        81.
           2    ready                    state_equs:     5.
                read_mask                emergency_shutdown:       117.
                reconfig_lock            emergency_shutdown:       164.
                reset                    emergency_shutdown:       186.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
         220    rmcm_instruction         emergency_shutdown:       116,  314.
           1    running                  state_equs:     4.
                scs                      emergency_shutdown:       101,  102,  103,  104,  105,  106,  112,  113,  114,  115,
                                                                   117,  119,  123,  124,  125,  132,  142,  164.
          17    sdw.access_mask          sdw.l68:       42.
          21    sdw.access_shift         sdw.l68:       41.
           1    sdw.access_word          sdw.l68:       40.
          14    sdw.add_shift            emergency_shutdown:       217,  270,
                                         sdw.l68:       18.
           0    sdw.add_word             sdw.l68:       17.
       37777    sdw.bound_mask           emergency_shutdown:       232,
                                         sdw.l68:       39.
          25    sdw.bound_shift          emergency_shutdown:       231,
                                         sdw.l68:       38.
           1    sdw.bound_word           emergency_shutdown:       230,
                                         sdw.l68:       37.
       40000    sdw.cache                sdw.l68:       56.
           1    sdw.cache_word           sdw.l68:       55.
           3    sdw.df_no_mask           sdw.l68:       35.
           0    sdw.df_no_shift          sdw.l68:       34.
           0    sdw.df_no_word           sdw.l68:       33.
       37777    sdw.entry_bound_mask     sdw.l68:       59.
           0    sdw.entry_bound_shift    sdw.l68:       58.
           1    sdw.entry_bound_word     sdw.l68:       57.
           2    sdw.execute              sdw.l68:       46.
           1    sdw.execute_word         sdw.l68:       45.
      100000    sdw.not_a_gate           sdw.l68:       54.
           1    sdw.not_a_gate_word      sdw.l68:       53.
      400000    sdw.privileged           sdw.l68:       50.
           1    sdw.privileged_word      sdw.l68:       49.
           7    sdw.r1_mask              sdw.l68:       24.
          11    sdw.r1_shift             sdw.l68:       23.
           0    sdw.r1_word              sdw.l68:       22.
           7    sdw.r2_mask              sdw.l68:       27.
           6    sdw.r2_shift             sdw.l68:       26.
           0    sdw.r2_word              sdw.l68:       25.
           7    sdw.r3_mask              sdw.l68:       30.
           3    sdw.r3_shift             sdw.l68:       29.
           0    sdw.r3_word              sdw.l68:       28.
           4    sdw.read                 sdw.l68:       44.
           1    sdw.read_word            sdw.l68:       43.
         777    sdw.rings_mask           sdw.l68:       21.
           3    sdw.rings_shift          sdw.l68:       20.
           0    sdw.rings_word           sdw.l68:       19.
      200000    sdw.unpaged              sdw.l68:       52.
           1    sdw.unpaged_word         sdw.l68:       51.
           4    sdw.valid                sdw.l68:       32.
           0    sdw.valid_word           sdw.l68:       31.
           1    sdw.write                sdw.l68:       48.
           1    sdw.write_word           sdw.l68:       47.
           2    sdw_size                 sdw.l68:       15.
                set_mask                 emergency_shutdown:       119,  125.
         100    size_of_apt_entry        emergency_shutdown:        92,
                                         apte:         122.
          51    skip_ours                emergency_shutdown:       141,  143.
         221    smcm_instruction         emergency_shutdown:       118,  316.
                sst                      emergency_shutdown:       218,  220,  276.
         214    sst.abs_wired_count      sst:          126.
         241    sst.acost                sst:          141.
      400000    sst.activate_activated   sst:          201.
         517    sst.activations          sst:          182.
          52    sst.ainitp               sst:           52.
          52    sst.ainitp1              sst:           53.
         244    sst.alaps                sst:          144.
         230    sst.aneedsize            sst:          135.
         236    sst.asearches            sst:          138.
         243    sst.askipdius            sst:          143.
         235    sst.askipsehs            sst:          137.
         240    sst.askipsinit           sst:          140.
         224    sst.askipsize            sst:          134.
         237    sst.askipslevel          sst:          139.
         242    sst.askipslock           sst:          142.
          30    sst.astap                sst:           35.
         254    sst.asteps               sst:          151.
          21    sst.astl                 emergency_shutdown:       163,
                                         sst:           26.
          22    sst.astl_event           sst:           27.
      400000    sst.astl_notify_requested      sst:           30.
          23    sst.astl_notify_requested_word       sst:           29.
          33    sst.astsize              sst:           37.
          72    sst.ast_ht_n_buckets     sst:           76.
          70    sst.ast_ht_ptr           sst:           75.
          73    sst.ast_ht_uid_mask      sst:           77.
         260    sst.ast_locked_at_time   sst:          152.
         262    sst.ast_locked_total_time      sst:          153.
         266    sst.ast_locking_count    sst:          155.
         264    sst.ast_lock_wait_time   sst:          154.
      400000    sst.ast_track            sst:          240.
         566    sst.ast_track_word       sst:          239.
          50    sst.atempp               sst:           46.
          50    sst.atempp1              sst:           47.
         600    sst.audit_seg_state_change_bw  sst:          253.
         573    sst.audit_seg_state_chg  sst:          249.
         126    sst.aused                sst:          104.
          44    sst.ausedp               sst:           43.
         534    sst.backup_activations   sst:          198.
         513    sst.bad_sgms             sst:          178.
         116    sst.ceiling              sst:           96.
          75    sst.checksum_filemap     sst:           79.
         476    sst.claim_notmod         sst:          166.
         477    sst.claim_passed_used    sst:          167.
         516    sst.claim_runs           sst:          181.
         474    sst.claim_skip_cme       sst:          164.
         475    sst.claim_skip_free      sst:          165.
         500    sst.claim_skip_ptw       sst:          168.
         502    sst.claim_steps          sst:          170.
         501    sst.claim_writes         sst:          169.
         267    sst.cleanup_count        sst:          156.
         270    sst.cleanup_real_time    sst:          157.
          67    sst.cl_skips_pinned      sst:           74.
          34    sst.cmesize              sst:           38.
          54    sst.cmp                  sst:           56.
         252    sst.cpu_bf_time          sst:          150.
         160    sst.cpu_sf_time          sst:          114.
      400000    sst.crash_test_segmove   sst:          246.
         571    sst.crash_test_segmove_word    sst:          245.
         117    sst.ctwait               sst:           97.
         100    sst.cycle_pv_allocation  sst:           82.
         127    sst.damaged_ct           sst:          105.
         507    sst.dblw_resurrections   sst:          175.
         130    sst.deact_count          sst:          106.
         572    sst.delayed_seg_state_chg      sst:          248.
         132    sst.demand_deactivations       sst:          108.
         131    sst.demand_deact_attempts      sst:          107.
         567    sst.dirlock_writebehind  sst:          242.
         520    sst.dir_activations      sst:          183.
         110    sst.dir_page_faults      sst:           90.
      400000    sst.dm_enabled           sst:           50.
          51    sst.dm_enabled_word      sst:           49.
          62    sst.double_write         sst:           66.
         546    sst.event                sst:          213.
         523    sst.evict_phmbit         sst:          189.
         523    sst.evict_ptp            sst:          188.
         523    sst.evict_recover_data   sst:          186.
          66    sst.fc_skips_pinned      sst:           73.
         220    sst.first_core_block     sst:          130.
         525    sst.force_pwrites        sst:          192.
         524    sst.force_swrites        sst:          191.
         527    sst.force_updatevs       sst:          194.
         526    sst.fw_none              sst:          193.
         222    sst.fw_retries           sst:          132.
         515    sst.good_sgms            sst:          180.
         521    sst.hedge_updatevs       sst:          184.
         522    sst.hedge_writes         sst:          185.
         121    sst.laps                 sst:           99.
         221    sst.last_core_block      sst:          131.
          44    sst.level                sst:           41.
         107    sst.level_1_page_faults  sst:           89.
         104    sst.lock_waits           sst:           86.
         154    sst.loop_locks           sst:          112.
         156    sst.loop_lock_time       sst:          113.
         533    sst.makeknown_activations      sst:          197.
         577    sst.max_seg_state_change_bw    sst:          252.
         535    sst.metering_flags       sst:          199.
          74    sst.meter_ast_locking    sst:           78.
         562    sst.mod_during_write     sst:          228.
         115    sst.needc                sst:           95.
         565    sst.new_pages            sst:          237.
      400000    sst.nolock               sst:           71.
          65    sst.nolock_word          sst:           70.
      400000    sst.notify               sst:          216.
         547    sst.notify_word          sst:          215.
          44    sst.no_aste              sst:           44.
          16    sst.npfs_misses          sst:           23.
          24    sst.nused                sst:           32.
         101    sst.n_trailers           sst:           83.
         506    sst.oopv                 sst:          174.
          76    sst.page_read_errors     sst:           80.
          77    sst.page_write_errors    sst:           81.
         113    sst.pc_io_waits          sst:           93.
           2    sst.pc_trace             sst:          234.
          10    sst.pc_trace_pf          sst:          232.
         106    sst.pdir_page_faults     sst:           88.
         532    sst.pf_unlock_ptl_meterings    sst:          196.
         530    sst.pf_unlock_ptl_time   sst:          195.
         545    sst.pid                  sst:          212.
          14    sst.post_in_core         sst:           21.
         165    sst.post_list_size       sst:          118.
         167    sst.post_purge_calls     sst:          120.
          12    sst.post_purge_time      sst:           20.
         166    sst.post_purgings        sst:          119.
         372    sst.pp_meters            sst:          159.
         170    sst.pre_page_calls       sst:          121.
         171    sst.pre_page_list_size   sst:          122.
         172    sst.pre_page_misses      sst:          123.
         164    sst.pre_page_size        sst:          117.
          10    sst.pre_page_time        sst:           19.
         173    sst.pre_pagings          sst:          124.
         503    sst.pre_seeks_failed     sst:          171.
          20    sst.ptl                  sst:           25.
          32    sst.ptl_wait_ct          sst:           36.
          40    sst.pts                  sst:           40.
          25    sst.ptwbase              emergency_shutdown:       218,
                                         sst:           33.
         223    sst.pvhtp                sst:          133.
         133    sst.reads                sst:          109.
         217    sst.recopies             sst:          129.
          61    sst.removep              sst:           64.
         504    sst.resurrections        sst:          172.
         111    sst.ring_0_page_faults   sst:           91.
          36    sst.root_astep           sst:           39.
          64    sst.root_pvtx            sst:           68.
         112    sst.rqover               sst:           92.
          17    sst.salv                 sst:           24.
           1    sst.sc_trace             sst:          235.
         555    sst.segmove_astep        sst:          223.
         551    sst.segmove_found_synch  sst:          219.
         550    sst.segmove_io_limit     sst:          218.
         545    sst.segmove_lock         sst:          210.
         554    sst.segmove_max_tries    sst:          222.
         561    sst.segmove_new_addr_astep     sst:          227.
         553    sst.segmove_n_reads      sst:          221.
         560    sst.segmove_old_addr_astep     sst:          226.
         556    sst.segmove_pvtx         sst:          224.
         552    sst.segmove_synch_disappeared  sst:          220.
         557    sst.segmove_vtocx        sst:          225.
         536    sst.seg_fault_calls      sst:          203.
         576    sst.seg_state_change_limit     sst:          251.
         574    sst.seg_state_chg_delay  sst:          250.
         601    sst.seg_state_chg_operation    sst:          254.
         247    sst.setfaults_acc        sst:          147.
         246    sst.setfaults_all        sst:          146.
         512    sst.sgm_pf               sst:          177.
         514    sst.sgm_sgft             sst:          179.
         510    sst.sgm_time             sst:          176.
         153    sst.short_pf_count       sst:          111.
         124    sst.skipm                sst:          102.
         125    sst.skipos               sst:          103.
         123    sst.skipu                sst:          101.
         122    sst.skipw                sst:          100.
           0    sst.space                sst:           18.
          60    sst.startp               sst:           62.
         114    sst.steps                sst:           94.
         234    sst.stepsa               sst:          136.
         543    sst.stk_pages_truncated  sst:          208.
         544    sst.stk_pages_truncated_in_core      sst:          209.
         542    sst.stk_truncate_shouldnt_did  sst:          207.
         541    sst.stk_truncate_shouldnt_didnt      sst:          206.
         540    sst.stk_truncate_should_did    sst:          205.
         537    sst.stk_truncate_should_didnt  sst:          204.
          53    sst.strsize              sst:           55.
         102    sst.synch_activations    sst:           84.
         103    sst.synch_skips          sst:           85.
         215    sst.system_type          sst:          127.
          63    sst.temp_w_event         sst:           67.
          26    sst.tfreep               sst:           34.
          15    sst.thrashing            sst:           22.
         250    sst.total_bf             sst:          148.
         251    sst.total_bf_pf          sst:          149.
         105    sst.total_locks_set      sst:           87.
         163    sst.total_sf             sst:          116.
         162    sst.total_sf_pf          sst:          115.
         564    sst.trace_sw             sst:          230.
         272    sst.tree_count           sst:          158.
           4    sst.tty_trace            sst:          233.
         245    sst.updates              sst:          145.
          56    sst.usedp                sst:           58.
         505    sst.volmap_seg_page_faults     sst:          173.
         120    sst.wired                sst:           98.
         216    sst.wired_copies         sst:          128.
         174    sst.wire_proc_data       sst:          125.
         143    sst.writes               sst:          110.
         473    sst.write_hunts          sst:          163.
         570    sst.write_limit          sst:          243.
          57    sst.wtct                 sst:           60.
         472    sst.wusedp               sst:          161.
         563    sst.zero_pages           sst:          229.
                sst_seg                  emergency_shutdown:       163.
        1000    sst_size                 sst:           15.
          73    stach_header.trace_top_ptr     stack_header:        62.
                stack_0_ptr              emergency_shutdown:       256.
                stack_0_sdwp             emergency_shutdown:       258.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      emergency_shutdown:       156,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      emergency_shutdown:       159,
                                         stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   emergency_shutdown:       152,  204,  263,
                                               stack_header:        37.
          24    stack_header.stack_end_ptr     emergency_shutdown:       157,  205,  264,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           5    stopped                  state_equs:     8.
                syserr_real              emergency_shutdown:       169.
                syserr_reset             emergency_shutdown:       169.
                system_shutdown          emergency_shutdown:        95.
                sys_level                emergency_shutdown:       123.
                sys_trouble_pending      emergency_shutdown:       104.
                tc_data                  emergency_shutdown:        83,   85,   86,   87,   88,   95.
                template_pds             emergency_shutdown:       213,  224,  237.
          54    temp_ptr                 emergency_shutdown:        66.
                test_all_drives_masked   emergency_shutdown:       198.
                time_out                 emergency_shutdown:       195.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
                trouble_flags            emergency_shutdown:       105.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          11    ul_apte                  emergency_shutdown:        89,   93.
          16    ul_apte_done             emergency_shutdown:        90,   94.
         177    unpaged                  emergency_shutdown:       272,  274,  289.
                unpaged_page_tables      emergency_shutdown:       271,  273.
           6    upt.current_length       unpaged_page_tables:       22.
          10    upt.first_entry          unpaged_page_tables:       24.
           4    upt.iupt_absloc          unpaged_page_tables:       20.
           5    upt.iupt_last_loc        unpaged_page_tables:       21.
           7    upt.max_length           unpaged_page_tables:       23.
           0    upt.sst_absloc           emergency_shutdown:       273,
                                         unpaged_page_tables:       16.
           1    upt.sst_last_loc         emergency_shutdown:       271,
                                         unpaged_page_tables:       17.
           2    upt.upt_absloc           unpaged_page_tables:       18.
           3    upt.upt_last_loc         unpaged_page_tables:       19.
           2    upt_entry.ptws           unpaged_page_tables:       32.
           1    upt_entry.segno          unpaged_page_tables:       31.
           0    upt_entry.size           unpaged_page_tables:       30.
         174    uw_loop                  emergency_shutdown:       285,  287.
           3    waiting                  state_equs:     6.
                wait_enable              emergency_shutdown:        83.
                wired_emergency          emergency_shutdown:       289.
                wired_shutdown           emergency_shutdown:       289.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
