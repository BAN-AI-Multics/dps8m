	COMPILATION LISTING OF SEGMENT user_wire
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1023.0 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 /* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */
       13 
       14 user_wire: user_wire_seg: proc (a_segptr, a_wiring, a_fp, a_np, a_code);
       15 
       16 /* Greenberg 2/10/77 */
       17 /* Modified 7/3/84 by Keith Loepere to use the new dc_find. */
       18 
       19 /* Parameters */
       20 
       21 dcl  a_code			fixed bin (35) parameter;
       22 dcl  a_dn				char (*) parameter;
       23 dcl  a_en				char (*) parameter;
       24 dcl  a_fp				fixed bin parameter;
       25 dcl  a_np				fixed bin parameter;
       26 dcl  a_segptr			ptr parameter;
       27 dcl  a_wiring			bit (1) aligned parameter;
       28 
       29 /* Variables */
       30 
       31 dcl  code				fixed bin (35);
       32 dcl  dn				char (168);
       33 dcl  en				char (32);
       34 dcl  fp				fixed bin;
       35 dcl  np				fixed bin;
       36 dcl  pathentry			bit (1);
       37 dcl  segptr			ptr;
       38 dcl  wiring			bit (1) aligned;
       39 
       40 /* External */
       41 
       42 dcl  error_table_$argerr		fixed bin (35) ext;
       43 dcl  error_table_$bad_ring_brackets	fixed bin (35) ext;
       44 dcl  error_table_$invalidsegno	fixed bin (35) ext;
       45 
       46 /* Entries */
       47 
       48 dcl  activate			entry (ptr, fixed bin (35)) returns (ptr);
       49 dcl  level$get			entry returns (fixed bin (3));
       50 dcl  lock$dir_unlock		entry (ptr);
       51 dcl  lock$unlock_ast		entry;
       52 dcl  pc_wired$unwire		entry (ptr, fixed bin, fixed bin);
       53 dcl  pc_wired$wire_wait		entry (ptr, fixed bin, fixed bin);
       54 
       55 /* Misc */
       56 
       57 dcl  (fixed, ptr)			builtin;
       58 
       59 	segptr = a_segptr;
       60 	pathentry = "0"b;
       61 	go to join;
       62 
       63 user_wire_file: entry (a_dn, a_en, a_wiring, a_fp, a_np, a_code);
       64 
       65 	dn = a_dn;
       66 	en = a_en;
       67 	pathentry = "1"b;
       68 join:
       69 	wiring = a_wiring;
       70 
       71 	if wiring then do;
       72 	     fp = a_fp;
       73 	     np = a_np;
       74 	end;
       75 	else do;
       76 	     fp = 0;
       77 	     np = -1;
       78 	end;
       79 
       80 	if pathentry then call dc_find$obj_status_read_priv (dn, en, DC_FIND_CHASE, ep, code);
       81 	else call dc_find$obj_status_read_priv_ptr (segptr, ep, code);
       82 	if code = 0 then do;
       83 	     if level$get () > fixed (entry.ring_brackets (1), 3) then code = error_table_$bad_ring_brackets;
       84 	     else astep = activate (ep, code);
       85 	     if code = 0 then do;
       86 		if aste.hc_sdw then code = error_table_$invalidsegno;
       87 		else if fp >= fixed (aste.csl, 9)
       88 			| (np ^= -1 & fp + np > fixed (aste.csl, 9))
       89 			| (np < 1 & np ^= -1)
       90 		then code = error_table_$argerr;
       91 		else do;
       92 		     aste.ehs = wiring;
       93 		     if wiring then call pc_wired$wire_wait (astep, fp, np);
       94 		     else call pc_wired$unwire (astep, fp, np);
       95 		end;
       96 		call lock$unlock_ast;
       97 	     end;
       98 	     call lock$dir_unlock (ptr (ep, 0));
       99 	     if pathentry then call dc_find$finished (ep, "0"b);
      100 	end;
      101 
      102 	a_code = code;
      103 	return;
      104 
      105  /*	BEGIN INCLUDE FILE ...aste.incl.pl1 ... */
  1     2 
  1     3 /* Template for an AST entry. Length = 12 words. */
  1     4 
  1     5 /* Words 0 to 7, and 11 are read by PC; they are read and modified by SC.
  1     6*   Words 8, 9 and 10 are modified by PC; they should never be modified without locking the PC lock */
  1     7 /* Modified January 1985 by Keith Loepere for multi_class. */
  1     8 
  1     9 dcl  astep ptr;
  1    10 
  1    11 dcl 1 aste based (astep) aligned,
  1    12 
  1    13     (2 fp bit (18),					/* forward  used list rel pointer */
  1    14     2 bp bit (18),					/* backward used list rel pointer */
  1    15 
  1    16     2 infl bit (18),				/* ptr to NEXT  in list of ASTE's of my brothers */
  1    17     2 infp bit (18),				/* ptr to FIRST in list of ASTE's of my children */
  1    18 
  1    19     2 strp bit (18),				/* rel pointer to process trailer */
  1    20     2 par_astep bit (18),				/* rel pointer to parent aste */
  1    21 
  1    22     2 uid bit (36),					/* segment unique id */
  1    23 
  1    24     2 msl bit (9),					/* maximum segment length in 1024 word units */
  1    25     2 pvtx fixed bin (8),				/* physical volume table index */
  1    26     2 vtocx fixed bin (17),				/* vtoc entry index */
  1    27 
  1    28     2 usedf bit (1),				/* ast entry is being used if non-zero */
  1    29     2 init bit (1),					/* used bit - insure 1 lap */
  1    30     2 gtus bit (1),					/* global transparent usage switch */
  1    31     2 gtms bit (1),					/* global transparent modified switch */
  1    32     2 hc bit (1),					/* hard core segment */
  1    33     2 hc_sdw bit (1),				/* aste with sdw for hardcore seg if non-zero */
  1    34     2 any_access_on bit (1),				/* any sdw allows access, unless write_access_on */
  1    35     2 write_access_on bit (1),			/* any sdw allows write access */
  1    36     2 inhibit_cache bit (1),				/* flag not to reset above bits */
  1    37     2 explicit_deact_ok bit (1),			/* set if user can deactivate seg */
  1    38     2 deact_error bit (1),				/* set if error occurred while deactivating */
  1    39     2 hc_part bit (1),				/* set if pages are in a hardcore partition */
  1    40     2 fm_damaged bit (1),				/* set if filemap checksum was ever bad */
  1    41     2 multi_class bit (1),				/* set if page_control should watch state changes to this segment */
  1    42     2 pad1 bit (2),					/* OO */
  1    43     2 dius bit (1),					/* dumper in use switch */
  1    44     2 nid bit (1),					/* if on prevents addtion to incremental dump map */
  1    45     2 dmpr_pad bit (1),
  1    46     2 ehs bit (1),					/* entry hold switch */
  1    47     2 nqsw bit (1),					/* no quota switch - no checking for pages of this seg */
  1    48     2 dirsw bit (1),				/* directory switch */
  1    49     2 master_dir bit (1),				/* master dir - a root for the log volume */
  1    50     2 volmap_seg bit (1),				/* volmap_seg for some volume */
  1    51     2 tqsw (0:1) bit (1),				/* terminal quota switch - (0) for non dir pages */
  1    52     2 pad_ic bit (10),				/* Used to be aste.ic */
  1    53 
  1    54     2 dtu bit (36),					/* date and time segment last used */
  1    55 
  1    56     2 dtm bit (36),					/* date and time segment last modified */
  1    57 
  1    58 
  1    59     2 quota (0:1) fixed bin (18) unsigned,		/* sec storage quota - (0) for non dir pages */
  1    60 
  1    61     2 used (0:1) fixed bin (18) unsigned,		/* sec storage used  - (0) for non dir pages */
  1    62 
  1    63     2 csl bit (9),					/* current segment length in 1024 words units */
  1    64     2 fmchanged bit (1),				/* turned on by page if file map changed */
  1    65     2 fms bit (1),					/* file modified switch */
  1    66     2 npfs bit (1),					/* no page fault switch */
  1    67     2 gtpd bit (1),					/* global transparent paging device switch */
  1    68     2 dnzp bit (1),					/* don't null out if zero page switch */
  1    69     2 per_process bit (1),				/* use master quota for this entry */
  1    70     2 ddnp bit (1),					/* don't deposit nulled pages */
  1    71     2 pad2 bit (2),
  1    72     2 records bit (9),				/* number of records used by the seg in sec storage */
  1    73     2 np bit (9),					/* number of pages in core */
  1    74 
  1    75 
  1    76     2 ht_fp bit (18),				/* hash table forward rel pointer */
  1    77     2 fmchanged1 bit (1),				/* value of "fmchanged" saved by pc$get_file_map */
  1    78     2 damaged bit (1),				/* PC declared segment unusable */
  1    79     2 pack_ovfl bit (1),				/* page fault on seg would cause pack overflow */
  1    80     2 synchronized bit (1),				/* Data Management synchronized segment */
  1    81     2 pad3 bit (6),					/* OOOOOOOOO */
  1    82     2 ptsi bit (2),					/* page table size index */
  1    83     2 marker bit (6)) unaligned;			/* marker to indicate last word of ASTE */
  1    84 
  1    85 
  1    86 dcl  asta (0 : 8000) bit (36*12 /* sst-> sst.astsize */) based aligned;
  1    87 
  1    88 
  1    89 dcl 1 aste_part aligned based (astep),
  1    90 
  1    91     2 one bit (36) unaligned,				/* fp and bp */
  1    92     2 two bit (36*11 - 8) unaligned,			/* part that has to be zeroed when ASTE is freed */
  1    93     2 three bit (8) unaligned;			/* ptsi and marker */
  1    94 
  1    95 
  1    96 dcl 1 seg_aste based (astep) aligned,			/* Overlay because quota is only for dirs */
  1    97     2 pad1 bit (8*36),
  1    98     2 usage fixed bin (35),				/* page fault count: overlays quota */
  1    99     2 pad2 bit (3*36);
  1   100 
  1   101 /*	END INCLUDE FILE ... aste.incl.pl1 */
      105 
      106  /* BEGIN include file dc_find_dcls.incl.pl1 */
  2     2 
  2     3 /* Calling sequences for dc_find.  Keith Loepere, June 1984. */
  2     4 /* Added a few more, October 1984. */
  2     5 /* 85-05-08, EJ Sharpe: added obj_delete_uid, obj_status_read_uid, and obj_status_read_raw_uid */
  2     6 /* 85-05-15, EJ Sharpe: changed dir_write_raw_uid to mdir_set_quota_uid */
  2     7 
  2     8 /* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */
  2     9 
  2    10 dcl  DC_FIND_CHASE			fixed bin (1) static options (constant) init (1);
  2    11 dcl  DC_FIND_NO_CHASE		fixed bin (1) static options (constant) init (0);
  2    12 dcl  DC_FIND_NO_UNLOCK_DIR		bit (1) aligned static options (constant) init ("0"b);
  2    13 dcl  DC_FIND_UNLOCK_DIR		bit (1) aligned static options (constant) init ("1"b);
  2    14 
  2    15 dcl  dc_find$dir_for_append		entry (char (168), char (32), fixed bin (1), ptr, ptr, fixed bin (35));
  2    16 dcl  dc_find$dir_for_append_raw	entry (char (168), char (32), fixed bin (1), ptr, ptr, fixed bin (35));
  2    17 dcl  dc_find$dir_for_retrieve_append	entry (char (168), char (32), fixed bin (1), ptr, ptr, ptr, fixed bin (35));
  2    18 
  2    19 dcl  dc_find$dir_initiate		entry (char (168), ptr, fixed bin (35));
  2    20 
  2    21 dcl  dc_find$dir_move_quota		entry (char (168), ptr, ptr, fixed bin (35));
  2    22 
  2    23 dcl  dc_find$dir_read		entry (char (168), ptr, fixed bin (35));
  2    24 dcl  dc_find$dir_read_priv		entry (char (168), ptr, fixed bin (35));
  2    25 
  2    26 dcl  dc_find$dir_reclassify		entry (char (168), ptr, ptr, ptr, fixed bin (35));
  2    27 
  2    28 dcl  dc_find$dir_salvage		entry (char (168), bit (36) aligned, ptr, fixed bin (35));
  2    29 
  2    30 dcl  dc_find$dir_write		entry (char (168), fixed bin (18) uns, ptr, fixed bin (35));
  2    31 dcl  dc_find$dir_write_priv		entry (char (168), fixed bin (18) uns, ptr, fixed bin (35));
  2    32 
  2    33 dcl  dc_find$finished		entry (ptr, bit (1) aligned);
  2    34 
  2    35 dcl  dc_find$link_target		entry (char (168), char (32), fixed bin (35));
  2    36 
  2    37 dcl  dc_find$mdir_set_quota_uid	entry ((0:15) bit (36) aligned, char (168), fixed bin (18) uns, ptr, ptr, fixed bin (35));
  2    38 
  2    39 dcl  dc_find$obj_access_write		entry (char (168), char (32), fixed bin (1), fixed bin (18) uns, ptr, fixed bin (35));
  2    40 dcl  dc_find$obj_access_write_priv	entry (char (168), char (32), fixed bin (1), fixed bin (18) uns, ptr, fixed bin (35));
  2    41 
  2    42 dcl  dc_find$obj_attributes_read	entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    43 dcl  dc_find$obj_attributes_read_ptr	entry (ptr, ptr, fixed bin (35));
  2    44 
  2    45 dcl  dc_find$obj_attributes_write	entry (char (168), char (32), fixed bin (1), fixed bin (18) uns, ptr, fixed bin (35));
  2    46 dcl  dc_find$obj_attributes_write_ptr	entry (ptr, fixed bin (18) uns, ptr, fixed bin (35));
  2    47 
  2    48 dcl  dc_find$obj_bc_delta_write	entry (char (168), char (32), fixed bin (24), ptr, fixed bin (35));
  2    49 dcl  dc_find$obj_bc_delta_write_ptr	entry (ptr, fixed bin (24), ptr, fixed bin (35));
  2    50 dcl  dc_find$obj_bc_write		entry (char (168), char (32), fixed bin (24), ptr, fixed bin (35));
  2    51 dcl  dc_find$obj_bc_write_ptr		entry (ptr, fixed bin (24), ptr, fixed bin (35));
  2    52 
  2    53 dcl  dc_find$obj_delete		entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    54 dcl  dc_find$obj_delete_priv		entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    55 dcl  dc_find$obj_delete_uid		entry ((0:15) bit (36) aligned, char (168), char (32), ptr, fixed bin (35));
  2    56 dcl  dc_find$obj_delete_priv_uid	entry ((0:15) bit (36) aligned, char (168), char (32), ptr, fixed bin (35));
  2    57 dcl  dc_find$obj_delete_ptr		entry (ptr, ptr, fixed bin (35));
  2    58 
  2    59 dcl  dc_find$obj_existence_ptr	entry (ptr, ptr, fixed bin (35));
  2    60 
  2    61 dcl  dc_find$obj_for_audit		entry (char (168), char (32), ptr, fixed bin (35));
  2    62 
  2    63 dcl  dc_find$obj_initiate		entry (char (168), char (32), ptr, fixed bin (35));
  2    64 dcl  dc_find$obj_initiate_for_linker_dp entry (ptr, char (32), ptr, fixed bin (35));
  2    65 dcl  dc_find$obj_initiate_raw		entry (char (168), char (32), ptr, fixed bin (35));
  2    66 
  2    67 dcl  dc_find$obj_linkage_ring_ptr	entry (ptr, fixed bin (35));
  2    68 
  2    69 dcl  dc_find$obj_modes_ptr		entry (ptr, bit (36) aligned, bit (36) aligned, (3) fixed bin (3), fixed bin (35));
  2    70 
  2    71 dcl  dc_find$obj_reclassify		entry (char (168), char (32), ptr, ptr, fixed bin (35));
  2    72 
  2    73 dcl  dc_find$obj_status_attributes_read entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    74 
  2    75 dcl  dc_find$obj_status_read		entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    76 dcl  dc_find$obj_status_read_uid	entry ((0:15) bit (36) aligned, char (168), char (32), ptr, fixed bin (35));
  2    77 dcl  dc_find$obj_status_read_priv	entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    78 dcl  dc_find$obj_status_read_priv_ptr	entry (ptr, ptr, fixed bin (35));
  2    79 dcl  dc_find$obj_status_read_priv_uid	entry ((0:15) bit (36) aligned, char (168), char (32), ptr, fixed bin (35));
  2    80 dcl  dc_find$obj_status_read_raw_uid	entry ((0:15) bit (36) aligned, char (168), char (32), ptr, fixed bin (35));
  2    81 dcl  dc_find$obj_status_read_ptr	entry (ptr, ptr, fixed bin (35));
  2    82 
  2    83 dcl  dc_find$obj_status_write		entry (char (168), char (32), fixed bin (1), fixed bin (18) uns, ptr, fixed bin (35));
  2    84 dcl  dc_find$obj_status_write_priv	entry (char (168), char (32), fixed bin (1), fixed bin (18) uns, ptr, fixed bin (35));
  2    85 dcl  dc_find$obj_status_write_priv_ptr	entry (ptr, fixed bin (18) uns, ptr, fixed bin (35));
  2    86 dcl  dc_find$obj_status_write_ptr	entry (ptr, fixed bin (18) uns, ptr, fixed bin (35));
  2    87 
  2    88 dcl  dc_find$obj_terminate		entry (char (168), char (32), fixed bin (1), ptr, fixed bin (35));
  2    89 dcl  dc_find$obj_terminate_ptr	entry (ptr, ptr, fixed bin (35));
  2    90 
  2    91 dcl  dc_find$obj_truncate		entry (char (168), char (32), ptr, fixed bin (35));
  2    92 dcl  dc_find$obj_truncate_ptr		entry (ptr, ptr, fixed bin (35));
  2    93 dcl  dc_find$obj_truncate_raw_ptr	entry (ptr, ptr, fixed bin (35));
  2    94 
  2    95 dcl  dc_find$obj_volume_retrieve	entry (char (168), char (32), ptr, ptr, fixed bin (35));
  2    96 
  2    97 dcl  dc_find$seg_fault		entry (ptr, ptr, fixed bin (35));
  2    98 
  2    99 /* END include file dc_find_dcls.incl.pl1 */
      106 
      107  /*	BEGIN INCLUDE FILE ... dir_entry.incl.pl1 ...last modified August 1974 for nss */
  3     2 
  3     3 
  3     4 /* Template for an entry. Length = 38 words */
  3     5 
  3     6 dcl  ep ptr;
  3     7 
  3     8 dcl 1 entry based (ep) aligned,
  3     9 
  3    10     (2 efrp bit (18),				/* forward rel ptr to next entry */
  3    11     2 ebrp bit (18)) unaligned,			/* backward rel ptr to previous entry */
  3    12 
  3    13     2 type bit (18) unaligned,			/* type of object = dir entry  */
  3    14     2 size fixed bin (17) unaligned,			/* size of dir entry */
  3    15 
  3    16     2 uid bit (36),					/* unique id of entry */
  3    17 
  3    18     2 dtem bit (36),				/* date-time entry modified */
  3    19 
  3    20     (2 bs bit (1),					/* branch switch = 1 if branch */
  3    21     2 pad0 bit (17),
  3    22     2 nnames fixed bin (17),				/* number of names for this entry */
  3    23 
  3    24     2 name_frp bit (18),				/* rel pointer to start of name list */
  3    25     2 name_brp bit (18),				/* rel pointer to end of name list */
  3    26 
  3    27     2 author,					/* user who created branch */
  3    28       3 pers_rp bit (18),				/* name of user who created branch */
  3    29       3 proj_rp bit (18),				/* project of user who created branch */
  3    30 
  3    31       3 tag char (1),				/* tag of user who created branch */
  3    32       3 pad1 char (3),
  3    33 
  3    34     2 primary_name bit (504),				/* first name on name list */
  3    35 
  3    36     2 dtd bit (36),					/* date time dumped */
  3    37 
  3    38     2 pad2 bit (36),
  3    39 
  3    40 
  3    41 /* the declarations below are for branch only */
  3    42 
  3    43 
  3    44     2 pvid bit (36),				/* physical volume id */
  3    45 
  3    46     2 vtocx fixed bin (17),				/* vtoc entry index */
  3    47     2 pad3 bit (18),
  3    48 
  3    49     2 dirsw bit (1),				/* = 1 if this is a directory branch */
  3    50     2 oosw bit (1),					/* out of service switch  on = 1 */
  3    51     2 per_process_sw bit (1),				/* indicates segment is per process */
  3    52     2 copysw bit (1),				/* = 1 make copy of segment whenever initiated */
  3    53     2 safety_sw bit (1),				/* if 1 then entry cannot be deleted */
  3    54     2 multiple_class bit (1),				/* segment has multiple security classes */
  3    55     2 audit_flag bit (1),				/* segment must be audited for security */
  3    56     2 security_oosw bit (1),				/* security out of service switch */
  3    57     2 entrypt_sw bit (1),				/* 1 if call limiter is to be enabled */
  3    58     2 master_dir bit (1),				/* TRUE for master directory */
  3    59     2 tpd bit (1),					/* TRUE if this segment is never to go on the PD */
  3    60     2 pad4 bit (11),
  3    61     2 entrypt_bound bit (14)) unaligned,		/* call limiter */
  3    62 
  3    63     2 access_class bit (72) aligned,			/* security attributes : level and category */
  3    64 
  3    65     (2 ring_brackets (3) bit (3),			/* ring brackets on segment */
  3    66     2 ex_ring_brackets (3) bit (3),			/* extended ring brackets */
  3    67     2 acle_count fixed bin (17),			/* number of entries on ACL */
  3    68 
  3    69     2 acl_frp bit (18),				/* rel ptr to start of ACL */
  3    70     2 acl_brp bit (18),				/* rel ptr to end of ACL */
  3    71 
  3    72     2 bc_author,					/* user who last set the bit count */
  3    73       3 pers_rp bit (18),				/* name of user who set the bit count */
  3    74       3 proj_rp bit (18),				/* project of user who set the bit count */
  3    75 
  3    76       3 tag char (1),				/* tag of user who set the bit count */
  3    77       3 pad5 bit (2),
  3    78     2 bc fixed bin (24)) unaligned,			/* bit count for segs, msf indicator for dirs */
  3    79 
  3    80     2 sons_lvid bit (36),				/* logical volume id for immediat inf non dir seg */
  3    81 
  3    82     2 pad6 bit (36),
  3    83 
  3    84     2 checksum bit (36),				/* checksum from dtd */
  3    85 
  3    86     2 owner bit (36);				/* uid of containing directory */
  3    87 
  3    88 /*	END INCLUDE FILE ... dir_entry.incl.pl1 ... */
      107 
      108      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0801.0  user_wire.pl1                     >spec>install>1110>user_wire.pl1
105          1    01/30/85  1523.9  aste.incl.pl1                     >ldd>include>aste.incl.pl1
106          2    05/20/85  0848.1  dc_find_dcls.incl.pl1             >ldd>include>dc_find_dcls.incl.pl1
107          3    04/29/76  1100.6  dir_entry.incl.pl1                >ldd>include>dir_entry.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DC_FIND_CHASE                   000005 constant        fixed bin(1,0)           initial dcl 2-10 set ref 80*
a_code                                 parameter       fixed bin(35,0)          dcl 21 set ref 14 14 63 102*
a_dn                                   parameter       char                     packed unaligned dcl 22 ref 63 65
a_en                                   parameter       char                     packed unaligned dcl 23 ref 63 66
a_fp                                   parameter       fixed bin(17,0)          dcl 24 ref 14 14 63 72
a_np                                   parameter       fixed bin(17,0)          dcl 25 ref 14 14 63 73
a_segptr                               parameter       pointer                  dcl 26 ref 14 14 59
a_wiring                               parameter       bit(1)                   dcl 27 ref 14 14 63 68
activate                        000016 constant        entry                    external dcl 48 ref 84
aste                                   based           structure                level 1 dcl 1-11
astep                           000172 automatic       pointer                  dcl 1-9 set ref 84* 86 87 87 92 93* 94*
code                            000100 automatic       fixed bin(35,0)          dcl 31 set ref 80* 81* 82 83* 84* 85 86* 87* 102
csl                      12            based           bit(9)                   level 2 packed packed unaligned dcl 1-11 ref 87 87
dc_find$finished                000032 constant        entry                    external dcl 2-33 ref 99
dc_find$obj_status_read_priv    000034 constant        entry                    external dcl 2-77 ref 80
dc_find$obj_status_read_priv_ptr
                                000036 constant        entry                    external dcl 2-78 ref 81
dn                              000101 automatic       char(168)                packed unaligned dcl 32 set ref 65* 80*
ehs                       5(19)        based           bit(1)                   level 2 packed packed unaligned dcl 1-11 set ref 92*
en                              000153 automatic       char(32)                 packed unaligned dcl 33 set ref 66* 80*
entry                                  based           structure                level 1 dcl 3-8
ep                              000174 automatic       pointer                  dcl 3-6 set ref 80* 81* 83 84* 98 98 99*
error_table_$argerr             000010 external static fixed bin(35,0)          dcl 42 ref 87
error_table_$bad_ring_brackets  000012 external static fixed bin(35,0)          dcl 43 ref 83
error_table_$invalidsegno       000014 external static fixed bin(35,0)          dcl 44 ref 86
fixed                                                  builtin function         dcl 57 ref 83 87 87
fp                              000163 automatic       fixed bin(17,0)          dcl 34 set ref 72* 76* 87 87 93* 94*
hc_sdw                    5(05)        based           bit(1)                   level 2 packed packed unaligned dcl 1-11 ref 86
level$get                       000020 constant        entry                    external dcl 49 ref 83
lock$dir_unlock                 000022 constant        entry                    external dcl 50 ref 98
lock$unlock_ast                 000024 constant        entry                    external dcl 51 ref 96
np                              000164 automatic       fixed bin(17,0)          dcl 35 set ref 73* 77* 87 87 87 87 93* 94*
pathentry                       000165 automatic       bit(1)                   packed unaligned dcl 36 set ref 60* 67* 80 99
pc_wired$unwire                 000026 constant        entry                    external dcl 52 ref 94
pc_wired$wire_wait              000030 constant        entry                    external dcl 53 ref 93
ptr                                                    builtin function         dcl 57 ref 98 98
ring_brackets            35            based           bit(3)                   array level 2 packed packed unaligned dcl 3-8 ref 83
segptr                          000166 automatic       pointer                  dcl 37 set ref 59* 81*
wiring                          000170 automatic       bit(1)                   dcl 38 set ref 68* 71 92 93

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
DC_FIND_NO_CHASE                       internal static fixed bin(1,0)           initial dcl 2-11
DC_FIND_NO_UNLOCK_DIR                  internal static bit(1)                   initial dcl 2-12
DC_FIND_UNLOCK_DIR                     internal static bit(1)                   initial dcl 2-13
asta                                   based           bit(432)                 array dcl 1-86
aste_part                              based           structure                level 1 dcl 1-89
dc_find$dir_for_append          000000 constant        entry                    external dcl 2-15
dc_find$dir_for_append_raw      000000 constant        entry                    external dcl 2-16
dc_find$dir_for_retrieve_append 000000 constant        entry                    external dcl 2-17
dc_find$dir_initiate            000000 constant        entry                    external dcl 2-19
dc_find$dir_move_quota          000000 constant        entry                    external dcl 2-21
dc_find$dir_read                000000 constant        entry                    external dcl 2-23
dc_find$dir_read_priv           000000 constant        entry                    external dcl 2-24
dc_find$dir_reclassify          000000 constant        entry                    external dcl 2-26
dc_find$dir_salvage             000000 constant        entry                    external dcl 2-28
dc_find$dir_write               000000 constant        entry                    external dcl 2-30
dc_find$dir_write_priv          000000 constant        entry                    external dcl 2-31
dc_find$link_target             000000 constant        entry                    external dcl 2-35
dc_find$mdir_set_quota_uid      000000 constant        entry                    external dcl 2-37
dc_find$obj_access_write        000000 constant        entry                    external dcl 2-39
dc_find$obj_access_write_priv   000000 constant        entry                    external dcl 2-40
dc_find$obj_attributes_read     000000 constant        entry                    external dcl 2-42
dc_find$obj_attributes_read_ptr 000000 constant        entry                    external dcl 2-43
dc_find$obj_attributes_write    000000 constant        entry                    external dcl 2-45
dc_find$obj_attributes_write_ptr
                                000000 constant        entry                    external dcl 2-46
dc_find$obj_bc_delta_write      000000 constant        entry                    external dcl 2-48
dc_find$obj_bc_delta_write_ptr  000000 constant        entry                    external dcl 2-49
dc_find$obj_bc_write            000000 constant        entry                    external dcl 2-50
dc_find$obj_bc_write_ptr        000000 constant        entry                    external dcl 2-51
dc_find$obj_delete              000000 constant        entry                    external dcl 2-53
dc_find$obj_delete_priv         000000 constant        entry                    external dcl 2-54
dc_find$obj_delete_priv_uid     000000 constant        entry                    external dcl 2-56
dc_find$obj_delete_ptr          000000 constant        entry                    external dcl 2-57
dc_find$obj_delete_uid          000000 constant        entry                    external dcl 2-55
dc_find$obj_existence_ptr       000000 constant        entry                    external dcl 2-59
dc_find$obj_for_audit           000000 constant        entry                    external dcl 2-61
dc_find$obj_initiate            000000 constant        entry                    external dcl 2-63
dc_find$obj_initiate_for_linker_dp
                                000000 constant        entry                    external dcl 2-64
dc_find$obj_initiate_raw        000000 constant        entry                    external dcl 2-65
dc_find$obj_linkage_ring_ptr    000000 constant        entry                    external dcl 2-67
dc_find$obj_modes_ptr           000000 constant        entry                    external dcl 2-69
dc_find$obj_reclassify          000000 constant        entry                    external dcl 2-71
dc_find$obj_status_attributes_read
                                000000 constant        entry                    external dcl 2-73
dc_find$obj_status_read         000000 constant        entry                    external dcl 2-75
dc_find$obj_status_read_priv_uid
                                000000 constant        entry                    external dcl 2-79
dc_find$obj_status_read_ptr     000000 constant        entry                    external dcl 2-81
dc_find$obj_status_read_raw_uid 000000 constant        entry                    external dcl 2-80
dc_find$obj_status_read_uid     000000 constant        entry                    external dcl 2-76
dc_find$obj_status_write        000000 constant        entry                    external dcl 2-83
dc_find$obj_status_write_priv   000000 constant        entry                    external dcl 2-84
dc_find$obj_status_write_priv_ptr
                                000000 constant        entry                    external dcl 2-85
dc_find$obj_status_write_ptr    000000 constant        entry                    external dcl 2-86
dc_find$obj_terminate           000000 constant        entry                    external dcl 2-88
dc_find$obj_terminate_ptr       000000 constant        entry                    external dcl 2-89
dc_find$obj_truncate            000000 constant        entry                    external dcl 2-91
dc_find$obj_truncate_ptr        000000 constant        entry                    external dcl 2-92
dc_find$obj_truncate_raw_ptr    000000 constant        entry                    external dcl 2-93
dc_find$obj_volume_retrieve     000000 constant        entry                    external dcl 2-95
dc_find$seg_fault               000000 constant        entry                    external dcl 2-97
seg_aste                               based           structure                level 1 dcl 1-96

NAMES DECLARED BY EXPLICIT CONTEXT.
join                            000134 constant        label                    dcl 68 ref 61
user_wire                       000035 constant        entry                    external dcl 14
user_wire_file                  000066 constant        entry                    external dcl 63
user_wire_seg                   000014 constant        entry                    external dcl 14

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       576         636     401         606
Length      1070     401        40         216     175           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
user_wire_seg                       152 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
user_wire_seg            000100 code                        user_wire_seg
                         000101 dn                          user_wire_seg
                         000153 en                          user_wire_seg
                         000163 fp                          user_wire_seg
                         000164 np                          user_wire_seg
                         000165 pathentry                   user_wire_seg
                         000166 segptr                      user_wire_seg
                         000170 wiring                      user_wire_seg
                         000172 astep                       user_wire_seg
                         000174 ep                          user_wire_seg

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out        return_mac          ext_entry           ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
activate                      dc_find$finished              dc_find$obj_status_read_priv
dc_find$obj_status_read_priv_ptr                            level$get                     lock$dir_unlock
lock$unlock_ast               pc_wired$unwire               pc_wired$wire_wait

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$argerr           error_table_$bad_ring_brackets                              error_table_$invalidsegno




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000007        59 000053        60 000056        61 000057        63 000060        65 000117        66 000125
     67 000132        68 000134        71 000137        72 000140        73 000142        74 000144        76 000145
     77 000146        80 000150        81 000172        82 000205        83 000207        84 000227        85 000242
     86 000244        87 000254        92 000304        93 000311        94 000327        96 000342        98 000347
     99 000360       102 000375       103 000377


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
