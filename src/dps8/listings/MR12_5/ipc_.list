ASSEMBLY LISTING OF SEGMENT >spec>install>1110>ipc_.alm                                                                                                                                             
ASSEMBLED ON:	11/11/89  0951.0 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
    000000                          12  name	ipc_
                                    13  
                                    14  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    15  "
                                    16  "	This procedure is a transfer vector for the several pieces of IPC.
                                    17  "
                                    18  "	Originally coded by R. J. Feiertag on May 13, 1972.
                                    19  "	Changed by E. Donner Jan 1981 for new ipc from rest_of_ipc_.alm
                                    20  "	Modified by J. Bongiovanni Septemper 1981 for name ipc_, macro
                                    21  "
                                    22  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    23  
                                    24  
                                    25  " HISTORY COMMENTS:
                                    26  "  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                    27  "     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
                                    28  "     Modified to support control point management.  This change was actually
                                    29  "     made in February 1985 by G. Palter.
                                    30  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7479),
                                    31  "     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
                                    32  "     Added the create_event_channel and run_event_calls entries to support
                                    33  "     asynch event channels.
                                    34  "                                                      END HISTORY COMMENTS
                                    35  
                                    36  
                                    37  "	The following is the normal transfer-vector macro
                                    38  "	
                                    39  "	ipc_tv	<entry in ipc_>,<seg$entry to transfer to>
                                    40  
                                    41  	macro	ipc_tv
                              1     42  	segdef	&1
                              2     43  &1:
                              3     44  	tsx0	getlp
                              4     45  	tra	&2
                              5     46  	&end
                                    47  
                                    48  
                                    49  
                                    50  "
                                    51  "	The following subroutine calculate the lp for this procedure.
                                    52  "
                                    53  
    000000                          54  getlp:
    000000  0a   000000 2130 00     55  	epaq	*		get ptr to ourselves
    000001  aa  7 00026 7641 61     56  	lprplp	sb|stack_header.lot_ptr,*au get ptr to linkage from packed ptr
    000002  aa   000000 7100 10     57  	tra	0,0		return
                                    58  "
                                    59  	%include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    60  "
                                    61  	ipc_tv	block,ipc_fast_$block
                        000003          	segdef	block
    000003                              block:
    000003  0a   000000 7000 00         	tsx0	getlp
    000004  4a  4 00010 7101 20         	tra	ipc_fast_$block
                                    62  	ipc_tv	create_ev_chn,ipc_real_$create_ev_chn
                        000005          	segdef	create_ev_chn
    000005                              create_ev_chn:
    000005  0a   000000 7000 00         	tsx0	getlp
    000006  4a  4 00012 7101 20         	tra	ipc_real_$create_ev_chn
                                    63  	ipc_tv	create_event_channel,ipc_real_$create_event_channel
                        000007          	segdef	create_event_channel
    000007                              create_event_channel:
    000007  0a   000000 7000 00         	tsx0	getlp
    000010  4a  4 00014 7101 20         	tra	ipc_real_$create_event_channel
                                    64  	ipc_tv	cutoff,ipc_real_$cutoff
                        000011          	segdef	cutoff
    000011                              cutoff:
    000011  0a   000000 7000 00         	tsx0	getlp
    000012  4a  4 00016 7101 20         	tra	ipc_real_$cutoff
                                    65  	ipc_tv	decl_ev_call_chn,ipc_real_$decl_ev_call_chn
                        000013          	segdef	decl_ev_call_chn
    000013                              decl_ev_call_chn:
    000013  0a   000000 7000 00         	tsx0	getlp
    000014  4a  4 00020 7101 20         	tra	ipc_real_$decl_ev_call_chn
                                    66  	ipc_tv	decl_ev_wait_chn,ipc_real_$decl_ev_wait_chn
                        000015          	segdef	decl_ev_wait_chn
    000015                              decl_ev_wait_chn:
    000015  0a   000000 7000 00         	tsx0	getlp
    000016  4a  4 00022 7101 20         	tra	ipc_real_$decl_ev_wait_chn
                                    67  	ipc_tv	decl_event_call_chn,ipc_real_$decl_event_call_chn
                        000017          	segdef	decl_event_call_chn
    000017                              decl_event_call_chn:
    000017  0a   000000 7000 00         	tsx0	getlp
    000020  4a  4 00024 7101 20         	tra	ipc_real_$decl_event_call_chn
                                    68  	ipc_tv	delete_ev_chn,ipc_real_$delete_ev_chn
                        000021          	segdef	delete_ev_chn
    000021                              delete_ev_chn:
    000021  0a   000000 7000 00         	tsx0	getlp
    000022  4a  4 00026 7101 20         	tra	ipc_real_$delete_ev_chn
                                    69  	ipc_tv	drain_chn,ipc_real_$drain_chn
                        000023          	segdef	drain_chn
    000023                              drain_chn:
    000023  0a   000000 7000 00         	tsx0	getlp
    000024  4a  4 00030 7101 20         	tra	ipc_real_$drain_chn
                                    70  	ipc_tv	mask_ev_calls,ipc_real_$mask_ev_calls
                        000025          	segdef	mask_ev_calls
    000025                              mask_ev_calls:
    000025  0a   000000 7000 00         	tsx0	getlp
    000026  4a  4 00032 7101 20         	tra	ipc_real_$mask_ev_calls
                                    71  	ipc_tv	read_ev_chn,ipc_real_$read_ev_chn
                        000027          	segdef	read_ev_chn
    000027                              read_ev_chn:
    000027  0a   000000 7000 00         	tsx0	getlp
    000030  4a  4 00034 7101 20         	tra	ipc_real_$read_ev_chn
                                    72  	ipc_tv	reassign_call_channels,ipc_real_$reassign_call_channels
                        000031          	segdef	reassign_call_channels
    000031                              reassign_call_channels:
    000031  0a   000000 7000 00         	tsx0	getlp
    000032  4a  4 00036 7101 20         	tra	ipc_real_$reassign_call_channels
                                    73  	ipc_tv	reconnect,ipc_real_$reconnect
                        000033          	segdef	reconnect
    000033                              reconnect:
    000033  0a   000000 7000 00         	tsx0	getlp
    000034  4a  4 00040 7101 20         	tra	ipc_real_$reconnect
                                    74  	ipc_tv	reset_ev_call_chn,ipc_real_$reset_ev_call_chn
                        000035          	segdef	reset_ev_call_chn
    000035                              reset_ev_call_chn:
    000035  0a   000000 7000 00         	tsx0	getlp
    000036  4a  4 00042 7101 20         	tra	ipc_real_$reset_ev_call_chn
                                    75  	ipc_tv	run_event_calls,ipc_real_$run_event_calls
                        000037          	segdef	run_event_calls
    000037                              run_event_calls:
    000037  0a   000000 7000 00         	tsx0	getlp
    000040  4a  4 00044 7101 20         	tra	ipc_real_$run_event_calls
                                    76  	ipc_tv	set_call_prior,ipc_real_$set_call_prior
                        000041          	segdef	set_call_prior
    000041                              set_call_prior:
    000041  0a   000000 7000 00         	tsx0	getlp
    000042  4a  4 00046 7101 20         	tra	ipc_real_$set_call_prior
                                    77  	ipc_tv	set_wait_prior,ipc_real_$set_wait_prior
                        000043          	segdef	set_wait_prior
    000043                              set_wait_prior:
    000043  0a   000000 7000 00         	tsx0	getlp
    000044  4a  4 00050 7101 20         	tra	ipc_real_$set_wait_prior
                                    78  	ipc_tv	unmask_ev_calls,ipc_real_$unmask_ev_calls
                        000045          	segdef	unmask_ev_calls
    000045                              unmask_ev_calls:
    000045  0a   000000 7000 00         	tsx0	getlp
    000046  4a  4 00052 7101 20         	tra	ipc_real_$unmask_ev_calls
                                    79  	ipc_tv	wait_for_an_event,ipc_real_$wait_for_an_event
                        000047          	segdef	wait_for_an_event
    000047                              wait_for_an_event:
    000047  0a   000000 7000 00         	tsx0	getlp
    000050  4a  4 00054 7101 20         	tra	ipc_real_$wait_for_an_event
                                    80  
                                    81  "	This is an obsolete entry, from the days before IPC
                                    82  "	used standard error codes. It is a no-op
                                    83  
                        000051      84  	segdef	convert_ipc_code_
    000051                          85  convert_ipc_code_:
    000051  aa  7 00044 7101 20     86  	short_return
                                    87  
                                    88  
                                    89  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000052  5a   000003 000000 
    000053  5a   000236 600000 
    000054  aa   000000 000000 
    000055  55   000010 000002 
    000056  5a   000002 400003 
    000057  55   000006 000010 
    000060  aa  004 151 160 143
    000061  aa  137 000 000 000
    000062  55   000020 000003 
    000063  0a   000051 400000 
    000064  55   000013 000003 
    000065  aa  021 143 157 156         convert_ipc_code_
    000066  aa  166 145 162 164
    000067  aa  137 151 160 143
    000070  aa  137 143 157 144
    000071  aa  145 137 000 000
    000072  55   000030 000010 
    000073  0a   000047 400000 
    000074  55   000023 000003 
    000075  aa  021 167 141 151         wait_for_an_event
    000076  aa  164 137 146 157
    000077  aa  162 137 141 156
    000100  aa  137 145 166 145
    000101  aa  156 164 000 000
    000102  55   000037 000020 
    000103  0a   000045 400000 
    000104  55   000033 000003 
    000105  aa  017 165 156 155         unmask_ev_calls
    000106  aa  141 163 153 137
    000107  aa  145 166 137 143
    000110  aa  141 154 154 163
    000111  55   000046 000030 
    000112  0a   000043 400000 
    000113  55   000042 000003 
    000114  aa  016 163 145 164         set_wait_prior
    000115  aa  137 167 141 151
    000116  aa  164 137 160 162
    000117  aa  151 157 162 000
    000120  55   000055 000037 
    000121  0a   000041 400000 
    000122  55   000051 000003 
    000123  aa  016 163 145 164         set_call_prior
    000124  aa  137 143 141 154
    000125  aa  154 137 160 162
    000126  aa  151 157 162 000
    000127  55   000064 000046 
    000130  0a   000037 400000 
    000131  55   000060 000003 
    000132  aa  017 162 165 156         run_event_calls
    000133  aa  137 145 166 145
    000134  aa  156 164 137 143
    000135  aa  141 154 154 163
    000136  55   000074 000055 
    000137  0a   000035 400000 
    000140  55   000067 000003 
    000141  aa  021 162 145 163         reset_ev_call_chn
    000142  aa  145 164 137 145
    000143  aa  166 137 143 141
    000144  aa  154 154 137 143
    000145  aa  150 156 000 000
    000146  55   000102 000064 
    000147  0a   000033 400000 
    000150  55   000077 000003 
    000151  aa  011 162 145 143         reconnect
    000152  aa  157 156 156 145
    000153  aa  143 164 000 000
    000154  55   000113 000074 
    000155  0a   000031 400000 
    000156  55   000105 000003 
    000157  aa  026 162 145 141         reassign_call_channels
    000160  aa  163 163 151 147
    000161  aa  156 137 143 141
    000162  aa  154 154 137 143
    000163  aa  150 141 156 156
    000164  aa  145 154 163 000
    000165  55   000121 000102 
    000166  0a   000027 400000 
    000167  55   000116 000003 
    000170  aa  013 162 145 141         read_ev_chn
    000171  aa  144 137 145 166
    000172  aa  137 143 150 156
    000173  55   000130 000113 
    000174  0a   000025 400000 
    000175  55   000124 000003 
    000176  aa  015 155 141 163         mask_ev_calls
    000177  aa  153 137 145 166
    000200  aa  137 143 141 154
    000201  aa  154 163 000 000
    000202  55   000136 000121 
    000203  0a   000023 400000 
    000204  55   000133 000003 
    000205  aa  011 144 162 141         drain_chn
    000206  aa  151 156 137 143
    000207  aa  150 156 000 000
    000210  55   000145 000130 
    000211  0a   000021 400000 
    000212  55   000141 000003 
    000213  aa  015 144 145 154         delete_ev_chn
    000214  aa  145 164 145 137
    000215  aa  145 166 137 143
    000216  aa  150 156 000 000
    000217  55   000155 000136 
    000220  0a   000017 400000 
    000221  55   000150 000003 
    000222  aa  023 144 145 143         decl_event_call_chn
    000223  aa  154 137 145 166
    000224  aa  145 156 164 137
    000225  aa  143 141 154 154
    000226  aa  137 143 150 156
    000227  55   000165 000145 
    000230  0a   000015 400000 
    000231  55   000160 000003 
    000232  aa  020 144 145 143         decl_ev_wait_chn
    000233  aa  154 137 145 166
    000234  aa  137 167 141 151
    000235  aa  164 137 143 150
    000236  aa  156 000 000 000
    000237  55   000175 000155 
    000240  0a   000013 400000 
    000241  55   000170 000003 
    000242  aa  020 144 145 143         decl_ev_call_chn
    000243  aa  154 137 145 166
    000244  aa  137 143 141 154
    000245  aa  154 137 143 150
    000246  aa  156 000 000 000
    000247  55   000202 000165 
    000250  0a   000011 400000 
    000251  55   000200 000003 
    000252  aa  006 143 165 164         cutoff
    000253  aa  157 146 146 000
    000254  55   000213 000175 
    000255  0a   000007 400000 
    000256  55   000205 000003 
    000257  aa  024 143 162 145         create_event_channel
    000260  aa  141 164 145 137
    000261  aa  145 166 145 156
    000262  aa  164 137 143 150
    000263  aa  141 156 156 145
    000264  aa  154 000 000 000
    000265  55   000222 000202 
    000266  0a   000005 400000 
    000267  55   000216 000003 
    000270  aa  015 143 162 145         create_ev_chn
    000271  aa  141 164 145 137
    000272  aa  145 166 137 143
    000273  aa  150 156 000 000
    000274  55   000227 000213 
    000275  0a   000003 400000 
    000276  55   000225 000003 
    000277  aa  005 142 154 157         block
    000300  aa  143 153 000 000
    000301  55   000002 000222 
    000302  6a   000000 400002 
    000303  55   000232 000003 
    000304  aa  014 163 171 155         symbol_table
    000305  aa  142 157 154 137
    000306  aa  164 141 142 154
    000307  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000310  aa   000000 000033 
    000311  5a   000010 000000 
    000312  5a   000155 000000 
    000313  5a   000020 000000 
    000314  5a   000064 000000 
    000315  5a   000165 000000 
    000316  aa   000000 000000 
    000317  5a   000121 000000 
    000320  5a   000102 000000 
    000321  5a   000037 000000 
    000322  5a   000046 000000 
    000323  5a   000227 000000 
    000324  5a   000055 000000 
    000325  5a   000175 000000 
    000326  5a   000136 000000 
    000327  5a   000202 000000 
    000330  5a   000222 000000 
    000331  aa   000000 000000 
    000332  aa   000000 000000 
    000333  5a   000113 000000 
    000334  5a   000213 000000 
    000335  5a   000030 000000 
    000336  5a   000130 000000 
    000337  5a   000074 000000 
    000340  aa   000000 000000 
    000341  aa   000000 000000 
    000342  5a   000145 000000 
    000343  aa   000000 000000 

EXTERNAL NAMES

    000344  aa  011 151 160 143         ipc_real_
    000345  aa  137 162 145 141
    000346  aa  154 137 000 000
    000347  aa  011 151 160 143         ipc_fast_
    000350  aa  137 146 141 163
    000351  aa  164 137 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000352  aa   000004 000000 
    000353  55   000272 000023 
    000354  aa   000004 000000 
    000355  55   000272 000033 
    000356  aa   000004 000000 
    000357  55   000272 000042 
    000360  aa   000004 000000 
    000361  55   000272 000051 
    000362  aa   000004 000000 
    000363  55   000272 000060 
    000364  aa   000004 000000 
    000365  55   000272 000067 
    000366  aa   000004 000000 
    000367  55   000272 000077 
    000370  aa   000004 000000 
    000371  55   000272 000105 
    000372  aa   000004 000000 
    000373  55   000272 000116 
    000374  aa   000004 000000 
    000375  55   000272 000124 
    000376  aa   000004 000000 
    000377  55   000272 000133 
    000400  aa   000004 000000 
    000401  55   000272 000141 
    000402  aa   000004 000000 
    000403  55   000272 000150 
    000404  aa   000004 000000 
    000405  55   000272 000160 
    000406  aa   000004 000000 
    000407  55   000272 000170 
    000410  aa   000004 000000 
    000411  55   000272 000200 
    000412  aa   000004 000000 
    000413  55   000272 000205 
    000414  aa   000004 000000 
    000415  55   000272 000216 
    000416  aa   000004 000000 
    000417  55   000275 000225 
    000420  aa   000001 000000 
    000421  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000422  5a   000300 000000 
    000423  5a   000302 000000 
    000424  5a   000304 000000 
    000425  5a   000306 000000 
    000426  5a   000310 000000 
    000427  5a   000312 000000 
    000430  5a   000314 000000 
    000431  5a   000316 000000 
    000432  5a   000320 000000 
    000433  5a   000322 000000 
    000434  5a   000324 000000 
    000435  5a   000326 000000 
    000436  5a   000330 000000 
    000437  5a   000332 000000 
    000440  5a   000334 000000 
    000441  5a   000336 000000 
    000442  5a   000340 000000 
    000443  5a   000342 000000 
    000444  5a   000344 000000 
    000445  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000052 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000056 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         ipc_fast_|block
    000011  5a   000372 0000 00
    000012  9a   777766 0000 46         ipc_real_|create_ev_chn
    000013  5a   000371 0000 00
    000014  9a   777764 0000 46         ipc_real_|create_event_channel
    000015  5a   000370 0000 00
    000016  9a   777762 0000 46         ipc_real_|cutoff
    000017  5a   000367 0000 00
    000020  9a   777760 0000 46         ipc_real_|decl_ev_call_chn
    000021  5a   000366 0000 00
    000022  9a   777756 0000 46         ipc_real_|decl_ev_wait_chn
    000023  5a   000365 0000 00
    000024  9a   777754 0000 46         ipc_real_|decl_event_call_chn
    000025  5a   000364 0000 00
    000026  9a   777752 0000 46         ipc_real_|delete_ev_chn
    000027  5a   000363 0000 00
    000030  9a   777750 0000 46         ipc_real_|drain_chn
    000031  5a   000362 0000 00
    000032  9a   777746 0000 46         ipc_real_|mask_ev_calls
    000033  5a   000361 0000 00
    000034  9a   777744 0000 46         ipc_real_|read_ev_chn
    000035  5a   000360 0000 00
    000036  9a   777742 0000 46         ipc_real_|reassign_call_channels
    000037  5a   000357 0000 00
    000040  9a   777740 0000 46         ipc_real_|reconnect
    000041  5a   000356 0000 00
    000042  9a   777736 0000 46         ipc_real_|reset_ev_call_chn
    000043  5a   000355 0000 00
    000044  9a   777734 0000 46         ipc_real_|run_event_calls
    000045  5a   000354 0000 00
    000046  9a   777732 0000 46         ipc_real_|set_call_prior
    000047  5a   000353 0000 00
    000050  9a   777730 0000 46         ipc_real_|set_wait_prior
    000051  5a   000352 0000 00
    000052  9a   777726 0000 46         ipc_real_|unmask_ev_calls
    000053  5a   000351 0000 00
    000054  9a   777724 0000 46         ipc_real_|wait_for_an_event
    000055  5a   000350 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   256114 000276 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000216 
    000020  aa   000000 000116 
    000021  aa   000141 000127 
    000022  aa   000207 000116 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000033 
    000067  aa   175453 017477 
    000070  aa   000000 117547 
    000071  aa   176000 000000 
    000072  aa   000105 000042 
    000073  aa   147777 464111 
    000074  aa   000000 115000 
    000075  aa   507463 000000 
    000076  aa   076163 160145          >spec>install>1110>ipc_.alm
    000077  aa   143076 151156 
    000100  aa   163164 141154 
    000101  aa   154076 061061 
    000102  aa   061060 076151 
    000103  aa   160143 137056 
    000104  aa   141154 155040 
    000105  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000106  aa   076151 156143 
    000107  aa   154165 144145 
    000110  aa   076163 164141 
    000111  aa   143153 137150 
    000112  aa   145141 144145 
    000113  aa   162056 151156 
    000114  aa   143154 056141 
    000115  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           3    block                    ipc_:          61.
        1170    call_offset              stack_header:        80.
          51    convert_ipc_code_        ipc_:          84,   85.
           7    create_event_channel     ipc_:          63.
           5    create_ev_chn            ipc_:          62.
          11    cutoff                   ipc_:          64.
          17    decl_event_call_chn      ipc_:          67.
          13    decl_ev_call_chn         ipc_:          65.
          15    decl_ev_wait_chn         ipc_:          66.
          21    delete_ev_chn            ipc_:          68.
          23    drain_chn                ipc_:          69.
        1174    entry_offset             stack_header:        84.
           0    getlp                    ipc_:          54,   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
                                                        72,   73,   74,   75,   76,   77,   78,   79.
                ipc_fast_                ipc_:          61.
                ipc_real_                ipc_:          62,   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
                                                        74,   75,   76,   77,   78,   79.
          25    mask_ev_calls            ipc_:          70.
        1171    push_offset              stack_header:        81.
          27    read_ev_chn              ipc_:          71.
          31    reassign_call_channels   ipc_:          72.
          33    reconnect                ipc_:          73.
          35    reset_ev_call_chn        ipc_:          74.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          37    run_event_calls          ipc_:          75.
          41    set_call_prior           ipc_:          76.
          43    set_wait_prior           ipc_:          77.
          73    stach_header.trace_top_ptr     stack_header:        62.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     ipc_:          56,
                                         stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          45    unmask_ev_calls          ipc_:          78.
          47    wait_for_an_event        ipc_:          79.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
