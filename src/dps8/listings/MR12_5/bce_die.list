	COMPILATION LISTING OF SEGMENT bce_die
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1015.3 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 bce_die: proc (P_ss_info_ptr);
        9 
       10 /* kill ourselves off.
       11*Keith Loepere, January 1984. */
       12 
       13 /* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */
       14 
       15 dcl  P_ss_info_ptr		        ptr parameter;
       16 dcl  arg			        char (arg_len) based (arg_ptr);
       17 dcl  arg_count		        fixed bin;
       18 dcl  arg_len		        fixed bin (21);
       19 dcl  arg_ptr		        ptr;
       20 dcl  bce_alm_die		        entry;
       21 dcl  bce_query$yes_no	        entry options (variable);
       22 dcl  code			        fixed bin (35);
       23 dcl  com_err_		        entry () options (variable);
       24 dcl  cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin (35));
       25 dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
       26 dcl  me			        char (3) static options (constant) init ("die");
       27 dcl  request_abort_		        condition;
       28 dcl  yes_no		        bit (1);
       29 
       30 	ss_info_ptr = P_ss_info_ptr;
       31 	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
       32 	if code ^= 0 then go to arg_error;
       33 	if arg_count > 0 then do;
       34 	     call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
       35 	     if arg = "-force" | arg = "-fc" then call bce_alm_die;
       36 	     else go to arg_error;
       37 	     if arg_count > 1 then do;
       38 arg_error:	call com_err_ (code, me, "Usage is: die {-force | -fc}");
       39 		return;
       40 	     end;
       41 	end;
       42 	call bce_query$yes_no (yes_no, "Do you really wish bce to die? ");
       43 	if yes_no then call bce_alm_die;
       44 	else signal request_abort_;
       45  /* Begin include file bce_subsystem_info_.incl.pl1 BIM 11/82 */
  1     2 
  1     3 /* format: style3 */
  1     4 
  1     5 /* Deleted unused items, Keith Loepere, 5/84 */
  1     6 
  1     7 
  1     8 /****^  HISTORY COMMENTS:
  1     9*  1) change(86-04-22,Farley), approve(86-07-18,MCR7439),
  1    10*     audit(86-10-08,Fawcett), install(86-10-20,MR12.0-1189):
  1    11*     Added request_handling_opr_aborts flag for save/restore.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 declare	ss_info_ptr	pointer;
  1    15 declare	1 ss_info		aligned based (ss_info_ptr),
  1    16 	  2 request_table_ptr
  1    17 			pointer,
  1    18 	  2 abort_label	label,
  1    19 	  2 name		char (32) unaligned,
  1    20 	  2 arg_list_ptr	pointer,
  1    21 	  2 info_ptr	pointer,
  1    22 	  2 flags           aligned,
  1    23 	    3 forbid_semicolons bit (1) unaligned,
  1    24 	    3 request_handling_opr_aborts bit (1) unaligned;
  1    25 
  1    26 /* End include file bce_subsystem_info_ */
       45 
       46      end;
       47 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0839.0  bce_die.pl1                       >special_ldd>install>MR12.3-1114>bce_die.pl1
45           1    10/21/86  1251.6  bce_subsystem_info_.incl.pl1      >ldd>include>bce_subsystem_info_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_ss_info_ptr                          parameter       pointer                  dcl 15 ref 8 30
arg                                    based           char                     packed unaligned dcl 16 ref 35 35
arg_count                       000100 automatic       fixed bin(17,0)          dcl 17 set ref 31* 33 37
arg_len                         000101 automatic       fixed bin(21,0)          dcl 18 set ref 34* 35 35
arg_list_ptr             16            based           pointer                  level 2 dcl 1-15 set ref 31* 34*
arg_ptr                         000102 automatic       pointer                  dcl 19 set ref 34* 35 35
bce_alm_die                     000010 constant        entry                    external dcl 20 ref 35 43
bce_query$yes_no                000012 constant        entry                    external dcl 21 ref 42
code                            000104 automatic       fixed bin(35,0)          dcl 22 set ref 31* 32 34* 38*
com_err_                        000014 constant        entry                    external dcl 23 ref 38
cu_$arg_count_rel               000016 constant        entry                    external dcl 24 ref 31
cu_$arg_ptr_rel                 000020 constant        entry                    external dcl 25 ref 34
me                              000000 constant        char(3)                  initial packed unaligned dcl 26 set ref 38*
request_abort_                  000106 stack reference condition                dcl 27 ref 44
ss_info                                based           structure                level 1 dcl 1-15
ss_info_ptr                     000116 automatic       pointer                  dcl 1-14 set ref 30* 31 34
yes_no                          000114 automatic       bit(1)                   packed unaligned dcl 28 set ref 42* 43

NAMES DECLARED BY EXPLICIT CONTEXT.
arg_error                       000133 constant        label                    dcl 38 ref 32 35
bce_die                         000040 constant        entry                    external dcl 8

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       302         324     215         312
Length       514     215        22         154      65           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
bce_die                             116 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
bce_die                  000100 arg_count                   bce_die
                         000101 arg_len                     bce_die
                         000102 arg_ptr                     bce_die
                         000104 code                        bce_die
                         000114 yes_no                      bce_die
                         000116 ss_info_ptr                 bce_die

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          signal_op           ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bce_alm_die                   bce_query$yes_no              com_err_                      cu_$arg_count_rel
cu_$arg_ptr_rel

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      8 000035        30 000045        31 000051        32 000063        33 000065        34 000067        35 000111
     37 000130        38 000133        39 000157        42 000160        43 000200        44 000211        46 000214


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
