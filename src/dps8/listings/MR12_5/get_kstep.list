	COMPILATION LISTING OF SEGMENT get_kstep
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1010.0 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 get_kstep:
       14      proc (a_segno, a_kstep, a_code);
       15 
       16 /*
       17*
       18*   Written March 1975 by R. Bratt
       19*
       20*   get_kstep provides generally useful kste validation functions
       21*
       22*   ---> get_kstep checks to see that the segment number is connected to a segment
       23*   USAGE: call get_kstep (segno,kstep,code);
       24*
       25*   ---> get_kstep$dir checks to see that the segment number is connected to a non-phoney directory
       26*   USAGE: call get_kstep$dir (segno,kstep,code);
       27*
       28*
       29*
       30*   segno fixed bin (17) - - - segment number
       31*   kstep ptr - - - pointer to the kstep
       32*   code fixed bin(35) - - - error code (output)
       33*
       34*   */
       35 
       36 
       37 dcl  a_kstep ptr,
       38      dir bit (1) aligned init ("1"b),
       39      a_code fixed bin (35),
       40     (a_segno, segno) fixed bin (17);
       41 
       42 dcl (error_table_$invalidsegno, error_table_$notadir) ext fixed bin (35);
       43 
       44 	/*  START OF:	kst.incl.pl1			  *  *  *  *  *  */
  1     2 
  1     3 /*
  1     4*Modified March 1976 by R. Bratt 
  1     5*Modified November 1984 to remove hdr, Keith Loepere. */
  1     6 
  1     7 
  1     8 /****^  HISTORY COMMENTS:
  1     9*  1) change(86-08-08,GDixon), approve(86-08-08,MCR7388),
  1    10*     audit(86-09-02,Farley), install(86-09-08,MR12.0-1150):
  1    11*     Add warning on use of kste.entryp.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 
  1    15 dcl  pds$kstp ext ptr,
  1    16     (kstp, kstep) ptr;
  1    17 
  1    18 dcl 1 kst aligned based (kstp),			/* KST header declaration */
  1    19     2 lowseg fixed bin (17),				/* lowest segment number described by kst */
  1    20     2 highseg fixed bin (17),				/* highest segment number described by kst */
  1    21     2 highest_used_segno fixed bin (17),		/* highest segment number yet used  */
  1    22     2 lvs fixed bin (8),				/* number of private LVs this process is connected to */
  1    23     2 time_of_bootload fixed bin (71),			/* bootload time during prelinking */
  1    24     2 garbage_collections fixed bin (17) unaligned,	/* KST garbage collections */
  1    25     2 entries_collected fixed bin (17) unaligned,		/* KST entries recovered by garbage collection */
  1    26     2 free_list bit (18) unaligned,			/* relative pointer to first free kste */
  1    27     2 prelinked_ring (7) bit (1) unaligned,		/* rings prelinked in process */
  1    28     2 template bit (1) unaligned,			/* this is a template kst if set */
  1    29     2 allow_256K_connect bit (1) unaligned,		/* can use 256K segments */
  1    30     2 unused_2 bit (9) unaligned,
  1    31     2 uid_hash_bucket (0 : 127) bit (18) unaligned,	/* hash buckets */
  1    32     2 kst_entry (0 refer (kst.lowseg):0 refer (kst.highseg)) aligned like kste, /* kst entries */
  1    33     2 lv (1:256) bit (36),				/* private logical volume connection list */
  1    34     2 end_of_kst bit (36);
  1    35 
  1    36 dcl 1 kste based (kstep) aligned,			/* KST entry declaration */
  1    37     2 fp bit (18) unaligned,				/* forward rel pointer */
  1    38     2 segno fixed bin (17) unaligned,			/* segment number of this kste */
  1    39     2 usage_count (0:7) fixed bin (8) unaligned,		/* outstanding initiates/ring */
  1    40     2 entryp ptr unaligned,				/* branch pointer */
  1    41 						/* See WARNING below for requirements to use entryp. */
  1    42     2 uid bit (36) aligned,				/* unique identifier */
  1    43     2 access_information unaligned,
  1    44       3 dtbm bit (36),				/* date time branch modified */
  1    45       3 extended_access bit (33),			/* extended access from the branch */
  1    46       3 access bit (3),				/* rew */
  1    47       3 ex_rb (3) bit (3),				/* ring brackets from branch */
  1    48     2 pad1 bit (3) unaligned,
  1    49     2 flags unaligned,
  1    50       3 dirsw bit (1),				/* directory switch */
  1    51       3 allow_write bit (1),				/* set if initiated with write permission */
  1    52       3 priv_init bit (1),				/* privileged initiation */
  1    53       3 tms bit (1),				/* transparent modification switch */
  1    54       3 tus bit (1),				/* transparent usage switch */
  1    55       3 tpd bit (1),				/* transparent paging device switch */
  1    56       3 audit bit (1),				/* audit switch */
  1    57       3 explicit_deact_ok bit (1),			/* set if I am willing to have a user force deactivate */
  1    58       3 pad bit (3),
  1    59     2 infcount fixed bin (12) unaligned;		/* _i_f dirsw _t_h_e_n inferior count _e_l_s_e lv index */
  1    60 
  1    61 
  1    62 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    63 /*							       */
  1    64 /* WARNING: Before using kste.entryp to get a pointer to the directory       */
  1    65 /* entry associated with the kst entry, you must first validate its value    */
  1    66 /* by calling sum$getbranch or sum$getbranch_root_my.  This call also locks  */
  1    67 /* the containing directory.  The containing directory must remain locked    */
  1    68 /* during the entire period when kste.entryp and the directory entry are     */
  1    69 /* being referenced.  Once the directory is unlocked, kste.entryp can no     */
  1    70 /* longer be used to get a pointer to the entry within the unlocked	       */
  1    71 /* directory since the dir entry could have been moved within the directory  */
  1    72 /* by another processor.					       */
  1    73 /*							       */
  1    74 /* If you only need a pointer to the directory containing the associated     */
  1    75 /* dir entry (but not to the dir entry itself), you can use:	       */
  1    76 /*    pointer (kste.entryp, 0)				       */
  1    77 /* without calling sum to lock the directory and validate entryp.  GDixon    */
  1    78 /*							       */
  1    79 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    80 
  1    81 /*  END OF:	kst.incl.pl1			  *  *  *  *  *  */
       44 
       45 
       46 	dir = "0"b;
       47 
       48 dir:	entry (a_segno, a_kstep, a_code);
       49 
       50 	segno = a_segno;
       51 	a_kstep = null();
       52 	a_code = 0;
       53 	kstp = pds$kstp;
       54 	if segno < kst.lowseg | segno > kst.highest_used_segno
       55 	then do;
       56 err:	     a_code = error_table_$invalidsegno;
       57 	     return;
       58 	end;
       59 	kstep = addr (kst.kst_entry (segno));
       60 	if unspec (kste.entryp) = "0"b then go to err;
       61 	if dir
       62 	then if ^kste.dirsw | kste.uid = "0"b
       63 	     then do;
       64 		a_code = error_table_$notadir;
       65 		return;
       66 	     end;
       67 	a_kstep = kstep;
       68 	return;
       69 
       70      end get_kstep;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0839.4  get_kstep.pl1                     >special_ldd>install>MR12.3-1114>get_kstep.pl1
44           1    09/18/86  1308.1  kst.incl.pl1                      >ldd>include>kst.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_code                                 parameter       fixed bin(35,0)          dcl 37 set ref 13 48 52* 56* 64*
a_kstep                                parameter       pointer                  dcl 37 set ref 13 48 51* 67*
a_segno                                parameter       fixed bin(17,0)          dcl 37 ref 13 48 50
dir                             000100 automatic       bit(1)                   initial dcl 37 set ref 37* 46* 61
dirsw                     7(12)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 61
entryp                    3            based           pointer                  level 2 packed packed unaligned dcl 1-36 ref 60
error_table_$invalidsegno       000010 external static fixed bin(35,0)          dcl 42 ref 56
error_table_$notadir            000012 external static fixed bin(35,0)          dcl 42 ref 64
flags                     7(12)        based           structure                level 2 packed packed unaligned dcl 1-36
highest_used_segno        2            based           fixed bin(17,0)          level 2 dcl 1-18 ref 54
kst                                    based           structure                level 1 dcl 1-18
kst_entry               110            based           structure                array level 2 dcl 1-18 set ref 59
kste                                   based           structure                level 1 dcl 1-36
kstep                           000104 automatic       pointer                  dcl 1-15 set ref 59* 60 61 61 67
kstp                            000102 automatic       pointer                  dcl 1-15 set ref 53* 54 54 59
lowseg                                 based           fixed bin(17,0)          level 2 dcl 1-18 ref 54 59
pds$kstp                        000014 external static pointer                  dcl 1-15 ref 53
segno                           000101 automatic       fixed bin(17,0)          dcl 37 set ref 50* 54 54 59
uid                       4            based           bit(36)                  level 2 dcl 1-36 ref 61

NAMES DECLARED BY EXPLICIT CONTEXT.
dir                             000031 constant        entry                    external dcl 48
err                             000057 constant        label                    dcl 56 ref 60
get_kstep                       000017 constant        entry                    external dcl 13

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 59
null                                                   builtin function         ref 51
unspec                                                 builtin function         ref 60

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       170         206     112         200
Length       372     112        16         147      56           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_kstep                            72 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_kstep                000100 dir                         get_kstep
                         000101 segno                       get_kstep
                         000102 kstp                        get_kstep
                         000104 kstep                       get_kstep

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return_mac          ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$invalidsegno     error_table_$notadir          pds$kstp




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     37 000007        13 000013        46 000025        48 000026        50 000037        51 000042        52 000044
     53 000045        54 000051        56 000057        57 000063        59 000064        60 000074        61 000076
     64 000105        65 000107        67 000110        68 000111


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
