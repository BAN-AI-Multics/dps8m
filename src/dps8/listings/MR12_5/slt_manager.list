	COMPILATION LISTING OF SEGMENT slt_manager
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1020.6 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 slt_manager:
        9      procedure;
       10 
       11 /* SLT manager for Collection 1 Initialization. */
       12 /* Written November 1982 by C. Hornig */
       13 /* Modified January 1983 by K. Loepere to build and use name ht */
       14 
       15 dcl  Header_ptr ptr parameter;
       16 
       17 dcl  name_table$ external;
       18 dcl  slt$ external;
       19 
       20 dcl  hash_index_ entry (ptr, fixed bin (35), fixed bin (35), fixed bin (35))
       21      returns (fixed bin (35));
       22 
       23 dcl  (tsltep, tnamep, tpathp, taclp) ptr;
       24 dcl  segment_no fixed bin (15);
       25 dcl  namex fixed bin;
       26 dcl  hash_value fixed bin;  		/* what name hashes to */
       27 dcl  name_num fixed bin;		/* loop index for names */
       28 dcl 1 name_entry aligned like segnam.names based (name_entry_ptr);
       29 dcl  name_entry_ptr ptr;
       30 
       31 dcl  size builtin;
       32 
       33 build_entry:
       34      entry (Header_ptr) returns (ptr);
       35 
       36 	names_ptr = addr (name_table$);		/* establish addressability */
       37 	sltp = addr (slt$);
       38 
       39 	tsltep = Header_ptr;			/* header begins with SLTE */
       40 	tnamep = addrel (tsltep, size (tsltep -> slte));	/* followed by names */
       41 
       42 	if tsltep -> slte.branch_required then do;	/* and (optionally) path and ACL */
       43 	     tpathp = addrel (tnamep, currentsize (tnamep -> segnam));
       44 	     taclp = addr (tpathp -> path.acls);
       45 	     end;
       46 
       47 	if tsltep -> slte.init_seg			/* pick a segment number */
       48 	then segment_no, slt.last_init_seg = slt.last_init_seg + 1;
       49 	else segment_no, slt.last_sup_seg = slt.last_sup_seg + 1;
       50 
       51 	sltep = addr (slt.seg (segment_no));		/* use this from now on */
       52 	slte = tsltep -> slte;			/* copy in the SLTE */
       53 	slte_uns.segno = segment_no;			/* save the segment number */
       54 
       55 	namep = allocate_nt (currentsize (tnamep -> segnam));
       56 						/* allocate space for a name */
       57 	segnam.count = tnamep -> segnam.count;		/* set the count */
       58 	segnam = tnamep -> segnam;			/* copy the rest */
       59 	slte.names_ptr = rel (namep);			/* set up ptr in SLTE */
       60 
       61 	if slte.branch_required then do;		/* more work */
       62 	     pathp = allocate_nt (currentsize (tpathp -> path) - 1);
       63 						/* space for the pathname */
       64 	     path.size = tpathp -> path.size;
       65 	     path = tpathp -> path;
       66 	     slte.path_ptr = rel (pathp);
       67 
       68 	     if slte.acl_provided then do;
       69 		aclp = allocate_nt (currentsize (taclp -> acls));
       70 						/* and for ACL's */
       71 		acls.count = taclp -> acls.count;
       72 		acls = taclp -> acls;
       73 		end;
       74 	     end;
       75 
       76 	do name_num = 1 to segnam.count;		/* hash in names */
       77 	     hash_value = hash_index_ (addr (segnam.names (name_num).name), 
       78 		length (segnam.names (name_num).name), 0,
       79 		dimension (name_seg.ht, 1));
       80 	     segnam.names (name_num).hp = name_seg.ht (hash_value);  /* thread in list */
       81 	     name_seg.ht (hash_value) = rel (addr (segnam.names (name_num)));
       82 	     segnam.names (name_num).segno = bit (fixed (segment_no, 12), 12);
       83 	end;
       84 
       85 	return (baseptr (segment_no));
       86 
       87 /* * * * * * * * * ALLOCATE_NT * * * * * * * * */
       88 
       89 allocate_nt:
       90      procedure (Words) returns (ptr);
       91 
       92 dcl  Words fixed bin;
       93 dcl  ntp ptr;
       94 
       95 	ntp = ptr (names_ptr, name_seg.next_loc);
       96 	name_seg.next_loc = rel (addrel (ntp, Words));
       97 	return (ntp);
       98      end allocate_nt;
       99 
      100 /* * * * * * * * * * GET_SEG_PTR * * * ** * * * * */
      101 
      102 get_seg_ptr:
      103      entry (Name) returns (ptr);
      104 
      105 dcl  Name char (32) aligned parameter;
      106 
      107 	sltp = addr (slt$);
      108 	names_ptr = addr (name_table$);
      109 
      110 	hash_value = hash_index_ (addr (Name), length (Name), 0,
      111 	     dimension (name_seg.ht, 1));
      112 	do name_entry_ptr = ptr (names_ptr, name_seg.ht (hash_value))
      113 	     repeat (ptr (names_ptr, name_entry.hp))
      114 		while (rel (name_entry_ptr));	/* scan down names that hash alike */
      115 	     if name_entry.name = Name then return (baseptr (fixed (name_entry.segno, 12)));  /* until (if) we find actual match */
      116 	end;
      117 	return (null ());
      118 
  1     1 /* BEGIN INCLUDE FILE slt.incl.pl1 --- Last modified 2/76 SHW */
  1     2 
  1     3 /* Declarations for Segment Loading Table header and array.
  1     4*
  1     5*   Used by Initialization and MST Checker subroutines */
  1     6 
  1     7 dcl sltp ptr,					/* pointer to base of SLT segment */
  1     8     names_ptr ptr,					/* pointer to base of SLT names segment */
  1     9     namep ptr,					/* pointer to segment name list block */
  1    10     pathp ptr,					/* pointer to segment's directory path name */
  1    11     aclp ptr;					/* pointer to acl structure */
  1    12 
  1    13 declare 1 slt based (sltp) aligned,			/* declaration of Segment Loading Table (SLT) */
  1    14 	2 name_seg_ptr ptr,				/* words 0-1, pointer (ITS pair) to name segment */
  1    15 	2 free_core_start fixed bin (24),		/* word 2, start of free core after perm-wired */
  1    16 	2 first_sup_seg fixed bin (18),		/* word 3, first supervisor segment number */
  1    17 	2 last_sup_seg fixed bin (18), 		/* word 4, last supervisor segment number */
  1    18 	2 first_init_seg fixed bin (18),		/* word 5, first initializer segment number */
  1    19 	2 last_init_seg fixed bin (18),		/* word 6, last initializer segment number */
  1    20 	2 free_core_size fixed bin (24),		/* size (in words) of free core after perm-wired */
  1    21 	2 seg (0:8191) aligned,			/* segment entries (4 words each) */
  1    22 	  3 slte (4) fixed bin (35);			/* Space for SLT entries */
  1    23 
  1    24 /* auxiliary segment of SLT for storing of segment names and directory path names */
  1    25 
  1    26 declare 1 name_seg based (names_ptr) aligned,		/* name segment header */
  1    27 	2 pad bit (18) unal,
  1    28 	2 next_loc bit (18) unal,			/* Next available free location in name seg */
  1    29 	2 ht (0:127) bit (18) aligned;		/* Names hash table */
  1    30 
  1    31 declare 1 segnam based (namep) aligned,			/* declaration for segment name block */
  1    32 	2 count fixed bin (17),			/* number of segment names in this block */
  1    33 	2 names (50 refer (segnam.count)),		/* segment name array */
  1    34 	  3 hp bit (18) unal,			/* hash thread pointer */
  1    35 	  3 ref bit (1) unal,			/* "1"b if name referenced */
  1    36 	  3 pad bit (5) unal,
  1    37 	  3 segno bit (12) unal,			/* segment number associated with this name */
  1    38 	  3 name char (32) unal;			/* space for name (max 32 characters) */
  1    39 
  1    40 declare 1 path based (pathp) aligned,			/* declaration for directory path name */
  1    41 	2 size fixed bin (17),			/* length of pathname */
  1    42 	2 name char (168 refer (path.size)) unal,	/* directory path name */
  1    43 	2 acls fixed bin;				/* ACL list starts here */
  1    44 
  1    45 declare 1 acls based (aclp) aligned,			/* declaration for acl list */
  1    46 	2 count fixed bin,				/* number of entries in acl list */
  1    47 	2 acl (50 refer (acls.count)),		/* array of acl entries */
  1    48 	  3 userid char (32),			/* user specification */
  1    49 	  3 mode bit (36) aligned,			/* mode for the specified user */
  1    50 	  3 pad bit (36) aligned,
  1    51 	  3 code fixed bin;
  1    52 
  1    53 
  1    54 /* END INCLUDE FILE slt.incl.pl1 */
      119 
  2     1 /* BEGIN INCLUDE FILE slte.incl.pl1 */
  2     2 /* Declaration for Segment Loading Table Entry structure.
  2     3*   Used by Initialization, MST Generation, and MST Checker subroutines */
  2     4 /* modified 5/4/76 by Noel I. Morris	*/
  2     5 /* last modified 12/12/83 by Keith Loepere for breakpointable */
  2     6 /* format: style3 */
  2     7 
  2     8 dcl	sltep		ptr;
  2     9 
  2    10 dcl	1 slte_uns	based (sltep) aligned,
  2    11 	( 2 names_ptr	bit (18),			/* rel pointer to thread of names */
  2    12 	  2 path_ptr	bit (18),			/* rel pointer to pathname (if present) */
  2    13 /**** End of word 1 */
  2    14 	  2 access	bit (4),			/* SDW access bit (REWP) */
  2    15 	  2 cache		bit (1),			/* Segment to be allowed in cache */
  2    16 	  2 abs_seg	bit (1),			/* segment is an abs seg if ON */
  2    17 	  2 firmware_seg	bit (1),			/* load in low 256 */
  2    18 	  2 layout_seg	bit (1),			/* mailbox & such */
  2    19 	  2 breakpointable  bit (1),			/* includes breakpoint_page */
  2    20 	  2 pad1		bit (3),			/* unused */
  2    21 	  2 wired		bit (1),			/* segment is wired if ON */
  2    22 	  2 paged		bit (1),			/* segment is paged if ON */
  2    23 	  2 per_process	bit (1),			/* segment is per-process if ON */
  2    24 	  2 pad3		bit (2),
  2    25 	  2 acl_provided	bit (1),			/* ON if acl structure follows path_name on MST */
  2    26 /**** End of 1st half of word 2 */
  2    27 	  2 pad4		bit (3),
  2    28 	  2 branch_required bit (1),			/* path name supplied if ON */
  2    29 	  2 init_seg	bit (1),			/* segment is init_seg if ON */
  2    30 	  2 temp_seg	bit (1),			/* segment is temp_seg if ON */
  2    31 	  2 link_provided	bit (1),			/* linkage segment provided if ON */
  2    32 	  2 link_sect	bit (1),			/* segment is linkage segment if ON */
  2    33 	  2 link_sect_wired bit (1),			/* linkage segment is wired if ON */
  2    34 	  2 combine_link	bit (1),			/* linkage is combined if ON */
  2    35 	  2 pre_linked	bit (1),			/* lot entry has been made if ON */
  2    36 	  2 defs		bit (1),			/* segment is definitions segment if ON */
  2    37 /***** End of word 2 */
  2    38 	  2 pad5		bit (6),
  2    39 	  2 cur_length	fixed bin (9) uns,		/* current length of segment (in 1024 word blocks) */
  2    40 	  2 ringbrack	(3) fixed bin (3) uns,	/* ringbrackets */
  2    41 	  2 segno		fixed bin (18) uns,		/* text/link segment number */
  2    42 /***** End of word 3 */
  2    43 	  2 pad7		bit (3),
  2    44 	  2 max_length	fixed bin (9) uns,		/* maximum length for segment */
  2    45 	  2 bit_count	fixed bin (24) uns
  2    46 	  )		unaligned;		/* bitcount of segment */
  2    47 
  2    48 dcl	1 slte		based (sltep) aligned,
  2    49 	( 2 names_ptr	bit (18),			/* rel pointer to thread of names */
  2    50 	  2 path_ptr	bit (18),			/* rel pointer to pathname (if present) */
  2    51 	  2 access	bit (4),			/* SDW access bit (REWP) */
  2    52 	  2 cache		bit (1),			/* Segment to be allowed in cache */
  2    53 	  2 abs_seg	bit (1),			/* segment is an abs seg if ON */
  2    54 	  2 firmware_seg    bit (1),
  2    55 	  2 layout_seg      bit (1),
  2    56 	  2 breakpointable  bit (1),
  2    57 	  2 pad2		bit (3),
  2    58 	  2 wired		bit (1),			/* segment is wired if ON */
  2    59 	  2 paged		bit (1),			/* segment is paged if ON */
  2    60 	  2 per_process	bit (1),			/* segment is per-process if ON */
  2    61 	  2 pad3		bit (2),
  2    62 	  2 acl_provided	bit (1),			/* ON if acl structure follows path_name on MST */
  2    63 	  2 pad4		bit (3),
  2    64 	  2 branch_required bit (1),			/* path name supplied if ON */
  2    65 	  2 init_seg	bit (1),			/* segment is init_seg if ON */
  2    66 	  2 temp_seg	bit (1),			/* segment is temp_seg if ON */
  2    67 	  2 link_provided	bit (1),			/* linkage segment provided if ON */
  2    68 	  2 link_sect	bit (1),			/* segment is linkage segment if ON */
  2    69 	  2 link_sect_wired bit (1),			/* linkage segment is wired if ON */
  2    70 	  2 combine_link	bit (1),			/* linkage is combined if ON */
  2    71 	  2 pre_linked	bit (1),			/* lot entry has been made if ON */
  2    72 	  2 defs		bit (1),			/* segment is definitions segment if ON */
  2    73 	  2 pad5		bit (6),
  2    74 	  2 cur_length	bit (9),			/* current length of segment (in 1024 word blocks) */
  2    75 	  2 ringbrack	(3) bit (3),		/* ringbrackets */
  2    76 	  2 segno		bit (18),			/* text/link segment number */
  2    77 	  2 pad6		bit (3),
  2    78 	  2 max_length	bit (9),			/* maximum length for segment */
  2    79 	  2 bit_count	bit (24)
  2    80 	  )		unaligned;		/* bitcount of segment */
  2    81 
  2    82 /* END INCLUDE FILE slte.incl.pl1 */
      120 
      121 
      122      end slt_manager;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0801.1  slt_manager.pl1                   >spec>install>1110>slt_manager.pl1
119          1    05/24/82  1005.0  slt.incl.pl1                      >ldd>include>slt.incl.pl1
120          2    07/11/84  0937.3  slte.incl.pl1                     >ldd>include>slte.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
Header_ptr                             parameter       pointer                  dcl 15 ref 33 39
Name                                   parameter       char(32)                 dcl 105 set ref 102 110 110 110 110 115
Words                                  parameter       fixed bin(17,0)          dcl 92 ref 89 96
acl_provided              1(17)        based           bit(1)                   level 2 packed packed unaligned dcl 2-48 set ref 68
aclp                            000126 automatic       pointer                  dcl 1-7 set ref 69* 71 72
acls                                   based           fixed bin(17,0)          level 2 in structure "path" dcl 1-40 in procedure
                                                                                  "slt_manager" set ref 44
acls                                   based           structure                level 1 dcl 1-45 in procedure "slt_manager" set ref
                                                                                  69 69 72* 72
branch_required           1(21)        based           bit(1)                   level 2 packed packed unaligned dcl 2-48 set ref 42
                                                                                  61
count                                  based           fixed bin(17,0)          level 2 in structure "acls" dcl 1-45 in procedure
                                                                                  "slt_manager" set ref 69 69 71* 71 72
count                                  based           fixed bin(17,0)          level 2 in structure "segnam" dcl 1-31 in procedure
                                                                                  "slt_manager" set ref 43 55 55 57* 57 58 76
hash_index_                     000014 constant        entry                    external dcl 20 ref 77 110
hash_value                      000111 automatic       fixed bin(17,0)          dcl 26 set ref 77* 80 81 110* 112
hp                                     based           bit(18)                  level 2 in structure "name_entry" packed packed
                                                                                  unaligned dcl 28 in procedure "slt_manager" ref
                                                                                  116
hp                        1            based           bit(18)                  array level 3 in structure "segnam" packed packed
                                                                                  unaligned dcl 1-31 in procedure "slt_manager" set
                                                                                  ref 80*
ht                        1            based           bit(18)                  array level 2 dcl 1-26 set ref 77 77 80 81* 110 110
                                                                                  112
init_seg                  1(22)        based           bit(1)                   level 2 packed packed unaligned dcl 2-48 set ref 47
last_init_seg             6            based           fixed bin(18,0)          level 2 dcl 1-13 set ref 47 47*
last_sup_seg              4            based           fixed bin(18,0)          level 2 dcl 1-13 set ref 49 49*
name                      2            based           char(32)                 array level 3 in structure "segnam" packed packed
                                                                                  unaligned dcl 1-31 in procedure "slt_manager" set
                                                                                  ref 77 77 77 77
name                      1            based           char(32)                 level 2 in structure "name_entry" packed packed
                                                                                  unaligned dcl 28 in procedure "slt_manager" ref
                                                                                  115
name_entry                             based           structure                level 1 dcl 28
name_entry_ptr                  000114 automatic       pointer                  dcl 29 set ref 112* 112* 115 115* 116
name_num                        000112 automatic       fixed bin(17,0)          dcl 27 set ref 76* 77 77 77 77 80 81 82*
name_seg                               based           structure                level 1 dcl 1-26
name_table$                     000010 external static fixed bin(17,0)          dcl 17 set ref 36 108
namep                           000122 automatic       pointer                  dcl 1-7 set ref 55* 57 58 59 76 77 77 77 77 80 81 82
names                     1            based           structure                array level 2 dcl 1-31 set ref 81
names_ptr                              based           bit(18)                  level 2 in structure "slte" packed packed unaligned
                                                                                  dcl 2-48 in procedure "slt_manager" set ref 59*
names_ptr                       000120 automatic       pointer                  dcl 1-7 in procedure "slt_manager" set ref 36* 77 77
                                                                                  80 81 95 95 96 108* 110 110 112 112 116
next_loc                  0(18)        based           bit(18)                  level 2 packed packed unaligned dcl 1-26 set ref 95
                                                                                  96*
ntp                             000142 automatic       pointer                  dcl 93 set ref 95* 96 97
path                                   based           structure                level 1 dcl 1-40 set ref 62 65* 65
path_ptr                  0(18)        based           bit(18)                  level 2 packed packed unaligned dcl 2-48 set ref 66*
pathp                           000124 automatic       pointer                  dcl 1-7 set ref 62* 64 65 66
seg                      10            based           structure                array level 2 dcl 1-13 set ref 51
segment_no                      000110 automatic       fixed bin(15,0)          dcl 24 set ref 47* 49* 51 53 82 85
segnam                                 based           structure                level 1 dcl 1-31 set ref 43 55 55 58* 58
segno                     2(18)        based           fixed bin(18,0)          level 2 in structure "slte_uns" packed packed
                                                                                  unsigned unaligned dcl 2-10 in procedure
                                                                                  "slt_manager" set ref 53*
segno                     0(24)        based           bit(12)                  level 2 in structure "name_entry" packed packed
                                                                                  unaligned dcl 28 in procedure "slt_manager" ref
                                                                                  115
segno                     1(24)        based           bit(12)                  array level 3 in structure "segnam" packed packed
                                                                                  unaligned dcl 1-31 in procedure "slt_manager" set
                                                                                  ref 82*
size                                   based           fixed bin(17,0)          level 2 in structure "path" dcl 1-40 in procedure
                                                                                  "slt_manager" set ref 44 62 64* 64 65
size                                                   builtin function         dcl 31 in procedure "slt_manager" ref 40
slt                                    based           structure                level 1 dcl 1-13
slt$                            000012 external static fixed bin(17,0)          dcl 18 set ref 37 107
slte                                   based           structure                level 1 dcl 2-48 set ref 40 52* 52
slte_uns                               based           structure                level 1 dcl 2-10
sltep                           000130 automatic       pointer                  dcl 2-8 set ref 51* 52 53 59 61 66 68
sltp                            000116 automatic       pointer                  dcl 1-7 set ref 37* 47 47 49 49 51 107*
taclp                           000106 automatic       pointer                  dcl 23 set ref 44* 69 69 71 72
tnamep                          000102 automatic       pointer                  dcl 23 set ref 40* 43 43 55 55 57 58
tpathp                          000104 automatic       pointer                  dcl 23 set ref 43* 44 62 64 65
tsltep                          000100 automatic       pointer                  dcl 23 set ref 39* 40 40 42 47 52

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
namex                                  automatic       fixed bin(17,0)          dcl 25

NAMES DECLARED BY EXPLICIT CONTEXT.
allocate_nt                     000444 constant        entry                    internal dcl 89 ref 55 62 69
build_entry                     000031 constant        entry                    external dcl 33
get_seg_ptr                     000326 constant        entry                    external dcl 102
slt_manager                     000015 constant        entry                    external dcl 8

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 36 37 44 51 77 77 81 107 108 110 110
addrel                                                 builtin function         ref 40 43 96
baseptr                                                builtin function         ref 85 115
bit                                                    builtin function         ref 82
currentsize                                            builtin function         ref 43 55 55 62 69 69
dimension                                              builtin function         ref 77 77 110 110
fixed                                                  builtin function         ref 82 115
length                                                 builtin function         ref 77 77 110 110
null                                                   builtin function         ref 117
ptr                                                    builtin function         ref 95 112 116
rel                                                    builtin function         ref 59 66 81 96 112

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       566         604     506         576
Length      1002     506        16         162      60           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
slt_manager                         120 external procedure  is an external procedure.  
allocate_nt                             internal procedure  shares stack frame of external procedure slt_manager.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
slt_manager              000100 tsltep                      slt_manager
                         000102 tnamep                      slt_manager
                         000104 tpathp                      slt_manager
                         000106 taclp                       slt_manager
                         000110 segment_no                  slt_manager
                         000111 hash_value                  slt_manager
                         000112 name_num                    slt_manager
                         000114 name_entry_ptr              slt_manager
                         000116 sltp                        slt_manager
                         000120 names_ptr                   slt_manager
                         000122 namep                       slt_manager
                         000124 pathp                       slt_manager
                         000126 aclp                        slt_manager
                         000130 sltep                       slt_manager
                         000142 ntp                         allocate_nt

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          signal_op           ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hash_index_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
name_table$                   slt$




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      8 000014        33 000024        36 000037        37 000041        39 000043        40 000047        42 000052
     43 000055        44 000062        47 000070        49 000100        51 000104        52 000107        53 000112
     55 000114        57 000122        58 000124        59 000135        61 000140        62 000144        64 000153
     65 000155        66 000170        68 000174        69 000200        71 000206        72 000210        76 000221
     77 000231        80 000264        81 000272        82 000275        83 000303        85 000305       102 000322
    107 000334       108 000337       110 000341       112 000371       115 000400       116 000424       117 000432
     89 000444        95 000446        96 000453        97 000462


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
