	COMPILATION LISTING OF SEGMENT !BBBJZjXmflLqNN
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1059.8 mst Sat
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*   *                                                         *
        5*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*   *                                                         *
        7*   * Copyright (c) 1972 by Massachusetts Institute of        *
        8*   * Technology and Honeywell Information Systems, Inc.      *
        9*   *                                                         *
       10*   *********************************************************** */
       11 
       12 
       13 /* format: style3 */
       14 ipc_data_:
       15      proc;
       16 
       17 /* Static values needed by user ring ipc - replaces an alm version */
       18 /* These are used to implement fast channels efficiently by making it */
       19 /* inexpensive to detect if a process has pending wakeups. */
       20 
       21 /* Coded by E Donner Jan 1981 */
       22 /* Modified September 1983 by Chris Jones to only count event calls pending */
       23 
       24 /* automatic */
       25 
       26 dcl	1 cds_arguments	aligned like cds_args;
       27 dcl	code		fixed bin (35);
       28 
       29 /* constants  */
       30 
       31 dcl	MOI		char (9) static init ("ipc_data_") options (constant);
       32 
       33 /* Builtins */
       34 
       35 dcl	addr		builtin;
       36 dcl	null		builtin;
       37 dcl	size		builtin;
       38 dcl	string		builtin;
       39 dcl	unspec		builtin;
       40 
       41 /* entries */
       42 
       43 dcl	com_err_		entry options (variable);
       44 dcl	create_data_segment_
       45 			entry (ptr, fixed bin (35));
       46 
       47 
       48 dcl	1 ipc_data_	aligned,
       49 	  2 event_calls_pending
       50 			fixed bin,		/* count of call events pending */
       51 	  2 fast_channel_events
       52 			bit (36);			/* special events pending */
       53 
       54 
       55 	unspec (ipc_data_) = ""b;
       56 
       57 /* Fill in arguments to cds before creating data base */
       58 
       59 
       60 	cds_arguments.sections (2).p = addr (ipc_data_);
       61 	cds_arguments.sections (2).len = size (ipc_data_);
       62 	cds_arguments.sections (2).struct_name = MOI;
       63 
       64 	cds_arguments.seg_name = MOI;
       65 	cds_arguments.exclude_array_ptr = null;
       66 
       67 	string (cds_arguments.switches) = "0"b;
       68 	cds_arguments.switches.have_static = "1"b;
       69 	cds_arguments.switches.separate_static = "1"b;
       70 
       71 	call create_data_segment_ (addr (cds_arguments), code);
       72 	if code ^= 0
       73 	then call com_err_ (MOI, code);
       74 	return;
       75 
       76 
  1     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
       77 
       78 
       79      end ipc_data_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0803.3  !BBBJZjXmflLqNN.pl1               >spec>install>1110>ipc_data_.cds
77           1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MOI                             000000 constant        char(9)                  initial packed unaligned dcl 31 set ref 62 64 72*
addr                                                   builtin function         dcl 35 ref 60 71 71
cds_args                               based           structure                level 1 dcl 1-3
cds_arguments                   000100 automatic       structure                level 1 dcl 26 set ref 71 71
code                            000145 automatic       fixed bin(35,0)          dcl 27 set ref 71* 72 72*
com_err_                        000012 constant        entry                    external dcl 43 ref 72
create_data_segment_            000014 constant        entry                    external dcl 44 ref 71
exclude_array_ptr        42     000100 automatic       pointer                  level 2 dcl 26 set ref 65*
have_static              44(03) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 26 set ref 68*
ipc_data_                       000146 automatic       structure                level 1 dcl 48 set ref 55* 60 61
len                       2     000100 automatic       fixed bin(18,0)          array level 3 dcl 26 set ref 61*
null                                                   builtin function         dcl 36 ref 65
p                               000100 automatic       pointer                  array level 3 dcl 26 set ref 60*
sections                        000100 automatic       structure                array level 2 dcl 26
seg_name                 30     000100 automatic       char(32)                 level 2 dcl 26 set ref 64*
separate_static          44(01) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 26 set ref 69*
size                                                   builtin function         dcl 37 ref 61
string                                                 builtin function         dcl 38 set ref 67*
struct_name               3     000100 automatic       char(32)                 array level 3 dcl 26 set ref 62*
switches                 44     000100 automatic       structure                level 2 dcl 26 set ref 67*
unspec                                                 builtin function         dcl 39 set ref 55*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
exclude_names                          based           char(32)                 array packed unaligned dcl 1-18

NAME DECLARED BY EXPLICIT CONTEXT.
ipc_data_                       000013 constant        entry                    external dcl 14

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       150         166      75         160
Length      1120      75        16         716      52           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ipc_data_                           122 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ipc_data_                000100 cds_arguments               ipc_data_
                         000145 code                        ipc_data_
                         000146 ipc_data_                   ipc_data_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000012        55 000020        60 000022        61 000024        62 000026        64 000031        65 000034
     67 000036        68 000037        69 000041        71 000043        72 000055        74 000074


Object Segment >spec>install>1110>ipc_data_
Created on 11/11/89  1059.9 mst Sat
by Hirneisen.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986
with separate static

        Object    Text    Defs    Link    Symb  Static
Start        0       0       0      42      52      40
Length     214       0      40      10     126       2


4 Definitions:


segname:    ipc_data_

stat|0          event_calls_pending
stat|1          fast_channel_events
symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
