ASSEMBLY LISTING OF SEGMENT >spec>install>1110>bcd_to_ascii_.alm                                                                                                                                    
ASSEMBLED ON:	11/11/89  0950.4 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    13  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    14  "
                                    15  "
                                    16  "	T  R  A  N  S  L  A  T  E    B  C  D    T  O    A  S  C  I  I
                                    17  "
                                    18  "
                                    19  "  This routine will translate a number of bcd characters to ascii. It
                                    20  "  takes three parameters. Parameter 1 is a pointer to an aligned
                                    21  "  bcd string. Parameter 2 is the length of that string (number of bcd
                                    22  "  characters). Parameter 3 is a pointer to an aligned receiving field
                                    23  "  for the translated ascii output.
                                    24  "
                                    25  "  The entry point, bcd_to_ascii_, takes a bit string as input,
                                    26  "  and produces a character string of length divide(length(input), 6, 24)
                                    27  "  as output.
                                    28  "
                                    29  "  PL/I Usage:
                                    30  "  dcl bcd_to_ascii_ entry(bit(*), char(*))
                                    31  "  call bcd_to_ascii_ (input bits, output chars)
                                    32  "
                                    33  "  The entry point, ascii_to_bcd_, takes a character string
                                    34  "  as input and produces a bit string of length divide (length (output),6,24)
                                    35  "  as output. If the output string has more bcd char positions
                                    36  "  than there are input chars to convert, then the output is blank filled.
                                    37  "
                                    38  "  PL/1 Usage:
                                    39  "
                                    40  "  dcl  ascii_to_bcd_ entry (char (*), bit (*));
                                    41  "  call ascii_to_bcd_ (input_chars, output_bits);
                                    42  "
                                    43  "	WRITTEN BY DICK SNYDER JANUARY 3,1972
                                    44  "	MODIFIED BY T. CASEY JUNE 1974, AUGUST 1974
                                    45  "	REWRITTEN BY D. KAYDEN DECEMBER 1974
                                    46  "         ENTRY POINT ADDED BY R.J.C.KISSEL 11/09/76
                                    47  "	MODIFIED BY R.H. MORRISON  5/19/76
                                    48  "	MODIFIED BY R.J.C. KISSEL 09/19/77 to pad with blanks
                                    49  "	MODIFIED BY J. A. BUSH 11/10/82 to add ascii_to_bcd_ entry point
                                    50  "
                                    51  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    52  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    000000                          53  	name	bcd_to_ascii_
                        000000      54  	entry	gcos_cv_gebcd_ascii_
                        000012      55  	segdef	bcd_to_ascii_
                        000033      56  	segdef	ascii_to_bcd_
                                    57  
    000000                          58  gcos_cv_gebcd_ascii_:
    000000  aa  0 00002 3521 20     59  	eppbp	ap|2,*		bp->input data
    000001  aa  2 00000 3521 20     60  	eppbp	bp|0,*
    000002  aa  0 00004 2351 20     61  	lda	ap|4,*		get char count
    000003  aa  0 00006 3501 20     62  	eppap	ap|6,*		ap->output buffer
    000004  aa  0 00000 3501 20     63  	eppap	ap|0,*
    000005  aa  0 00140 1605 40     64  	mvt	(pr,rl),(pr,rl)
    000006  aa   200000 020005      65  	desc6a	bp|0,al
    000007  aa   000000 000005      66  	desc9a	ap|0,al
    000010  0a   000056 0000 00     67  	arg	bta_tab
    000011  aa  7 00044 7101 20     68  	short_return
    000012                          69  bcd_to_ascii_:
    000012  aa  0 00002 3515 20     70  	epp1	ap|2,*		address of source string to pr1
    000013  aa  0 00004 3535 20     71  	epp3	ap|4,*		address of target string to pr3
    000014  aa   000000 2230 03     72  	ldx3	0,du		set x3 not to skip parent pointer if none
    000015  aa  0 00000 7221 00     73  	lxl2	ap|0		load arg list code value
    000016  aa   000004 3020 03     74  	canx2	=o0000004,du	check for no parent pointer (code 4)
    000017  0a   000021 6010 00     75  	tnz	*+2		transfer if no parent pointer
    000020  aa   000002 2230 03     76  	ldx3	2,du		parent pointer, set x3 to skip it
    000021  aa  0 00006 2361 33     77  	ldq	ap|6,x3*		load source string descriptor
    000022  0a   000055 3760 00     78  	anq	mask		drop all but string size  bits
    000023  aa   000006 5060 07     79  	div	6,dl		get length of input in BCD characters
    000024  aa  0 00010 2351 33     80  	lda	ap|8,x3*		load target string descriptor
    000025  0a   000055 3750 00     81  	ana	mask		drop all but string size bits
                                    82  	even			"EIS address must be even
    000026  aa  0 20140 1605 40     83  	mvt	(pr,rl),(pr,rl),fill(020)	now do the bcd to ascii
    000027  aa   100000 020006      84  	desc6a	1|0,ql
    000030  aa   300000 000005      85  	desc9a	3|0,al
    000031  0a   000056 0000 00     86  	arg	bta_tab
    000032  aa  7 00044 7101 20     87  	short_return
                                    88  
    000033                          89  ascii_to_bcd_:			" ascii to bcd entry
    000033  aa  0 00002 3515 20     90  	epp1	ap|2,*		address of source string to pr1
    000034  aa  0 00004 3535 20     91  	epp3	ap|4,*		address of target string to pr3
    000035  aa   000000 2230 03     92  	ldx3	0,du		set x3 not to skip parent pointer if none
    000036  aa  0 00000 7221 00     93  	lxl2	ap|0		load arg list code value
    000037  aa   000004 3020 03     94  	canx2	=o0000004,du	check for no parent pointer (code 4)
    000040  0a   000042 6010 00     95  	tnz	*+2		transfer if no parent pointer
    000041  aa   000002 2230 03     96  	ldx3	2,du		parent pointer, set x3 to skip it
    000042  aa  0 00010 2361 33     97  	ldq	ap|8,x3*		load target string descriptor
    000043  0a   000055 3760 00     98  	anq	mask		drop all but string size  bits
    000044  aa   000006 5060 07     99  	div	6,dl		get length of target in BCD characters
    000045  aa  0 00006 2351 33    100  	lda	ap|6,x3*		load source string descriptor
    000046  0a   000055 3750 00    101  	ana	mask		drop all but string size bits
    000047  aa   000000 0110 03    102  	even			"EIS address must be even
    000050  aa  0 40140 1605 40    103  	mvt	(pr,rl),(pr,rl),fill(040)	now do the ascii to bcd
    000051  aa   100000 000005     104  	desc9a	1|0,al
    000052  aa   300000 020006     105  	desc6a	3|0,ql
    000053  0a   000076 0000 00    106  	arg	atb_tab
    000054  aa  7 00044 7101 20    107  	short_return
                                   108  
    000055  aa   000077 777777     109  mask:	oct	000077777777
                                   110  	even
                                   111  
    000056  aa  060 061 062 063    112  bta_tab:	aci	X0123456789[#@:>?X
    000057  aa  064 065 066 067
    000060  aa  070 071 133 043
    000061  aa  100 072 076 077
    000062  aa  040 141 142 143    113  	aci	X abcdefghi&.](<\X
    000063  aa  144 145 146 147
    000064  aa  150 151 046 056
    000065  aa  135 050 074 134
    000066  aa  136 152 153 154    114  	aci	X^jklmnopqr-$*);'X
    000067  aa  155 156 157 160
    000070  aa  161 162 055 044
    000071  aa  052 051 073 047
    000072  aa  053 057 163 164    115  	aci	X+/stuvwxyz_,%="!X
    000073  aa  165 166 167 170
    000074  aa  171 172 137 054
    000075  aa  045 075 042 041
                                   116  
    000076                         117  atb_tab:
                                   118  " ascii chars 000 - 037 (8) - invalid bcd chars set to bcd "?" (ignore char)
    000076  aa   017017 017017     119  	oct	017017017017,017017017017,017017017017,017017017017
    000077  aa   017017 017017 
    000100  aa   017017 017017 
    000101  aa   017017 017017 
    000102  aa   017017 017017     120  	oct	017017017017,017017017017,017017017017,017017017017
    000103  aa   017017 017017 
    000104  aa   017017 017017 
    000105  aa   017017 017017 
                                   121  " ascii chars 040 - 057 (8) = " !"#$%&'()*+,-./"
    000106  aa   020077 076013     122  	oct	020077076013,053074032057,035055054060,073052033061
    000107  aa   053074 032057 
    000110  aa   035055 054060 
    000111  aa   073052 033061 
                                   123  " ascii chars 060 - 077 (8) = "0123456789:semicolon<=>?"
    000112  aa   000001 002003     124  	oct	000001002003,004005006007,010011015056,036075016017
    000113  aa   004005 006007 
    000114  aa   010011 015056 
    000115  aa   036075 016017 
                                   125  " ascii chars 100 - 117 (8) = "@ABCDEFGHIJKLMNO"
    000116  aa   014021 022023     126  	oct	014021022023,024025026027,030031041042,043044045046
    000117  aa   024025 026027 
    000120  aa   030031 041042 
    000121  aa   043044 045046 
                                   127  " ascii chars 120 - 137 (8) = "PQRSTUVWXYZ[\]^_"
    000122  aa   047050 051062     128  	oct	047050051062,063064065066,067070071012,037034040072
    000123  aa   063064 065066 
    000124  aa   067070 071012 
    000125  aa   037034 040072 
                                   129  " ascii chars 140 - 157 (8) = "`abcdefghijklmno"
    000126  aa   017021 022023     130  	oct	017021022023,024025026027,030031041042,043044045046
    000127  aa   024025 026027 
    000130  aa   030031 041042 
    000131  aa   043044 045046 
                                   131  " ascii chars 160 - 177 (8) = "pqrstuvwxyz{|}~PAD"
    000132  aa   047050 051062     132  	oct	047050051062,063064065066,067070071012,040034017017
    000133  aa   063064 065066 
    000134  aa   067070 071012 
    000135  aa   040034 017017 
                                   133  	end
ENTRY SEQUENCES
     
    000136  5a   000030 0000 00
    000137  aa  7 00046 2721 20
    000140  0a   000000 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000142  5a   000003 000000 
    000143  5a   000050 600000 
    000144  aa   000000 000000 
    000145  55   000012 000002 
    000146  5a   000002 400003 
    000147  55   000006 000012 
    000150  aa  015 142 143 144
    000151  aa  137 164 157 137
    000152  aa  141 163 143 151
    000153  aa  151 137 000 000
    000154  55   000021 000003 
    000155  0a   000033 400000 
    000156  55   000015 000003 
    000157  aa  015 141 163 143         ascii_to_bcd_
    000160  aa  151 151 137 164
    000161  aa  157 137 142 143
    000162  aa  144 137 000 000
    000163  55   000030 000012 
    000164  0a   000012 400000 
    000165  55   000024 000003 
    000166  aa  015 142 143 144         bcd_to_ascii_
    000167  aa  137 164 157 137
    000170  aa  141 163 143 151
    000171  aa  151 137 000 000
    000172  55   000041 000021 
    000173  0a   000137 500000 
    000174  55   000033 000003 
    000175  aa  024 147 143 157         gcos_cv_gebcd_ascii_
    000176  aa  163 137 143 166
    000177  aa  137 147 145 142
    000200  aa  143 144 137 141
    000201  aa  163 143 151 151
    000202  aa  137 000 000 000
    000203  55   000002 000030 
    000204  6a   000000 400002 
    000205  55   000044 000003 
    000206  aa  014 163 171 155         symbol_table
    000207  aa  142 157 154 137
    000210  aa  164 141 142 154
    000211  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000212  aa   000000 000015 
    000213  5a   000030 000000 
    000214  aa   000000 000000 
    000215  aa   000000 000000 
    000216  5a   000021 000000 
    000217  aa   000000 000000 
    000220  5a   000012 000000 
    000221  5a   000041 000000 
    000222  aa   000000 000000 
    000223  aa   000000 000000 
    000224  aa   000000 000000 
    000225  aa   000000 000000 
    000226  aa   000000 000000 
    000227  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000230  aa   000001 000000 
    000231  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000142 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   255713 545235 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000136 
    000020  aa   000000 000103 
    000021  aa   000117 000114 
    000022  aa   000130 000103 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000044 
    000067  aa   175453 017553 
    000070  aa   000000 117547 
    000071  aa   176177 400000 
    000072  aa   076163 160145          >spec>install>1110>bcd_to_ascii_.alm
    000073  aa   143076 151156 
    000074  aa   163164 141154 
    000075  aa   154076 061061 
    000076  aa   061060 076142 
    000077  aa   143144 137164 
    000100  aa   157137 141163 
    000101  aa   143151 151137 
    000102  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          33    ascii_to_bcd_            bcd_to_ascii_:       56,   89.
          76    atb_tab                  bcd_to_ascii_:      106,  117.
          12    bcd_to_ascii_            bcd_to_ascii_:       55,   69.
          56    bta_tab                  bcd_to_ascii_:       67,   86,  112.
           0    gcos_cv_gebcd_ascii_     bcd_to_ascii_:       54,   58.
          55    mask                     bcd_to_ascii_:       78,   81,   98,  101,  109.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
