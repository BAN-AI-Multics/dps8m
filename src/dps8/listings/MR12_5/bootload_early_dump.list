ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.3-1114>bootload_early_dump.alm                                                                                                                
ASSEMBLED ON:	11/11/89  0937.4 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                        000000       8  	segdef	bootload_early_dump
                        002323       9  	segdef	flagbox_message
                                    10  
                                    11  " This collection 0 program (also findable in collection 1 through the toehold)
                                    12  " is capable of saving the low 512k of memory to tape when a crash occurs in
                                    13  " early initialization.
                                    14  " Keith Loepere, November 1983.
                                    15  "
                                    16  	include	adp_sdw
                                   1-1  
                                   1-2  
                                   1-3       "BEGIN INCLUDE FILE sdw.adp.incl.alm
                                   1-4  
                                   1-5  
                                   1-6  	"Created 04/05/81  1616.1 est Sun by convert_include_file,
                                   1-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   1-8  
                                   1-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>sdw.adp.incl.pl1,
                                  1-10  	"   modified 03/20/81  2215.5 est Fri
                                  1-11  
                                  1-12  "
                                  1-13  "	Structure adp_sdw
                                  1-14  "
                        000002    1-15  	equ	adp_sdw_size,2
                                  1-16  
                        000000    1-17  	equ	adp_sdw.add_word,0
                        000012    1-18  	equ	adp_sdw.add_shift,10
                        000000    1-19  	equ	adp_sdw.valid_word,0
                        001000    1-20  	bool	adp_sdw.valid,001000	" DL
                        000000    1-21  	equ	adp_sdw.rings_word,0
                        000000    1-22  	equ	adp_sdw.rings_shift,0
                        000777    1-23  	bool	adp_sdw.rings_mask,000777
                        000000    1-24  	equ	adp_sdw.r1_word,0
                        000006    1-25  	equ	adp_sdw.r1_shift,6
                        000007    1-26  	bool	adp_sdw.r1_mask,000007
                        000000    1-27  	equ	adp_sdw.r2_word,0
                        000003    1-28  	equ	adp_sdw.r2_shift,3
                        000007    1-29  	bool	adp_sdw.r2_mask,000007
                        000000    1-30  	equ	adp_sdw.r3_word,0
                        000000    1-31  	equ	adp_sdw.r3_shift,0
                        000007    1-32  	bool	adp_sdw.r3_mask,000007
                                  1-33  
                        000001    1-34  	equ	adp_sdw.bound_word,1
                        000026    1-35  	equ	adp_sdw.bound_shift,22
                        037777    1-36  	bool	adp_sdw.bound_mask,037777
                        000001    1-37  	equ	adp_sdw.entry_bound_word,1
                        000006    1-38  	equ	adp_sdw.entry_bound_shift,6
                        037777    1-39  	bool	adp_sdw.entry_bound_mask,037777
                        000001    1-40  	equ	adp_sdw.access_word,1
                        000002    1-41  	equ	adp_sdw.access_shift,2
                        000017    1-42  	bool	adp_sdw.access_mask,000017
                        000001    1-43  	equ	adp_sdw.read_word,1
                        000040    1-44  	bool	adp_sdw.read,000040		" DL
                        000001    1-45  	equ	adp_sdw.execute_word,1
                        000020    1-46  	bool	adp_sdw.execute,000020	" DL
                        000001    1-47  	equ	adp_sdw.write_word,1
                        000010    1-48  	bool	adp_sdw.write,000010	" DL
                        000001    1-49  	equ	adp_sdw.privileged_word,1
                        000004    1-50  	bool	adp_sdw.privileged,000004	" DL
                        000001    1-51  	equ	adp_sdw.unpaged_word,1
                        000002    1-52  	bool	adp_sdw.unpaged,000002	" DL
                        000001    1-53  	equ	adp_sdw.not_a_gate_word,1
                        000001    1-54  	bool	adp_sdw.not_a_gate,000001	" DL
                                  1-55  
                                  1-56       "END INCLUDE FILE sdw.adp.incl.alm
                                    17  "
                                    18  	include	bootload_cpu_macros
                                   2-1  " CPU_MACROS
                                   2-2  "
                                   2-3  " Macros used to lend a bit of CPU independence to bootloader code.
                                   2-4  "
                                   2-5  " 04/22/81, Chris Jones
                                   2-6  " 9/83, Keith Loepere so they can work for both machines at once.
                                   2-7  "
                                   2-8  "
                                   2-9  " Macro to get the absolute address of its argument into au
                                  2-10  " This macro assumes that the address will fit into 18 bits
                                  2-11  "
                                  2-12  	macro	absa_au
                              1   2-13  	lda	bootload_info$system_type
                              2   2-14  	cmpa	ADP_SYSTEM,dl
                              3   2-15  	tze	4,ic
                              4   2-16  	absa	&F1
                              5   2-17  	als	24-18
                              6   2-18  	tra	3,ic
                              7   2-19  	absa	&F1
                              8   2-20  	als	26-18
                              9   2-21  &end
                                  2-22  
                                  2-23  
                                  2-24  "
                                  2-25  " Macro to get the absolute address of its arguments into al
                                  2-26  "
                                  2-27  	macro	absa_al
                              1   2-28  	lda	bootload_info$system_type
                              2   2-29  	cmpa	ADP_SYSTEM,dl
                              3   2-30  	tze	4,ic
                              4   2-31  	absa	&F1
                              5   2-32  	arl	36-24
                              6   2-33  	tra	3,ic
                              7   2-34  	absa	&F1
                              8   2-35  	arl	36-26
                              9   2-36  &end
                                  2-37  
                                  2-38  " End include file bootload_cpu_macros.incl.alm
                                    19  "
                                    20  	include	bootload_equs
                                   3-1  " BEGIN INCLUDE FILE bootload_equs.incl.alm
                                   3-2  " Created 10/04/80 W. Olin Sibert, mostly from bootstrap1
                                   3-3  " Modified by almost everyone, it seems.
                                   3-4  " Last modified for MR11 bootload Multics addresses starting in 1983 by
                                   3-5  "     Keith Loepere.
                                   3-6  "
                                   3-7  " This include file describes various things used by the programs in
                                   3-8  " bound_bootload_0.
                                   3-9  
                                  3-10  " Default pointer register usage:
                                  3-11  
                        000000    3-12  	equ	ds,0		" Descriptor segment
                        000001    3-13  	equ	seg2,1		" Another temporary
                        000002    3-14  	equ	mb,2		" IOM mailbox
                        000003    3-15  	equ	slt,3		" Segment loading table (SLT)
                        000004    3-16  	equ	nt,4		" Name_table
                        000005    3-17  	equ	prb,5		" Physical_record_buffer
                        000006    3-18  	equ	seg,6		" Temporary
                        000007    3-19  	equ	fv,7		" Interrupt and fault vectors
                                  3-20  
                                  3-21  " Macros
                                  3-22  
                                  3-23  	macro	equ_o
                              1   3-24  	maclist	off,save
                              2   3-25  	bool	&U,&2
                              3   3-26  	equ	&1,&U
                              4   3-27  	maclist	restore
                              5   3-28  &end
                                  3-29  
                                  3-30  	macro	set_o
                              1   3-31  	maclist	off,save
                              2   3-32  	bool	&U,&2
                              3   3-33  	set	&1,&U
                              4   3-34  	maclist	restore
                              5   3-35  &end
                                  3-36  
                                  3-37  	macro	include_nolist
                              1   3-38  	maclist	off,save
                              2   3-39  	include	&1
                              3   3-40  	maclist	restore
                              4   3-41  &end
                                  3-42  
                                  3-43  	macro	Bpush
                              1   3-44  	stx2	bootload_0$entry_stack_ptr,id
                              2   3-45  	ttn	bootload_error$out_of_stack
                              3   3-46  &end
                                  3-47  
                                  3-48  " 	Breturn	offset-from-return-point
                                  3-49  
                                  3-50  	macro	Breturn
                              1   3-51  	ldx2	bootload_0$entry_stack_ptr,di
                              2   3-52  	tra	0+&1,x2
                              3   3-53  &end
                                  3-54  
                                  3-55  "	Bentry	name,offset-from-return-point
                                  3-56  
                                  3-57  	macro	Bentry
                              1   3-58  	segdef	&1
                              2   3-59  	macro	&1_return
                              3   3-60  	Breturn	&<&K,2&[0&;&2&]
                              4   3-61  &&end
                              5   3-62  &end
                                  3-63  
                                  3-64  " 	Bentry_internal	name,offset_from_return_point
                                  3-65  
                                  3-66  	macro	Bentry_internal
                              1   3-67  	macro	&1_return	
                              2   3-68  	Breturn	&<&K,2&[0&;&2&]
                              3   3-69  &&end
                              4   3-70  &end
                                  3-71  
                                  3-72  
                                  3-73  " Definitions
                                  3-74  
                                  3-75  	equ_o	bostoe_absloc,10000		" bos_teohold
                                  3-76  	equ_o	bostoe_lth,2000
                                  3-77  
                                  3-78  	equ_o	fgbx_absloc,24000		" now in bce toehold
                                  3-79  	equ_o	fgbx_lth,2000
                                  3-80  
                                  3-81  	equ_o	toe_absloc,24000		" bootload Multics toehold
                                  3-82  	equ_o	toe_lth,4000		" This starts at a 0 mod 4 
                                  3-83  					" page address.  It is 
                                  3-84  					" bound as first element
                                  3-85  					" of bound_bootload_0.
                                  3-86  
                                  3-87  	equ_o	bbl0_absloc,24000		" bound_bootload_0 location
                                  3-88  	equ_o	bbl0_lth,22000		" and length.
                                  3-89  
                                  3-90  	equ_o	toedata_absloc,46000	" toehold_data
                                  3-91  	equ_o	toedata_lth,4000
                                  3-92  
                                  3-93  	equ_o	upt_absloc,52000		" unpaged_page_tables
                                  3-94  	equ_o	upt_lth,2000
                                  3-95  
                                  3-96  	equ_o	iupt_absloc,54000		" init_unpaged_page_tables
                                  3-97  	equ_o	iupt_lth,2000
                                  3-98  
                                  3-99  	equ_o	bkpt_absloc,56000		" breakpoint_page
                                 3-100  	equ_o	bkpt_lth,2000
                                 3-101  
                                 3-102  	equ_o	prb_absloc,60000		" physical_record_buffer
                                 3-103  	equ_o	prb_lth,6000		" memory past here up for 
                                 3-104  					" grabs
                                 3-105  
                                 3-106  " END INCLUDE FILE bootload_equs.incl.alm
                                    21  "
                                    22  	include	coll0_segnos
                                   4-1  " BEGIN INCLUDE FILE coll0_segnos.incl.alm
                                   4-2  " Modified in '83 for new bce segments, Keith Loepere.
                                   4-3  
                        000000     4-4  	equ	ds_segno_,0	" dseg
                        000001     4-5  	equ	toehold_segno_,1	" bos_toehold
                        000002     4-6  	equ	config_segno_,2	" config_deck
                        000003     4-7  	equ	dn355_mbx_segno_,3	" dn355_mailbox
                        000004     4-8  	equ	fv_segno_,4	" fault_vector
                        000005     4-9  	equ	fgbx_segno_,5	" flagbox
                        000006    4-10  	equ	nt_segno_,6	" name_table
                        000007    4-11  	equ	slt_segno_,7	" slt
                        000010    4-12  	equ	toehold_data_segno_,8 " toehold_data
                        000011    4-13  	equ	iom_mbx_segno_,9	" iom_mailbox
                        000012    4-14  	equ	upt_segno_,10	" unpaged_page_tables
                        000013    4-15  	equ	toe_segno_,11	" (bce) toehold
                                  4-16  
                        000400    4-17  	equ	bbl0_segno_,256	" bound_bootload_0
                        000401    4-18  	equ	prb_segno_,257	" physical_record_buffer
                        000402    4-19  	equ	abs_seg0_segno_,258	" abs_seg0
                        000403    4-20  	equ	iupt_segno_,259	" int_unpaged_page_tables
                        000404    4-21  	equ	ed_segno_,260	" early_dump (used for early dump save to tape)
                                  4-22  
                                  4-23  " END INCLUDE FILE coll0_segnos.incl.alm
                                    23  "
                                    24  	include	fault_vector
                                   5-1  
                                   5-2  
                                   5-3       "BEGIN INCLUDE FILE fault_vector.incl.alm
                                   5-4  
                                   5-5  "	Modified February 1981 by J. Bongiovanni to add fault types
                                   5-6  
                                   5-7  "
                                   5-8  "	Structure fv
                                   5-9  "
                        000600    5-10  	equ	fv_size,384
                                  5-11  
                                  5-12  
                        000000    5-13  	equ	fv.ipair,0		"LEVEL 2
                                  5-14  
                        000000    5-15  	equ	fv.ipair.scu,0
                        000001    5-16  	equ	fv.ipair.tra,1
                        000100    5-17  	equ	fv.fpair,64		"LEVEL 2
                                  5-18  
                        000100    5-19  	equ	fv.fpair.scu,64
                        000101    5-20  	equ	fv.fpair.tra,65
                        000200    5-21  	equ	fv.i_tra_ptr,128
                        000300    5-22  	equ	fv.i_scu_ptr,192
                        000400    5-23  	equ	fv.f_tra_ptr,256
                        000500    5-24  	equ	fv.f_scu_ptr,320
                                  5-25  
                        000000    5-26  	equ	FAULT_NO_SDF,0		" Shutdown
                        000001    5-27  	equ	FAULT_NO_STR,1		" Store
                        000002    5-28  	equ	FAULT_NO_MME,2		" Master Mode Entry 1
                        000003    5-29  	equ	FAULT_NO_F1,3		" Fault Tag 1
                        000004    5-30  	equ	FAULT_NO_TRO,4		" Timer Runout
                        000005    5-31  	equ	FAULT_NO_CMD,5		" Command
                        000006    5-32  	equ	FAULT_NO_DRL,6		" Derail
                        000007    5-33  	equ	FAULT_NO_LUF,7		" Lockup
                        000010    5-34  	equ	FAULT_NO_CON,8		" Connect
                        000011    5-35  	equ	FAULT_NO_PAR,9		" Parity
                        000012    5-36  	equ	FAULT_NO_IPR,10		" Illegal Procedure
                        000013    5-37  	equ	FAULT_NO_ONC,11		" Operation Not Complete
                        000014    5-38  	equ	FAULT_NO_SUF,12		" Startup
                        000015    5-39  	equ	FAULT_NO_OFL,13		" Overflow
                        000016    5-40  	equ	FAULT_NO_DIV,14		" Divide Check
                        000017    5-41  	equ	FAULT_NO_EXF,15		" Execute
                        000020    5-42  	equ	FAULT_NO_DF0,16		" Directed Fault 0 (Segment Fault)
                        000021    5-43  	equ	FAULT_NO_DF1,17		" Directed FAult 1 (Page Fault)
                        000022    5-44  	equ	FAULT_NO_DF2,18		" Directed Fault 2
                        000023    5-45  	equ	FAULT_NO_DF3,19		" Directed Fault 3
                        000024    5-46  	equ	FAULT_NO_ACV,20		" Access Violation
                        000025    5-47  	equ	FAULT_NO_MME2,21		" Master Mode Entry 2
                        000026    5-48  	equ	FAULT_NO_MME3,22		" Master Mode Entry 3
                        000027    5-49  	equ	FAULT_NO_MME4,23		" Master Mode Entry 4
                        000030    5-50  	equ	FAULT_NO_F2,24		" Fault Tag 2 (Linkage Fault)
                        000031    5-51  	equ	FAULT_NO_F3,25		" Fault Tag 3
                                  5-52  					" Fault No. 26-30 are Undefined
                        000037    5-53  	equ	FAULT_NO_TRB,31		" Trouble
                                  5-54  
                                  5-55       "END INCLUDE FILE fault_vector.incl.alm
                                    25  "
                                    26  	include	flagbox
                                   6-1  
                                   6-2  
                                   6-3       "BEGIN INCLUDE FILE flagbox.incl.alm
                                   6-4  
                                   6-5  
                                   6-6  " HISTORY COMMENTS:
                                   6-7  "  1) change(87-03-03,Farley), approve(87-04-15,MCR7661),
                                   6-8  "     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
                                   6-9  "     Added io_reconfig flag to inhibit BCE from attempting an emergency
                                  6-10  "     shutdown when the data in memory could be corrupted.
                                  6-11  "                                                      END HISTORY COMMENTS
                                  6-12  
                                  6-13  
                                  6-14  
                                  6-15  
                                  6-16  	"Created 03/03/87  1026.3 mst Tue by convert_include_file,
                                  6-17  	"   Version of 01/09/85  0754.4 mst Wed.
                                  6-18  
                                  6-19  	"Made from >udd>m>Farley>install_dir>rcf>flagbox.incl.pl1,
                                  6-20  	"   modified 02/26/87  1355.3 mst Thu
                                  6-21  
                                  6-22  "
                                  6-23  "	Structure fgbx
                                  6-24  "
                        000140    6-25  	equ	fgbx_size,96
                                  6-26  
                                  6-27  
                        000000    6-28  	equ	fgbx.toehold_used,0
                                  6-29  
                        000040    6-30  	equ	fgbx.flags_word,32
                        400000    6-31  	bool	fgbx.flags,400000		" DU
                                  6-32  
                        000041    6-33  	equ	fgbx.slt_segno,33		" UPPER
                                  6-34  
                        000043    6-35  	equ	fgbx.rtb,35		" LEVEL 2
                                  6-36  
                        400000    6-37  	bool	fgbx.ssenb,400000		" DU
                        200000    6-38  	bool	fgbx.call_bce,200000	" DU
                        100000    6-39  	bool	fgbx.shut,100000		" DU
                        040000    6-40  	bool	fgbx.mess,040000		" DU
                        020000    6-41  	bool	fgbx.alert,020000		" DU
                        010000    6-42  	bool	fgbx.breakpoint,010000	" DU
                        004000    6-43  	bool	fgbx.manual_crash,004000	" DU
                        002000    6-44  	bool	fgbx.io_reconfig,002000	" DU
                        000001    6-45  	equ	fgbx.bce_entry_shift,1
                        000077    6-46  	bool	fgbx.bce_entry_mask,000077
                                  6-47  
                        000044    6-48  	equ	fgbx.sentinel,36
                        000054    6-49  	equ	fgbx.sst_sdw,44		" DOUBLE
                        000056    6-50  	equ	fgbx.hc_dbr,46		" DOUBLE
                        000060    6-51  	equ	fgbx.message,48
                        000100    6-52  	equ	fgbx.return_to_bce_command,64
                                  6-53  
                                  6-54       "END INCLUDE FILE flagbox.incl.alm
                                    27  "
                                    28  	include	io_status_word
                                   7-1  
                                   7-2  
                                   7-3       "BEGIN INCLUDE FILE io_st_word.incl.alm
                                   7-4  
                                   7-5  
                                   7-6  	"Created 08/03/83  0901.4 edt Wed by convert_include_file,
                                   7-7  	"   Version of 12/01/81  1640.3 edt Tue.
                                   7-8  
                                   7-9  	"Made from >ldd>include>io_st_word.incl.pl1,
                                  7-10  	"   modified 07/29/81  1847.8 edt Wed
                                  7-11  
                                  7-12  "
                                  7-13  "	Structure io_st_word
                                  7-14  "
                        400000    7-15  	bool	io_st_word.t,400000	" DU
                        200000    7-16  	bool	io_st_word.power,200000	" DU
                        000036    7-17  	equ	io_st_word.major_shift,30
                        000017    7-18  	bool	io_st_word.major_mask,000017
                        000030    7-19  	equ	io_st_word.sub_shift,24
                        000077    7-20  	bool	io_st_word.sub_mask,000077
                        000040    7-21  	bool	io_st_word.eo,000040	" DU
                        000020    7-22  	bool	io_st_word.marker,000020	" DU
                        000024    7-23  	equ	io_st_word.soft_shift,20
                        000003    7-24  	bool	io_st_word.soft_mask,000003
                        000002    7-25  	bool	io_st_word.initiate,000002 " DU
                        000001    7-26  	bool	io_st_word.abort,000001	" DU
                        000017    7-27  	equ	io_st_word.channel_stat_shift,15
                        000007    7-28  	bool	io_st_word.channel_stat_mask,000007
                        000014    7-29  	equ	io_st_word.central_stat_shift,12
                        000007    7-30  	bool	io_st_word.central_stat_mask,000007
                        000006    7-31  	equ	io_st_word.mbz_shift,6
                        000077    7-32  	bool	io_st_word.mbz_mask,000077
                        000000    7-33  	equ	io_st_word.rcount_shift,0
                        000077    7-34  	bool	io_st_word.rcount_mask,000077
                                  7-35  
                                  7-36       "END INCLUDE FILE io_st_word.incl.alm
                                    29  "
                                    30  	include	iom_word_macros
                                   8-1  "	Macros for creating IOM control words. They require that make_data_macros
                                   8-2  "	have already been included. Formats:
                                   8-3  "
                                   8-4  "	make_pcw	PCW_name,
                                   8-5  "		Command,
                                   8-6  "		Channel,
                                   8-7  "		Device,
                                   8-8  "		{record,multirecord,character,nondata},
                                   8-9  "		{proceed,terminate,marker},
                                  8-10  "		[ChanData,]
                                  8-11  "		[Extension,]
                                  8-12  "		[mask,]
                                  8-13  "
                                  8-14  "	make_ddcw DDCW_name,
                                  8-15  "		Address,
                                  8-16  "		Tally,
                                  8-17  "		{iotd,iotp,iontp},
                                  8-18  "		[{char,word},]
                                  8-19  "		[CharOffset]
                                  8-20  "
                                  8-21  "	make_idcw IDCW_name,
                                  8-22  "		Command,
                                  8-23  "		Device,
                                  8-24  "		{record,multirecord,character,nondata},
                                  8-25  "		{proceed,terminate,marker},
                                  8-26  "		[ChanData,]
                                  8-27  "		[Extension,]
                                  8-28  "		[mask,]
                                  8-29  "
                                  8-30  "	make_tdcw TDCW_name,
                                  8-31  "		Address,
                                  8-32  "		[([restrict,][extend,][relative])]
                                  8-33  "
                                  8-34  "
                                  8-35  
                                  8-36  " ------------------------------------------------------------
                                  8-37  
                                  8-38  	macro	make_pcw
                              1   8-39  	maclist	off,save
                              2   8-40  &>6,&K&[	ife	foo,foo
                              3   8-41  	  warn	(make_pcw: At least six arguments are required.)
                              4   8-42  	  maclist restore
                              5   8-43  	ifend_exit		" give up on this one
                              6   8-44  &]
                              7   8-45  
                              8   8-46  	assign_by_keyword	make_pcw.chan_cmd,(&5),make_pcw,
                              9   8-47  		(Channel command must be one of record, nondata, multirecord, or character, not &5),
                             10   8-48  		(record,0),(rec,0),(nondata,2),(multirecord,6),(character,8),(char,8)
                             11   8-49  
                             12   8-50  	assign_by_keyword	make_pcw.chan_ctrl,(&6),make_pcw,
                             13   8-51  		(Channel control must be one of terminate, proceed, or marker, not &6),
                             14   8-52  		(terminate,0),(proceed,2),(marker,3)
                             15   8-53  
                             16   8-54  	assign_by_keyword	make_pcw.mask,(&9),make_pcw,
                             17   8-55  		(Mask must be either mask, or omitted, not &9.),
                             18   8-56  		((),0),(mask,1)
                             19   8-57  
                             20   8-58  
                             21   8-59  	set		make_pcw.command,&2
                             22   8-60  	set		make_pcw.channel,&3
                             23   8-61  	set		make_pcw.device,&4
                             24   8-62  	set		make_pcw.chan_data,(&7)
                             25   8-63  	set		make_pcw.extension,(&8)
                             26   8-64  
                             27   8-65  "	Now, generate it
                             28   8-66  
                             29   8-67  	maclist	on
                             30   8-68  	even
                             31   8-69  &1:
                             32   8-70  	maclist	object
                             33   8-71  	vfd_mac	6/make_pcw.command,
                             34   8-72  		6/make_pcw.device,
                             35   8-73  		6/make_pcw.extension,
                             36   8-74  		3/7,
                             37   8-75  		1/make_pcw.mask,
                             38   8-76  		2/make_pcw.chan_ctrl,
                             39   8-77  		6/make_pcw.chan_cmd,
                             40   8-78  		6/make_pcw.chan_data
                             41   8-79  
                             42   8-80  	vfd_mac	3/0,
                             43   8-81  		6/make_pcw.channel,
                             44   8-82  		27/0
                             45   8-83  
                             46   8-84  	maclist	restore
                             47   8-85  &end
                                  8-86  
                                  8-87  " ------------------------------------------------------------
                                  8-88  
                                  8-89  	macro	make_idcw
                              1   8-90  	maclist	off,save
                              2   8-91  &>5,&K&[	ife	foo,foo
                              3   8-92  	  warn	(make_idcw: At least five arguments are required.)
                              4   8-93  	  maclist restore
                              5   8-94  	ifend_exit		" give up on this one
                              6   8-95  &]
                              7   8-96  
                              8   8-97  	assign_by_keyword	make_pcw.chan_cmd,(&4),make_idcw,
                              9   8-98  		(Channel command must be one of record, nondata, multirecord, or character, not &4),
                             10   8-99  		(record,0),(rec,0),(nondata,2),(multirecord,6),(character,8),(char,8)
                             11  8-100  
                             12  8-101  	assign_by_keyword	make_pcw.chan_ctrl,(&5),make_idcw,
                             13  8-102  		(Channel control must be one of terminate, proceed, or marker, not &5),
                             14  8-103  		(terminate,0),(proceed,2),(marker,3)
                             15  8-104  
                             16  8-105  	assign_by_keyword	make_pcw.mask,(&8),make_idcw,
                             17  8-106  		(Mask must be either mask, or omitted, not &8.),
                             18  8-107  		((),0),(mask,1)
                             19  8-108  
                             20  8-109  	set		make_pcw.command,&2
                             21  8-110  	set		make_pcw.device,&3
                             22  8-111  	set		make_pcw.chan_data,(&6)
                             23  8-112  	set		make_pcw.extension,(&7)
                             24  8-113  
                             25  8-114  "	Now, generate it
                             26  8-115  
                             27  8-116  	maclist	on
                             28  8-117  &1:
                             29  8-118  	maclist	object
                             30  8-119  	vfd_mac	6/make_pcw.command,
                             31  8-120  		6/make_pcw.device,
                             32  8-121  		6/make_pcw.extension,
                             33  8-122  		o3/7,
                             34  8-123  		1/make_pcw.mask,
                             35  8-124  		2/make_pcw.chan_ctrl,
                             36  8-125  		6/make_pcw.chan_cmd,
                             37  8-126  		6/make_pcw.chan_data
                             38  8-127  
                             39  8-128  	maclist	restore
                             40  8-129  &end
                                 8-130  
                                 8-131  " ------------------------------------------------------------
                                 8-132  
                                 8-133  	macro	make_ddcw
                              1  8-134  	maclist	off,save
                              2  8-135  &>4,&K&[	ife	foo,foo
                              3  8-136  	  warn	(make_ddcw: At least four arguments are required.)
                              4  8-137  	  maclist restore
                              5  8-138  	ifend_exit		" give up on this one
                              6  8-139  &]
                              7  8-140  
                              8  8-141  	assign_by_keyword	make_ddcw.op_type,&4,make_ddcw,
                              9  8-142  		(Operation type must be one of iotd, iotp, or iontp, not &4.),
                             10  8-143  		(iotd,0),(iotp,1),(iontp,3)
                             11  8-144  
                             12  8-145  	assign_by_keyword	make_ddcw.tally_type,(&5),make_ddcw,
                             13  8-146  		(Tally type must be either word, character, or omitted, not &5.),
                             14  8-147  		((),0),(word,0),(character,1),(char,1)
                             15  8-148  
                             16  8-149  	set		make_ddcw.address,&2
                             17  8-150  	set		make_ddcw.tally,&3
                             18  8-151  	set		make_ddcw.char_offset,(&6)
                             19  8-152  
                             20  8-153  "	Now, generate it
                             21  8-154  
                             22  8-155  	maclist	on
                             23  8-156  &1:
                             24  8-157  	maclist	object
                             25  8-158  	vfd_mac	18/make_ddcw.address,
                             26  8-159  		3/make_ddcw.char_offset,
                             27  8-160  		1/make_ddcw.tally_type,
                             28  8-161  		2/make_ddcw.op_type,
                             29  8-162  		12/make_ddcw.tally
                             30  8-163  
                             31  8-164  	maclist	restore
                             32  8-165  &end
                                 8-166  
                                 8-167  " ------------------------------------------------------------
                                 8-168  
                                 8-169  	macro	make_tdcw
                              1  8-170  	maclist	off,save
                              2  8-171  &>2,&K&[	ife	foo,foo
                              3  8-172  	  warn	(make_tdcw: At least two arguments are required.)
                              4  8-173  	  maclist restore
                              5  8-174  	ifend_exit		" give up on this one
                              6  8-175  &]
                              7  8-176  
                              8  8-177  	set		make_tdcw.address,&2
                              9  8-178  	set		make_tdcw.bits,0
                             10  8-179  &(3	make_tdcw.get_bits	&i
                             11  8-180  &)
                             12  8-181  
                             13  8-182  "	Now, generate it
                             14  8-183  
                             15  8-184  	maclist	on
                             16  8-185  &1:
                             17  8-186  	maclist	object
                             18  8-187  	vfd_mac	18/make_tdcw.address,
                             19  8-188  		4/0,
                             20  8-189  		2/2,
                             21  8-190  		9/0,
                             22  8-191  		3/make_tdcw.bits
                             23  8-192  
                             24  8-193  	maclist	restore
                             25  8-194  &end
                                    31  "
                                    32  	include	l68_sdw
                                   9-1  
                                   9-2  
                                   9-3       "BEGIN INCLUDE FILE sdw.l68.incl.alm
                                   9-4  
                                   9-5  
                                   9-6  	"Created 04/05/81  1616.1 est Sun by convert_include_file,
                                   9-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   9-8  
                                   9-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>sdw.l68.incl.pl1,
                                  9-10  	"   modified 03/20/81  2215.5 est Fri
                                  9-11  
                                  9-12  "
                                  9-13  "	Structure l68_sdw
                                  9-14  "
                        000002    9-15  	equ	l68_sdw_size,2
                                  9-16  
                        000000    9-17  	equ	l68_sdw.add_word,0
                        000014    9-18  	equ	l68_sdw.add_shift,12
                        000000    9-19  	equ	l68_sdw.rings_word,0
                        000003    9-20  	equ	l68_sdw.rings_shift,3
                        000777    9-21  	bool	l68_sdw.rings_mask,000777
                        000000    9-22  	equ	l68_sdw.r1_word,0
                        000011    9-23  	equ	l68_sdw.r1_shift,9
                        000007    9-24  	bool	l68_sdw.r1_mask,000007
                        000000    9-25  	equ	l68_sdw.r2_word,0
                        000006    9-26  	equ	l68_sdw.r2_shift,6
                        000007    9-27  	bool	l68_sdw.r2_mask,000007
                        000000    9-28  	equ	l68_sdw.r3_word,0
                        000003    9-29  	equ	l68_sdw.r3_shift,3
                        000007    9-30  	bool	l68_sdw.r3_mask,000007
                        000000    9-31  	equ	l68_sdw.valid_word,0
                        000004    9-32  	bool	l68_sdw.valid,000004	" DL
                        000000    9-33  	equ	l68_sdw.df_no_word,0
                        000000    9-34  	equ	l68_sdw.df_no_shift,0
                        000003    9-35  	bool	l68_sdw.df_no_mask,000003
                                  9-36  
                        000001    9-37  	equ	l68_sdw.bound_word,1
                        000025    9-38  	equ	l68_sdw.bound_shift,21
                        037777    9-39  	bool	l68_sdw.bound_mask,037777
                        000001    9-40  	equ	l68_sdw.access_word,1
                        000021    9-41  	equ	l68_sdw.access_shift,17
                        000017    9-42  	bool	l68_sdw.access_mask,000017
                        000001    9-43  	equ	l68_sdw.read_word,1
                        000004    9-44  	bool	l68_sdw.read,000004		" DU
                        000001    9-45  	equ	l68_sdw.execute_word,1
                        000002    9-46  	bool	l68_sdw.execute,000002	" DU
                        000001    9-47  	equ	l68_sdw.write_word,1
                        000001    9-48  	bool	l68_sdw.write,000001	" DU
                        000001    9-49  	equ	l68_sdw.privileged_word,1
                        400000    9-50  	bool	l68_sdw.privileged,400000	" DL
                        000001    9-51  	equ	l68_sdw.unpaged_word,1
                        200000    9-52  	bool	l68_sdw.unpaged,200000	" DL
                        000001    9-53  	equ	l68_sdw.not_a_gate_word,1
                        100000    9-54  	bool	l68_sdw.not_a_gate,100000	" DL
                        000001    9-55  	equ	l68_sdw.cache_word,1
                        040000    9-56  	bool	l68_sdw.cache,040000	" DL
                        000001    9-57  	equ	l68_sdw.entry_bound_word,1
                        000000    9-58  	equ	l68_sdw.entry_bound_shift,0
                        037777    9-59  	bool	l68_sdw.entry_bound_mask,037777
                                  9-60  
                                  9-61       "END INCLUDE FILE sdw.l68.incl.alm
                                    33  "
                                    34  	include	make_data_macros
                                  10-1  " ------------------------------------------------------------
                                  10-2  
                                  10-3  	macro	vfd_mac
                              1   10-4  	maclist	object,save
                              2   10-5  "
                              3   10-6  "	Utility macro for generating multi-line vfd's
                              4   10-7  "
                              5   10-8  	vfd	&F1
                              6   10-9  	maclist	restore
                              7  10-10  &end
                                 10-11  
                                 10-12  " ------------------------------------------------------------
                                 10-13  
                                 10-14  "	assign_by_keyword	Variable,KeywordArgument,MacroName,
                                 10-15  "		(ErrorMessage),
                                 10-16  "		(Keyword,Value),(Keyword,Value), ...
                                 10-17  
                                 10-18  "
                                 10-19  " Internal macro to set arg1 if arg2 matches the keyword in arg3.
                                 10-20  "
                                 10-21  	macro	assign_single_keyword
                              1  10-22  &^=4,&K&[ ife	 FOO,FOO
                              2  10-23  	  warn	(assign_by_keyword: A (Keyword,Value) pair must contain exactly two values, not &FQ3.)
                              3  10-24  	ifend_exit
                              4  10-25  &]
                              5  10-26  	ife	(&2),(&3)
                              6  10-27  	  set	&1,&4
                              7  10-28  	  macro	assign_by_keyword.error  " Punt the previous contents of this macro
                              8  10-29  &&end				" Since we have successfully assigned.
                              9  10-30  	ifend_exit
                             10  10-31  &end
                                 10-32  
                                 10-33  " ------------------------------------------------------------
                                 10-34  
                                 10-35  	macro	assign_by_keyword
                              1  10-36  	maclist	off,save
                              2  10-37  &>5,&K&[ ife	FOO,FOO
                              3  10-38  	  warn	(assign_by_keyword: At least five arguments must be supplied.)
                              4  10-39  	  maclist restore
                              5  10-40  	ifend_exit
                              6  10-41  &]
                              7  10-42  
                              8  10-43  	macro	assign_by_keyword.error  " Create a macro to complain about errors
                              9  10-44  	warn	(&3: &4)
                             10  10-45  	set	&1,33814345695
                             11  10-46  &&end
                             12  10-47  
                             13  10-48  &R5,&K&( assign_single_keyword  (&1),(&2),&i
                             14  10-49  &)
                             15  10-50  
                             16  10-51  	assign_by_keyword.error	" Print error message, if any.
                             17  10-52  
                             18  10-53  	maclist	restore
                             19  10-54  &end
                                 10-55  
                                 10-56  " ------------------------------------------------------------
                                 10-57  
                                 10-58  "	assign_flags	Variable,(FlagArgument),MacroName,
                                 10-59  "		(ErrorMessage),
                                 10-60  "		(Flag,Value),(Flag,Value), ...
                                 10-61  
                                 10-62  "
                                 10-63  " Internal macro to set arg1 to arg1 + arg2, if arg2 matches the keyword in arg3.
                                 10-64  "
                                 10-65  	macro	assign_single_flag
                              1  10-66  &^=4,&K&[ ife	 FOO,FOO
                              2  10-67  	  warn	(assign_flags: A (Flag,Value) pair must contain exactly two values, not &FQ3.)
                              3  10-68  	ifend_exit
                              4  10-69  &]
                              5  10-70  	ife	(&2),(&3)
                              6  10-71  	  bool	&U,&1+&4
                              7  10-72  	  set	&1,&U
                              8  10-73  	  macro	assign_flags.error " Punt the error message, now that we've assigned successfully
                              9  10-74  &&end
                             10  10-75  	ifend_exit
                             11  10-76  &end
                                 10-77  
                                 10-78  " ------------------------------------------------------------
                                 10-79  "
                                 10-80  "	Internal macro to iterate over all flag values for a single component of the flags argument
                                 10-81  "
                                 10-82  	macro	iterate_over_flags
                              1  10-83  
                              2  10-84  	macro	assign_flags.error	" Create a macro to complain about errors
                              3  10-85  	warn	(&2: &3)
                              4  10-86  	set	&1,33814345695
                              5  10-87  &&end
                              6  10-88  
                              7  10-89  &R5,&K&( assign_single_flag  (&1),(&4),&i
                              8  10-90  &)
                              9  10-91  
                             10  10-92  	assign_flags.error
                             11  10-93  
                             12  10-94  &end
                                 10-95  
                                 10-96  " ------------------------------------------------------------
                                 10-97  
                                 10-98  	macro	assign_flags
                              1  10-99  	maclist	off,save
                              2 10-100  &>5,&K&[ ife	FOO,FOO
                              3 10-101  	  warn	(assign_flags: At least five arguments must be supplied.)
                              4 10-102  	  maclist restore
                              5 10-103  	ifend_exit
                              6 10-104  &]
                              7 10-105  	set	&1,0		" start out with none
                              8 10-106  
                              9 10-107  &(2	iterate_over_flags	(&1),(&3),(&4),&i,&FQ5
                             10 10-108  &)
                             11 10-109  
                             12 10-110  	maclist	restore
                             13 10-111  &end
                                    35  "
                                    36  	include	system_types
                                  11-1  
                                  11-2  
                                  11-3       "BEGIN INCLUDE FILE system_types.incl.alm
                                  11-4  
                                  11-5  
                                  11-6  	"Created 04/05/81  2144.9 est Sun by convert_include_file,
                                  11-7  	"   Version of 04/05/81  1606.8 est Sun.
                                  11-8  
                                  11-9  	"Made from >udd>Multics>nss>new_pc>include>system_types.incl.pl1,
                                 11-10  	"   modified 03/21/81  2300.0 est Sat
                                 11-11  
                                 11-12  
                        000001   11-13  	equ	L68_SYSTEM,1		" MANIFEST
                        000002   11-14  	equ	ADP_SYSTEM,2		" MANIFEST
                                 11-15  
                                 11-16       "END INCLUDE FILE system_types.incl.alm
                                    37  "
                                    38  	include	tape_io_commands
                        000000    12-1  	bool	TAPE.request_status,00
                        000040    12-2  	bool	TAPE.reset_status,40
                        000050    12-3  	bool	TAPE.request_device_status,50
                        000051    12-4  	bool	TAPE.reset_device_status,51
                        000057    12-5  	bool	TAPE.survey_devices,57
                                  12-6  
                        000026    12-7  	bool	TAPE.read_control_registers,26
                        000016    12-8  	bool	TAPE.write_control_registers,16
                        000062    12-9  	bool	TAPE.set_file_protect,62
                        000063   12-10  	bool	TAPE.set_file_format,63
                        000070   12-11  	bool	TAPE.rewind,70
                                 12-12  
                        000075   12-13  	bool	TAPE.tape_load,75
                        000072   12-14  	bool	TAPE.rewind_unload,72
                        000066   12-15  	bool	TAPE.reserve_device,66
                        000067   12-16  	bool	TAPE.release_device,67
                        000064   12-17  	bool	TAPE.set_200_bpi,64
                                 12-18  
                        000061   12-19  	bool	TAPE.set_556_bpi,61
                        000060   12-20  	bool	TAPE.set_800_bpi,60
                        000065   12-21  	bool	TAPE.set_1600_bpi,65
                        000044   12-22  	bool	TAPE.forward_space_record,44
                        000045   12-23  	bool	TAPE.forward_space_file,45
                                 12-24  
                        000046   12-25  	bool	TAPE.backspace_record,46
                        000047   12-26  	bool	TAPE.backspace_file,47
                        000010   12-27  	bool	TAPE.control_store_overlay,10
                        000005   12-28  	bool	TAPE.load_from_device,05
                        000054   12-29  	bool	TAPE.erase,54
                                 12-30  
                        000055   12-31  	bool	TAPE.write_eof_record,55
                        000013   12-32  	bool	TAPE.write_tape_nine,13
                        000003   12-33  	bool	TAPE.read_tape_nine,03
                        000015   12-34  	bool	TAPE.write_binary_record,15
                        000005   12-35  	bool	TAPE.read_binary_record,05
                                 12-36  
                        000007   12-37  	bool	TAPE.reread_binary_record,07
                        000014   12-38  	bool	TAPE.write_bcd_record,14
                        000004   12-39  	bool	TAPE.read_bcd_record,04
                        000006   12-40  	bool	TAPE.reread_bcd_record,06
                        000034   12-41  	bool	TAPE.write_ebcdic_record,34
                                 12-42  
                        000024   12-43  	bool	TAPE.read_ebcdic_record,24
                        000037   12-44  	bool	TAPE.reread_ebcdic_record,37
                        000027   12-45  	bool	TAPE.read_ascii_record,27
                        000035   12-46  	bool	TAPE.write_ascii_ebcdic_record,35
                        000025   12-47  	bool	TAPE.read_ascii_ebcdic_record,25
                                 12-48  
                        000031   12-49  	bool	TAPE.diagnostic_mode_control,31
                        000011   12-50  	bool	TAPE.main_memory_overlay,11
                                    39  "
    000000                          40  bootload_early_dump:
    000000                          41  	inhibit	on
    000000  aa   000002 7102 24     42  	tra	2,ic*		force into appending mode
    000001  aa   000000 0112 00     43  	nop
    000002  aa   000400 000043      44  	vfd	18/bbl0_segno_,18o/43
    000003  0a   000004 000000      45  	vfd	18/now_appended,18/0
    000004                          46  now_appended:
    000004  4a  4 00010 2353 20     47  	lda	bootload_info$system_type
    000005  aa   000002 1152 07     48  	cmpa	ADP_SYSTEM,dl
    000006  0a   000015 6002 00     49  	tze	iox_setup
                                    50  
    000007                          51  	decor	dps8
    000007  aa   000700 6212 00     52  	eax1	7*64		set all controller masks
    000010  aa   000000 4312 07     53  	fld	0,dl		mask all interrupts
    000011  aa   000020 0572 11     54  	sscr	2*8,x1		..
    000012  aa   777700 6212 11     55  	eax1	-64,x1		SSCR will do nothing for unassigned masks
    000013  aa   777776 6052 04     56  	tpl	-2,ic		..
    000014  0a   000017 7102 00     57  	tra	setup
                                    58  
    000015                          59  iox_setup:
    000015                          60  	decor	adp
    000015                          61  	inhibit	on
    000015  aa   000000 2352 07     62  	lda	=0,dl	mask interrupts
    000016  aa   000000 5532 00     63  	limr
    000017                          64  	decor	dps8
                                    65  
    000017  aa   777777 6372 03     66  setup:	ldt	-1,du		Prevent timer runout
    000020                          67  	inhibit	off
                                    68  
    000020  4a  4 00012 3501 20     69  	epp	ds,template_slt_$dseg_ptr,*
    000021  4a  4 00014 3521 20     70  	epp	mb,template_slt_$iom_mailbox_ptr,*
    000022  4a  4 00016 3535 20     71  	epp	slt,template_slt_$slt_ptr,*
    000023  4a  4 00020 3701 20     72  	epp	nt,template_slt_$name_table_ptr,*
    000024  4a  4 00022 3715 20     73  	epp	prb,template_slt_$physical_record_buffer_ptr,*
    000025  4a  4 00024 3735 20     74  	epp	fv,template_slt_$fault_vector_ptr,*
                                    75  
    000026  4a  4 00026 3721 20     76            epp6	bootload_early_dump$ignore_scu " Now, change to treat lockup faults and
    000027  aa  7 00510 6521 00     77            spri6	fv|fv.f_scu_ptr+FAULT_NO_TRO*2 " timer runouts like interrupts
    000030  aa  7 00516 6521 00     78  	spri6	fv|fv.f_scu_ptr+FAULT_NO_LUF*2
                                    79  
    000031  4a  4 00030 3721 20     80            epp6	bootload_early_dump$ignore_fault
    000032  aa  7 00410 6521 00     81            spri6	fv|fv.f_tra_ptr+FAULT_NO_TRO*2
    000033  aa  7 00416 6521 00     82            spri6	fv|fv.f_tra_ptr+FAULT_NO_LUF*2
                                    83  
    000034  4a  4 00032 3721 20     84  	epp	seg,template_slt_$flagbox_ptr,*
    000035  aa  6 00043 2351 00     85  	lda	seg|fgbx.rtb
    000036  aa   040000 3750 03     86  	ana	fgbx.mess,du		" look for fgbx msg
    000037  0a   000044 6000 00     87  	tze	get_drive_num
                                    88  
    000040  aa  0 00000 1005 00     89  	mlr	(pr),()
    000041  aa   600060 000100      90  	desc9a	seg|fgbx.message,64
    000042  0a   002323 200100      91  	desc9a	flagbox_message(1),64
    000043  4a  4 00034 7021 20     92  	tsx2	bootload_error$flagbox_message
                                    93  
    000044                          94  get_drive_num:
    000044  4a  4 00036 7021 20     95  	tsx2	bootload_console$write_nl
    000045  4a  4 00040 7021 20     96  	tsx2	bootload_error$early_dump_prompt
    000046  4a  4 00042 7021 20     97  	tsx2	bootload_console$read_line
    000047  0a   002257 0000 00     98  	arg	ascii_drive_num
    000050  0a   002256 0000 00     99  	arg	ascii_drive_num_len
    000051  4a  4 00036 7021 20    100  	tsx2	bootload_console$write_nl
                                   101  
    000052  0a   002257 2350 00    102  	lda	ascii_drive_num
    000053  0a   002260 1150 00    103  	cmpa	die_msg
    000054  0a   000242 6000 00    104  	tze	die
                                   105  
    000055  aa   000033 7730 00    106  	lrl	27			" convert to decimal
    000056  aa   000033 7720 00    107  	qrl	27
    000057  aa   000044 7770 00    108  	llr	36			" 1st char in q, 2nd in a
    000060  aa   000060 1760 07    109  	sbq	=o60,dl
    000061  0a   000044 6040 00    110  	tmi	get_drive_num
    000062  aa   000011 1160 07    111  	cmpq	9,dl
    000063  0a   000044 6054 00    112  	tpnz	get_drive_num		" 1st digit
                                   113  
    000064  aa   000000 1150 07    114  	cmpa	0,dl
    000065  0a   000075 6000 00    115  	tze	got_drive_num		" single digit
                                   116  
    000066  aa   000060 1750 07    117  	sba	=o60,dl
    000067  0a   000044 6040 00    118  	tmi	get_drive_num
    000070  aa   000011 1150 07    119  	cmpa	9,dl
    000071  0a   000044 6054 00    120  	tpnz	get_drive_num
    000072  0a   002257 7550 00    121  	sta	ascii_drive_num		" 2nd digit
                                   122  
    000073  aa   000012 4020 07    123  	mpy	10,dl
    000074  0a   002257 0760 00    124  	adq	ascii_drive_num
    000075                         125  got_drive_num:
    000075  aa   000030 7360 00    126  	qls	24
    000076  0a   002264 7520 20    127  	stcq	write_tape_idcw,20
    000077  0a   002266 7520 20    128  	stcq	tape_density_idcw,20
    000100  0a   002267 7520 20    129  	stcq	tape_rewind_idcw,20
    000101  0a   002270 7520 20    130  	stcq	tape_backspace_idcw,20
    000102  0a   002271 7520 20    131  	stcq	tape_erase_idcw,20
                                   132  
                                   133  	absa_au	tape_buffer		" Initialize
    000103  4a  4 00010 2351 20         	lda	bootload_info$system_type
    000104  aa   000002 1150 07         	cmpa	ADP_SYSTEM,dl
    000105  aa   000004 6000 04         	tze	4,ic
    000106  0a   000246 2120 00         	absa	tape_buffer
    000107  aa   000006 7350 00         	als	24-18
    000110  aa   000003 7100 04         	tra	3,ic
    000111  0a   000246 2120 00         	absa	tape_buffer
    000112  aa   000010 7350 00         	als	26-18
    000113  0a   002265 7510 70    134  	stca	write_tape_ddcw,70
                                   135  
    000114  4a  4 00044 7021 20    136  	tsx2	bootload_io$connect		" try setting density
    000115  4a  4 00046 0001 20    137  	arg	bootload_info$tape_iom_number
    000116  4a  4 00050 0001 20    138  	arg	bootload_info$tape_channel_number
    000117  0a   002262 0000 00    139  	arg	tape_io_pcw
    000120  0a   002267 0000 00    140  	arg	tape_rewind_idcw
                                   141  
    000121  4a  4 00052 7571 20    142  	staq	bootload_tape_fw$erstat	" check for success
    000122  4a  4 00054 3151 20    143  	cana	bootload_info$status_mask
    000123  0a   000244 6010 00    144  	tnz	tape_error
                                   145  
    000124  4a  4 00044 7021 20    146  	tsx2	bootload_io$connect
    000125  4a  4 00046 0001 20    147  	arg	bootload_info$tape_iom_number
    000126  4a  4 00050 0001 20    148  	arg	bootload_info$tape_channel_number
    000127  0a   002262 0000 00    149  	arg	tape_io_pcw
    000130  0a   002266 0000 00    150  	arg	tape_density_idcw
                                   151  
    000131  4a  4 00052 7571 20    152  	staq	bootload_tape_fw$erstat	" check for success
    000132  4a  4 00054 3151 20    153  	cana	bootload_info$status_mask
    000133  0a   000244 6010 00    154  	tnz	tape_error
                                   155  "
    000134  0a   002254 3724 20    156  	epbp6	memory_ptw_ptr,*
    000135  aa  0 01010 2351 00    157  	lda	ds|2*ed_segno_		" find ptw for early_dump
    000136  4a  4 00010 2361 20    158  	ldq	bootload_info$system_type	" (used to read memory pages)
    000137  aa   000002 1160 07    159  	cmpq	ADP_SYSTEM,dl
    000140  aa   000003 6000 04    160  	tze	3,ic
    000141  aa   000014 7710 00    161  	arl	l68_sdw.add_shift
    000142  aa   000002 7100 04    162  	tra	2,ic
    000143  aa   000012 7710 00    163  	arl	adp_sdw.add_shift
    000144  aa   054000 1750 07    164  	sba	iupt_absloc,dl	" ptw is addr(page_table) - addr(iupt)
    000145  aa  6 00000 3721 05    165  	epp6	6|0,al
    000146  0a   002254 6520 00    166  	spri6	memory_ptw_ptr	" within iupt
                                   167  
    000147  0a   000250 1540 00    168  	sdbr	dbr		" save info so we can find 
    000150  4a  4 00010 2351 20    169  	lda	bootload_info$system_type " our way around memory
    000151  0a   000252 7550 00    170  	sta	system_type
                                   171  
    000152  aa   000000 2350 07    172  	lda	0,dl
                                   173  "
    000153                         174  dump_memory_page:			" fetch page of memory
    000153  0a   000247 7550 00    175  	sta	address		
    000154  4a  4 00056 7021 20    176  	tsx2	bootload_dseg$make_core_ptw
    000155  0a   002254 7560 20    177  	stq	memory_ptw_ptr,*
    000156  4a  4 00010 2351 20    178  	lda	bootload_info$system_type
    000157  aa   000002 1150 07    179  	cmpa	ADP_SYSTEM,dl
    000160  aa   000003 6000 04    180  	tze	3,ic
    000161                         181  	decor	l68
    000161  aa   000000 5324 00    182  	camp
    000162  aa   000002 7100 04    183  	tra	2,ic
    000163                         184  	decor	adp
    000163  aa   000000 5314 00    185  	camp1
    000164                         186  	decor	l68
                                   187  
    000164  0a   002424 3720 20    188  	epp	seg,=its(ed_segno_,0),*
    000165  aa   010000 2350 07    189  	lda	4*1024,dl
    000166  aa  0 00040 1005 40    190  	mlr	(pr,rl),(rl)
    000167  aa   600000 000005     191  	desc9a	seg|0,al
    000170  0a   000254 000005     192  	desc9a	memory_record,al
    000171  aa   000020 3350 07    193  	lca	16,dl
    000172  0a   002261 7550 00    194  	sta	error_count
                                   195  
    000173                         196  write_record:
    000173  4a  4 00044 7021 20    197  	tsx2	bootload_io$connect
    000174  4a  4 00046 0001 20    198  	arg	bootload_info$tape_iom_number
    000175  4a  4 00050 0001 20    199  	arg	bootload_info$tape_channel_number
    000176  0a   002262 0000 00    200  	arg	tape_io_pcw
    000177  0a   002264 0000 00    201  	arg	write_tape_idcw
                                   202  
    000200  4a  4 00052 7571 20    203  	staq	bootload_tape_fw$erstat	" check for success
    000201  4a  4 00054 3151 20    204  	cana	bootload_info$status_mask
    000202  0a   000230 6000 00    205  	tze	next_page			" record written
    000203  0a   002261 0540 00    206  	aos	error_count
    000204  0a   000244 6050 00    207  	tpl	tape_error		" too many errors - give up
                                   208  
                                   209  " error recovery - try backspace, erase, rewrite
                                   210  
    000205  aa   000002 3150 03    211  	cana	io_st_word.initiate,du	" tape didn't move
    000206  0a   000217 6010 00    212  	tnz	erase			" don't backspace
                                   213  
    000207  4a  4 00044 7021 20    214  	tsx2	bootload_io$connect
    000210  4a  4 00046 0001 20    215  	arg	bootload_info$tape_iom_number
    000211  4a  4 00050 0001 20    216  	arg	bootload_info$tape_channel_number
    000212  0a   002262 0000 00    217  	arg	tape_io_pcw
    000213  0a   002270 0000 00    218  	arg	tape_backspace_idcw
                                   219  
    000214  4a  4 00052 7571 20    220  	staq	bootload_tape_fw$erstat
    000215  4a  4 00054 3151 20    221  	cana	bootload_info$status_mask
    000216  0a   000244 6010 00    222  	tnz	tape_error
                                   223  
    000217  4a  4 00044 7021 20    224  erase:	tsx2	bootload_io$connect
    000220  4a  4 00046 0001 20    225  	arg	bootload_info$tape_iom_number
    000221  4a  4 00050 0001 20    226  	arg	bootload_info$tape_channel_number
    000222  0a   002262 0000 00    227  	arg	tape_io_pcw
    000223  0a   002271 0000 00    228  	arg	tape_erase_idcw
                                   229  
    000224  4a  4 00052 7571 20    230  	staq	bootload_tape_fw$erstat
    000225  4a  4 00054 3151 20    231  	cana	bootload_info$status_mask
    000226  0a   000244 6010 00    232  	tnz	tape_error
                                   233  
    000227  0a   000173 7100 00    234  	tra	write_record
                                   235  
    000230                         236  next_page:
    000230  0a   000247 2350 00    237  	lda	address
    000231  aa   002000 0750 07    238  	ada	1024,dl
    000232  aa   000002 1150 03    239  	cmpa	2,du			" 512k
    000233  0a   000153 6040 00    240  	tmi	dump_memory_page
                                   241  "
    000234  4a  4 00044 7021 20    242  	tsx2	bootload_io$connect		" rewind
    000235  4a  4 00046 0001 20    243  	arg	bootload_info$tape_iom_number
    000236  4a  4 00050 0001 20    244  	arg	bootload_info$tape_channel_number
    000237  0a   002262 0000 00    245  	arg	tape_io_pcw
    000240  0a   002267 0000 00    246  	arg	tape_rewind_idcw
                                   247  
    000241  4a  4 00060 7021 20    248  	tsx2	bootload_error$early_dump_done
                                   249  
    000242                         250  	inhibit	on
    000242  aa   000000 6162 00    251  die:	dis			" die!
    000243  aa   777777 7102 04    252  	tra	-1,ic
    000244                         253  	inhibit	off
                                   254  
    000244                         255  tape_error:
    000244  4a  4 00062 7021 20    256  	tsx2	bootload_error$tape_dump_error
    000245  0a   000044 7100 00    257  	tra	get_drive_num
                                   258  "
                                   259  	even
    000246                         260  tape_buffer:
    000246                         261  magic_number:
    000246  aa   654365 234214     262  	oct	654365234214		" label record as early_dump
    000247  aa   000000 000000     263  address:	oct	0
    000250  aa   000000 000000     264  dbr:	oct	0,0
    000251  aa   000000 000000 
    000252                         265  system_type:
    000252  aa   000000 000000     266  	oct	0
    000253  aa   000000 0110 03    267  	even
    000254                         268  memory_record:
    000254                         269  	bss	,1024
    002254                         270  tape_buffer_end:
                                   271  
    002254                         272  memory_ptw_ptr:
    002254  aa   000403 000043     273  	its	iupt_segno_,0
    002255  aa   000000 000000 
                                   274  
    002256                         275  ascii_drive_num_len:
    002256  aa   000000 000004     276  	vfd	36/4
                                   277  
    002257                         278  ascii_drive_num:
    002257  aa   000000 000000     279  	vfd	36/0
                                   280  
    002260  aa  144 151 145 000    281  die_msg:	aci	"die"
                                   282  
    002261                         283  error_count:
    002261  aa   000000 000000     284  	dec	0
                                   285  
                                   286  	make_pcw	tape_io_pcw,TAPE.reset_status,0,0,nondata,terminate,1
                                        	even
    002262                              tape_io_pcw:
    002262  aa   400000 700201 
    002263  aa   000000 000000 
                                   287  
                                   288  	make_idcw	write_tape_idcw,TAPE.write_binary_record,0,record,terminate,0,0
    002264                              write_tape_idcw:
    002264  aa   150000 700000 
                                   289  
                                   290  	make_ddcw	write_tape_ddcw,0,tape_buffer_end-tape_buffer,iotd
    002265                              write_tape_ddcw:
    002265  aa   000000 002006 
                                   291  
                                   292  	make_idcw	tape_density_idcw,TAPE.set_1600_bpi,0,nondata,terminate,1,0
    002266                              tape_density_idcw:
    002266  aa   650000 700201 
                                   293  
                                   294  	make_idcw	tape_rewind_idcw,TAPE.rewind,0,nondata,terminate,1,0
    002267                              tape_rewind_idcw:
    002267  aa   700000 700201 
                                   295  
                                   296  	make_idcw	tape_backspace_idcw,TAPE.backspace_record,0,nondata,terminate,1,0
    002270                              tape_backspace_idcw:
    002270  aa   460000 700201 
                                   297  
                                   298  	make_idcw	tape_erase_idcw,TAPE.erase,0,nondata,terminate,1,0
    002271                              tape_erase_idcw:
    002271  aa   540000 700201 
                                   299  "
                                   300  " Following is the data area for ignoring faults, and the instruction to do it.
                                   301  "
                                   302  
                        002300     303            segdef    ignore_scu
                        002320     304            segdef    ignore_fault
                                   305  
    002272  aa   000000 0110 03    306            eight                         " Align for SCU data
    002273  aa   000000 0110 03
    002274  aa   000000 0110 03
    002275  aa   000000 0110 03
    002276  aa   000000 0110 03
    002277  aa   000000 0110 03
    002300                         307  ignore_scu:
    002300                         308            bss       ,8
    002310                         309  pointers_and_lengths:
    002310                         310  	bss	,8
                                   311  
    002320                         312            inhibit   on                  <+><+><+><+><+><+><+><+><+><+><+><+><+><+><->
    002320                         313  ignore_fault:                           " Come here to do nothing
    002320  0a   026310 4476 00    314  	spl	bbl0_absloc+pointers_and_lengths
    002321  0a   026310 4676 00    315  	lpl	bbl0_absloc+pointers_and_lengths
    002322  0a   026300 6132 00    316            rcu       bbl0_absloc+ignore_scu " Complicated, isn't it?
    002323                         317            inhibit   off                 <-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
                                   318  
    002323                         319  flagbox_message:
    002323  aa   100000 000000     320  	vfd	9/64,27/0
    002324                         321  	bss	,64		acc string copy of fgbx.message for warning msg
                                   322  	end
LITERALS
     
    002424  aa   000404 000043 
    002425  aa   000000 000000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    002426  5a   000003 000000 
    002427  5a   000056 600000 
    002430  aa   000000 000000 
    002431  55   000013 000002 
    002432  5a   000002 400003 
    002433  55   000006 000013 
    002434  aa  023 142 157 157
    002435  aa  164 154 157 141
    002436  aa  144 137 145 141
    002437  aa  162 154 171 137
    002440  aa  144 165 155 160
    002441  55   000022 000003 
    002442  0a   002320 400000 
    002443  55   000016 000003 
    002444  aa  014 151 147 156         ignore_fault
    002445  aa  157 162 145 137
    002446  aa  146 141 165 154
    002447  aa  164 000 000 000
    002450  55   000030 000013 
    002451  0a   002300 400000 
    002452  55   000025 000003 
    002453  aa  012 151 147 156         ignore_scu
    002454  aa  157 162 145 137
    002455  aa  163 143 165 000
    002456  55   000037 000022 
    002457  0a   002323 400000 
    002460  55   000033 000003 
    002461  aa  017 146 154 141         flagbox_message
    002462  aa  147 142 157 170
    002463  aa  137 155 145 163
    002464  aa  163 141 147 145
    002465  55   000047 000030 
    002466  0a   000000 400000 
    002467  55   000042 000003 
    002470  aa  023 142 157 157         bootload_early_dump
    002471  aa  164 154 157 141
    002472  aa  144 137 145 141
    002473  aa  162 154 171 137
    002474  aa  144 165 155 160
    002475  55   000002 000037 
    002476  6a   000000 400002 
    002477  55   000052 000003 
    002500  aa  014 163 171 155         symbol_table
    002501  aa  142 157 154 137
    002502  aa  164 141 142 154
    002503  aa  145 000 000 000

DEFINITIONS HASH TABLE

    002504  aa   000000 000015 
    002505  aa   000000 000000 
    002506  aa   000000 000000 
    002507  5a   000022 000000 
    002510  aa   000000 000000 
    002511  aa   000000 000000 
    002512  5a   000013 000000 
    002513  5a   000030 000000 
    002514  5a   000037 000000 
    002515  5a   000047 000000 
    002516  aa   000000 000000 
    002517  aa   000000 000000 
    002520  aa   000000 000000 
    002521  aa   000000 000000 

EXTERNAL NAMES

    002522  aa  017 164 141 160         tape_dump_error
    002523  aa  145 137 144 165
    002524  aa  155 160 137 145
    002525  aa  162 162 157 162
    002526  aa  017 145 141 162         early_dump_done
    002527  aa  154 171 137 144
    002530  aa  165 155 160 137
    002531  aa  144 157 156 145
    002532  aa  015 155 141 153         make_core_ptw
    002533  aa  145 137 143 157
    002534  aa  162 145 137 160
    002535  aa  164 167 000 000
    002536  aa  015 142 157 157         bootload_dseg
    002537  aa  164 154 157 141
    002540  aa  144 137 144 163
    002541  aa  145 147 000 000
    002542  aa  013 163 164 141         status_mask
    002543  aa  164 165 163 137
    002544  aa  155 141 163 153
    002545  aa  006 145 162 163         erstat
    002546  aa  164 141 164 000
    002547  aa  020 142 157 157         bootload_tape_fw
    002550  aa  164 154 157 141
    002551  aa  144 137 164 141
    002552  aa  160 145 137 146
    002553  aa  167 000 000 000
    002554  aa  023 164 141 160         tape_channel_number
    002555  aa  145 137 143 150
    002556  aa  141 156 156 145
    002557  aa  154 137 156 165
    002560  aa  155 142 145 162
    002561  aa  017 164 141 160         tape_iom_number
    002562  aa  145 137 151 157
    002563  aa  155 137 156 165
    002564  aa  155 142 145 162
    002565  aa  007 143 157 156         connect
    002566  aa  156 145 143 164
    002567  aa  013 142 157 157         bootload_io
    002570  aa  164 154 157 141
    002571  aa  144 137 151 157
    002572  aa  011 162 145 141         read_line
    002573  aa  144 137 154 151
    002574  aa  156 145 000 000
    002575  aa  021 145 141 162         early_dump_prompt
    002576  aa  154 171 137 144
    002577  aa  165 155 160 137
    002600  aa  160 162 157 155
    002601  aa  160 164 000 000
    002602  aa  010 167 162 151         write_nl
    002603  aa  164 145 137 156
    002604  aa  154 000 000 000
    002605  aa  020 142 157 157         bootload_console
    002606  aa  164 154 157 141
    002607  aa  144 137 143 157
    002610  aa  156 163 157 154
    002611  aa  145 000 000 000
    002612  aa  016 142 157 157         bootload_error
    002613  aa  164 154 157 141
    002614  aa  144 137 145 162
    002615  aa  162 157 162 000
    002616  aa  013 146 154 141         flagbox_ptr
    002617  aa  147 142 157 170
    002620  aa  137 160 164 162
    002621  aa  020 146 141 165         fault_vector_ptr
    002622  aa  154 164 137 166
    002623  aa  145 143 164 157
    002624  aa  162 137 160 164
    002625  aa  162 000 000 000
    002626  aa  032 160 150 171         physical_record_buffer_ptr
    002627  aa  163 151 143 141
    002630  aa  154 137 162 145
    002631  aa  143 157 162 144
    002632  aa  137 142 165 146
    002633  aa  146 145 162 137
    002634  aa  160 164 162 000
    002635  aa  016 156 141 155         name_table_ptr
    002636  aa  145 137 164 141
    002637  aa  142 154 145 137
    002640  aa  160 164 162 000
    002641  aa  007 163 154 164         slt_ptr
    002642  aa  137 160 164 162
    002643  aa  017 151 157 155         iom_mailbox_ptr
    002644  aa  137 155 141 151
    002645  aa  154 142 157 170
    002646  aa  137 160 164 162
    002647  aa  010 144 163 145         dseg_ptr
    002650  aa  147 137 160 164
    002651  aa  162 000 000 000
    002652  aa  015 164 145 155         template_slt_
    002653  aa  160 154 141 164
    002654  aa  145 137 163 154
    002655  aa  164 137 000 000
    002656  aa  013 163 171 163         system_type
    002657  aa  164 145 155 137
    002660  aa  164 171 160 145
    002661  aa  015 142 157 157         bootload_info
    002662  aa  164 154 157 141
    002663  aa  144 137 151 156
    002664  aa  146 157 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    002665  aa   000004 000000 
    002666  55   000164 000074 
    002667  aa   000004 000000 
    002670  55   000164 000100 
    002671  aa   000004 000000 
    002672  55   000110 000104 
    002673  aa   000004 000000 
    002674  55   000233 000114 
    002675  aa   000004 000000 
    002676  55   000121 000117 
    002677  aa   000004 000000 
    002700  55   000233 000126 
    002701  aa   000004 000000 
    002702  55   000233 000133 
    002703  aa   000004 000000 
    002704  55   000141 000137 
    002705  aa   000004 000000 
    002706  55   000157 000144 
    002707  aa   000004 000000 
    002710  55   000164 000147 
    002711  aa   000004 000000 
    002712  55   000157 000154 
    002713  aa   000004 000000 
    002714  55   000164 000033 
    002715  aa   000004 000000 
    002716  55   000224 000170 
    002717  aa   000004 000000 
    002720  55   000042 000016 
    002721  aa   000004 000000 
    002722  55   000042 000025 
    002723  aa   000004 000000 
    002724  55   000224 000173 
    002725  aa   000004 000000 
    002726  55   000224 000200 
    002727  aa   000004 000000 
    002730  55   000224 000207 
    002731  aa   000004 000000 
    002732  55   000224 000213 
    002733  aa   000004 000000 
    002734  55   000224 000215 
    002735  aa   000004 000000 
    002736  55   000224 000221 
    002737  aa   000004 000000 
    002740  55   000233 000230 
    002741  aa   000001 000000 
    002742  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    002743  5a   000237 000000 
    002744  5a   000241 000000 
    002745  5a   000243 000000 
    002746  5a   000245 000000 
    002747  5a   000247 000000 
    002750  5a   000251 000000 
    002751  5a   000253 000000 
    002752  5a   000255 000000 
    002753  5a   000257 000000 
    002754  5a   000261 000000 
    002755  5a   000263 000000 
    002756  5a   000265 000000 
    002757  5a   000267 000000 
    002760  5a   000271 000000 
    002761  5a   000273 000000 
    002762  5a   000275 000000 
    002763  5a   000277 000000 
    002764  5a   000301 000000 
    002765  5a   000303 000000 
    002766  5a   000305 000000 
    002767  5a   000307 000000 
    002770  5a   000311 000000 
    002771  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   002426 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000064 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         bootload_info|system_type
    000011  5a   000342 0000 00
    000012  9a   777766 0000 46         template_slt_|dseg_ptr
    000013  5a   000341 0000 20
    000014  9a   777764 0000 46         template_slt_|iom_mailbox_ptr
    000015  5a   000340 0000 20
    000016  9a   777762 0000 46         template_slt_|slt_ptr
    000017  5a   000337 0000 20
    000020  9a   777760 0000 46         template_slt_|name_table_ptr
    000021  5a   000336 0000 20
    000022  9a   777756 0000 46         template_slt_|physical_record_buffer_ptr
    000023  5a   000335 0000 20
    000024  9a   777754 0000 46         template_slt_|fault_vector_ptr
    000025  5a   000334 0000 20
    000026  9a   777752 0000 46         bootload_early_dump|ignore_scu
    000027  5a   000333 0000 00
    000030  9a   777750 0000 46         bootload_early_dump|ignore_fault
    000031  5a   000332 0000 00
    000032  9a   777746 0000 46         template_slt_|flagbox_ptr
    000033  5a   000331 0000 20
    000034  9a   777744 0000 46         bootload_error|flagbox_message
    000035  5a   000330 0000 00
    000036  9a   777742 0000 46         bootload_console|write_nl
    000037  5a   000327 0000 00
    000040  9a   777740 0000 46         bootload_error|early_dump_prompt
    000041  5a   000326 0000 00
    000042  9a   777736 0000 46         bootload_console|read_line
    000043  5a   000325 0000 00
    000044  9a   777734 0000 46         bootload_io|connect
    000045  5a   000324 0000 00
    000046  9a   777732 0000 46         bootload_info|tape_iom_number
    000047  5a   000323 0000 00
    000050  9a   777730 0000 46         bootload_info|tape_channel_number
    000051  5a   000322 0000 00
    000052  9a   777726 0000 46         bootload_tape_fw|erstat
    000053  5a   000321 0000 00
    000054  9a   777724 0000 46         bootload_info|status_mask
    000055  5a   000320 0000 00
    000056  9a   777722 0000 46         bootload_dseg|make_core_ptw
    000057  5a   000317 0000 00
    000060  9a   777720 0000 46         bootload_error|early_dump_done
    000061  5a   000316 0000 00
    000062  9a   777716 0000 46         bootload_error|tape_dump_error
    000063  5a   000315 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   250051 723567 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000010 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000562 
    000020  aa   000000 000346 
    000021  aa   000510 000475 
    000022  aa   000543 000346 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000015 
    000066  aa   000152 000070 
    000067  aa   175453 021675 
    000070  aa   000000 117547 
    000071  aa   215104 000000 
    000072  aa   000170 000035 
    000073  aa   106701 740617 
    000074  aa   000000 110670 
    000075  aa   206433 400000 
    000076  aa   000200 000051 
    000077  aa   127236 043476 
    000100  aa   000000 112724 
    000101  aa   701742 600000 
    000102  aa   000213 000043 
    000103  aa   127236 043477 
    000104  aa   000000 112724 
    000105  aa   701742 600000 
    000106  aa   000224 000042 
    000107  aa   127236 043504 
    000110  aa   000000 112724 
    000111  aa   701743 200000 
    000112  aa   000235 000042 
    000113  aa   101301 045475 
    000114  aa   000000 110133 
    000115  aa   352304 600000 
    000116  aa   000246 000035 
    000117  aa   153072 447700 
    000120  aa   000000 115333 
    000121  aa   300226 600000 
    000122  aa   000256 000044 
    000123  aa   112741 326622 
    000124  aa   000000 111274 
    000125  aa   624410 200000 
    000126  aa   000267 000045 
    000127  aa   112375 747472 
    000130  aa   000000 111240 
    000131  aa   207531 200000 
    000132  aa   000301 000035 
    000133  aa   106701 740607 
    000134  aa   000000 110670 
    000135  aa   206427 200000 
    000136  aa   000311 000046 
    000137  aa   112375 747473 
    000140  aa   000000 111240 
    000141  aa   207531 200000 
    000142  aa   000323 000042 
    000143  aa   106701 740577 
    000144  aa   000000 110670 
    000145  aa   206425 600000 
    000146  aa   000334 000046 
    000147  aa   112741 326633 
    000150  aa   000000 111274 
    000151  aa   624415 400000 
    000152  aa   076163 160145          >special_ldd>install>MR12.3-1114>bootload_early_dump.alm
    000153  aa   143151 141154 
    000154  aa   137154 144144 
    000155  aa   076151 156163 
    000156  aa   164141 154154 
    000157  aa   076115 122061 
    000160  aa   062056 063055 
    000161  aa   061061 061064 
    000162  aa   076142 157157 
    000163  aa   164154 157141 
    000164  aa   144137 145141 
    000165  aa   162154 171137 
    000166  aa   144165 155160 
    000167  aa   056141 154155 
    000170  aa   076154 144144          >ldd>include>adp_sdw.incl.alm
    000171  aa   076151 156143 
    000172  aa   154165 144145 
    000173  aa   076141 144160 
    000174  aa   137163 144167 
    000175  aa   056151 156143 
    000176  aa   154056 141154 
    000177  aa   155040 040040 
    000200  aa   076154 144144          >ldd>include>bootload_cpu_macros.incl.alm
    000201  aa   076151 156143 
    000202  aa   154165 144145 
    000203  aa   076142 157157 
    000204  aa   164154 157141 
    000205  aa   144137 143160 
    000206  aa   165137 155141 
    000207  aa   143162 157163 
    000210  aa   056151 156143 
    000211  aa   154056 141154 
    000212  aa   155040 040040 
    000213  aa   076154 144144          >ldd>include>bootload_equs.incl.alm
    000214  aa   076151 156143 
    000215  aa   154165 144145 
    000216  aa   076142 157157 
    000217  aa   164154 157141 
    000220  aa   144137 145161 
    000221  aa   165163 056151 
    000222  aa   156143 154056 
    000223  aa   141154 155040 
    000224  aa   076154 144144          >ldd>include>coll0_segnos.incl.alm
    000225  aa   076151 156143 
    000226  aa   154165 144145 
    000227  aa   076143 157154 
    000230  aa   154060 137163 
    000231  aa   145147 156157 
    000232  aa   163056 151156 
    000233  aa   143154 056141 
    000234  aa   154155 040040 
    000235  aa   076154 144144          >ldd>include>fault_vector.incl.alm
    000236  aa   076151 156143 
    000237  aa   154165 144145 
    000240  aa   076146 141165 
    000241  aa   154164 137166 
    000242  aa   145143 164157 
    000243  aa   162056 151156 
    000244  aa   143154 056141 
    000245  aa   154155 040040 
    000246  aa   076154 144144          >ldd>include>flagbox.incl.alm
    000247  aa   076151 156143 
    000250  aa   154165 144145 
    000251  aa   076146 154141 
    000252  aa   147142 157170 
    000253  aa   056151 156143 
    000254  aa   154056 141154 
    000255  aa   155040 040040 
    000256  aa   076154 144144          >ldd>include>io_status_word.incl.alm
    000257  aa   076151 156143 
    000260  aa   154165 144145 
    000261  aa   076151 157137 
    000262  aa   163164 141164 
    000263  aa   165163 137167 
    000264  aa   157162 144056 
    000265  aa   151156 143154 
    000266  aa   056141 154155 
    000267  aa   076154 144144          >ldd>include>iom_word_macros.incl.alm
    000270  aa   076151 156143 
    000271  aa   154165 144145 
    000272  aa   076151 157155 
    000273  aa   137167 157162 
    000274  aa   144137 155141 
    000275  aa   143162 157163 
    000276  aa   056151 156143 
    000277  aa   154056 141154 
    000300  aa   155040 040040 
    000301  aa   076154 144144          >ldd>include>l68_sdw.incl.alm
    000302  aa   076151 156143 
    000303  aa   154165 144145 
    000304  aa   076154 066070 
    000305  aa   137163 144167 
    000306  aa   056151 156143 
    000307  aa   154056 141154 
    000310  aa   155040 040040 
    000311  aa   076154 144144          >ldd>include>make_data_macros.incl.alm
    000312  aa   076151 156143 
    000313  aa   154165 144145 
    000314  aa   076155 141153 
    000315  aa   145137 144141 
    000316  aa   164141 137155 
    000317  aa   141143 162157 
    000320  aa   163056 151156 
    000321  aa   143154 056141 
    000322  aa   154155 040040 
    000323  aa   076154 144144          >ldd>include>system_types.incl.alm
    000324  aa   076151 156143 
    000325  aa   154165 144145 
    000326  aa   076163 171163 
    000327  aa   164145 155137 
    000330  aa   164171 160145 
    000331  aa   163056 151156 
    000332  aa   143154 056141 
    000333  aa   154155 040040 
    000334  aa   076154 144144          >ldd>include>tape_io_commands.incl.alm
    000335  aa   076151 156143 
    000336  aa   154165 144145 
    000337  aa   076164 141160 
    000340  aa   145137 151157 
    000341  aa   137143 157155 
    000342  aa   155141 156144 
    000343  aa   163056 151156 
    000344  aa   143154 056141 
    000345  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

       10000    .._00000                 bootload_equs:       75.
        2000    .._00001                 bootload_equs:       76.
       24000    .._00002                 bootload_equs:       78.
        2000    .._00003                 bootload_equs:       79.
       24000    .._00004                 bootload_equs:       81.
        4000    .._00005                 bootload_equs:       82.
       24000    .._00006                 bootload_equs:       87.
       22000    .._00007                 bootload_equs:       88.
       46000    .._00010                 bootload_equs:       90.
        4000    .._00011                 bootload_equs:       91.
       52000    .._00012                 bootload_equs:       93.
        2000    .._00013                 bootload_equs:       94.
       54000    .._00014                 bootload_equs:       96.
        2000    .._00015                 bootload_equs:       97.
       56000    .._00016                 bootload_equs:       99.
        2000    .._00017                 bootload_equs:      100.
       60000    .._00020                 bootload_equs:      102.
        6000    .._00021                 bootload_equs:      103.
         402    abs_seg0_segno_          coll0_segnos:        19.
         247    address                  bootload_early_dump:      175,  237,  263.
          17    adp_sdw.access_mask      adp_sdw:       42.
           2    adp_sdw.access_shift     adp_sdw:       41.
           1    adp_sdw.access_word      adp_sdw:       40.
          12    adp_sdw.add_shift        bootload_early_dump:      163,
                                         adp_sdw:       18.
           0    adp_sdw.add_word         adp_sdw:       17.
       37777    adp_sdw.bound_mask       adp_sdw:       36.
          26    adp_sdw.bound_shift      adp_sdw:       35.
           1    adp_sdw.bound_word       adp_sdw:       34.
       37777    adp_sdw.entry_bound_mask       adp_sdw:       39.
           6    adp_sdw.entry_bound_shift      adp_sdw:       38.
           1    adp_sdw.entry_bound_word       adp_sdw:       37.
          20    adp_sdw.execute          adp_sdw:       46.
           1    adp_sdw.execute_word     adp_sdw:       45.
           1    adp_sdw.not_a_gate       adp_sdw:       54.
           1    adp_sdw.not_a_gate_word  adp_sdw:       53.
           4    adp_sdw.privileged       adp_sdw:       50.
           1    adp_sdw.privileged_word  adp_sdw:       49.
           7    adp_sdw.r1_mask          adp_sdw:       26.
           6    adp_sdw.r1_shift         adp_sdw:       25.
           0    adp_sdw.r1_word          adp_sdw:       24.
           7    adp_sdw.r2_mask          adp_sdw:       29.
           3    adp_sdw.r2_shift         adp_sdw:       28.
           0    adp_sdw.r2_word          adp_sdw:       27.
           7    adp_sdw.r3_mask          adp_sdw:       32.
           0    adp_sdw.r3_shift         adp_sdw:       31.
           0    adp_sdw.r3_word          adp_sdw:       30.
          40    adp_sdw.read             adp_sdw:       44.
           1    adp_sdw.read_word        adp_sdw:       43.
         777    adp_sdw.rings_mask       adp_sdw:       23.
           0    adp_sdw.rings_shift      adp_sdw:       22.
           0    adp_sdw.rings_word       adp_sdw:       21.
           2    adp_sdw.unpaged          adp_sdw:       52.
           1    adp_sdw.unpaged_word     adp_sdw:       51.
        1000    adp_sdw.valid            adp_sdw:       20.
           0    adp_sdw.valid_word       adp_sdw:       19.
          10    adp_sdw.write            adp_sdw:       48.
           1    adp_sdw.write_word       adp_sdw:       47.
           2    adp_sdw_size             adp_sdw:       15.
           2    ADP_SYSTEM               bootload_early_dump:       48,  133,  159,  179,
                                         system_types:        14.
        2257    ascii_drive_num          bootload_early_dump:       98,  102,  121,  124,  278.
        2256    ascii_drive_num_len      bootload_early_dump:       99,  275.
       24000    bbl0_absloc              bootload_early_dump:      314,  315,  316,
                                         bootload_equs:       87.
       22000    bbl0_lth                 bootload_equs:       88.
         400    bbl0_segno_              bootload_early_dump:       44,
                                         coll0_segnos:        17.
       56000    bkpt_absloc              bootload_equs:       99.
        2000    bkpt_lth                 bootload_equs:      100.
                bootload_console         bootload_early_dump:       95,   97,  100.
                bootload_dseg            bootload_early_dump:      176.
           0    bootload_early_dump      bootload_early_dump:        8,   40,   76,   80.
                bootload_error           bootload_early_dump:       92,   96,  248,  256.
                bootload_info            bootload_early_dump:       47,  133,  137,  138,  143,  147,  148,  153,  158,  169,
                                                                   178,  198,  199,  204,  215,  216,  221,  225,  226,  231,
                                                                   243,  244.
                bootload_io              bootload_early_dump:      136,  146,  197,  214,  224,  242.
                bootload_tape_fw         bootload_early_dump:      142,  152,  203,  220,  230.
       10000    bostoe_absloc            bootload_equs:       75.
        2000    bostoe_lth               bootload_equs:       76.
           2    config_segno_            coll0_segnos:         6.
                connect                  bootload_early_dump:      136,  146,  197,  214,  224,  242.
         250    dbr                      bootload_early_dump:      168,  264.
         242    die                      bootload_early_dump:      104,  251.
        2260    die_msg                  bootload_early_dump:      103,  281.
           3    dn355_mbx_segno_         coll0_segnos:         7.
           0    ds                       bootload_early_dump:       69,  157,
                                         bootload_equs:       12.
                dseg_ptr                 bootload_early_dump:       69.
           0    ds_segno_                coll0_segnos:         4.
         153    dump_memory_page         bootload_early_dump:      174,  240.
                early_dump_done          bootload_early_dump:      248.
                early_dump_prompt        bootload_early_dump:       96.
         404    ed_segno_                bootload_early_dump:      157,  188,
                                         coll0_segnos:        21.
         217    erase                    bootload_early_dump:      212,  224.
        2261    error_count              bootload_early_dump:      194,  206,  283.
                erstat                   bootload_early_dump:      142,  152,  203,  220,  230.
          24    FAULT_NO_ACV             fault_vector:        46.
           5    FAULT_NO_CMD             fault_vector:        31.
          10    FAULT_NO_CON             fault_vector:        34.
          20    FAULT_NO_DF0             fault_vector:        42.
          21    FAULT_NO_DF1             fault_vector:        43.
          22    FAULT_NO_DF2             fault_vector:        44.
          23    FAULT_NO_DF3             fault_vector:        45.
          16    FAULT_NO_DIV             fault_vector:        40.
           6    FAULT_NO_DRL             fault_vector:        32.
          17    FAULT_NO_EXF             fault_vector:        41.
           3    FAULT_NO_F1              fault_vector:        29.
          30    FAULT_NO_F2              fault_vector:        50.
          31    FAULT_NO_F3              fault_vector:        51.
          12    FAULT_NO_IPR             fault_vector:        36.
           7    FAULT_NO_LUF             bootload_early_dump:       78,   82,
                                         fault_vector:        33.
           2    FAULT_NO_MME             fault_vector:        28.
          25    FAULT_NO_MME2            fault_vector:        47.
          26    FAULT_NO_MME3            fault_vector:        48.
          27    FAULT_NO_MME4            fault_vector:        49.
          15    FAULT_NO_OFL             fault_vector:        39.
          13    FAULT_NO_ONC             fault_vector:        37.
          11    FAULT_NO_PAR             fault_vector:        35.
           0    FAULT_NO_SDF             fault_vector:        26.
           1    FAULT_NO_STR             fault_vector:        27.
          14    FAULT_NO_SUF             fault_vector:        38.
          37    FAULT_NO_TRB             fault_vector:        53.
           4    FAULT_NO_TRO             bootload_early_dump:       77,   81,
                                         fault_vector:        30.
                fault_vector_ptr         bootload_early_dump:       74.
       20000    fgbx.alert               flagbox:       41.
          77    fgbx.bce_entry_mask      flagbox:       46.
           1    fgbx.bce_entry_shift     flagbox:       45.
       10000    fgbx.breakpoint          flagbox:       42.
      200000    fgbx.call_bce            flagbox:       38.
      400000    fgbx.flags               flagbox:       31.
          40    fgbx.flags_word          flagbox:       30.
          56    fgbx.hc_dbr              flagbox:       50.
        2000    fgbx.io_reconfig         flagbox:       44.
        4000    fgbx.manual_crash        flagbox:       43.
       40000    fgbx.mess                bootload_early_dump:       86,
                                         flagbox:       40.
          60    fgbx.message             bootload_early_dump:       90,
                                         flagbox:       51.
         100    fgbx.return_to_bce_command     flagbox:       52.
          43    fgbx.rtb                 bootload_early_dump:       85,
                                         flagbox:       35.
          44    fgbx.sentinel            flagbox:       48.
      100000    fgbx.shut                flagbox:       39.
          41    fgbx.slt_segno           flagbox:       33.
      400000    fgbx.ssenb               flagbox:       37.
          54    fgbx.sst_sdw             flagbox:       49.
           0    fgbx.toehold_used        flagbox:       28.
       24000    fgbx_absloc              bootload_equs:       78.
        2000    fgbx_lth                 bootload_equs:       79.
           5    fgbx_segno_              coll0_segnos:         9.
         140    fgbx_size                flagbox:       25.
        2323    flagbox_message          bootload_early_dump:        9,   91,   92,  319.
                flagbox_ptr              bootload_early_dump:       84.
           7    fv                       bootload_early_dump:       74,   77,   78,   81,   82,
                                         bootload_equs:       19.
         100    fv.fpair                 fault_vector:        17.
         100    fv.fpair.scu             fault_vector:        19.
         101    fv.fpair.tra             fault_vector:        20.
         500    fv.f_scu_ptr             bootload_early_dump:       77,   78,
                                         fault_vector:        24.
         400    fv.f_tra_ptr             bootload_early_dump:       81,   82,
                                         fault_vector:        23.
           0    fv.ipair                 fault_vector:        13.
           0    fv.ipair.scu             fault_vector:        15.
           1    fv.ipair.tra             fault_vector:        16.
         300    fv.i_scu_ptr             fault_vector:        22.
         200    fv.i_tra_ptr             fault_vector:        21.
           4    fv_segno_                coll0_segnos:         8.
         600    fv_size                  fault_vector:        10.
          44    get_drive_num            bootload_early_dump:       87,   94,  110,  112,  118,  120,  257.
          75    got_drive_num            bootload_early_dump:      115,  125.
        2320    ignore_fault             bootload_early_dump:       80,  304,  313.
        2300    ignore_scu               bootload_early_dump:       76,  303,  307,  316.
                iom_mailbox_ptr          bootload_early_dump:       70.
          11    iom_mbx_segno_           coll0_segnos:        13.
          15    iox_setup                bootload_early_dump:       49,   59.
           1    io_st_word.abort         io_status_word:      26.
           7    io_st_word.central_stat_mask   io_status_word:      30.
          14    io_st_word.central_stat_shift  io_status_word:      29.
           7    io_st_word.channel_stat_mask   io_status_word:      28.
          17    io_st_word.channel_stat_shift  io_status_word:      27.
          40    io_st_word.eo            io_status_word:      21.
           2    io_st_word.initiate      bootload_early_dump:      211,
                                         io_status_word:      25.
          17    io_st_word.major_mask    io_status_word:      18.
          36    io_st_word.major_shift   io_status_word:      17.
          20    io_st_word.marker        io_status_word:      22.
          77    io_st_word.mbz_mask      io_status_word:      32.
           6    io_st_word.mbz_shift     io_status_word:      31.
      200000    io_st_word.power         io_status_word:      16.
          77    io_st_word.rcount_mask   io_status_word:      34.
           0    io_st_word.rcount_shift  io_status_word:      33.
           3    io_st_word.soft_mask     io_status_word:      24.
          24    io_st_word.soft_shift    io_status_word:      23.
          77    io_st_word.sub_mask      io_status_word:      20.
          30    io_st_word.sub_shift     io_status_word:      19.
      400000    io_st_word.t             io_status_word:      15.
       54000    iupt_absloc              bootload_early_dump:      164,
                                         bootload_equs:       96.
        2000    iupt_lth                 bootload_equs:       97.
         403    iupt_segno_              bootload_early_dump:      273,
                                         coll0_segnos:        20.
          17    l68_sdw.access_mask      l68_sdw:       42.
          21    l68_sdw.access_shift     l68_sdw:       41.
           1    l68_sdw.access_word      l68_sdw:       40.
          14    l68_sdw.add_shift        bootload_early_dump:      161,
                                         l68_sdw:       18.
           0    l68_sdw.add_word         l68_sdw:       17.
       37777    l68_sdw.bound_mask       l68_sdw:       39.
          25    l68_sdw.bound_shift      l68_sdw:       38.
           1    l68_sdw.bound_word       l68_sdw:       37.
       40000    l68_sdw.cache            l68_sdw:       56.
           1    l68_sdw.cache_word       l68_sdw:       55.
           3    l68_sdw.df_no_mask       l68_sdw:       35.
           0    l68_sdw.df_no_shift      l68_sdw:       34.
           0    l68_sdw.df_no_word       l68_sdw:       33.
       37777    l68_sdw.entry_bound_mask       l68_sdw:       59.
           0    l68_sdw.entry_bound_shift      l68_sdw:       58.
           1    l68_sdw.entry_bound_word       l68_sdw:       57.
           2    l68_sdw.execute          l68_sdw:       46.
           1    l68_sdw.execute_word     l68_sdw:       45.
      100000    l68_sdw.not_a_gate       l68_sdw:       54.
           1    l68_sdw.not_a_gate_word  l68_sdw:       53.
      400000    l68_sdw.privileged       l68_sdw:       50.
           1    l68_sdw.privileged_word  l68_sdw:       49.
           7    l68_sdw.r1_mask          l68_sdw:       24.
          11    l68_sdw.r1_shift         l68_sdw:       23.
           0    l68_sdw.r1_word          l68_sdw:       22.
           7    l68_sdw.r2_mask          l68_sdw:       27.
           6    l68_sdw.r2_shift         l68_sdw:       26.
           0    l68_sdw.r2_word          l68_sdw:       25.
           7    l68_sdw.r3_mask          l68_sdw:       30.
           3    l68_sdw.r3_shift         l68_sdw:       29.
           0    l68_sdw.r3_word          l68_sdw:       28.
           4    l68_sdw.read             l68_sdw:       44.
           1    l68_sdw.read_word        l68_sdw:       43.
         777    l68_sdw.rings_mask       l68_sdw:       21.
           3    l68_sdw.rings_shift      l68_sdw:       20.
           0    l68_sdw.rings_word       l68_sdw:       19.
      200000    l68_sdw.unpaged          l68_sdw:       52.
           1    l68_sdw.unpaged_word     l68_sdw:       51.
           4    l68_sdw.valid            l68_sdw:       32.
           0    l68_sdw.valid_word       l68_sdw:       31.
           1    l68_sdw.write            l68_sdw:       48.
           1    l68_sdw.write_word       l68_sdw:       47.
           2    l68_sdw_size             l68_sdw:       15.
           1    L68_SYSTEM               system_types:        13.
         246    magic_number             bootload_early_dump:      261.
                make_core_ptw            bootload_early_dump:      176.
           0    make_ddcw.address        bootload_early_dump:      290.
           0    make_ddcw.char_offset    bootload_early_dump:      290.
           0    make_ddcw.op_type        bootload_early_dump:      290.
        2006    make_ddcw.tally          bootload_early_dump:      290.
           0    make_ddcw.tally_type     bootload_early_dump:      290.
           0    make_pcw.channel         bootload_early_dump:      286.
           2    make_pcw.chan_cmd        bootload_early_dump:      286,  288,  292,  294,  296,  298.
           0    make_pcw.chan_ctrl       bootload_early_dump:      286,  288,  292,  294,  296,  298.
           1    make_pcw.chan_data       bootload_early_dump:      286,  288,  292,  294,  296,  298.
          54    make_pcw.command         bootload_early_dump:      286,  288,  292,  294,  296,  298.
           0    make_pcw.device          bootload_early_dump:      286,  288,  292,  294,  296,  298.
           0    make_pcw.extension       bootload_early_dump:      286,  288,  292,  294,  296,  298.
           0    make_pcw.mask            bootload_early_dump:      286,  288,  292,  294,  296,  298.
           2    mb                       bootload_early_dump:       70,
                                         bootload_equs:       14.
        2254    memory_ptw_ptr           bootload_early_dump:      156,  166,  177,  272.
         254    memory_record            bootload_early_dump:      192,  268.
                name_table_ptr           bootload_early_dump:       72.
         230    next_page                bootload_early_dump:      205,  236.
           4    now_appended             bootload_early_dump:       45,   46.
           4    nt                       bootload_early_dump:       72,
                                         bootload_equs:       16.
           6    nt_segno_                coll0_segnos:        10.
                physical_record_buffer_ptr     bootload_early_dump:       73.
        2310    pointers_and_lengths     bootload_early_dump:      309,  314,  315.
           5    prb                      bootload_early_dump:       73,
                                         bootload_equs:       17.
       60000    prb_absloc               bootload_equs:      102.
        6000    prb_lth                  bootload_equs:      103.
         401    prb_segno_               coll0_segnos:        18.
                read_line                bootload_early_dump:       97.
           6    seg                      bootload_early_dump:       84,   85,   90,  188,  191,
                                         bootload_equs:       18.
           1    seg2                     bootload_equs:       13.
          17    setup                    bootload_early_dump:       57,   66.
           3    slt                      bootload_early_dump:       71,
                                         bootload_equs:       15.
                slt_ptr                  bootload_early_dump:       71.
           7    slt_segno_               coll0_segnos:        11.
                status_mask              bootload_early_dump:      143,  153,  204,  221,  231.
         252    system_type              bootload_early_dump:       47,  133,  158,  169,  170,  178,  265.
          47    TAPE.backspace_file      tape_io_commands:    26.
          46    TAPE.backspace_record    bootload_early_dump:      296,
                                         tape_io_commands:    25.
          10    TAPE.control_store_overlay     tape_io_commands:    27.
          31    TAPE.diagnostic_mode_control   tape_io_commands:    49.
          54    TAPE.erase               bootload_early_dump:      298,
                                         tape_io_commands:    29.
          45    TAPE.forward_space_file  tape_io_commands:    23.
          44    TAPE.forward_space_record      tape_io_commands:    22.
           5    TAPE.load_from_device    tape_io_commands:    28.
          11    TAPE.main_memory_overlay       tape_io_commands:    50.
          25    TAPE.read_ascii_ebcdic_record  tape_io_commands:    47.
          27    TAPE.read_ascii_record   tape_io_commands:    45.
           4    TAPE.read_bcd_record     tape_io_commands:    39.
           5    TAPE.read_binary_record  tape_io_commands:    35.
          26    TAPE.read_control_registers    tape_io_commands:     7.
          24    TAPE.read_ebcdic_record  tape_io_commands:    43.
           3    TAPE.read_tape_nine      tape_io_commands:    33.
          67    TAPE.release_device      tape_io_commands:    16.
          50    TAPE.request_device_status     tape_io_commands:     3.
           0    TAPE.request_status      tape_io_commands:     1.
           6    TAPE.reread_bcd_record   tape_io_commands:    40.
           7    TAPE.reread_binary_record      tape_io_commands:    37.
          37    TAPE.reread_ebcdic_record      tape_io_commands:    44.
          66    TAPE.reserve_device      tape_io_commands:    15.
          51    TAPE.reset_device_status       tape_io_commands:     4.
          40    TAPE.reset_status        bootload_early_dump:      286,
                                         tape_io_commands:     2.
          70    TAPE.rewind              bootload_early_dump:      294,
                                         tape_io_commands:    11.
          72    TAPE.rewind_unload       tape_io_commands:    14.
          65    TAPE.set_1600_bpi        bootload_early_dump:      292,
                                         tape_io_commands:    21.
          64    TAPE.set_200_bpi         tape_io_commands:    17.
          61    TAPE.set_556_bpi         tape_io_commands:    19.
          60    TAPE.set_800_bpi         tape_io_commands:    20.
          63    TAPE.set_file_format     tape_io_commands:    10.
          62    TAPE.set_file_protect    tape_io_commands:     9.
          57    TAPE.survey_devices      tape_io_commands:     5.
          75    TAPE.tape_load           tape_io_commands:    13.
          35    TAPE.write_ascii_ebcdic_record       tape_io_commands:    46.
          14    TAPE.write_bcd_record    tape_io_commands:    38.
          15    TAPE.write_binary_record       bootload_early_dump:      288,
                                               tape_io_commands:    34.
          16    TAPE.write_control_registers   tape_io_commands:     8.
          34    TAPE.write_ebcdic_record       tape_io_commands:    41.
          55    TAPE.write_eof_record    tape_io_commands:    31.
          13    TAPE.write_tape_nine     tape_io_commands:    32.
        2270    tape_backspace_idcw      bootload_early_dump:      130,  218,  296.
         246    tape_buffer              bootload_early_dump:      133,  260,  290.
        2254    tape_buffer_end          bootload_early_dump:      270,  290.
                tape_channel_number      bootload_early_dump:      138,  148,  199,  216,  226,  244.
        2266    tape_density_idcw        bootload_early_dump:      128,  150,  292.
                tape_dump_error          bootload_early_dump:      256.
        2271    tape_erase_idcw          bootload_early_dump:      131,  228,  298.
         244    tape_error               bootload_early_dump:      144,  154,  207,  222,  232,  255.
                tape_iom_number          bootload_early_dump:      137,  147,  198,  215,  225,  243.
        2262    tape_io_pcw              bootload_early_dump:      139,  149,  200,  217,  227,  245,  286.
        2267    tape_rewind_idcw         bootload_early_dump:      129,  140,  246,  294.
                template_slt_            bootload_early_dump:       69,   70,   71,   72,   73,   74,   84.
       46000    toedata_absloc           bootload_equs:       90.
        4000    toedata_lth              bootload_equs:       91.
          10    toehold_data_segno_      coll0_segnos:        12.
           1    toehold_segno_           coll0_segnos:         5.
       24000    toe_absloc               bootload_equs:       81.
        4000    toe_lth                  bootload_equs:       82.
          13    toe_segno_               coll0_segnos:        15.
       52000    upt_absloc               bootload_equs:       93.
        2000    upt_lth                  bootload_equs:       94.
          12    upt_segno_               coll0_segnos:        14.
                write_nl                 bootload_early_dump:       95,  100.
         173    write_record             bootload_early_dump:      196,  234.
        2265    write_tape_ddcw          bootload_early_dump:      134,  290.
        2264    write_tape_idcw          bootload_early_dump:      127,  201,  288.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
