	COMPILATION LISTING OF SEGMENT sc_admin_command_
	Compiled by: Multics PL/I Compiler, Release 33c, of October 25, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 92-03-03_1548.59_Tue_mst
	    Options: optimize list

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        6*        *                                                         *
        7*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        8*        *                                                         *
        9*        * Copyright (c) 1972 by Massachusetts Institute of        *
       10*        * Technology and Honeywell Information Systems, Inc.      *
       11*        *                                                         *
       12*        *********************************************************** */
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
       16*     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1056):
       17*     Correct error message documentation.
       18*  2) change(87-04-05,GDixon), approve(87-05-28,MCR7707),
       19*     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
       20*     Allow force_reset and reset requests via sac sc_command. (phx20281)
       21*  3) change(91-03-11,Vu), approve(91-03-11,MCR8241), audit(91-12-06,Zimmerman),
       22*     install(92-03-03,MR12.5-1010):
       23*     The sc_admin_command_ misidenfies itself as sc_admin_comamnd.
       24*                                                   END HISTORY COMMENTS */
       25 
       26 
       27 /* format: style2,idind30 */
       28 
       29 sc_admin_command_:
       30      procedure (ASR_info_ptr, ASR_sender_ptr);
       31 
       32 /**** This program handles requests from administrators for
       33*      commands to be executed in the initializer process. */
       34 
       35 
       36 /* Modified May 1982, E. N. Kittlitz. Cleanup */
       37 /* Modified June 1982, E. N. Kittlitz. Fix command trailing NL handling */
       38 /* Modified 1984-10-04 BIM to convert to as_request_ from old mechanism */
       39 /* Modified 1984-11-03 BIM for new system control (ssu_) */
       40 /* Modified 1984-12-20 BIM to unmask IPC in here. */
       41 /* Modified 1985-01-07 BIM for access_control_name in sc_subsystem_info. */
       42 /* Modified 1985-03-13 E. Swenson to make use Initializer.SysDaemon.* for 
       43*   for access control checking during sac commands */
       44 /* Modified 1985-03-25 EJ Sharpe, use flush_pending_output control rather
       45*   than forcing it with null message after admin command completion. */
       46 /* Modified 1985-04-23 E. Swenson to fix signal_io_ handler to not catch
       47*   signals not caused by the sc_admin_command_ command line. */
       48 /* Modified 1985-05-13 E. Swenson to fix the above fix.  Credits go to Mr.
       49*   Sibert. */
       50 
       51 /**** This procedure depends on sc_process_command_line_ to 
       52*      reattach switches and do all that other complex stuff.
       53*      However, this procedure has its own signal_io_ handler
       54*      to over-ride the normal one. This handler traps input
       55*      and logs output.
       56*
       57*      Furthermore, this procedure has other condition handlers
       58*      to handle other problems.
       59*
       60*      NOTE
       61*      Some provisions are made for a "dialog" mode.
       62*      dialog mode is intended to be a two-way channel utilizing
       63*      message segments. 
       64*
       65*      dialog mode is intended to enter admin mode, NOT allow a 
       66*      user process to dial up and become a message coordinator source.
       67**/
       68 
       69 	declare (ASR_info_ptr, ASR_sender_ptr)
       70 				        pointer parameter;
       71 
       72 	dcl     acs_mode		        bit (36) aligned;
       73 	dcl     code		        fixed bin (35);
       74 	dcl     capture_output_ptr	        pointer;
       75 	dcl     capture_output_length	        fixed bin (21);
       76 	dcl     capture_overran	        bit (1) aligned;
       77 	dcl     completion_string	        char (200);
       78 	dcl     prev_iocb_name	        char (32);
       79 	dcl     finish_signalled	        bit (1) aligned;
       80 	dcl     evidence_of_error	        bit (1) aligned;
       81 	dcl     ignore_io		        bit (1) aligned;
       82 	dcl     sci_ptr		        pointer;
       83 	dcl     message_string	        char (1000);
       84 	dcl     test_switches	        bit (1) aligned;
       85 	dcl     error_string	        char (100) aligned;
       86 	dcl     unmask_count	        fixed bin;
       87 
       88 	dcl     as_send_user_mail_	        entry (character (*), character (*), character (*), character (*),
       89 				        character (*), bit (72) aligned, character (*));
       90 	dcl     as_send_user_message_	        entry (character (*), character (*), character (*), character (*),
       91 				        bit (72) aligned, character (*), bit (1) aligned);
       92 	dcl     com_err_		        entry () options (variable);
       93 	dcl     continue_to_signal_	        entry (fixed bin (35));
       94 	dcl     convert_status_code_	        entry (fixed binary (35), character (8) aligned, character (100) aligned);
       95 	dcl     cu_$get_cl_intermediary       entry (entry);
       96 	dcl     cu_$set_cl_intermediary       entry (entry);
       97 	dcl     cu_$reset_cl_intermediary     entry;
       98 	dcl     default_error_handler_$wall   entry;
       99 	dcl     find_condition_info_	        entry (pointer, pointer, fixed binary (35));
      100 	dcl     get_group_id_	        entry () returns (char (32));
      101 	dcl     get_temp_segment_	        entry (character (*), pointer, fixed binary (35));
      102 	dcl     hcs_$wakeup		        entry (bit (36) aligned, fixed bin (71), bit (72) aligned, fixed bin (35))
      103 				        ;
      104 	dcl     ioa_		        entry () options (variable);
      105 	dcl     ioa_$ioa_switch_nnl	        entry () options (variable);
      106 	dcl     ioa_$ioa_switch	        entry () options (variable);
      107 	dcl     ioa_$rsnnl		        entry () options (variable);
      108 	dcl     ioa_$rsnp		        entry () options (variable);
      109 	dcl     release_temp_segment_	        entry (character (*), pointer, fixed binary (35));
      110 	dcl     sc_create_sci_	        entry (pointer, fixed binary (35));
      111 	dcl     sc_create_sci_$destroy        entry (pointer);
      112 	dcl     sc_process_command_line_$multics_command
      113 				        entry (ptr, ptr, fixed bin (21));
      114 	dcl     sc_ipc_mask_$unmask	        entry (fixed binary);
      115 	dcl     sc_ipc_mask_$remask	        entry (fixed binary);
      116 	dcl     ssu_$get_info_ptr	        entry (ptr) returns (ptr);
      117 	dcl     sys_log_		        entry options (variable);
      118 	dcl     sys_log_$error_log	        entry options (variable);
      119 	dcl     up_sysctl_$check_acs	        entry (character (*), character (*), fixed binary, bit (36) aligned,
      120 				        fixed binary (35));
      121 
      122 
      123 	dcl     error_table_$recoverable_error
      124 				        fixed bin (35) ext static;
      125 	dcl     error_table_$as_sac_command_read
      126 				        fixed bin (35) external static;
      127 	dcl     error_table_$insufficient_access
      128 				        fixed bin (35) ext static;
      129 	dcl     error_table_$unimplemented_version
      130 				        fixed bin (35) ext static;
      131 	dcl     error_table_$unexpected_condition
      132 				        fixed bin (35) ext static;
      133 	dcl     error_table_$undefined_order_request
      134 				        fixed bin (35) ext static;
      135 
      136 	dcl     cleanup		        condition;
      137 	dcl     command_error	        condition;
      138 	dcl     any_other		        condition;
      139 	dcl     finish		        condition;
      140 	dcl     signal_io_		        condition;
      141 
      142 	dcl     addcharno		        builtin;
      143 	dcl     addr		        builtin;
      144 	dcl     length		        builtin;
      145 	dcl     min		        builtin;
      146 	dcl     null		        builtin;
      147 	dcl     substr		        builtin;
      148 	dcl     unspec		        builtin;
      149 
      150 	dcl     MAX_CAPTURE_LENGTH	        fixed bin (21) init (1024 * 240 * 4) int static options (constant);
      151 
      152 
      153 	test_switches = "0"b;
      154 	asr_admin_command_info_ptr = ASR_info_ptr;
      155 	as_request_sender_ptr = ASR_sender_ptr;
      156 	asr_replyp = addr (as_request_sender.reply_message);
      157 	asr_reply_admin_command.code = 0;
      158 	asr_reply_admin_command.flags = "0"b;
      159 
      160 	if asr_admin_command_info.version ^= ASR_AC_VERSION_1
      161 	then do;
      162 		asr_reply_admin_command.code = error_table_$unimplemented_version;
      163 		go to ERROR_NO_EXECUTION;
      164 	     end;
      165 
      166 /**** Does the user have access to do this? */
      167 
      168 	call up_sysctl_$check_acs ("send_admin_command.acs", as_request_sender.group_id,
      169 	     (as_request_sender.validation_level), acs_mode, code);
      170 	if code ^= 0
      171 	then do;
      172 		call sys_log_$error_log (SL_LOG_SILENT, code, "sc_admin_command_", "Failed to check access for ^a.",
      173 		     as_request_sender.group_id);
      174 		asr_reply_admin_command.code = error_table_$insufficient_access;
      175 		go to ERROR_NO_EXECUTION;
      176 	     end;
      177 	if (acs_mode & RW_ACCESS) ^= RW_ACCESS
      178 	then do;
      179 		call sys_log_ (SL_LOG_SILENT, "sc_admin_command_: Denied send_admin_command for ^a in ring ^d.",
      180 		     as_request_sender.group_id, as_request_sender.validation_level);
      181 		asr_reply_admin_command.code = error_table_$insufficient_access;
      182 		go to ERROR_NO_EXECUTION;
      183 	     end;
      184 
      185 /**** Okay, the sucker is authorized. Now log the command line. */
      186 
      187 	call sys_log_ (SL_LOG, "sc_admin_command_: ^a: ^a", as_request_sender.group_id, asr_admin_command_info.command);
      188 
      189 	if ^(asr_admin_command_info.send_start_wakeup | asr_admin_command_info.send_completion_wakeup)
      190 	then asr_admin_command_info.header.reply_channel = 0;
      191 						/* inhibit as_request_sender_ reply wakeups in this case. */
      192 
      193 
      194 	call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "sc_admin_command_: ^a: ^a", as_request_sender.group_id,
      195 	     asr_admin_command_info.command);
      196 
      197 
      198 	ignore_io = "1"b;
      199 	finish_signalled = "0"b;
      200 	on signal_io_ call IO_SIGNAL_HANDLER;
      201 
      202 /**** Okay, we are now signalling whenever I/O on user_i/o tries to happen */
      203 
      204 	on finish
      205 	     begin;
      206 		finish_signalled = "1"b;
      207 		code = error_table_$unexpected_condition;
      208 		go to UNWIND_LABEL;
      209 	     end;
      210 
      211 	call cu_$set_cl_intermediary (CL_ENTRY);
      212 	evidence_of_error = "0"b;
      213 	on command_error
      214 	     begin;
      215 		evidence_of_error = "1"b;
      216 	     end;
      217 
      218 	ignore_io = "0"b;				/* all set */
      219 
      220 	if asr_admin_command_info.send_start_wakeup
      221 	then call SEND_START_WAKEUP;
      222 
      223 	capture_output_ptr = null ();
      224 	if asr_admin_command_info.send_completion_mail
      225 	then call SETUP_CAPTURE_OUTPUT;
      226 
      227 	begin;
      228 	     declare 1 restrictions		   aligned like rcodebits;
      229 	     restrictions = "1"b;			/* all powers */
      230 	     restrictions.admin_mode = "0"b;		/* silly to allow sac to enter admin mode */
      231 	     call sc_create_sci_ (sci_ptr, code);
      232 	     if code ^= 0
      233 	     then do;
      234 		     call sys_log_$error_log (SL_LOG_SILENT, code, "sc_admin_command_",
      235 			"Failed to create sci for execution of that command.");
      236 		     go to UNWIND_NO_REMASK_LABEL;
      237 		end;
      238 	     sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
      239 	     sc_subsystem_info.source_name = "sc_admin_command_";
      240 	     sc_subsystem_info.restriction_flags = unspec (restrictions);
      241 	     sc_subsystem_info.no_real_tty = "1"b;
      242 	     sc_subsystem_info.real_iocb = null ();
      243 	     sc_subsystem_info.mc_atep = null ();
      244 	     sc_subsystem_info.access_control_name = get_group_id_ ();
      245 	end;
      246 
      247 	prev_iocb_name = "user_output";		/* assume vanilla output */
      248 	call sc_ipc_mask_$unmask (unmask_count);
      249 	on any_other call ANY_OTHER_HANDLER ();
      250 
      251 	call sc_process_command_line_$multics_command (sci_ptr, addr (asr_admin_command_info.command),
      252 	     length (asr_admin_command_info.command));	/* Execute the command. */
      253 	call sc_ipc_mask_$remask (unmask_count);
      254 	asr_reply_admin_command.code = 0;
      255 	asr_reply_admin_command.flags = ""b;
      256 	asr_reply_admin_command.command_completed = "1"b;
      257 	asr_reply_admin_command.command_had_errors = evidence_of_error;
      258 	go to RESTORE_RETURN;
      259 
      260 UNWIND_LABEL:
      261 	call sc_ipc_mask_$remask (unmask_count);
      262 UNWIND_NO_REMASK_LABEL:
      263 	if code ^= 0
      264 	then asr_reply_admin_command.code = code;
      265 	asr_reply_admin_command.flags = ""b;
      266 	asr_reply_admin_command.flags.command_completed = "1"b;
      267 	asr_reply_admin_command.flags.command_aborted = "1"b;
      268 
      269 
      270 RESTORE_RETURN:
      271 	ignore_io = "1"b;
      272 	revert any_other;
      273 	call cu_$reset_cl_intermediary;
      274 	call sc_create_sci_$destroy (sci_ptr);
      275 	if test_switches
      276 	then do;
      277 		call com_err_ (code, "sc_admin_command_$test_signal_handling", "Returned via unwind.");
      278 		return;
      279 	     end;
      280 
      281 	if ^asr_admin_command_info.send_completion_wakeup
      282 	then asr_admin_command_info.header.reply_channel = 0;
      283 						/* prevent as_request_server_ from returning any wakeup */
      284 	if code ^= 0
      285 	then call convert_status_code_ (code, "", error_string);
      286 	else error_string = "";
      287 	call ioa_$rsnnl (
      288 	     "Completed command^[ with errors^].^[ Finish condition signalled.^]^[ ^a^/^;^s^]^[ Command line aborted by error.^]",
      289 	     completion_string, (0), asr_reply_admin_command.flags.command_had_errors, finish_signalled, code ^= 0,
      290 	     error_string, asr_reply_admin_command.flags.command_aborted);
      291 
      292 	call iox_$control (sc_stat_$admin_log_iocb, "flush_pending_output", null (), (0));
      293 	call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "sc_admin_command_: ^a", completion_string);
      294 						/* log completion text */
      295 	if asr_admin_command_info.send_completion_message
      296 	then do;
      297 		call ioa_$rsnnl (
      298 		     "Completed command ^a^[ with errors^].^[ Finish condition signalled.^]^[ ^a^/^;^s^]^[ Command line aborted by error.^]",
      299 		     message_string, (0),
      300 		     substr (asr_admin_command_info.command, min (length (asr_admin_command_info.command), 50)),
      301 		     asr_reply_admin_command.flags.command_had_errors, finish_signalled, code ^= 0, error_string,
      302 		     asr_reply_admin_command.flags.command_aborted);
      303 
      304 		call SEND_MESSAGE (asr_admin_command_info.mail_destination, completion_string);
      305 	     end;
      306 	if asr_admin_command_info.send_completion_mail
      307 	then call SEND_COMPLETION_MAIL (completion_string);
      308 						/* complex enough for a proc */
      309 						/* this frees capture segment */
      310 
      311 	return;
      312 
      313 CL_ENTRY:
      314      procedure;
      315 	code = error_table_$unexpected_condition;
      316 	go to UNWIND_LABEL;
      317      end CL_ENTRY;
      318 
      319 IO_SIGNAL_HANDLER:
      320      procedure;
      321 	declare 1 CI		        aligned like condition_info;
      322 
      323 
      324 /**** Check if this signal_io_ is for us.  If not, let someone else handle
      325*      it. */
      326 
      327 	if sc_stat_$admin_sci_ptr ^= sci_ptr
      328 	then do;
      329 		call continue_to_signal_ ((0));
      330 		return;
      331 	     end;
      332 
      333 	if ignore_io
      334 	then return;
      335 
      336 	CI.version = condition_info_version_1;
      337 	call find_condition_info_ (null (), addr (CI), (0));
      338 	signal_io_info_ptr = CI.info_ptr;
      339 	signal_io_info.returned_error_code = 0;
      340 
      341 	if signal_io_info.operation = SGI_OP_GET_LINE
      342 	then call GET_LINE;
      343 	else if signal_io_info.operation = SGI_OP_GET_CHARS
      344 	then call GET_CHARS;
      345 	else if signal_io_info.operation = SGI_OP_PUT_CHARS
      346 	then call PUT_CHARS;
      347 	else if signal_io_info.operation = SGI_OP_POSITION
      348 	then call POSITION;
      349 	else if signal_io_info.operation = SGI_OP_CONTROL
      350 	then call CONTROL;
      351 	else if signal_io_info.operation = SGI_OP_MODES
      352 	then call MODES;
      353 
      354 	return;					/* If we get here, then we needn't unwind */
      355 
      356 
      357 
      358 GET_LINE:
      359      procedure;
      360 
      361 	call INPUT;
      362 	return;
      363      end GET_LINE;
      364 
      365 GET_CHARS:
      366      procedure;
      367 	call INPUT;
      368 	return;
      369      end GET_CHARS;
      370 
      371 POSITION:
      372      procedure;
      373 	call INPUT;
      374 	return;
      375      end POSITION;
      376 
      377 INPUT:
      378      procedure;
      379 
      380 	code = error_table_$as_sac_command_read;
      381 	go to UNWIND_LABEL;
      382      end INPUT;
      383 
      384 MODES:
      385      procedure;
      386 
      387 	signal_io_old_modes = "";
      388 	return;
      389      end MODES;
      390 
      391 PUT_CHARS:
      392      procedure;
      393 
      394 	declare window_ptr		        pointer;
      395 	declare window_length	        fixed bin (21);
      396 	declare window		        char (window_length) based (window_ptr);
      397 
      398 	if signal_io_info.iocb_ptr = iox_$error_output
      399 	then evidence_of_error = "1"b;
      400 	if test_switches
      401 	then do;
      402 		call ioa_ ("sc_admin_command_$test_signal_handling: ^a: ^a", signal_io_info.iocb_name,
      403 		     signal_io_io_buffer);
      404 		return;
      405 	     end;
      406 	if prev_iocb_name ^= signal_io_info.iocb_name
      407 	then call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^/^a:^/^a", signal_io_info.iocb_name,
      408 		signal_io_io_buffer);
      409 	else call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^a", signal_io_io_buffer);
      410 	prev_iocb_name = signal_io_info.iocb_name;	/* log it */
      411 	if capture_output_ptr = null () /* not capturing */ | capture_overran
      412 						/* more than we can mail */
      413 	then return;
      414 
      415 	window_ptr = addcharno (capture_output_ptr, capture_output_length);
      416 	window_length = length (signal_io_io_buffer);
      417 	capture_output_length = capture_output_length + window_length;
      418 	if capture_output_length > MAX_CAPTURE_LENGTH
      419 	then do;
      420 		capture_overran = "1"b;		/* don't capture this message at all */
      421 		capture_output_length = capture_output_length - window_length;
      422 	     end;
      423 	else window = signal_io_io_buffer;
      424 	return;
      425      end PUT_CHARS;
      426 
      427 CONTROL:
      428      procedure;
      429 
      430 	if signal_io_order_name = "hangup"
      431 	then return;
      432 	if signal_io_order_name = "listen"
      433 	then return;
      434 	if signal_io_order_name = "quit_enable"
      435 	then return;
      436 	if signal_io_order_name = "quit_disable"
      437 	then return;
      438 	if signal_io_order_name = "start"
      439 	then return;
      440 	if signal_io_order_name = "printer_on"
      441 	then return;
      442 	if signal_io_order_name = "printer_off"
      443 	then return;
      444 	if signal_io_order_name = "read_status"
      445 	then call INPUT;
      446 	signal_io_info.returned_error_code = error_table_$undefined_order_request;
      447 	return;
      448      end CONTROL;
      449      end IO_SIGNAL_HANDLER;
      450 
      451 
      452 SEND_START_WAKEUP:
      453      procedure;
      454 
      455 	if asr_admin_command_info.header.reply_channel = 0
      456 	then return;
      457 	declare 1 l_reply		        aligned like asr_reply_admin_command;
      458 	l_reply.code = 0;
      459 	l_reply.flags = ""b;
      460 	l_reply.command_started = "1"b;
      461 
      462 	call hcs_$wakeup (as_request_sender.process_id, asr_admin_command_info.header.reply_channel, unspec (l_reply),
      463 	     (0));
      464 	return;
      465      end SEND_START_WAKEUP;
      466 
      467 
      468 test_signal_handling:
      469      entry;
      470 	declare test_iocb		        pointer;
      471 	declare default_cl_intermediary       entry (1 aligned, 2 bit (1) unaligned, 2 bit (35) unaligned) variable;
      472 	declare 1 cli_flags		        aligned,
      473 		2 reset		        bit (1) unaligned,
      474 		2 pad		        bit (35) unaligned;
      475 
      476 	test_switches = "1"b;
      477 	ignore_io = "0"b;
      478 	on signal_io_ call IO_SIGNAL_HANDLER;
      479 	call iox_$attach_name ("test_sc_admin_command", test_iocb, "signal_io_", null (), (0));
      480 	call iox_$open (test_iocb, Stream_input_output, "0"b, (0));
      481 	call cu_$get_cl_intermediary (default_cl_intermediary);
      482 	call cu_$set_cl_intermediary (NEW_COMMAND_LEVEL);
      483 	cli_flags = "0"b;
      484 	on cleanup call cu_$set_cl_intermediary (default_cl_intermediary);
      485 	call default_cl_intermediary (cli_flags);
      486 	return;
      487 
      488 NEW_COMMAND_LEVEL:
      489      procedure (cl_flags);
      490 
      491 	declare 1 cl_flags		        aligned,
      492 		2 reset		        bit (1) unaligned,
      493 		2 pad		        bit (35) unaligned;
      494 
      495 	on signal_io_ call IO_SIGNAL_HANDLER;
      496 	call default_cl_intermediary (cl_flags);
      497 	return;
      498      end NEW_COMMAND_LEVEL;
      499 
      500 
      501 ERROR_NO_EXECUTION:
      502 	call NOTIFY_REFUSAL;
      503 	return;
      504 
      505 NOTIFY_REFUSAL:
      506      procedure;
      507 
      508 /**** If the sender set ^start_wakeup, then perhaps we can notify
      509*      of the problem via an interactive message or mail. */
      510 
      511 	if asr_admin_command_info.send_start_wakeup
      512 	then return;				/* Let as_request_server_ pother about it. */
      513 
      514 	asr_admin_command_info.reply_channel = 0;	/* prevent reply */
      515 
      516 	call convert_status_code_ (asr_reply_admin_command.code, "", error_string);
      517 	message_string = "";
      518 	call ioa_$rsnnl ("^a Admin command line refused. Command line was:^/ ^a^/", message_string, (0), error_string,
      519 	     asr_admin_command_info.command);
      520 	if asr_admin_command_info.send_completion_message
      521 	then call SEND_MESSAGE (asr_admin_command_info.mail_destination, message_string);
      522 	if asr_admin_command_info.send_completion_mail
      523 	then call SEND_MAIL (asr_admin_command_info.mail_destination, "Admin command execution refused" /* subject */,
      524 		message_string);
      525 	if ^(asr_admin_command_info.send_completion_mail | asr_admin_command_info.send_completion_message)
      526 	then call SEND_MESSAGE ("", message_string);	/* pick a destination out of the air */
      527 	return;
      528      end NOTIFY_REFUSAL;
      529 
      530 SEND_MESSAGE:
      531      procedure (Destination, Message);
      532 
      533 	declare (Destination, Message)        char (*);
      534 
      535 	call as_send_user_message_ ("sc_admin_command_", Destination, as_request_sender.group_id, Message,
      536 	     as_request_sender.authorization, "Admin command server", "0"b);
      537 	return;
      538      end SEND_MESSAGE;
      539 
      540 SEND_MAIL:
      541      procedure (Destination, Subject, Message) options (non_quick);
      542 
      543 	declare (Destination, Subject, Message)
      544 				        char (*);
      545 
      546 	declare format_document_$string       entry (character (*), character (*), fixed binary (21), pointer,
      547 				        fixed binary (35));
      548 	declare 1 fdo		        aligned like format_document_options;
      549 
      550 	declare formatted_message	        char (1000);
      551 	declare formatted_message_length      fixed bin (21);
      552 	declare message_to_send	        char (formatted_message_length) based (addr (formatted_message));
      553 
      554 	unspec (fdo) = ""b;
      555 	fdo.version_number = format_document_version_2;
      556 	fdo.indentation = 0;
      557 	fdo.line_length = 65;
      558 	fdo.switches.adj_sw = "1"b;
      559 	fdo.switches.galley_sw = "1"b;
      560 	fdo.switches.dont_compress_sw = "1"b;
      561 
      562 	call format_document_$string (Message, formatted_message, formatted_message_length, addr (fdo), code);
      563 	if code = error_table_$recoverable_error
      564 	then code = 0;
      565 	if code ^= 0
      566 	then do;
      567 		formatted_message = Message;
      568 		formatted_message_length = length (Message);
      569 	     end;
      570 
      571 	call as_send_user_mail_ ("sc_admin_command_", Destination, as_request_sender.group_id, Subject, message_to_send,
      572 	     as_request_sender.authorization, "Admin command server");
      573 	return;
      574      end SEND_MAIL;
      575 
      576 SEND_COMPLETION_MAIL:
      577      procedure (Trailer);
      578 
      579 	declare Trailer		        char (*);	/* end to tack on to message */
      580 	declare remaining_string	        char (MAX_CAPTURE_LENGTH + 1000 - capture_output_length)
      581 				        based (remaining_ptr);
      582 						/* the max is small enough that we always have some extra room */
      583 	declare remaining_ptr	        pointer;
      584 	declare added_length	        fixed bin (21);
      585 	declare total_message	        char (capture_output_length) based (capture_output_ptr);
      586 	declare subject		        char (asr_admin_command_info.command_length + 20);
      587 						/* room for "succeeded: " */
      588 
      589 	remaining_ptr = addcharno (capture_output_ptr, capture_output_length);
      590 	call ioa_$rsnp ("^/^a^[^/The output (above) was truncated because it was too long to fit^/ in a mail message.",
      591 	     remaining_string, added_length, Trailer, capture_overran);
      592 	capture_output_length = capture_output_length + added_length;
      593 						/* total in message */
      594 
      595 	call ioa_$rsnnl ("^[Succeeded^;Failed^]: ^a", subject, (0),
      596 	     ^asr_reply_admin_command.flags.command_aborted & asr_reply_admin_command.code = 0,
      597 	     asr_admin_command_info.command);
      598 	call as_send_user_mail_ ("sc_admin_command_", asr_admin_command_info.mail_destination,
      599 	     as_request_sender.group_id, subject, total_message, as_request_sender.authorization,
      600 	     "Admin command server");
      601 	call release_temp_segment_ ("sc_admin_command_", capture_output_ptr, (0));
      602 	return;
      603      end SEND_COMPLETION_MAIL;
      604 
      605 SETUP_CAPTURE_OUTPUT:
      606      procedure;
      607 
      608 	declare initial_message	        char (10000) aligned based (capture_output_ptr);
      609 	call get_temp_segment_ ("sc_admin_command_", capture_output_ptr, (0));
      610 	capture_output_length = 0;
      611 	capture_overran = "0"b;
      612 	call ioa_$rsnp ("Output of execution of admin command:^/^a^/", initial_message, capture_output_length,
      613 	     asr_admin_command_info.command);
      614 	return;
      615      end SETUP_CAPTURE_OUTPUT;
      616 
      617 ANY_OTHER_HANDLER:
      618      procedure ();
      619 
      620 /**** We really want the operation of default_error_handler_$wall for
      621*      all conditions, except signal_io_, where we want the normal 
      622*      signal_io_ handlers action.  So we peek at the condition being
      623*      signaled -- if it is signal_io_, then we continue to signal.
      624*      Otherwise we pass our work off to default_error_handler_$wall. */
      625 
      626 	dcl     1 CI		        aligned like condition_info;
      627 	dcl     code		        fixed bin (35);
      628 
      629 	CI.version = condition_info_version_1;
      630 	call find_condition_info_ (null (), addr (CI), code);
      631 	if code = 0
      632 	then if CI.condition_name = "signal_io_"
      633 	     then do;
      634 		     call continue_to_signal_ ((0));
      635 		     return;
      636 		end;
      637 	call default_error_handler_$wall;		/* But note the CL intermediary */
      638 	return;
      639      end ANY_OTHER_HANDLER;				/* format: off */
      640  /* BEGIN INCLUDE FILE ... as_data_.incl.pl1 ... */
  1     2 
  1     3 /* format: style4 */
  1     4 
  1     5 /* This file must be kept in sync with as_data_.alm */
  1     6 
  1     7 /****^  HISTORY COMMENTS:
  1     8*  1) change(86-09-21,Beattie), approve(86-09-22,MCR7542),
  1     9*     audit(86-10-31,Brunelle), install(86-11-12,MR12.0-1211):
  1    10*     Remove references to the 963 and 029 preaccess commands and remove support
  1    11*     for ARDS, 202_ETX, 2741 and 1050 in system interfaces.
  1    12*  2) change(86-09-25,Swenson), approve(87-07-20,MCR7737),
  1    13*     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1056):
  1    14*     Add references to as_data_ entrypoints added for Login Server.
  1    15*  3) change(87-03-03,Brunelle), approve(87-07-20,MCR7697),
  1    16*     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1056):
  1    17*     Added new user signal field of inacrcvd (14) to handle inactivity response
  1    18*     from user.
  1    19*                                                   END HISTORY COMMENTS */
  1    20 
  1    21 dcl  as_data_$BS char (1) aligned ext static;		/* BACKSPACE character */
  1    22 dcl  as_data_$CR char (1) aligned ext static;		/* CARRIAGE RETURN character */
  1    23 dcl  as_data_$abs_dim char (32) ext static;		/* absentee DIM */
  1    24 dcl  as_data_$acct_update_priority fixed bin ext static;	/* accounting update IPC priority */
  1    25 dcl  as_data_$acsdir char (168) ext static;		/* Access Control Segment directory */
  1    26 dcl  as_data_$ansp ptr ext static;			/* answer_table */
  1    27 dcl  as_data_$as_procid bit (36) aligned ext static;	/* Answering Service process id */
  1    28 dcl  as_data_$as_ring fixed bin (3) ext static;		/* AS operating ring */
  1    29 dcl  as_data_$as_tty char (6);			/* AS master tty channel */
  1    30 dcl  as_data_$asmtp ptr ext static;			/* AS meter table */
  1    31 dcl  as_data_$autp ptr ext static;			/* absentee_user_table */
  1    32 dcl  as_data_$buzzardp ptr ext static;			/* dpg_ list of buteo processes */
  1    33 dcl  as_data_$cdtp ptr ext static;			/* CDT */
  1    34 dcl  as_data_$default_weight fixed bin (35) ext;		/* default user process load control weight */
  1    35 dcl  as_data_$devtabp ptr ext static;			/* device_table */
  1    36 dcl  as_data_$dft_user_ring fixed bin (3) ext static;	/* default user ring */
  1    37 dcl  as_data_$dutp ptr ext static;			/* daemon_user_table */
  1    38 dcl  as_data_$g115_dim char (32) ext static;
  1    39 dcl  as_data_$lct_initialized bit (1) aligned ext static;	/* LCT allocated in ring 0 */
  1    40 dcl  as_data_$lct_size fixed bin ext static;		/* CDT tty channels + spares */
  1    41 dcl  as_data_$max_user_ring fixed bin (3) ext static;	/* maximum user ring */
  1    42 dcl  as_data_$mgtp ptr ext static;			/* master group table */
  1    43 dcl  as_data_$mrd_dim char (32) ext static;		/* daemon's message routing DIM */
  1    44 dcl  as_data_$ntty_dim char (32) ext static;		/* network connection DIM */
  1    45 dcl  as_data_$pdtdir char (168) ext static;		/* PDT directory */
  1    46 dcl  as_data_$pit_ptr ptr ext static;			/* pit_temp_ */
  1    47 dcl  as_data_$rcpdir char (168) ext static;		/* RCP directory */
  1    48 dcl  as_data_$request_priority fixed bin ext static;
  1    49 dcl  as_data_$rs_ptrs (0:9) ptr ext static;		/* rate_structures */
  1    50 dcl  as_data_$rtdtp ptr ext static;			/* RTDT */
  1    51 dcl  as_data_$sat_htp ptr ext static;			/* SAT hash table */
  1    52 dcl  as_data_$satp ptr ext static;			/* SAT */
  1    53 dcl  as_data_$suffix (0:9) char (2) unaligned ext static;
  1    54 dcl  as_data_$sysdir char (168) ext static;		/* system control directory */
  1    55 dcl  as_data_$teens_suffix (10:19) char (2) unaligned ext static;
  1    56 dcl  as_data_$terminet_tabs_string char (144) varying ext static;
  1    57 dcl  as_data_$tty_dim char (32) ext static;		/* standard interactive DIM */
  1    58 dcl  as_data_$update_priority fixed bin ext static;	/* ??? */
  1    59 dcl  as_data_$version char (8) ext static;		/* AS version */
  1    60 dcl  as_data_$whoptr ptr ext static;			/* whotab */
  1    61 
  1    62 dcl  1 as_data_$login_args aligned ext static,		/* control arguments for login */
  1    63        2 n_login_args fixed bin,
  1    64        2 pad fixed bin,
  1    65        2 login_args (55 /* as_data_$login_args.n_login_args */) char (24) unaligned;
  1    66 
  1    67 dcl  1 as_data_$signal_types ext static aligned,		/* IPC process control signals */
  1    68        2 n_signals fixed bin,
  1    69        2 pad fixed bin,
  1    70        2 signals (14 /* as_data_$signal_types.n_signals */) char (8) unaligned;
  1    71 
  1    72 dcl  1 as_data_$system_signal_types ext static aligned,	/* IPC process control signals */
  1    73        2 n_system_signals fixed bin,
  1    74        2 pad fixed bin,
  1    75        2 system_signals (10 /* as_data_$system_signal_types.n_system_signals */) char (8) unaligned;
  1    76 
  1    77 dcl  as_data_$login_words fixed bin ext static aligned,
  1    78 						/* interactive login words */
  1    79      1 as_data_login_words aligned based (addr (as_data_$login_words)),
  1    80        2 n_words fixed bin,
  1    81        2 pad fixed bin,
  1    82        2 words (0 refer (as_data_login_words.n_words)) char (16) unaligned;
  1    83 
  1    84 dcl  as_data_$debug_flag bit (1) aligned external static;
  1    85 dcl  as_data_$ls_request_server_info_ptr ptr external static;
  1    86 dcl  as_data_$ls_message_buffer_cur_lth fixed bin (18) external static;
  1    87 dcl  as_data_$ls_message_buffer_max_lth fixed bin (18) external static;
  1    88 dcl  as_data_$ls_message_buffer_ptr ptr external static;
  1    89 
  1    90 /* END INCLUDE FILE ... as_data_.incl.pl1 ... */
      640 
      641  /*	BEGIN INCLUDE FILE   format_document_options.incl.pl1	     
  2     2*
  2     3*     Modified 82.10.18 by Paul W. Benjamin to add dont_compress_sw and upgrade
  2     4*			to version_2.
  2     5*     Modified 83.02.15 by PWB to add break_word_sw and max_line_length_sw.
  2     6*     Modified 83.03.01 by PWB to add dont_break_indented_lines_sw.
  2     7*     Modified 83.03.03 by PWB to add sub_err_sw.
  2     8*     Modified 83.06.07 by PWB to add dont_fill_sw.
  2     9*     Modified 83.06.09 by PWB to add hyphenation_sw and syllable_size.
  2    10**/
  2    11 
  2    12 dcl 1 format_document_options aligned based (format_document_options_ptr),
  2    13       2 version_number        fixed bin,		/* input */
  2    14                                                             /* must be format_document_version_2 */
  2    15       2 indentation           fixed bin,		/* input */
  2    16 						/* all lines must be indented by this value */
  2    17       2 line_length           fixed bin,		/* input */
  2    18 						/* initial line length */
  2    19       2 switches,
  2    20         3 pgno_sw             bit (1) unal,		/* input */
  2    21 						/* end each page with a centered page number */
  2    22         3 adj_sw              bit (1) unal,		/* input */
  2    23 						/* adjust mode initially on */
  2    24                                                             /* only meaningful if dont_fill_sw = "0"b */
  2    25         3 galley_sw           bit (1) unal,		/* input */
  2    26 						/* galley mode -- no page breaks */
  2    27         3 error_sw            bit (1) unal,		/* input */
  2    28 						/* report all errors on error_output */
  2    29         3 literal_sw          bit (1) unal,		/* input */
  2    30 						/* "1"b - interpret all lines as text */
  2    31 						/* "0"b - lines that start with "." are controls */
  2    32         3 file_sw             bit (1) unal,		/* output */
  2    33 						/* has meaning for non-zero storage system status codes */
  2    34 						/* "1"b code refers to output file */
  2    35 						/* "0"b code refers to input file */
  2    36         3 dont_compress_sw    bit (1) unal,		/* input */
  2    37 						/* "1"b - don't compress white space */
  2    38 						/* "0"b - compress white space when filling */
  2    39         3 break_word_sw      bit (1) unal,		/* input */
  2    40 						/* "1"b - break a word rather than exceed line_length */
  2    41 						/* "0"b - write an overlength line if no spaces found */
  2    42         3 max_line_length_sw  bit (1) unal,		/* input */
  2    43 						/* "1"b - line_length cannot be exceeded */
  2    44 						/* "0"b - line_length can be exceeded (by .pdw controls) */
  2    45         3 dont_break_indented_lines_sw			/* input */
  2    46 			bit (1) unal,		/* don't break a line that begins with whitespace */
  2    47 						/* when it is the last line, or the next line is */
  2    48 						/* null or the next line begins with whitespace */
  2    49         3 sub_err_sw	bit (1) unal,		/* input */
  2    50 						/* quietly call sub_err_ with diagnostic errors */
  2    51         3 dont_fill_sw        bit (1) unal,                 /* input */
  2    52                                                             /* "1"b - fill mode off initially */
  2    53                                                             /* "0"b - fill mode on initially */
  2    54         3 hyphenation_sw      bit (1) unal,
  2    55         3 mbz                 bit (23) unal,		/* input */
  2    56 						/* MUST be zero */
  2    57       2 syllable_size
  2    58 			fixed bin;		/* input */
  2    59 						/* smallest portion of word */
  2    60 						/* to be left by hyphenation */
  2    61 
  2    62 dcl  format_document_options_ptr ptr;
  2    63 dcl  format_document_version_2 fixed bin int static options (constant) init (2);
  2    64 dcl  format_document_version_1 fixed bin int static options (constant) init (1);
  2    65 	
  2    66 /*	END INCLUDE FILE   format_document_options.incl.pl1	     */
      641 
      642  /*  BEGIN:   sc_stat_.incl.pl1			  *  *  *  *  *  */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(87-02-04,GDixon), approve(87-05-25,MCR7690),
  3     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  3     7*     Add sc_stat_$vchn_requires_accept in support of DSA virtual channels.
  3     8*  2) change(87-02-04,GDixon), approve(87-05-25,MCR7680),
  3     9*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  3    10*     Reorganized by type of data to improve readability.
  3    11*                                                   END HISTORY COMMENTS */
  3    12 
  3    13 
  3    14 			      /* ACCESS NAMES		       */
  3    15 dcl (
  3    16  sc_stat_$exec_access_name,	      /* check MC access in an exec request    */
  3    17  sc_stat_$unidentified_access_name  /* check access if no one is logged in.  */
  3    18     ) char(32) ext static;
  3    19 
  3    20 		        /* PATHNAMES			       */
  3    21 dcl (
  3    22  sc_stat_$info_dir,	        /* admin info segs directory		       */
  3    23  sc_stat_$log_dir,	        /* as log segs directory		       */
  3    24  sc_stat_$mc_acs_dir,       /* message coordinator ACS segments (.mcacs) dir */
  3    25  sc_stat_$sysdir	        /* system control directory		       */
  3    26     ) char(168) ext static;
  3    27 
  3    28 		        /* OTHER CHAR STRINGS			       */
  3    29 dcl (
  3    30  sc_stat_$master_channel    /* Master TTY channel.		       */
  3    31     )  char(6) aligned ext static;
  3    32 
  3    33 			       /* LABELS			       */
  3    34 dcl (
  3    35  sc_stat_$admin_listener_exit_label, /* GO here to exit admin mode.  Set to  */
  3    36 			       /*    ssu_$null_label unless 	       */
  3    37 			       /*	   admin_listener is active.	       */
  3    38  sc_stat_$master_abort_label,	       /* GO here after fault that is not      */
  3    39 			       /*    attributable to a particular      */
  3    40 			       /*	   command.		       */
  3    41  sc_stat_$system_shutdown_label      /* GO here to shut down system	       */
  3    42     ) label variable ext static;
  3    43 
  3    44 			 /* POINTERS TO			       */
  3    45 dcl (
  3    46  sc_stat_$admin_log_iocb,	 /* IOCB for admin log		       */
  3    47  sc_stat_$admin_log_write_ptr, /* DATA for log_write_ calls on the admin log */
  3    48  sc_stat_$admin_sci_ptr,	 /* DATA ssu_ for terminal currently executing */
  3    49  sc_stat_$as_log_write_ptr,	 /* DATA for log_write_ calls on as log, used  */
  3    50 			 /*      by sys_log_.		       */
  3    51  sc_stat_$initzer_ttyp,	 /* ENT  mc_ate for initializer terminal       */
  3    52  sc_stat_$master_iocb,	 /* IOCB for "master_i/o"		       */
  3    53  sc_stat_$master_sci_ptr,	 /* DATA ssu_ (permanent) for system control   */
  3    54  sc_stat_$mc_ansp,		 /* HEAD of mc_anstbl		       */
  3    55  sc_stat_$mc_iocb,		 /* IOCB ptr for "mc_i/o"		       */
  3    56  sc_stat_$sv1_iocb,		 /* IOCB ptr for "severity1"		       */
  3    57  sc_stat_$sv2_iocb,		 /* IOCB ptr for "severity2"		       */
  3    58  sc_stat_$sv3_iocb		 /* IOCB ptr for "severity3"		       */
  3    59     ) ptr ext static;
  3    60 
  3    61 			   /* SWITCHES			       */
  3    62 dcl (
  3    63  sc_stat_$Go,		   /* TRUE after answering service is listening*/
  3    64  sc_stat_$Go_typed,		   /* TRUE immediately after 'go' is typed     */
  3    65  sc_stat_$Multics,		   /* TRUE after answering service started     */
  3    66  sc_stat_$Multics_typed,	   /* TRUE immediately after 'mult' is typed   */
  3    67  sc_stat_$Star_typed,	   /* TRUE if 'mult' and 'go' came from 'star' */
  3    68  sc_stat_$admin_listener_switch, /* TRUE if in the admin listener	       */
  3    69  sc_stat_$did_part1,	   /* TRUE if part 1 of system startup ec done */
  3    70  sc_stat_$did_part2,	   /* TRUE if part 2 of system startup ec done */
  3    71  sc_stat_$did_part3,	   /* TRUE if part 3 of system startup ec done */
  3    72  sc_stat_$mc_is_on,		   /* TRUE if message coordinator running      */
  3    73  sc_stat_$no_operator_login,	   /* TRUE if operator login not required, or  */
  3    74 			   /*	 if PNT not yet available.	       */
  3    75  sc_stat_$shutdown_typed,	   /* TRUE if 'shutdown' command in progress.  */
  3    76  sc_stat_$test_mode,	   /* TRUE if in test environment	       */
  3    77  sc_stat_$vchn_requires_accept   /* TRUE if vchn may only be used if accepted*/
  3    78 			   /*      by operator signed on system console*/
  3    79     ) bit(1) aligned ext static;
  3    80 
  3    81 
  3    82 /*  END OF:  sc_stat_.incl.pl1			  *  *  *  *  *  */
      642 
      643  /*  BEGIN:   sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
  4     2 
  4     3 /* format:style3,idind30 */
  4     4 
  4     5 /* Created  1984-10-24  BIM */
  4     6 /* Modified 1985-01-07, BIM: access control flags that track admin and X */
  4     7 /* Modified 1985-02-18, E. Swenson to save away abort_line procedure. */
  4     8 
  4     9 
  4    10 /****^  HISTORY COMMENTS:
  4    11*  1) change(87-02-17,GDixon), approve(87-07-03,MCR7680),
  4    12*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  4    13*     Correct formatting problems.  Add sc_subsystem_info.flags.dont_mask_calls
  4    14*     switch.
  4    15*  2) change(87-07-03,GDixon), approve(87-07-03,MCR7680),
  4    16*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  4    17*     Removed dont_mask_calls flag.  It is no longer needed to correctly perform
  4    18*     masking on a per-request basis.
  4    19*                                                   END HISTORY COMMENTS */
  4    20 
  4    21 
  4    22 declare	sc_subsystem_info_ptr	pointer;
  4    23 declare	1 sc_subsystem_info		aligned based (sc_subsystem_info_ptr),
  4    24 	  2 restriction_flags	bit (36) aligned,	/* copied from mc atep or fabricated */
  4    25 	  2 flags			aligned,
  4    26 	    3 no_real_tty		bit (1) unaligned,	/* for sc_admin_command_ */
  4    27 	    3 print_ready		bit (1) unal,	/* on for all except the system console,	*/
  4    28 						/*  instructs sc_process_command_line_ to deal	*/
  4    29 						/*  with the prompt				*/
  4    30 	    3 the_system_console	bit (1) unal,	/* syserr messages are printed here (but console	*/
  4    31 						/*  recover doesn't try to fix this) copied here	*/
  4    32 						/*  from the mc_ate to save other looking in there*/
  4    33 	    3 printer_offed		bit (1) unal,	/* suppress logging */
  4    34 	    3 pad			bit (32) unaligned,
  4    35 	  2 source_name		char (32) unaligned,
  4    36 	  2 area_ptr		pointer,
  4    37 	  2 mc_atep		pointer,		/* needed to play with attachments */
  4    38 	  2 real_iocb		pointer,		/* for sc_signal_io_handler_ */
  4    39 	  2 hangup_entry		entry (pointer) variable,
  4    40 						/* called on io_no_permission. */
  4    41 	  2 real_execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
  4    42 	  2 real_locate_request	entry (ptr, char (*), ptr, fixed bin (35)),
  4    43 	  2 access_control_name	char (32) unaligned,
  4    44 	  2 real_invoke_request	entry,		/* since MR11 ssu_ lacks the ability to	abort a	*/
  4    45 						/*  single request, we have an invoke_request that*/
  4    46 						/*  handles a condition to unwind the request	*/
  4    47 	  2 abort_request_label	label,		/* go here (nonlocally) to unwind a single request */
  4    48 	  2 real_abort_line		entry options (variable);
  4    49 
  4    50 declare	sc_ss_area		area based (sc_subsystem_info.area_ptr);
  4    51 
  4    52 /* The following defines the user flags for the request table. */
  4    53 
  4    54 declare	sc_rf_ptr			pointer;
  4    55 declare	1 sc_request_flags		unaligned based (sc_rf_ptr),
  4    56 	  2 dont_parse_arguments	bit,		/* reply, intercom */
  4    57 	  2 obsolete		bit,		/* warn opr to not use it */
  4    58 	  2 dont_mask_calls		bit,		/* this runs without masking ev calls */
  4    59 	  2 requires_as		bit,		/* not before AS */
  4    60 	  2 requires_no_as		bit,		/* only before AS */
  4    61 	  2 complete_disks_first	bit,		/* try to mount disks */
  4    62 	  2 no_login_needed		bit,		/* sign_on */
  4    63 	  2 pad			bit (5),
  4    64 	  2 restriction_type	fixed bin (6) unsigned;
  4    65 						/* index into restriction flag string */
  4    66 
  4    67 
  4    68 /*  END OF:  sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
      643 
      644  /* BEGIN INCLUDE FILE sys_log_constants.incl.pl1 ... 82-09-24 E. N. Kittlitz */
  5     2 
  5     3 
  5     4 /****^  HISTORY COMMENTS:
  5     5*  1) change(87-04-22,GDixon), approve(87-06-10,MCR7708),
  5     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  5     7*     Added sl_info structure and associated named constants for use in calling
  5     8*     sys_log_$general.
  5     9*                                                   END HISTORY COMMENTS */
  5    10 
  5    11 
  5    12 /* format: style4 */
  5    13 
  5    14 dcl  (
  5    15      SL_TYPE_CRASH init (-3),				/* type message with banner & kill system */
  5    16      SL_TYPE_BEEP init (-2),				/* type message with banner */
  5    17      SL_TYPE init (-1),				/* type message */
  5    18      SL_LOG_SILENT init (0),				/* log message */
  5    19      SL_LOG init (1),				/* log & type message */
  5    20      SL_LOG_BEEP init (2),				/* log & type message with banner */
  5    21      SL_LOG_CRASH init (3)				/* log & type message with banner & kill system */
  5    22      ) fixed bin internal static options (constant);
  5    23 
  5    24 dcl  1 sl_info aligned automatic,
  5    25        2 version char(8),			/* structure version       */
  5    26        2 arg_list_ptr ptr,			/* arg_list with values    */
  5    27        2 loc,
  5    28          3 (mode, severity, code, caller, data, class, ioa_msg) fixed bin,
  5    29            /* These flags control where the corresponding data item is found.*/
  5    30 	 /*  -1: data appears in the corresponding structure element below */
  5    31 	 /*   0: data is not present anywhere			       */
  5    32 	 /*  +N: data is Nth item in argument list pointed to by 	       */
  5    33 	 /*      sl_info.arg_list_ptr.  Upon return, data copied into      */
  5    34 	 /*      corresponding structure element.		       */
  5    35 	 /*  if data = +N:					       */
  5    36 	 /*      argN is data_ptr, argN+1 is data_len		       */
  5    37 	 /*  if ioa_msg = +N:				       */
  5    38 	 /*      argN+1, ... argLAST are arguments substituted into the    */
  5    39 	 /*      ioa_msg control string.  The formatted msg is returned.   */
  5    40        2 flags,
  5    41          3 ioa_msg_is_error_code bit(1) unal,	/* ioa_ctl is error code.  */
  5    42          3 flags_pad bit(35) unal,
  5    43        2 mode fixed bin,			/* as-mode, command-mode   */
  5    44        2 severity fixed bin,			/* error severity	       */
  5    45        2 code fixed bin(35),			/* error table code        */
  5    46        2 caller char(65) varying,		/* caller refname$entryname*/
  5    47        2 data,				/* binary data ptr/length  */
  5    48          3 data_ptr ptr,
  5    49          3 data_lth fixed bin(21),
  5    50        2 class char(10) varying,		/* binary data class       */
  5    51        2 ioa_msg char(500) varying;		/* formatted message text  */
  5    52 
  5    53 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5    54 /*							       */
  5    55 /* If data values (eg, sl_info.caller) are passed in the argument list,      */
  5    56 /* their data types should be as shown in the structure above, except that   */
  5    57 /* character strings should be char(*) nonvarying.		       */
  5    58 /*							       */
  5    59 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5    60 
  5    61 /* value for sl_info.version */
  5    62 dcl  SL_INFO_version_1 char (8) int static options(constant) init("sl_info1");
  5    63 
  5    64 /* values for sl_info.mode */
  5    65 dcl (SL_INFO_as_mode init(1),
  5    66      SL_INFO_command_mode init(2)) fixed bin int static options(constant);
  5    67 
  5    68 /* values for sl_info.loc.(severity code caller data class ioa_ctl arg) */
  5    69 dcl (SL_INFO_arg_given_in_structure init(-1),
  5    70      SL_INFO_arg_not_given init(0)) fixed bin int static options(constant);
  5    71 
  5    72 
  5    73 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5    74 /*							       */
  5    75 /* The following static structures are commonly used in the Login Server     */
  5    76 /* user control software.					       */
  5    77 /*							       */
  5    78 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5    79 
  5    80 /* Syntax: call Abort (severity, code, ioa_ctl, args);		       */
  5    81 
  5    82 dcl  1 sl_info_sev_code_msg		aligned int static options(constant),
  5    83        2 version char(8)		init ("sl_info1"),
  5    84        2 arg_list_ptr ptr		init (null),
  5    85        2 loc,
  5    86          3 (mode			init (-1),
  5    87 	  severity  		init ( 1),
  5    88 	  code 			init ( 2),
  5    89 	  caller 			init (-1),
  5    90 	  data 			init ( 0),
  5    91 	  class 			init ( 0),
  5    92 	  ioa_msg			init ( 3)) fixed bin,
  5    93        2 flags,
  5    94          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  5    95          3 flags_pad bit(35) unal	init ("0"b),
  5    96        2 mode fixed bin		init ( 1),
  5    97        2 severity fixed bin		init ( 0),
  5    98        2 code fixed bin(35)		init ( 0),
  5    99        2 caller char(65) varying	init (""),
  5   100        2 data,
  5   101          3 data_ptr ptr		init (null),
  5   102          3 data_lth fixed bin(21)	init ( 0),
  5   103        2 class char(10) varying	init (""),
  5   104        2 ioa_msg char(500) varying	init ("");
  5   105 
  5   106 /* Syntax: call Abort (severity, ioa_ctl, args);			       */
  5   107 
  5   108 dcl  1 sl_info_sev_msg		aligned int static options(constant),
  5   109        2 version char(8)		init ("sl_info1"),
  5   110        2 arg_list_ptr ptr		init (null),
  5   111        2 loc,
  5   112          3 (mode			init (-1),
  5   113 	  severity  		init ( 1),
  5   114 	  code 			init ( 0),
  5   115 	  caller 			init (-1),
  5   116 	  data 			init ( 0),
  5   117 	  class 			init ( 0),
  5   118 	  ioa_msg			init ( 2)) fixed bin,
  5   119        2 flags,
  5   120          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  5   121          3 flags_pad bit(35) unal	init ("0"b),
  5   122        2 mode fixed bin		init ( 1),
  5   123        2 severity fixed bin		init ( 0),
  5   124        2 code fixed bin(35)		init ( 0),
  5   125        2 caller char(65) varying	init (""),
  5   126        2 data,
  5   127          3 data_ptr ptr		init (null),
  5   128          3 data_lth fixed bin(21)	init ( 0),
  5   129        2 class char(10) varying	init (""),
  5   130        2 ioa_msg char(500) varying	init ("");
  5   131 
  5   132 /* Syntax: call Abort (severity, ioa_ctl_as_error_code, args);	       */
  5   133 
  5   134 dcl  1 sl_info_sev_coded_msg		aligned int static options(constant),
  5   135        2 version char(8)		init ("sl_info1"),
  5   136        2 arg_list_ptr ptr		init (null),
  5   137        2 loc,
  5   138          3 (mode			init (-1),
  5   139 	  severity  		init ( 1),
  5   140 	  code 			init ( 0),
  5   141 	  caller 			init (-1),
  5   142 	  data 			init ( 0),
  5   143 	  class 			init ( 0),
  5   144 	  ioa_msg			init ( 2)) fixed bin,
  5   145        2 flags,
  5   146          3 ioa_msg_is_error_code bit(1) unal init ("1"b),
  5   147          3 flags_pad bit(35) unal	init ("0"b),
  5   148        2 mode fixed bin		init ( 1),
  5   149        2 severity fixed bin		init ( 0),
  5   150        2 code fixed bin(35)		init ( 0),
  5   151        2 caller char(65) varying	init (""),
  5   152        2 data,
  5   153          3 data_ptr ptr		init (null),
  5   154          3 data_lth fixed bin(21)	init ( 0),
  5   155        2 class char(10) varying	init (""),
  5   156        2 ioa_msg char(500) varying	init ("");
  5   157 
  5   158 
  5   159 /* Syntax: call Abort (severity, code, error_return_label, ioa_ctl, args);   */
  5   160 
  5   161 dcl  1 sl_info_sev_code_label_msg	aligned int static options(constant),
  5   162        2 version char(8)		init ("sl_info1"),
  5   163        2 arg_list_ptr ptr		init (null),
  5   164        2 loc,
  5   165          3 (mode			init (-1),
  5   166 	  severity  		init ( 1),
  5   167 	  code 			init ( 2),
  5   168 	  caller 			init (-1),
  5   169 	  data 			init ( 0),
  5   170 	  class 			init ( 0),
  5   171 	  ioa_msg			init ( 4)) fixed bin,
  5   172        2 flags,
  5   173          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  5   174          3 flags_pad bit(35) unal	init ("0"b),
  5   175        2 mode fixed bin		init ( 1),
  5   176        2 severity fixed bin		init ( 0),
  5   177        2 code fixed bin(35)		init ( 0),
  5   178        2 caller char(65) varying	init (""),
  5   179        2 data,
  5   180          3 data_ptr ptr		init (null),
  5   181          3 data_lth fixed bin(21)	init ( 0),
  5   182        2 class char(10) varying	init (""),
  5   183        2 ioa_msg char(500) varying	init ("");
  5   184 
  5   185 /* Syntax:  call Log_error (code, ioa_ctl, args);			       */
  5   186 
  5   187 dcl  1 sl_info_code_msg		aligned int static options(constant),
  5   188        2 version char(8)		init ("sl_info1"),
  5   189        2 arg_list_ptr ptr		init (null),
  5   190        2 loc,
  5   191          3 (mode			init (-1),
  5   192 	  severity  		init (-1),
  5   193 	  code 			init ( 1),
  5   194 	  caller 			init (-1),
  5   195 	  data 			init ( 0),
  5   196 	  class 			init ( 0),
  5   197 	  ioa_msg			init ( 2)) fixed bin,
  5   198        2 flags,
  5   199          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  5   200          3 flags_pad bit(35) unal	init ("0"b),
  5   201        2 mode fixed bin		init ( 1),
  5   202        2 severity fixed bin		init ( 0),
  5   203        2 code fixed bin(35)		init ( 0),
  5   204        2 caller char(65) varying	init (""),
  5   205        2 data,
  5   206          3 data_ptr ptr		init (null),
  5   207          3 data_lth fixed bin(21)	init ( 0),
  5   208        2 class char(10) varying	init (""),
  5   209        2 ioa_msg char(500) varying	init ("");
  5   210 
  5   211 
  5   212 /* Syntax:  call Trace (ioa_ctl, args);				       */
  5   213 
  5   214 dcl  1 sl_info_msg			aligned int static options(constant),
  5   215        2 version char(8)		init ("sl_info1"),
  5   216        2 arg_list_ptr ptr		init (null),
  5   217        2 loc,
  5   218          3 (mode			init (-1),
  5   219 	  severity  		init (-1),
  5   220 	  code 			init ( 0),
  5   221 	  caller 			init (-1),
  5   222 	  data 			init ( 0),
  5   223 	  class 			init ( 0),
  5   224 	  ioa_msg			init ( 1)) fixed bin,
  5   225        2 flags,
  5   226          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  5   227          3 flags_pad bit(35) unal	init ("0"b),
  5   228        2 mode fixed bin		init ( 1),
  5   229        2 severity fixed bin		init ( 0),
  5   230        2 code fixed bin(35)		init ( 0),
  5   231        2 caller char(65) varying	init (""),
  5   232        2 data,
  5   233          3 data_ptr ptr		init (null),
  5   234          3 data_lth fixed bin(21)	init ( 0),
  5   235        2 class char(10) varying	init (""),
  5   236        2 ioa_msg char(500) varying	init ("");
  5   237 
  5   238 /* END INCLUDE FILE sys_log_constants.incl.pl1 */
      644 
      645  /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  6     2*
  6     3*   Values for the "access mode" argument so often used in hardcore
  6     4*   James R. Davis 26 Jan 81  MCR 4844
  6     5*   Added constants for SM access 4/28/82 Jay Pattin
  6     6*   Added text strings 03/19/85 Chris Jones
  6     7**/
  6     8 
  6     9 
  6    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  6    11 dcl	(
  6    12 	N_ACCESS		   init ("000"b),
  6    13 	R_ACCESS		   init ("100"b),
  6    14 	E_ACCESS		   init ("010"b),
  6    15 	W_ACCESS		   init ("001"b),
  6    16 	RE_ACCESS		   init ("110"b),
  6    17 	REW_ACCESS	   init ("111"b),
  6    18 	RW_ACCESS		   init ("101"b),
  6    19 	S_ACCESS		   init ("100"b),
  6    20 	M_ACCESS		   init ("010"b),
  6    21 	A_ACCESS		   init ("001"b),
  6    22 	SA_ACCESS		   init ("101"b),
  6    23 	SM_ACCESS		   init ("110"b),
  6    24 	SMA_ACCESS	   init ("111"b)
  6    25 	)		   bit (3) internal static options (constant);
  6    26 
  6    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  6    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  6    29 
  6    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  6    31 			   static options (constant);
  6    32 
  6    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  6    34 			   static options (constant);
  6    35 
  6    36 dcl	(
  6    37 	N_ACCESS_BIN	   init (00000b),
  6    38 	R_ACCESS_BIN	   init (01000b),
  6    39 	E_ACCESS_BIN	   init (00100b),
  6    40 	W_ACCESS_BIN	   init (00010b),
  6    41 	RW_ACCESS_BIN	   init (01010b),
  6    42 	RE_ACCESS_BIN	   init (01100b),
  6    43 	REW_ACCESS_BIN	   init (01110b),
  6    44 	S_ACCESS_BIN	   init (01000b),
  6    45 	M_ACCESS_BIN	   init (00010b),
  6    46 	A_ACCESS_BIN	   init (00001b),
  6    47 	SA_ACCESS_BIN	   init (01001b),
  6    48 	SM_ACCESS_BIN	   init (01010b),
  6    49 	SMA_ACCESS_BIN	   init (01011b)
  6    50 	)		   fixed bin (5) internal static options (constant);
  6    51 
  6    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
      645 
      646  /* BEGIN INCLUDE FILE ... as_request_header.incl.pl1 */
  7     2 
  7     3 /* DESCRIPTION:
  7     4*   Answering Service request information.
  7     5**/
  7     6 
  7     7 
  7     8 /****^  HISTORY COMMENTS:
  7     9*  1) change(00-01-01,JRandom), approve(), audit(), install():
  7    10*      Written by someone, at sometime.
  7    11*  2) change(84-09-10,Tague), approve(), audit(), install():
  7    12*      R. Michael Tague: Added ASR_BUMP_USER request.
  7    13*  3) change(84-10-04,Margulies), approve(), audit(), install():
  7    14*      BIM: ASR_ADMIN_COMMAND.
  7    15*  4) change(85-01-23,Swenson), approve(), audit(), install():
  7    16*      E. Swenson for ASR_NOTE_PNT_CHANGE.
  7    17*  5) change(85-02-18,Margulies), approve(), audit(), install():
  7    18*      BIM: ASR_DAEMON_COMMAND, ASR_COM_CHANNEL_INFO
  7    19*  6) change(85-12-12,Lippard), approve(85-12-30,MCR7326),
  7    20*     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
  7    21*      Jim Lippard: Added ASR_ABS_COMMAND request.
  7    22*                                                   END HISTORY COMMENTS */
  7    23 
  7    24 
  7    25 /* format: style4 */
  7    26 
  7    27 dcl  as_request_version_1 fixed bin internal static initial (1) options (constant);
  7    28 
  7    29 dcl  (
  7    30      ASR_FIRST_TYPE initial (1),
  7    31      ASR_DIAL_SERVER initial (1),
  7    32      ASR_DIAL_OUT initial (2),
  7    33      ASR_FPE_CAUSES_LOGOUT initial (3),
  7    34      ASR_FPE_CAUSES_NEW_PROC initial (4),
  7    35      ASR_PROC_TERM_NOTIFY initial (5),
  7    36      ASR_BUMP_USER initial (6),
  7    37      ASR_ADMIN_COMMAND initial (7),
  7    38      ASR_NOTE_PNT_CHANGE initial (8),
  7    39      ASR_DAEMON_COMMAND initial (9),
  7    40      ASR_COM_CHANNEL_INFO initial (10),
  7    41      ASR_ABS_COMMAND initial (11),
  7    42      ASR_LAST_TYPE initial (11)
  7    43      ) fixed bin internal static options (constant);
  7    44 
  7    45 dcl  ASR_DEFER_IN_ADMIN_MODE (1:11) bit (1) int static options (constant)
  7    46      init ((6) (1) "0"b, "1"b, (4) (1) "0"b);
  7    47 
  7    48 dcl  ASR_REQUEST_NAMES (1:11) int static options (constant)
  7    49 	char (40) init (
  7    50 	"Dial request",
  7    51 	"Dial out request",
  7    52 	"Logout on fatal process error",
  7    53 	"New process on fatal process error",
  7    54 	"Monitor process terminations",
  7    55 	"Bump user",
  7    56 	"Execute admin command",
  7    57 	"Note PNT change",
  7    58 	"Daemon command",
  7    59 	"Communications channel info",
  7    60 	"Absentee command");
  7    61 
  7    62 dcl  1 as_request_header based aligned,
  7    63        2 version fixed bin,				/* version number */
  7    64        2 type fixed bin,				/* what to do */
  7    65        2 reply_channel fixed bin (71);			/* who to tell */
  7    66 
  7    67 
  7    68 /* END INCLUDE FILE ... as_request_header.incl.pl1 */
      646 
      647  /* BEGIN INCLUDE FILE ... as_requests.incl.pl1 */
  8     2 /* DESCRIPTION:
  8     3*   This include file is the repository of as_request_ structures which are
  8     4*   not so complicated or arcane as to require their own include file.
  8     5*   It requires as_request_header.incl.pl1
  8     6**/
  8     7 
  8     8 /* HISTORY:
  8     9*   Written by someone, at sometime.
  8    10*   Modified:
  8    11*   09/10/84 by R. Michael Tague:  Add the structure asr_bump_user_info
  8    12*   and asr_reply_bump_user.
  8    13*   01/23/85 by E. Swenson:  Add the asr_note_pnt_change_info structure.
  8    14**/
  8    15 
  8    16 /* format: style4 */
  8    17 
  8    18      /*** return status from an as_request_ call. ***/
  8    19 
  8    20 dcl  asr_replyp ptr;
  8    21 dcl  1 asr_reply aligned based (asr_replyp),		/* IPC status return for a.s. request */
  8    22        2 code fixed bin (35),				/* standard error code */
  8    23        2 data bit (36);				/* other data */
  8    24 
  8    25      /*** request to monitor process destructions, and the destruction notification ***/
  8    26 
  8    27 dcl  asr_buzzard_info_version_1 char (8) init ("buzzard1") int static options (constant);
  8    28 dcl  asr_buzzard_infop ptr;
  8    29 dcl  1 asr_buzzard_info aligned based (asr_buzzard_infop),	/* for watching dying processes */
  8    30        2 header aligned like as_request_header,
  8    31        2 version char (8),
  8    32        2 info_channel fixed bin (71),			/* IPC channel to send processid wakeup messges */
  8    33        2 my_reference_id bit (36);			/* becomes top 36 bits of death notice */
  8    34 
  8    35 dcl  1 asr_buzzard_notification aligned based (asr_replyp), /* message on process destruction */
  8    36        2 your_reference_id bit (36),			/* from asr_buzzard_info.my_reference_id */
  8    37        2 process_id bit (36);				/* process id of dead process */
  8    38 
  8    39 /* ***********************************************************************
  8    40*   * asr_bump_user_info  -  Message segment info structure for the       *
  8    41*   *                        ASR_BUMP_USER requests.                      *
  8    42*   *      process-id  -  process_id of process to be bumped.             *
  8    43*   *      message     -  message to be splat across user terminal when   *
  8    44*   *                     the bump is begun, i.e., the grace time starts. *
  8    45*   *		     No message is sent if message = "".             *
  8    46*   *      grace_time_in_seconds				   *
  8    47*   *                  -  Amount of time given to the user before the     *
  8    48*   *                     user's process is actually terminated.          *
  8    49*   *      reply_reference_id					   *
  8    50*   *	            -  Reference id that will be returned in the       *
  8    51*   *                     as_reply_bump_user structure.  A reply channel  *
  8    52*   *                     must be specified in reply_channel in the       *
  8    53*   *		     header of this structure.  The reply message    *
  8    54*   *		     will have the sturcture of asr_reply_bump_user. *
  8    55*   *********************************************************************** */
  8    56 
  8    57 dcl  asr_bump_user_info_version_1 char (8) init ("asrbump1") int static options (constant);
  8    58 
  8    59 dcl  asr_bump_user_info_ptr ptr;
  8    60 dcl  1 asr_bump_user_info aligned based (asr_bump_user_info_ptr),
  8    61        2 header aligned like as_request_header,
  8    62        2 version char (8),
  8    63        2 process_id bit (36),
  8    64        2 message char (100) unaligned,
  8    65        2 grace_time_in_seconds fixed bin,
  8    66        2 reply_reference_id bit (36);
  8    67 
  8    68 /* ***********************************************************************
  8    69*   * asr_reply_bump_user  -  Structure sent with the IPC reply upon      *
  8    70*   *                         initiating the bump.  Note:  the actual     *
  8    71*   *		         bump does not take place until after the    *
  8    72*   *                         given of default grace time.                *
  8    73*   *      code    -  Standard system status code.                        *
  8    74*   *      reference_id					   *
  8    75*   *              -  Reference id supplied in asr_bump_user_info when    *
  8    76*   *                 bump user request was made.                         *
  8    77*   *********************************************************************** */
  8    78 
  8    79 dcl  1 asr_reply_bump_user aligned based (asr_replyp),
  8    80        2 code fixed bin (35),
  8    81        2 reference_id bit (36);
  8    82 
  8    83 
  8    84 dcl  asr_admin_command_info_ptr pointer;
  8    85 dcl  1 asr_admin_command_info aligned based (asr_admin_command_info_ptr),
  8    86        2 header aligned like as_request_header,
  8    87        2 version char (8),
  8    88        2 flags aligned,
  8    89          3 send_start_wakeup bit (1) unaligned,		/* over reply channel */
  8    90          3 send_completion_wakeup bit (1) unaligned,	/* over reply channel */
  8    91          3 send_completion_message bit (1) unaligned,
  8    92          3 send_completion_mail bit (1) unaligned,
  8    93          3 dialog bit (1) unaligned,			/* NOT YET IMPLEMENTED */
  8    94          3 pad bit (31) unaligned,
  8    95        2 dialog_info aligned,				/* NOT YET IMPLEMENTED */
  8    96          3 event_channel fixed bin (71),		/* NOTIFY ME ON READ/RIGHT */
  8    97          3 output_message_segment_pathname char (200) unaligned, /* Writes go here */
  8    98          3 input_message_segment_pathname char (200) unaligned, /* Reads come here */
  8    99        2 mail_destination char (200) unaligned,
  8   100        2 command_length fixed bin (21),
  8   101        2 command char (asr_ac_length refer (asr_admin_command_info.command_length)) unaligned;
  8   102 
  8   103 /* See admin_dialog_info.incl.pl1 for related structures */
  8   104 
  8   105 dcl  asr_ac_length fixed bin (21);
  8   106 dcl  ASR_AC_VERSION_1 char (8) init ("asrac001") int static options (constant);
  8   107 
  8   108 dcl  1 asr_reply_admin_command aligned based (asr_replyp),
  8   109        2 code fixed bin (35),
  8   110        2 flags aligned,
  8   111          3 command_refused bit (1) unaligned,
  8   112          3 command_started bit (1) unaligned,
  8   113          3 command_completed bit (1) unaligned,		/* with or without errors */
  8   114          3 command_aborted bit (1) unaligned,
  8   115          3 command_had_errors bit (1) unaligned,		/* at least one error */
  8   116          3 pad bit (31) unaligned;
  8   117 
  8   118 /**** The following structure is used by the Ring-1 PNT software to
  8   119*      notify the answering service of a PNT change which might affect
  8   120*      logged in processes. */
  8   121 
  8   122 dcl  asr_note_pnt_change_info_ptr ptr;
  8   123 
  8   124 dcl  1 asr_note_pnt_change_info structure aligned based (asr_note_pnt_change_info_ptr),
  8   125        2 header aligned like as_request_header,
  8   126        2 version char (8),
  8   127        2 person_id char (32);
  8   128 
  8   129 dcl  ASR_NPC_INFO_VERSION_1 char (8) initial ("asrnpc01") internal static options (constant);
  8   130 
  8   131 /* END INCLUDE FILE ... as_requests.incl.pl1 */
      647 
      648  /* Begin include file as_request_sender_.incl.pl1 84-06-06 BIM */
  9     2 
  9     3 /****^  HISTORY COMMENTS:
  9     4*  1) change(86-10-14,Lippard), approve(85-12-30,MCR7326),
  9     5*     audit(86-10-24,GDixon), install(86-10-28,MR12.0-1200):
  9     6*      Added max_authorization and audit_flags.
  9     7*                                                   END HISTORY COMMENTS */
  9     8 
  9     9 /* Structure passed from as_request_server_ to the various
  9    10*   requests to identify requester. */
  9    11 /* format: style3,indcomtxt */
  9    12 
  9    13 declare	as_request_sender_ptr
  9    14 			pointer;
  9    15 declare	1 as_request_sender aligned based (as_request_sender_ptr),
  9    16 	  2 version	char (8) aligned,
  9    17 	  2 reply_message	fixed bin (71),
  9    18 	  2 group_id	char (32) unaligned,
  9    19 	  2 process_id	bit (36),
  9    20 	  2 validation_level
  9    21 			fixed bin (3),
  9    22 	  2 authorization	bit (72),
  9    23 	  2 max_authorization
  9    24 			bit (72),
  9    25 	  2 audit_flags	bit (36);
  9    26 
  9    27 declare	AS_REQUEST_SENDER_VERSION_2
  9    28 			char (8) init ("asrqs002") internal static options (constant);
  9    29 
  9    30 /* End include file as_request_sender_.incl.pl1 */
      648 
      649  /* BEGIN INCLUDE FILE condition_info_header.incl.pl1 BIM 1981 */
 10     2 /* format: style2 */
 10     3 
 10     4      declare condition_info_header_ptr
 10     5 			      pointer;
 10     6      declare 1 condition_info_header
 10     7 			      aligned based (condition_info_header_ptr),
 10     8 	     2 length	      fixed bin,		/* length in words of this structure */
 10     9 	     2 version	      fixed bin,		/* version number of this structure */
 10    10 	     2 action_flags	      aligned,		/* tell handler how to proceed */
 10    11 	       3 cant_restart     bit (1) unaligned,	/* caller doesn't ever want to be returned to */
 10    12 	       3 default_restart  bit (1) unaligned,	/* caller can be returned to with no further action */
 10    13 	       3 quiet_restart    bit (1) unaligned,	/* return, and print no message */
 10    14 	       3 support_signal   bit (1) unaligned,	/* treat this signal as if the signalling procedure had the support bit set */
 10    15 						/* if the signalling procedure had the support bit set, do the same for its caller */
 10    16 	       3 pad	      bit (32) unaligned,
 10    17 	     2 info_string	      char (256) varying,	/* may contain printable message */
 10    18 	     2 status_code	      fixed bin (35);	/* if^=0, code interpretable by com_err_ */
 10    19 
 10    20 /* END INCLUDE FILE condition_info_header.incl.pl1 */
      649 
      650  /* Begin include file signal_io_info.incl.pl1 */
 11     2 /* format: style3,idind30 */
 11     3 
 11     4 /* This include file requires condition_info_header */
 11     5 
 11     6 declare	signal_io_info_ptr		pointer;
 11     7 declare	1 signal_io_info		aligned based (signal_io_info_ptr),
 11     8 	  2 header		aligned like condition_info_header,
 11     9 	  2 iocb_ptr		pointer,
 11    10 	  2 iocb_name		char (32) unaligned,
 11    11 	  2 operation		char (32),
 11    12 	  2 control_order_info_ptr	pointer,
 11    13 	  2 position_type		fixed bin,
 11    14 	  2 position_amount		fixed bin (35),
 11    15 	  2 data_ptr		pointer,		/* points to control_order name on control */
 11    16 	  2 data_length		fixed bin (21),
 11    17 	  2 returned_data_length	fixed bin (21),
 11    18 	  2 returned_error_code	fixed bin (35),
 11    19 	  2 old_modes		aligned,
 11    20 	    3 pointer		pointer,
 11    21 	    3 length		fixed bin (21),
 11    22 	  2 new_modes		aligned,
 11    23 	    3 pointer		pointer,
 11    24 	    3 length		fixed bin (21),
 11    25 	  2 key			char (256) varying;
 11    26 
 11    27 declare	(
 11    28 	SGI_OP_GET_LINE		init ("get_line"),
 11    29 	SGI_OP_GET_CHARS		init ("get_chars"),
 11    30 	SGI_OP_PUT_CHARS		init ("put_chars"),
 11    31 	SGI_OP_MODES		init ("modes"),
 11    32 	SGI_OP_POSITION		init ("position"),
 11    33 	SGI_OP_CONTROL		init ("control"),
 11    34 	SGI_OP_READ_RECORD		init ("read_record"),
 11    35 	SGI_OP_WRITE_RECORD		init ("write_record"),
 11    36 	SGI_OP_REWRITE_RECORD	init ("rewrite_record"),
 11    37 	SGI_OP_DELETE_RECORD	init ("delete_record"),
 11    38 	SGI_OP_SEEK_KEY		init ("seek_key"),
 11    39 	SGI_OP_READ_KEY		init ("read_key"),
 11    40 	SGI_OP_READ_LENGTH		init ("read_length")
 11    41 	)			char (32) int static options (constant);
 11    42 
 11    43 declare	signal_io_io_buffer		char (signal_io_info.data_length) based (signal_io_info.data_ptr);
 11    44 declare	signal_io_order_name	char (signal_io_info.data_length) based (signal_io_info.data_ptr);
 11    45 declare	signal_io_old_modes		char (signal_io_info.old_modes.length) based (signal_io_info.old_modes.pointer);
 11    46 declare	signal_io_new_modes		char (signal_io_info.new_modes.length) based (signal_io_info.new_modes.pointer);
 11    47 
 11    48 /* End include file signal_io_info.incl.pl1 */
      650 
      651  /* BEGIN INCLUDE FILE ... condition_info.incl.pl1 */
 12     2 
 12     3 /* Structure for find_condition_info_.
 12     4*
 12     5*   Written 1-Mar-79 by M. N. Davidoff.
 12     6**/
 12     7 
 12     8 /* automatic */
 12     9 
 12    10      declare condition_info_ptr     pointer;
 12    11 
 12    12 /* based */
 12    13 
 12    14      declare 1 condition_info	      aligned based (condition_info_ptr),
 12    15 	     2 mc_ptr	      pointer,		/* pointer to machine conditions at fault time */
 12    16 	     2 version	      fixed binary,		/* Must be 1 */
 12    17 	     2 condition_name     char (32) varying,	/* name of condition */
 12    18 	     2 info_ptr	      pointer,		/* pointer to the condition data structure */
 12    19 	     2 wc_ptr	      pointer,		/* pointer to wall crossing machine conditions */
 12    20 	     2 loc_ptr	      pointer,		/* pointer to location where condition occured */
 12    21 	     2 flags	      unaligned,
 12    22 	       3 crawlout	      bit (1),		/* on if condition occured in lower ring */
 12    23 	       3 pad1	      bit (35),
 12    24 	     2 pad2	      bit (36),
 12    25 	     2 user_loc_ptr	      pointer,		/* ptr to most recent nonsupport loc before condition occurred */
 12    26 	     2 pad3	      (4) bit (36);
 12    27 
 12    28 /* internal static */
 12    29 
 12    30      declare condition_info_version_1
 12    31 			      fixed binary internal static options (constant) initial (1);
 12    32 
 12    33 /* END INCLUDE FILE ... condition_info.incl.pl1 */
      651 
      652  /* Begin include file ..... iox_modes.incl.pl1 */
 13     2 
 13     3 /* Written by C. D. Tavares, 03/17/75 */
 13     4 /* Updated 10/31/77 by CDT to include short iox mode strings */
 13     5 
 13     6 dcl  iox_modes (13) char (24) int static options (constant) aligned initial
 13     7     ("stream_input", "stream_output", "stream_input_output",
 13     8      "sequential_input", "sequential_output", "sequential_input_output", "sequential_update",
 13     9      "keyed_sequential_input", "keyed_sequential_output", "keyed_sequential_update",
 13    10      "direct_input", "direct_output", "direct_update");
 13    11 
 13    12 dcl  short_iox_modes (13) char (4) int static options (constant) aligned initial
 13    13     ("si", "so", "sio", "sqi", "sqo", "sqio", "squ", "ksqi", "ksqo", "ksqu", "di", "do", "du");
 13    14 
 13    15 dcl (Stream_input initial (1),
 13    16      Stream_output initial (2),
 13    17      Stream_input_output initial (3),
 13    18      Sequential_input initial (4),
 13    19      Sequential_output initial (5),
 13    20      Sequential_input_output initial (6),
 13    21      Sequential_update initial (7),
 13    22      Keyed_sequential_input initial (8),
 13    23      Keyed_sequential_output initial (9),
 13    24      Keyed_sequential_update initial (10),
 13    25      Direct_input initial (11),
 13    26      Direct_output initial (12),
 13    27      Direct_update initial (13)) fixed bin int static options (constant);
 13    28 
 13    29 /* End include file ..... iox_modes.incl.pl1 */
      652 
      653  /* --------------- BEGIN include file iox_dcls.incl.pl1 --------------- */
 14     2 
 14     3 /* Written 05/04/78 by C. D. Tavares */
 14     4 /* Fixed declaration of iox_$find_iocb_n 05/07/80 by R. Holmstedt */
 14     5 /* Modified 5/83 by S. Krupp to add declarations for:  iox_$open_file,
 14     6*     iox_$close_file, iox_$detach and iox_$attach_loud entries. */
 14     7 
 14     8 dcl  iox_$attach_name entry (char (*), pointer, char (*), pointer, fixed bin (35)),
 14     9      iox_$attach_ptr entry (pointer, char (*), pointer, fixed bin (35)),
 14    10      iox_$close entry (pointer, fixed bin (35)),
 14    11      iox_$control entry (pointer, char (*), pointer, fixed bin (35)),
 14    12      iox_$delete_record entry (pointer, fixed bin (35)),
 14    13      iox_$destroy_iocb entry (pointer, fixed bin (35)),
 14    14      iox_$detach_iocb entry (pointer, fixed bin (35)),
 14    15      iox_$err_not_attached entry options (variable),
 14    16      iox_$err_not_closed entry options (variable),
 14    17      iox_$err_no_operation entry options (variable),
 14    18      iox_$err_not_open entry options (variable),
 14    19      iox_$find_iocb entry (char (*), pointer, fixed bin (35)),
 14    20      iox_$find_iocb_n entry (fixed bin, ptr, fixed bin(35)),
 14    21      iox_$get_chars entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
 14    22      iox_$get_line entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
 14    23      iox_$look_iocb entry (char (*), pointer, fixed bin (35)),
 14    24      iox_$modes entry (pointer, char (*), char (*), fixed bin (35)),
 14    25      iox_$move_attach entry (pointer, pointer, fixed bin (35)),
 14    26      iox_$open entry (pointer, fixed bin, bit (1) aligned, fixed bin (35)),
 14    27      iox_$position entry (pointer, fixed bin, fixed bin (21), fixed bin (35)),
 14    28      iox_$propagate entry (pointer),
 14    29      iox_$put_chars entry (pointer, pointer, fixed bin (21), fixed bin (35)),
 14    30      iox_$read_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
 14    31      iox_$read_length entry (pointer, fixed bin (21), fixed bin (35)),
 14    32      iox_$read_record entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
 14    33      iox_$rewrite_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
 14    34      iox_$seek_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
 14    35      iox_$write_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
 14    36      iox_$open_file entry(ptr, fixed bin, char(*), bit(1) aligned, fixed bin(35)),
 14    37      iox_$close_file entry(ptr, char(*), fixed bin(35)),
 14    38      iox_$detach entry(ptr, char(*), fixed bin(35)),
 14    39      iox_$attach_loud entry(ptr, char(*), ptr, fixed bin(35));
 14    40 
 14    41 dcl (iox_$user_output,
 14    42      iox_$user_input,
 14    43      iox_$user_io,
 14    44      iox_$error_output) external static pointer;
 14    45 
 14    46 /* ---------------- END include file iox_dcls.incl.pl1 ---------------- */
      653 
      654  /* BEGIN INCLUDE FILE ... mc_restriction_codes.incl.pl1 */
 15     2 
 15     3 /* This declaration explains the "bits" in the restriction code for message coordinator consoles.
 15     4*   The terminal the system came up on always has all bits on. */
 15     5 
 15     6 dcl 1 rcodebits based aligned,			/* Overlay for mc_ate.authority.privilege */
 15     7     2 master_console bit (1) unal,			/* 1 Admin mode, reloads, mc, etc.. */
 15     8     2 as_control bit (1) unal,			/* 2 Startup, shutdown, etc. */
 15     9     2 reset_sc bit (1) unal,				/* 3 reset and force_reset */
 15    10     2 reply bit (1) unal,				/* 4 reply to other daemons */
 15    11     2 edit_motd bit (1) unal,				/* 5 message command */
 15    12     2 intercom bit (1) unal,				/* 6 intercom */
 15    13     2 mpx_control bit (1) unal,			/* 7 control mpx's */
 15    14     2 admin_mode bit (1) unal,			/* 8 enter admin mode */
 15    15     2 pad11 bit (9) unal,				/* 9-17 */
 15    16     2 rcp_control bit (1) unal,			/* 18 reply to mount requests */
 15    17     2 reconfig_system bit (1) unal,			/* 19 reconfigure the system */
 15    18     2 pad6 bit (1) unal,				/* 20  unused */
 15    19     2 exec bit (1) unal,				/* 21 execute macro-commands */
 15    20     2 status bit (1) unal,				/* 22 who, hmu, dvm */
 15    21     2 daemon_control bit (1) unal,			/* 23 login, logout, quit */
 15    22     2 loginword bit (1) unal,				/* 24 set login word */
 15    23     2 mod_sysid bit (1) unal,				/* 25 set system id */
 15    24     2 down_ok bit (1) unal,				/* 26 schedule shutdown and say stop */
 15    25     2 warning bit (1) unal,				/* 27 warn users */
 15    26     2 set_maxu bit (1) unal,				/* 28 maxunits */
 15    27     2 channel_control bit (1) unal,			/* 29 attach, remove */
 15    28     2 bump_user bit (1) unal,				/* 30 bump, detach, unbump, term */
 15    29     2 route_messages bit (1) unal,			/* 31 route, define, accept, etc. */
 15    30     2 abs_control bit (1) unal,			/* 32 abs commands */
 15    31     2 pad2 bit (4) unal;				/* 34-36 */
 15    32 
 15    33 /* END INCLUDE FILE ... mc_restriction_codes.incl.pl1 */
      654 
      655 
      656 /* BEGIN MESSAGE DOCUMENTATION
      657*
      658*   Message:
      659*   sc_admin_command_: PERSON: COMMANDLINE
      660*
      661*   S:	$sc
      662*
      663*   T:	$run
      664*
      665*   M:	A system administrator has sent a special command to the
      666*   Initializer, which executes it in admin mode.
      667*
      668*   A:	$ignore
      669*
      670*
      671*   Message:
      672*   sc_admin_command_: Failed to check access for USER.
      673*
      674*   S:	$sc
      675*
      676*   T:	$run
      677*
      678*   M:	User USER requested the system to execute an admin command,
      679*   but the system cound not determine their access to the admin_command
      680*   acs.
      681*
      682*   A:	$ignore
      683*
      684*
      685*   Message:
      686*   sc_admin_command_: Denied send_admin_command for USER in ring RING.
      687*
      688*   S:	$sc
      689*
      690*   T:	$run
      691*
      692*   M:	User USER requested the system to execute an admin command,
      693*   but lacked access to >sc1>admin_acs>admin_command.acs.
      694*
      695*   A:	$ignore
      696*
      697*
      698*   END MESSAGE DOCUMENTATION */
      699 
      700      end sc_admin_command_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/03/92  1548.6  sc_admin_command_.pl1             >spec>install>1010>sc_admin_command_.pl1
640          1    08/06/87  0913.4  as_data_.incl.pl1                 >ldd>incl>as_data_.incl.pl1
641          2    11/01/84  1514.0  format_document_options.incl.pl1  >ldd>incl>format_document_options.incl.pl1
642          3    08/06/87  0913.5  sc_stat_.incl.pl1                 >ldd>incl>sc_stat_.incl.pl1
643          4    08/06/87  0913.5  sc_subsystem_info_.incl.pl1       >ldd>incl>sc_subsystem_info_.incl.pl1
644          5    08/06/87  0913.5  sys_log_constants.incl.pl1        >ldd>incl>sys_log_constants.incl.pl1
645          6    04/11/85  1452.6  access_mode_values.incl.pl1       >ldd>incl>access_mode_values.incl.pl1
646          7    10/30/86  2010.5  as_request_header.incl.pl1        >ldd>incl>as_request_header.incl.pl1
647          8    02/12/85  1429.5  as_requests.incl.pl1              >ldd>incl>as_requests.incl.pl1
648          9    10/30/86  2010.5  as_request_sender_.incl.pl1       >ldd>incl>as_request_sender_.incl.pl1
649         10    03/24/82  1347.2  condition_info_header.incl.pl1    >ldd>incl>condition_info_header.incl.pl1
650         11    11/28/84  1016.3  signal_io_info.incl.pl1           >ldd>incl>signal_io_info.incl.pl1
651         12    06/28/79  1204.8  condition_info.incl.pl1           >ldd>incl>condition_info.incl.pl1
652         13    02/02/78  1229.7  iox_modes.incl.pl1                >ldd>incl>iox_modes.incl.pl1
653         14    05/23/83  0916.6  iox_entries.incl.pl1              >ldd>incl>iox_dcls.incl.pl1
654         15    01/21/85  0912.3  mc_restriction_codes.incl.pl1     >ldd>incl>mc_restriction_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ASR_AC_VERSION_1                000060 constant        char(8)                  initial packed unaligned dcl 8-106 ref 160
ASR_info_ptr                           parameter       pointer                  dcl 69 ref 29 154
ASR_sender_ptr                         parameter       pointer                  dcl 69 ref 29 155
CI                              000106 automatic       structure                level 1 dcl 626 in procedure "ANY_OTHER_HANDLER" set
                                                                                  ref 630 630
CI                              000100 automatic       structure                level 1 dcl 321 in procedure "IO_SIGNAL_HANDLER" set
                                                                                  ref 337 337
Destination                            parameter       char                     packed unaligned dcl 543 in procedure "SEND_MAIL"
                                                                                  set ref 540 571*
Destination                            parameter       char                     packed unaligned dcl 533 in procedure "SEND_MESSAGE"
                                                                                  set ref 530 535*
MAX_CAPTURE_LENGTH              000062 constant        fixed bin(21,0)          initial dcl 150 ref 418 580
Message                                parameter       char                     packed unaligned dcl 543 in procedure "SEND_MAIL"
                                                                                  set ref 540 562* 567 568
Message                                parameter       char                     packed unaligned dcl 533 in procedure "SEND_MESSAGE"
                                                                                  set ref 530 535*
RW_ACCESS                              constant        bit(3)                   initial packed unaligned dcl 6-11 ref 177 177
SGI_OP_CONTROL                  000000 constant        char(32)                 initial packed unaligned dcl 11-27 ref 349
SGI_OP_GET_CHARS                000040 constant        char(32)                 initial packed unaligned dcl 11-27 ref 343
SGI_OP_GET_LINE                 000050 constant        char(32)                 initial packed unaligned dcl 11-27 ref 341
SGI_OP_MODES                    000020 constant        char(32)                 initial packed unaligned dcl 11-27 ref 351
SGI_OP_POSITION                 000010 constant        char(32)                 initial packed unaligned dcl 11-27 ref 347
SGI_OP_PUT_CHARS                000030 constant        char(32)                 initial packed unaligned dcl 11-27 ref 345
SL_LOG                          000132 constant        fixed bin(17,0)          initial dcl 5-14 set ref 187*
SL_LOG_SILENT                   000130 constant        fixed bin(17,0)          initial dcl 5-14 set ref 172* 179* 234*
Stream_input_output             000070 constant        fixed bin(17,0)          initial dcl 13-15 set ref 480*
Subject                                parameter       char                     packed unaligned dcl 543 set ref 540 571*
Trailer                                parameter       char                     packed unaligned dcl 579 set ref 576 590*
access_control_name      34            based           char(32)                 level 2 packed packed unaligned dcl 4-23 set ref
                                                                                  244*
acs_mode                        000100 automatic       bit(36)                  dcl 72 set ref 168* 177
addcharno                                              builtin function         dcl 142 ref 415 589
added_length                    000102 automatic       fixed bin(21,0)          dcl 584 set ref 590* 592
addr                                                   builtin function         dcl 143 ref 156 251 251 337 337 562 562 571 630 630
adj_sw                    3(01) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 548 set ref 558*
admin_mode                0(07) 000714 automatic       bit(1)                   level 2 packed packed unaligned dcl 228 set ref 230*
any_other                       000650 stack reference condition                dcl 138 ref 249 272
as_request_header                      based           structure                level 1 dcl 7-62
as_request_sender                      based           structure                level 1 dcl 9-15
as_request_sender_ptr           000710 automatic       pointer                  dcl 9-13 set ref 155* 156 168 168 172 179 179 187
                                                                                  194 462 535 535 571 571 598 598
as_send_user_mail_              000010 constant        entry                    external dcl 88 ref 571 598
as_send_user_message_           000012 constant        entry                    external dcl 90 ref 535
asr_admin_command_info                 based           structure                level 1 dcl 8-85
asr_admin_command_info_ptr      000706 automatic       pointer                  dcl 8-84 set ref 154* 160 187 189 189 189 194 220
                                                                                  224 251 251 251 251 281 281 295 297 297 297 297
                                                                                  304 306 455 462 511 514 518 520 520 522 522 525
                                                                                  525 586 595 598 612
asr_reply_admin_command                based           structure                level 1 dcl 8-108
asr_replyp                      000704 automatic       pointer                  dcl 8-20 set ref 156* 157 158 162 174 181 254 255
                                                                                  256 257 262 265 266 267 287 287 297 297 516 595
                                                                                  595
authorization            16            based           bit(72)                  level 2 dcl 9-15 set ref 535* 571* 598*
capture_output_length           000104 automatic       fixed bin(21,0)          dcl 75 set ref 415 417* 417 418 421* 421 589 590 590
                                                                                  592* 592 598 598 610* 612*
capture_output_ptr              000102 automatic       pointer                  dcl 74 set ref 223* 411 415 589 598 601* 609* 612
capture_overran                 000105 automatic       bit(1)                   dcl 76 set ref 411 420* 590* 611*
cl_flags                               parameter       structure                level 1 dcl 491 set ref 488 496*
cleanup                         000634 stack reference condition                dcl 136 ref 484
cli_flags                       000700 automatic       structure                level 1 dcl 472 set ref 483* 485*
code                            000724 automatic       fixed bin(35,0)          level 2 in structure "l_reply" dcl 457 in procedure
                                                                                  "SEND_START_WAKEUP" set ref 458*
code                                   based           fixed bin(35,0)          level 2 in structure "asr_reply_admin_command"
                                                                                  dcl 8-108 in procedure "sc_admin_command_" set ref
                                                                                  157* 162* 174* 181* 254* 262* 516* 595
code                            000101 automatic       fixed bin(35,0)          dcl 73 in procedure "sc_admin_command_" set ref 168*
                                                                                  170 172* 207* 231* 232 234* 262 262 277* 284 284*
                                                                                  287 297 315* 380* 562* 563 563* 565
code                            000140 automatic       fixed bin(35,0)          dcl 627 in procedure "ANY_OTHER_HANDLER" set ref
                                                                                  630* 631
com_err_                        000014 constant        entry                    external dcl 92 ref 277
command                 241            based           char                     level 2 packed packed unaligned dcl 8-85 set ref
                                                                                  187* 194* 251 251 251 251 297 297 297 297 518*
                                                                                  595* 612*
command_aborted           1(03)        based           bit(1)                   level 3 packed packed unaligned dcl 8-108 set ref
                                                                                  267* 287* 297* 595
command_completed         1(02)        based           bit(1)                   level 3 packed packed unaligned dcl 8-108 set ref
                                                                                  256* 266*
command_error                   000642 stack reference condition                dcl 137 ref 213
command_had_errors        1(04)        based           bit(1)                   level 3 packed packed unaligned dcl 8-108 set ref
                                                                                  257* 287* 297*
command_length          240            based           fixed bin(21,0)          level 2 dcl 8-85 ref 187 187 194 194 251 251 251 251
                                                                                  297 297 297 297 518 518 586 595 595 612 612
command_started           1(01) 000724 automatic       bit(1)                   level 3 packed packed unaligned dcl 457 set ref 460*
completion_string               000106 automatic       char(200)                packed unaligned dcl 77 set ref 287* 293* 304* 306*
condition_info                         based           structure                level 1 dcl 12-14
condition_info_header                  based           structure                level 1 dcl 10-6
condition_info_version_1               constant        fixed bin(17,0)          initial dcl 12-30 ref 336 629
condition_name            3     000106 automatic       varying char(32)         level 2 dcl 626 set ref 631
continue_to_signal_             000016 constant        entry                    external dcl 93 ref 329 634
convert_status_code_            000020 constant        entry                    external dcl 94 ref 284 516
cu_$get_cl_intermediary         000022 constant        entry                    external dcl 95 ref 481
cu_$reset_cl_intermediary       000026 constant        entry                    external dcl 97 ref 273
cu_$set_cl_intermediary         000024 constant        entry                    external dcl 96 ref 211 482 484
data_length             136            based           fixed bin(21,0)          level 2 dcl 11-7 ref 402 402 406 406 409 409 416 423
                                                                                  430 432 434 436 438 440 442 444
data_ptr                134            based           pointer                  level 2 dcl 11-7 ref 402 406 409 416 423 430 432 434
                                                                                  436 438 440 442 444
default_cl_intermediary         000674 automatic       entry variable           dcl 471 set ref 481* 484* 485 496
default_error_handler_$wall     000030 constant        entry                    external dcl 98 ref 637
dont_compress_sw          3(06) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 548 set ref 560*
error_string                    000601 automatic       char(100)                dcl 85 set ref 284* 286* 287* 297* 516* 518*
error_table_$as_sac_command_read
                                000102 external static fixed bin(35,0)          dcl 125 ref 380
error_table_$insufficient_access
                                000104 external static fixed bin(35,0)          dcl 127 ref 174 181
error_table_$recoverable_error  000100 external static fixed bin(35,0)          dcl 123 ref 563
error_table_$undefined_order_request
                                000112 external static fixed bin(35,0)          dcl 133 ref 446
error_table_$unexpected_condition
                                000110 external static fixed bin(35,0)          dcl 131 ref 207 315
error_table_$unimplemented_version
                                000106 external static fixed bin(35,0)          dcl 129 ref 162
evidence_of_error               000201 automatic       bit(1)                   dcl 80 set ref 212* 215* 257 398*
fdo                             000100 automatic       structure                level 1 dcl 548 set ref 554* 562 562
find_condition_info_            000032 constant        entry                    external dcl 99 ref 337 630
finish                          000656 stack reference condition                dcl 139 ref 204
finish_signalled                000200 automatic       bit(1)                   dcl 79 set ref 199* 206* 287* 297*
flags                     1            based           structure                level 2 in structure "asr_reply_admin_command"
                                                                                  dcl 8-108 in procedure "sc_admin_command_" set ref
                                                                                  158* 255* 265*
flags                     1            based           structure                level 2 in structure "sc_subsystem_info" dcl 4-23
                                                                                  in procedure "sc_admin_command_"
flags                     1     000724 automatic       structure                level 2 in structure "l_reply" dcl 457 in procedure
                                                                                  "SEND_START_WAKEUP" set ref 459*
flags                     6            based           structure                level 2 in structure "asr_admin_command_info"
                                                                                  dcl 8-85 in procedure "sc_admin_command_"
format_document_$string         000130 constant        entry                    external dcl 546 ref 562
format_document_options                based           structure                level 1 dcl 2-12
format_document_version_2              constant        fixed bin(17,0)          initial dcl 2-63 ref 555
formatted_message               000105 automatic       char(1000)               packed unaligned dcl 550 set ref 562* 567* 571
formatted_message_length        000477 automatic       fixed bin(21,0)          dcl 551 set ref 562* 568* 571 571
galley_sw                 3(02) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 548 set ref 559*
get_group_id_                   000034 constant        entry                    external dcl 100 ref 244
get_temp_segment_               000036 constant        entry                    external dcl 101 ref 609
group_id                  4            based           char(32)                 level 2 packed packed unaligned dcl 9-15 set ref
                                                                                  168* 172* 179* 187* 194* 535* 571* 598*
hcs_$wakeup                     000040 constant        entry                    external dcl 102 ref 462
header                                 based           structure                level 2 dcl 8-85
ignore_io                       000202 automatic       bit(1)                   dcl 81 set ref 198* 218* 270* 333 477*
indentation               1     000100 automatic       fixed bin(17,0)          level 2 dcl 548 set ref 556*
info_ptr                 14     000100 automatic       pointer                  level 2 dcl 321 set ref 338
initial_message                        based           char(10000)              dcl 608 set ref 612*
ioa_                            000042 constant        entry                    external dcl 104 ref 402
ioa_$ioa_switch                 000046 constant        entry                    external dcl 106 ref 194 293
ioa_$ioa_switch_nnl             000044 constant        entry                    external dcl 105 ref 406 409
ioa_$rsnnl                      000050 constant        entry                    external dcl 107 ref 287 297 518 595
ioa_$rsnp                       000052 constant        entry                    external dcl 108 ref 590 612
iocb_name               110            based           char(32)                 level 2 packed packed unaligned dcl 11-7 set ref
                                                                                  402* 406 406* 410
iocb_ptr                106            based           pointer                  level 2 dcl 11-7 ref 398
iox_$attach_name                000120 constant        entry                    external dcl 14-8 ref 479
iox_$control                    000122 constant        entry                    external dcl 14-8 ref 292
iox_$error_output               000126 external static pointer                  dcl 14-41 ref 398
iox_$open                       000124 constant        entry                    external dcl 14-8 ref 480
l_reply                         000724 automatic       structure                level 1 dcl 457 set ref 462 462
length                                                 builtin function         dcl 144 in procedure "sc_admin_command_" ref 251 251
                                                                                  297 297 416 568
length                  144            based           fixed bin(21,0)          level 3 in structure "signal_io_info" dcl 11-7
                                                                                  in procedure "sc_admin_command_" ref 387
line_length               2     000100 automatic       fixed bin(17,0)          level 2 dcl 548 set ref 557*
mail_destination        156            based           char(200)                level 2 packed packed unaligned dcl 8-85 set ref
                                                                                  304* 520* 522* 598*
mc_atep                  14            based           pointer                  level 2 dcl 4-23 set ref 243*
message_string                  000206 automatic       char(1000)               packed unaligned dcl 83 set ref 297* 517* 518* 520*
                                                                                  522* 525*
message_to_send                        based           char                     packed unaligned dcl 552 set ref 571*
min                                                    builtin function         dcl 145 ref 297 297
no_real_tty               1            based           bit(1)                   level 3 packed packed unaligned dcl 4-23 set ref
                                                                                  241*
null                                                   builtin function         dcl 146 ref 223 242 243 292 292 337 337 411 479 479
                                                                                  630 630
old_modes               142            based           structure                level 2 dcl 11-7
operation               120            based           char(32)                 level 2 dcl 11-7 ref 341 343 345 347 349 351
pointer                 142            based           pointer                  level 3 dcl 11-7 ref 387
prev_iocb_name                  000170 automatic       char(32)                 packed unaligned dcl 78 set ref 247* 406 410*
process_id               14            based           bit(36)                  level 2 dcl 9-15 set ref 462*
rcodebits                              based           structure                level 1 dcl 15-6
real_iocb                16            based           pointer                  level 2 dcl 4-23 set ref 242*
release_temp_segment_           000054 constant        entry                    external dcl 109 ref 601
remaining_ptr                   000100 automatic       pointer                  dcl 583 set ref 589* 590
remaining_string                       based           char                     packed unaligned dcl 580 set ref 590*
reply_channel             2            based           fixed bin(71,0)          level 3 dcl 8-85 set ref 189* 281* 455 462* 514*
reply_message             2            based           fixed bin(71,0)          level 2 dcl 9-15 set ref 156
restriction_flags                      based           bit(36)                  level 2 dcl 4-23 set ref 240*
restrictions                    000714 automatic       structure                level 1 dcl 228 set ref 229* 240
returned_error_code     140            based           fixed bin(35,0)          level 2 dcl 11-7 set ref 339* 446*
sc_create_sci_                  000056 constant        entry                    external dcl 110 ref 231
sc_create_sci_$destroy          000060 constant        entry                    external dcl 111 ref 274
sc_ipc_mask_$remask             000066 constant        entry                    external dcl 115 ref 253 260
sc_ipc_mask_$unmask             000064 constant        entry                    external dcl 114 ref 248
sc_process_command_line_$multics_command
                                000062 constant        entry                    external dcl 112 ref 251
sc_stat_$admin_log_iocb         000114 external static pointer                  dcl 3-45 set ref 194* 292* 293* 406* 409*
sc_stat_$admin_sci_ptr          000116 external static pointer                  dcl 3-45 ref 327
sc_subsystem_info                      based           structure                level 1 dcl 4-23
sc_subsystem_info_ptr           000702 automatic       pointer                  dcl 4-22 set ref 238* 239 240 241 242 243 244
sci_ptr                         000204 automatic       pointer                  dcl 82 set ref 231* 238* 251* 274* 327
send_completion_mail      6(03)        based           bit(1)                   level 3 packed packed unaligned dcl 8-85 ref 224 306
                                                                                  522 525
send_completion_message
                          6(02)        based           bit(1)                   level 3 packed packed unaligned dcl 8-85 ref 295 520
                                                                                  525
send_completion_wakeup
                          6(01)        based           bit(1)                   level 3 packed packed unaligned dcl 8-85 ref 189 281
send_start_wakeup         6            based           bit(1)                   level 3 packed packed unaligned dcl 8-85 ref 189 220
                                                                                  511
signal_io_                      000664 stack reference condition                dcl 140 ref 200 478 495
signal_io_info                         based           structure                level 1 dcl 11-7
signal_io_info_ptr              000712 automatic       pointer                  dcl 11-6 set ref 338* 339 341 343 345 347 349 351
                                                                                  387 387 398 402 402 402 402 406 406 406 406 406
                                                                                  409 409 409 410 416 416 423 423 430 430 432 432
                                                                                  434 434 436 436 438 438 440 440 442 442 444 444
                                                                                  446
signal_io_io_buffer                    based           char                     packed unaligned dcl 11-43 set ref 402* 406* 409*
                                                                                  416 423
signal_io_old_modes                    based           char                     packed unaligned dcl 11-45 set ref 387*
signal_io_order_name                   based           char                     packed unaligned dcl 11-44 ref 430 432 434 436 438
                                                                                  440 442 444
source_name               2            based           char(32)                 level 2 packed packed unaligned dcl 4-23 set ref
                                                                                  239*
ssu_$get_info_ptr               000070 constant        entry                    external dcl 116 ref 238
subject                         000103 automatic       char                     packed unaligned dcl 586 set ref 595* 598*
substr                                                 builtin function         dcl 147 ref 297 297
switches                  3     000100 automatic       structure                level 2 dcl 548
sys_log_                        000072 constant        entry                    external dcl 117 ref 179 187
sys_log_$error_log              000074 constant        entry                    external dcl 118 ref 172 234
test_iocb                       000672 automatic       pointer                  dcl 470 set ref 479* 480*
test_switches                   000600 automatic       bit(1)                   dcl 84 set ref 153* 275 400 476*
total_message                          based           char                     packed unaligned dcl 585 set ref 598*
unmask_count                    000632 automatic       fixed bin(17,0)          dcl 86 set ref 248* 253* 260*
unspec                                                 builtin function         dcl 148 set ref 240 462 462 554*
up_sysctl_$check_acs            000076 constant        entry                    external dcl 119 ref 168
validation_level         15            based           fixed bin(3,0)           level 2 dcl 9-15 set ref 168 179*
version                   4            based           char(8)                  level 2 in structure "asr_admin_command_info"
                                                                                  dcl 8-85 in procedure "sc_admin_command_" ref 160
version                   2     000100 automatic       fixed bin(17,0)          level 2 in structure "CI" dcl 321 in procedure
                                                                                  "IO_SIGNAL_HANDLER" set ref 336*
version                   2     000106 automatic       fixed bin(17,0)          level 2 in structure "CI" dcl 626 in procedure
                                                                                  "ANY_OTHER_HANDLER" set ref 629*
version_number                  000100 automatic       fixed bin(17,0)          level 2 dcl 548 set ref 555*
window                                 based           char                     packed unaligned dcl 396 set ref 423*
window_length                   000200 automatic       fixed bin(21,0)          dcl 395 set ref 416* 417 421 423
window_ptr                      000176 automatic       pointer                  dcl 394 set ref 415* 423

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ASR_ABS_COMMAND                        internal static fixed bin(17,0)          initial dcl 7-29
ASR_ADMIN_COMMAND                      internal static fixed bin(17,0)          initial dcl 7-29
ASR_BUMP_USER                          internal static fixed bin(17,0)          initial dcl 7-29
ASR_COM_CHANNEL_INFO                   internal static fixed bin(17,0)          initial dcl 7-29
ASR_DAEMON_COMMAND                     internal static fixed bin(17,0)          initial dcl 7-29
ASR_DEFER_IN_ADMIN_MODE                internal static bit(1)                   initial array packed unaligned dcl 7-45
ASR_DIAL_OUT                           internal static fixed bin(17,0)          initial dcl 7-29
ASR_DIAL_SERVER                        internal static fixed bin(17,0)          initial dcl 7-29
ASR_FIRST_TYPE                         internal static fixed bin(17,0)          initial dcl 7-29
ASR_FPE_CAUSES_LOGOUT                  internal static fixed bin(17,0)          initial dcl 7-29
ASR_FPE_CAUSES_NEW_PROC                internal static fixed bin(17,0)          initial dcl 7-29
ASR_LAST_TYPE                          internal static fixed bin(17,0)          initial dcl 7-29
ASR_NOTE_PNT_CHANGE                    internal static fixed bin(17,0)          initial dcl 7-29
ASR_NPC_INFO_VERSION_1                 internal static char(8)                  initial packed unaligned dcl 8-129
ASR_PROC_TERM_NOTIFY                   internal static fixed bin(17,0)          initial dcl 7-29
ASR_REQUEST_NAMES                      internal static char(40)                 initial array packed unaligned dcl 7-48
AS_REQUEST_SENDER_VERSION_2            internal static char(8)                  initial packed unaligned dcl 9-27
A_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 6-33
Direct_input                           internal static fixed bin(17,0)          initial dcl 13-15
Direct_output                          internal static fixed bin(17,0)          initial dcl 13-15
Direct_update                          internal static fixed bin(17,0)          initial dcl 13-15
E_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
Keyed_sequential_input                 internal static fixed bin(17,0)          initial dcl 13-15
Keyed_sequential_output                internal static fixed bin(17,0)          initial dcl 13-15
Keyed_sequential_update                internal static fixed bin(17,0)          initial dcl 13-15
M_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
N_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
REW_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 6-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 6-36
RE_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 6-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 6-36
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 6-36
R_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
SA_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 6-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 6-36
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 6-30
SGI_OP_DELETE_RECORD                   internal static char(32)                 initial packed unaligned dcl 11-27
SGI_OP_READ_KEY                        internal static char(32)                 initial packed unaligned dcl 11-27
SGI_OP_READ_LENGTH                     internal static char(32)                 initial packed unaligned dcl 11-27
SGI_OP_READ_RECORD                     internal static char(32)                 initial packed unaligned dcl 11-27
SGI_OP_REWRITE_RECORD                  internal static char(32)                 initial packed unaligned dcl 11-27
SGI_OP_SEEK_KEY                        internal static char(32)                 initial packed unaligned dcl 11-27
SGI_OP_WRITE_RECORD                    internal static char(32)                 initial packed unaligned dcl 11-27
SL_INFO_arg_given_in_structure         internal static fixed bin(17,0)          initial dcl 5-69
SL_INFO_arg_not_given                  internal static fixed bin(17,0)          initial dcl 5-69
SL_INFO_as_mode                        internal static fixed bin(17,0)          initial dcl 5-65
SL_INFO_command_mode                   internal static fixed bin(17,0)          initial dcl 5-65
SL_INFO_version_1                      internal static char(8)                  initial packed unaligned dcl 5-62
SL_LOG_BEEP                            internal static fixed bin(17,0)          initial dcl 5-14
SL_LOG_CRASH                           internal static fixed bin(17,0)          initial dcl 5-14
SL_TYPE                                internal static fixed bin(17,0)          initial dcl 5-14
SL_TYPE_BEEP                           internal static fixed bin(17,0)          initial dcl 5-14
SL_TYPE_CRASH                          internal static fixed bin(17,0)          initial dcl 5-14
SMA_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 6-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 6-36
SM_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 6-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 6-36
S_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
Sequential_input                       internal static fixed bin(17,0)          initial dcl 13-15
Sequential_input_output                internal static fixed bin(17,0)          initial dcl 13-15
Sequential_output                      internal static fixed bin(17,0)          initial dcl 13-15
Sequential_update                      internal static fixed bin(17,0)          initial dcl 13-15
Stream_input                           internal static fixed bin(17,0)          initial dcl 13-15
Stream_output                          internal static fixed bin(17,0)          initial dcl 13-15
W_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 6-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 6-36
as_data_$BS                            external static char(1)                  dcl 1-21
as_data_$CR                            external static char(1)                  dcl 1-22
as_data_$abs_dim                       external static char(32)                 packed unaligned dcl 1-23
as_data_$acct_update_priority          external static fixed bin(17,0)          dcl 1-24
as_data_$acsdir                        external static char(168)                packed unaligned dcl 1-25
as_data_$ansp                          external static pointer                  dcl 1-26
as_data_$as_procid                     external static bit(36)                  dcl 1-27
as_data_$as_ring                       external static fixed bin(3,0)           dcl 1-28
as_data_$as_tty                        automatic       char(6)                  packed unaligned dcl 1-29
as_data_$asmtp                         external static pointer                  dcl 1-30
as_data_$autp                          external static pointer                  dcl 1-31
as_data_$buzzardp                      external static pointer                  dcl 1-32
as_data_$cdtp                          external static pointer                  dcl 1-33
as_data_$debug_flag                    external static bit(1)                   dcl 1-84
as_data_$default_weight                external static fixed bin(35,0)          dcl 1-34
as_data_$devtabp                       external static pointer                  dcl 1-35
as_data_$dft_user_ring                 external static fixed bin(3,0)           dcl 1-36
as_data_$dutp                          external static pointer                  dcl 1-37
as_data_$g115_dim                      external static char(32)                 packed unaligned dcl 1-38
as_data_$lct_initialized               external static bit(1)                   dcl 1-39
as_data_$lct_size                      external static fixed bin(17,0)          dcl 1-40
as_data_$login_args                    external static structure                level 1 dcl 1-62
as_data_$login_words                   external static fixed bin(17,0)          dcl 1-77
as_data_$ls_message_buffer_cur_lth     external static fixed bin(18,0)          dcl 1-86
as_data_$ls_message_buffer_max_lth     external static fixed bin(18,0)          dcl 1-87
as_data_$ls_message_buffer_ptr         external static pointer                  dcl 1-88
as_data_$ls_request_server_info_ptr    external static pointer                  dcl 1-85
as_data_$max_user_ring                 external static fixed bin(3,0)           dcl 1-41
as_data_$mgtp                          external static pointer                  dcl 1-42
as_data_$mrd_dim                       external static char(32)                 packed unaligned dcl 1-43
as_data_$ntty_dim                      external static char(32)                 packed unaligned dcl 1-44
as_data_$pdtdir                        external static char(168)                packed unaligned dcl 1-45
as_data_$pit_ptr                       external static pointer                  dcl 1-46
as_data_$rcpdir                        external static char(168)                packed unaligned dcl 1-47
as_data_$request_priority              external static fixed bin(17,0)          dcl 1-48
as_data_$rs_ptrs                       external static pointer                  array dcl 1-49
as_data_$rtdtp                         external static pointer                  dcl 1-50
as_data_$sat_htp                       external static pointer                  dcl 1-51
as_data_$satp                          external static pointer                  dcl 1-52
as_data_$signal_types                  external static structure                level 1 dcl 1-67
as_data_$suffix                        external static char(2)                  array packed unaligned dcl 1-53
as_data_$sysdir                        external static char(168)                packed unaligned dcl 1-54
as_data_$system_signal_types           external static structure                level 1 dcl 1-72
as_data_$teens_suffix                  external static char(2)                  array packed unaligned dcl 1-55
as_data_$terminet_tabs_string          external static varying char(144)        dcl 1-56
as_data_$tty_dim                       external static char(32)                 packed unaligned dcl 1-57
as_data_$update_priority               external static fixed bin(17,0)          dcl 1-58
as_data_$version                       external static char(8)                  packed unaligned dcl 1-59
as_data_$whoptr                        external static pointer                  dcl 1-60
as_data_login_words                    based           structure                level 1 dcl 1-77
as_request_version_1                   internal static fixed bin(17,0)          initial dcl 7-27
asr_ac_length                          automatic       fixed bin(21,0)          dcl 8-105
asr_bump_user_info                     based           structure                level 1 dcl 8-60
asr_bump_user_info_ptr                 automatic       pointer                  dcl 8-59
asr_bump_user_info_version_1           internal static char(8)                  initial packed unaligned dcl 8-57
asr_buzzard_info                       based           structure                level 1 dcl 8-29
asr_buzzard_info_version_1             internal static char(8)                  initial packed unaligned dcl 8-27
asr_buzzard_infop                      automatic       pointer                  dcl 8-28
asr_buzzard_notification               based           structure                level 1 dcl 8-35
asr_note_pnt_change_info               based           structure                level 1 dcl 8-124
asr_note_pnt_change_info_ptr           automatic       pointer                  dcl 8-122
asr_reply                              based           structure                level 1 dcl 8-21
asr_reply_bump_user                    based           structure                level 1 dcl 8-79
condition_info_header_ptr              automatic       pointer                  dcl 10-4
condition_info_ptr                     automatic       pointer                  dcl 12-10
format_document_options_ptr            automatic       pointer                  dcl 2-62
format_document_version_1              internal static fixed bin(17,0)          initial dcl 2-64
iox_$attach_loud                000000 constant        entry                    external dcl 14-8
iox_$attach_ptr                 000000 constant        entry                    external dcl 14-8
iox_$close                      000000 constant        entry                    external dcl 14-8
iox_$close_file                 000000 constant        entry                    external dcl 14-8
iox_$delete_record              000000 constant        entry                    external dcl 14-8
iox_$destroy_iocb               000000 constant        entry                    external dcl 14-8
iox_$detach                     000000 constant        entry                    external dcl 14-8
iox_$detach_iocb                000000 constant        entry                    external dcl 14-8
iox_$err_no_operation           000000 constant        entry                    external dcl 14-8
iox_$err_not_attached           000000 constant        entry                    external dcl 14-8
iox_$err_not_closed             000000 constant        entry                    external dcl 14-8
iox_$err_not_open               000000 constant        entry                    external dcl 14-8
iox_$find_iocb                  000000 constant        entry                    external dcl 14-8
iox_$find_iocb_n                000000 constant        entry                    external dcl 14-8
iox_$get_chars                  000000 constant        entry                    external dcl 14-8
iox_$get_line                   000000 constant        entry                    external dcl 14-8
iox_$look_iocb                  000000 constant        entry                    external dcl 14-8
iox_$modes                      000000 constant        entry                    external dcl 14-8
iox_$move_attach                000000 constant        entry                    external dcl 14-8
iox_$open_file                  000000 constant        entry                    external dcl 14-8
iox_$position                   000000 constant        entry                    external dcl 14-8
iox_$propagate                  000000 constant        entry                    external dcl 14-8
iox_$put_chars                  000000 constant        entry                    external dcl 14-8
iox_$read_key                   000000 constant        entry                    external dcl 14-8
iox_$read_length                000000 constant        entry                    external dcl 14-8
iox_$read_record                000000 constant        entry                    external dcl 14-8
iox_$rewrite_record             000000 constant        entry                    external dcl 14-8
iox_$seek_key                   000000 constant        entry                    external dcl 14-8
iox_$user_input                        external static pointer                  dcl 14-41
iox_$user_io                           external static pointer                  dcl 14-41
iox_$user_output                       external static pointer                  dcl 14-41
iox_$write_record               000000 constant        entry                    external dcl 14-8
iox_modes                              internal static char(24)                 initial array dcl 13-6
sc_request_flags                       based           structure                level 1 packed packed unaligned dcl 4-55
sc_rf_ptr                              automatic       pointer                  dcl 4-54
sc_ss_area                             based           area(1024)               dcl 4-50
sc_stat_$Go                            external static bit(1)                   dcl 3-62
sc_stat_$Go_typed                      external static bit(1)                   dcl 3-62
sc_stat_$Multics                       external static bit(1)                   dcl 3-62
sc_stat_$Multics_typed                 external static bit(1)                   dcl 3-62
sc_stat_$Star_typed                    external static bit(1)                   dcl 3-62
sc_stat_$admin_listener_exit_label     external static label variable           dcl 3-34
sc_stat_$admin_listener_switch         external static bit(1)                   dcl 3-62
sc_stat_$admin_log_write_ptr           external static pointer                  dcl 3-45
sc_stat_$as_log_write_ptr              external static pointer                  dcl 3-45
sc_stat_$did_part1                     external static bit(1)                   dcl 3-62
sc_stat_$did_part2                     external static bit(1)                   dcl 3-62
sc_stat_$did_part3                     external static bit(1)                   dcl 3-62
sc_stat_$exec_access_name              external static char(32)                 packed unaligned dcl 3-15
sc_stat_$info_dir                      external static char(168)                packed unaligned dcl 3-21
sc_stat_$initzer_ttyp                  external static pointer                  dcl 3-45
sc_stat_$log_dir                       external static char(168)                packed unaligned dcl 3-21
sc_stat_$master_abort_label            external static label variable           dcl 3-34
sc_stat_$master_channel                external static char(6)                  dcl 3-29
sc_stat_$master_iocb                   external static pointer                  dcl 3-45
sc_stat_$master_sci_ptr                external static pointer                  dcl 3-45
sc_stat_$mc_acs_dir                    external static char(168)                packed unaligned dcl 3-21
sc_stat_$mc_ansp                       external static pointer                  dcl 3-45
sc_stat_$mc_iocb                       external static pointer                  dcl 3-45
sc_stat_$mc_is_on                      external static bit(1)                   dcl 3-62
sc_stat_$no_operator_login             external static bit(1)                   dcl 3-62
sc_stat_$shutdown_typed                external static bit(1)                   dcl 3-62
sc_stat_$sv1_iocb                      external static pointer                  dcl 3-45
sc_stat_$sv2_iocb                      external static pointer                  dcl 3-45
sc_stat_$sv3_iocb                      external static pointer                  dcl 3-45
sc_stat_$sysdir                        external static char(168)                packed unaligned dcl 3-21
sc_stat_$system_shutdown_label         external static label variable           dcl 3-34
sc_stat_$test_mode                     external static bit(1)                   dcl 3-62
sc_stat_$unidentified_access_name      external static char(32)                 packed unaligned dcl 3-15
sc_stat_$vchn_requires_accept          external static bit(1)                   dcl 3-62
short_iox_modes                        internal static char(4)                  initial array dcl 13-12
signal_io_new_modes                    based           char                     packed unaligned dcl 11-46
sl_info                                automatic       structure                level 1 dcl 5-24
sl_info_code_msg                       internal static structure                level 1 dcl 5-187
sl_info_msg                            internal static structure                level 1 dcl 5-214
sl_info_sev_code_label_msg             internal static structure                level 1 dcl 5-161
sl_info_sev_code_msg                   internal static structure                level 1 dcl 5-82
sl_info_sev_coded_msg                  internal static structure                level 1 dcl 5-134
sl_info_sev_msg                        internal static structure                level 1 dcl 5-108

NAMES DECLARED BY EXPLICIT CONTEXT.
ANY_OTHER_HANDLER               004160 constant        entry                    internal dcl 617 ref 249
CL_ENTRY                        002365 constant        entry                    internal dcl 313 ref 211 211
CONTROL                         002745 constant        entry                    internal dcl 427 ref 349
ERROR_NO_EXECUTION              002362 constant        label                    dcl 501 ref 163 175 182
GET_CHARS                       002522 constant        entry                    internal dcl 365 ref 343
GET_LINE                        002517 constant        entry                    internal dcl 358 ref 341
INPUT                           002530 constant        entry                    internal dcl 377 ref 361 367 373 444
IO_SIGNAL_HANDLER               002401 constant        entry                    internal dcl 319 ref 200 478 495
MODES                           002540 constant        entry                    internal dcl 384 ref 351
NEW_COMMAND_LEVEL               003077 constant        entry                    internal dcl 488 ref 482 482
NOTIFY_REFUSAL                  003137 constant        entry                    internal dcl 505 ref 501
POSITION                        002525 constant        entry                    internal dcl 371 ref 347
PUT_CHARS                       002551 constant        entry                    internal dcl 391 ref 345
RESTORE_RETURN                  001553 constant        label                    dcl 270 ref 258
SEND_COMPLETION_MAIL            003606 constant        entry                    internal dcl 576 ref 306
SEND_MAIL                       003406 constant        entry                    internal dcl 540 ref 522
SEND_MESSAGE                    003307 constant        entry                    internal dcl 530 ref 304 520 525
SEND_START_WAKEUP               003030 constant        entry                    internal dcl 452 ref 220
SETUP_CAPTURE_OUTPUT            004073 constant        entry                    internal dcl 605 ref 224
UNWIND_LABEL                    001520 constant        label                    dcl 260 ref 208 316 381
UNWIND_NO_REMASK_LABEL          001527 constant        label                    dcl 262 ref 236
sc_admin_command_               000564 constant        entry                    external dcl 29
test_signal_handling            002163 constant        entry                    external dcl 468

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      5134        5266    4250        5144
Length      6076    4250       132         573     664           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sc_admin_command_                   828 external procedure  is an external procedure.  
on unit on line 200                  64 on unit               
on unit on line 204                  64 on unit               
on unit on line 213                  64 on unit               
begin block on line 227                 begin block         shares stack frame of external procedure sc_admin_command_.  
on unit on line 249                 110 on unit               
CL_ENTRY                             64 internal procedure  is assigned to an entry variable.  
IO_SIGNAL_HANDLER                   200 internal procedure  is called by several nonquick procedures.  
GET_LINE                                internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
GET_CHARS                               internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
POSITION                                internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
INPUT                                   internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
MODES                                   internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
PUT_CHARS                               internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
CONTROL                                 internal procedure  shares stack frame of internal procedure IO_SIGNAL_HANDLER.  
SEND_START_WAKEUP                       internal procedure  shares stack frame of external procedure sc_admin_command_.  
on unit on line 478                  64 on unit               
on unit on line 484                  68 on unit               
NEW_COMMAND_LEVEL                    76 internal procedure  is assigned to an entry variable, and enables or reverts conditions.  
on unit on line 495                  64 on unit               
NOTIFY_REFUSAL                          internal procedure  shares stack frame of external procedure sc_admin_command_.  
SEND_MESSAGE                            internal procedure  shares stack frame of external procedure sc_admin_command_.  
SEND_MAIL                           384 internal procedure  is declared options(non_quick).  
SEND_COMPLETION_MAIL                154 internal procedure  uses auto adjustable storage.  
SETUP_CAPTURE_OUTPUT                    internal procedure  shares stack frame of external procedure sc_admin_command_.  
ANY_OTHER_HANDLER                       internal procedure  shares stack frame of on unit on line 249.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
IO_SIGNAL_HANDLER        000100 CI                          IO_SIGNAL_HANDLER
                         000176 window_ptr                  PUT_CHARS
                         000200 window_length               PUT_CHARS
SEND_COMPLETION_MAIL     000100 remaining_ptr               SEND_COMPLETION_MAIL
                         000102 added_length                SEND_COMPLETION_MAIL
                         000103 subject                     SEND_COMPLETION_MAIL
SEND_MAIL                000100 fdo                         SEND_MAIL
                         000105 formatted_message           SEND_MAIL
                         000477 formatted_message_length    SEND_MAIL
on unit on line 249      000106 CI                          ANY_OTHER_HANDLER
                         000140 code                        ANY_OTHER_HANDLER
sc_admin_command_        000100 acs_mode                    sc_admin_command_
                         000101 code                        sc_admin_command_
                         000102 capture_output_ptr          sc_admin_command_
                         000104 capture_output_length       sc_admin_command_
                         000105 capture_overran             sc_admin_command_
                         000106 completion_string           sc_admin_command_
                         000170 prev_iocb_name              sc_admin_command_
                         000200 finish_signalled            sc_admin_command_
                         000201 evidence_of_error           sc_admin_command_
                         000202 ignore_io                   sc_admin_command_
                         000204 sci_ptr                     sc_admin_command_
                         000206 message_string              sc_admin_command_
                         000600 test_switches               sc_admin_command_
                         000601 error_string                sc_admin_command_
                         000632 unmask_count                sc_admin_command_
                         000672 test_iocb                   sc_admin_command_
                         000674 default_cl_intermediary     sc_admin_command_
                         000700 cli_flags                   sc_admin_command_
                         000702 sc_subsystem_info_ptr       sc_admin_command_
                         000704 asr_replyp                  sc_admin_command_
                         000706 asr_admin_command_info_ptr  sc_admin_command_
                         000710 as_request_sender_ptr       sc_admin_command_
                         000712 signal_io_info_ptr          sc_admin_command_
                         000714 restrictions                begin block on line 227
                         000724 l_reply                     SEND_START_WAKEUP

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              r_ne_as             alloc_char_temp     call_ent_var        call_ext_out_desc   call_ext_out
call_int_this_desc  call_int_other      return_mac          tra_ext_1           alloc_auto_adj      enable_op
shorten_stack       ext_entry           int_entry           int_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
as_send_user_mail_            as_send_user_message_         com_err_                      continue_to_signal_
convert_status_code_          cu_$get_cl_intermediary       cu_$reset_cl_intermediary     cu_$set_cl_intermediary
default_error_handler_$wall   find_condition_info_          format_document_$string       get_group_id_
get_temp_segment_             hcs_$wakeup                   ioa_                          ioa_$ioa_switch
ioa_$ioa_switch_nnl           ioa_$rsnnl                    ioa_$rsnp                     iox_$attach_name
iox_$control                  iox_$open                     release_temp_segment_         sc_create_sci_
sc_create_sci_$destroy        sc_ipc_mask_$remask           sc_ipc_mask_$unmask
sc_process_command_line_$multics_command                    ssu_$get_info_ptr             sys_log_
sys_log_$error_log            up_sysctl_$check_acs

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$as_sac_command_read                            error_table_$insufficient_access
error_table_$recoverable_error                              error_table_$undefined_order_request
error_table_$unexpected_condition                           error_table_$unimplemented_version
iox_$error_output             sc_stat_$admin_log_iocb       sc_stat_$admin_sci_ptr


CONSTANTS
004230  aa     000004000000
004231  aa     000004000000
004232  aa     600000000041
004233  aa     001304000000
004234  aa     600000000041
004235  aa     000206000000
004236  ta     000102000000
004237  aa     000000000000
004240  ta     000103000000
004241  aa     000000000000

004242  aa     775777777777

004243  aa     757777777777

004244  aa     737777777777

004245  aa     677777777777

004246  aa     577777777777

004247  aa     377777777777

000000  aa  143 157 156 164	cont
000001  aa  162 157 154 040	rol 
000002  aa  040 040 040 040	    
000003  aa  040 040 040 040	    
000004  aa  040 040 040 040	    
000005  aa  040 040 040 040	    
000006  aa  040 040 040 040	    
000007  aa  040 040 040 040	    

000010  aa  160 157 163 151	posi
000011  aa  164 151 157 156	tion
000012  aa  040 040 040 040	    
000013  aa  040 040 040 040	    
000014  aa  040 040 040 040	    
000015  aa  040 040 040 040	    
000016  aa  040 040 040 040	    
000017  aa  040 040 040 040	    

000020  aa  155 157 144 145	mode
000021  aa  163 040 040 040	s   
000022  aa  040 040 040 040	    
000023  aa  040 040 040 040	    
000024  aa  040 040 040 040	    
000025  aa  040 040 040 040	    
000026  aa  040 040 040 040	    
000027  aa  040 040 040 040	    

000030  aa  160 165 164 137	put_
000031  aa  143 150 141 162	char
000032  aa  163 040 040 040	s   
000033  aa  040 040 040 040	    
000034  aa  040 040 040 040	    
000035  aa  040 040 040 040	    
000036  aa  040 040 040 040	    
000037  aa  040 040 040 040	    

000040  aa  147 145 164 137	get_
000041  aa  143 150 141 162	char
000042  aa  163 040 040 040	s   
000043  aa  040 040 040 040	    
000044  aa  040 040 040 040	    
000045  aa  040 040 040 040	    
000046  aa  040 040 040 040	    
000047  aa  040 040 040 040	    

000050  aa  147 145 164 137	get_
000051  aa  154 151 156 145	line
000052  aa  040 040 040 040	    
000053  aa  040 040 040 040	    
000054  aa  040 040 040 040	    
000055  aa  040 040 040 040	    
000056  aa  040 040 040 040	    
000057  aa  040 040 040 040	    

000060  aa  141 163 162 141	asra
000061  aa  143 060 060 061	c001

000062  aa     000003600000

000063  aa     524000023420

000064  aa     524000000053

000065  aa     000003601750

000066  aa     524000000134

000067  aa     404000000025

000070  aa     000000000003

000071  aa     514000000110

000072  aa     526077777777

000073  aa     524000000037

000074  aa     524000000067

000075  aa     524000000002

000076  aa     524000000011

000077  aa     524000000056

000100  aa     524000000063

000101  aa     524000000012

000102  aa     524000000000

000103  aa     526000001750

000104  aa     524000000165

000105  aa     524000000025

000106  aa     524000000144

000107  aa     514000000001

000110  aa     516000000001

000111  aa     404000000005

000112  aa     526000000310

000113  aa     524000000162

000114  aa     524000000024

000115  aa     524000000046

000116  aa     526000000000

000117  aa     524000000031

000120  aa     404000000003

000121  aa     524000000077

000122  aa     524000000036

000123  aa     524000000021

000124  aa     404000000043

000125  aa     514000000044

000126  aa     404000000021

000127  aa     524000000026

000130  aa     000000000000

000131  aa     526000000040

000132  aa     000000000001

000133  aa     464000000000

000134  aa  163 164 141 162	star
000135  aa  164 000 000 000	t

000136  aa  154 151 163 164	list
000137  aa  145 156 000 000	en

000140  aa  150 141 156 147	hang
000141  aa  165 160 000 000	up

000142  aa  040 040 040 040	    
000143  aa  040 040 040 040	    

000144  aa     077777000043
000145  aa     000001000000

000146  aa     000000000000
000147  aa     000000000000

000150  aa  146 151 156 151	fini
000151  aa  163 150 000 000	sh

000152  aa  143 154 145 141	clea
000153  aa  156 165 160 000	nup

000154  aa  162 145 141 144	read
000155  aa  137 163 164 141	_sta
000156  aa  164 165 163 000	tus

000157  aa  160 162 151 156	prin
000160  aa  164 145 162 137	ter_
000161  aa  157 146 146 000	off

000162  aa  160 162 151 156	prin
000163  aa  164 145 162 137	ter_
000164  aa  157 156 000 000	on

000165  aa  161 165 151 164	quit
000166  aa  137 144 151 163	_dis
000167  aa  141 142 154 145	able

000170  aa  161 165 151 164	quit
000171  aa  137 145 156 141	_ena
000172  aa  142 154 145 000	ble

000173  aa  136 057 136 141	^/^a
000174  aa  072 136 057 136	:^/^
000175  aa  141 000 000 000	a

000176  aa  165 163 145 162	user
000177  aa  137 157 165 164	_out
000200  aa  160 165 164 000	put

000201  aa     504000000002
000202  aa     516000000001
000203  aa     516000000043

000204  aa  163 151 147 156	sign
000205  aa  141 154 137 151	al_i
000206  aa  157 137 000 000	o_

000207  aa  141 156 171 137	any_
000210  aa  157 164 150 145	othe
000211  aa  162 000 000 000	r

000212  aa  143 157 155 155	comm
000213  aa  141 156 144 137	and_
000214  aa  145 162 162 157	erro
000215  aa  162 000 000 000	r

000216  aa  101 144 155 151	Admi
000217  aa  156 040 143 157	n co
000220  aa  155 155 141 156	mman
000221  aa  144 040 163 145	d se
000222  aa  162 166 145 162	rver

000223  aa  146 154 165 163	flus
000224  aa  150 137 160 145	h_pe
000225  aa  156 144 151 156	ndin
000226  aa  147 137 157 165	g_ou
000227  aa  164 160 165 164	tput

000230  aa  122 145 164 165	Retu
000231  aa  162 156 145 144	rned
000232  aa  040 166 151 141	 via
000233  aa  040 165 156 167	 unw
000234  aa  151 156 144 056	ind.

000235  aa  163 143 137 141	sc_a
000236  aa  144 155 151 156	dmin
000237  aa  137 143 157 155	_com
000240  aa  155 141 156 144	mand
000241  aa  137 000 000 000	_

000242  aa  164 145 163 164	test
000243  aa  137 163 143 137	_sc_
000244  aa  141 144 155 151	admi
000245  aa  156 137 143 157	n_co
000246  aa  155 155 141 156	mman
000247  aa  144 000 000 000	d

000250  aa  163 143 137 141	sc_a
000251  aa  144 155 151 156	dmin
000252  aa  137 143 157 155	_com
000253  aa  155 141 156 144	mand
000254  aa  137 072 040 136	_: ^
000255  aa  141 000 000 000	a

000256  aa  163 145 156 144	send
000257  aa  137 141 144 155	_adm
000260  aa  151 156 137 143	in_c
000261  aa  157 155 155 141	omma
000262  aa  156 144 056 141	nd.a
000263  aa  143 163 000 000	cs

000264  aa  136 133 123 165	^[Su
000265  aa  143 143 145 145	ccee
000266  aa  144 145 144 136	ded^
000267  aa  073 106 141 151	;Fai
000270  aa  154 145 144 136	led^
000271  aa  135 072 040 136	]: ^
000272  aa  141 000 000 000	a

000273  aa  163 143 137 141	sc_a
000274  aa  144 155 151 156	dmin
000275  aa  137 143 157 155	_com
000276  aa  155 141 156 144	mand
000277  aa  137 072 040 136	_: ^
000300  aa  141 072 040 136	a: ^
000301  aa  141 000 000 000	a

000302  aa  101 144 155 151	Admi
000303  aa  156 040 143 157	n co
000304  aa  155 155 141 156	mman
000305  aa  144 040 145 170	d ex
000306  aa  145 143 165 164	ecut
000307  aa  151 157 156 040	ion 
000310  aa  162 145 146 165	refu
000311  aa  163 145 144 000	sed

000312  aa  106 141 151 154	Fail
000313  aa  145 144 040 164	ed t
000314  aa  157 040 143 150	o ch
000315  aa  145 143 153 040	eck 
000316  aa  141 143 143 145	acce
000317  aa  163 163 040 146	ss f
000320  aa  157 162 040 136	or ^
000321  aa  141 056 000 000	a.

000322  aa  163 143 137 141	sc_a
000323  aa  144 155 151 156	dmin
000324  aa  137 143 157 155	_com
000325  aa  155 141 156 144	mand
000326  aa  137 044 164 145	_$te
000327  aa  163 164 137 163	st_s
000330  aa  151 147 156 141	igna
000331  aa  154 137 150 141	l_ha
000332  aa  156 144 154 151	ndli
000333  aa  156 147 000 000	ng

000334  aa  117 165 164 160	Outp
000335  aa  165 164 040 157	ut o
000336  aa  146 040 145 170	f ex
000337  aa  145 143 165 164	ecut
000340  aa  151 157 156 040	ion 
000341  aa  157 146 040 141	of a
000342  aa  144 155 151 156	dmin
000343  aa  040 143 157 155	 com
000344  aa  155 141 156 144	mand
000345  aa  072 136 057 136	:^/^
000346  aa  141 136 057 000	a^/

000347  aa  163 143 137 141	sc_a
000350  aa  144 155 151 156	dmin
000351  aa  137 143 157 155	_com
000352  aa  155 141 156 144	mand
000353  aa  137 044 164 145	_$te
000354  aa  163 164 137 163	st_s
000355  aa  151 147 156 141	igna
000356  aa  154 137 150 141	l_ha
000357  aa  156 144 154 151	ndli
000360  aa  156 147 072 040	ng: 
000361  aa  136 141 072 040	^a: 
000362  aa  136 141 000 000	^a

000363  aa  106 141 151 154	Fail
000364  aa  145 144 040 164	ed t
000365  aa  157 040 143 162	o cr
000366  aa  145 141 164 145	eate
000367  aa  040 163 143 151	 sci
000370  aa  040 146 157 162	 for
000371  aa  040 145 170 145	 exe
000372  aa  143 165 164 151	cuti
000373  aa  157 156 040 157	on o
000374  aa  146 040 164 150	f th
000375  aa  141 164 040 143	at c
000376  aa  157 155 155 141	omma
000377  aa  156 144 056 000	nd.

000400  aa  136 141 040 101	^a A
000401  aa  144 155 151 156	dmin
000402  aa  040 143 157 155	 com
000403  aa  155 141 156 144	mand
000404  aa  040 154 151 156	 lin
000405  aa  145 040 162 145	e re
000406  aa  146 165 163 145	fuse
000407  aa  144 056 040 103	d. C
000410  aa  157 155 155 141	omma
000411  aa  156 144 040 154	nd l
000412  aa  151 156 145 040	ine 
000413  aa  167 141 163 072	was:
000414  aa  136 057 040 136	^/ ^
000415  aa  141 136 057 000	a^/

000416  aa  163 143 137 141	sc_a
000417  aa  144 155 151 156	dmin
000420  aa  137 143 157 155	_com
000421  aa  155 141 156 144	mand
000422  aa  137 072 040 104	_: D
000423  aa  145 156 151 145	enie
000424  aa  144 040 163 145	d se
000425  aa  156 144 137 141	nd_a
000426  aa  144 155 151 156	dmin
000427  aa  137 143 157 155	_com
000430  aa  155 141 156 144	mand
000431  aa  040 146 157 162	 for
000432  aa  040 136 141 040	 ^a 
000433  aa  151 156 040 162	in r
000434  aa  151 156 147 040	ing 
000435  aa  136 144 056 000	^d.

000436  aa  136 057 136 141	^/^a
000437  aa  136 133 136 057	^[^/
000440  aa  124 150 145 040	The 
000441  aa  157 165 164 160	outp
000442  aa  165 164 040 050	ut (
000443  aa  141 142 157 166	abov
000444  aa  145 051 040 167	e) w
000445  aa  141 163 040 164	as t
000446  aa  162 165 156 143	runc
000447  aa  141 164 145 144	ated
000450  aa  040 142 145 143	 bec
000451  aa  141 165 163 145	ause
000452  aa  040 151 164 040	 it 
000453  aa  167 141 163 040	was 
000454  aa  164 157 157 040	too 
000455  aa  154 157 156 147	long
000456  aa  040 164 157 040	 to 
000457  aa  146 151 164 136	fit^
000460  aa  057 040 151 156	/ in
000461  aa  040 141 040 155	 a m
000462  aa  141 151 154 040	ail 
000463  aa  155 145 163 163	mess
000464  aa  141 147 145 056	age.

000465  aa  103 157 155 160	Comp
000466  aa  154 145 164 145	lete
000467  aa  144 040 143 157	d co
000470  aa  155 155 141 156	mman
000471  aa  144 136 133 040	d^[ 
000472  aa  167 151 164 150	with
000473  aa  040 145 162 162	 err
000474  aa  157 162 163 136	ors^
000475  aa  135 056 136 133	].^[
000476  aa  040 106 151 156	 Fin
000477  aa  151 163 150 040	ish 
000500  aa  143 157 156 144	cond
000501  aa  151 164 151 157	itio
000502  aa  156 040 163 151	n si
000503  aa  147 156 141 154	gnal
000504  aa  154 145 144 056	led.
000505  aa  136 135 136 133	^]^[
000506  aa  040 136 141 136	 ^a^
000507  aa  057 136 073 136	/^;^
000510  aa  163 136 135 136	s^]^
000511  aa  133 040 103 157	[ Co
000512  aa  155 155 141 156	mman
000513  aa  144 040 154 151	d li
000514  aa  156 145 040 141	ne a
000515  aa  142 157 162 164	bort
000516  aa  145 144 040 142	ed b
000517  aa  171 040 145 162	y er
000520  aa  162 157 162 056	ror.
000521  aa  136 135 000 000	^]

000522  aa  103 157 155 160	Comp
000523  aa  154 145 164 145	lete
000524  aa  144 040 143 157	d co
000525  aa  155 155 141 156	mman
000526  aa  144 040 136 141	d ^a
000527  aa  136 133 040 167	^[ w
000530  aa  151 164 150 040	ith 
000531  aa  145 162 162 157	erro
000532  aa  162 163 136 135	rs^]
000533  aa  056 136 133 040	.^[ 
000534  aa  106 151 156 151	Fini
000535  aa  163 150 040 143	sh c
000536  aa  157 156 144 151	ondi
000537  aa  164 151 157 156	tion
000540  aa  040 163 151 147	 sig
000541  aa  156 141 154 154	nall
000542  aa  145 144 056 136	ed.^
000543  aa  135 136 133 040	]^[ 
000544  aa  136 141 136 057	^a^/
000545  aa  136 073 136 163	^;^s
000546  aa  136 135 136 133	^]^[
000547  aa  040 103 157 155	 Com
000550  aa  155 141 156 144	mand
000551  aa  040 154 151 156	 lin
000552  aa  145 040 141 142	e ab
000553  aa  157 162 164 145	orte
000554  aa  144 040 142 171	d by
000555  aa  040 145 162 162	 err
000556  aa  157 162 056 136	or.^
000557  aa  135 000 000 000	]

BEGIN PROCEDURE sc_admin_command_
ENTRY TO sc_admin_command_                                  STATEMENT 1 ON LINE 29
sc_admin_command_:
     procedure (ASR_info_ptr, ASR_sender_ptr);

000560  at     000002000133
000561  ta     000133000000
000562  ta     000560000000
000563  da     000524300000
000564  aa   001500 6270 00	eax7 	832
000565  aa  7 00034 3521 20	epp2 	pr7|28,*
000566  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000567  aa     000004000000
000570  aa     000000000000
						STATEMENT 1 ON LINE 153
	test_switches = "0"b;

000571  aa  6 00600 4501 00	stz  	pr6|384		test_switches
						STATEMENT 1 ON LINE 154
	asr_admin_command_info_ptr = ASR_info_ptr;

000572  aa  6 00032 3735 20	epp7 	pr6|26,*
000573  aa  7 00002 3715 20	epp5 	pr7|2,*		ASR_info_ptr
000574  aa  5 00000 3715 20	epp5 	pr5|0,*		ASR_info_ptr
000575  aa  6 00706 6515 00	spri5	pr6|454		asr_admin_command_info_ptr
						STATEMENT 1 ON LINE 155
	as_request_sender_ptr = ASR_sender_ptr;

000576  aa  7 00004 3535 20	epp3 	pr7|4,*		ASR_sender_ptr
000577  aa  3 00000 3535 20	epp3 	pr3|0,*		ASR_sender_ptr
000600  aa  6 00710 2535 00	spri3	pr6|456		as_request_sender_ptr
						STATEMENT 1 ON LINE 156
	asr_replyp = addr (as_request_sender.reply_message);

000601  aa  3 00002 3515 00	epp1 	pr3|2		as_request_sender.reply_message
000602  aa  6 00704 2515 00	spri1	pr6|452		asr_replyp
						STATEMENT 1 ON LINE 157
	asr_reply_admin_command.code = 0;

000603  aa  1 00000 4501 00	stz  	pr1|0		asr_reply_admin_command.code
						STATEMENT 1 ON LINE 158
	asr_reply_admin_command.flags = "0"b;

000604  aa   003443 2350 04	lda  	1827,ic		004247 = 377777777777
000605  aa  1 00001 3551 00	ansa 	pr1|1		asr_reply_admin_command.command_refused
000606  aa   003440 2350 04	lda  	1824,ic		004246 = 577777777777
000607  aa  1 00001 3551 00	ansa 	pr1|1		asr_reply_admin_command.command_started
000610  aa   003435 2350 04	lda  	1821,ic		004245 = 677777777777
000611  aa  1 00001 3551 00	ansa 	pr1|1		asr_reply_admin_command.command_completed
000612  aa   003432 2350 04	lda  	1818,ic		004244 = 737777777777
000613  aa  1 00001 3551 00	ansa 	pr1|1		asr_reply_admin_command.command_aborted
000614  aa   003427 2350 04	lda  	1815,ic		004243 = 757777777777
000615  aa  1 00001 3551 00	ansa 	pr1|1		asr_reply_admin_command.command_had_errors
000616  aa   760000 2350 03	lda  	253952,du
000617  aa  1 00001 3551 00	ansa 	pr1|1		asr_reply_admin_command.pad
						STATEMENT 1 ON LINE 160
	if asr_admin_command_info.version ^= ASR_AC_VERSION_1
	then do;

000620  aa  5 00004 2351 00	lda  	pr5|4		asr_admin_command_info.version
000621  aa  5 00005 2361 00	ldq  	pr5|5		asr_admin_command_info.version
000622  aa   777236 1170 04	cmpaq	-354,ic		000060 = 141163162141 143060060061
000623  aa   000004 6000 04	tze  	4,ic		000627
						STATEMENT 1 ON LINE 162
		asr_reply_admin_command.code = error_table_$unimplemented_version;

000624  la  4 00106 2361 20	ldq  	pr4|70,*		error_table_$unimplemented_version
000625  aa  1 00000 7561 00	stq  	pr1|0		asr_reply_admin_command.code
						STATEMENT 1 ON LINE 163
		go to ERROR_NO_EXECUTION;

000626  aa   001534 7100 04	tra  	860,ic		002362
						STATEMENT 1 ON LINE 164
	     end;

						STATEMENT 1 ON LINE 168
	call up_sysctl_$check_acs ("send_admin_command.acs", as_request_sender.group_id,
	     (as_request_sender.validation_level), acs_mode, code);

000627  aa   777427 2370 04	ldaq 	-233,ic		000256 = 163145156144 137141144155
000630  aa  6 00750 7571 00	staq 	pr6|488
000631  aa   777427 2370 04	ldaq 	-233,ic		000260 = 151156137143 157155155141
000632  aa  6 00752 7571 00	staq 	pr6|490
000633  aa   777427 2370 04	ldaq 	-233,ic		000262 = 156144056141 143163000000
000634  aa  6 00754 7571 00	staq 	pr6|492
000635  aa  3 00015 2361 00	ldq  	pr3|13		as_request_sender.validation_level
000636  aa  6 00756 7561 00	stq  	pr6|494
000637  aa  6 00750 3521 00	epp2 	pr6|488
000640  aa  6 00762 2521 00	spri2	pr6|498
000641  aa  3 00004 3521 00	epp2 	pr3|4		as_request_sender.group_id
000642  aa  6 00764 2521 00	spri2	pr6|500
000643  aa  6 00756 3521 00	epp2 	pr6|494
000644  aa  6 00766 2521 00	spri2	pr6|502
000645  aa  6 00100 3521 00	epp2 	pr6|64		acs_mode
000646  aa  6 00770 2521 00	spri2	pr6|504
000647  aa  6 00101 3521 00	epp2 	pr6|65		code
000650  aa  6 00772 2521 00	spri2	pr6|506
000651  aa   777256 3520 04	epp2 	-338,ic		000127 = 524000000026
000652  aa  6 00774 2521 00	spri2	pr6|508
000653  aa   777256 3520 04	epp2 	-338,ic		000131 = 526000000040
000654  aa  6 00776 2521 00	spri2	pr6|510
000655  aa   777251 3520 04	epp2 	-343,ic		000126 = 404000000021
000656  aa  6 01000 2521 00	spri2	pr6|512
000657  aa   777246 3520 04	epp2 	-346,ic		000125 = 514000000044
000660  aa  6 01002 2521 00	spri2	pr6|514
000661  aa   777243 3520 04	epp2 	-349,ic		000124 = 404000000043
000662  aa  6 01004 2521 00	spri2	pr6|516
000663  aa  6 00760 6211 00	eax1 	pr6|496
000664  aa   024000 4310 07	fld  	10240,dl
000665  la  4 00076 3521 20	epp2 	pr4|62,*		up_sysctl_$check_acs
000666  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 170
	if code ^= 0
	then do;

000667  aa  6 00101 2361 00	ldq  	pr6|65		code
000670  aa   000045 6000 04	tze  	37,ic		000735
						STATEMENT 1 ON LINE 172
		call sys_log_$error_log (SL_LOG_SILENT, code, "sc_admin_command_", "Failed to check access for ^a.",
		     as_request_sender.group_id);

000671  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000672  aa   777344 00 0024	desc9a	-284,20		000235 = 163143137141
000673  aa  6 00750 00 0024	desc9a	pr6|488,20
000674  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000675  aa   777416 00 0040	desc9a	-242,32		000312 = 106141151154
000676  aa  6 00760 00 0040	desc9a	pr6|496,32
000677  aa   777231 3520 04	epp2 	-359,ic		000130 = 000000000000
000700  aa  6 01010 2521 00	spri2	pr6|520
000701  aa  6 00101 3521 00	epp2 	pr6|65		code
000702  aa  6 01012 2521 00	spri2	pr6|522
000703  aa  6 00750 3521 00	epp2 	pr6|488
000704  aa  6 01014 2521 00	spri2	pr6|524
000705  aa  6 00760 3521 00	epp2 	pr6|496
000706  aa  6 01016 2521 00	spri2	pr6|526
000707  aa  6 00710 3735 20	epp7 	pr6|456,*		as_request_sender_ptr
000710  aa  7 00004 3521 00	epp2 	pr7|4		as_request_sender.group_id
000711  aa  6 01020 2521 00	spri2	pr6|528
000712  aa   777214 3520 04	epp2 	-372,ic		000126 = 404000000021
000713  aa  6 01022 2521 00	spri2	pr6|530
000714  aa   777210 3520 04	epp2 	-376,ic		000124 = 404000000043
000715  aa  6 01024 2521 00	spri2	pr6|532
000716  aa   777205 3520 04	epp2 	-379,ic		000123 = 524000000021
000717  aa  6 01026 2521 00	spri2	pr6|534
000720  aa   777202 3520 04	epp2 	-382,ic		000122 = 524000000036
000721  aa  6 01030 2521 00	spri2	pr6|536
000722  aa   777207 3520 04	epp2 	-377,ic		000131 = 526000000040
000723  aa  6 01032 2521 00	spri2	pr6|538
000724  aa  6 01006 6211 00	eax1 	pr6|518
000725  aa   024000 4310 07	fld  	10240,dl
000726  aa  6 00044 3701 20	epp4 	pr6|36,*
000727  la  4 00074 3521 20	epp2 	pr4|60,*		sys_log_$error_log
000730  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 174
		asr_reply_admin_command.code = error_table_$insufficient_access;

000731  aa  6 00044 3701 20	epp4 	pr6|36,*
000732  la  4 00104 2361 20	ldq  	pr4|68,*		error_table_$insufficient_access
000733  aa  6 00704 7561 20	stq  	pr6|452,*		asr_reply_admin_command.code
						STATEMENT 1 ON LINE 175
		go to ERROR_NO_EXECUTION;

000734  aa   001426 7100 04	tra  	790,ic		002362
						STATEMENT 1 ON LINE 176
	     end;

						STATEMENT 1 ON LINE 177
	if (acs_mode & RW_ACCESS) ^= RW_ACCESS
	then do;

000735  aa  6 00100 2351 00	lda  	pr6|64		acs_mode
000736  aa   500000 3750 03	ana  	163840,du
000737  aa   500000 1150 03	cmpa 	163840,du
000740  aa   000036 6000 04	tze  	30,ic		000776
						STATEMENT 1 ON LINE 179
		call sys_log_ (SL_LOG_SILENT, "sc_admin_command_: Denied send_admin_command for ^a in ring ^d.",
		     as_request_sender.group_id, as_request_sender.validation_level);

000741  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000742  aa   777455 00 0100	desc9a	-211,64		000416 = 163143137141
000743  aa  6 01006 00 0100	desc9a	pr6|518,64
000744  aa   777164 3520 04	epp2 	-396,ic		000130 = 000000000000
000745  aa  6 00762 2521 00	spri2	pr6|498
000746  aa  6 01006 3521 00	epp2 	pr6|518
000747  aa  6 00764 2521 00	spri2	pr6|500
000750  aa  6 00710 3735 20	epp7 	pr6|456,*		as_request_sender_ptr
000751  aa  7 00004 3521 00	epp2 	pr7|4		as_request_sender.group_id
000752  aa  6 00766 2521 00	spri2	pr6|502
000753  aa  7 00015 3521 00	epp2 	pr7|13		as_request_sender.validation_level
000754  aa  6 00770 2521 00	spri2	pr6|504
000755  aa   777151 3520 04	epp2 	-407,ic		000126 = 404000000021
000756  aa  6 00772 2521 00	spri2	pr6|506
000757  aa   777142 3520 04	epp2 	-414,ic		000121 = 524000000077
000760  aa  6 00774 2521 00	spri2	pr6|508
000761  aa   777150 3520 04	epp2 	-408,ic		000131 = 526000000040
000762  aa  6 00776 2521 00	spri2	pr6|510
000763  aa   777135 3520 04	epp2 	-419,ic		000120 = 404000000003
000764  aa  6 01000 2521 00	spri2	pr6|512
000765  aa  6 00760 6211 00	eax1 	pr6|496
000766  aa   020000 4310 07	fld  	8192,dl
000767  aa  6 00044 3701 20	epp4 	pr6|36,*
000770  la  4 00072 3521 20	epp2 	pr4|58,*		sys_log_
000771  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 181
		asr_reply_admin_command.code = error_table_$insufficient_access;

000772  aa  6 00044 3701 20	epp4 	pr6|36,*
000773  la  4 00104 2361 20	ldq  	pr4|68,*		error_table_$insufficient_access
000774  aa  6 00704 7561 20	stq  	pr6|452,*		asr_reply_admin_command.code
						STATEMENT 1 ON LINE 182
		go to ERROR_NO_EXECUTION;

000775  aa   001365 7100 04	tra  	757,ic		002362
						STATEMENT 1 ON LINE 183
	     end;

						STATEMENT 1 ON LINE 187
	call sys_log_ (SL_LOG, "sc_admin_command_: ^a: ^a", as_request_sender.group_id, asr_admin_command_info.command);

000776  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
000777  aa  7 00240 2361 00	ldq  	pr7|160		asr_admin_command_info.command_length
001000  aa   526000 2760 03	orq  	175104,du
001001  aa  6 00756 7561 00	stq  	pr6|494
001002  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001003  aa   777271 00 0034	desc9a	-327,28		000273 = 163143137141
001004  aa  6 00760 00 0034	desc9a	pr6|496,28
001005  aa   777125 3520 04	epp2 	-427,ic		000132 = 000000000001
001006  aa  6 01010 2521 00	spri2	pr6|520
001007  aa  6 00760 3521 00	epp2 	pr6|496
001010  aa  6 01012 2521 00	spri2	pr6|522
001011  aa  6 00710 3715 20	epp5 	pr6|456,*		as_request_sender_ptr
001012  aa  5 00004 3521 00	epp2 	pr5|4		as_request_sender.group_id
001013  aa  6 01014 2521 00	spri2	pr6|524
001014  aa  7 00241 3521 00	epp2 	pr7|161		asr_admin_command_info.command
001015  aa  6 01016 2521 00	spri2	pr6|526
001016  aa   777110 3520 04	epp2 	-440,ic		000126 = 404000000021
001017  aa  6 01020 2521 00	spri2	pr6|528
001020  aa   777077 3520 04	epp2 	-449,ic		000117 = 524000000031
001021  aa  6 01022 2521 00	spri2	pr6|530
001022  aa   777107 3520 04	epp2 	-441,ic		000131 = 526000000040
001023  aa  6 01024 2521 00	spri2	pr6|532
001024  aa  6 00756 3521 00	epp2 	pr6|494
001025  aa  6 01026 2521 00	spri2	pr6|534
001026  aa  6 01006 6211 00	eax1 	pr6|518
001027  aa   020000 4310 07	fld  	8192,dl
001030  aa  6 00044 3701 20	epp4 	pr6|36,*
001031  la  4 00072 3521 20	epp2 	pr4|58,*		sys_log_
001032  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 189
	if ^(asr_admin_command_info.send_start_wakeup | asr_admin_command_info.send_completion_wakeup)
	then asr_admin_command_info.header.reply_channel = 0;

001033  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
001034  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_wakeup
001035  aa   600000 3150 03	cana 	196608,du
001036  aa   000003 6010 04	tnz  	3,ic		001041
001037  aa   777107 2370 04	ldaq 	-441,ic		000146 = 000000000000 000000000000
001040  aa  7 00002 7571 00	staq 	pr7|2		asr_admin_command_info.reply_channel
						STATEMENT 1 ON LINE 194
	call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "sc_admin_command_: ^a: ^a", as_request_sender.group_id,
	     asr_admin_command_info.command);

001041  aa  7 00240 2361 00	ldq  	pr7|160		asr_admin_command_info.command_length
001042  aa   526000 2760 03	orq  	175104,du
001043  aa  6 00756 7561 00	stq  	pr6|494
001044  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001045  aa   777227 00 0034	desc9a	-361,28		000273 = 163143137141
001046  aa  6 01006 00 0034	desc9a	pr6|518,28
001047  aa  6 00044 3701 20	epp4 	pr6|36,*
001050  la  4 00114 3521 20	epp2 	pr4|76,*		sc_stat_$admin_log_iocb
001051  aa  6 00762 2521 00	spri2	pr6|498
001052  aa  6 01006 3521 00	epp2 	pr6|518
001053  aa  6 00764 2521 00	spri2	pr6|500
001054  aa  6 00710 3715 20	epp5 	pr6|456,*		as_request_sender_ptr
001055  aa  5 00004 3521 00	epp2 	pr5|4		as_request_sender.group_id
001056  aa  6 00766 2521 00	spri2	pr6|502
001057  aa  7 00241 3521 00	epp2 	pr7|161		asr_admin_command_info.command
001060  aa  6 00770 2521 00	spri2	pr6|504
001061  aa   777052 3520 04	epp2 	-470,ic		000133 = 464000000000
001062  aa  6 00772 2521 00	spri2	pr6|506
001063  aa   777034 3520 04	epp2 	-484,ic		000117 = 524000000031
001064  aa  6 00774 2521 00	spri2	pr6|508
001065  aa   777044 3520 04	epp2 	-476,ic		000131 = 526000000040
001066  aa  6 00776 2521 00	spri2	pr6|510
001067  aa  6 00756 3521 00	epp2 	pr6|494
001070  aa  6 01000 2521 00	spri2	pr6|512
001071  aa  6 00760 6211 00	eax1 	pr6|496
001072  aa   020000 4310 07	fld  	8192,dl
001073  la  4 00046 3521 20	epp2 	pr4|38,*		ioa_$ioa_switch
001074  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 198
	ignore_io = "1"b;

001075  aa   400000 2350 03	lda  	131072,du
001076  aa  6 00202 7551 00	sta  	pr6|130		ignore_io
						STATEMENT 1 ON LINE 199
	finish_signalled = "0"b;

001077  aa  6 00200 4501 00	stz  	pr6|128		finish_signalled
						STATEMENT 1 ON LINE 200
	on signal_io_ call IO_SIGNAL_HANDLER;

001100  aa   000012 7260 07	lxl6 	10,dl
001101  aa   777103 3520 04	epp2 	-445,ic		000204 = 163151147156
001102  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
001103  aa   000004 7100 04	tra  	4,ic		001107
001104  aa     000664000000
001105  aa   000015 7100 04	tra  	13,ic		001122
BEGIN CONDITION signal_io_.1
ENTRY TO signal_io_.1                                       STATEMENT 1 ON LINE 200
	on signal_io_ call IO_SIGNAL_HANDLER;

001106  da     000533200000
001107  aa   000100 6270 00	eax7 	64
001110  aa  7 00034 3521 20	epp2 	pr7|28,*
001111  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
001112  aa     000000000000
001113  aa     000000000000
001114  aa   000001 7270 07	lxl7 	1,dl
001115  aa  6 00056 6211 00	eax1 	pr6|46
001116  aa   000000 4310 07	fld  	0,dl
001117  aa   001262 3520 04	epp2 	690,ic		002401 = 000320627000
001120  aa  0 00627 7001 00	tsx0 	pr0|407		call_int_other
001121  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION signal_io_.1
						STATEMENT 1 ON LINE 204
	on finish
	     begin;

001122  aa   000006 7260 07	lxl6 	6,dl
001123  aa   777025 3520 04	epp2 	-491,ic		000150 = 146151156151
001124  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
001125  aa   000004 7100 04	tra  	4,ic		001131
001126  aa     000656000000
001127  aa   000017 7100 04	tra  	15,ic		001146
BEGIN CONDITION finish.2
ENTRY TO finish.2                                           STATEMENT 1 ON LINE 204
	on finish
	     begin;

001130  da     000541200000
001131  aa   000100 6270 00	eax7 	64
001132  aa  7 00034 3521 20	epp2 	pr7|28,*
001133  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
001134  aa     000000000000
001135  aa     000000000000
						STATEMENT 1 ON LINE 206
		finish_signalled = "1"b;

001136  aa   400000 2350 03	lda  	131072,du
001137  aa  6 00040 3735 20	epp7 	pr6|32,*
001140  aa  7 00200 7551 00	sta  	pr7|128		finish_signalled
						STATEMENT 1 ON LINE 207
		code = error_table_$unexpected_condition;

001141  la  4 00110 2361 20	ldq  	pr4|72,*		error_table_$unexpected_condition
001142  aa  7 00101 7561 00	stq  	pr7|65		code
						STATEMENT 1 ON LINE 208
		go to UNWIND_LABEL;

001143  aa   000355 3520 04	epp2 	237,ic		001520 = 600632352100
001144  aa   000001 7270 07	lxl7 	1,dl
001145  aa  0 00657 7101 00	tra  	pr0|431		tra_ext_1
						STATEMENT 1 ON LINE 209
	     end;

  END CONDITION finish.2
						STATEMENT 1 ON LINE 211
	call cu_$set_cl_intermediary (CL_ENTRY);

001146  aa   001217 3520 04	epp2 	655,ic		002365 = 000100627000
001147  aa  6 00750 2521 00	spri2	pr6|488		cp.226
001150  aa  6 00752 6521 00	spri6	pr6|490		cp.226
001151  aa  6 00750 3521 00	epp2 	pr6|488		cp.226
001152  aa  6 00762 2521 00	spri2	pr6|498
001153  aa  6 00760 6211 00	eax1 	pr6|496
001154  aa   004000 4310 07	fld  	2048,dl
001155  aa  6 00044 3701 20	epp4 	pr6|36,*
001156  la  4 00024 3521 20	epp2 	pr4|20,*		cu_$set_cl_intermediary
001157  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 212
	evidence_of_error = "0"b;

001160  aa  6 00201 4501 00	stz  	pr6|129		evidence_of_error
						STATEMENT 1 ON LINE 213
	on command_error
	     begin;

001161  aa   000015 7260 07	lxl6 	13,dl
001162  aa   777030 3520 04	epp2 	-488,ic		000212 = 143157155155
001163  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
001164  aa   000004 7100 04	tra  	4,ic		001170
001165  aa     000642000000
001166  aa   000013 7100 04	tra  	11,ic		001201
BEGIN CONDITION command_error.3
ENTRY TO command_error.3                                    STATEMENT 1 ON LINE 213
	on command_error
	     begin;

001167  da     000550200000
001170  aa   000100 6270 00	eax7 	64
001171  aa  7 00034 3521 20	epp2 	pr7|28,*
001172  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
001173  aa     000000000000
001174  aa     000000000000
						STATEMENT 1 ON LINE 215
		evidence_of_error = "1"b;

001175  aa   400000 2350 03	lda  	131072,du
001176  aa  6 00040 3735 20	epp7 	pr6|32,*
001177  aa  7 00201 7551 00	sta  	pr7|129		evidence_of_error
						STATEMENT 1 ON LINE 216
	     end;

001200  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION command_error.3
						STATEMENT 1 ON LINE 218
	ignore_io = "0"b;

001201  aa  6 00202 4501 00	stz  	pr6|130		ignore_io
						STATEMENT 1 ON LINE 220
	if asr_admin_command_info.send_start_wakeup
	then call SEND_START_WAKEUP;

001202  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
001203  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_start_wakeup
001204  aa   400000 3150 03	cana 	131072,du
001205  aa   000002 6000 04	tze  	2,ic		001207
001206  aa   001622 6700 04	tsp4 	914,ic		003030
						STATEMENT 1 ON LINE 223
	capture_output_ptr = null ();

001207  aa   776735 2370 04	ldaq 	-547,ic		000144 = 077777000043 000001000000
001210  aa  6 00102 7571 00	staq 	pr6|66		capture_output_ptr
						STATEMENT 1 ON LINE 224
	if asr_admin_command_info.send_completion_mail
	then call SETUP_CAPTURE_OUTPUT;

001211  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
001212  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_mail
001213  aa   040000 3150 03	cana 	16384,du
001214  aa   000002 6000 04	tze  	2,ic		001216
001215  aa   002656 6700 04	tsp4 	1454,ic		004073
						STATEMENT 1 ON LINE 227
	begin;

BEGIN BLOCK  1                                              STATEMENT 1 ON LINE 229
	     restrictions = "1"b;

001216  aa   400000 2350 03	lda  	131072,du
001217  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.master_console
001220  aa   200000 2350 03	lda  	65536,du
001221  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.as_control
001222  aa   100000 2350 03	lda  	32768,du
001223  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.reset_sc
001224  aa   040000 2350 03	lda  	16384,du
001225  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.reply
001226  aa   020000 2350 03	lda  	8192,du
001227  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.edit_motd
001230  aa   010000 2350 03	lda  	4096,du
001231  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.intercom
001232  aa   004000 2350 03	lda  	2048,du
001233  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.mpx_control
001234  aa   002000 2350 03	lda  	1024,du
001235  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.admin_mode
001236  aa   001000 2350 03	lda  	512,du
001237  aa  6 00714 6751 00	era  	pr6|460		restrictions.pad11
001240  aa   001776 3750 03	ana  	1022,du
001241  aa  6 00714 6551 00	ersa 	pr6|460		restrictions.pad11
001242  aa   000001 2350 03	lda  	1,du
001243  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.rcp_control
001244  aa   400000 2350 07	lda  	131072,dl
001245  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.reconfig_system
001246  aa   200000 2350 07	lda  	65536,dl
001247  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.pad6
001250  aa   100000 2350 07	lda  	32768,dl
001251  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.exec
001252  aa   040000 2350 07	lda  	16384,dl
001253  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.status
001254  aa   020000 2350 07	lda  	8192,dl
001255  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.daemon_control
001256  aa   010000 2350 07	lda  	4096,dl
001257  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.loginword
001260  aa   004000 2350 07	lda  	2048,dl
001261  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.mod_sysid
001262  aa   002000 2350 07	lda  	1024,dl
001263  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.down_ok
001264  aa   001000 2350 07	lda  	512,dl
001265  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.warning
001266  aa   000400 2350 07	lda  	256,dl
001267  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.set_maxu
001270  aa   000200 2350 07	lda  	128,dl
001271  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.channel_control
001272  aa   000100 2350 07	lda  	64,dl
001273  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.bump_user
001274  aa   000040 2350 07	lda  	32,dl
001275  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.route_messages
001276  aa   000020 2350 07	lda  	16,dl
001277  aa  6 00714 2551 00	orsa 	pr6|460		restrictions.abs_control
001300  aa   000010 2350 07	lda  	8,dl
001301  aa  6 00714 6751 00	era  	pr6|460		restrictions.pad2
001302  aa   000017 3750 07	ana  	15,dl
001303  aa  6 00714 6551 00	ersa 	pr6|460		restrictions.pad2
						STATEMENT 1 ON LINE 230
	     restrictions.admin_mode = "0"b;

001304  aa   002736 2350 04	lda  	1502,ic		004242 = 775777777777
001305  aa  6 00714 3551 00	ansa 	pr6|460		restrictions.admin_mode
						STATEMENT 1 ON LINE 231
	     call sc_create_sci_ (sci_ptr, code);

001306  aa  6 00204 3521 00	epp2 	pr6|132		sci_ptr
001307  aa  6 01036 2521 00	spri2	pr6|542
001310  aa  6 00101 3521 00	epp2 	pr6|65		code
001311  aa  6 01040 2521 00	spri2	pr6|544
001312  aa  6 01034 6211 00	eax1 	pr6|540
001313  aa   010000 4310 07	fld  	4096,dl
001314  aa  6 00044 3701 20	epp4 	pr6|36,*
001315  la  4 00056 3521 20	epp2 	pr4|46,*		sc_create_sci_
001316  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 232
	     if code ^= 0
	     then do;

001317  aa  6 00101 2361 00	ldq  	pr6|65		code
001320  aa   000035 6000 04	tze  	29,ic		001355
						STATEMENT 1 ON LINE 234
		     call sys_log_$error_log (SL_LOG_SILENT, code, "sc_admin_command_",
			"Failed to create sci for execution of that command.");

001321  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001322  aa   776714 00 0024	desc9a	-564,20		000235 = 163143137141
001323  aa  6 01034 00 0024	desc9a	pr6|540,20
001324  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001325  aa   777037 00 0064	desc9a	-481,52		000363 = 106141151154
001326  aa  6 01042 00 0064	desc9a	pr6|546,52
001327  aa   776601 3520 04	epp2 	-639,ic		000130 = 000000000000
001330  aa  6 01062 2521 00	spri2	pr6|562
001331  aa  6 00101 3521 00	epp2 	pr6|65		code
001332  aa  6 01064 2521 00	spri2	pr6|564
001333  aa  6 01034 3521 00	epp2 	pr6|540
001334  aa  6 01066 2521 00	spri2	pr6|566
001335  aa  6 01042 3521 00	epp2 	pr6|546
001336  aa  6 01070 2521 00	spri2	pr6|568
001337  aa   776567 3520 04	epp2 	-649,ic		000126 = 404000000021
001340  aa  6 01072 2521 00	spri2	pr6|570
001341  aa   776563 3520 04	epp2 	-653,ic		000124 = 404000000043
001342  aa  6 01074 2521 00	spri2	pr6|572
001343  aa   776560 3520 04	epp2 	-656,ic		000123 = 524000000021
001344  aa  6 01076 2521 00	spri2	pr6|574
001345  aa   776533 3520 04	epp2 	-677,ic		000100 = 524000000063
001346  aa  6 01100 2521 00	spri2	pr6|576
001347  aa  6 01060 6211 00	eax1 	pr6|560
001350  aa   020000 4310 07	fld  	8192,dl
001351  aa  6 00044 3701 20	epp4 	pr6|36,*
001352  la  4 00074 3521 20	epp2 	pr4|60,*		sys_log_$error_log
001353  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 236
		     go to UNWIND_NO_REMASK_LABEL;

001354  aa   000153 7100 04	tra  	107,ic		001527
						STATEMENT 1 ON LINE 237
		end;

						STATEMENT 1 ON LINE 238
	     sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);

001355  aa  6 00204 3521 00	epp2 	pr6|132		sci_ptr
001356  aa  6 01036 2521 00	spri2	pr6|542
001357  aa  6 00702 3521 00	epp2 	pr6|450		sc_subsystem_info_ptr
001360  aa  6 01040 2521 00	spri2	pr6|544
001361  aa  6 01034 6211 00	eax1 	pr6|540
001362  aa   010000 4310 07	fld  	4096,dl
001363  aa  6 00044 3701 20	epp4 	pr6|36,*
001364  la  4 00070 3521 20	epp2 	pr4|56,*		ssu_$get_info_ptr
001365  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 239
	     sc_subsystem_info.source_name = "sc_admin_command_";

001366  aa  6 00702 3735 20	epp7 	pr6|450,*		sc_subsystem_info_ptr
001367  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001370  aa   776646 00 0021	desc9a	-602,17		000235 = 163143137141
001371  aa  7 00002 00 0040	desc9a	pr7|2,32		sc_subsystem_info.source_name
						STATEMENT 1 ON LINE 240
	     sc_subsystem_info.restriction_flags = unspec (restrictions);

001372  aa  6 00714 2351 00	lda  	pr6|460
001373  aa  7 00000 7551 00	sta  	pr7|0		sc_subsystem_info.restriction_flags
						STATEMENT 1 ON LINE 241
	     sc_subsystem_info.no_real_tty = "1"b;

001374  aa   400000 2350 03	lda  	131072,du
001375  aa  7 00001 2551 00	orsa 	pr7|1		sc_subsystem_info.no_real_tty
						STATEMENT 1 ON LINE 242
	     sc_subsystem_info.real_iocb = null ();

001376  aa   776546 2370 04	ldaq 	-666,ic		000144 = 077777000043 000001000000
001377  aa  7 00016 7571 00	staq 	pr7|14		sc_subsystem_info.real_iocb
						STATEMENT 1 ON LINE 243
	     sc_subsystem_info.mc_atep = null ();

001400  aa  6 00702 3735 20	epp7 	pr6|450,*		sc_subsystem_info_ptr
001401  aa  7 00014 7571 00	staq 	pr7|12		sc_subsystem_info.mc_atep
						STATEMENT 1 ON LINE 244
	     sc_subsystem_info.access_control_name = get_group_id_ ();

001402  aa  6 00702 3735 20	epp7 	pr6|450,*		sc_subsystem_info_ptr
001403  aa  7 00034 3521 00	epp2 	pr7|28		sc_subsystem_info.access_control_name
001404  aa  6 01036 2521 00	spri2	pr6|542
001405  aa  6 01034 6211 00	eax1 	pr6|540
001406  aa   004000 4310 07	fld  	2048,dl
001407  aa  6 00044 3701 20	epp4 	pr6|36,*
001410  la  4 00034 3521 20	epp2 	pr4|28,*		get_group_id_
001411  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 245
	end;

  END BLOCK  1
						STATEMENT 1 ON LINE 247
	prev_iocb_name = "user_output";

001412  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001413  aa   776564 00 0013	desc9a	-652,11		000176 = 165163145162
001414  aa  6 00170 00 0040	desc9a	pr6|120,32	prev_iocb_name
						STATEMENT 1 ON LINE 248
	call sc_ipc_mask_$unmask (unmask_count);

001415  aa  6 00632 3521 00	epp2 	pr6|410		unmask_count
001416  aa  6 00752 2521 00	spri2	pr6|490
001417  aa  6 00750 6211 00	eax1 	pr6|488
001420  aa   004000 4310 07	fld  	2048,dl
001421  aa  6 00044 3701 20	epp4 	pr6|36,*
001422  la  4 00064 3521 20	epp2 	pr4|52,*		sc_ipc_mask_$unmask
001423  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 249
	on any_other call ANY_OTHER_HANDLER ();

001424  aa   000011 7260 07	lxl6 	9,dl
001425  aa   776562 3520 04	epp2 	-654,ic		000207 = 141156171137
001426  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
001427  aa   000004 7100 04	tra  	4,ic		001433
001430  aa     000650000000
001431  aa   000011 7100 04	tra  	9,ic		001442
BEGIN CONDITION any_other.4
ENTRY TO any_other.4                                        STATEMENT 1 ON LINE 249
	on any_other call ANY_OTHER_HANDLER ();

001432  da     000556200000
001433  aa   000160 6270 00	eax7 	112
001434  aa  7 00034 3521 20	epp2 	pr7|28,*
001435  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
001436  aa     000000000000
001437  aa     000000000000
001440  aa   002520 6700 04	tsp4 	1360,ic		004160
001441  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION any_other.4
						STATEMENT 1 ON LINE 251
	call sc_process_command_line_$multics_command (sci_ptr, addr (asr_admin_command_info.command),
	     length (asr_admin_command_info.command));

001442  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
001443  aa  7 00241 3735 00	epp7 	pr7|161		asr_admin_command_info.command
001444  aa  6 01102 6535 00	spri7	pr6|578
001445  aa  6 00706 3715 20	epp5 	pr6|454,*		asr_admin_command_info_ptr
001446  aa  5 00240 2361 00	ldq  	pr5|160		asr_admin_command_info.command_length
001447  aa  6 00756 7561 00	stq  	pr6|494
001450  aa  6 00204 3521 00	epp2 	pr6|132		sci_ptr
001451  aa  6 01010 2521 00	spri2	pr6|520
001452  aa  6 01102 3521 00	epp2 	pr6|578
001453  aa  6 01012 2521 00	spri2	pr6|522
001454  aa  6 00756 3521 00	epp2 	pr6|494
001455  aa  6 01014 2521 00	spri2	pr6|524
001456  aa  6 01006 6211 00	eax1 	pr6|518
001457  aa   014000 4310 07	fld  	6144,dl
001460  aa  6 00044 3701 20	epp4 	pr6|36,*
001461  la  4 00062 3521 20	epp2 	pr4|50,*		sc_process_command_line_$multics_command
001462  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 253
	call sc_ipc_mask_$remask (unmask_count);

001463  aa  6 00632 3521 00	epp2 	pr6|410		unmask_count
001464  aa  6 00752 2521 00	spri2	pr6|490
001465  aa  6 00750 6211 00	eax1 	pr6|488
001466  aa   004000 4310 07	fld  	2048,dl
001467  aa  6 00044 3701 20	epp4 	pr6|36,*
001470  la  4 00066 3521 20	epp2 	pr4|54,*		sc_ipc_mask_$remask
001471  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 254
	asr_reply_admin_command.code = 0;

001472  aa  6 00704 4501 20	stz  	pr6|452,*		asr_reply_admin_command.code
						STATEMENT 1 ON LINE 255
	asr_reply_admin_command.flags = ""b;

001473  aa   002554 2350 04	lda  	1388,ic		004247 = 377777777777
001474  aa  6 00704 3735 20	epp7 	pr6|452,*		asr_replyp
001475  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_refused
001476  aa   002550 2350 04	lda  	1384,ic		004246 = 577777777777
001477  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_started
001500  aa   002545 2350 04	lda  	1381,ic		004245 = 677777777777
001501  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_completed
001502  aa   002542 2350 04	lda  	1378,ic		004244 = 737777777777
001503  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_aborted
001504  aa   002537 2350 04	lda  	1375,ic		004243 = 757777777777
001505  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_had_errors
001506  aa   760000 2350 03	lda  	253952,du
001507  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.pad
						STATEMENT 1 ON LINE 256
	asr_reply_admin_command.command_completed = "1"b;

001510  aa   100000 2350 03	lda  	32768,du
001511  aa  7 00001 2551 00	orsa 	pr7|1		asr_reply_admin_command.command_completed
						STATEMENT 1 ON LINE 257
	asr_reply_admin_command.command_had_errors = evidence_of_error;

001512  aa  6 00201 2351 00	lda  	pr6|129		evidence_of_error
001513  aa   000004 7710 00	arl  	4
001514  aa  7 00001 6751 00	era  	pr7|1		asr_reply_admin_command.command_had_errors
001515  aa   020000 3750 03	ana  	8192,du
001516  aa  7 00001 6551 00	ersa 	pr7|1		asr_reply_admin_command.command_had_errors
						STATEMENT 1 ON LINE 258
	go to RESTORE_RETURN;

001517  aa   000034 7100 04	tra  	28,ic		001553
						STATEMENT 1 ON LINE 260
UNWIND_LABEL:
	call sc_ipc_mask_$remask (unmask_count);

001520  aa  6 00632 3521 00	epp2 	pr6|410		unmask_count
001521  aa  6 00752 2521 00	spri2	pr6|490
001522  aa  6 00750 6211 00	eax1 	pr6|488
001523  aa   004000 4310 07	fld  	2048,dl
001524  aa  6 00044 3701 20	epp4 	pr6|36,*
001525  la  4 00066 3521 20	epp2 	pr4|54,*		sc_ipc_mask_$remask
001526  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 262
UNWIND_NO_REMASK_LABEL:
	if code ^= 0
	then asr_reply_admin_command.code = code;

001527  aa  6 00101 2361 00	ldq  	pr6|65		code
001530  aa   000002 6000 04	tze  	2,ic		001532
001531  aa  6 00704 7561 20	stq  	pr6|452,*		asr_reply_admin_command.code
						STATEMENT 1 ON LINE 265
	asr_reply_admin_command.flags = ""b;

001532  aa   002515 2350 04	lda  	1357,ic		004247 = 377777777777
001533  aa  6 00704 3735 20	epp7 	pr6|452,*		asr_replyp
001534  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_refused
001535  aa   002511 2350 04	lda  	1353,ic		004246 = 577777777777
001536  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_started
001537  aa   002506 2350 04	lda  	1350,ic		004245 = 677777777777
001540  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_completed
001541  aa   002503 2350 04	lda  	1347,ic		004244 = 737777777777
001542  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_aborted
001543  aa   002500 2350 04	lda  	1344,ic		004243 = 757777777777
001544  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.command_had_errors
001545  aa   760000 2350 03	lda  	253952,du
001546  aa  7 00001 3551 00	ansa 	pr7|1		asr_reply_admin_command.pad
						STATEMENT 1 ON LINE 266
	asr_reply_admin_command.flags.command_completed = "1"b;

001547  aa   100000 2350 03	lda  	32768,du
001550  aa  7 00001 2551 00	orsa 	pr7|1		asr_reply_admin_command.command_completed
						STATEMENT 1 ON LINE 267
	asr_reply_admin_command.flags.command_aborted = "1"b;

001551  aa   040000 2350 03	lda  	16384,du
001552  aa  7 00001 2551 00	orsa 	pr7|1		asr_reply_admin_command.command_aborted
						STATEMENT 1 ON LINE 270
RESTORE_RETURN:
	ignore_io = "1"b;

001553  aa   400000 2350 03	lda  	131072,du
001554  aa  6 00202 7551 00	sta  	pr6|130		ignore_io
						STATEMENT 1 ON LINE 272
	revert any_other;

001555  aa  6 00654 4501 00	stz  	pr6|428
						STATEMENT 1 ON LINE 273
	call cu_$reset_cl_intermediary;

001556  aa  6 00056 6211 00	eax1 	pr6|46
001557  aa   000000 4310 07	fld  	0,dl
001560  aa  6 00044 3701 20	epp4 	pr6|36,*
001561  la  4 00026 3521 20	epp2 	pr4|22,*		cu_$reset_cl_intermediary
001562  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 274
	call sc_create_sci_$destroy (sci_ptr);

001563  aa  6 00204 3521 00	epp2 	pr6|132		sci_ptr
001564  aa  6 00752 2521 00	spri2	pr6|490
001565  aa  6 00750 6211 00	eax1 	pr6|488
001566  aa   004000 4310 07	fld  	2048,dl
001567  aa  6 00044 3701 20	epp4 	pr6|36,*
001570  la  4 00060 3521 20	epp2 	pr4|48,*		sc_create_sci_$destroy
001571  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 275
	if test_switches
	then do;

001572  aa  6 00600 2351 00	lda  	pr6|384		test_switches
001573  aa   000034 6000 04	tze  	28,ic		001627
						STATEMENT 1 ON LINE 277
		call com_err_ (code, "sc_admin_command_$test_signal_handling", "Returned via unwind.");

001574  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001575  aa   776526 00 0050	desc9a	-682,40		000322 = 163143137141
001576  aa  6 00760 00 0050	desc9a	pr6|496,40
001577  aa   776431 2370 04	ldaq 	-743,ic		000230 = 122145164165 162156145144
001600  aa  6 00750 7571 00	staq 	pr6|488
001601  aa   776431 2370 04	ldaq 	-743,ic		000232 = 040166151141 040165156167
001602  aa  6 00752 7571 00	staq 	pr6|490
001603  aa   776431 2350 04	lda  	-743,ic		000234 = 151156144056
001604  aa  6 00754 7551 00	sta  	pr6|492
001605  aa  6 00101 3521 00	epp2 	pr6|65		code
001606  aa  6 01010 2521 00	spri2	pr6|520
001607  aa  6 00760 3521 00	epp2 	pr6|496
001610  aa  6 01012 2521 00	spri2	pr6|522
001611  aa  6 00750 3521 00	epp2 	pr6|488
001612  aa  6 01014 2521 00	spri2	pr6|524
001613  aa   776311 3520 04	epp2 	-823,ic		000124 = 404000000043
001614  aa  6 01016 2521 00	spri2	pr6|526
001615  aa   776300 3520 04	epp2 	-832,ic		000115 = 524000000046
001616  aa  6 01020 2521 00	spri2	pr6|528
001617  aa   776275 3520 04	epp2 	-835,ic		000114 = 524000000024
001620  aa  6 01022 2521 00	spri2	pr6|530
001621  aa  6 01006 6211 00	eax1 	pr6|518
001622  aa   014000 4310 07	fld  	6144,dl
001623  aa  6 00044 3701 20	epp4 	pr6|36,*
001624  la  4 00014 3521 20	epp2 	pr4|12,*		com_err_
001625  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 278
		return;

001626  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 279
	     end;

						STATEMENT 1 ON LINE 281
	if ^asr_admin_command_info.send_completion_wakeup
	then asr_admin_command_info.header.reply_channel = 0;

001627  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
001630  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_wakeup
001631  aa   200000 3150 03	cana 	65536,du
001632  aa   000003 6010 04	tnz  	3,ic		001635
001633  aa   776313 2370 04	ldaq 	-821,ic		000146 = 000000000000 000000000000
001634  aa  7 00002 7571 00	staq 	pr7|2		asr_admin_command_info.reply_channel
						STATEMENT 1 ON LINE 284
	if code ^= 0
	then call convert_status_code_ (code, "", error_string);

001635  aa  6 00101 2361 00	ldq  	pr6|65		code
001636  aa   000017 6000 04	tze  	15,ic		001655
001637  aa   776303 2370 04	ldaq 	-829,ic		000142 = 040040040040 040040040040
001640  aa  6 01102 7571 00	staq 	pr6|578
001641  aa  6 00101 3521 00	epp2 	pr6|65		code
001642  aa  6 01010 2521 00	spri2	pr6|520
001643  aa  6 01102 3521 00	epp2 	pr6|578
001644  aa  6 01012 2521 00	spri2	pr6|522
001645  aa  6 00601 3521 00	epp2 	pr6|385		error_string
001646  aa  6 01014 2521 00	spri2	pr6|524
001647  aa  6 01006 6211 00	eax1 	pr6|518
001650  aa   014000 4310 07	fld  	6144,dl
001651  aa  6 00044 3701 20	epp4 	pr6|36,*
001652  la  4 00020 3521 20	epp2 	pr4|16,*		convert_status_code_
001653  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001654  aa   000004 7100 04	tra  	4,ic		001660
						STATEMENT 1 ON LINE 286
	else error_string = "";

001655  aa  040 100 100 400	mlr  	(),(pr),fill(040)
001656  aa   000000 00 0000	desc9a	0,0
001657  aa  6 00601 00 0144	desc9a	pr6|385,100	error_string
						STATEMENT 1 ON LINE 287
	call ioa_$rsnnl (
	     "Completed command^[ with errors^].^[ Finish condition signalled.^]^[ ^a^/^;^s^]^[ Command line aborted by error.^]",
	     completion_string, (0), asr_reply_admin_command.flags.command_had_errors, finish_signalled, code ^= 0,
	     error_string, asr_reply_admin_command.flags.command_aborted);

001660  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001661  aa   776605 00 0164	desc9a	-635,116		000465 = 103157155160
001662  aa  6 01104 00 0164	desc9a	pr6|580,116
001663  aa  6 00756 4501 00	stz  	pr6|494
001664  aa  6 00101 2361 00	ldq  	pr6|65		code
001665  aa  0 00515 7001 00	tsx0 	pr0|333		r_ne_as
001666  aa  6 00757 7551 00	sta  	pr6|495
001667  aa  6 01104 3521 00	epp2 	pr6|580
001670  aa  6 01144 2521 00	spri2	pr6|612
001671  aa  6 00106 3521 00	epp2 	pr6|70		completion_string
001672  aa  6 01146 2521 00	spri2	pr6|614
001673  aa  6 00756 3521 00	epp2 	pr6|494
001674  aa  6 01150 2521 00	spri2	pr6|616
001675  aa   000004 7270 07	lxl7 	4,dl
001676  aa  6 00704 3735 20	epp7 	pr6|452,*		asr_replyp
001677  aa  7 00001 3521 00	epp2 	pr7|1		asr_reply_admin_command.command_had_errors
001700  aa  2 00000 5035 17	abd  	pr2|0,7
001701  aa  6 01152 2521 00	spri2	pr6|618
001702  aa  6 00200 3521 00	epp2 	pr6|128		finish_signalled
001703  aa  6 01154 2521 00	spri2	pr6|620
001704  aa  6 00757 3521 00	epp2 	pr6|495
001705  aa  6 01156 2521 00	spri2	pr6|622
001706  aa  6 00601 3521 00	epp2 	pr6|385		error_string
001707  aa  6 01160 2521 00	spri2	pr6|624
001710  aa   000003 7260 07	lxl6 	3,dl
001711  aa  7 00001 3521 00	epp2 	pr7|1		asr_reply_admin_command.command_aborted
001712  aa  2 00000 5035 16	abd  	pr2|0,6
001713  aa  6 01162 2521 00	spri2	pr6|626
001714  aa   776177 3520 04	epp2 	-897,ic		000113 = 524000000162
001715  aa  6 01164 2521 00	spri2	pr6|628
001716  aa   776174 3520 04	epp2 	-900,ic		000112 = 526000000310
001717  aa  6 01166 2521 00	spri2	pr6|630
001720  aa   776171 3520 04	epp2 	-903,ic		000111 = 404000000005
001721  aa  6 01170 2521 00	spri2	pr6|632
001722  aa   776166 3520 04	epp2 	-906,ic		000110 = 516000000001
001723  aa  6 01172 2521 00	spri2	pr6|634
001724  aa  6 01202 2521 00	spri2	pr6|642
001725  aa   776162 3520 04	epp2 	-910,ic		000107 = 514000000001
001726  aa  6 01174 2521 00	spri2	pr6|636
001727  aa  6 01176 2521 00	spri2	pr6|638
001730  aa   776156 3520 04	epp2 	-914,ic		000106 = 524000000144
001731  aa  6 01200 2521 00	spri2	pr6|640
001732  aa  6 01142 6211 00	eax1 	pr6|610
001733  aa   040000 4310 07	fld  	16384,dl
001734  aa  6 00044 3701 20	epp4 	pr6|36,*
001735  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_$rsnnl
001736  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 292
	call iox_$control (sc_stat_$admin_log_iocb, "flush_pending_output", null (), (0));

001737  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001740  aa   776264 00 0024	desc9a	-844,20		000223 = 146154165163
001741  aa  6 00750 00 0024	desc9a	pr6|488,20
001742  aa   776202 3734 24	epp7 	-894,ic*
001743  aa  6 01102 6535 00	spri7	pr6|578
001744  aa  6 00757 4501 00	stz  	pr6|495
001745  aa  6 00044 3701 20	epp4 	pr6|36,*
001746  la  4 00114 3521 20	epp2 	pr4|76,*		sc_stat_$admin_log_iocb
001747  aa  6 00762 2521 00	spri2	pr6|498
001750  aa  6 00750 3521 00	epp2 	pr6|488
001751  aa  6 00764 2521 00	spri2	pr6|500
001752  aa  6 01102 3521 00	epp2 	pr6|578
001753  aa  6 00766 2521 00	spri2	pr6|502
001754  aa  6 00757 3521 00	epp2 	pr6|495
001755  aa  6 00770 2521 00	spri2	pr6|504
001756  aa   776155 3520 04	epp2 	-915,ic		000133 = 464000000000
001757  aa  6 00772 2521 00	spri2	pr6|506
001760  aa  6 00776 2521 00	spri2	pr6|510
001761  aa   776133 3520 04	epp2 	-933,ic		000114 = 524000000024
001762  aa  6 00774 2521 00	spri2	pr6|508
001763  aa   776141 3520 04	epp2 	-927,ic		000124 = 404000000043
001764  aa  6 01000 2521 00	spri2	pr6|512
001765  aa  6 00760 6211 00	eax1 	pr6|496
001766  aa   020000 4310 07	fld  	8192,dl
001767  la  4 00122 3521 20	epp2 	pr4|82,*		iox_$control
001770  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 293
	call ioa_$ioa_switch (sc_stat_$admin_log_iocb, "sc_admin_command_: ^a", completion_string);

001771  aa   776257 2370 04	ldaq 	-849,ic		000250 = 163143137141 144155151156
001772  aa  6 00750 7571 00	staq 	pr6|488
001773  aa   776257 2370 04	ldaq 	-849,ic		000252 = 137143157155 155141156144
001774  aa  6 00752 7571 00	staq 	pr6|490
001775  aa   776257 2370 04	ldaq 	-849,ic		000254 = 137072040136 141000000000
001776  aa  6 00754 7571 00	staq 	pr6|492
001777  aa  6 00044 3701 20	epp4 	pr6|36,*
002000  la  4 00114 3521 20	epp2 	pr4|76,*		sc_stat_$admin_log_iocb
002001  aa  6 01010 2521 00	spri2	pr6|520
002002  aa  6 00750 3521 00	epp2 	pr6|488
002003  aa  6 01012 2521 00	spri2	pr6|522
002004  aa  6 00106 3521 00	epp2 	pr6|70		completion_string
002005  aa  6 01014 2521 00	spri2	pr6|524
002006  aa   776125 3520 04	epp2 	-939,ic		000133 = 464000000000
002007  aa  6 01016 2521 00	spri2	pr6|526
002010  aa   776075 3520 04	epp2 	-963,ic		000105 = 524000000025
002011  aa  6 01020 2521 00	spri2	pr6|528
002012  aa   776100 3520 04	epp2 	-960,ic		000112 = 526000000310
002013  aa  6 01022 2521 00	spri2	pr6|530
002014  aa  6 01006 6211 00	eax1 	pr6|518
002015  aa   014000 4310 07	fld  	6144,dl
002016  la  4 00046 3521 20	epp2 	pr4|38,*		ioa_$ioa_switch
002017  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 295
	if asr_admin_command_info.send_completion_message
	then do;

002020  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
002021  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_message
002022  aa   100000 3150 03	cana 	32768,du
002023  aa   000122 6000 04	tze  	82,ic		002145
						STATEMENT 1 ON LINE 297
		call ioa_$rsnnl (
		     "Completed command ^a^[ with errors^].^[ Finish condition signalled.^]^[ ^a^/^;^s^]^[ Command line aborted by error.^]",
		     message_string, (0),
		     substr (asr_admin_command_info.command, min (length (asr_admin_command_info.command), 50)),
		     asr_reply_admin_command.flags.command_had_errors, finish_signalled, code ^= 0, error_string,
		     asr_reply_admin_command.flags.command_aborted);

002024  aa  7 00240 2361 00	ldq  	pr7|160		asr_admin_command_info.command_length
002025  aa   000062 1160 07	cmpq 	50,dl
002026  aa   000002 6040 04	tmi  	2,ic		002030
002027  aa   000062 2360 07	ldq  	50,dl
002030  aa  6 00756 7561 00	stq  	pr6|494
002031  aa   000001 1760 07	sbq  	1,dl
002032  aa  6 01141 7561 00	stq  	pr6|609
002033  aa  7 00240 2361 00	ldq  	pr7|160		asr_admin_command_info.command_length
002034  aa  6 01141 1761 00	sbq  	pr6|609
002035  aa  6 01141 7561 00	stq  	pr6|609
002036  aa   524000 2760 03	orq  	174080,du
002037  aa  6 00757 7561 00	stq  	pr6|495
002040  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002041  aa   776462 00 0170	desc9a	-718,120		000522 = 103157155160
002042  aa  6 01142 00 0170	desc9a	pr6|610,120
002043  aa  6 01204 4501 00	stz  	pr6|644
002044  aa  6 01141 2361 00	ldq  	pr6|609
002045  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
002046  aa  6 01216 2521 00	spri2	pr6|654
002047  aa  6 00756 2351 00	lda  	pr6|494
002050  aa  040 140 100 545	mlr  	(pr,rl,al),(pr,rl),fill(040)
002051  aa  7 00240 60 0006	desc9a	pr7|160(3),ql	asr_admin_command_info.command
002052  aa  2 00000 00 0006	desc9a	pr2|0,ql
002053  aa  6 00101 2361 00	ldq  	pr6|65		code
002054  aa  0 00515 7001 00	tsx0 	pr0|333		r_ne_as
002055  aa  6 00756 7551 00	sta  	pr6|494
002056  aa  6 01142 3521 00	epp2 	pr6|610
002057  aa  6 01210 2521 00	spri2	pr6|648
002060  aa  6 00206 3521 00	epp2 	pr6|134		message_string
002061  aa  6 01212 2521 00	spri2	pr6|650
002062  aa  6 01204 3521 00	epp2 	pr6|644
002063  aa  6 01214 2521 00	spri2	pr6|652
002064  aa   000004 7270 07	lxl7 	4,dl
002065  aa  6 00704 3715 20	epp5 	pr6|452,*		asr_replyp
002066  aa  5 00001 3521 00	epp2 	pr5|1		asr_reply_admin_command.command_had_errors
002067  aa  2 00000 5035 17	abd  	pr2|0,7
002070  aa  6 01220 2521 00	spri2	pr6|656
002071  aa  6 00200 3521 00	epp2 	pr6|128		finish_signalled
002072  aa  6 01222 2521 00	spri2	pr6|658
002073  aa  6 00756 3521 00	epp2 	pr6|494
002074  aa  6 01224 2521 00	spri2	pr6|660
002075  aa  6 00601 3521 00	epp2 	pr6|385		error_string
002076  aa  6 01226 2521 00	spri2	pr6|662
002077  aa   000003 7260 07	lxl6 	3,dl
002100  aa  5 00001 3521 00	epp2 	pr5|1		asr_reply_admin_command.command_aborted
002101  aa  2 00000 5035 16	abd  	pr2|0,6
002102  aa  6 01230 2521 00	spri2	pr6|664
002103  aa   776001 3520 04	epp2 	-1023,ic		000104 = 524000000165
002104  aa  6 01232 2521 00	spri2	pr6|666
002105  aa   775776 3520 04	epp2 	-1026,ic		000103 = 526000001750
002106  aa  6 01234 2521 00	spri2	pr6|668
002107  aa   776002 3520 04	epp2 	-1022,ic		000111 = 404000000005
002110  aa  6 01236 2521 00	spri2	pr6|670
002111  aa  6 00757 3521 00	epp2 	pr6|495
002112  aa  6 01240 2521 00	spri2	pr6|672
002113  aa   775775 3520 04	epp2 	-1027,ic		000110 = 516000000001
002114  aa  6 01242 2521 00	spri2	pr6|674
002115  aa  6 01252 2521 00	spri2	pr6|682
002116  aa   775771 3520 04	epp2 	-1031,ic		000107 = 514000000001
002117  aa  6 01244 2521 00	spri2	pr6|676
002120  aa  6 01246 2521 00	spri2	pr6|678
002121  aa   775765 3520 04	epp2 	-1035,ic		000106 = 524000000144
002122  aa  6 01250 2521 00	spri2	pr6|680
002123  aa  6 01206 6211 00	eax1 	pr6|646
002124  aa   044000 4310 07	fld  	18432,dl
002125  aa  6 00044 3701 20	epp4 	pr6|36,*
002126  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_$rsnnl
002127  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 304
		call SEND_MESSAGE (asr_admin_command_info.mail_destination, completion_string);

002130  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
002131  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
002132  aa  7 00156 3521 00	epp2 	pr7|110		asr_admin_command_info.mail_destination
002133  aa  6 00762 2521 00	spri2	pr6|498
002134  aa  6 00106 3521 00	epp2 	pr6|70		completion_string
002135  aa  6 00764 2521 00	spri2	pr6|500
002136  aa   775754 3520 04	epp2 	-1044,ic		000112 = 526000000310
002137  aa  6 00766 2521 00	spri2	pr6|502
002140  aa  6 00770 2521 00	spri2	pr6|504
002141  aa  6 00760 3521 00	epp2 	pr6|496
002142  aa   010000 4310 07	fld  	4096,dl
002143  aa  2 00000 7571 00	staq 	pr2|0
002144  aa   001143 6700 04	tsp4 	611,ic		003307
						STATEMENT 1 ON LINE 305
	     end;

						STATEMENT 1 ON LINE 306
	if asr_admin_command_info.send_completion_mail
	then call SEND_COMPLETION_MAIL (completion_string);

002145  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
002146  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_mail
002147  aa   040000 3150 03	cana 	16384,du
002150  aa   000011 6000 04	tze  	9,ic		002161
002151  aa  6 00106 3521 00	epp2 	pr6|70		completion_string
002152  aa  6 01010 2521 00	spri2	pr6|520
002153  aa   775737 3520 04	epp2 	-1057,ic		000112 = 526000000310
002154  aa  6 01014 2521 00	spri2	pr6|524
002155  aa  6 01006 6211 00	eax1 	pr6|518
002156  aa   004000 4310 07	fld  	2048,dl
002157  aa   001427 3520 04	epp2 	791,ic		003606 = 000240627000
002160  aa  0 00624 7001 00	tsx0 	pr0|404		call_int_this_desc
						STATEMENT 1 ON LINE 311
	return;

002161  aa  0 00631 7101 00	tra  	pr0|409		return_mac
ENTRY TO test_signal_handling                               STATEMENT 1 ON LINE 468
test_signal_handling:
     entry;

002162  da     000567200000
002163  aa   001500 6270 00	eax7 	832
002164  aa  7 00034 3521 20	epp2 	pr7|28,*
002165  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
002166  aa     000000000000
002167  aa     000000000000
						STATEMENT 1 ON LINE 476
	test_switches = "1"b;

002170  aa   400000 2350 03	lda  	131072,du
002171  aa  6 00600 7551 00	sta  	pr6|384		test_switches
						STATEMENT 1 ON LINE 477
	ignore_io = "0"b;

002172  aa  6 00202 4501 00	stz  	pr6|130		ignore_io
						STATEMENT 1 ON LINE 478
	on signal_io_ call IO_SIGNAL_HANDLER;

002173  aa   000012 7260 07	lxl6 	10,dl
002174  aa   776010 3520 04	epp2 	-1016,ic		000204 = 163151147156
002175  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
002176  aa   000004 7100 04	tra  	4,ic		002202
002177  aa     000664000000
002200  aa   000015 7100 04	tra  	13,ic		002215
BEGIN CONDITION signal_io_.5
ENTRY TO signal_io_.5                                       STATEMENT 1 ON LINE 478
	on signal_io_ call IO_SIGNAL_HANDLER;

002201  da     000576200000
002202  aa   000100 6270 00	eax7 	64
002203  aa  7 00034 3521 20	epp2 	pr7|28,*
002204  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
002205  aa     000000000000
002206  aa     000000000000
002207  aa   000001 7270 07	lxl7 	1,dl
002210  aa  6 00056 6211 00	eax1 	pr6|46
002211  aa   000000 4310 07	fld  	0,dl
002212  aa   000167 3520 04	epp2 	119,ic		002401 = 000320627000
002213  aa  0 00627 7001 00	tsx0 	pr0|407		call_int_other
002214  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION signal_io_.5
						STATEMENT 1 ON LINE 479
	call iox_$attach_name ("test_sc_admin_command", test_iocb, "signal_io_", null (), (0));

002215  aa   776025 2370 04	ldaq 	-1003,ic		000242 = 164145163164 137163143137
002216  aa  6 00750 7571 00	staq 	pr6|488
002217  aa   776025 2370 04	ldaq 	-1003,ic		000244 = 141144155151 156137143157
002220  aa  6 00752 7571 00	staq 	pr6|490
002221  aa   776025 2370 04	ldaq 	-1003,ic		000246 = 155155141156 144000000000
002222  aa  6 00754 7571 00	staq 	pr6|492
002223  aa   775761 2370 04	ldaq 	-1039,ic		000204 = 163151147156 141154137151
002224  aa  6 00760 7571 00	staq 	pr6|496
002225  aa   157137 2350 03	lda  	56927,du
002226  aa  6 00762 7551 00	sta  	pr6|498
002227  aa   775715 3734 24	epp7 	-1075,ic*
002230  aa  6 01102 6535 00	spri7	pr6|578
002231  aa  6 00757 4501 00	stz  	pr6|495
002232  aa  6 00750 3521 00	epp2 	pr6|488
002233  aa  6 01010 2521 00	spri2	pr6|520
002234  aa  6 00672 3521 00	epp2 	pr6|442		test_iocb
002235  aa  6 01012 2521 00	spri2	pr6|522
002236  aa  6 00760 3521 00	epp2 	pr6|496
002237  aa  6 01014 2521 00	spri2	pr6|524
002240  aa  6 01102 3521 00	epp2 	pr6|578
002241  aa  6 01016 2521 00	spri2	pr6|526
002242  aa  6 00757 3521 00	epp2 	pr6|495
002243  aa  6 01020 2521 00	spri2	pr6|528
002244  aa   775641 3520 04	epp2 	-1119,ic		000105 = 524000000025
002245  aa  6 01022 2521 00	spri2	pr6|530
002246  aa   775665 3520 04	epp2 	-1099,ic		000133 = 464000000000
002247  aa  6 01024 2521 00	spri2	pr6|532
002250  aa  6 01030 2521 00	spri2	pr6|536
002251  aa   775630 3520 04	epp2 	-1128,ic		000101 = 524000000012
002252  aa  6 01026 2521 00	spri2	pr6|534
002253  aa   775651 3520 04	epp2 	-1111,ic		000124 = 404000000043
002254  aa  6 01032 2521 00	spri2	pr6|538
002255  aa  6 01006 6211 00	eax1 	pr6|518
002256  aa   024000 4310 07	fld  	10240,dl
002257  aa  6 00044 3701 20	epp4 	pr6|36,*
002260  la  4 00120 3521 20	epp2 	pr4|80,*		iox_$attach_name
002261  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 480
	call iox_$open (test_iocb, Stream_input_output, "0"b, (0));

002262  aa   000000 2350 07	lda  	0,dl
002263  aa  6 00757 7551 00	sta  	pr6|495
002264  aa  6 00756 4501 00	stz  	pr6|494
002265  aa  6 00672 3521 00	epp2 	pr6|442		test_iocb
002266  aa  6 01010 2521 00	spri2	pr6|520
002267  aa   775601 3520 04	epp2 	-1151,ic		000070 = 000000000003
002270  aa  6 01012 2521 00	spri2	pr6|522
002271  aa  6 00757 3521 00	epp2 	pr6|495
002272  aa  6 01014 2521 00	spri2	pr6|524
002273  aa  6 00756 3521 00	epp2 	pr6|494
002274  aa  6 01016 2521 00	spri2	pr6|526
002275  aa  6 01006 6211 00	eax1 	pr6|518
002276  aa   020000 4310 07	fld  	8192,dl
002277  aa  6 00044 3701 20	epp4 	pr6|36,*
002300  la  4 00124 3521 20	epp2 	pr4|84,*		iox_$open
002301  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 481
	call cu_$get_cl_intermediary (default_cl_intermediary);

002302  aa  6 00674 3521 00	epp2 	pr6|444		default_cl_intermediary
002303  aa  6 00752 2521 00	spri2	pr6|490
002304  aa  6 00750 6211 00	eax1 	pr6|488
002305  aa   004000 4310 07	fld  	2048,dl
002306  aa  6 00044 3701 20	epp4 	pr6|36,*
002307  la  4 00022 3521 20	epp2 	pr4|18,*		cu_$get_cl_intermediary
002310  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 482
	call cu_$set_cl_intermediary (NEW_COMMAND_LEVEL);

002311  aa   000566 3520 04	epp2 	374,ic		003077 = 000120627000
002312  aa  6 00750 2521 00	spri2	pr6|488		cp.226
002313  aa  6 00752 6521 00	spri6	pr6|490		cp.226
002314  aa  6 00750 3521 00	epp2 	pr6|488		cp.226
002315  aa  6 00762 2521 00	spri2	pr6|498
002316  aa  6 00760 6211 00	eax1 	pr6|496
002317  aa   004000 4310 07	fld  	2048,dl
002320  aa  6 00044 3701 20	epp4 	pr6|36,*
002321  la  4 00024 3521 20	epp2 	pr4|20,*		cu_$set_cl_intermediary
002322  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 483
	cli_flags = "0"b;

002323  aa   001724 2350 04	lda  	980,ic		004247 = 377777777777
002324  aa  6 00700 3551 00	ansa 	pr6|448		cli_flags.reset
002325  aa   400000 2350 03	lda  	131072,du
002326  aa  6 00700 3551 00	ansa 	pr6|448		cli_flags.pad
						STATEMENT 1 ON LINE 484
	on cleanup call cu_$set_cl_intermediary (default_cl_intermediary);

002327  aa   000007 7260 07	lxl6 	7,dl
002330  aa   775622 3520 04	epp2 	-1134,ic		000152 = 143154145141
002331  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
002332  aa   000004 7100 04	tra  	4,ic		002336
002333  aa     000634000000
002334  aa   000017 7100 04	tra  	15,ic		002353
BEGIN CONDITION cleanup.6
ENTRY TO cleanup.6                                          STATEMENT 1 ON LINE 484
	on cleanup call cu_$set_cl_intermediary (default_cl_intermediary);

002335  da     000604200000
002336  aa   000120 6270 00	eax7 	80
002337  aa  7 00034 3521 20	epp2 	pr7|28,*
002340  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
002341  aa     000000000000
002342  aa     000000000000
002343  aa  6 00040 3735 20	epp7 	pr6|32,*
002344  aa  7 00674 3521 00	epp2 	pr7|444		default_cl_intermediary
002345  aa  6 00102 2521 00	spri2	pr6|66
002346  aa  6 00100 6211 00	eax1 	pr6|64
002347  aa   004000 4310 07	fld  	2048,dl
002350  la  4 00024 3521 20	epp2 	pr4|20,*		cu_$set_cl_intermediary
002351  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
002352  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION cleanup.6
						STATEMENT 1 ON LINE 485
	call default_cl_intermediary (cli_flags);

002353  aa  6 00700 3521 00	epp2 	pr6|448		cli_flags
002354  aa  6 00752 2521 00	spri2	pr6|490
002355  aa  6 00750 6211 00	eax1 	pr6|488
002356  aa   004000 4310 07	fld  	2048,dl
002357  aa  6 00674 3521 00	epp2 	pr6|444		default_cl_intermediary
002360  aa  0 00617 7001 00	tsx0 	pr0|399		call_ent_var
						STATEMENT 1 ON LINE 486
	return;

002361  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 501
ERROR_NO_EXECUTION:
	call NOTIFY_REFUSAL;

002362  aa   000555 6700 04	tsp4 	365,ic		003137
						STATEMENT 1 ON LINE 503
	return;

002363  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 700
     end sc_admin_command_;

BEGIN PROCEDURE CL_ENTRY
ENTRY TO CL_ENTRY                                           STATEMENT 1 ON LINE 313
CL_ENTRY:
     procedure;

002364  da     000612200000
002365  aa   000100 6270 00	eax7 	64
002366  aa  7 00034 3521 20	epp2 	pr7|28,*
002367  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
002370  aa     000000000000
002371  aa     000000000000
						STATEMENT 1 ON LINE 315
	code = error_table_$unexpected_condition;

002372  la  4 00110 2361 20	ldq  	pr4|72,*		error_table_$unexpected_condition
002373  aa  6 00040 3735 20	epp7 	pr6|32,*
002374  aa  7 00101 7561 00	stq  	pr7|65		code
						STATEMENT 1 ON LINE 316
	go to UNWIND_LABEL;

002375  aa   777123 3520 04	epp2 	-429,ic		001520 = 600632352100
002376  aa   000001 7270 07	lxl7 	1,dl
002377  aa  0 00657 7101 00	tra  	pr0|431		tra_ext_1
						STATEMENT 1 ON LINE 317
     end CL_ENTRY;

  END PROCEDURE CL_ENTRY
BEGIN PROCEDURE IO_SIGNAL_HANDLER
ENTRY TO IO_SIGNAL_HANDLER                                  STATEMENT 1 ON LINE 319
IO_SIGNAL_HANDLER:
     procedure;

002400  da     000622200000
002401  aa   000320 6270 00	eax7 	208
002402  aa  7 00034 3521 20	epp2 	pr7|28,*
002403  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
002404  aa     000000000000
002405  aa     000000000000
						STATEMENT 1 ON LINE 327
	if sc_stat_$admin_sci_ptr ^= sci_ptr
	then do;

002406  la  4 00116 2371 20	ldaq 	pr4|78,*		sc_stat_$admin_sci_ptr
002407  aa  6 00040 3735 20	epp7 	pr6|32,*
002410  aa  7 00204 6771 00	eraq 	pr7|132		sci_ptr
002411  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
002412  aa   000011 6000 04	tze  	9,ic		002423
						STATEMENT 1 ON LINE 329
		call continue_to_signal_ ((0));

002413  aa  6 00210 4501 00	stz  	pr6|136
002414  aa  6 00210 3521 00	epp2 	pr6|136
002415  aa  6 00214 2521 00	spri2	pr6|140
002416  aa  6 00212 6211 00	eax1 	pr6|138
002417  aa   004000 4310 07	fld  	2048,dl
002420  la  4 00016 3521 20	epp2 	pr4|14,*		continue_to_signal_
002421  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 330
		return;

002422  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 331
	     end;

						STATEMENT 1 ON LINE 333
	if ignore_io
	then return;

002423  aa  7 00202 2351 00	lda  	pr7|130		ignore_io
002424  aa  0 00631 6011 00	tnz  	pr0|409		return_mac
						STATEMENT 1 ON LINE 336
	CI.version = condition_info_version_1;

002425  aa   000001 2360 07	ldq  	1,dl
002426  aa  6 00102 7561 00	stq  	pr6|66		CI.version
						STATEMENT 1 ON LINE 337
	call find_condition_info_ (null (), addr (CI), (0));

002427  aa   775515 3714 24	epp5 	-1203,ic*
002430  aa  6 00216 6515 00	spri5	pr6|142
002431  aa  6 00100 3535 00	epp3 	pr6|64		CI
002432  aa  6 00220 2535 00	spri3	pr6|144
002433  aa  6 00210 4501 00	stz  	pr6|136
002434  aa  6 00216 3521 00	epp2 	pr6|142
002435  aa  6 00224 2521 00	spri2	pr6|148
002436  aa  6 00220 3521 00	epp2 	pr6|144
002437  aa  6 00226 2521 00	spri2	pr6|150
002440  aa  6 00210 3521 00	epp2 	pr6|136
002441  aa  6 00230 2521 00	spri2	pr6|152
002442  aa  6 00222 6211 00	eax1 	pr6|146
002443  aa   014000 4310 07	fld  	6144,dl
002444  la  4 00032 3521 20	epp2 	pr4|26,*		find_condition_info_
002445  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 338
	signal_io_info_ptr = CI.info_ptr;

002446  aa  6 00114 3735 20	epp7 	pr6|76,*		CI.info_ptr
002447  aa  6 00040 3715 20	epp5 	pr6|32,*
002450  aa  5 00712 6535 00	spri7	pr5|458		signal_io_info_ptr
						STATEMENT 1 ON LINE 339
	signal_io_info.returned_error_code = 0;

002451  aa  5 00712 3535 20	epp3 	pr5|458,*		signal_io_info_ptr
002452  aa  3 00140 4501 00	stz  	pr3|96		signal_io_info.returned_error_code
						STATEMENT 1 ON LINE 341
	if signal_io_info.operation = SGI_OP_GET_LINE
	then call GET_LINE;

002453  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
002454  aa  3 00120 00 0040	desc9a	pr3|80,32		signal_io_info.operation
002455  aa   775375 00 0040	desc9a	-1283,32		000050 = 147145164137
002456  aa   000003 6010 04	tnz  	3,ic		002461
002457  aa   000040 6700 04	tsp4 	32,ic		002517
002460  aa   000036 7100 04	tra  	30,ic		002516
						STATEMENT 1 ON LINE 343
	else if signal_io_info.operation = SGI_OP_GET_CHARS
	then call GET_CHARS;

002461  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
002462  aa  3 00120 00 0040	desc9a	pr3|80,32		signal_io_info.operation
002463  aa   775357 00 0040	desc9a	-1297,32		000040 = 147145164137
002464  aa   000003 6010 04	tnz  	3,ic		002467
002465  aa   000035 6700 04	tsp4 	29,ic		002522
002466  aa   000030 7100 04	tra  	24,ic		002516
						STATEMENT 1 ON LINE 345
	else if signal_io_info.operation = SGI_OP_PUT_CHARS
	then call PUT_CHARS;

002467  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
002470  aa  3 00120 00 0040	desc9a	pr3|80,32		signal_io_info.operation
002471  aa   775341 00 0040	desc9a	-1311,32		000030 = 160165164137
002472  aa   000003 6010 04	tnz  	3,ic		002475
002473  aa   000056 6700 04	tsp4 	46,ic		002551
002474  aa   000022 7100 04	tra  	18,ic		002516
						STATEMENT 1 ON LINE 347
	else if signal_io_info.operation = SGI_OP_POSITION
	then call POSITION;

002475  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
002476  aa  3 00120 00 0040	desc9a	pr3|80,32		signal_io_info.operation
002477  aa   775313 00 0040	desc9a	-1333,32		000010 = 160157163151
002500  aa   000003 6010 04	tnz  	3,ic		002503
002501  aa   000024 6700 04	tsp4 	20,ic		002525
002502  aa   000014 7100 04	tra  	12,ic		002516
						STATEMENT 1 ON LINE 349
	else if signal_io_info.operation = SGI_OP_CONTROL
	then call CONTROL;

002503  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
002504  aa  3 00120 00 0040	desc9a	pr3|80,32		signal_io_info.operation
002505  aa   775275 00 0040	desc9a	-1347,32		000000 = 143157156164
002506  aa   000003 6010 04	tnz  	3,ic		002511
002507  aa   000236 6700 04	tsp4 	158,ic		002745
002510  aa   000006 7100 04	tra  	6,ic		002516
						STATEMENT 1 ON LINE 351
	else if signal_io_info.operation = SGI_OP_MODES
	then call MODES;

002511  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
002512  aa  3 00120 00 0040	desc9a	pr3|80,32		signal_io_info.operation
002513  aa   775307 00 0040	desc9a	-1337,32		000020 = 155157144145
002514  aa   000002 6010 04	tnz  	2,ic		002516
002515  aa   000023 6700 04	tsp4 	19,ic		002540
						STATEMENT 1 ON LINE 354
	return;

002516  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 449
     end IO_SIGNAL_HANDLER;

BEGIN PROCEDURE GET_LINE
ENTRY TO GET_LINE                                           STATEMENT 1 ON LINE 358
GET_LINE:
     procedure;

002517  aa  6 00132 6501 00	spri4	pr6|90
						STATEMENT 1 ON LINE 361
	call INPUT;

002520  aa   000010 6700 04	tsp4 	8,ic		002530
						STATEMENT 1 ON LINE 362
	return;

002521  aa  6 00132 6101 00	rtcd 	pr6|90
						STATEMENT 1 ON LINE 363
     end GET_LINE;

  END PROCEDURE GET_LINE
BEGIN PROCEDURE GET_CHARS
ENTRY TO GET_CHARS                                          STATEMENT 1 ON LINE 365
GET_CHARS:
     procedure;

002522  aa  6 00140 6501 00	spri4	pr6|96
						STATEMENT 1 ON LINE 367
	call INPUT;

002523  aa   000005 6700 04	tsp4 	5,ic		002530
						STATEMENT 1 ON LINE 368
	return;

002524  aa  6 00140 6101 00	rtcd 	pr6|96
						STATEMENT 1 ON LINE 369
     end GET_CHARS;

  END PROCEDURE GET_CHARS
BEGIN PROCEDURE POSITION
ENTRY TO POSITION                                           STATEMENT 1 ON LINE 371
POSITION:
     procedure;

002525  aa  6 00146 6501 00	spri4	pr6|102
						STATEMENT 1 ON LINE 373
	call INPUT;

002526  aa   000002 6700 04	tsp4 	2,ic		002530
						STATEMENT 1 ON LINE 374
	return;

002527  aa  6 00146 6101 00	rtcd 	pr6|102
						STATEMENT 1 ON LINE 375
     end POSITION;

  END PROCEDURE POSITION
BEGIN PROCEDURE INPUT
ENTRY TO INPUT                                              STATEMENT 1 ON LINE 377
INPUT:
     procedure;

002530  aa  6 00154 6501 00	spri4	pr6|108
						STATEMENT 1 ON LINE 380
	code = error_table_$as_sac_command_read;

002531  aa  6 00044 3701 20	epp4 	pr6|36,*
002532  la  4 00102 2361 20	ldq  	pr4|66,*		error_table_$as_sac_command_read
002533  aa  6 00040 3735 20	epp7 	pr6|32,*
002534  aa  7 00101 7561 00	stq  	pr7|65		code
						STATEMENT 1 ON LINE 381
	go to UNWIND_LABEL;

002535  aa   776763 3520 04	epp2 	-525,ic		001520 = 600632352100
002536  aa   000001 7270 07	lxl7 	1,dl
002537  aa  0 00657 7101 00	tra  	pr0|431		tra_ext_1
						STATEMENT 1 ON LINE 382
     end INPUT;

  END PROCEDURE INPUT
BEGIN PROCEDURE MODES
ENTRY TO MODES                                              STATEMENT 1 ON LINE 384
MODES:
     procedure;

002540  aa  6 00162 6501 00	spri4	pr6|114
						STATEMENT 1 ON LINE 387
	signal_io_old_modes = "";

002541  aa  6 00040 3735 20	epp7 	pr6|32,*
002542  aa  7 00712 3715 20	epp5 	pr7|458,*		signal_io_info_ptr
002543  aa  5 00142 3535 20	epp3 	pr5|98,*		signal_io_info.pointer
002544  aa  5 00144 2351 00	lda  	pr5|100		signal_io_info.length
002545  aa  040 140 100 400	mlr  	(),(pr,rl),fill(040)
002546  aa   000000 00 0000	desc9a	0,0
002547  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_old_modes
						STATEMENT 1 ON LINE 388
	return;

002550  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 389
     end MODES;

  END PROCEDURE MODES
BEGIN PROCEDURE PUT_CHARS
ENTRY TO PUT_CHARS                                          STATEMENT 1 ON LINE 391
PUT_CHARS:
     procedure;

002551  aa  6 00170 6501 00	spri4	pr6|120
						STATEMENT 1 ON LINE 398
	if signal_io_info.iocb_ptr = iox_$error_output
	then evidence_of_error = "1"b;

002552  aa  6 00040 3735 20	epp7 	pr6|32,*
002553  aa  7 00712 3715 20	epp5 	pr7|458,*		signal_io_info_ptr
002554  aa  5 00106 2371 00	ldaq 	pr5|70		signal_io_info.iocb_ptr
002555  aa  6 00044 3701 20	epp4 	pr6|36,*
002556  la  4 00126 6771 20	eraq 	pr4|86,*		iox_$error_output
002557  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
002560  aa   000003 6010 04	tnz  	3,ic		002563
002561  aa   400000 2350 03	lda  	131072,du
002562  aa  7 00201 7551 00	sta  	pr7|129		evidence_of_error
						STATEMENT 1 ON LINE 400
	if test_switches
	then do;

002563  aa  7 00600 2351 00	lda  	pr7|384		test_switches
002564  aa   000030 6000 04	tze  	24,ic		002614
						STATEMENT 1 ON LINE 402
		call ioa_ ("sc_admin_command_$test_signal_handling: ^a: ^a", signal_io_info.iocb_name,
		     signal_io_io_buffer);

002565  aa  5 00136 2361 00	ldq  	pr5|94		signal_io_info.data_length
002566  aa   526000 2760 03	orq  	175104,du
002567  aa  6 00232 7561 00	stq  	pr6|154
002570  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002571  aa   775557 00 0060	desc9a	-1169,48		000347 = 163143137141
002572  aa  6 00234 00 0060	desc9a	pr6|156,48
002573  aa  6 00234 3521 00	epp2 	pr6|156
002574  aa  6 00252 2521 00	spri2	pr6|170
002575  aa  5 00110 3521 00	epp2 	pr5|72		signal_io_info.iocb_name
002576  aa  6 00254 2521 00	spri2	pr6|172
002577  aa  5 00134 3521 20	epp2 	pr5|92,*		signal_io_io_buffer
002600  aa  6 00256 2521 00	spri2	pr6|174
002601  aa   775276 3520 04	epp2 	-1346,ic		000077 = 524000000056
002602  aa  6 00260 2521 00	spri2	pr6|176
002603  aa   775326 3520 04	epp2 	-1322,ic		000131 = 526000000040
002604  aa  6 00262 2521 00	spri2	pr6|178
002605  aa  6 00232 3521 00	epp2 	pr6|154
002606  aa  6 00264 2521 00	spri2	pr6|180
002607  aa  6 00250 6211 00	eax1 	pr6|168
002610  aa   014000 4310 07	fld  	6144,dl
002611  la  4 00042 3521 20	epp2 	pr4|34,*		ioa_
002612  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 404
		return;

002613  aa  6 00170 6101 00	rtcd 	pr6|120
						STATEMENT 1 ON LINE 405
	     end;

						STATEMENT 1 ON LINE 406
	if prev_iocb_name ^= signal_io_info.iocb_name
	then call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^/^a:^/^a", signal_io_info.iocb_name,
		signal_io_io_buffer);

002614  aa  040 100 106 500	cmpc 	(pr),(pr),fill(040)
002615  aa  7 00170 00 0040	desc9a	pr7|120,32	prev_iocb_name
002616  aa  5 00110 00 0040	desc9a	pr5|72,32		signal_io_info.iocb_name
002617  aa   000036 6000 04	tze  	30,ic		002655
002620  aa  5 00136 2361 00	ldq  	pr5|94		signal_io_info.data_length
002621  aa   526000 2760 03	orq  	175104,du
002622  aa  6 00232 7561 00	stq  	pr6|154
002623  aa   775350 2350 04	lda  	-1304,ic		000173 = 136057136141
002624  aa   775350 2360 04	ldq  	-1304,ic		000174 = 072136057136
002625  aa  6 00234 7571 00	staq 	pr6|156
002626  aa   141000 2350 03	lda  	49664,du
002627  aa  6 00236 7551 00	sta  	pr6|158
002630  la  4 00114 3521 20	epp2 	pr4|76,*		sc_stat_$admin_log_iocb
002631  aa  6 00270 2521 00	spri2	pr6|184
002632  aa  6 00234 3521 00	epp2 	pr6|156
002633  aa  6 00272 2521 00	spri2	pr6|186
002634  aa  5 00110 3521 00	epp2 	pr5|72		signal_io_info.iocb_name
002635  aa  6 00274 2521 00	spri2	pr6|188
002636  aa  5 00134 3521 20	epp2 	pr5|92,*		signal_io_io_buffer
002637  aa  6 00276 2521 00	spri2	pr6|190
002640  aa   775273 3520 04	epp2 	-1349,ic		000133 = 464000000000
002641  aa  6 00300 2521 00	spri2	pr6|192
002642  aa   775234 3520 04	epp2 	-1380,ic		000076 = 524000000011
002643  aa  6 00302 2521 00	spri2	pr6|194
002644  aa   775265 3520 04	epp2 	-1355,ic		000131 = 526000000040
002645  aa  6 00304 2521 00	spri2	pr6|196
002646  aa  6 00232 3521 00	epp2 	pr6|154
002647  aa  6 00306 2521 00	spri2	pr6|198
002650  aa  6 00266 6211 00	eax1 	pr6|182
002651  aa   020000 4310 07	fld  	8192,dl
002652  la  4 00044 3521 20	epp2 	pr4|36,*		ioa_$ioa_switch_nnl
002653  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
002654  aa   000026 7100 04	tra  	22,ic		002702
						STATEMENT 1 ON LINE 409
	else call ioa_$ioa_switch_nnl (sc_stat_$admin_log_iocb, "^a", signal_io_io_buffer);

002655  aa  5 00136 2361 00	ldq  	pr5|94		signal_io_info.data_length
002656  aa   526000 2760 03	orq  	175104,du
002657  aa  6 00232 7561 00	stq  	pr6|154
002660  aa   136141 2350 03	lda  	48225,du
002661  aa  6 00233 7551 00	sta  	pr6|155
002662  la  4 00114 3521 20	epp2 	pr4|76,*		sc_stat_$admin_log_iocb
002663  aa  6 00252 2521 00	spri2	pr6|170
002664  aa  6 00233 3521 00	epp2 	pr6|155
002665  aa  6 00254 2521 00	spri2	pr6|172
002666  aa  5 00134 3521 20	epp2 	pr5|92,*		signal_io_io_buffer
002667  aa  6 00256 2521 00	spri2	pr6|174
002670  aa   775243 3520 04	epp2 	-1373,ic		000133 = 464000000000
002671  aa  6 00260 2521 00	spri2	pr6|176
002672  aa   775203 3520 04	epp2 	-1405,ic		000075 = 524000000002
002673  aa  6 00262 2521 00	spri2	pr6|178
002674  aa  6 00232 3521 00	epp2 	pr6|154
002675  aa  6 00264 2521 00	spri2	pr6|180
002676  aa  6 00250 6211 00	eax1 	pr6|168
002677  aa   014000 4310 07	fld  	6144,dl
002700  la  4 00044 3521 20	epp2 	pr4|36,*		ioa_$ioa_switch_nnl
002701  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 410
	prev_iocb_name = signal_io_info.iocb_name;

002702  aa  6 00040 3735 20	epp7 	pr6|32,*
002703  aa  7 00712 3715 20	epp5 	pr7|458,*		signal_io_info_ptr
002704  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
002705  aa  5 00110 00 0040	desc9a	pr5|72,32		signal_io_info.iocb_name
002706  aa  7 00170 00 0040	desc9a	pr7|120,32	prev_iocb_name
						STATEMENT 1 ON LINE 411
	if capture_output_ptr = null () /* not capturing */ | capture_overran
						/* more than we can mail */
	then return;

002707  aa  7 00102 2371 00	ldaq 	pr7|66		capture_output_ptr
002710  aa   775234 6770 04	eraq 	-1380,ic		000144 = 077777000043 000001000000
002711  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
002712  aa   000004 6000 04	tze  	4,ic		002716
002713  aa  7 00105 2351 00	lda  	pr7|69		capture_overran
002714  aa   400000 3150 03	cana 	131072,du
002715  aa   000002 6000 04	tze  	2,ic		002717
002716  aa  6 00170 6101 00	rtcd 	pr6|120
						STATEMENT 1 ON LINE 415
	window_ptr = addcharno (capture_output_ptr, capture_output_length);

002717  aa  7 00102 3521 20	epp2 	pr7|66,*		capture_output_ptr
002720  aa  7 00104 2361 00	ldq  	pr7|68		capture_output_length
002721  aa  2 00000 5005 06	a9bd 	pr2|0,ql
002722  aa  6 00176 2521 00	spri2	pr6|126		window_ptr
						STATEMENT 1 ON LINE 416
	window_length = length (signal_io_io_buffer);

002723  aa  5 00136 2361 00	ldq  	pr5|94		signal_io_info.data_length
002724  aa  6 00200 7561 00	stq  	pr6|128		window_length
						STATEMENT 1 ON LINE 417
	capture_output_length = capture_output_length + window_length;

002725  aa  7 00104 0561 00	asq  	pr7|68		capture_output_length
						STATEMENT 1 ON LINE 418
	if capture_output_length > MAX_CAPTURE_LENGTH
	then do;

002726  aa  7 00104 2361 00	ldq  	pr7|68		capture_output_length
002727  aa   775133 1160 04	cmpq 	-1445,ic		000062 = 000003600000
002730  aa   000006 6044 04	tmoz 	6,ic		002736
						STATEMENT 1 ON LINE 420
		capture_overran = "1"b;

002731  aa   400000 2350 03	lda  	131072,du
002732  aa  7 00105 7551 00	sta  	pr7|69		capture_overran
						STATEMENT 1 ON LINE 421
		capture_output_length = capture_output_length - window_length;

002733  aa  6 00200 3361 00	lcq  	pr6|128		window_length
002734  aa  7 00104 0561 00	asq  	pr7|68		capture_output_length
						STATEMENT 1 ON LINE 422
	     end;

002735  aa   000007 7100 04	tra  	7,ic		002744
						STATEMENT 1 ON LINE 423
	else window = signal_io_io_buffer;

002736  aa  5 00134 3535 20	epp3 	pr5|92,*		signal_io_info.data_ptr
002737  aa  6 00200 2351 00	lda  	pr6|128		window_length
002740  aa  5 00136 2361 00	ldq  	pr5|94		signal_io_info.data_length
002741  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
002742  aa  3 00000 00 0006	desc9a	pr3|0,ql		signal_io_io_buffer
002743  aa  2 00000 00 0005	desc9a	pr2|0,al		window
						STATEMENT 1 ON LINE 424
	return;

002744  aa  6 00170 6101 00	rtcd 	pr6|120
						STATEMENT 1 ON LINE 425
     end PUT_CHARS;

  END PROCEDURE PUT_CHARS
BEGIN PROCEDURE CONTROL
ENTRY TO CONTROL                                            STATEMENT 1 ON LINE 427
CONTROL:
     procedure;

002745  aa  6 00202 6501 00	spri4	pr6|130
						STATEMENT 1 ON LINE 430
	if signal_io_order_name = "hangup"
	then return;

002746  aa  6 00040 3735 20	epp7 	pr6|32,*
002747  aa  7 00712 3715 20	epp5 	pr7|458,*		signal_io_info_ptr
002750  aa  5 00134 3535 20	epp3 	pr5|92,*		signal_io_info.data_ptr
002751  aa  5 00136 2351 00	lda  	pr5|94		signal_io_info.data_length
002752  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002753  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
002754  aa   775166 00 0006	desc9a	-1418,6		000140 = 150141156147
002755  aa   000002 6010 04	tnz  	2,ic		002757
002756  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 432
	if signal_io_order_name = "listen"
	then return;

002757  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002760  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
002761  aa   775157 00 0006	desc9a	-1425,6		000136 = 154151163164
002762  aa   000002 6010 04	tnz  	2,ic		002764
002763  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 434
	if signal_io_order_name = "quit_enable"
	then return;

002764  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002765  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
002766  aa   775204 00 0013	desc9a	-1404,11		000170 = 161165151164
002767  aa   000002 6010 04	tnz  	2,ic		002771
002770  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 436
	if signal_io_order_name = "quit_disable"
	then return;

002771  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002772  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
002773  aa   775174 00 0014	desc9a	-1412,12		000165 = 161165151164
002774  aa   000002 6010 04	tnz  	2,ic		002776
002775  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 438
	if signal_io_order_name = "start"
	then return;

002776  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002777  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
003000  aa   775136 00 0005	desc9a	-1442,5		000134 = 163164141162
003001  aa   000002 6010 04	tnz  	2,ic		003003
003002  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 440
	if signal_io_order_name = "printer_on"
	then return;

003003  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
003004  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
003005  aa   775157 00 0012	desc9a	-1425,10		000162 = 160162151156
003006  aa   000002 6010 04	tnz  	2,ic		003010
003007  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 442
	if signal_io_order_name = "printer_off"
	then return;

003010  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
003011  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
003012  aa   775147 00 0013	desc9a	-1433,11		000157 = 160162151156
003013  aa   000002 6010 04	tnz  	2,ic		003015
003014  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 444
	if signal_io_order_name = "read_status"
	then call INPUT;

003015  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
003016  aa  3 00000 00 0005	desc9a	pr3|0,al		signal_io_order_name
003017  aa   775137 00 0013	desc9a	-1441,11		000154 = 162145141144
003020  aa   000002 6010 04	tnz  	2,ic		003022
003021  aa   777507 6700 04	tsp4 	-185,ic		002530
						STATEMENT 1 ON LINE 446
	signal_io_info.returned_error_code = error_table_$undefined_order_request;

003022  aa  6 00044 3701 20	epp4 	pr6|36,*
003023  la  4 00112 2361 20	ldq  	pr4|74,*		error_table_$undefined_order_request
003024  aa  6 00040 3735 20	epp7 	pr6|32,*
003025  aa  7 00712 3715 20	epp5 	pr7|458,*		signal_io_info_ptr
003026  aa  5 00140 7561 00	stq  	pr5|96		signal_io_info.returned_error_code
						STATEMENT 1 ON LINE 447
	return;

003027  aa  6 00202 6101 00	rtcd 	pr6|130
						STATEMENT 1 ON LINE 448
     end CONTROL;

  END PROCEDURE CONTROL
  END PROCEDURE IO_SIGNAL_HANDLER
BEGIN PROCEDURE SEND_START_WAKEUP
ENTRY TO SEND_START_WAKEUP                                  STATEMENT 1 ON LINE 452
SEND_START_WAKEUP:
     procedure;

003030  aa  6 00716 6501 00	spri4	pr6|462
						STATEMENT 1 ON LINE 455
	if asr_admin_command_info.header.reply_channel = 0
	then return;

003031  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
003032  aa  7 00002 2371 00	ldaq 	pr7|2		asr_admin_command_info.reply_channel
003033  aa   000002 6010 04	tnz  	2,ic		003035
003034  aa  6 00716 6101 00	rtcd 	pr6|462
						STATEMENT 1 ON LINE 458
	l_reply.code = 0;

003035  aa  6 00724 4501 00	stz  	pr6|468		l_reply.code
						STATEMENT 1 ON LINE 459
	l_reply.flags = ""b;

003036  aa   001211 2350 04	lda  	649,ic		004247 = 377777777777
003037  aa  6 00725 3551 00	ansa 	pr6|469		l_reply.command_refused
003040  aa   001206 2350 04	lda  	646,ic		004246 = 577777777777
003041  aa  6 00725 3551 00	ansa 	pr6|469		l_reply.command_started
003042  aa   001203 2350 04	lda  	643,ic		004245 = 677777777777
003043  aa  6 00725 3551 00	ansa 	pr6|469		l_reply.command_completed
003044  aa   001200 2350 04	lda  	640,ic		004244 = 737777777777
003045  aa  6 00725 3551 00	ansa 	pr6|469		l_reply.command_aborted
003046  aa   001175 2350 04	lda  	637,ic		004243 = 757777777777
003047  aa  6 00725 3551 00	ansa 	pr6|469		l_reply.command_had_errors
003050  aa   760000 2350 03	lda  	253952,du
003051  aa  6 00725 3551 00	ansa 	pr6|469		l_reply.pad
						STATEMENT 1 ON LINE 460
	l_reply.command_started = "1"b;

003052  aa   200000 2350 03	lda  	65536,du
003053  aa  6 00725 2551 00	orsa 	pr6|469		l_reply.command_started
						STATEMENT 1 ON LINE 462
	call hcs_$wakeup (as_request_sender.process_id, asr_admin_command_info.header.reply_channel, unspec (l_reply),
	     (0));

003054  aa  6 00724 2371 00	ldaq 	pr6|468
003055  aa  6 01254 7571 00	staq 	pr6|684
003056  aa  6 01256 4501 00	stz  	pr6|686
003057  aa  6 00710 3715 20	epp5 	pr6|456,*		as_request_sender_ptr
003060  aa  5 00014 3521 00	epp2 	pr5|12		as_request_sender.process_id
003061  aa  6 01262 2521 00	spri2	pr6|690
003062  aa  7 00002 3521 00	epp2 	pr7|2		asr_admin_command_info.reply_channel
003063  aa  6 01264 2521 00	spri2	pr6|692
003064  aa  6 01254 3521 00	epp2 	pr6|684
003065  aa  6 01266 2521 00	spri2	pr6|694
003066  aa  6 01256 3521 00	epp2 	pr6|686
003067  aa  6 01270 2521 00	spri2	pr6|696
003070  aa  6 01260 6211 00	eax1 	pr6|688
003071  aa   020000 4310 07	fld  	8192,dl
003072  aa  6 00044 3701 20	epp4 	pr6|36,*
003073  la  4 00040 3521 20	epp2 	pr4|32,*		hcs_$wakeup
003074  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 464
	return;

003075  aa  6 00716 6101 00	rtcd 	pr6|462
						STATEMENT 1 ON LINE 465
     end SEND_START_WAKEUP;

  END PROCEDURE SEND_START_WAKEUP
BEGIN PROCEDURE NEW_COMMAND_LEVEL
ENTRY TO NEW_COMMAND_LEVEL                                  STATEMENT 1 ON LINE 488
NEW_COMMAND_LEVEL:
     procedure (cl_flags);

003076  da     000632200000
003077  aa   000120 6270 00	eax7 	80
003100  aa  7 00034 3521 20	epp2 	pr7|28,*
003101  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
003102  aa     000002000000
003103  aa     000000000000
						STATEMENT 1 ON LINE 495
	on signal_io_ call IO_SIGNAL_HANDLER;

003104  aa   000012 7260 07	lxl6 	10,dl
003105  aa   775077 3520 04	epp2 	-1473,ic		000204 = 163151147156
003106  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
003107  aa   000004 7100 04	tra  	4,ic		003113
003110  aa     000100000000
003111  aa   000015 7100 04	tra  	13,ic		003126
BEGIN CONDITION signal_io_.7
ENTRY TO signal_io_.7                                       STATEMENT 1 ON LINE 495
	on signal_io_ call IO_SIGNAL_HANDLER;

003112  da     000641200000
003113  aa   000100 6270 00	eax7 	64
003114  aa  7 00034 3521 20	epp2 	pr7|28,*
003115  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
003116  aa     000000000000
003117  aa     000000000000
003120  aa   000002 7270 07	lxl7 	2,dl
003121  aa  6 00056 6211 00	eax1 	pr6|46
003122  aa   000000 4310 07	fld  	0,dl
003123  aa   777256 3520 04	epp2 	-338,ic		002401 = 000320627000
003124  aa  0 00627 7001 00	tsx0 	pr0|407		call_int_other
003125  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION signal_io_.7
						STATEMENT 1 ON LINE 496
	call default_cl_intermediary (cl_flags);

003126  aa  6 00032 3735 20	epp7 	pr6|26,*
003127  aa  7 00002 3521 20	epp2 	pr7|2,*		cl_flags
003130  aa  6 00110 2521 00	spri2	pr6|72
003131  aa  6 00106 6211 00	eax1 	pr6|70
003132  aa   004000 4310 07	fld  	2048,dl
003133  aa  6 00040 3715 20	epp5 	pr6|32,*
003134  aa  5 00674 3521 00	epp2 	pr5|444		default_cl_intermediary
003135  aa  0 00617 7001 00	tsx0 	pr0|399		call_ent_var
						STATEMENT 1 ON LINE 497
	return;

003136  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 498
     end NEW_COMMAND_LEVEL;

  END PROCEDURE NEW_COMMAND_LEVEL
BEGIN PROCEDURE NOTIFY_REFUSAL
ENTRY TO NOTIFY_REFUSAL                                     STATEMENT 1 ON LINE 505
NOTIFY_REFUSAL:
     procedure;

003137  aa  6 00726 6501 00	spri4	pr6|470
						STATEMENT 1 ON LINE 511
	if asr_admin_command_info.send_start_wakeup
	then return;

003140  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
003141  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_start_wakeup
003142  aa   400000 3150 03	cana 	131072,du
003143  aa   000002 6000 04	tze  	2,ic		003145
003144  aa  6 00726 6101 00	rtcd 	pr6|470
						STATEMENT 1 ON LINE 514
	asr_admin_command_info.reply_channel = 0;

003145  aa   775001 2370 04	ldaq 	-1535,ic		000146 = 000000000000 000000000000
003146  aa  7 00002 7571 00	staq 	pr7|2		asr_admin_command_info.reply_channel
						STATEMENT 1 ON LINE 516
	call convert_status_code_ (asr_reply_admin_command.code, "", error_string);

003147  aa   774773 2370 04	ldaq 	-1541,ic		000142 = 040040040040 040040040040
003150  aa  6 01272 7571 00	staq 	pr6|698
003151  aa  6 00704 3521 20	epp2 	pr6|452,*		asr_reply_admin_command.code
003152  aa  6 01276 2521 00	spri2	pr6|702
003153  aa  6 01272 3521 00	epp2 	pr6|698
003154  aa  6 01300 2521 00	spri2	pr6|704
003155  aa  6 00601 3521 00	epp2 	pr6|385		error_string
003156  aa  6 01302 2521 00	spri2	pr6|706
003157  aa  6 01274 6211 00	eax1 	pr6|700
003160  aa   014000 4310 07	fld  	6144,dl
003161  aa  6 00044 3701 20	epp4 	pr6|36,*
003162  la  4 00020 3521 20	epp2 	pr4|16,*		convert_status_code_
003163  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 517
	message_string = "";

003164  aa  040 100 100 400	mlr  	(),(pr),fill(040)
003165  aa   000000 00 0000	desc9a	0,0
003166  aa  6 00206 00 1750	desc9a	pr6|134,1000	message_string
						STATEMENT 1 ON LINE 518
	call ioa_$rsnnl ("^a Admin command line refused. Command line was:^/ ^a^/", message_string, (0), error_string,
	     asr_admin_command_info.command);

003167  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
003170  aa  7 00240 2361 00	ldq  	pr7|160		asr_admin_command_info.command_length
003171  aa   526000 2760 03	orq  	175104,du
003172  aa  6 01304 7561 00	stq  	pr6|708
003173  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003174  aa   775205 00 0070	desc9a	-1403,56		000400 = 136141040101
003175  aa  6 01306 00 0070	desc9a	pr6|710,56
003176  aa  6 01305 4501 00	stz  	pr6|709
003177  aa  6 01306 3521 00	epp2 	pr6|710
003200  aa  6 01326 2521 00	spri2	pr6|726
003201  aa  6 00206 3521 00	epp2 	pr6|134		message_string
003202  aa  6 01330 2521 00	spri2	pr6|728
003203  aa  6 01305 3521 00	epp2 	pr6|709
003204  aa  6 01332 2521 00	spri2	pr6|730
003205  aa  6 00601 3521 00	epp2 	pr6|385		error_string
003206  aa  6 01334 2521 00	spri2	pr6|732
003207  aa  7 00241 3521 00	epp2 	pr7|161		asr_admin_command_info.command
003210  aa  6 01336 2521 00	spri2	pr6|734
003211  aa   774663 3520 04	epp2 	-1613,ic		000074 = 524000000067
003212  aa  6 01340 2521 00	spri2	pr6|736
003213  aa   774670 3520 04	epp2 	-1608,ic		000103 = 526000001750
003214  aa  6 01342 2521 00	spri2	pr6|738
003215  aa   774674 3520 04	epp2 	-1604,ic		000111 = 404000000005
003216  aa  6 01344 2521 00	spri2	pr6|740
003217  aa   774667 3520 04	epp2 	-1609,ic		000106 = 524000000144
003220  aa  6 01346 2521 00	spri2	pr6|742
003221  aa  6 01304 3521 00	epp2 	pr6|708
003222  aa  6 01350 2521 00	spri2	pr6|744
003223  aa  6 01324 6211 00	eax1 	pr6|724
003224  aa   024000 4310 07	fld  	10240,dl
003225  aa  6 00044 3701 20	epp4 	pr6|36,*
003226  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_$rsnnl
003227  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 520
	if asr_admin_command_info.send_completion_message
	then call SEND_MESSAGE (asr_admin_command_info.mail_destination, message_string);

003230  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
003231  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_message
003232  aa   100000 3150 03	cana 	32768,du
003233  aa   000015 6000 04	tze  	13,ic		003250
003234  aa  7 00156 3521 00	epp2 	pr7|110		asr_admin_command_info.mail_destination
003235  aa  6 01310 2521 00	spri2	pr6|712
003236  aa  6 00206 3521 00	epp2 	pr6|134		message_string
003237  aa  6 01312 2521 00	spri2	pr6|714
003240  aa   774652 3520 04	epp2 	-1622,ic		000112 = 526000000310
003241  aa  6 01314 2521 00	spri2	pr6|716
003242  aa   774641 3520 04	epp2 	-1631,ic		000103 = 526000001750
003243  aa  6 01316 2521 00	spri2	pr6|718
003244  aa  6 01306 3521 00	epp2 	pr6|710
003245  aa   010000 4310 07	fld  	4096,dl
003246  aa  2 00000 7571 00	staq 	pr2|0
003247  aa   000040 6700 04	tsp4 	32,ic		003307
						STATEMENT 1 ON LINE 522
	if asr_admin_command_info.send_completion_mail
	then call SEND_MAIL (asr_admin_command_info.mail_destination, "Admin command execution refused" /* subject */,
		message_string);

003250  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
003251  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_mail
003252  aa   040000 3150 03	cana 	16384,du
003253  aa   000024 6000 04	tze  	20,ic		003277
003254  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003255  aa   775026 00 0040	desc9a	-1514,32		000302 = 101144155151
003256  aa  6 01274 00 0040	desc9a	pr6|700,32
003257  aa  7 00156 3521 00	epp2 	pr7|110		asr_admin_command_info.mail_destination
003260  aa  6 01326 2521 00	spri2	pr6|726
003261  aa  6 01274 3521 00	epp2 	pr6|700
003262  aa  6 01330 2521 00	spri2	pr6|728
003263  aa  6 00206 3521 00	epp2 	pr6|134		message_string
003264  aa  6 01332 2521 00	spri2	pr6|730
003265  aa   774625 3520 04	epp2 	-1643,ic		000112 = 526000000310
003266  aa  6 01336 2521 00	spri2	pr6|734
003267  aa   774604 3520 04	epp2 	-1660,ic		000073 = 524000000037
003270  aa  6 01340 2521 00	spri2	pr6|736
003271  aa   774612 3520 04	epp2 	-1654,ic		000103 = 526000001750
003272  aa  6 01342 2521 00	spri2	pr6|738
003273  aa  6 01324 6211 00	eax1 	pr6|724
003274  aa   014000 4310 07	fld  	6144,dl
003275  aa   000111 3520 04	epp2 	73,ic		003406 = 000600627000
003276  aa  0 00624 7001 00	tsx0 	pr0|404		call_int_this_desc
						STATEMENT 1 ON LINE 525
	if ^(asr_admin_command_info.send_completion_mail | asr_admin_command_info.send_completion_message)
	then call SEND_MESSAGE ("", message_string);

003277  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
003300  aa  7 00006 2351 00	lda  	pr7|6		asr_admin_command_info.send_completion_message
003301  aa   140000 3150 03	cana 	49152,du
003302  aa   000004 6010 04	tnz  	4,ic		003306
003303  aa   000725 3520 04	epp2 	469,ic		004230 = 000004000000
003304  aa  2 00000 2351 00	lda  	pr2|0
003305  aa   000002 6700 04	tsp4 	2,ic		003307
						STATEMENT 1 ON LINE 527
	return;

003306  aa  6 00726 6101 00	rtcd 	pr6|470
						STATEMENT 1 ON LINE 528
     end NOTIFY_REFUSAL;

  END PROCEDURE NOTIFY_REFUSAL
BEGIN PROCEDURE SEND_MESSAGE
ENTRY TO SEND_MESSAGE                                       STATEMENT 1 ON LINE 530
SEND_MESSAGE:
     procedure (Destination, Message);

003307  aa  6 00734 6501 00	spri4	pr6|476
003310  aa  6 00736 2521 00	spri2	pr6|478
003311  aa  2 00002 3521 01	epp2 	pr2|2,au
003312  aa  6 00740 2521 00	spri2	pr6|480
003313  aa  2 00000 2361 20	ldq  	pr2|0,*
003314  aa   000002 6040 04	tmi  	2,ic		003316
003315  aa   777777 3760 07	anq  	262143,dl
003316  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
003317  aa  6 01352 7561 00	stq  	pr6|746
003320  aa  2 00002 2361 20	ldq  	pr2|2,*
003321  aa   000002 6040 04	tmi  	2,ic		003323
003322  aa   777777 3760 07	anq  	262143,dl
003323  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
003324  aa  6 01353 7561 00	stq  	pr6|747
						STATEMENT 1 ON LINE 535
	call as_send_user_message_ ("sc_admin_command_", Destination, as_request_sender.group_id, Message,
	     as_request_sender.authorization, "Admin command server", "0"b);

003325  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003326  aa   774710 00 0024	desc9a	-1592,20		000235 = 163143137141
003327  aa  6 01354 00 0024	desc9a	pr6|748,20
003330  aa   774666 2370 04	ldaq 	-1610,ic		000216 = 101144155151 156040143157
003331  aa  6 01362 7571 00	staq 	pr6|754
003332  aa   774666 2370 04	ldaq 	-1610,ic		000220 = 155155141156 144040163145
003333  aa  6 01364 7571 00	staq 	pr6|756
003334  aa   774666 2350 04	lda  	-1610,ic		000222 = 162166145162
003335  aa  6 01366 7551 00	sta  	pr6|758
003336  aa   000000 2350 07	lda  	0,dl
003337  aa  6 01361 7551 00	sta  	pr6|753
003340  aa  6 01354 3521 00	epp2 	pr6|748
003341  aa  6 01372 2521 00	spri2	pr6|762
003342  aa  6 00736 3735 20	epp7 	pr6|478,*
003343  aa  7 00002 3521 20	epp2 	pr7|2,*		Destination
003344  aa  6 01374 2521 00	spri2	pr6|764
003345  aa  6 00710 3715 20	epp5 	pr6|456,*		as_request_sender_ptr
003346  aa  5 00004 3521 00	epp2 	pr5|4		as_request_sender.group_id
003347  aa  6 01376 2521 00	spri2	pr6|766
003350  aa  7 00004 3521 20	epp2 	pr7|4,*		Message
003351  aa  6 01400 2521 00	spri2	pr6|768
003352  aa  5 00016 3521 00	epp2 	pr5|14		as_request_sender.authorization
003353  aa  6 01402 2521 00	spri2	pr6|770
003354  aa  6 01362 3521 00	epp2 	pr6|754
003355  aa  6 01404 2521 00	spri2	pr6|772
003356  aa  6 01361 3521 00	epp2 	pr6|753
003357  aa  6 01406 2521 00	spri2	pr6|774
003360  aa   774543 3520 04	epp2 	-1693,ic		000123 = 524000000021
003361  aa  6 01410 2521 00	spri2	pr6|776
003362  aa  6 00740 3535 20	epp3 	pr6|480,*
003363  aa  3 00000 3521 20	epp2 	pr3|0,*
003364  aa  6 01412 2521 00	spri2	pr6|778
003365  aa   774544 3520 04	epp2 	-1692,ic		000131 = 526000000040
003366  aa  6 01414 2521 00	spri2	pr6|780
003367  aa  3 00002 3521 20	epp2 	pr3|2,*
003370  aa  6 01416 2521 00	spri2	pr6|782
003371  aa   774500 3520 04	epp2 	-1728,ic		000071 = 514000000110
003372  aa  6 01420 2521 00	spri2	pr6|784
003373  aa   774521 3520 04	epp2 	-1711,ic		000114 = 524000000024
003374  aa  6 01422 2521 00	spri2	pr6|786
003375  aa   774512 3520 04	epp2 	-1718,ic		000107 = 514000000001
003376  aa  6 01424 2521 00	spri2	pr6|788
003377  aa  6 01370 6211 00	eax1 	pr6|760
003400  aa   034000 4310 07	fld  	14336,dl
003401  aa  6 00044 3701 20	epp4 	pr6|36,*
003402  la  4 00012 3521 20	epp2 	pr4|10,*		as_send_user_message_
003403  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 537
	return;

003404  aa  6 00734 6101 00	rtcd 	pr6|476
						STATEMENT 1 ON LINE 538
     end SEND_MESSAGE;

  END PROCEDURE SEND_MESSAGE
BEGIN PROCEDURE SEND_MAIL
ENTRY TO SEND_MAIL                                          STATEMENT 1 ON LINE 540
SEND_MAIL:
     procedure (Destination, Subject, Message) options (non_quick);

003405  da     000647200000
003406  aa   000600 6270 00	eax7 	384
003407  aa  7 00034 3521 20	epp2 	pr7|28,*
003410  aa  2 01050 2721 00	tsp2 	pr2|552		int_entry_desc
003411  aa     000006000000
003412  aa     000000000000
003413  aa  6 00042 3735 20	epp7 	pr6|34,*
003414  aa  7 00000 2361 20	ldq  	pr7|0,*
003415  aa   000002 6040 04	tmi  	2,ic		003417
003416  aa   777777 3760 07	anq  	262143,dl
003417  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
003420  aa  6 00500 7561 00	stq  	pr6|320
003421  aa  7 00002 2361 20	ldq  	pr7|2,*
003422  aa   000002 6040 04	tmi  	2,ic		003424
003423  aa   777777 3760 07	anq  	262143,dl
003424  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
003425  aa  6 00501 7561 00	stq  	pr6|321
003426  aa  7 00004 2361 20	ldq  	pr7|4,*
003427  aa   000002 6040 04	tmi  	2,ic		003431
003430  aa   777777 3760 07	anq  	262143,dl
003431  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
003432  aa  6 00502 7561 00	stq  	pr6|322
						STATEMENT 1 ON LINE 554
	unspec (fdo) = ""b;

003433  aa  000 100 100 400	mlr  	(),(pr),fill(000)
003434  aa   000000 00 0000	desc9a	0,0
003435  aa  6 00100 00 0024	desc9a	pr6|64,20
						STATEMENT 1 ON LINE 555
	fdo.version_number = format_document_version_2;

003436  aa   000002 2360 07	ldq  	2,dl
003437  aa  6 00100 7561 00	stq  	pr6|64		fdo.version_number
						STATEMENT 1 ON LINE 556
	fdo.indentation = 0;

003440  aa  6 00101 4501 00	stz  	pr6|65		fdo.indentation
						STATEMENT 1 ON LINE 557
	fdo.line_length = 65;

003441  aa   000101 2360 07	ldq  	65,dl
003442  aa  6 00102 7561 00	stq  	pr6|66		fdo.line_length
						STATEMENT 1 ON LINE 558
	fdo.switches.adj_sw = "1"b;

003443  aa   200000 2350 03	lda  	65536,du
003444  aa  6 00103 2551 00	orsa 	pr6|67		fdo.adj_sw
						STATEMENT 1 ON LINE 559
	fdo.switches.galley_sw = "1"b;

003445  aa   100000 2350 03	lda  	32768,du
003446  aa  6 00103 2551 00	orsa 	pr6|67		fdo.galley_sw
						STATEMENT 1 ON LINE 560
	fdo.switches.dont_compress_sw = "1"b;

003447  aa   004000 2350 03	lda  	2048,du
003450  aa  6 00103 2551 00	orsa 	pr6|67		fdo.dont_compress_sw
						STATEMENT 1 ON LINE 562
	call format_document_$string (Message, formatted_message, formatted_message_length, addr (fdo), code);

003451  aa  6 00100 3715 00	epp5 	pr6|64		fdo
003452  aa  6 00504 6515 00	spri5	pr6|324
003453  aa  6 00032 3535 20	epp3 	pr6|26,*
003454  aa  3 00006 3521 20	epp2 	pr3|6,*		Message
003455  aa  6 00510 2521 00	spri2	pr6|328
003456  aa  6 00105 3521 00	epp2 	pr6|69		formatted_message
003457  aa  6 00512 2521 00	spri2	pr6|330
003460  aa  6 00477 3521 00	epp2 	pr6|319		formatted_message_length
003461  aa  6 00514 2521 00	spri2	pr6|332
003462  aa  6 00504 3521 00	epp2 	pr6|324
003463  aa  6 00516 2521 00	spri2	pr6|334
003464  aa  6 00040 3515 20	epp1 	pr6|32,*
003465  aa  1 00101 3521 00	epp2 	pr1|65		code
003466  aa  6 00520 2521 00	spri2	pr6|336
003467  aa  7 00004 3521 20	epp2 	pr7|4,*
003470  aa  6 00522 2521 00	spri2	pr6|338
003471  aa   774412 3520 04	epp2 	-1782,ic		000103 = 526000001750
003472  aa  6 00524 2521 00	spri2	pr6|340
003473  aa   774374 3520 04	epp2 	-1796,ic		000067 = 404000000025
003474  aa  6 00526 2521 00	spri2	pr6|342
003475  aa   774436 3520 04	epp2 	-1762,ic		000133 = 464000000000
003476  aa  6 00530 2521 00	spri2	pr6|344
003477  aa   774425 3520 04	epp2 	-1771,ic		000124 = 404000000043
003500  aa  6 00532 2521 00	spri2	pr6|346
003501  aa  6 00506 6211 00	eax1 	pr6|326
003502  aa   024000 4310 07	fld  	10240,dl
003503  la  4 00130 3521 20	epp2 	pr4|88,*		format_document_$string
003504  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 563
	if code = error_table_$recoverable_error
	then code = 0;

003505  aa  6 00040 3735 20	epp7 	pr6|32,*
003506  aa  7 00101 2361 00	ldq  	pr7|65		code
003507  aa  6 00044 3701 20	epp4 	pr6|36,*
003510  la  4 00100 1161 20	cmpq 	pr4|64,*		error_table_$recoverable_error
003511  aa   000002 6010 04	tnz  	2,ic		003513
003512  aa  7 00101 4501 00	stz  	pr7|65		code
						STATEMENT 1 ON LINE 565
	if code ^= 0
	then do;

003513  aa  7 00101 2361 00	ldq  	pr7|65		code
003514  aa   000011 6000 04	tze  	9,ic		003525
						STATEMENT 1 ON LINE 567
		formatted_message = Message;

003515  aa  6 00032 3715 20	epp5 	pr6|26,*
003516  aa  5 00006 3535 20	epp3 	pr5|6,*
003517  aa  6 00502 2351 00	lda  	pr6|322
003520  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
003521  aa  3 00000 00 0005	desc9a	pr3|0,al		Message
003522  aa  6 00105 00 1750	desc9a	pr6|69,1000	formatted_message
						STATEMENT 1 ON LINE 568
		formatted_message_length = length (Message);

003523  aa  6 00502 2361 00	ldq  	pr6|322
003524  aa  6 00477 7561 00	stq  	pr6|319		formatted_message_length
						STATEMENT 1 ON LINE 569
	     end;

						STATEMENT 1 ON LINE 571
	call as_send_user_mail_ ("sc_admin_command_", Destination, as_request_sender.group_id, Subject, message_to_send,
	     as_request_sender.authorization, "Admin command server");

003525  aa  6 00477 2361 00	ldq  	pr6|319		formatted_message_length
003526  aa   526000 2760 03	orq  	175104,du
003527  aa  6 00503 7561 00	stq  	pr6|323
003530  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003531  aa   774505 00 0024	desc9a	-1723,20		000235 = 163143137141
003532  aa  6 00506 00 0024	desc9a	pr6|326,20
003533  aa   774463 2370 04	ldaq 	-1741,ic		000216 = 101144155151 156040143157
003534  aa  6 00534 7571 00	staq 	pr6|348
003535  aa   774463 2370 04	ldaq 	-1741,ic		000220 = 155155141156 144040163145
003536  aa  6 00536 7571 00	staq 	pr6|350
003537  aa   774463 2350 04	lda  	-1741,ic		000222 = 162166145162
003540  aa  6 00540 7551 00	sta  	pr6|352
003541  aa  6 00506 3521 00	epp2 	pr6|326
003542  aa  6 00544 2521 00	spri2	pr6|356
003543  aa  6 00032 3715 20	epp5 	pr6|26,*
003544  aa  5 00002 3521 20	epp2 	pr5|2,*		Destination
003545  aa  6 00546 2521 00	spri2	pr6|358
003546  aa  7 00710 3535 20	epp3 	pr7|456,*		as_request_sender_ptr
003547  aa  3 00004 3521 00	epp2 	pr3|4		as_request_sender.group_id
003550  aa  6 00550 2521 00	spri2	pr6|360
003551  aa  5 00004 3521 20	epp2 	pr5|4,*		Subject
003552  aa  6 00552 2521 00	spri2	pr6|362
003553  aa  6 00105 3521 00	epp2 	pr6|69		message_to_send
003554  aa  6 00554 2521 00	spri2	pr6|364
003555  aa  3 00016 3521 00	epp2 	pr3|14		as_request_sender.authorization
003556  aa  6 00556 2521 00	spri2	pr6|366
003557  aa  6 00534 3521 00	epp2 	pr6|348
003560  aa  6 00560 2521 00	spri2	pr6|368
003561  aa   774342 3520 04	epp2 	-1822,ic		000123 = 524000000021
003562  aa  6 00562 2521 00	spri2	pr6|370
003563  aa  6 00042 3515 20	epp1 	pr6|34,*
003564  aa  1 00000 3521 20	epp2 	pr1|0,*
003565  aa  6 00564 2521 00	spri2	pr6|372
003566  aa   774343 3520 04	epp2 	-1821,ic		000131 = 526000000040
003567  aa  6 00566 2521 00	spri2	pr6|374
003570  aa  1 00002 3521 20	epp2 	pr1|2,*
003571  aa  6 00570 2521 00	spri2	pr6|376
003572  aa  6 00503 3521 00	epp2 	pr6|323
003573  aa  6 00572 2521 00	spri2	pr6|378
003574  aa   774275 3520 04	epp2 	-1859,ic		000071 = 514000000110
003575  aa  6 00574 2521 00	spri2	pr6|380
003576  aa   774316 3520 04	epp2 	-1842,ic		000114 = 524000000024
003577  aa  6 00576 2521 00	spri2	pr6|382
003600  aa  6 00542 6211 00	eax1 	pr6|354
003601  aa   034000 4310 07	fld  	14336,dl
003602  la  4 00010 3521 20	epp2 	pr4|8,*		as_send_user_mail_
003603  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 573
	return;

003604  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 574
     end SEND_MAIL;

  END PROCEDURE SEND_MAIL
BEGIN PROCEDURE SEND_COMPLETION_MAIL
ENTRY TO SEND_COMPLETION_MAIL                               STATEMENT 1 ON LINE 576
SEND_COMPLETION_MAIL:
     procedure (Trailer);

003605  da     000660200000
003606  aa   000240 6270 00	eax7 	160
003607  aa  7 00034 3521 20	epp2 	pr7|28,*
003610  aa  2 01050 2721 00	tsp2 	pr2|552		int_entry_desc
003611  aa     000002000000
003612  aa     000000000000
003613  aa  6 00042 3735 20	epp7 	pr6|34,*
003614  aa  7 00000 2361 20	ldq  	pr7|0,*
003615  aa   000002 6040 04	tmi  	2,ic		003617
003616  aa   777777 3760 07	anq  	262143,dl
003617  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
003620  aa  6 00112 7561 00	stq  	pr6|74
						STATEMENT 1 ON LINE 586
003621  aa  6 00040 3715 20	epp5 	pr6|32,*
003622  aa  5 00706 3535 20	epp3 	pr5|454,*		asr_admin_command_info_ptr
003623  aa  3 00240 2361 00	ldq  	pr3|160		asr_admin_command_info.command_length
003624  aa   000024 0760 07	adq  	20,dl
003625  aa  6 00103 7561 00	stq  	pr6|67
003626  aa   000003 0760 07	adq  	3,dl
003627  aa   000002 7320 00	qrs  	2
003630  aa  6 00104 7561 00	stq  	pr6|68
003631  aa  0 00661 7001 00	tsx0 	pr0|433		alloc_auto_adj
003632  aa  6 00106 2521 00	spri2	pr6|70
						STATEMENT 1 ON LINE 595
003633  aa  6 00103 2361 00	ldq  	pr6|67
003634  aa   526000 2760 03	orq  	175104,du
003635  aa  6 00110 7561 00	stq  	pr6|72
						STATEMENT 1 ON LINE 598
003636  aa  6 00103 2361 00	ldq  	pr6|67
003637  aa   526000 2760 03	orq  	175104,du
003640  aa  6 00111 7561 00	stq  	pr6|73
						STATEMENT 1 ON LINE 589
	remaining_ptr = addcharno (capture_output_ptr, capture_output_length);

003641  aa  5 00102 3521 20	epp2 	pr5|66,*		capture_output_ptr
003642  aa  5 00104 2361 00	ldq  	pr5|68		capture_output_length
003643  aa  2 00000 5005 06	a9bd 	pr2|0,ql
003644  aa  6 00100 2521 00	spri2	pr6|64		remaining_ptr
						STATEMENT 1 ON LINE 590
	call ioa_$rsnp ("^/^a^[^/The output (above) was truncated because it was too long to fit^/ in a mail message.",
	     remaining_string, added_length, Trailer, capture_overran);

003645  aa   774220 2360 04	ldq  	-1904,ic		000065 = 000003601750
003646  aa  5 00104 1761 00	sbq  	pr5|68		capture_output_length
003647  aa  6 00114 7561 00	stq  	pr6|76
003650  aa   526000 2760 03	orq  	175104,du
003651  aa  6 00113 7561 00	stq  	pr6|75
003652  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003653  aa   774564 00 0134	desc9a	-1676,92		000436 = 136057136141
003654  aa  6 00116 00 0134	desc9a	pr6|78,92
003655  aa  6 00116 3521 00	epp2 	pr6|78
003656  aa  6 00150 2521 00	spri2	pr6|104
003657  aa  6 00100 3521 20	epp2 	pr6|64,*		remaining_string
003660  aa  6 00152 2521 00	spri2	pr6|106
003661  aa  6 00102 3521 00	epp2 	pr6|66		added_length
003662  aa  6 00154 2521 00	spri2	pr6|108
003663  aa  6 00032 3515 20	epp1 	pr6|26,*
003664  aa  1 00002 3521 20	epp2 	pr1|2,*		Trailer
003665  aa  6 00156 2521 00	spri2	pr6|110
003666  aa  5 00105 3521 00	epp2 	pr5|69		capture_overran
003667  aa  6 00160 2521 00	spri2	pr6|112
003670  aa   774176 3520 04	epp2 	-1922,ic		000066 = 524000000134
003671  aa  6 00162 2521 00	spri2	pr6|114
003672  aa  6 00113 3521 00	epp2 	pr6|75
003673  aa  6 00164 2521 00	spri2	pr6|116
003674  aa   774173 3520 04	epp2 	-1925,ic		000067 = 404000000025
003675  aa  6 00166 2521 00	spri2	pr6|118
003676  aa  7 00000 3521 20	epp2 	pr7|0,*
003677  aa  6 00170 2521 00	spri2	pr6|120
003700  aa   774207 3520 04	epp2 	-1913,ic		000107 = 514000000001
003701  aa  6 00172 2521 00	spri2	pr6|122
003702  aa  6 00146 6211 00	eax1 	pr6|102
003703  aa   024000 4310 07	fld  	10240,dl
003704  la  4 00052 3521 20	epp2 	pr4|42,*		ioa_$rsnp
003705  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 592
	capture_output_length = capture_output_length + added_length;

003706  aa  6 00102 2361 00	ldq  	pr6|66		added_length
003707  aa  6 00040 3735 20	epp7 	pr6|32,*
003710  aa  7 00104 0561 00	asq  	pr7|68		capture_output_length
						STATEMENT 1 ON LINE 595
	call ioa_$rsnnl ("^[Succeeded^;Failed^]: ^a", subject, (0),
	     ^asr_reply_admin_command.flags.command_aborted & asr_reply_admin_command.code = 0,
	     asr_admin_command_info.command);

003711  aa  7 00706 3715 20	epp5 	pr7|454,*		asr_admin_command_info_ptr
003712  aa  5 00240 2361 00	ldq  	pr5|160		asr_admin_command_info.command_length
003713  aa   526000 2760 03	orq  	175104,du
003714  aa  6 00113 7561 00	stq  	pr6|75
003715  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003716  aa   774347 00 0034	desc9a	-1817,28		000264 = 136133123165
003717  aa  6 00146 00 0034	desc9a	pr6|102,28
003720  aa  6 00114 4501 00	stz  	pr6|76
003721  aa  7 00704 2361 20	ldq  	pr7|452,*		asr_reply_admin_command.code
003722  aa  0 00512 7001 00	tsx0 	pr0|330		r_e_as
003723  aa  6 00145 7551 00	sta  	pr6|101
003724  aa  7 00704 3535 20	epp3 	pr7|452,*		asr_replyp
003725  aa  3 00001 2351 00	lda  	pr3|1		asr_reply_admin_command.command_aborted
003726  aa   000003 7350 00	als  	3
003727  aa  0 00002 3771 00	anaq 	pr0|2		= 400000000000 000000000000
003730  aa  0 00002 6751 00	era  	pr0|2		= 400000000000
003731  aa  6 00145 3751 00	ana  	pr6|101
003732  aa  6 00145 7551 00	sta  	pr6|101
003733  aa  6 00146 3521 00	epp2 	pr6|102
003734  aa  6 00120 2521 00	spri2	pr6|80
003735  aa  6 00106 3521 20	epp2 	pr6|70,*		subject
003736  aa  6 00122 2521 00	spri2	pr6|82
003737  aa  6 00114 3521 00	epp2 	pr6|76
003740  aa  6 00124 2521 00	spri2	pr6|84
003741  aa  6 00145 3521 00	epp2 	pr6|101
003742  aa  6 00126 2521 00	spri2	pr6|86
003743  aa  5 00241 3521 00	epp2 	pr5|161		asr_admin_command_info.command
003744  aa  6 00130 2521 00	spri2	pr6|88
003745  aa   774152 3520 04	epp2 	-1942,ic		000117 = 524000000031
003746  aa  6 00132 2521 00	spri2	pr6|90
003747  aa  6 00110 3521 00	epp2 	pr6|72
003750  aa  6 00134 2521 00	spri2	pr6|92
003751  aa   774140 3520 04	epp2 	-1952,ic		000111 = 404000000005
003752  aa  6 00136 2521 00	spri2	pr6|94
003753  aa   774134 3520 04	epp2 	-1956,ic		000107 = 514000000001
003754  aa  6 00140 2521 00	spri2	pr6|96
003755  aa  6 00113 3521 00	epp2 	pr6|75
003756  aa  6 00142 2521 00	spri2	pr6|98
003757  aa  6 00116 6211 00	eax1 	pr6|78
003760  aa   024000 4310 07	fld  	10240,dl
003761  aa  6 00044 3701 20	epp4 	pr6|36,*
003762  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_$rsnnl
003763  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 598
	call as_send_user_mail_ ("sc_admin_command_", asr_admin_command_info.mail_destination,
	     as_request_sender.group_id, subject, total_message, as_request_sender.authorization,
	     "Admin command server");

003764  aa  6 00040 3735 20	epp7 	pr6|32,*
003765  aa  7 00104 2361 00	ldq  	pr7|68		capture_output_length
003766  aa   526000 2760 03	orq  	175104,du
003767  aa  6 00113 7561 00	stq  	pr6|75
003770  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003771  aa   774245 00 0024	desc9a	-1883,20		000235 = 163143137141
003772  aa  6 00146 00 0024	desc9a	pr6|102,20
003773  aa   774223 2370 04	ldaq 	-1901,ic		000216 = 101144155151 156040143157
003774  aa  6 00116 7571 00	staq 	pr6|78
003775  aa   774223 2370 04	ldaq 	-1901,ic		000220 = 155155141156 144040163145
003776  aa  6 00120 7571 00	staq 	pr6|80
003777  aa   774223 2350 04	lda  	-1901,ic		000222 = 162166145162
004000  aa  6 00122 7551 00	sta  	pr6|82
004001  aa  6 00146 3521 00	epp2 	pr6|102
004002  aa  6 00176 2521 00	spri2	pr6|126
004003  aa  7 00706 3715 20	epp5 	pr7|454,*		asr_admin_command_info_ptr
004004  aa  5 00156 3521 00	epp2 	pr5|110		asr_admin_command_info.mail_destination
004005  aa  6 00200 2521 00	spri2	pr6|128
004006  aa  7 00710 3535 20	epp3 	pr7|456,*		as_request_sender_ptr
004007  aa  3 00004 3521 00	epp2 	pr3|4		as_request_sender.group_id
004010  aa  6 00202 2521 00	spri2	pr6|130
004011  aa  6 00106 3521 20	epp2 	pr6|70,*		subject
004012  aa  6 00204 2521 00	spri2	pr6|132
004013  aa  7 00102 3521 20	epp2 	pr7|66,*		total_message
004014  aa  6 00206 2521 00	spri2	pr6|134
004015  aa  3 00016 3521 00	epp2 	pr3|14		as_request_sender.authorization
004016  aa  6 00210 2521 00	spri2	pr6|136
004017  aa  6 00116 3521 00	epp2 	pr6|78
004020  aa  6 00212 2521 00	spri2	pr6|138
004021  aa   774102 3520 04	epp2 	-1982,ic		000123 = 524000000021
004022  aa  6 00214 2521 00	spri2	pr6|140
004023  aa   774067 3520 04	epp2 	-1993,ic		000112 = 526000000310
004024  aa  6 00216 2521 00	spri2	pr6|142
004025  aa   774104 3520 04	epp2 	-1980,ic		000131 = 526000000040
004026  aa  6 00220 2521 00	spri2	pr6|144
004027  aa  6 00111 3521 00	epp2 	pr6|73
004030  aa  6 00222 2521 00	spri2	pr6|146
004031  aa  6 00113 3521 00	epp2 	pr6|75
004032  aa  6 00224 2521 00	spri2	pr6|148
004033  aa   774036 3520 04	epp2 	-2018,ic		000071 = 514000000110
004034  aa  6 00226 2521 00	spri2	pr6|150
004035  aa   774057 3520 04	epp2 	-2001,ic		000114 = 524000000024
004036  aa  6 00230 2521 00	spri2	pr6|152
004037  aa  6 00174 6211 00	eax1 	pr6|124
004040  aa   034000 4310 07	fld  	14336,dl
004041  aa  6 00044 3701 20	epp4 	pr6|36,*
004042  la  4 00010 3521 20	epp2 	pr4|8,*		as_send_user_mail_
004043  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 601
	call release_temp_segment_ ("sc_admin_command_", capture_output_ptr, (0));

004044  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
004045  aa   774171 00 0024	desc9a	-1927,20		000235 = 163143137141
004046  aa  6 00146 00 0024	desc9a	pr6|102,20
004047  aa  6 00113 4501 00	stz  	pr6|75
004050  aa  6 00146 3521 00	epp2 	pr6|102
004051  aa  6 00120 2521 00	spri2	pr6|80
004052  aa  6 00040 3735 20	epp7 	pr6|32,*
004053  aa  7 00102 3521 00	epp2 	pr7|66		capture_output_ptr
004054  aa  6 00122 2521 00	spri2	pr6|82
004055  aa  6 00113 3521 00	epp2 	pr6|75
004056  aa  6 00124 2521 00	spri2	pr6|84
004057  aa   774044 3520 04	epp2 	-2012,ic		000123 = 524000000021
004060  aa  6 00126 2521 00	spri2	pr6|86
004061  aa   774052 3520 04	epp2 	-2006,ic		000133 = 464000000000
004062  aa  6 00130 2521 00	spri2	pr6|88
004063  aa   774041 3520 04	epp2 	-2015,ic		000124 = 404000000043
004064  aa  6 00132 2521 00	spri2	pr6|90
004065  aa  6 00116 6211 00	eax1 	pr6|78
004066  aa   014000 4310 07	fld  	6144,dl
004067  aa  6 00044 3701 20	epp4 	pr6|36,*
004070  la  4 00054 3521 20	epp2 	pr4|44,*		release_temp_segment_
004071  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 602
	return;

004072  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 603
     end SEND_COMPLETION_MAIL;

  END PROCEDURE SEND_COMPLETION_MAIL
BEGIN PROCEDURE SETUP_CAPTURE_OUTPUT
ENTRY TO SETUP_CAPTURE_OUTPUT                               STATEMENT 1 ON LINE 605
SETUP_CAPTURE_OUTPUT:
     procedure;

004073  aa  6 00742 6501 00	spri4	pr6|482
						STATEMENT 1 ON LINE 609
	call get_temp_segment_ ("sc_admin_command_", capture_output_ptr, (0));

004074  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
004075  aa   774141 00 0024	desc9a	-1951,20		000235 = 163143137141
004076  aa  6 01426 00 0024	desc9a	pr6|790,20
004077  aa  6 01433 4501 00	stz  	pr6|795
004100  aa  6 01426 3521 00	epp2 	pr6|790
004101  aa  6 01436 2521 00	spri2	pr6|798
004102  aa  6 00102 3521 00	epp2 	pr6|66		capture_output_ptr
004103  aa  6 01440 2521 00	spri2	pr6|800
004104  aa  6 01433 3521 00	epp2 	pr6|795
004105  aa  6 01442 2521 00	spri2	pr6|802
004106  aa   774015 3520 04	epp2 	-2035,ic		000123 = 524000000021
004107  aa  6 01444 2521 00	spri2	pr6|804
004110  aa   774023 3520 04	epp2 	-2029,ic		000133 = 464000000000
004111  aa  6 01446 2521 00	spri2	pr6|806
004112  aa   774012 3520 04	epp2 	-2038,ic		000124 = 404000000043
004113  aa  6 01450 2521 00	spri2	pr6|808
004114  aa  6 01434 6211 00	eax1 	pr6|796
004115  aa   014000 4310 07	fld  	6144,dl
004116  aa  6 00044 3701 20	epp4 	pr6|36,*
004117  la  4 00036 3521 20	epp2 	pr4|30,*		get_temp_segment_
004120  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 610
	capture_output_length = 0;

004121  aa  6 00104 4501 00	stz  	pr6|68		capture_output_length
						STATEMENT 1 ON LINE 611
	capture_overran = "0"b;

004122  aa  6 00105 4501 00	stz  	pr6|69		capture_overran
						STATEMENT 1 ON LINE 612
	call ioa_$rsnp ("Output of execution of admin command:^/^a^/", initial_message, capture_output_length,
	     asr_admin_command_info.command);

004123  aa  6 00706 3735 20	epp7 	pr6|454,*		asr_admin_command_info_ptr
004124  aa  7 00240 2361 00	ldq  	pr7|160		asr_admin_command_info.command_length
004125  aa   526000 2760 03	orq  	175104,du
004126  aa  6 01433 7561 00	stq  	pr6|795
004127  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
004130  aa   774205 00 0054	desc9a	-1915,44		000334 = 117165164160
004131  aa  6 01434 00 0054	desc9a	pr6|796,44
004132  aa  6 01434 3521 00	epp2 	pr6|796
004133  aa  6 01454 2521 00	spri2	pr6|812
004134  aa  6 00102 3521 20	epp2 	pr6|66,*		initial_message
004135  aa  6 01456 2521 00	spri2	pr6|814
004136  aa  6 00104 3521 00	epp2 	pr6|68		capture_output_length
004137  aa  6 01460 2521 00	spri2	pr6|816
004140  aa  7 00241 3521 00	epp2 	pr7|161		asr_admin_command_info.command
004141  aa  6 01462 2521 00	spri2	pr6|818
004142  aa   773722 3520 04	epp2 	-2094,ic		000064 = 524000000053
004143  aa  6 01464 2521 00	spri2	pr6|820
004144  aa   773717 3520 04	epp2 	-2097,ic		000063 = 524000023420
004145  aa  6 01466 2521 00	spri2	pr6|822
004146  aa   773721 3520 04	epp2 	-2095,ic		000067 = 404000000025
004147  aa  6 01470 2521 00	spri2	pr6|824
004150  aa  6 01433 3521 00	epp2 	pr6|795
004151  aa  6 01472 2521 00	spri2	pr6|826
004152  aa  6 01452 6211 00	eax1 	pr6|810
004153  aa   020000 4310 07	fld  	8192,dl
004154  aa  6 00044 3701 20	epp4 	pr6|36,*
004155  la  4 00052 3521 20	epp2 	pr4|42,*		ioa_$rsnp
004156  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 614
	return;

004157  aa  6 00742 6101 00	rtcd 	pr6|482
						STATEMENT 1 ON LINE 615
     end SETUP_CAPTURE_OUTPUT;

  END PROCEDURE SETUP_CAPTURE_OUTPUT
BEGIN PROCEDURE ANY_OTHER_HANDLER
ENTRY TO ANY_OTHER_HANDLER                                  STATEMENT 1 ON LINE 617
ANY_OTHER_HANDLER:
     procedure ();

004160  aa  6 00100 6501 00	spri4	pr6|64
						STATEMENT 1 ON LINE 629
	CI.version = condition_info_version_1;

004161  aa   000001 2360 07	ldq  	1,dl
004162  aa  6 00110 7561 00	stq  	pr6|72		CI.version
						STATEMENT 1 ON LINE 630
	call find_condition_info_ (null (), addr (CI), code);

004163  aa   773761 3734 24	epp7 	-2063,ic*
004164  aa  6 00142 6535 00	spri7	pr6|98
004165  aa  6 00106 3715 00	epp5 	pr6|70		CI
004166  aa  6 00144 6515 00	spri5	pr6|100
004167  aa  6 00142 3521 00	epp2 	pr6|98
004170  aa  6 00150 2521 00	spri2	pr6|104
004171  aa  6 00144 3521 00	epp2 	pr6|100
004172  aa  6 00152 2521 00	spri2	pr6|106
004173  aa  6 00140 3521 00	epp2 	pr6|96		code
004174  aa  6 00154 2521 00	spri2	pr6|108
004175  aa  6 00146 6211 00	eax1 	pr6|102
004176  aa   014000 4310 07	fld  	6144,dl
004177  aa  6 00044 3701 20	epp4 	pr6|36,*
004200  la  4 00032 3521 20	epp2 	pr4|26,*		find_condition_info_
004201  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 631
	if code = 0
	then if CI.condition_name = "signal_io_"
	     then do;

004202  aa  6 00140 2361 00	ldq  	pr6|96		code
004203  aa   000017 6010 04	tnz  	15,ic		004222
004204  aa  6 00111 7271 00	lxl7 	pr6|73		CI.condition_name
004205  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004206  aa  6 00112 00 0017	desc9a	pr6|74,x7		CI.condition_name
004207  aa   773777 00 0012	desc9a	-2049,10		000204 = 163151147156
004210  aa   000012 6010 04	tnz  	10,ic		004222
						STATEMENT 1 ON LINE 634
		     call continue_to_signal_ ((0));

004211  aa  6 00141 4501 00	stz  	pr6|97
004212  aa  6 00141 3521 00	epp2 	pr6|97
004213  aa  6 00150 2521 00	spri2	pr6|104
004214  aa  6 00146 6211 00	eax1 	pr6|102
004215  aa   004000 4310 07	fld  	2048,dl
004216  aa  6 00044 3701 20	epp4 	pr6|36,*
004217  la  4 00016 3521 20	epp2 	pr4|14,*		continue_to_signal_
004220  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 635
		     return;

004221  aa  6 00100 6101 00	rtcd 	pr6|64
						STATEMENT 1 ON LINE 636
		end;

						STATEMENT 1 ON LINE 637
	call default_error_handler_$wall;

004222  aa  6 00056 6211 00	eax1 	pr6|46
004223  aa   000000 4310 07	fld  	0,dl
004224  aa  6 00044 3701 20	epp4 	pr6|36,*
004225  la  4 00030 3521 20	epp2 	pr4|24,*		default_error_handler_$wall
004226  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 638
	return;

004227  aa  6 00100 6101 00	rtcd 	pr6|64
						STATEMENT 1 ON LINE 639
     end ANY_OTHER_HANDLER;

  END PROCEDURE ANY_OTHER_HANDLER
  END PROCEDURE sc_admin_command_


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
