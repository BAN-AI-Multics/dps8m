ASSEMBLY LISTING OF SEGMENT >spec>install>1110>get_control_point_id_.alm                                                                                                                            
ASSEMBLED ON:	11/11/89  0951.1 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1986 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                                     8  
                                     9  " HISTORY COMMENTS:
                                    10  "  1) change(86-09-19,Fawcett), approve(86-09-19,MCR7473),
                                    11  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                    12  "     Written to support control point management.  This was actually done in
                                    13  "     March 1985 by G. Palter in pl1 with 5 statements. Rewritten in alm to
                                    14  "     eliminate the cost of pushing and popping the stack frame for such a
                                    15  "     trivial task.
                                    16  "                                                      END HISTORY COMMENTS
                                    17  
    000000                          18  	name	get_control_point_id_
                                    19  
                                    20  " This short routine is used by bound_cpm_ and bound_ipc_.  It's
                                    21  " function is to return the control point id, this is defined as the
                                    22  " baseno of the stack that control point runs on.  If control point
                                    23  " management is not enabled then the baseno of the current stack is
                                    24  " returned.
                                    25  
                                    26  "
                                    27  "  USAGE:
                                    28  "
                                    29  "  dcl get_control_point_id_ entry () returns (bit (36) aligned);
                                    30  "
                                    31  "  ID = get_control_point_id_ ();
                                    32  "
                                    33  	
                        000000      34  	entry     get_control_point_id_
                                    35  	
    000000                          36  get_control_point_id_:
                                    37  
                                    38  " First check to see if control point management is enabled.
                                    39  " If stack_header.cpm_enabled is not zero then it is enabled.
                                    40  
    000000  aa  7 00013 7271 00     41            lxl7       sb|stack_header.cpm_enabled	" Lower half of word
                                    42  
                                    43   " transfer if control point is enabled (not zero)
                                    44  
    000001  0a   000006 6010 00     45            tnz       real_cp            
                                    46  
                                    47  " not enabled (zero), the ID is this stack baseno placed in the A
                                    48  " register by the Effective Pointer in the AQ register.
                                    49  
    000002  aa  7 00000 2131 00     50            epaq      sb|0
                                    51  
                                    52  " AND a mask to the upper half of the A register. Thats where the epaq
                                    53  " placed the segment number, in bits 3-17.
                                    54  
    000003  aa   077777 3750 03     55            ana       =o077777,du
    000004  aa  0 00002 7551 20     56  	sta       ap|2,*		" return the ID to the caller.
    000005  aa  7 00044 7101 20     57            short_return		" short_return because no stack frame
                                    58  				" was pushed.
                                    59  
                                    60  
    000006                          61  real_cp:  
                                    62  
                                    63  " Now that we KNOW that control point management is enabled, load the
                                    64  " ID in the A register and return it to the caller.
                                    65  
    000006  aa   000000 6270 00     66            eax7	cpd.id
    000007  aa  7 00004 2351 77     67            lda	sb|stack_header.cpm_data_ptr,*7
    000010  aa  0 00002 7551 20     68            sta       ap|2,*		" return the ID to the caller.
    000011  aa  7 00044 7101 20     69            short_return		" short_return because no stack frame
                                    70  				" was pushed.
                                    71            
                                    72  %include cpm_control_point_data;
                                   1-1  " BEGIN INCLUDE FILE ... cpm_control_point_data.incl.alm
                                   1-2  
                                   1-3  " Created 03/12/85  1654.0 est Tue by convert_include_file,
                                   1-4  "   Version of 01/09/85  0954.4 est Wed.
                                   1-5  
                                   1-6  " HISTORY COMMENTS:
                                   1-7  "  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                   1-8  "     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
                                   1-9  "     Written to support control point management in March 1985 by G. Palter.
                                  1-10  "     Edited to make all identifiers valid ALM symbols.  Converted from
                                  1-11  "     cpm_control_point_data.incl.pl1.
                                  1-12  "                                                      END HISTORY COMMENTS
                                  1-13  
                        000000    1-14  	equ	cpd.id,0
                        000001    1-15  	equ	cpd.group_id,1
                        000002    1-16  	equ	cpd.state,2
                        000003    1-17  	equ	cpd.flags,3	" LEVEL 2
                                  1-18  
                        400000    1-19  	bool	cpd.preferred,400000 " DU
                        200000    1-20  	bool	cpd.swapped_switches,200000 " DU
                                  1-21  
                        000004    1-22  	equ	cpd.priority,4
                        000006    1-23  	equ	cpd.stack_ptr,6
                        000010    1-24  	equ	cpd.last_frame_ptr,8
                        000012    1-25  	equ	cpd.destroy,10
                        000016    1-26  	equ	cpd.parent,14
                        000020    1-27  	equ	cpd.peers,16	" LEVEL 2
                                  1-28  
                        000020    1-29  	equ	cpd.prev_peer,16
                        000022    1-30  	equ	cpd.next_peer,18
                        000024    1-31  	equ	cpd.children,20 " LEVEL 2
                                  1-32  
                        000024    1-33  	equ	cpd.first_child,20
                        000026    1-34  	equ	cpd.last_child,22
                        000030    1-35  	equ	cpd.ready_queue,24 " LEVEL 2
                                  1-36  
                        000030    1-37  	equ	cpd.prev_ready,24
                        000032    1-38  	equ	cpd.next_ready,26
                        000034    1-39  	equ	cpd.user_cl_intermediary,28
                        000040    1-40  	equ	cpd.comment,32
                        000060    1-41  	equ	cpd.saved_environment,48 " LEVEL 2
                                  1-42  
                        000060    1-43  	equ	cpd.ips_mask,48
                        000061    1-44  	equ	cpd.privileges,49
                        000062    1-45  	equ	cpd.cl_intermediary,50
                        000066    1-46  	equ	cpd.io_switches,54 " LEVEL 3
                                  1-47  
                        000066    1-48  	equ	cpd.user_io,54
                        000070    1-49  	equ	cpd.user_input,56
                        000072    1-50  	equ	cpd.user_output,58
                        000074    1-51  	equ	cpd.error_output,60
                        000076    1-52  	equ	cpd.meters,62	" LEVEL 2
                                  1-53  
                                  1-54  " END INCLUDE FILE ... cpm_control_point_data.incl.alm
                                    73  %include stack_header;
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    74  
                                    75            end
ENTRY SEQUENCES
     
    000012  5a   000014 0000 00
    000013  aa  7 00046 2721 20
    000014  0a   000000 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000016  5a   000003 000000 
    000017  5a   000034 600000 
    000020  aa   000000 000000 
    000021  55   000014 000002 
    000022  5a   000002 400003 
    000023  55   000006 000014 
    000024  aa  025 147 145 164
    000025  aa  137 143 157 156
    000026  aa  164 162 157 154
    000027  aa  137 160 157 151
    000030  aa  156 164 137 151
    000031  aa  144 137 000 000
    000032  55   000025 000003 
    000033  0a   000013 500000 
    000034  55   000017 000003 
    000035  aa  025 147 145 164         get_control_point_id_
    000036  aa  137 143 157 156
    000037  aa  164 162 157 154
    000040  aa  137 160 157 151
    000041  aa  156 164 137 151
    000042  aa  144 137 000 000
    000043  55   000002 000014 
    000044  6a   000000 400002 
    000045  55   000030 000003 
    000046  aa  014 163 171 155         symbol_table
    000047  aa  142 157 154 137
    000050  aa  164 141 142 154
    000051  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000052  aa   000000 000015 
    000053  aa   000000 000000 
    000054  aa   000000 000000 
    000055  aa   000000 000000 
    000056  aa   000000 000000 
    000057  aa   000000 000000 
    000060  aa   000000 000000 
    000061  5a   000025 000000 
    000062  aa   000000 000000 
    000063  aa   000000 000000 
    000064  aa   000000 000000 
    000065  5a   000014 000000 
    000066  aa   000000 000000 
    000067  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000070  aa   000001 000000 
    000071  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000016 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   256154 441076 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000167 
    000020  aa   000000 000141 
    000021  aa   000150 000145 
    000022  aa   000157 000141 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000054 
    000067  aa   175453 017513 
    000070  aa   000000 117547 
    000071  aa   175776 600000 
    000072  aa   000115 000054 
    000073  aa   147777 464105 
    000074  aa   000000 115000 
    000075  aa   507456 200000 
    000076  aa   000130 000042 
    000077  aa   147777 464111 
    000100  aa   000000 115000 
    000101  aa   507463 000000 
    000102  aa   076163 160145          >spec>install>1110>get_control_point_id_.alm
    000103  aa   143076 151156 
    000104  aa   163164 141154 
    000105  aa   154076 061061 
    000106  aa   061060 076147 
    000107  aa   145164 137143 
    000110  aa   157156 164162 
    000111  aa   157154 137160 
    000112  aa   157151 156164 
    000113  aa   137151 144137 
    000114  aa   056141 154155 
    000115  aa   076154 144144          >ldd>include>cpm_control_point_data.incl.alm
    000116  aa   076151 156143 
    000117  aa   154165 144145 
    000120  aa   076143 160155 
    000121  aa   137143 157156 
    000122  aa   164162 157154 
    000123  aa   137160 157151 
    000124  aa   156164 137144 
    000125  aa   141164 141056 
    000126  aa   151156 143154 
    000127  aa   056141 154155 
    000130  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000131  aa   076151 156143 
    000132  aa   154165 144145 
    000133  aa   076163 164141 
    000134  aa   143153 137150 
    000135  aa   145141 144145 
    000136  aa   162056 151156 
    000137  aa   143154 056141 
    000140  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1170    call_offset              stack_header:        80.
          24    cpd.children             cpm_control_point_data:    31.
          62    cpd.cl_intermediary      cpm_control_point_data:    45.
          40    cpd.comment              cpm_control_point_data:    40.
          12    cpd.destroy              cpm_control_point_data:    25.
          74    cpd.error_output         cpm_control_point_data:    51.
          24    cpd.first_child          cpm_control_point_data:    33.
           3    cpd.flags                cpm_control_point_data:    17.
           1    cpd.group_id             cpm_control_point_data:    15.
           0    cpd.id                   get_control_point_id_:     66,
                                         cpm_control_point_data:    14.
          66    cpd.io_switches          cpm_control_point_data:    46.
          60    cpd.ips_mask             cpm_control_point_data:    43.
          26    cpd.last_child           cpm_control_point_data:    34.
          10    cpd.last_frame_ptr       cpm_control_point_data:    24.
          76    cpd.meters               cpm_control_point_data:    52.
          22    cpd.next_peer            cpm_control_point_data:    30.
          32    cpd.next_ready           cpm_control_point_data:    38.
          16    cpd.parent               cpm_control_point_data:    26.
          20    cpd.peers                cpm_control_point_data:    27.
      400000    cpd.preferred            cpm_control_point_data:    19.
          20    cpd.prev_peer            cpm_control_point_data:    29.
          30    cpd.prev_ready           cpm_control_point_data:    37.
           4    cpd.priority             cpm_control_point_data:    22.
          61    cpd.privileges           cpm_control_point_data:    44.
          30    cpd.ready_queue          cpm_control_point_data:    35.
          60    cpd.saved_environment    cpm_control_point_data:    41.
           6    cpd.stack_ptr            cpm_control_point_data:    23.
           2    cpd.state                cpm_control_point_data:    16.
      200000    cpd.swapped_switches     cpm_control_point_data:    20.
          34    cpd.user_cl_intermediary       cpm_control_point_data:    39.
          70    cpd.user_input           cpm_control_point_data:    49.
          66    cpd.user_io              cpm_control_point_data:    48.
          72    cpd.user_output          cpm_control_point_data:    50.
        1174    entry_offset             stack_header:        84.
           0    get_control_point_id_    get_control_point_id_:     34,   36.
        1171    push_offset              stack_header:        81.
           6    real_cp                  get_control_point_id_:     45,   61.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      get_control_point_id_:     67,
                                               stack_header:        24.
          13    stack_header.cpm_enabled       get_control_point_id_:     41,
                                               stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
