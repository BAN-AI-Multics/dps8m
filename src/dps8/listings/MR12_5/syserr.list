ASSEMBLY LISTING OF SEGMENT >spec>install>1111>syserr.alm                                                                                                                                           
ASSEMBLED ON:	11/11/89  0922.1 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  "
                                    13  " SYSERR - Procedure to call syserr_real after setting up stack frame.
                                    14  "	Modified August 1975 by Larry Johnson to add binary and error_code entries
                                    15  "	Modified 3/76 by S. H. Webber for new reconfig
                                    16  "	Modified 12/80 by J. J. Bongiovanni for multiplexed ring-0 stacks
                                    17  "	Modified 4/81 by J. J. Bongiovanni to add checks for wired stack, interrupts masked
                                    18  "	Modified 10/83 by Keith Loepere for paged unpaged segments.
                                    19  "	Modified 12/21/84 by EJ Sharpe for multiple_binary
                                    20  
    000000                          21  	name	syserr
                                    22  
                        000000      23  	entry	syserr
                        000002      24  	entry	binary
                        000004      25  	entry	error_code
                        000006      26  	entry	multiple_binary
                                    27  
                        030000      28  	bool	die_offset,030000
                                    29  
                                    30  " 
                                    31  
                                    32  	include	ptw
                                   1-1  " BEGIN INCLUDE FILE ... ptw.incl.alm ... 03/01/81, for ADP conversion
                                   1-2  
                                   1-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	ptw.l68
                                   2-1  
                                   2-2  
                                   2-3       "BEGIN INCLUDE FILE ptw.l68.incl.alm
                                   2-4  
                                   2-5  
                                   2-6  	"Created 04/05/81  1616.0 est Sun by convert_include_file,
                                   2-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   2-8  
                                   2-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>ptw.l68.incl.pl1,
                                  2-10  	"   modified 03/20/81  1815.9 est Fri
                                  2-11  
                                  2-12  "
                                  2-13  "	Structure core_ptw
                                  2-14  "
                        000026    2-15  	equ	core_ptw.frame_shift,22
                        037777    2-16  	bool	core_ptw.frame_mask,037777
                        000000    2-17  	equ	core_ptw.flags,0	" LOWER
                        000016    2-18  	equ	core_ptw.add_type_shift,14
                        000017    2-19  	bool	core_ptw.add_type_mask,000017
                        020000    2-20  	bool	core_ptw.first,020000	" DL
                        010000    2-21  	bool	core_ptw.er,010000	" DL
                        002000    2-22  	bool	core_ptw.unusable1,002000	" DL
                        001000    2-23  	bool	core_ptw.phu,001000	" DL
                        000400    2-24  	bool	core_ptw.phm1,000400	" DL
                        000200    2-25  	bool	core_ptw.nypd,000200	" DL
                        000100    2-26  	bool	core_ptw.phm,000100	" DL
                        000040    2-27  	bool	core_ptw.phu1,000040	" DL
                        000020    2-28  	bool	core_ptw.wired,000020	" DL
                        000010    2-29  	bool	core_ptw.os,000010	" DL
                        000004    2-30  	bool	core_ptw.valid,000004	" DL
                        000000    2-31  	equ	core_ptw.df_no_shift,0
                        000003    2-32  	bool	core_ptw.df_no_mask,000003
                                  2-33  
                                  2-34  "
                                  2-35  "	Structure ptw
                                  2-36  "
                        000000    2-37  	equ	ptw.add,0		" UPPER
                        000000    2-38  	equ	ptw.flags,0		" LOWER
                        000016    2-39  	equ	ptw.add_type_shift,14
                        000017    2-40  	bool	ptw.add_type_mask,000017
                        020000    2-41  	bool	ptw.first,020000	" DL
                        010000    2-42  	bool	ptw.er,010000		" DL
                        002000    2-43  	bool	ptw.unusable1,002000	" DL
                        001000    2-44  	bool	ptw.phu,001000		" DL
                        000400    2-45  	bool	ptw.phm1,000400		" DL
                        000200    2-46  	bool	ptw.nypd,000200		" DL
                        000100    2-47  	bool	ptw.phm,000100		" DL
                        000040    2-48  	bool	ptw.phu1,000040		" DL
                        000020    2-49  	bool	ptw.wired,000020	" DL
                        000010    2-50  	bool	ptw.os,000010		" DL
                        000004    2-51  	bool	ptw.valid,000004	" DL
                        000000    2-52  	equ	ptw.df_no_shift,0
                        000003    2-53  	bool	ptw.df_no_mask,000003
                                  2-54  
                                  2-55       "END INCLUDE FILE ptw.l68.incl.alm
                                        "	ifend
                                   1-6  
                                   1-7  	iftarget	adp
                                        "	 include	ptw.adp
                                        "	ifend
                                  1-10  
                                  1-11  " END INCLUDE FILE ... ptw.incl.alm
                                    33  
                                    34  " 
                                    35  
                                    36  	include	sdw
                                   3-1  " BEGIN INCLUDE FILE ... sdw.incl.alm ... 03/01/81, for ADP conversion
                                   3-2  
                                   3-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	sdw.l68
                                   4-1  
                                   4-2  
                                   4-3       "BEGIN INCLUDE FILE sdw.l68.incl.alm
                                   4-4  
                                   4-5  
                                   4-6  	"Created 04/05/81  1616.1 est Sun by convert_include_file,
                                   4-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   4-8  
                                   4-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>sdw.l68.incl.pl1,
                                  4-10  	"   modified 03/20/81  2215.5 est Fri
                                  4-11  
                                  4-12  "
                                  4-13  "	Structure sdw
                                  4-14  "
                        000002    4-15  	equ	sdw_size,2
                                  4-16  
                        000000    4-17  	equ	sdw.add_word,0
                        000014    4-18  	equ	sdw.add_shift,12
                        000000    4-19  	equ	sdw.rings_word,0
                        000003    4-20  	equ	sdw.rings_shift,3
                        000777    4-21  	bool	sdw.rings_mask,000777
                        000000    4-22  	equ	sdw.r1_word,0
                        000011    4-23  	equ	sdw.r1_shift,9
                        000007    4-24  	bool	sdw.r1_mask,000007
                        000000    4-25  	equ	sdw.r2_word,0
                        000006    4-26  	equ	sdw.r2_shift,6
                        000007    4-27  	bool	sdw.r2_mask,000007
                        000000    4-28  	equ	sdw.r3_word,0
                        000003    4-29  	equ	sdw.r3_shift,3
                        000007    4-30  	bool	sdw.r3_mask,000007
                        000000    4-31  	equ	sdw.valid_word,0
                        000004    4-32  	bool	sdw.valid,000004	" DL
                        000000    4-33  	equ	sdw.df_no_word,0
                        000000    4-34  	equ	sdw.df_no_shift,0
                        000003    4-35  	bool	sdw.df_no_mask,000003
                                  4-36  
                        000001    4-37  	equ	sdw.bound_word,1
                        000025    4-38  	equ	sdw.bound_shift,21
                        037777    4-39  	bool	sdw.bound_mask,037777
                        000001    4-40  	equ	sdw.access_word,1
                        000021    4-41  	equ	sdw.access_shift,17
                        000017    4-42  	bool	sdw.access_mask,000017
                        000001    4-43  	equ	sdw.read_word,1
                        000004    4-44  	bool	sdw.read,000004		" DU
                        000001    4-45  	equ	sdw.execute_word,1
                        000002    4-46  	bool	sdw.execute,000002	" DU
                        000001    4-47  	equ	sdw.write_word,1
                        000001    4-48  	bool	sdw.write,000001	" DU
                        000001    4-49  	equ	sdw.privileged_word,1
                        400000    4-50  	bool	sdw.privileged,400000	" DL
                        000001    4-51  	equ	sdw.unpaged_word,1
                        200000    4-52  	bool	sdw.unpaged,200000	" DL
                        000001    4-53  	equ	sdw.not_a_gate_word,1
                        100000    4-54  	bool	sdw.not_a_gate,100000	" DL
                        000001    4-55  	equ	sdw.cache_word,1
                        040000    4-56  	bool	sdw.cache,040000	" DL
                        000001    4-57  	equ	sdw.entry_bound_word,1
                        000000    4-58  	equ	sdw.entry_bound_shift,0
                        037777    4-59  	bool	sdw.entry_bound_mask,037777
                                  4-60  
                                  4-61       "END INCLUDE FILE sdw.l68.incl.alm
                                        "	ifend
                                   3-6  
                                   3-7  	iftarget	adp
                                        "	 include	sdw.adp
                                        "	ifend
                                  3-10  
                                  3-11  " END INCLUDE FILE ... sdw.incl.alm
                                    37  
                                    38  " 
                                    39  
                                    40  	include	stack_frame
                                   5-1  "
                                   5-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   5-3  "
                                   5-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   5-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   5-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   5-7  "
                        000020     5-8  	equ	stack_frame.prev_sp,16
                        000020     5-9  	equ	stack_frame.condition_word,16
                        000022    5-10  	equ	stack_frame.next_sp,18
                        000022    5-11  	equ	stack_frame.signaller_word,18
                        000024    5-12  	equ	stack_frame.return_ptr,20
                        000026    5-13  	equ	stack_frame.entry_ptr,22
                        000030    5-14  	equ	stack_frame.operator_ptr,24
                        000030    5-15  	equ	stack_frame.lp_ptr,24
                        000032    5-16  	equ	stack_frame.arg_ptr,26
                        000034    5-17  	equ	stack_frame.static_ptr,28
                        000035    5-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    5-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    5-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    5-21  	equ	stack_frame.translator_id,31
                        000040    5-22  	equ	stack_frame.regs,32
                        000060    5-23  	equ	stack_frame.min_length,48
                        000020    5-24  	equ	stack_frame.flag_word,16
                        020000    5-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    5-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    5-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    5-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    5-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    5-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    5-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    5-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  5-33  
                                  5-34  "
                                  5-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  5-36  "
                                    41  
                                    42  " 
                                    43  
                                    44  	include	stack_header
                                   6-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   6-2  "
                                   6-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   6-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   6-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   6-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   6-7  
                                   6-8  " HISTORY COMMENTS:
                                   6-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  6-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  6-11  "     added the heap_header_ptr definition
                                  6-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  6-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  6-14  "     Modified to support control point management.  These changes were
                                  6-15  "     actually made in February 1985 by G. Palter.
                                  6-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  6-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  6-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  6-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  6-20  "     some space int the stack header and change the cpd_ptr unal to
                                  6-21  "     cpm_data_ptr (ITS pair).
                                  6-22  "                                                      END HISTORY COMMENTS
                                  6-23  
                        000004    6-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    6-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  6-26  
                        000010    6-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    6-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    6-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    6-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    6-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    6-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    6-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    6-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  6-35  
                        000020    6-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    6-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    6-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    6-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  6-40  
                        000030    6-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    6-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    6-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    6-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  6-45  
                        000040    6-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    6-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    6-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    6-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  6-50  
                        000050    6-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    6-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    6-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    6-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  6-55  
                        000060    6-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    6-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    6-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    6-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    6-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    6-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    6-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    6-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    6-64  	equ	stack_header_end,64			length of stack header
                                  6-65  
                                  6-66  
                                  6-67  
                                  6-68  
                        000000    6-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    6-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  6-71  
                                  6-72  "	The  following constant is an offset within the  pl1  operators table.
                                  6-73  "	It  references a  transfer vector table.
                                  6-74  
                        000551    6-75  	bool	tv_offset,551
                                  6-76  
                                  6-77  
                                  6-78  "	The  following constants are offsets within this transfer vector table.
                                  6-79  
                        001170    6-80  	equ	call_offset,tv_offset+271
                        001171    6-81  	equ	push_offset,tv_offset+272
                        001172    6-82  	equ	return_offset,tv_offset+273
                        001173    6-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    6-84  	equ	entry_offset,tv_offset+275
                                  6-85  
                                  6-86  
                                  6-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    45  "
                                    46  	include	unpaged_page_tables
                                   7-1  
                                   7-2  
                                   7-3       "BEGIN INCLUDE FILE unpaged_page_tables.incl.alm
                                   7-4  
                                   7-5  
                                   7-6  	"Created 03/01/84  1645.1 est Thu by convert_include_file,
                                   7-7  	"   Version of 11/07/82  1445.1 est Sun.
                                   7-8  
                                   7-9  	"Made from >bootload>update>incl>unpaged_page_tables.incl.pl1,
                                  7-10  	"   modified 03/01/84  1645.1 est Thu
                                  7-11  
                                  7-12  "
                                  7-13  "	Structure upt
                                  7-14  "
                                  7-15  
                        000000    7-16  	equ	upt.sst_absloc,0
                        000001    7-17  	equ	upt.sst_last_loc,1
                        000002    7-18  	equ	upt.upt_absloc,2
                        000003    7-19  	equ	upt.upt_last_loc,3
                        000004    7-20  	equ	upt.iupt_absloc,4
                        000005    7-21  	equ	upt.iupt_last_loc,5
                        000006    7-22  	equ	upt.current_length,6
                        000007    7-23  	equ	upt.max_length,7
                        000010    7-24  	equ	upt.first_entry,8		" LEVEL 2
                                  7-25  
                                  7-26  
                                  7-27  "
                                  7-28  "	Structure upt_entry
                                  7-29  "
                        000000    7-30  	equ	upt_entry.size,0
                        000001    7-31  	equ	upt_entry.segno,1
                        000002    7-32  	equ	upt_entry.ptws,2
                                  7-33  
                                  7-34       "END INCLUDE FILE unpaged_page_tables.incl.alm
                                    47  
                                    48  "
                                    49  "	The main syserr entry is called by ring 0 procedures to type a message on the
                                    50  "	operator's console.  Its main functions is to transfer this call to syserr_real.
                                    51  "	If all the conditions listed below are true then we will also adjust the current
                                    52  "	stack so the next frame will be at a high location in the stack.  This is done so
                                    53  "	the stack history of the procedures which have just returned to the caller of syserr
                                    54  "	will not be destroyed.  This stack history may be useful in analyzing a dump of
                                    55  "	the crash.  The conditions which must all be met before the stack is changed are:
                                    56  "	1.  The syserr code must be (1).  This => a fatal error.
                                    57  "	2.  The current stack must be the per-process stack.
                                    58  "	3.  The per-process stack must be paged.
                                    59  "	4.  The page table lock must NOT be locked.
                                    60  "	5.  The current stack must not be wired
                                    61  "	6.  Interrupts must not be masked
                                    62  
    000000                          63  syserr:
    000000  aa   000000 2270 03     64  	ldx7	0,du			set code to be syserr call
    000001  0a   000007 7100 00     65  	tra	common
    000002                          66  binary:
    000002  aa   000001 2270 03     67  	ldx7	1,du			set code to be syserr$binary call
    000003  0a   000007 7100 00     68  	tra	common
    000004                          69  error_code:
    000004  aa   000002 2270 03     70  	ldx7	2,du			set code to be syserr$error_code call
    000005  0a   000007 7100 00     71  	tra	common
                                    72  
    000006                          73  multiple_binary:
    000006  aa   000003 2270 03     74  	ldx7	3,du			set code to be syserr$multiple_binary
                                    75  
    000007                          76  common:
    000007  aa   000001 2350 07     77  	lda	1,dl			check for kill call
    000010  aa  0 00002 1151 20     78  	cmpa	ap|2,*			ARG 1 = 1
    000011  0a   000044 6010 00     79  	tnz	no_reset			Not a kill call so don't reset
                                    80  
    000012  aa  6 00000 2131 00     81  	epaq	sp|0			Ptr to stack to AQ
    000013  aa   000000 6210 01     82  	eax1	0,au			Seg no to X1
    000014  4a  4 00010 1011 20     83  	cmpx1	<pds>|[stack_0_ptr]	          Are we on the per-process stack?
    000015  0a   000044 6010 00     84  	tnz	no_reset
                                    85  
    000016  aa   000001 7350 00     86  	als	1			Segno * 2
    000017  4a  4 00012 2371 20     87  	ldaq	<dseg>|0,au		Get SDW of stack
    000020  aa   000014 7710 00     88  	arl	sdw.add_shift		abs addr of stack's page table
                                    89  
    000021  4a  4 00014 1151 20     90  	cmpa	unpaged_page_tables$0+upt.sst_last_loc	check if unpaged
    000022  0a   000044 6050 00     91  	tpl	no_reset			out of sst => unpaged
    000023  4a  4 00016 1751 20     92  	sba	unpaged_page_tables$0+upt.sst_absloc	offset of stack's PT in SST
    000024  0a   000044 6040 00     93  	tmi	no_reset
                                    94  
    000025  4a  4 00020 2351 20     95  	lda	sst$,al			PTW for page 0 of stack
    000026  aa   000020 3150 07     96  	cana	ptw.wired,dl		is it wired
    000027  0a   000044 6010 00     97  	tnz	no_reset			yes
                                    98  	
    000030  4a  4 00022 2341 20     99  	szn	sst$ptl			is page table locked?
    000031  0a   000044 6010 00    100  	tnz	no_reset			yes
                                   101  
    000032                         102  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
    000032  4a  4 00024 7213 20    103  	lxl1	prds$processor_tag
    000033  4a  4 00026 7613 20    104  	lprpab	scs$mask_ptr,1
    000034  4a  4 00030 7163 20    105  	xec	scs$read_mask,1		read current mask
    000035  4a  4 00032 1173 20    106  	cmpaq	scs$sys_level		are interrupts masked
    000036  0a   000044 6002 00    107  	tze	no_reset			yes
    000037                         108  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
                                   109  
    000037  aa  6 00022 2371 00    110  	ldaq	sp|stack_frame.next_sp 	pick up foward ptr
    000040  aa  6 00026 7571 00    111  	staq	sp|stack_frame.entry_ptr 	save a copy
    000041  aa   030000 2360 03    112  	ldq	die_offset,du		Next frame way up in stack.
    000042  aa  6 00023 7561 00    113  	stq	sp|stack_frame.next_sp+1 	Reset foward ptr
    000043  aa  7 00025 7561 00    114  	stq	sb|stack_header.stack_end_ptr+1
                                   115  
    000044                         116  no_reset:
    000044  0a   000045 7100 17    117  	tra	*+1,7		transfer to correct syserr_real entry
    000045  4a  4 00034 7101 20    118  	tra	<syserr_real>|[syserr_real]
    000046  4a  4 00036 7101 20    119  	tra	<syserr_real>|[binary]
    000047  4a  4 00040 7101 20    120  	tra	<syserr_real>|[error_code]
    000050  4a  4 00042 7101 20    121  	tra	<syserr_real>|[multiple_binary]
                                   122  
                                   123  	end
ENTRY SEQUENCES
     
    000051  5a   000032 0000 00
    000052  aa  7 00046 2721 20
    000053  0a   000000 7100 00
    000054  5a   000025 0000 00
    000055  aa  7 00046 2721 20
    000056  0a   000002 7100 00
    000057  5a   000017 0000 00
    000060  aa  7 00046 2721 20
    000061  0a   000004 7100 00
    000062  5a   000010 0000 00
    000063  aa  7 00046 2721 20
    000064  0a   000006 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000066  5a   000003 000000 
    000067  5a   000046 600000 
    000070  aa   000000 000000 
    000071  55   000010 000002 
    000072  5a   000002 400003 
    000073  55   000006 000010 
    000074  aa  006 163 171 163
    000075  aa  145 162 162 000
    000076  55   000017 000003 
    000077  0a   000063 500000 
    000100  55   000013 000003 
    000101  aa  017 155 165 154         multiple_binary
    000102  aa  164 151 160 154
    000103  aa  145 137 142 151
    000104  aa  156 141 162 171
    000105  55   000025 000010 
    000106  0a   000060 500000 
    000107  55   000022 000003 
    000110  aa  012 145 162 162         error_code
    000111  aa  157 162 137 143
    000112  aa  157 144 145 000
    000113  55   000032 000017 
    000114  0a   000055 500000 
    000115  55   000030 000003 
    000116  aa  006 142 151 156         binary
    000117  aa  141 162 171 000
    000120  55   000037 000025 
    000121  0a   000052 500000 
    000122  55   000035 000003 
    000123  aa  006 163 171 163         syserr
    000124  aa  145 162 162 000
    000125  55   000002 000032 
    000126  6a   000000 400002 
    000127  55   000042 000003 
    000130  aa  014 163 171 155         symbol_table
    000131  aa  142 157 154 137
    000132  aa  164 141 142 154
    000133  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000134  aa   000000 000015 
    000135  5a   000017 000000 
    000136  5a   000025 000000 
    000137  5a   000010 000000 
    000140  5a   000032 000000 
    000141  aa   000000 000000 
    000142  aa   000000 000000 
    000143  5a   000037 000000 
    000144  aa   000000 000000 
    000145  aa   000000 000000 
    000146  aa   000000 000000 
    000147  aa   000000 000000 
    000150  aa   000000 000000 
    000151  aa   000000 000000 

EXTERNAL NAMES

    000152  aa  013 163 171 163         syserr_real
    000153  aa  145 162 162 137
    000154  aa  162 145 141 154
    000155  aa  011 163 171 163         sys_level
    000156  aa  137 154 145 166
    000157  aa  145 154 000 000
    000160  aa  011 162 145 141         read_mask
    000161  aa  144 137 155 141
    000162  aa  163 153 000 000
    000163  aa  010 155 141 163         mask_ptr
    000164  aa  153 137 160 164
    000165  aa  162 000 000 000
    000166  aa  003 163 143 163         scs
    000167  aa  015 160 162 157         processor_tag
    000170  aa  143 145 163 163
    000171  aa  157 162 137 164
    000172  aa  141 147 000 000
    000173  aa  004 160 162 144         prds
    000174  aa  163 000 000 000
    000175  aa  003 160 164 154         ptl
    000176  aa  003 163 163 164         sst
    000177  aa  023 165 156 160         unpaged_page_tables
    000200  aa  141 147 145 144
    000201  aa  137 160 141 147
    000202  aa  145 137 164 141
    000203  aa  142 154 145 163
    000204  aa  004 144 163 145         dseg
    000205  aa  147 000 000 000
    000206  aa  013 163 164 141         stack_0_ptr
    000207  aa  143 153 137 060
    000210  aa  137 160 164 162
    000211  aa  003 160 144 163         pds

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000212  aa   000004 000000 
    000213  55   000064 000013 
    000214  aa   000004 000000 
    000215  55   000064 000022 
    000216  aa   000004 000000 
    000217  55   000064 000030 
    000220  aa   000004 000000 
    000221  55   000064 000064 
    000222  aa   000004 000000 
    000223  55   000100 000067 
    000224  aa   000004 000000 
    000225  55   000100 000072 
    000226  aa   000004 000000 
    000227  55   000100 000075 
    000230  aa   000004 000000 
    000231  55   000105 000101 
    000232  aa   000004 000000 
    000233  55   000110 000107 
    000234  aa   000003 000000 
    000235  5a   000110 000000 
    000236  aa   000003 000000 
    000237  5a   000111 000000 
    000240  aa   000003 000000 
    000241  5a   000116 000000 
    000242  aa   000004 000000 
    000243  55   000123 000120 
    000244  aa   000001 000000 
    000245  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000246  5a   000124 000000 
    000247  5a   000126 000000 
    000250  5a   000130 000000 
    000251  5a   000132 000000 
    000252  5a   000134 000000 
    000253  5a   000136 000000 
    000254  5a   000140 000000 
    000255  5a   000142 000000 
    000256  5a   000144 000000 
    000257  5a   000146 000000 
    000260  5a   000150 000000 
    000261  5a   000150 000001 
    000262  5a   000152 000000 
    000263  5a   000154 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000066 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000044 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         pds|stack_0_ptr
    000011  5a   000175 0000 00
    000012  9a   777766 0000 46         dseg|       
    000013  5a   000174 0000 01
    000014  9a   777764 0000 46         unpaged_page_tables|       
    000015  5a   000173 0000 00
    000016  9a   777762 0000 46         unpaged_page_tables|       
    000017  5a   000172 0000 00
    000020  9a   777760 0000 46         sst|       
    000021  5a   000171 0000 05
    000022  9a   777756 0000 46         sst|ptl
    000023  5a   000170 0000 00
    000024  9a   777754 0000 46         prds|processor_tag
    000025  5a   000167 0000 00
    000026  9a   777752 0000 46         scs|mask_ptr
    000027  5a   000166 0000 11
    000030  9a   777750 0000 46         scs|read_mask
    000031  5a   000165 0000 11
    000032  9a   777746 0000 46         scs|sys_level
    000033  5a   000164 0000 00
    000034  9a   777744 0000 46         syserr_real|syserr_real
    000035  5a   000163 0000 00
    000036  9a   777742 0000 46         syserr_real|binary
    000037  5a   000162 0000 00
    000040  9a   777740 0000 46         syserr_real|error_code
    000041  5a   000161 0000 00
    000042  9a   777736 0000 46         syserr_real|multiple_binary
    000043  5a   000160 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   241202 772745 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000307 
    000020  aa   000000 000231 
    000021  aa   000252 000242 
    000022  aa   000274 000231 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000010 
    000066  aa   000126 000035 
    000067  aa   175453 017657 
    000070  aa   000000 117547 
    000071  aa   176562 200000 
    000072  aa   000136 000031 
    000073  aa   102456 350276 
    000074  aa   000000 110246 
    000075  aa   520730 400000 
    000076  aa   000145 000035 
    000077  aa   106701 740574 
    000100  aa   000000 110670 
    000101  aa   206425 200000 
    000102  aa   000155 000031 
    000103  aa   102456 350277 
    000104  aa   000000 110246 
    000105  aa   520732 400000 
    000106  aa   000164 000035 
    000107  aa   106701 740565 
    000110  aa   000000 110670 
    000111  aa   206245 200000 
    000112  aa   000174 000041 
    000113  aa   052721 247134 
    000114  aa   000000 105272 
    000115  aa   317215 400000 
    000116  aa   000205 000042 
    000117  aa   147777 464111 
    000120  aa   000000 115000 
    000121  aa   507463 000000 
    000122  aa   000216 000051 
    000123  aa   127236 043612 
    000124  aa   000000 112724 
    000125  aa   701752 000000 
    000126  aa   076163 160145          >spec>install>1111>syserr.alm
    000127  aa   143076 151156 
    000130  aa   163164 141154 
    000131  aa   154076 061061 
    000132  aa   061061 076163 
    000133  aa   171163 145162 
    000134  aa   162056 141154 
    000135  aa   155040 040040 
    000136  aa   076154 144144          >ldd>include>ptw.incl.alm
    000137  aa   076151 156143 
    000140  aa   154165 144145 
    000141  aa   076160 164167 
    000142  aa   056151 156143 
    000143  aa   154056 141154 
    000144  aa   155040 040040 
    000145  aa   076154 144144          >ldd>include>ptw.l68.incl.alm
    000146  aa   076151 156143 
    000147  aa   154165 144145 
    000150  aa   076160 164167 
    000151  aa   056154 066070 
    000152  aa   056151 156143 
    000153  aa   154056 141154 
    000154  aa   155040 040040 
    000155  aa   076154 144144          >ldd>include>sdw.incl.alm
    000156  aa   076151 156143 
    000157  aa   154165 144145 
    000160  aa   076163 144167 
    000161  aa   056151 156143 
    000162  aa   154056 141154 
    000163  aa   155040 040040 
    000164  aa   076154 144144          >ldd>include>sdw.l68.incl.alm
    000165  aa   076151 156143 
    000166  aa   154165 144145 
    000167  aa   076163 144167 
    000170  aa   056154 066070 
    000171  aa   056151 156143 
    000172  aa   154056 141154 
    000173  aa   155040 040040 
    000174  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000175  aa   076151 156143 
    000176  aa   154165 144145 
    000177  aa   076163 164141 
    000200  aa   143153 137146 
    000201  aa   162141 155145 
    000202  aa   056151 156143 
    000203  aa   154056 141154 
    000204  aa   155040 040040 
    000205  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000206  aa   076151 156143 
    000207  aa   154165 144145 
    000210  aa   076163 164141 
    000211  aa   143153 137150 
    000212  aa   145141 144145 
    000213  aa   162056 151156 
    000214  aa   143154 056141 
    000215  aa   154155 040040 
    000216  aa   076154 144144          >ldd>include>unpaged_page_tables.incl.alm
    000217  aa   076151 156143 
    000220  aa   154165 144145 
    000221  aa   076165 156160 
    000222  aa   141147 145144 
    000223  aa   137160 141147 
    000224  aa   145137 164141 
    000225  aa   142154 145163 
    000226  aa   056151 156143 
    000227  aa   154056 141154 
    000230  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           2    binary                   syserr:        24,   66,  119.
        1170    call_offset              stack_header:        80.
           7    common                   syserr:        65,   68,   71,   76.
          17    core_ptw.add_type_mask   ptw.l68:       19.
          16    core_ptw.add_type_shift  ptw.l68:       18.
           3    core_ptw.df_no_mask      ptw.l68:       32.
           0    core_ptw.df_no_shift     ptw.l68:       31.
       10000    core_ptw.er              ptw.l68:       21.
       20000    core_ptw.first           ptw.l68:       20.
           0    core_ptw.flags           ptw.l68:       17.
       37777    core_ptw.frame_mask      ptw.l68:       16.
          26    core_ptw.frame_shift     ptw.l68:       15.
         200    core_ptw.nypd            ptw.l68:       25.
          10    core_ptw.os              ptw.l68:       29.
         100    core_ptw.phm             ptw.l68:       26.
         400    core_ptw.phm1            ptw.l68:       24.
        1000    core_ptw.phu             ptw.l68:       23.
          40    core_ptw.phu1            ptw.l68:       27.
        2000    core_ptw.unusable1       ptw.l68:       22.
           4    core_ptw.valid           ptw.l68:       30.
          20    core_ptw.wired           ptw.l68:       28.
       30000    die_offset               syserr:        28,  112.
                dseg                     syserr:        87.
        1174    entry_offset             stack_header:        84.
           4    error_code               syserr:        25,   69,  120.
                mask_ptr                 syserr:       104.
           6    multiple_binary          syserr:        26,   73,  121.
          44    no_reset                 syserr:        79,   84,   91,   93,   97,  100,  107,  116.
                pds                      syserr:        83.
                prds                     syserr:       103.
                processor_tag            syserr:       103.
                ptl                      syserr:        99.
           0    ptw.add                  ptw.l68:       37.
          17    ptw.add_type_mask        ptw.l68:       40.
          16    ptw.add_type_shift       ptw.l68:       39.
           3    ptw.df_no_mask           ptw.l68:       53.
           0    ptw.df_no_shift          ptw.l68:       52.
       10000    ptw.er                   ptw.l68:       42.
       20000    ptw.first                ptw.l68:       41.
           0    ptw.flags                ptw.l68:       38.
         200    ptw.nypd                 ptw.l68:       46.
          10    ptw.os                   ptw.l68:       50.
         100    ptw.phm                  ptw.l68:       47.
         400    ptw.phm1                 ptw.l68:       45.
        1000    ptw.phu                  ptw.l68:       44.
          40    ptw.phu1                 ptw.l68:       48.
        2000    ptw.unusable1            ptw.l68:       43.
           4    ptw.valid                ptw.l68:       51.
          20    ptw.wired                syserr:        96,
                                         ptw.l68:       49.
        1171    push_offset              stack_header:        81.
                read_mask                syserr:       105.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
                scs                      syserr:       104,  105,  106.
          17    sdw.access_mask          sdw.l68:       42.
          21    sdw.access_shift         sdw.l68:       41.
           1    sdw.access_word          sdw.l68:       40.
          14    sdw.add_shift            syserr:        88,
                                         sdw.l68:       18.
           0    sdw.add_word             sdw.l68:       17.
       37777    sdw.bound_mask           sdw.l68:       39.
          25    sdw.bound_shift          sdw.l68:       38.
           1    sdw.bound_word           sdw.l68:       37.
       40000    sdw.cache                sdw.l68:       56.
           1    sdw.cache_word           sdw.l68:       55.
           3    sdw.df_no_mask           sdw.l68:       35.
           0    sdw.df_no_shift          sdw.l68:       34.
           0    sdw.df_no_word           sdw.l68:       33.
       37777    sdw.entry_bound_mask     sdw.l68:       59.
           0    sdw.entry_bound_shift    sdw.l68:       58.
           1    sdw.entry_bound_word     sdw.l68:       57.
           2    sdw.execute              sdw.l68:       46.
           1    sdw.execute_word         sdw.l68:       45.
      100000    sdw.not_a_gate           sdw.l68:       54.
           1    sdw.not_a_gate_word      sdw.l68:       53.
      400000    sdw.privileged           sdw.l68:       50.
           1    sdw.privileged_word      sdw.l68:       49.
           7    sdw.r1_mask              sdw.l68:       24.
          11    sdw.r1_shift             sdw.l68:       23.
           0    sdw.r1_word              sdw.l68:       22.
           7    sdw.r2_mask              sdw.l68:       27.
           6    sdw.r2_shift             sdw.l68:       26.
           0    sdw.r2_word              sdw.l68:       25.
           7    sdw.r3_mask              sdw.l68:       30.
           3    sdw.r3_shift             sdw.l68:       29.
           0    sdw.r3_word              sdw.l68:       28.
           4    sdw.read                 sdw.l68:       44.
           1    sdw.read_word            sdw.l68:       43.
         777    sdw.rings_mask           sdw.l68:       21.
           3    sdw.rings_shift          sdw.l68:       20.
           0    sdw.rings_word           sdw.l68:       19.
      200000    sdw.unpaged              sdw.l68:       52.
           1    sdw.unpaged_word         sdw.l68:       51.
           4    sdw.valid                sdw.l68:       32.
           0    sdw.valid_word           sdw.l68:       31.
           1    sdw.write                sdw.l68:       48.
           1    sdw.write_word           sdw.l68:       47.
           2    sdw_size                 sdw.l68:       15.
                sst                      syserr:        95,   99.
          73    stach_header.trace_top_ptr     stack_header:        62.
                stack_0_ptr              syserr:        83.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    syserr:       111,
                                         stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      syserr:       110,  113,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     syserr:       114,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    syserr                   syserr:        23,   63.
                syserr_real              syserr:       118,  119,  120,  121.
                sys_level                syserr:       106.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
                unpaged_page_tables      syserr:        90,   92.
           6    upt.current_length       unpaged_page_tables:       22.
          10    upt.first_entry          unpaged_page_tables:       24.
           4    upt.iupt_absloc          unpaged_page_tables:       20.
           5    upt.iupt_last_loc        unpaged_page_tables:       21.
           7    upt.max_length           unpaged_page_tables:       23.
           0    upt.sst_absloc           syserr:        92,
                                         unpaged_page_tables:       16.
           1    upt.sst_last_loc         syserr:        90,
                                         unpaged_page_tables:       17.
           2    upt.upt_absloc           unpaged_page_tables:       18.
           3    upt.upt_last_loc         unpaged_page_tables:       19.
           2    upt_entry.ptws           unpaged_page_tables:       32.
           1    upt_entry.segno          unpaged_page_tables:       31.
           0    upt_entry.size           unpaged_page_tables:       30.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
