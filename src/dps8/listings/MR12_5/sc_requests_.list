	COMPILATION LISTING OF SEGMENT sc_requests_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1016.3 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 /* format: style2 */
       10 
       11 sc_requests_:
       12      procedure;
       13 
       14 /**** SC_REQUESTS_
       15*      ssu requests for the the system control subsystem.
       16*
       17*      This program used to be execute_sc_command_.
       18*
       19*      The smarts about setting up environments went to 
       20*      sc_process_command_line_, and the commands landed here.  
       21*
       22*      WHEN
       23*      this procedure is entered, all I/O switches are correctly
       24*      set up to allow reading and writing (or, in the case of sac,
       25*      to abort appropriately).
       26*
       27*      ALL
       28*      the commands in here can be written as if they were executing
       29*      in a normal user environment, just like the ones in admin_.
       30*
       31*      THIS 
       32*      procedure did not used to mask event calls, in spite of the
       33*      clear requirement that anything that could conceivable block
       34*      do so. Masking now takes place in sc_process_command_line_.
       35**/
       36 
       37 /****
       38*   Modified 01/82     B. I. Margulies. answer yes sc_command shut.
       39*   Modified 01/02/82  E. N. Kittlitz.  added sc_stat_$Go.
       40*   Modified 5/82	  E. N. Kittlitz.  New AS initialization.
       41*   Modified 12/82	  E. N. Kittlitz.  Version 2 communications segment. encrypt admin password.
       42*   Modified 1/83	  E. N. Kittlitz.  handle finish in admin mode.
       43*   Modified 8/83	  K. Loepere       call_bce.
       44*   Modified 1/84	  K. Loepere       make qedx_ the message editor.
       45*   Rewritten for ssu_ 1984-10-26 BIM
       46*   Modified 1985-01-08, BIM: mc access control, fix operator login for boot star.
       47*   Modified 1985-01-28, E. Swenson: to call lg_ctl_ for login/logout messages.
       48*   Modified 1985-01-29, E. Swenson: to fix operator login for boot star.
       49*   Modified 1985-02-18, E. Swenson: to fix operator login for other problems.
       50**/
       51 
       52 /****^  HISTORY COMMENTS:
       53*  1) change(86-08-01,Cox), approve(87-05-25,MCR7690), audit(87-03-16,GDixon),
       54*     install(87-08-03,MR12.1-1055):
       55*     Modified to support virtual MC terminals.
       56*  2) change(87-02-05,GDixon), approve(87-05-25,MCR7690),
       57*     audit(87-05-06,Parisek), install(87-08-03,MR12.1-1055):
       58*     Modified for a change to mc_anstbl.incl.pl1.  Correct coding standard
       59*     violations.
       60*  3) change(87-03-30,Lippard), approve(87-04-27,MCR7673),
       61*     audit(87-05-15,Fawcett), install(87-05-26,MR12.1-1036):
       62*     Added set_time_zone.
       63*  4) change(87-06-10,GDixon), approve(87-04-27,MCR7673),
       64*     audit(87-06-10,Parisek), install(87-08-03,MR12.1-1055):
       65*      A) Merge changes 2 & 3.
       66*      B) Add operator message documentation for the new call to sys_log_ in
       67*         set_time_zone.
       68*  5) change(87-06-23,Parisek), approve(87-06-23,MCR7690),
       69*     audit(87-08-06,GDixon), install(87-08-11,MR12.1-1079):
       70*     Correct an ioa_ control string error.
       71*  6) change(87-07-17,Parisek), approve(87-07-17,MCR7716),
       72*     audit(87-08-07,Fawcett), install(87-08-11,MR12.1-1079):
       73*     Call call_ec_ subroutine instead of exec_com for executing the ssu.ec so
       74*     errors can be detected, displayed and ec will continue execution.
       75*                                                   END HISTORY COMMENTS */
       76 
       77 	declare SCI_ptr		 pointer;
       78 	declare SCI_info_ptr	 pointer;
       79 
       80 	dcl     al		 fixed bin (21);
       81 	dcl     ap		 pointer;
       82 	dcl     arg_count		 fixed bin;
       83 	dcl     argument		 char (al) based (ap);
       84 	dcl     code		 fixed bin (35);
       85 	dcl     destination		 char (32) varying;
       86 	dcl     found_zone		 bit (1) aligned;
       87 	dcl     lang_index		 fixed bin;
       88 	dcl     message		 char (500);
       89 	dcl     message_length	 fixed bin (21);
       90 	dcl     operator_name	 char (32);
       91 	dcl     old_name		 char (32);
       92 	dcl     old_time_zone	 char (4) aligned;
       93 	dcl     password		 char (8);
       94 	dcl     reason		 char (100);
       95 	dcl     sci_ptr		 pointer;
       96 	dcl     temp_line		 char (500) varying;
       97 	dcl     time_zone		 char (4) aligned;
       98 	dcl     yea_shutdown	 bit (1) aligned;
       99 	dcl     zone_index		 fixed bin;
      100 
      101 	dcl     as_$as_init		 entry (fixed bin (35));
      102 	dcl     as_$go		 entry (fixed bin (35));
      103 	dcl     as_$reset		 entry ();
      104 	dcl     as_$shut_ok		 entry (fixed bin (35));
      105 	dcl     as_$startup		 entry (fixed bin (35));
      106 	dcl     command_query_	 entry () options (variable);
      107 	dcl     command_query_$yes_no	 entry options (variable);
      108 	dcl     date_time_$set_zone	 entry (char (*), fixed bin (35));
      109 	dcl     call_ec_		 entry options (variable);
      110 	dcl     hphcs_$call_bce	 entry ();
      111 	dcl     hphcs_$set_system_time_zone
      112 				 entry (char (4) aligned, fixed bin (35));
      113 	dcl     ioa_		 entry () options (variable);
      114 	dcl     ioa_$rs		 entry () options (variable);
      115 	dcl     ipc_$mask_ev_calls	 entry (fixed bin (35));
      116 	dcl     ipc_$unmask_ev_calls	 entry (fixed bin (35));
      117 	dcl     lg_ctl_$login_operator entry (ptr, bit (1) aligned, char (*), char (*));
      118 	dcl     lg_ctl_$logout_operator
      119 				 entry (ptr, char (*), char (*));
      120 	dcl     mc_check_access_$quit	 entry (pointer, character (*), fixed binary (35));
      121 	dcl     mc_check_access_$reply entry (pointer, character (*), fixed binary (35));
      122 	dcl     mc_commands_$intercom	 entry (character (*) var, pointer, fixed bin (21), pointer, fixed binary (35));
      123 	dcl     mc_commands_$quit_command
      124 				 entry (char (*), ptr, fixed bin (35));
      125 	dcl     mc_commands_$reply_command
      126 				 entry (character (*) var, pointer, fixed bin (21), pointer, fixed binary (35));
      127 	dcl     mc_commands_$sign_in	 entry (ptr, char (*), char (*));
      128 	dcl     mc_commands_$sign_out	 entry (ptr, char (*), fixed bin (35));
      129 	dcl     pnt_manager_$login_get_entry
      130 				 entry (char (*), char (*), ptr, fixed bin (35));
      131 	dcl     read_password_	 entry (character (*), character (*));
      132 	dcl     restart_mc_ttys_	 entry;
      133 	dcl     sc_abort_line_util_$real_abort_line
      134 				 entry () options (variable);
      135 	dcl     sc_admin_mode_	 entry;
      136 	dcl     sc_edit_motd_	 entry;
      137 	dcl     sc_ipc_mask_$remask	 entry (fixed binary);
      138 	dcl     sc_ipc_mask_$unmask	 entry (fixed binary);
      139 	dcl     scramble_		 entry (char (8)) returns (char (8));
      140 	dcl     ssu_$abort_line	 entry () options (variable);
      141 	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
      142 	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
      143 	dcl     ssu_$print_message	 entry () options (variable);
      144 	dcl     sys_log_		 entry options (variable);
      145 	dcl     sys_info$time_zone	 char (4) aligned ext static;
      146 
      147 	dcl    (error_table_$id_not_found,
      148 	        error_table_$noentry,
      149                   error_table_$unknown_zone)  fixed bin (35) ext static;
      150 
      151 	dcl    (after, addr, before, byte, length, ltrim, null, rtrim)
      152      				 builtin;
      153 	dcl     cleanup		 condition;
      154 
      155 	dcl     (
      156 	        GRANTED		 initial ("1"b),
      157 	        DENIED		 initial ("0"b)
      158 	        )			 bit (1) aligned internal static options (constant);
      159 
      160 no_start_up:
      161      entry (SCI_ptr, SCI_info_ptr);
      162 	call setup;
      163 
      164 	sc_stat_$did_part1, sc_stat_$did_part2, sc_stat_$did_part3 = "1"b;
      165 	return;
      166 
      167 reply:
      168      entry (SCI_ptr, SCI_info_ptr);
      169 	call setup;
      170 
      171 /**** THIS IS A SPECIAL COMMAND -- called with one un-parsed argument. */
      172 
      173 	if arg_count = 0
      174 	then call ssu_$abort_line (sci_ptr, 0, "Usage: reply SOURCE LINE");
      175 
      176 	call return_in_debug;
      177 	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
      178 	temp_line = rtrim (ltrim (argument));
      179 	destination = before (temp_line, " ");
      180 	if destination = temp_line			/* no argument, all we have is a destination */
      181 	then do;
      182 		destination = temp_line;
      183 		message = byte (10);
      184 		message_length = 1;
      185 	     end;
      186 	else call ioa_$rs ("^a", message, message_length, after (temp_line, " "));
      187 
      188 	call mc_check_access_$reply (sc_subsystem_info_ptr, (destination), code);
      189 	if code = error_table_$noentry
      190 	then call ssu_$abort_line (sci_ptr, code, "No MC ACS segment exists for the source ^a.", destination);
      191 	else if code ^= 0
      192 	then call ssu_$abort_line (sci_ptr, code, "Reply not permitted to message coordinator source ^a.", destination);
      193 
      194 	call mc_commands_$reply_command (destination, addr (message), message_length, sc_subsystem_info.mc_atep, code);
      195 	if code ^= 0
      196 	then call ssu_$abort_line (sci_ptr, code, "Reply not sent to ^a.", destination);
      197 	return;
      198 
      199 
      200 admin:
      201      entry (SCI_ptr, SCI_info_ptr);
      202 
      203 	call setup;
      204 	if arg_count > 0
      205 	then call ssu_$abort_line (sci_ptr, 0, "Usage: admin");
      206 
      207 	call sc_admin_mode_;			/* sc_stat_ carries all needed parameters */
      208 	return;
      209 
      210 bce:
      211      entry (SCI_ptr, SCI_info_ptr);
      212 	call setup;
      213 	if arg_count > 0
      214 	then call ssu_$abort_line (sci_ptr, 0, "Usage: bce");
      215 	call return_in_debug;
      216 	if ^sc_stat_$test_mode
      217 	then call hphcs_$call_bce;			/* call bce. */
      218 	return;
      219 
      220 go:
      221      entry (SCI_ptr, SCI_info_ptr);
      222 
      223 	call setup;
      224 
      225 	if arg_count > 0
      226 	then call ssu_$abort_line (sci_ptr, 0, "Usage: go");
      227 	call return_in_debug;
      228 
      229 GO_COMMON:
      230 	sc_stat_$Go_typed = "1"b;			/* Indicate 'go' has been requested */
      231 	if ^sc_stat_$did_part2
      232 	then /* Execute system startup, second part. */
      233 	     call call_system_start_up_ec ("part2");
      234 	sc_stat_$did_part2 = "1"b;
      235 	call as_$go (code);				/* Now make all lines answer. */
      236 	if code ^= 0
      237 	then call ssu_$abort_line (sci_ptr, code, "Answering Service startup failed.");
      238 
      239 	sc_stat_$Go = "1"b;				/* set the AS listening flag */
      240 	if ^sc_stat_$did_part3
      241 	then /* Execute system startup, third part */
      242 	     call call_system_start_up_ec ("part3");
      243 	sc_stat_$did_part3 = "1"b;
      244 	ip = as_data_$rs_ptrs (0);
      245 	if installation_parms.require_operator_login
      246 	then sc_stat_$no_operator_login = "0"b;		/* Close the gate */
      247 	if installation_parms.vchn_requires_accept
      248 	then sc_stat_$vchn_requires_accept = installation_parms.vchn_requires_accept;
      249 						/* "login personid -op -vchn foo" must be accepted by
      250*						   operator if personid is not signed on system console */
      251 	return;
      252 
      253 message:
      254      entry (SCI_ptr, SCI_info_ptr);			/* edit the MOTD */
      255 
      256 	call setup;
      257 	if arg_count > 0
      258 	then call ssu_$abort_line (sci_ptr, 0, "Usage: message");
      259 
      260 	call return_in_debug;
      261 
      262 	call sc_edit_motd_;
      263 	return;
      264 
      265 
      266 multics:
      267      entry (SCI_ptr, SCI_info_ptr);
      268 
      269 	call setup;
      270 	if arg_count > 0
      271 	then call ssu_$abort_line (sci_ptr, 0, "Usage: multics");
      272 
      273 	call return_in_debug;
      274 
      275 	sc_stat_$Multics_typed = "1"b;		/* indicate 'multics' has been requested */
      276 	if ^sc_stat_$did_part1
      277 	then /* Execute initial part of system startup. */
      278 	     call call_system_start_up_ec ("part1");
      279 	sc_stat_$did_part1 = "1"b;
      280 	call as_$as_init (code);			/* Initialize answering service (special session). */
      281 
      282 	if code ^= 0
      283 	then call ssu_$abort_line (sci_ptr, code, "Fix problem and retry.");
      284 
      285 	sc_stat_$Multics = "1"b;			/* set the Multics-session flag */
      286 	return;
      287 
      288 
      289 set_time_zone:
      290      entry (SCI_ptr, SCI_info_ptr);
      291 
      292 	call setup;
      293 	if arg_count ^= 1
      294 	then call ssu_$abort_line (sci_ptr, 0, "Usage: stz zone");
      295 
      296 	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
      297 
      298 	if al > length (time_zone)
      299 	then call ssu_$abort_line (sci_ptr, error_table_$unknown_zone, "^a",
      300 	     argument);
      301 
      302 	time_zone = argument;
      303 
      304 	found_zone = "0"b;				/* Validate zone.*/
      305 	do lang_index = 1 to ti_zone.number_lang while (^found_zone);
      306 	     do zone_index = 1 to ti_zone.number_zone while (^found_zone);
      307 		if ti_zone.short (lang_index, zone_index) = time_zone
      308 		then found_zone = "1"b;
      309 	     end;					/* zones */
      310 	end;					/* languages */
      311 
      312 	if ^found_zone
      313 	then call ssu_$abort_line (sci_ptr, error_table_$unknown_zone, "^a",
      314 	     argument);
      315 
      316 	call return_in_debug;
      317 
      318 	old_time_zone = sys_info$time_zone;		/* Save old zone */
      319 
      320 	call hphcs_$set_system_time_zone (time_zone, code);
      321 	if code ^= 0				/* Set time zone */
      322 	then call ssu_$abort_line (sci_ptr, code, "^a",	/* for the system*/
      323 	     time_zone);
      324 
      325 	call date_time_$set_zone ((time_zone), code);	/* Set zone for  */
      326 	if code ^= 0				/* Initializer   */
      327 	then call ssu_$abort_line (sci_ptr, code, "^a", time_zone);
      328 
      329 	call sys_log_ (SL_LOG,			/* Log the change*/
      330 	     "^a: Changed time zone from ^a to ^a.",
      331 	     "sc_requests_ (set_time_zone)", old_time_zone, time_zone);
      332 	return;
      333 
      334 
      335 shutdown:
      336      entry (SCI_ptr, SCI_info_ptr);
      337 
      338 	call setup;
      339 	if arg_count > 0
      340 	then call ssu_$abort_line (sci_ptr, 0, "Usage: shutdown");
      341 
      342 	if sc_stat_$Multics
      343 	then do;
      344 		call as_$shut_ok (code);
      345 		if code ^= 0
      346 		then do;
      347 			yea_shutdown = "0"b;
      348 			call command_query_$yes_no (yea_shutdown, (0), "shutdown",
      349 			     "These users will be logged off without any message. Use ""stop"" to warn and bump users",
      350 			     "^d users still on. Do you want to shut down?  ", code);
      351 			if ^yea_shutdown
      352 			then return;
      353 		     end;
      354 	     end;
      355 	go to sc_stat_$system_shutdown_label;
      356 
      357 startup:
      358      entry (SCI_ptr, SCI_info_ptr);
      359 	call setup;
      360 	if arg_count > 0
      361 	then call ssu_$abort_line (sci_ptr, 0, "Usage: startup");
      362 
      363 	call return_in_debug;
      364 
      365 	sc_stat_$Star_typed = "1"b;			/* indicate that someone typed 'startup'. */
      366 	sc_stat_$Multics_typed = "1"b;
      367 	if ^sc_stat_$did_part1
      368 	then /* Execute first part of system startup */
      369 	     call call_system_start_up_ec ("part1");
      370 	sc_stat_$did_part1 = "1"b;
      371 
      372 	call as_$startup (code);			/* Initialize answering service. (normal session) */
      373 	if code ^= 0
      374 	then return;
      375 	sc_stat_$Multics = "1"b;			/* Get here, and library is loaded... */
      376 	go to GO_COMMON;				/* join common code */
      377 
      378 
      379 force_reset:
      380      entry (SCI_ptr, SCI_info_ptr);
      381 
      382 	call setup;
      383 	if arg_count > 0
      384 	then call ssu_$abort_line (sci_ptr, 0, "Usage: force_reset");
      385 	call return_in_debug;
      386 	if sc_stat_$Multics
      387 	then call as_$reset;
      388 	go to RESET_COMMON;
      389 
      390 reset:
      391      entry (SCI_ptr, SCI_info_ptr);
      392 
      393 	call setup;
      394 	if arg_count > 0
      395 	then call ssu_$abort_line (sci_ptr, 0, "Usage: reset");
      396 	call return_in_debug;
      397 
      398 RESET_COMMON:
      399 	call iox_$control (sc_stat_$master_iocb, "start", null, code);
      400 	if sc_stat_$mc_is_on
      401 	then call restart_mc_ttys_ ();		/* Kick all typers */
      402 	code = 0;					/* Now get unmasked. */
      403 	do while (code = 0);			/* .. by unmasking repeatedly. */
      404 	     call ipc_$unmask_ev_calls (code);		/* unmask event call channels */
      405 	end;
      406 	return;
      407 
      408 cripple:
      409      entry (SCI_ptr, SCI_info_ptr);
      410 	call setup;
      411 	if arg_count > 0
      412 	then call ssu_$abort_line (sci_ptr, 0, "Usage: cripple");
      413 
      414 	call ipc_$mask_ev_calls (code);		/* Stop all ipc signals, no dialups etc. */
      415 	call ssu_$print_message (sci_ptr, 0, "Answering service crippled.");
      416 	return;
      417 
      418 intercom:						/** This is a SPECIAL request, called with 1 argument, the message */
      419      entry (SCI_ptr, SCI_info_ptr);
      420 	call setup;
      421 
      422 	if arg_count ^= 1
      423 	then call ssu_$abort_line (sci_ptr, 0, "Usage: intercom DEST TEXT");
      424 
      425 	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
      426 	temp_line = rtrim (ltrim (argument));
      427 	destination = before (temp_line, " ");
      428 	if destination = ""
      429 	then do;
      430 		destination = temp_line;
      431 		message = byte (10);
      432 		message_length = 1;
      433 	     end;
      434 	else call ioa_$rs ("^a", message, message_length, after (temp_line, " "));
      435 
      436 	call mc_commands_$intercom (destination, addr (message), message_length, sc_subsystem_info.mc_atep, code);
      437 	if code ^= 0
      438 	then call ssu_$abort_line (sci_ptr, code, "Message not sent to ^a.", destination);
      439 	return;
      440 
      441 quit:
      442      entry (SCI_ptr, SCI_info_ptr);
      443 	call setup;
      444 
      445 	if arg_count ^= 1
      446 	then call ssu_$abort_line (sci_ptr, 0, "Usage: quit SOURCE");
      447 	call ssu_$arg_ptr (sci_ptr, 1, ap, al);
      448 	call mc_check_access_$quit (sc_subsystem_info_ptr, argument, code);
      449 	if code ^= 0
      450 	then do;
      451 		if code = error_table_$noentry
      452 		then call ssu_$abort_line (sci_ptr, code, "No MC ACS segment for the message coodrinator source ^a.",
      453 			argument);
      454 		else call ssu_$abort_line (sci_ptr, code, "Quit not permitted to message coordinator source ^a.",
      455 			argument);
      456 	     end;
      457 	call mc_commands_$quit_command (argument, sc_subsystem_info.mc_atep, code);
      458 	if code ^= 0
      459 	then call ssu_$abort_line (sci_ptr, code, "No quit signalled to ^a.", argument);
      460 	return;
      461 
      462 sign_on:
      463      entry (SCI_ptr, SCI_info_ptr);
      464 
      465 	call setup;
      466 	if arg_count > 1
      467 	then call ssu_$abort_line (sci_ptr, 0, "Usage: sign_on OperatorName");
      468 	if sc_subsystem_info.mc_atep = null ()
      469 	then call sc_abort_line_util_$real_abort_line (sci_ptr, 0,
      470 		"^a is not a terminal, so you cannot log in over it.", sc_subsystem_info.source_name);
      471 
      472 	if arg_count = 0
      473 	then do;
      474 		query_info.version = query_info_version_6;
      475 		operator_name = "";
      476 		call command_query_ (addr (query_info), operator_name, "sign_on", "Operator name:");
      477 		if operator_name = "QUIT" | operator_name = "quit"
      478 		then call sc_abort_line_util_$real_abort_line (sci_ptr, 0, "sign_on aborted by quit.");
      479 	     end;
      480 	else do;
      481 		call ssu_$arg_ptr (sci_ptr, 1, ap, al);
      482 		operator_name = argument;
      483 	     end;
      484 
      485 	call read_password_ ("Password", password);
      486 	if password = "quit" | password = "QUIT"
      487 	then call sc_abort_line_util_$real_abort_line (sci_ptr, 0, "sign_on aborted by quit.");
      488 	password = scramble_ (password);
      489 	PNTE.version = PNT_ENTRY_VERSION_2;
      490 	reason = "";
      491 	call pnt_manager_$login_get_entry (operator_name, password, addr (PNTE), code);
      492 	if code ^= 0
      493 	then do;
      494 		if code = error_table_$id_not_found
      495 		then reason = "Unregistered name";
      496 		else reason = "Bad password";
      497 	     end;
      498 	else if ^PNTE.flags.operator
      499 	then reason = "Not operator";
      500 
      501 	if reason ^= ""
      502 	then do;
      503 		call lg_ctl_$login_operator (sc_subsystem_info_ptr, DENIED, operator_name, reason);
      504 		call sc_abort_line_util_$real_abort_line (sci_ptr, 0, "Login incorrect");
      505 	     end;
      506 	operator_name = PNTE.user_id;
      507 	call mc_commands_$sign_in (sc_subsystem_info.mc_atep, operator_name, old_name);
      508 	if old_name ^= ""
      509 	then do;
      510 		call ssu_$print_message (sci_ptr, 0, "^a signed out as operator.", old_name);
      511 		call lg_ctl_$logout_operator (sc_subsystem_info_ptr, old_name, "sign_on");
      512 	     end;
      513 	sc_subsystem_info.access_control_name = rtrim (operator_name) || ".Operator.o";
      514 	call ssu_$print_message (sci_ptr, 0, "^a signed on as operator on channel ^a.", operator_name,
      515 	     sc_subsystem_info.source_name);
      516 	call lg_ctl_$login_operator (sc_subsystem_info_ptr, GRANTED, operator_name, "sign_on");
      517 	return;
      518 
      519 sign_off:
      520      entry (SCI_ptr, SCI_info_ptr);
      521 	call setup;
      522 
      523 	if arg_count ^= 0
      524 	then call ssu_$abort_line (sci_ptr, 0, "Usage: sign_off");
      525 	if sc_subsystem_info.mc_atep = null ()
      526 	then call ssu_$abort_line (sci_ptr, 0, "Not logged in.");
      527 	call mc_commands_$sign_out (sc_subsystem_info.mc_atep, old_name, code);
      528 	if code = 0
      529 	then do;
      530 		call lg_ctl_$logout_operator (sc_subsystem_info_ptr, old_name, "sign_off");
      531 		call ssu_$print_message (sci_ptr, 0, "^a signed off.", old_name);
      532 		sc_subsystem_info.access_control_name = sc_stat_$unidentified_access_name;
      533 	     end;
      534 	else call ssu_$abort_line (sci_ptr, 0, "No one is signed on to ^a.", sc_subsystem_info.source_name);
      535 	return;
      536 
      537 self_identify:
      538      entry (SCI_ptr, SCI_info_ptr);
      539 
      540 	call setup;
      541 
      542 	/*** Be nice and don't diagnose arguments */
      543 
      544 	mc_atep = sc_subsystem_info.mc_atep;
      545 	if mc_atep = null ()
      546 	then call ioa_ ("system_control");
      547 	else do;
      548 		call ioa_ ("system_control:^[ channel ^a^[ (vchannel ^a)^;^s^]^;^3s^] ^[^a^;No operator^s^] signed on.",
      549 		     ^mc_ate.the_system_console, mc_ate.real_tty_name, mc_ate.virtual, mc_ate.virtual_tty_name,
      550 		     mc_ate.signed_on, mc_ate.personid);
      551 	     end;
      552 	return;
      553 setup:
      554      procedure;
      555 
      556 	sci_ptr = SCI_ptr;
      557 	sc_subsystem_info_ptr = SCI_info_ptr;
      558 	call ssu_$arg_count (sci_ptr, arg_count);
      559 	return;
      560      end setup;
      561 
      562 call_system_start_up_ec:
      563      procedure (P_arg1);
      564 
      565 	declare P_arg1		 char (*);
      566 	declare remask_count	 fixed bin;
      567 	declare saved_access_control_name
      568 				 char (32);
      569 
      570 	remask_count = 0;
      571 	saved_access_control_name = sc_subsystem_info.access_control_name;
      572 	on cleanup
      573 	     begin;
      574 		call sc_ipc_mask_$remask (remask_count);
      575 		sc_subsystem_info.access_control_name = saved_access_control_name;
      576 	     end;
      577 
      578 	call sc_ipc_mask_$unmask (remask_count);
      579 	sc_subsystem_info.access_control_name = sc_stat_$exec_access_name;
      580 	call call_ec_ ("system_start_up", P_arg1);
      581 	call sc_ipc_mask_$remask (remask_count);
      582 	return;
      583      end call_system_start_up_ec;
      584 
      585 return_in_debug:
      586      procedure;
      587 
      588 	declare ssu_$get_debug_mode	 entry (ptr) returns (bit (1) aligned);
      589 
      590 	if ssu_$get_debug_mode (sci_ptr)
      591 	then go to RETURN;
      592 	return;
      593      end return_in_debug;
      594 
      595 RETURN:
      596 	return;
      597 
      598  /* BEGIN INCLUDE FILE ... as_data_.incl.pl1 ... */
  1     2 
  1     3 /* format: style4 */
  1     4 
  1     5 /* This file must be kept in sync with as_data_.alm */
  1     6 
  1     7 /****^  HISTORY COMMENTS:
  1     8*  1) change(86-09-21,Beattie), approve(86-09-22,MCR7542),
  1     9*     audit(86-10-31,Brunelle), install(86-11-12,MR12.0-1211):
  1    10*     Remove references to the 963 and 029 preaccess commands and remove support
  1    11*     for ARDS, 202_ETX, 2741 and 1050 in system interfaces.
  1    12*  2) change(86-09-25,Swenson), approve(87-07-20,MCR7737),
  1    13*     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1056):
  1    14*     Add references to as_data_ entrypoints added for Login Server.
  1    15*  3) change(87-03-03,Brunelle), approve(87-07-20,MCR7697),
  1    16*     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1056):
  1    17*     Added new user signal field of inacrcvd (14) to handle inactivity response
  1    18*     from user.
  1    19*                                                   END HISTORY COMMENTS */
  1    20 
  1    21 dcl  as_data_$BS char (1) aligned ext static;		/* BACKSPACE character */
  1    22 dcl  as_data_$CR char (1) aligned ext static;		/* CARRIAGE RETURN character */
  1    23 dcl  as_data_$abs_dim char (32) ext static;		/* absentee DIM */
  1    24 dcl  as_data_$acct_update_priority fixed bin ext static;	/* accounting update IPC priority */
  1    25 dcl  as_data_$acsdir char (168) ext static;		/* Access Control Segment directory */
  1    26 dcl  as_data_$ansp ptr ext static;			/* answer_table */
  1    27 dcl  as_data_$as_procid bit (36) aligned ext static;	/* Answering Service process id */
  1    28 dcl  as_data_$as_ring fixed bin (3) ext static;		/* AS operating ring */
  1    29 dcl  as_data_$as_tty char (6);			/* AS master tty channel */
  1    30 dcl  as_data_$asmtp ptr ext static;			/* AS meter table */
  1    31 dcl  as_data_$autp ptr ext static;			/* absentee_user_table */
  1    32 dcl  as_data_$buzzardp ptr ext static;			/* dpg_ list of buteo processes */
  1    33 dcl  as_data_$cdtp ptr ext static;			/* CDT */
  1    34 dcl  as_data_$default_weight fixed bin (35) ext;		/* default user process load control weight */
  1    35 dcl  as_data_$devtabp ptr ext static;			/* device_table */
  1    36 dcl  as_data_$dft_user_ring fixed bin (3) ext static;	/* default user ring */
  1    37 dcl  as_data_$dutp ptr ext static;			/* daemon_user_table */
  1    38 dcl  as_data_$g115_dim char (32) ext static;
  1    39 dcl  as_data_$lct_initialized bit (1) aligned ext static;	/* LCT allocated in ring 0 */
  1    40 dcl  as_data_$lct_size fixed bin ext static;		/* CDT tty channels + spares */
  1    41 dcl  as_data_$max_user_ring fixed bin (3) ext static;	/* maximum user ring */
  1    42 dcl  as_data_$mgtp ptr ext static;			/* master group table */
  1    43 dcl  as_data_$mrd_dim char (32) ext static;		/* daemon's message routing DIM */
  1    44 dcl  as_data_$ntty_dim char (32) ext static;		/* network connection DIM */
  1    45 dcl  as_data_$pdtdir char (168) ext static;		/* PDT directory */
  1    46 dcl  as_data_$pit_ptr ptr ext static;			/* pit_temp_ */
  1    47 dcl  as_data_$rcpdir char (168) ext static;		/* RCP directory */
  1    48 dcl  as_data_$request_priority fixed bin ext static;
  1    49 dcl  as_data_$rs_ptrs (0:9) ptr ext static;		/* rate_structures */
  1    50 dcl  as_data_$rtdtp ptr ext static;			/* RTDT */
  1    51 dcl  as_data_$sat_htp ptr ext static;			/* SAT hash table */
  1    52 dcl  as_data_$satp ptr ext static;			/* SAT */
  1    53 dcl  as_data_$suffix (0:9) char (2) unaligned ext static;
  1    54 dcl  as_data_$sysdir char (168) ext static;		/* system control directory */
  1    55 dcl  as_data_$teens_suffix (10:19) char (2) unaligned ext static;
  1    56 dcl  as_data_$terminet_tabs_string char (144) varying ext static;
  1    57 dcl  as_data_$tty_dim char (32) ext static;		/* standard interactive DIM */
  1    58 dcl  as_data_$update_priority fixed bin ext static;	/* ??? */
  1    59 dcl  as_data_$version char (8) ext static;		/* AS version */
  1    60 dcl  as_data_$whoptr ptr ext static;			/* whotab */
  1    61 
  1    62 dcl  1 as_data_$login_args aligned ext static,		/* control arguments for login */
  1    63        2 n_login_args fixed bin,
  1    64        2 pad fixed bin,
  1    65        2 login_args (55 /* as_data_$login_args.n_login_args */) char (24) unaligned;
  1    66 
  1    67 dcl  1 as_data_$signal_types ext static aligned,		/* IPC process control signals */
  1    68        2 n_signals fixed bin,
  1    69        2 pad fixed bin,
  1    70        2 signals (14 /* as_data_$signal_types.n_signals */) char (8) unaligned;
  1    71 
  1    72 dcl  1 as_data_$system_signal_types ext static aligned,	/* IPC process control signals */
  1    73        2 n_system_signals fixed bin,
  1    74        2 pad fixed bin,
  1    75        2 system_signals (10 /* as_data_$system_signal_types.n_system_signals */) char (8) unaligned;
  1    76 
  1    77 dcl  as_data_$login_words fixed bin ext static aligned,
  1    78 						/* interactive login words */
  1    79      1 as_data_login_words aligned based (addr (as_data_$login_words)),
  1    80        2 n_words fixed bin,
  1    81        2 pad fixed bin,
  1    82        2 words (0 refer (as_data_login_words.n_words)) char (16) unaligned;
  1    83 
  1    84 dcl  as_data_$debug_flag bit (1) aligned external static;
  1    85 dcl  as_data_$ls_request_server_info_ptr ptr external static;
  1    86 dcl  as_data_$ls_message_buffer_cur_lth fixed bin (18) external static;
  1    87 dcl  as_data_$ls_message_buffer_max_lth fixed bin (18) external static;
  1    88 dcl  as_data_$ls_message_buffer_ptr ptr external static;
  1    89 
  1    90 /* END INCLUDE FILE ... as_data_.incl.pl1 ... */
      598 
      599  /* BEGIN INCLUDE FILE ... installation_parms.incl.pl1 */
  2     2 
  2     3 /* Modified 740723 by PG to add short AIM access names */
  2     4 /* Modified Fall 1977 by T. Casey to add fatal loop and trm_ signal parameters */
  2     5 /* Modified 04/03/78 by CDT to add rcp_init_flags structure */
  2     6 /* Modified May 1978 by T. Casey to add resource timer and resource price list parameters */
  2     7 /* Modified November 1978 by T. Casey for MR7.0, to add absentee control parameters */
  2     8 /* Modified 17 September 1980 by G. Palter to add default absentee queue */
  2     9 /* Modified April 1981 by E. N. Kittlitz for chn_wakeup_error_loop, chn_wakeup_error_count */
  2    10 /* Modified June 1981 by E. N. Kittlitz for nrates/rate_structures UNCA rate_structure support.
  2    11*     Version, expand foregound_cpu_default_limit and abs_cpu_max_limit to fixed bin (35) fields.
  2    12*     nrscp & resource array moved from offset 2064 (octal) to 2400 (octal). */
  2    13 /* Modified 1984-06-19 BIM to remove obsolete fields, and add 
  2    14*		       strict_trusted_path. */
  2    15 /* Modified 1984-10-24 BIM for default_pdir_quota. */
  2    16 /* Modified 1984-12-05 BIM for require_operator_login. */
  2    17 /* Modified 1985-03-01 by E. Swenson for password flags. */
  2    18 
  2    19 
  2    20 /****^  HISTORY COMMENTS:
  2    21*  1) change(86-01-27,MSharpe), approve(87-05-25,MCR7690),
  2    22*     audit(87-03-29,GDixon), install(87-08-04,MR12.1-1056):
  2    23*     added vchn_requires_accept parameter.
  2    24*  2) change(87-02-17,GDixon), approve(87-05-25,MCR7680),
  2    25*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  2    26*     Correct formatting problems.
  2    27*                                                   END HISTORY COMMENTS */
  2    28 
  2    29 
  2    30 /* NOTE: rate_structure.incl.pl1 uses these declarations */
  2    31 
  2    32 
  2    33 dcl 1 installation_parms based (ip) aligned,		/* describes installation parameters */
  2    34     2 part_1 like installation_parms_part_1 aligned,
  2    35     2 resource (0 refer (installation_parms.nrscp)) like installation_parms_resource_array_part aligned;
  2    36 
  2    37 dcl  installation_parms_version_1 fixed bin init (1) static internal options (constant);
  2    38 dcl  installation_parms_version_2 fixed bin init (2) static internal options (constant);
  2    39 
  2    40 dcl 1 installation_parms_part_1 based aligned,		/* Used only by installation_parms and rate_structure */
  2    41     2 installation_id char (32),			/* Name printed at dialup and in who */
  2    42     2 company char (64),				/* company name */
  2    43     2 department char (64),				/* department */
  2    44     2 companyds char (120),				/* company, double spaced */
  2    45     2 departmentds char (120),			/* dpeartment double spaced */
  2    46     2 shifttab (336) bit (3) unal,			/* half-hrs from 0000 Mon, value is shift no */
  2    47     2 cpu_price (0: 7) float bin,			/* price for cpu hour, by shift */
  2    48     2 log_base_price (0: 7) float bin,			/* price for log hour, by shift */
  2    49     2 io_ops_price (0: 7) float bin,			/* price per 1000 terminal io ops */
  2    50     2 core_price (0: 7) float bin,			/* price for core page-hour, by shift */
  2    51     2 ndevices fixed bin,				/* number of devices to charge */
  2    52     2 devtab (16),					/* Maximum 16 */
  2    53       3 device_id char (8),				/* Name of device */
  2    54       3 device_price (0: 7) float bin,			/* Price by shift */
  2    55     2 inactive_time fixed bin,			/* seconds of inactivity permitted */
  2    56     2 warning_time fixed bin,				/* seconds from warning to logout */
  2    57     2 login_time fixed bin,				/* seconds in which to complete login */
  2    58     2 acct_update fixed bin,				/* seconds between acct update */
  2    59     2 login_tries fixed bin,				/* number of login tries allowed */
  2    60     2 disk_price float bin,				/* disk rate, in $/page-sec */
  2    61     2 registration_price float bin,			/* fee per month per user */
  2    62     2 dolsign char (1),				/* "dollar sign" */
  2    63     2 abs_cpu_price (4) float bin,			/* price for absentee cpu by queue */
  2    64     2 abs_mem_price (4) float bin,			/* Absentee memory charge */
  2    65     2 iod_rec_price (4) float bin,			/* price for io daemon lines, per K, by queue */
  2    66     2 abs_timax (4) fixed bin (35),			/* Absentee TIMAX parameter */
  2    67     2 abs_cpu_default_limit (4) fixed bin (35),		/* default absentee cpu limit in seconds (changed from usec.) */
  2    68     2 syserr_log_copy_threshold fixed bin (9),		/* Threshold (in PAGES) at which the
  2    69*						   Initializer will copy the syserr_log */
  2    70     2 default_pdir_seg_quota fixed bin (17) unaligned,	/* if system and project say 0 */
  2    71     2 default_pdir_dir_quota fixed bin (17) unaligned,       /* Always used */
  2    72     2 fatal_error_loop_count fixed bin (17) unaligned,
  2    73     2 fatal_error_loop_seconds fixed bin (17) unaligned,
  2    74     2 term_real_time_seconds fixed bin (17) unaligned,
  2    75     2 term_cpu_time_seconds fixed bin (17) unaligned,
  2    76     2 rcp_init_flags like rcp_init_flags aligned,		/* one word long */
  2    77     2 rsc_timer_seconds fixed bin (17) unaligned,		/* time interval at which to check for resource availability */
  2    78     2 pad_old_fg_cpu_default_limit bit (18) unaligned,
  2    79     2 foreground_queue_position fixed bin (17) unal,	/* queue that foreground queue comes after */
  2    80     2 idle_time_constant_seconds fixed bin (17) unal,	/* how far back to maintain moving average of load */
  2    81     2 sus_cpu_time_seconds fixed bin (17) unal,		/* allow suspended process this much cpu time */
  2    82     2 sus_real_time_seconds fixed bin (17) unal,		/* and this much real time, before bumping it */
  2    83     2 foreground_cpu_default_limit fixed bin (35),	/* default cpu time limit (sec) for foreground absentee jobs */
  2    84     2 access_authorization_ceiling bit (72),		/* "System high" access authorization. */
  2    85     2 level_names (0:7) char (32),			/* Names for security levels. */
  2    86     2 category_names (18) char (32),			/* Names for security categories. */
  2    87     2 short_level_names (0:7) char (8),			/* Abbreviated level names. */
  2    88     2 short_category_names (18) char (8),		/* Abbreviated category names. */
  2    89     2 ncon fixed bin,				/* Number of config elements. */
  2    90     2 cona (51),					/* each entry is 5 words long */
  2    91       3 cpu fixed bin (5) unal,			/* Number of CPU's */
  2    92       3 shift fixed bin (5) unal,			/* Shift number */
  2    93       3 x1 fixed bin (23) unal,
  2    94       3 kmem fixed bin (17) unal,			/* Memory size */
  2    95       3 kbulk fixed bin (17) unal,			/* Bulk store size */
  2    96       3 x2 fixed bin (17) unal,
  2    97       3 maxa fixed bin (11) unal,			/* Max abs users */
  2    98       3 maxq fixed bin (5) unal,			/* Max abs q */
  2    99       3 maxu_base fixed bin (17) unal,
  2   100       3 response_high fixed bin (17) unal,
  2   101       3 response_low fixed bin (17) unal,
  2   102       3 x3 fixed bin (17) unal,
  2   103 
  2   104 /* Absentee control parameters. New for MR7.0 */
  2   105 
  2   106     2 max_abs (0:7) fixed bin (17) unal,		/* per-shift upper limit on abs_maxu */
  2   107     2 min_abs (0:7) fixed bin (17) unal,		/* per-shift lower limit on abs_maxu */
  2   108     2 pct_abs (0:7) fixed bin (17) unal,		/* abs_maxu is this pct (per-shift) of idle units */
  2   109 
  2   110     2 max_qres (0:7, 4) fixed bin (17) unal,		/* per-shift-and-queue upper limit on reserved slots */
  2   111     2 min_qres (0:7, 4) fixed bin (17) unal,		/* per-shift-and-queue lower limit on reserved slots */
  2   112     2 pct_qres (0:7, 4) fixed bin (17) unal,		/* reserved slots are these pcts of abs_maxu */
  2   113 
  2   114     2 abs_cpu_max_limit (0:7, 4) fixed bin (35),		/* per-shift-and-queue upper limit (sec) on jobs' cpu times */
  2   115 
  2   116     2 default_absentee_queue fixed binary (17) unaligned,	/* default absentee queue for ear, etc. */
  2   117 
  2   118     2 chn_wakeup_error_loop_count fixed bin (17) unaligned, /* maximum number of channel wakeups in following interval */
  2   119     2 chn_wakeup_error_loop_seconds fixed bin (17) unaligned, /* works like fatal_error_loop_count/seconds */
  2   120     2 rate_structure_number fixed bin (17) unaligned,	/* rate_structure number of this RS */
  2   121     2 version fixed bin (35),				/* must be 2 */
  2   122     2 nrates fixed bin,				/* number of rate structures */
  2   123     2 rate_structures (0:9) char (32),			/* names of rate_structures */
  2   124     2 trusted_path_login bit (1) aligned,		/* forbid logout -hold and new_proc -auth */
  2   125     2 require_operator_login bit (1) aligned,		/* just what it says */
  2   126     2 operator_inactive_time fixed bin,			/* seconds between commands --> not logged in. */
  2   127     2 validate_daemon_commands bit (1) aligned,		/* force existence and adequate access to 
  2   128*						   mcacs segments for operators */
  2   129     2 password_min_length fixed bin,			/* minimum length of passwords */
  2   130     2 password_gpw_length fixed bin,			/* length of generated passwords */
  2   131     2 password_change_interval fixed bin,		/* number of days until must change */
  2   132     2 password_expiration_interval fixed bin,		/* number of days that a password may remain unused */
  2   133     2 vchn_requires_accept bit (1) aligned,		/* "login personid -op -vchn foo" must be
  2   134*						   "accepted" by operator if personid is not 
  2   135*						   signed on system console */
  2   136     2 end_pad (219) bit (36) aligned,			/* leave plenty of pad before the variable length price list */
  2   137     2 nrscp fixed bin;				/* length of resource price array; must have offset 2400 (octal),
  2   138*						   or someone miscounted when using part of pad2 */
  2   139 
  2   140 
  2   141 /* Entries in the following array may be accessed via system_info_$resource_price.
  2   142*   This array should not be accessed directly, since its format will change in subsequent releases of Multics. */
  2   143 
  2   144 dcl 1 installation_parms_resource_array_part (0 refer (installation_parms.nrscp)) based,
  2   145       2 name char (32),
  2   146       2 price float bin;
  2   147 
  3     1 /* BEGIN INCLUDE FILE ... rcp_init_flags.incl.pl1 */
  3     2 
  3     3 /* Created on 04/24/78 by Michael R. Jordan */
  3     4 /* Modified 04/10/79 by C. D. Tavares */
  3     5 
  3     6 dcl  rifp ptr;
  3     7 
  3     8 dcl 1 rcp_init_flags based (rifp),
  3     9     2 unload_on_detach bit (1) unaligned,		/* ON => tape volumes are unloaded after detaching */
  3    10     2 pad1 bit (2) unaligned,				/* obsolete */
  3    11     2 resource_mgmt_enabled bit (1) unaligned,		/* ON => resource management has been enabled */
  3    12     2 auto_registration bit (1) unaligned,		/* ON => auto registration allowed */
  3    13     2 pad2 bit (2) unaligned,				/* future expansion, possibly of authentication_level */
  3    14     2 authentication_level fixed bin (2) unaligned unsigned; /* see below for values */
  3    15 
  3    16 dcl (No_authentication initial (0),
  3    17      Nominal_authentication initial (1),
  3    18      Automatic_authentication initial (2),
  3    19      Manual_authentication initial (3)) fixed bin internal static options (constant);
  3    20 
  3    21 dcl  authentication_level_names (0:3) char (12) internal static options (constant) initial
  3    22     ("none", "nominal", "automatic", "manual");
  3    23 
  3    24 /* END INCLUDE FILE ... rcp_init_flags.incl.pl1 */
  2   148 
  2   149 
  2   150 /* END INCLUDE FILE ... installation_parms.incl.pl1 */
      599 
      600 	declare ip		 pointer;		/* req for above */
      601  /* --------------- BEGIN include file iox_dcls.incl.pl1 --------------- */
  4     2 
  4     3 /* Written 05/04/78 by C. D. Tavares */
  4     4 /* Fixed declaration of iox_$find_iocb_n 05/07/80 by R. Holmstedt */
  4     5 /* Modified 5/83 by S. Krupp to add declarations for:  iox_$open_file,
  4     6*     iox_$close_file, iox_$detach and iox_$attach_loud entries. */
  4     7 
  4     8 dcl  iox_$attach_name entry (char (*), pointer, char (*), pointer, fixed bin (35)),
  4     9      iox_$attach_ptr entry (pointer, char (*), pointer, fixed bin (35)),
  4    10      iox_$close entry (pointer, fixed bin (35)),
  4    11      iox_$control entry (pointer, char (*), pointer, fixed bin (35)),
  4    12      iox_$delete_record entry (pointer, fixed bin (35)),
  4    13      iox_$destroy_iocb entry (pointer, fixed bin (35)),
  4    14      iox_$detach_iocb entry (pointer, fixed bin (35)),
  4    15      iox_$err_not_attached entry options (variable),
  4    16      iox_$err_not_closed entry options (variable),
  4    17      iox_$err_no_operation entry options (variable),
  4    18      iox_$err_not_open entry options (variable),
  4    19      iox_$find_iocb entry (char (*), pointer, fixed bin (35)),
  4    20      iox_$find_iocb_n entry (fixed bin, ptr, fixed bin(35)),
  4    21      iox_$get_chars entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  4    22      iox_$get_line entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  4    23      iox_$look_iocb entry (char (*), pointer, fixed bin (35)),
  4    24      iox_$modes entry (pointer, char (*), char (*), fixed bin (35)),
  4    25      iox_$move_attach entry (pointer, pointer, fixed bin (35)),
  4    26      iox_$open entry (pointer, fixed bin, bit (1) aligned, fixed bin (35)),
  4    27      iox_$position entry (pointer, fixed bin, fixed bin (21), fixed bin (35)),
  4    28      iox_$propagate entry (pointer),
  4    29      iox_$put_chars entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  4    30      iox_$read_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
  4    31      iox_$read_length entry (pointer, fixed bin (21), fixed bin (35)),
  4    32      iox_$read_record entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  4    33      iox_$rewrite_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  4    34      iox_$seek_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
  4    35      iox_$write_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  4    36      iox_$open_file entry(ptr, fixed bin, char(*), bit(1) aligned, fixed bin(35)),
  4    37      iox_$close_file entry(ptr, char(*), fixed bin(35)),
  4    38      iox_$detach entry(ptr, char(*), fixed bin(35)),
  4    39      iox_$attach_loud entry(ptr, char(*), ptr, fixed bin(35));
  4    40 
  4    41 dcl (iox_$user_output,
  4    42      iox_$user_input,
  4    43      iox_$user_io,
  4    44      iox_$error_output) external static pointer;
  4    45 
  4    46 /* ---------------- END include file iox_dcls.incl.pl1 ---------------- */
      601 
      602  /* BEGIN INCLUDE FILE ... mc_anstbl.incl.pl1 */
  5     2 
  5     3 
  5     4 /****^  HISTORY COMMENTS:
  5     5*  1) change(85-12-19,MSharpe), approve(87-05-25,MCR7690),
  5     6*     audit(87-03-30,GDixon), install(87-08-04,MR12.1-1056):
  5     7*     Added the pending and virtual flags and virtual_tty_name to mc_ate;
  5     8*     changed mc_ate.tty_name to mc_ate.real_tty_name; added mc_ate.ls_procid,
  5     9*     mc_ate.ls_term_ev_chn, mc_ate.ls_resp_ev_chn, mc_ate.ls_handle.
  5    10*  2) change(87-02-04,GDixon), approve(87-05-25,MCR7690),
  5    11*     audit(87-06-01,Parisek), install(87-08-04,MR12.1-1056):
  5    12*     Add mc_ate.vchn_requires_accept in support of virtual channels. Explicitly
  5    13*     declare implicit pad fields which the compile adds for element alignment
  5    14*     purposes.  Declare mc_ansp and mc_atep, on which major structures are
  5    15*     based, rather than depending upon includers do to so.
  5    16*  3) change(87-03-27,Parisek), approve(87-05-25,MCR7690),
  5    17*     audit(87-06-11,GDixon), install(87-08-04,MR12.1-1056):
  5    18*     Added the dsa_ring_number element to provide a constant for determining
  5    19*     the DSA ring.
  5    20*                                                   END HISTORY COMMENTS */
  5    21 
  5    22 
  5    23 /* format: style3,idind30 */
  5    24 
  5    25 dcl	1 mc_anstbl		based (mc_ansp) aligned,
  5    26 						/* Structure of answer table */
  5    27 	  2 max_size		fixed bin,	/* max number of entries table can grow */
  5    28 	  2 current_size		fixed bin,	/* actual size of table (in entries) */
  5    29 	  2 mc_procid		bit (36),		/* process ID of message coordinator */
  5    30 	  2 sysdir		char (168),	/* name of main system control directory */
  5    31 	  2 pad_ptrs		bit (36),
  5    32 	  2 mrtp			ptr,
  5    33 	  2 vconsp		ptr,
  5    34 	  2 cons_cont_proc		entry,		/* mc_tty_ */
  5    35 	  2 con_rec,				/* Data for console recovery. */
  5    36 	    3 mc_ate_ptr		ptr,		/* Pts to recovery device. */
  5    37 	    3 ec_id		fixed bin (71),	/* Recovery event chan. */
  5    38 	    3 seq_num		fixed bin (35),	/* Syserr sequence number. */
  5    39 	    3 offset		bit (18),		/* Log entry offset. */
  5    40 	    3 flags,
  5    41 	    ( 4 enabled		bit (1),		/* ON => recovery possible. */
  5    42 	      4 active		bit (1),
  5    43 	      4 pad_flags		bit (16)
  5    44 	      )			unaligned,	/* ON => recovery going on. */
  5    45 	  2 n_sources		fixed bin,	/* number of communicating sources */
  5    46 	  2 max_sources		fixed bin,	/* maximum number of sources allowed */
  5    47 	  2 current_time		fixed bin (71),	/* Time of last transaction */
  5    48 	  2 trace			bit (1) aligned,
  5    49 	  2 dsa_ring_number           fixed bin,	/* DSA ring number */
  5    50 	  2 pad_entries		(30) bit (36) aligned,
  5    51 	  2 entry			(0 refer (mc_anstbl.current_size)) aligned like mc_ate,
  5    52 	mc_ansp			ptr;
  5    53 
  5    54 dcl	1 mc_ate			based (mc_atep) aligned,
  5    55 						/* declaration of a single answer table entry */
  5    56 	  2 flags			aligned,
  5    57 	    3 virtual		bit (1) unaligned,	/* 1 => login -vchn XXX */
  5    58 	    3 pending		bit (1) unaligned,	/* 1 => pending entry created for DSA channel
  5    59*						   since we can't keep info in cdte for it */
  5    60 	    3 active		bit (1) unaligned,
  5    61 	    3 the_system_console	bit (1) unaligned,	/* otw_/ocd_ */
  5    62 	    3 a_system_console	bit (1) unaligned,	/* Not yet implemented -- a random opc through a	*/
  5    63 						/*  nonexistent I/O module			*/
  5    64 	    3 pad001		bit (1) unaligned,
  5    65 	    3 signed_on		bit (1) unaligned,
  5    66 	    3 reply_restricted	bit (1) unaligned,
  5    67 	    3 broadcast		bit (1) unaligned,
  5    68 	    3 broadcast_all		bit (1) unaligned,
  5    69 	    3 vchn_requires_accept	bit (1) unaligned,
  5    70 	    3 pad_flags		bit (25) unaligned,
  5    71 	  2 virtual_tty_name	char (32) unaligned,
  5    72 	  2 real_tty_name		char (32) unaligned,
  5    73 	  2 pad_ptrs		bit (36),
  5    74 	  2 cdtep			pointer,		/* we get info from cdt */
  5    75 	  2 iocb			pointer,		/* do I/O here */
  5    76 	  2 sci_ptr		pointer,
  5    77 	  2 tra_vec		fixed bin,
  5    78 	  2 restrict_reply		char (32),	/* Source name. if "", everybody. */
  5    79 						/* Broadcasting information. */
  5    80 	  2 n_casts		fixed bin,	/* If flag is 1 */
  5    81 	  2 cast			(10) char (32),	/* If flag is 1, list of consoles. */
  5    82 	  2 oper_info,				/* for oper assigned this console... */
  5    83 	    3 personid		char (32),
  5    84 	    3 last_input_time	fixed bin (71),	/* time of last input on this console... */
  5    85 	  2 queue_ptr		ptr,
  5    86 	  2 queue_event		fixed bin (71),
  5    87 	  2 event			fixed binary (71),	/* name of event call channel associated with TTY */
  5    88 	  2 ls_procid		bit (36),		/* ID of login_server who will wake us up with connect
  5    89*						   and disconnect -- used only for network channels */
  5    90 	  2 pad_ev_chn		bit (36),
  5    91 	  2 ls_term_ev_chn		fixed bin (71),	/* event channel to send terminate response to ls */
  5    92 	  2 ls_resp_ev_chn		fixed bin (71),	/* event channel to send operator response to ls */
  5    93 	  2 ls_handle		bit (72),		/* login server handle for this connection */
  5    94 	  2 authority,
  5    95 	    3 privilege		(36) bit (1) unaligned,
  5    96 	  2 control,
  5    97 	    3 inhibit		bit (1) unal,
  5    98 	    3 output_wait		bit (1) unal,
  5    99 	    3 output_pending	bit (1) unal,
  5   100 	    3 pad_control		bit (33) unal,
  5   101 	mc_atep			ptr;
  5   102 
  5   103 declare	(
  5   104 	MC_WAIT_DIALUP		init (1),
  5   105 	MC_WAIT_ANSWERBACK		init (2),
  5   106 	MC_WAIT_READY		init (3),
  5   107 	MC_WAIT_COMMAND		init (4)
  5   108 	)			fixed bin int static options (constant);
  5   109 
  5   110 /* END INCLUDE FILE ... mc_anstbl.incl.pl1 */
      602 
      603  /* BEGIN INCLUDE FILE ... pnt_entry.incl.pl1 */
  6     2 
  6     3 /* Modified 790702 by C. Hornig for MSF PNT */
  6     4 /* Modified 84-07-18 BIM for V2, aim ranges, long passwords. */
  6     5 /* Modified 84-09-25 for operator attribute... -E. A. Ranzenbach */
  6     6 /* Modified 85-03-05 E. Swenson for user_validated_time */
  6     7 
  6     8 /**** The ms_table_mgr_ has fixed sized entries, for now.
  6     9*      The presence of a version field and some pad allow
  6    10*      us to have incrementally-upgraded PNTE's in a future change.
  6    11**/
  6    12 
  6    13 /**** The conversion to V2 copies the existing encrypted passwords.
  6    14*      Since the 32 character scrambling algorithm will not give the
  6    15*      same results, the short_XX flags indicate that the old scrambler
  6    16*      should be used. The short flags are automatically turned off
  6    17*      by calls to update the password with the long-scrambled form. */
  6    18 
  6    19 /* format: style4,insnl,delnl */
  6    20 
  6    21 declare  pntep pointer automatic;
  6    22 declare  1 pnt_entry based (pntep) aligned,		/* declaration of a single PNT entry */
  6    23 	 2 version fixed bin,
  6    24 	 2 private aligned,
  6    25 	   3 pw_flags aligned,
  6    26 	     4 short_pw bit (1) unal,			/* ON password is eight-character form */
  6    27 	     4 short_network_pw bit (1) unal,		/* ON card password is eight character form. */
  6    28 	   3 password character (32),			/* person's password */
  6    29 	   3 network_password character (32),
  6    30 	 2 public,
  6    31 	   3 user_id character (32),			/* user ID (for alias entries */
  6    32 	   3 alias character (8),
  6    33 	   3 default_project character (16),		/* user's default project */
  6    34 	   3 flags,				/* one-bit flags */
  6    35 	     4 has_password bit (1) unaligned,
  6    36 	     4 has_network_password bit (1) unaligned,
  6    37 	     4 trap bit (1) unal,			/* If this password is used, holler */
  6    38 	     4 lock bit (1) unal,			/* prevent login if on. */
  6    39 	     4 nochange bit (1) unal,			/* user cannot change password */
  6    40 	     4 must_change bit unal,			/* user must change password at next login */
  6    41 	     4 pw_time_lock bit (1) unal,		/* if password has a time lock */
  6    42 	     4 generate_pw bit (1) unal,		/* ON if we give new pw, OFF lets user select new pw */
  6    43 	     4 last_bad_pw_reported bit (1) unal,	/* ON if user has NOT been told about last bad password  */
  6    44 	     4 operator bit (1) unal,			/* ON if user can login as an operator... */
  6    45 	     4 pads bit (26) unal,
  6    46 	   3 n_good_pw fixed bin,			/* Number of good passwords */
  6    47 	   3 n_bad_pw fixed bin,			/* Number of wrong passwords */
  6    48 	   3 n_bad_pw_since_good fixed bin,		/* Number of wrong passwords since good */
  6    49 	   3 time_pw_changed fixed bin (71),		/* When password was modified by user */
  6    50 
  6    51 	   3 time_last_good_pw fixed bin (71),
  6    52 	   3 time_last_bad_pw fixed bin (71),		/* When pw was last given wrong */
  6    53 	   3 bad_pw_term_id character (4),		/* where bad password from */
  6    54 	   3 bad_pw_line_type fixed bin (17),		/* ... */
  6    55 	   3 bad_pw_term_type character (32),
  6    56 	   3 password_timelock fixed bin (71),		/* Password is locked up until here */
  6    57 	   3 person_authorization (2) bit (72),		/* authorization of this person */
  6    58 	   3 default_person_authorization bit (72),	/* default authorization of this person */
  6    59 	   3 audit bit (36),			/* audit flags for person */
  6    60 	   3 pad1 bit (36),				/* pad to even word boundary */
  6    61 	   3 user_validated_time fixed bin (71),		/* time this PNT entry was last validated by an administrator */
  6    62 	 2 pad (80 - 64) bit (36) aligned;
  6    63 
  6    64 declare  PNT_ENTRY_VERSION_2 fixed bin init (2) int static options (constant);
  6    65 
  6    66 /* END INCLUDE FILE ... pnte.incl.pl1 */
      603 
      604 	declare 1 PNTE		 aligned like pnt_entry;
      605  /*	BEGIN INCLUDE FILE query_info.incl.pl1		TAC June 1, 1973 */
  7     2 /*        Renamed to query_info.incl.pl1 and cp_escape_control added, 08/10/78 WOS */
  7     3 /*	version number changed to 4, 08/10/78 WOS */
  7     4 /* Version 5 adds explanation_(ptr len) 05/08/81 S. Herbst */
  7     5 /* Version 6 adds literal_sw, prompt_after_explanation switch 12/15/82 S. Herbst */
  7     6 
  7     7 dcl 1 query_info aligned,				/* argument structure for command_query_ call */
  7     8     2 version fixed bin,				/* version of this structure - must be set, see below */
  7     9     2 switches aligned,                                     /* various bit switch values */
  7    10       3 yes_or_no_sw bit (1) unaligned init ("0"b),		/* not a yes-or-no question, by default */
  7    11       3 suppress_name_sw bit (1) unaligned init ("0"b),	/* do not suppress command name */
  7    12       3 cp_escape_control bit (2) unaligned init ("00"b),   /* obey static default value */
  7    13                                                             /* "01" -> invalid, "10" -> don't allow, "11" -> allow */
  7    14       3 suppress_spacing bit (1) unaligned init ("0"b),     /* whether to print extra spacing */
  7    15       3 literal_sw bit (1) unaligned init ("0"b),		/* ON => do not strip leading/trailing white space */
  7    16       3 prompt_after_explanation bit (1) unaligned init ("0"b),  /* ON => repeat question after explanation */
  7    17       3 padding bit (29) unaligned init (""b),		/* pads it out to t word */
  7    18     2 status_code fixed bin (35) init (0),		/* query not prompted by any error, by default */
  7    19     2 query_code fixed bin (35) init (0),		/* currently has no meaning */
  7    20 
  7    21 /*  Limit of data defined for version 2 */
  7    22 
  7    23     2 question_iocbp ptr init (null ()),		/* IO switch to write question */
  7    24     2 answer_iocbp ptr init (null ()),			/* IO switch to read answer */
  7    25     2 repeat_time fixed bin (71) init (0),		/* repeat question every N seconds if no answer */
  7    26 						/* minimum of 30 seconds required for repeat */
  7    27 						/* otherwise, no repeat will occur */
  7    28 /* Limit of data defined for version 4 */
  7    29 
  7    30     2 explanation_ptr ptr init (null ()),		/* explanation of question to be printed if */
  7    31     2 explanation_len fixed bin (21) init (0);		/* user answers "?" (disabled if ptr=null or len=0) */
  7    32 
  7    33 dcl  query_info_version_3 fixed bin int static options (constant) init (3);
  7    34 dcl  query_info_version_4 fixed bin int static options (constant) init (4);
  7    35 dcl  query_info_version_5 fixed bin int static options (constant) init (5);
  7    36 dcl  query_info_version_6 fixed bin int static options (constant) init (6); /* the current version number */
  7    37 
  7    38 /*	END INCLUDE FILE query_info.incl.pl1 */
      605 
      606  /*  BEGIN:   sc_stat_.incl.pl1			  *  *  *  *  *  */
  8     2 
  8     3 
  8     4 /****^  HISTORY COMMENTS:
  8     5*  1) change(87-02-04,GDixon), approve(87-05-25,MCR7690),
  8     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  8     7*     Add sc_stat_$vchn_requires_accept in support of DSA virtual channels.
  8     8*  2) change(87-02-04,GDixon), approve(87-05-25,MCR7680),
  8     9*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  8    10*     Reorganized by type of data to improve readability.
  8    11*                                                   END HISTORY COMMENTS */
  8    12 
  8    13 
  8    14 			      /* ACCESS NAMES		       */
  8    15 dcl (
  8    16  sc_stat_$exec_access_name,	      /* check MC access in an exec request    */
  8    17  sc_stat_$unidentified_access_name  /* check access if no one is logged in.  */
  8    18     ) char(32) ext static;
  8    19 
  8    20 		        /* PATHNAMES			       */
  8    21 dcl (
  8    22  sc_stat_$info_dir,	        /* admin info segs directory		       */
  8    23  sc_stat_$log_dir,	        /* as log segs directory		       */
  8    24  sc_stat_$mc_acs_dir,       /* message coordinator ACS segments (.mcacs) dir */
  8    25  sc_stat_$sysdir	        /* system control directory		       */
  8    26     ) char(168) ext static;
  8    27 
  8    28 		        /* OTHER CHAR STRINGS			       */
  8    29 dcl (
  8    30  sc_stat_$master_channel    /* Master TTY channel.		       */
  8    31     )  char(6) aligned ext static;
  8    32 
  8    33 			       /* LABELS			       */
  8    34 dcl (
  8    35  sc_stat_$admin_listener_exit_label, /* GO here to exit admin mode.  Set to  */
  8    36 			       /*    ssu_$null_label unless 	       */
  8    37 			       /*	   admin_listener is active.	       */
  8    38  sc_stat_$master_abort_label,	       /* GO here after fault that is not      */
  8    39 			       /*    attributable to a particular      */
  8    40 			       /*	   command.		       */
  8    41  sc_stat_$system_shutdown_label      /* GO here to shut down system	       */
  8    42     ) label variable ext static;
  8    43 
  8    44 			 /* POINTERS TO			       */
  8    45 dcl (
  8    46  sc_stat_$admin_log_iocb,	 /* IOCB for admin log		       */
  8    47  sc_stat_$admin_log_write_ptr, /* DATA for log_write_ calls on the admin log */
  8    48  sc_stat_$admin_sci_ptr,	 /* DATA ssu_ for terminal currently executing */
  8    49  sc_stat_$as_log_write_ptr,	 /* DATA for log_write_ calls on as log, used  */
  8    50 			 /*      by sys_log_.		       */
  8    51  sc_stat_$initzer_ttyp,	 /* ENT  mc_ate for initializer terminal       */
  8    52  sc_stat_$master_iocb,	 /* IOCB for "master_i/o"		       */
  8    53  sc_stat_$master_sci_ptr,	 /* DATA ssu_ (permanent) for system control   */
  8    54  sc_stat_$mc_ansp,		 /* HEAD of mc_anstbl		       */
  8    55  sc_stat_$mc_iocb,		 /* IOCB ptr for "mc_i/o"		       */
  8    56  sc_stat_$sv1_iocb,		 /* IOCB ptr for "severity1"		       */
  8    57  sc_stat_$sv2_iocb,		 /* IOCB ptr for "severity2"		       */
  8    58  sc_stat_$sv3_iocb		 /* IOCB ptr for "severity3"		       */
  8    59     ) ptr ext static;
  8    60 
  8    61 			   /* SWITCHES			       */
  8    62 dcl (
  8    63  sc_stat_$Go,		   /* TRUE after answering service is listening*/
  8    64  sc_stat_$Go_typed,		   /* TRUE immediately after 'go' is typed     */
  8    65  sc_stat_$Multics,		   /* TRUE after answering service started     */
  8    66  sc_stat_$Multics_typed,	   /* TRUE immediately after 'mult' is typed   */
  8    67  sc_stat_$Star_typed,	   /* TRUE if 'mult' and 'go' came from 'star' */
  8    68  sc_stat_$admin_listener_switch, /* TRUE if in the admin listener	       */
  8    69  sc_stat_$did_part1,	   /* TRUE if part 1 of system startup ec done */
  8    70  sc_stat_$did_part2,	   /* TRUE if part 2 of system startup ec done */
  8    71  sc_stat_$did_part3,	   /* TRUE if part 3 of system startup ec done */
  8    72  sc_stat_$mc_is_on,		   /* TRUE if message coordinator running      */
  8    73  sc_stat_$no_operator_login,	   /* TRUE if operator login not required, or  */
  8    74 			   /*	 if PNT not yet available.	       */
  8    75  sc_stat_$shutdown_typed,	   /* TRUE if 'shutdown' command in progress.  */
  8    76  sc_stat_$test_mode,	   /* TRUE if in test environment	       */
  8    77  sc_stat_$vchn_requires_accept   /* TRUE if vchn may only be used if accepted*/
  8    78 			   /*      by operator signed on system console*/
  8    79     ) bit(1) aligned ext static;
  8    80 
  8    81 
  8    82 /*  END OF:  sc_stat_.incl.pl1			  *  *  *  *  *  */
      606 
      607  /*  BEGIN:   sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
  9     2 
  9     3 /* format:style3,idind30 */
  9     4 
  9     5 /* Created  1984-10-24  BIM */
  9     6 /* Modified 1985-01-07, BIM: access control flags that track admin and X */
  9     7 /* Modified 1985-02-18, E. Swenson to save away abort_line procedure. */
  9     8 
  9     9 
  9    10 /****^  HISTORY COMMENTS:
  9    11*  1) change(87-02-17,GDixon), approve(87-07-03,MCR7680),
  9    12*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  9    13*     Correct formatting problems.  Add sc_subsystem_info.flags.dont_mask_calls
  9    14*     switch.
  9    15*  2) change(87-07-03,GDixon), approve(87-07-03,MCR7680),
  9    16*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  9    17*     Removed dont_mask_calls flag.  It is no longer needed to correctly perform
  9    18*     masking on a per-request basis.
  9    19*                                                   END HISTORY COMMENTS */
  9    20 
  9    21 
  9    22 declare	sc_subsystem_info_ptr	pointer;
  9    23 declare	1 sc_subsystem_info		aligned based (sc_subsystem_info_ptr),
  9    24 	  2 restriction_flags	bit (36) aligned,	/* copied from mc atep or fabricated */
  9    25 	  2 flags			aligned,
  9    26 	    3 no_real_tty		bit (1) unaligned,	/* for sc_admin_command_ */
  9    27 	    3 print_ready		bit (1) unal,	/* on for all except the system console,	*/
  9    28 						/*  instructs sc_process_command_line_ to deal	*/
  9    29 						/*  with the prompt				*/
  9    30 	    3 the_system_console	bit (1) unal,	/* syserr messages are printed here (but console	*/
  9    31 						/*  recover doesn't try to fix this) copied here	*/
  9    32 						/*  from the mc_ate to save other looking in there*/
  9    33 	    3 printer_offed		bit (1) unal,	/* suppress logging */
  9    34 	    3 pad			bit (32) unaligned,
  9    35 	  2 source_name		char (32) unaligned,
  9    36 	  2 area_ptr		pointer,
  9    37 	  2 mc_atep		pointer,		/* needed to play with attachments */
  9    38 	  2 real_iocb		pointer,		/* for sc_signal_io_handler_ */
  9    39 	  2 hangup_entry		entry (pointer) variable,
  9    40 						/* called on io_no_permission. */
  9    41 	  2 real_execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
  9    42 	  2 real_locate_request	entry (ptr, char (*), ptr, fixed bin (35)),
  9    43 	  2 access_control_name	char (32) unaligned,
  9    44 	  2 real_invoke_request	entry,		/* since MR11 ssu_ lacks the ability to	abort a	*/
  9    45 						/*  single request, we have an invoke_request that*/
  9    46 						/*  handles a condition to unwind the request	*/
  9    47 	  2 abort_request_label	label,		/* go here (nonlocally) to unwind a single request */
  9    48 	  2 real_abort_line		entry options (variable);
  9    49 
  9    50 declare	sc_ss_area		area based (sc_subsystem_info.area_ptr);
  9    51 
  9    52 /* The following defines the user flags for the request table. */
  9    53 
  9    54 declare	sc_rf_ptr			pointer;
  9    55 declare	1 sc_request_flags		unaligned based (sc_rf_ptr),
  9    56 	  2 dont_parse_arguments	bit,		/* reply, intercom */
  9    57 	  2 obsolete		bit,		/* warn opr to not use it */
  9    58 	  2 dont_mask_calls		bit,		/* this runs without masking ev calls */
  9    59 	  2 requires_as		bit,		/* not before AS */
  9    60 	  2 requires_no_as		bit,		/* only before AS */
  9    61 	  2 complete_disks_first	bit,		/* try to mount disks */
  9    62 	  2 no_login_needed		bit,		/* sign_on */
  9    63 	  2 pad			bit (5),
  9    64 	  2 restriction_type	fixed bin (6) unsigned;
  9    65 						/* index into restriction flag string */
  9    66 
  9    67 
  9    68 /*  END OF:  sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
      607 
      608  /* BEGIN INCLUDE FILE sys_log_constants.incl.pl1 ... 82-09-24 E. N. Kittlitz */
 10     2 
 10     3 
 10     4 /****^  HISTORY COMMENTS:
 10     5*  1) change(87-04-22,GDixon), approve(87-06-10,MCR7708),
 10     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
 10     7*     Added sl_info structure and associated named constants for use in calling
 10     8*     sys_log_$general.
 10     9*                                                   END HISTORY COMMENTS */
 10    10 
 10    11 
 10    12 /* format: style4 */
 10    13 
 10    14 dcl  (
 10    15      SL_TYPE_CRASH init (-3),				/* type message with banner & kill system */
 10    16      SL_TYPE_BEEP init (-2),				/* type message with banner */
 10    17      SL_TYPE init (-1),				/* type message */
 10    18      SL_LOG_SILENT init (0),				/* log message */
 10    19      SL_LOG init (1),				/* log & type message */
 10    20      SL_LOG_BEEP init (2),				/* log & type message with banner */
 10    21      SL_LOG_CRASH init (3)				/* log & type message with banner & kill system */
 10    22      ) fixed bin internal static options (constant);
 10    23 
 10    24 dcl  1 sl_info aligned automatic,
 10    25        2 version char(8),			/* structure version       */
 10    26        2 arg_list_ptr ptr,			/* arg_list with values    */
 10    27        2 loc,
 10    28          3 (mode, severity, code, caller, data, class, ioa_msg) fixed bin,
 10    29            /* These flags control where the corresponding data item is found.*/
 10    30 	 /*  -1: data appears in the corresponding structure element below */
 10    31 	 /*   0: data is not present anywhere			       */
 10    32 	 /*  +N: data is Nth item in argument list pointed to by 	       */
 10    33 	 /*      sl_info.arg_list_ptr.  Upon return, data copied into      */
 10    34 	 /*      corresponding structure element.		       */
 10    35 	 /*  if data = +N:					       */
 10    36 	 /*      argN is data_ptr, argN+1 is data_len		       */
 10    37 	 /*  if ioa_msg = +N:				       */
 10    38 	 /*      argN+1, ... argLAST are arguments substituted into the    */
 10    39 	 /*      ioa_msg control string.  The formatted msg is returned.   */
 10    40        2 flags,
 10    41          3 ioa_msg_is_error_code bit(1) unal,	/* ioa_ctl is error code.  */
 10    42          3 flags_pad bit(35) unal,
 10    43        2 mode fixed bin,			/* as-mode, command-mode   */
 10    44        2 severity fixed bin,			/* error severity	       */
 10    45        2 code fixed bin(35),			/* error table code        */
 10    46        2 caller char(65) varying,		/* caller refname$entryname*/
 10    47        2 data,				/* binary data ptr/length  */
 10    48          3 data_ptr ptr,
 10    49          3 data_lth fixed bin(21),
 10    50        2 class char(10) varying,		/* binary data class       */
 10    51        2 ioa_msg char(500) varying;		/* formatted message text  */
 10    52 
 10    53 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    54 /*							       */
 10    55 /* If data values (eg, sl_info.caller) are passed in the argument list,      */
 10    56 /* their data types should be as shown in the structure above, except that   */
 10    57 /* character strings should be char(*) nonvarying.		       */
 10    58 /*							       */
 10    59 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    60 
 10    61 /* value for sl_info.version */
 10    62 dcl  SL_INFO_version_1 char (8) int static options(constant) init("sl_info1");
 10    63 
 10    64 /* values for sl_info.mode */
 10    65 dcl (SL_INFO_as_mode init(1),
 10    66      SL_INFO_command_mode init(2)) fixed bin int static options(constant);
 10    67 
 10    68 /* values for sl_info.loc.(severity code caller data class ioa_ctl arg) */
 10    69 dcl (SL_INFO_arg_given_in_structure init(-1),
 10    70      SL_INFO_arg_not_given init(0)) fixed bin int static options(constant);
 10    71 
 10    72 
 10    73 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    74 /*							       */
 10    75 /* The following static structures are commonly used in the Login Server     */
 10    76 /* user control software.					       */
 10    77 /*							       */
 10    78 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    79 
 10    80 /* Syntax: call Abort (severity, code, ioa_ctl, args);		       */
 10    81 
 10    82 dcl  1 sl_info_sev_code_msg		aligned int static options(constant),
 10    83        2 version char(8)		init ("sl_info1"),
 10    84        2 arg_list_ptr ptr		init (null),
 10    85        2 loc,
 10    86          3 (mode			init (-1),
 10    87 	  severity  		init ( 1),
 10    88 	  code 			init ( 2),
 10    89 	  caller 			init (-1),
 10    90 	  data 			init ( 0),
 10    91 	  class 			init ( 0),
 10    92 	  ioa_msg			init ( 3)) fixed bin,
 10    93        2 flags,
 10    94          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
 10    95          3 flags_pad bit(35) unal	init ("0"b),
 10    96        2 mode fixed bin		init ( 1),
 10    97        2 severity fixed bin		init ( 0),
 10    98        2 code fixed bin(35)		init ( 0),
 10    99        2 caller char(65) varying	init (""),
 10   100        2 data,
 10   101          3 data_ptr ptr		init (null),
 10   102          3 data_lth fixed bin(21)	init ( 0),
 10   103        2 class char(10) varying	init (""),
 10   104        2 ioa_msg char(500) varying	init ("");
 10   105 
 10   106 /* Syntax: call Abort (severity, ioa_ctl, args);			       */
 10   107 
 10   108 dcl  1 sl_info_sev_msg		aligned int static options(constant),
 10   109        2 version char(8)		init ("sl_info1"),
 10   110        2 arg_list_ptr ptr		init (null),
 10   111        2 loc,
 10   112          3 (mode			init (-1),
 10   113 	  severity  		init ( 1),
 10   114 	  code 			init ( 0),
 10   115 	  caller 			init (-1),
 10   116 	  data 			init ( 0),
 10   117 	  class 			init ( 0),
 10   118 	  ioa_msg			init ( 2)) fixed bin,
 10   119        2 flags,
 10   120          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
 10   121          3 flags_pad bit(35) unal	init ("0"b),
 10   122        2 mode fixed bin		init ( 1),
 10   123        2 severity fixed bin		init ( 0),
 10   124        2 code fixed bin(35)		init ( 0),
 10   125        2 caller char(65) varying	init (""),
 10   126        2 data,
 10   127          3 data_ptr ptr		init (null),
 10   128          3 data_lth fixed bin(21)	init ( 0),
 10   129        2 class char(10) varying	init (""),
 10   130        2 ioa_msg char(500) varying	init ("");
 10   131 
 10   132 /* Syntax: call Abort (severity, ioa_ctl_as_error_code, args);	       */
 10   133 
 10   134 dcl  1 sl_info_sev_coded_msg		aligned int static options(constant),
 10   135        2 version char(8)		init ("sl_info1"),
 10   136        2 arg_list_ptr ptr		init (null),
 10   137        2 loc,
 10   138          3 (mode			init (-1),
 10   139 	  severity  		init ( 1),
 10   140 	  code 			init ( 0),
 10   141 	  caller 			init (-1),
 10   142 	  data 			init ( 0),
 10   143 	  class 			init ( 0),
 10   144 	  ioa_msg			init ( 2)) fixed bin,
 10   145        2 flags,
 10   146          3 ioa_msg_is_error_code bit(1) unal init ("1"b),
 10   147          3 flags_pad bit(35) unal	init ("0"b),
 10   148        2 mode fixed bin		init ( 1),
 10   149        2 severity fixed bin		init ( 0),
 10   150        2 code fixed bin(35)		init ( 0),
 10   151        2 caller char(65) varying	init (""),
 10   152        2 data,
 10   153          3 data_ptr ptr		init (null),
 10   154          3 data_lth fixed bin(21)	init ( 0),
 10   155        2 class char(10) varying	init (""),
 10   156        2 ioa_msg char(500) varying	init ("");
 10   157 
 10   158 
 10   159 /* Syntax: call Abort (severity, code, error_return_label, ioa_ctl, args);   */
 10   160 
 10   161 dcl  1 sl_info_sev_code_label_msg	aligned int static options(constant),
 10   162        2 version char(8)		init ("sl_info1"),
 10   163        2 arg_list_ptr ptr		init (null),
 10   164        2 loc,
 10   165          3 (mode			init (-1),
 10   166 	  severity  		init ( 1),
 10   167 	  code 			init ( 2),
 10   168 	  caller 			init (-1),
 10   169 	  data 			init ( 0),
 10   170 	  class 			init ( 0),
 10   171 	  ioa_msg			init ( 4)) fixed bin,
 10   172        2 flags,
 10   173          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
 10   174          3 flags_pad bit(35) unal	init ("0"b),
 10   175        2 mode fixed bin		init ( 1),
 10   176        2 severity fixed bin		init ( 0),
 10   177        2 code fixed bin(35)		init ( 0),
 10   178        2 caller char(65) varying	init (""),
 10   179        2 data,
 10   180          3 data_ptr ptr		init (null),
 10   181          3 data_lth fixed bin(21)	init ( 0),
 10   182        2 class char(10) varying	init (""),
 10   183        2 ioa_msg char(500) varying	init ("");
 10   184 
 10   185 /* Syntax:  call Log_error (code, ioa_ctl, args);			       */
 10   186 
 10   187 dcl  1 sl_info_code_msg		aligned int static options(constant),
 10   188        2 version char(8)		init ("sl_info1"),
 10   189        2 arg_list_ptr ptr		init (null),
 10   190        2 loc,
 10   191          3 (mode			init (-1),
 10   192 	  severity  		init (-1),
 10   193 	  code 			init ( 1),
 10   194 	  caller 			init (-1),
 10   195 	  data 			init ( 0),
 10   196 	  class 			init ( 0),
 10   197 	  ioa_msg			init ( 2)) fixed bin,
 10   198        2 flags,
 10   199          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
 10   200          3 flags_pad bit(35) unal	init ("0"b),
 10   201        2 mode fixed bin		init ( 1),
 10   202        2 severity fixed bin		init ( 0),
 10   203        2 code fixed bin(35)		init ( 0),
 10   204        2 caller char(65) varying	init (""),
 10   205        2 data,
 10   206          3 data_ptr ptr		init (null),
 10   207          3 data_lth fixed bin(21)	init ( 0),
 10   208        2 class char(10) varying	init (""),
 10   209        2 ioa_msg char(500) varying	init ("");
 10   210 
 10   211 
 10   212 /* Syntax:  call Trace (ioa_ctl, args);				       */
 10   213 
 10   214 dcl  1 sl_info_msg			aligned int static options(constant),
 10   215        2 version char(8)		init ("sl_info1"),
 10   216        2 arg_list_ptr ptr		init (null),
 10   217        2 loc,
 10   218          3 (mode			init (-1),
 10   219 	  severity  		init (-1),
 10   220 	  code 			init ( 0),
 10   221 	  caller 			init (-1),
 10   222 	  data 			init ( 0),
 10   223 	  class 			init ( 0),
 10   224 	  ioa_msg			init ( 1)) fixed bin,
 10   225        2 flags,
 10   226          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
 10   227          3 flags_pad bit(35) unal	init ("0"b),
 10   228        2 mode fixed bin		init ( 1),
 10   229        2 severity fixed bin		init ( 0),
 10   230        2 code fixed bin(35)		init ( 0),
 10   231        2 caller char(65) varying	init (""),
 10   232        2 data,
 10   233          3 data_ptr ptr		init (null),
 10   234          3 data_lth fixed bin(21)	init ( 0),
 10   235        2 class char(10) varying	init (""),
 10   236        2 ioa_msg char(500) varying	init ("");
 10   237 
 10   238 /* END INCLUDE FILE sys_log_constants.incl.pl1 */
      608 
      609  /* BEGIN INCLUDE FILE syserr_constants.incl.pl1 ... 11/11/80 W. Olin Sibert */
 11     2 /* 85-02-12, EJ Sharpe - Added sorting class constants, removed AIM_MESSAGE, added new action code names. */
 11     3 /* 85-04-24, G. Palter - Renamed SYSERR_UNUSED_10 to SYSERR_RING1_ERROR to reflect its actual use. */
 11     4 
 11     5 /* This include file has an ALM version.  Keep 'em in sync! */
 11     6 
 11     7 dcl (
 11     8 
 11     9 /* The following constants define the message action codes.  This indicates
 11    10*how a message is to be handled.  */
 11    11 
 11    12      SYSERR_CRASH_SYSTEM	init (1),			
 11    13      CRASH		init (1), 		/* Crash the system, and bleat plaintively. */
 11    14 
 11    15      SYSERR_TERMINATE_PROCESS	init (2),
 11    16      TERMINATE_PROCESS	init (2), 		/* Terminate the process, print the message, and beep. */
 11    17 
 11    18      SYSERR_PRINT_WITH_ALARM	init (3),
 11    19      BEEP 		init (3), 		/* Beep and print the message on the console. */
 11    20 
 11    21      SYSERR_PRINT_ON_CONSOLE	init (0),
 11    22      ANNOUNCE		init (0), 		/* Just print the message on the console. */
 11    23 
 11    24      SYSERR_LOG_OR_PRINT	init (4),
 11    25      LOG			init (4), 		/* Log the message, or print it if it can't be logged */
 11    26 
 11    27      SYSERR_LOG_OR_DISCARD	init (5),
 11    28      JUST_LOG		init (5), 		/* Just try to log the message, and discard it if it can't be */
 11    29 
 11    30 
 11    31 /* The following constants are added to the normal severities to indicate
 11    32*different sorting classes of messages.  */
 11    33 
 11    34      SYSERR_SYSTEM_ERROR	init (00),		/* indicates a standard level system error */
 11    35      SYSERR_RING1_ERROR	init (10),		/* indicates an error detected in ring 1 (mseg_, RCP) */
 11    36      SYSERR_COVERT_CHANNEL	init (20),		/* indicates covert channel audit trail message */
 11    37      SYSERR_UNSUCCESSFUL_ACCESS init (30),		/* indicates access denial audit trail message */
 11    38      SYSERR_SUCCESSFUL_ACCESS	init (40)			/* indicates access grant audit trail message */
 11    39 	) fixed bin internal static options (constant);
 11    40 
 11    41 /* END INCLUDE FILE syserr_constants.incl.pl1 */
      609 
      610  	/* START OF:	time_names_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 12     2 
 12     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12     4 	/*									*/
 12     5 	/* Name:  time_names_.incl.pl1						*/
 12     6 	/*									*/
 12     7 	/* This include file defines the structure of values in the time_table_.  The table	*/
 12     8 	/* includes a list of time zones known to the system, as well as lists of month names	*/
 12     9 	/* and names of days of the week.  All names are expressed in several different languages */
 12    10 	/* to facilitate transliteration of dates into these languages.  The table includes	*/
 12    11 	/* the list of languages in which dates may be expressed.				*/
 12    12 	/*									*/
 12    13 	/* Status									*/
 12    14 	/*									*/
 12    15 	/* 0) Created  06/07/78:  J. Falksen						*/
 12    16 	/* 1) Modified 07/04/78:  G. Dixon						*/
 12    17 	/*									*/
 12    18 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12    19 
 12    20 
 12    21 dcl time_info_$version	char (8) ext static;	/* Version number of all structures in the	*/
 12    22 						/* time_info_.  Currently = 1.		*/
 12    23 dcl Vtime_info_2		char (8) int static options(constant) init("tinfo002");




 12    24 
 12    25 dcl time_info_$gmt_zone_index fixed bin (17) ext static;
 12    26 dcl time_info_$default_language_index fixed bin (17) ext static;
 12    27 
 12    28 dcl time_info_$date_time_keywords fixed bin ext static;	/* Table of named date/time format strings	*/
 12    29 dcl 1 ti_keyword	based (addr (time_info_$date_time_keywords)),
 12    30       2 number_kwd		fixed bin,		/* number of keywords present		*/
 12    31       2 pad		fixed bin,
 12    32       2 e (0 refer (ti_keyword.number_kwd)),
 12    33         3 name		char (32),
 12    34         3 str		char (128)var;
 12    35 dcl (site_date	init (1),
 12    36      site_date_time init (2),
 12    37      site_time	init (3)
 12    38     )		fixed bin int static options (constant);
 12    39 
 12    40 dcl time_info_$language_names fixed bin ext static;	/* Table of language names, in various languages	*/
 12    41 
 12    42 dcl 1 ti_language	based (addr (time_info_$language_names)),
 12    43       2 number_lang		fixed bin,		/* number of language names present 		*/
 12    44       2 pad		fixed bin,
 12    45       2 name (0 refer (ti_language.number_lang), 0 refer (ti_language.number_lang))
 12    46 			char(32) varying;		/* Name of the language.			*/
 12    47 			/* All language names are expressed in all languages.  name(i,j) gives the	*/
 12    48 			/*  jth language name in language i.  name(i,i) gives a language name in its	*/
 12    49 			/*  own language.							*/




 12    50 dcl time_info_$month_names   fixed bin ext static;	/* Table of month  names in various languages. 	*/
 12    51 
 12    52 dcl 1 ti_month based (addr (time_info_$month_names)),
 12    53       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    54       2 pad		fixed bin,
 12    55       2 e (0 refer (ti_month.number_lang), 12),
 12    56         3 short       	char(8) var,		/* short form of a month name, i.e., Nov 	*/
 12    57         3 long        	char(32) var;		/* long form of a month name, i.e. November 	*/




 12    58 dcl time_info_$day_names     fixed bin ext static;	/* Table of day names in various languages.	*/
 12    59 
 12    60 dcl 1 ti_day based (addr (time_info_$day_names)),
 12    61       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    62       2 pad		fixed bin,
 12    63       2 e (0 refer (ti_day.number_lang), 7),
 12    64         3 short       	char(8) var,		/* short for of a day name, i.e. Sat 		*/
 12    65         3 long        	char(32) var;		/* long form of a day name, i.e. Saturday 	*/




 12    66 dcl time_info_$offset_names  fixed bin ext static;	/* Table of offset names in various languages.	*/
 12    67 
 12    68 dcl 1 ti_offset based (addr (time_info_$offset_names)),
 12    69       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    70       2 number_offset	fixed bin,
 12    71       2 e (0 refer (ti_offset.number_lang), 0 refer (ti_offset.number_offset)),
 12    72         3 short        	char(32) var,		/* short form of an offset name, i.e. min 	*/
 12    73         3 plural        	char(32) var,		/* plural form of an offset name, i.e. minutes 	*/
 12    74         3 singular       	char(32) var,		/* singular for of an offset name, i.e. minute	*/
 12    75         3 this		char(32) var;		/* "this" which goes with singular		*/




 12    76 dcl time_info_$word_names    fixed bin ext static;	/* Table of word names in various languages.	*/
 12    77 
 12    78 dcl 1 ti_word based (addr (time_info_$word_names)),
 12    79       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    80       2 number_word		fixed bin,
 12    81       2 short (0 refer (ti_word.number_lang), 0 refer (ti_word.number_word))
 12    82 			char (8) var,
 12    83       2 word (0 refer (ti_word.number_lang), 0 refer (ti_word.number_word))
 12    84 			char(32) var;		/* a "word", i.e. Midnight			*/
 12    85 
 12    86 dcl time_info_$zone_names    fixed bin ext static;	/* Table of known time zones.			*/
 12    87 
 12    88 dcl 1 ti_zone based (addr (time_info_$zone_names)),
 12    89       2 number_lang    	fixed bin,		/* number of languages in which zone names	*/
 12    90 						/* are defined.				*/
 12    91       2 number_zone       	fixed bin,		/* number of zone names in the table.		*/
 12    92       2 e (0 refer (ti_zone.number_lang), 0 refer (ti_zone.number_zone)),
 12    93         3 short		char(4) var,		/* short form of the zone name.		*/
 12    94         3 long        	char(64) var,		/* long form of the zone name 		*/
 12    95         3 pad		fixed bin,
 12    96         3 delta		fixed bin(71);		/* offset, in microseconds, of this time zone	*/
 12    97 						/* from GMT (Greenwich mean time).  This value	*/
 12    98 						/* should be subtracted from a clock value	*/
 12    99 						/* (which is expressed in GMT by definition).	*/
 12   100 						/* to obtain a date/time expressed in the	*/
 12   101 						/* named time zone.				*/
 12   102 						/* NOTE:  zones are listed in order of descending */
 12   103 						/* delta, from +11 to -12.  print_time_zones	*/
 12   104 						/* requires this.				*/
 12   105 
 12   106 
 12   107 dcl (tiw_FiscalIndicator init (11)
 12   108     )		fixed bin int static options (constant);
 12   109 
 12   110 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 12   111 /* NOTE TO MAINTAINER: Before changing this file, see the comments in	       */
 12   112 /*		        time_info_cds.incl.pl1		       */
 12   113 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 12   114 
 12   115 /* END OF:	time_names_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      610 
      611 
      612 /* BEGIN MESSAGE DOCUMENTATION
      613*
      614*   Message:
      615*   sc_requests_ (set_time_zone): Changed time zone from OLD_ZONE to NEW_ZONE.
      616*
      617*   S:	$sc
      618*
      619*   T:	$run
      620*
      621*   M:	This messages records that the set_time_zone operator request was
      622*	given, and that the system default time zone was thereby changed 
      623*	from OLD_ZONE to NEW_ZONE.
      624*
      625*   A:	$ignore
      626*
      627*   END MESSAGE DOCUMENTATION */
      628 
      629      end sc_requests_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0809.2  sc_requests_.pl1                  >spec>install>1112>sc_requests_.pl1
598          1    08/06/87  0913.4  as_data_.incl.pl1                 >ldd>include>as_data_.incl.pl1
599          2    08/06/87  0913.4  installation_parms.incl.pl1       >ldd>include>installation_parms.incl.pl1
2-148        3    11/21/79  1458.3  rcp_init_flags.incl.pl1           >ldd>include>rcp_init_flags.incl.pl1
601          4    05/23/83  0916.6  iox_entries.incl.pl1              >ldd>include>iox_dcls.incl.pl1
602          5    08/06/87  0913.5  mc_anstbl.incl.pl1                >ldd>include>mc_anstbl.incl.pl1
603          6    03/15/85  0953.1  pnt_entry.incl.pl1                >ldd>include>pnt_entry.incl.pl1
605          7    03/11/83  1204.3  query_info.incl.pl1               >ldd>include>query_info.incl.pl1
606          8    08/06/87  0913.5  sc_stat_.incl.pl1                 >ldd>include>sc_stat_.incl.pl1
607          9    08/06/87  0913.5  sc_subsystem_info_.incl.pl1       >ldd>include>sc_subsystem_info_.incl.pl1
608         10    08/06/87  0913.5  sys_log_constants.incl.pl1        >ldd>include>sys_log_constants.incl.pl1
609         11    05/17/85  0615.7  syserr_constants.incl.pl1         >ldd>include>syserr_constants.incl.pl1
610         12    09/06/84  0850.2  time_names.incl.pl1               >ldd>include>time_names.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DENIED                          000056 constant        bit(1)                   initial dcl 155 set ref 503*
GRANTED                         000057 constant        bit(1)                   initial dcl 155 set ref 516*
PNTE                            000604 automatic       structure                level 1 dcl 604 set ref 491 491
PNT_ENTRY_VERSION_2                    constant        fixed bin(17,0)          initial dcl 6-64 ref 489
P_arg1                                 parameter       char                     packed unaligned dcl 565 set ref 562 580*
SCI_info_ptr                           parameter       pointer                  dcl 78 ref 160 167 200 210 220 253 266 289 335 357
                                                                                  379 390 408 418 441 462 519 537 557
SCI_ptr                                parameter       pointer                  dcl 77 ref 160 167 200 210 220 253 266 289 335 357
                                                                                  379 390 408 418 441 462 519 537 556
SL_LOG                          000061 constant        fixed bin(17,0)          initial dcl 10-14 set ref 329*
access_control_name      34            based           char(32)                 level 2 packed packed unaligned dcl 9-23 set ref
                                                                                  513* 532* 571 575* 579*
addr                                                   builtin function         dcl 151 ref 194 194 305 306 307 436 436 476 476 491
                                                                                  491
after                                                  builtin function         dcl 151 ref 186 186 434 434
al                              000100 automatic       fixed bin(21,0)          dcl 80 set ref 177* 178 296* 298 298 298 302 312 312
                                                                                  425* 426 447* 448 448 451 451 454 454 457 457 458
                                                                                  458 481* 482
answer_iocbp              6     000724 automatic       pointer                  initial level 2 dcl 7-7 set ref 7-7*
ap                              000102 automatic       pointer                  dcl 81 set ref 177* 178 296* 298 302 312 425* 426
                                                                                  447* 448 451 454 457 458 481* 482
arg_count                       000104 automatic       fixed bin(17,0)          dcl 82 set ref 173 204 213 225 257 270 293 339 360
                                                                                  383 394 411 422 445 466 472 523 558*
argument                               based           char                     packed unaligned dcl 83 set ref 178 298* 302 312*
                                                                                  426 448* 451* 454* 457* 458* 482
as_$as_init                     000010 constant        entry                    external dcl 101 ref 280
as_$go                          000012 constant        entry                    external dcl 102 ref 235
as_$reset                       000014 constant        entry                    external dcl 103 ref 386
as_$shut_ok                     000016 constant        entry                    external dcl 104 ref 344
as_$startup                     000020 constant        entry                    external dcl 105 ref 372
as_data_$rs_ptrs                000134 external static pointer                  array dcl 1-49 ref 244
before                                                 builtin function         dcl 151 ref 179 427
byte                                                   builtin function         dcl 151 ref 183 431
call_ec_                        000030 constant        entry                    external dcl 109 ref 580
cleanup                         000000 stack reference condition                dcl 153 ref 572
code                            000105 automatic       fixed bin(35,0)          dcl 84 set ref 188* 189 189* 191 191* 194* 195 195*
                                                                                  235* 236 236* 280* 282 282* 320* 321 321* 325* 326
                                                                                  326* 344* 345 348* 372* 373 398* 402* 403 404*
                                                                                  414* 436* 437 437* 448* 449 451 451* 454* 457* 458
                                                                                  458* 491* 492 494 527* 528
command_query_                  000022 constant        entry                    external dcl 106 ref 476
command_query_$yes_no           000024 constant        entry                    external dcl 107 ref 348
cp_escape_control         1(02) 000724 automatic       bit(2)                   initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
date_time_$set_zone             000026 constant        entry                    external dcl 108 ref 325
destination                     000106 automatic       varying char(32)         dcl 85 set ref 179* 180 182* 188 189* 191* 194* 195*
                                                                                  427* 428 430* 436* 437*
e                         2            based           structure                array level 2 unaligned dcl 12-88
error_table_$id_not_found       000126 external static fixed bin(35,0)          dcl 147 ref 494
error_table_$noentry            000130 external static fixed bin(35,0)          dcl 147 ref 189 451
error_table_$unknown_zone       000132 external static fixed bin(35,0)          dcl 147 set ref 298* 312*
explanation_len          14     000724 automatic       fixed bin(21,0)          initial level 2 dcl 7-7 set ref 7-7*
explanation_ptr          12     000724 automatic       pointer                  initial level 2 dcl 7-7 set ref 7-7*
flags                    40     000604 automatic       structure                level 3 in structure "PNTE" dcl 604 in procedure
                                                                                  "sc_requests_"
flags                                  based           structure                level 2 in structure "mc_ate" dcl 5-54 in procedure
                                                                                  "sc_requests_"
found_zone                      000117 automatic       bit(1)                   dcl 86 set ref 304* 305 306 307* 312
hphcs_$call_bce                 000032 constant        entry                    external dcl 110 ref 216
hphcs_$set_system_time_zone     000034 constant        entry                    external dcl 111 ref 320
installation_parms                     based           structure                level 1 dcl 2-33
installation_parms_part_1              based           structure                level 1 dcl 2-40
installation_parms_resource_array_part based           structure                array level 1 unaligned dcl 2-144
ioa_                            000036 constant        entry                    external dcl 113 ref 545 548
ioa_$rs                         000040 constant        entry                    external dcl 114 ref 186 434
iox_$control                    000136 constant        entry                    external dcl 4-8 ref 398
ip                              000600 automatic       pointer                  dcl 600 set ref 244* 245 247 247
ipc_$mask_ev_calls              000042 constant        entry                    external dcl 115 ref 414
ipc_$unmask_ev_calls            000044 constant        entry                    external dcl 116 ref 404
lang_index                      000120 automatic       fixed bin(17,0)          dcl 87 set ref 305* 307*
length                                                 builtin function         dcl 151 ref 298
lg_ctl_$login_operator          000046 constant        entry                    external dcl 117 ref 503 516
lg_ctl_$logout_operator         000050 constant        entry                    external dcl 118 ref 511 530
literal_sw                1(05) 000724 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
ltrim                                                  builtin function         dcl 151 ref 178 426
mc_ate                                 based           structure                level 1 dcl 5-54
mc_atep                  14            based           pointer                  level 2 in structure "sc_subsystem_info" dcl 9-23
                                                                                  in procedure "sc_requests_" set ref 194* 436* 457*
                                                                                  468 507* 525 527* 544
mc_atep                         000602 automatic       pointer                  dcl 5-54 in procedure "sc_requests_" set ref 544*
                                                                                  545 548 548 548 548 548 548
mc_check_access_$quit           000052 constant        entry                    external dcl 120 ref 448
mc_check_access_$reply          000054 constant        entry                    external dcl 121 ref 188
mc_commands_$intercom           000056 constant        entry                    external dcl 122 ref 436
mc_commands_$quit_command       000060 constant        entry                    external dcl 123 ref 457
mc_commands_$reply_command      000062 constant        entry                    external dcl 125 ref 194
mc_commands_$sign_in            000064 constant        entry                    external dcl 127 ref 507
mc_commands_$sign_out           000066 constant        entry                    external dcl 128 ref 527
message                         000121 automatic       char(500)                packed unaligned dcl 88 set ref 183* 186* 194 194
                                                                                  431* 434* 436 436
message_length                  000316 automatic       fixed bin(21,0)          dcl 89 set ref 184* 186* 194* 432* 434* 436*
null                                                   builtin function         dcl 151 ref 398 398 468 525 545 7-7 7-7 7-7
number_lang                            based           fixed bin(17,0)          level 2 dcl 12-88 ref 305
number_zone               1            based           fixed bin(17,0)          level 2 dcl 12-88 ref 306 307 307
old_name                        000327 automatic       char(32)                 packed unaligned dcl 91 set ref 507* 508 510* 511*
                                                                                  527* 530* 531*
old_time_zone                   000337 automatic       char(4)                  dcl 92 set ref 318* 329*
oper_info               162            based           structure                level 2 dcl 5-54
operator                 40(09) 000604 automatic       bit(1)                   level 4 packed packed unaligned dcl 604 set ref 498
operator_name                   000317 automatic       char(32)                 packed unaligned dcl 90 set ref 475* 476* 477 477
                                                                                  482* 491* 503* 506* 507* 513 514* 516*
padding                   1(07) 000724 automatic       bit(29)                  initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
part_1                                 based           structure                level 2 dcl 2-33
password                        000340 automatic       char(8)                  packed unaligned dcl 93 set ref 485* 486 486 488*
                                                                                  488* 491*
personid                162            based           char(32)                 level 3 dcl 5-54 set ref 548*
pnt_entry                              based           structure                level 1 dcl 6-22
pnt_manager_$login_get_entry    000070 constant        entry                    external dcl 129 ref 491
prompt_after_explanation
                          1(06) 000724 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
public                   22     000604 automatic       structure                level 2 dcl 604
query_code                3     000724 automatic       fixed bin(35,0)          initial level 2 dcl 7-7 set ref 7-7*
query_info                      000724 automatic       structure                level 1 dcl 7-7 set ref 476 476
query_info_version_6                   constant        fixed bin(17,0)          initial dcl 7-36 ref 474
question_iocbp            4     000724 automatic       pointer                  initial level 2 dcl 7-7 set ref 7-7*
rcp_init_flags                         based           structure                level 1 packed packed unaligned dcl 3-8
read_password_                  000072 constant        entry                    external dcl 131 ref 485
real_tty_name            11            based           char(32)                 level 2 packed packed unaligned dcl 5-54 set ref
                                                                                  548*
reason                          000342 automatic       char(100)                packed unaligned dcl 94 set ref 490* 494* 496* 498*
                                                                                  501 503*
remask_count                    000100 automatic       fixed bin(17,0)          dcl 566 set ref 570* 574* 578* 581*
repeat_time              10     000724 automatic       fixed bin(71,0)          initial level 2 dcl 7-7 set ref 7-7*
require_operator_login
                       2035            based           bit(1)                   level 3 dcl 2-33 ref 245
restart_mc_ttys_                000074 constant        entry                    external dcl 132 ref 400
rtrim                                                  builtin function         dcl 151 ref 178 426 513
saved_access_control_name       000101 automatic       char(32)                 packed unaligned dcl 567 set ref 571* 575
sc_abort_line_util_$real_abort_line
                                000076 constant        entry                    external dcl 133 ref 468 477 486 504
sc_admin_mode_                  000100 constant        entry                    external dcl 135 ref 207
sc_edit_motd_                   000102 constant        entry                    external dcl 136 ref 262
sc_ipc_mask_$remask             000104 constant        entry                    external dcl 137 ref 574 581
sc_ipc_mask_$unmask             000106 constant        entry                    external dcl 138 ref 578
sc_stat_$Go                     000150 external static bit(1)                   dcl 8-62 set ref 239*
sc_stat_$Go_typed               000152 external static bit(1)                   dcl 8-62 set ref 229*
sc_stat_$Multics                000154 external static bit(1)                   dcl 8-62 set ref 285* 342 375* 386
sc_stat_$Multics_typed          000156 external static bit(1)                   dcl 8-62 set ref 275* 366*
sc_stat_$Star_typed             000160 external static bit(1)                   dcl 8-62 set ref 365*
sc_stat_$did_part1              000162 external static bit(1)                   dcl 8-62 set ref 164* 276 279* 367 370*
sc_stat_$did_part2              000164 external static bit(1)                   dcl 8-62 set ref 164* 231 234*
sc_stat_$did_part3              000166 external static bit(1)                   dcl 8-62 set ref 164* 240 243*
sc_stat_$exec_access_name       000140 external static char(32)                 packed unaligned dcl 8-15 ref 579
sc_stat_$master_iocb            000146 external static pointer                  dcl 8-45 set ref 398*
sc_stat_$mc_is_on               000170 external static bit(1)                   dcl 8-62 ref 400
sc_stat_$no_operator_login      000172 external static bit(1)                   dcl 8-62 set ref 245*
sc_stat_$system_shutdown_label  000144 external static label variable           dcl 8-34 ref 355
sc_stat_$test_mode              000174 external static bit(1)                   dcl 8-62 ref 216
sc_stat_$unidentified_access_name
                                000142 external static char(32)                 packed unaligned dcl 8-15 ref 532
sc_stat_$vchn_requires_accept   000176 external static bit(1)                   dcl 8-62 set ref 247*
sc_subsystem_info                      based           structure                level 1 dcl 9-23
sc_subsystem_info_ptr           000742 automatic       pointer                  dcl 9-22 set ref 188* 194 436 448* 457 468 468 503*
                                                                                  507 511* 513 514 516* 525 527 530* 532 534 544
                                                                                  557* 571 575 579
sci_ptr                         000374 automatic       pointer                  dcl 95 set ref 173* 177* 189* 191* 195* 204* 213*
                                                                                  225* 236* 257* 270* 282* 293* 296* 298* 312* 321*
                                                                                  326* 339* 360* 383* 394* 411* 415* 422* 425* 437*
                                                                                  445* 447* 451* 454* 458* 466* 468* 477* 481* 486*
                                                                                  504* 510* 514* 523* 525* 531* 534* 556* 558* 590*
scramble_                       000110 constant        entry                    external dcl 139 ref 488
short                     2            based           varying char(4)          array level 3 dcl 12-88 ref 307
signed_on                 0(06)        based           bit(1)                   level 3 packed packed unaligned dcl 5-54 set ref
                                                                                  548*
source_name               2            based           char(32)                 level 2 packed packed unaligned dcl 9-23 set ref
                                                                                  468* 514* 534*
ssu_$abort_line                 000112 constant        entry                    external dcl 140 ref 173 189 191 195 204 213 225 236
                                                                                  257 270 282 293 298 312 321 326 339 360 383 394
                                                                                  411 422 437 445 451 454 458 466 523 525 534
ssu_$arg_count                  000114 constant        entry                    external dcl 141 ref 558
ssu_$arg_ptr                    000116 constant        entry                    external dcl 142 ref 177 296 425 447 481
ssu_$get_debug_mode             000202 constant        entry                    external dcl 588 ref 590
ssu_$print_message              000120 constant        entry                    external dcl 143 ref 415 510 514 531
status_code               2     000724 automatic       fixed bin(35,0)          initial level 2 dcl 7-7 set ref 7-7*
suppress_name_sw          1(01) 000724 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
suppress_spacing          1(04) 000724 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
switches                  1     000724 automatic       structure                level 2 dcl 7-7
sys_info$time_zone              000124 external static char(4)                  dcl 145 ref 318
sys_log_                        000122 constant        entry                    external dcl 144 ref 329
temp_line                       000376 automatic       varying char(500)        dcl 96 set ref 178* 179 180 182 186 186 426* 427 430
                                                                                  434 434
the_system_console        0(03)        based           bit(1)                   level 3 packed packed unaligned dcl 5-54 ref 548
ti_zone                                based           structure                level 1 unaligned dcl 12-88
time_info_$zone_names           000200 external static fixed bin(17,0)          dcl 12-86 set ref 305 306 307
time_zone                       000574 automatic       char(4)                  dcl 97 set ref 298 302* 307 320* 321* 325 326* 329*
user_id                  22     000604 automatic       char(32)                 level 3 dcl 604 set ref 506
vchn_requires_accept   2044            based           bit(1)                   level 3 dcl 2-33 ref 247 247
version                         000724 automatic       fixed bin(17,0)          level 2 in structure "query_info" dcl 7-7
                                                                                  in procedure "sc_requests_" set ref 474*
version                         000604 automatic       fixed bin(17,0)          level 2 in structure "PNTE" dcl 604 in procedure
                                                                                  "sc_requests_" set ref 489*
virtual                                based           bit(1)                   level 3 packed packed unaligned dcl 5-54 set ref
                                                                                  548*
virtual_tty_name          1            based           char(32)                 level 2 packed packed unaligned dcl 5-54 set ref
                                                                                  548*
yea_shutdown                    000575 automatic       bit(1)                   dcl 98 set ref 347* 348* 351
yes_or_no_sw              1     000724 automatic       bit(1)                   initial level 3 packed packed unaligned dcl 7-7 set
                                                                                  ref 7-7*
zone_index                      000576 automatic       fixed bin(17,0)          dcl 99 set ref 306* 307*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ANNOUNCE                               internal static fixed bin(17,0)          initial dcl 11-7
Automatic_authentication               internal static fixed bin(17,0)          initial dcl 3-16
BEEP                                   internal static fixed bin(17,0)          initial dcl 11-7
CRASH                                  internal static fixed bin(17,0)          initial dcl 11-7
JUST_LOG                               internal static fixed bin(17,0)          initial dcl 11-7
LOG                                    internal static fixed bin(17,0)          initial dcl 11-7
MC_WAIT_ANSWERBACK                     internal static fixed bin(17,0)          initial dcl 5-103
MC_WAIT_COMMAND                        internal static fixed bin(17,0)          initial dcl 5-103
MC_WAIT_DIALUP                         internal static fixed bin(17,0)          initial dcl 5-103
MC_WAIT_READY                          internal static fixed bin(17,0)          initial dcl 5-103
Manual_authentication                  internal static fixed bin(17,0)          initial dcl 3-16
No_authentication                      internal static fixed bin(17,0)          initial dcl 3-16
Nominal_authentication                 internal static fixed bin(17,0)          initial dcl 3-16
SL_INFO_arg_given_in_structure         internal static fixed bin(17,0)          initial dcl 10-69
SL_INFO_arg_not_given                  internal static fixed bin(17,0)          initial dcl 10-69
SL_INFO_as_mode                        internal static fixed bin(17,0)          initial dcl 10-65
SL_INFO_command_mode                   internal static fixed bin(17,0)          initial dcl 10-65
SL_INFO_version_1                      internal static char(8)                  initial packed unaligned dcl 10-62
SL_LOG_BEEP                            internal static fixed bin(17,0)          initial dcl 10-14
SL_LOG_CRASH                           internal static fixed bin(17,0)          initial dcl 10-14
SL_LOG_SILENT                          internal static fixed bin(17,0)          initial dcl 10-14
SL_TYPE                                internal static fixed bin(17,0)          initial dcl 10-14
SL_TYPE_BEEP                           internal static fixed bin(17,0)          initial dcl 10-14
SL_TYPE_CRASH                          internal static fixed bin(17,0)          initial dcl 10-14
SYSERR_COVERT_CHANNEL                  internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_CRASH_SYSTEM                    internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_LOG_OR_DISCARD                  internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_LOG_OR_PRINT                    internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_PRINT_ON_CONSOLE                internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_PRINT_WITH_ALARM                internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_RING1_ERROR                     internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_SUCCESSFUL_ACCESS               internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_SYSTEM_ERROR                    internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_TERMINATE_PROCESS               internal static fixed bin(17,0)          initial dcl 11-7
SYSERR_UNSUCCESSFUL_ACCESS             internal static fixed bin(17,0)          initial dcl 11-7
TERMINATE_PROCESS                      internal static fixed bin(17,0)          initial dcl 11-7
Vtime_info_2                           internal static char(8)                  initial packed unaligned dcl 12-23
as_data_$BS                            external static char(1)                  dcl 1-21
as_data_$CR                            external static char(1)                  dcl 1-22
as_data_$abs_dim                       external static char(32)                 packed unaligned dcl 1-23
as_data_$acct_update_priority          external static fixed bin(17,0)          dcl 1-24
as_data_$acsdir                        external static char(168)                packed unaligned dcl 1-25
as_data_$ansp                          external static pointer                  dcl 1-26
as_data_$as_procid                     external static bit(36)                  dcl 1-27
as_data_$as_ring                       external static fixed bin(3,0)           dcl 1-28
as_data_$as_tty                        automatic       char(6)                  packed unaligned dcl 1-29
as_data_$asmtp                         external static pointer                  dcl 1-30
as_data_$autp                          external static pointer                  dcl 1-31
as_data_$buzzardp                      external static pointer                  dcl 1-32
as_data_$cdtp                          external static pointer                  dcl 1-33
as_data_$debug_flag                    external static bit(1)                   dcl 1-84
as_data_$default_weight                external static fixed bin(35,0)          dcl 1-34
as_data_$devtabp                       external static pointer                  dcl 1-35
as_data_$dft_user_ring                 external static fixed bin(3,0)           dcl 1-36
as_data_$dutp                          external static pointer                  dcl 1-37
as_data_$g115_dim                      external static char(32)                 packed unaligned dcl 1-38
as_data_$lct_initialized               external static bit(1)                   dcl 1-39
as_data_$lct_size                      external static fixed bin(17,0)          dcl 1-40
as_data_$login_args                    external static structure                level 1 dcl 1-62
as_data_$login_words                   external static fixed bin(17,0)          dcl 1-77
as_data_$ls_message_buffer_cur_lth     external static fixed bin(18,0)          dcl 1-86
as_data_$ls_message_buffer_max_lth     external static fixed bin(18,0)          dcl 1-87
as_data_$ls_message_buffer_ptr         external static pointer                  dcl 1-88
as_data_$ls_request_server_info_ptr    external static pointer                  dcl 1-85
as_data_$max_user_ring                 external static fixed bin(3,0)           dcl 1-41
as_data_$mgtp                          external static pointer                  dcl 1-42
as_data_$mrd_dim                       external static char(32)                 packed unaligned dcl 1-43
as_data_$ntty_dim                      external static char(32)                 packed unaligned dcl 1-44
as_data_$pdtdir                        external static char(168)                packed unaligned dcl 1-45
as_data_$pit_ptr                       external static pointer                  dcl 1-46
as_data_$rcpdir                        external static char(168)                packed unaligned dcl 1-47
as_data_$request_priority              external static fixed bin(17,0)          dcl 1-48
as_data_$rtdtp                         external static pointer                  dcl 1-50
as_data_$sat_htp                       external static pointer                  dcl 1-51
as_data_$satp                          external static pointer                  dcl 1-52
as_data_$signal_types                  external static structure                level 1 dcl 1-67
as_data_$suffix                        external static char(2)                  array packed unaligned dcl 1-53
as_data_$sysdir                        external static char(168)                packed unaligned dcl 1-54
as_data_$system_signal_types           external static structure                level 1 dcl 1-72
as_data_$teens_suffix                  external static char(2)                  array packed unaligned dcl 1-55
as_data_$terminet_tabs_string          external static varying char(144)        dcl 1-56
as_data_$tty_dim                       external static char(32)                 packed unaligned dcl 1-57
as_data_$update_priority               external static fixed bin(17,0)          dcl 1-58
as_data_$version                       external static char(8)                  packed unaligned dcl 1-59
as_data_$whoptr                        external static pointer                  dcl 1-60
as_data_login_words                    based           structure                level 1 dcl 1-77
authentication_level_names             internal static char(12)                 initial array packed unaligned dcl 3-21
installation_parms_version_1           internal static fixed bin(17,0)          initial dcl 2-37
installation_parms_version_2           internal static fixed bin(17,0)          initial dcl 2-38
iox_$attach_loud                000000 constant        entry                    external dcl 4-8
iox_$attach_name                000000 constant        entry                    external dcl 4-8
iox_$attach_ptr                 000000 constant        entry                    external dcl 4-8
iox_$close                      000000 constant        entry                    external dcl 4-8
iox_$close_file                 000000 constant        entry                    external dcl 4-8
iox_$delete_record              000000 constant        entry                    external dcl 4-8
iox_$destroy_iocb               000000 constant        entry                    external dcl 4-8
iox_$detach                     000000 constant        entry                    external dcl 4-8
iox_$detach_iocb                000000 constant        entry                    external dcl 4-8
iox_$err_no_operation           000000 constant        entry                    external dcl 4-8
iox_$err_not_attached           000000 constant        entry                    external dcl 4-8
iox_$err_not_closed             000000 constant        entry                    external dcl 4-8
iox_$err_not_open               000000 constant        entry                    external dcl 4-8
iox_$error_output                      external static pointer                  dcl 4-41
iox_$find_iocb                  000000 constant        entry                    external dcl 4-8
iox_$find_iocb_n                000000 constant        entry                    external dcl 4-8
iox_$get_chars                  000000 constant        entry                    external dcl 4-8
iox_$get_line                   000000 constant        entry                    external dcl 4-8
iox_$look_iocb                  000000 constant        entry                    external dcl 4-8
iox_$modes                      000000 constant        entry                    external dcl 4-8
iox_$move_attach                000000 constant        entry                    external dcl 4-8
iox_$open                       000000 constant        entry                    external dcl 4-8
iox_$open_file                  000000 constant        entry                    external dcl 4-8
iox_$position                   000000 constant        entry                    external dcl 4-8
iox_$propagate                  000000 constant        entry                    external dcl 4-8
iox_$put_chars                  000000 constant        entry                    external dcl 4-8
iox_$read_key                   000000 constant        entry                    external dcl 4-8
iox_$read_length                000000 constant        entry                    external dcl 4-8
iox_$read_record                000000 constant        entry                    external dcl 4-8
iox_$rewrite_record             000000 constant        entry                    external dcl 4-8
iox_$seek_key                   000000 constant        entry                    external dcl 4-8
iox_$user_input                        external static pointer                  dcl 4-41
iox_$user_io                           external static pointer                  dcl 4-41
iox_$user_output                       external static pointer                  dcl 4-41
iox_$write_record               000000 constant        entry                    external dcl 4-8
mc_ansp                                automatic       pointer                  dcl 5-25
mc_anstbl                              based           structure                level 1 dcl 5-25
pntep                                  automatic       pointer                  dcl 6-21
query_info_version_3                   internal static fixed bin(17,0)          initial dcl 7-33
query_info_version_4                   internal static fixed bin(17,0)          initial dcl 7-34
query_info_version_5                   internal static fixed bin(17,0)          initial dcl 7-35
rifp                                   automatic       pointer                  dcl 3-6
sc_request_flags                       based           structure                level 1 packed packed unaligned dcl 9-55
sc_rf_ptr                              automatic       pointer                  dcl 9-54
sc_ss_area                             based           area(1024)               dcl 9-50
sc_stat_$admin_listener_exit_label     external static label variable           dcl 8-34
sc_stat_$admin_listener_switch         external static bit(1)                   dcl 8-62
sc_stat_$admin_log_iocb                external static pointer                  dcl 8-45
sc_stat_$admin_log_write_ptr           external static pointer                  dcl 8-45
sc_stat_$admin_sci_ptr                 external static pointer                  dcl 8-45
sc_stat_$as_log_write_ptr              external static pointer                  dcl 8-45
sc_stat_$info_dir                      external static char(168)                packed unaligned dcl 8-21
sc_stat_$initzer_ttyp                  external static pointer                  dcl 8-45
sc_stat_$log_dir                       external static char(168)                packed unaligned dcl 8-21
sc_stat_$master_abort_label            external static label variable           dcl 8-34
sc_stat_$master_channel                external static char(6)                  dcl 8-29
sc_stat_$master_sci_ptr                external static pointer                  dcl 8-45
sc_stat_$mc_acs_dir                    external static char(168)                packed unaligned dcl 8-21
sc_stat_$mc_ansp                       external static pointer                  dcl 8-45
sc_stat_$mc_iocb                       external static pointer                  dcl 8-45
sc_stat_$shutdown_typed                external static bit(1)                   dcl 8-62
sc_stat_$sv1_iocb                      external static pointer                  dcl 8-45
sc_stat_$sv2_iocb                      external static pointer                  dcl 8-45
sc_stat_$sv3_iocb                      external static pointer                  dcl 8-45
sc_stat_$sysdir                        external static char(168)                packed unaligned dcl 8-21
site_date                              internal static fixed bin(17,0)          initial dcl 12-35
site_date_time                         internal static fixed bin(17,0)          initial dcl 12-35
site_time                              internal static fixed bin(17,0)          initial dcl 12-35
sl_info                                automatic       structure                level 1 dcl 10-24
sl_info_code_msg                       internal static structure                level 1 dcl 10-187
sl_info_msg                            internal static structure                level 1 dcl 10-214
sl_info_sev_code_label_msg             internal static structure                level 1 dcl 10-161
sl_info_sev_code_msg                   internal static structure                level 1 dcl 10-82
sl_info_sev_coded_msg                  internal static structure                level 1 dcl 10-134
sl_info_sev_msg                        internal static structure                level 1 dcl 10-108
ti_day                                 based           structure                level 1 unaligned dcl 12-60
ti_keyword                             based           structure                level 1 unaligned dcl 12-29
ti_language                            based           structure                level 1 unaligned dcl 12-42
ti_month                               based           structure                level 1 unaligned dcl 12-52
ti_offset                              based           structure                level 1 unaligned dcl 12-68
ti_word                                based           structure                level 1 unaligned dcl 12-78
time_info_$date_time_keywords          external static fixed bin(17,0)          dcl 12-28
time_info_$day_names                   external static fixed bin(17,0)          dcl 12-58
time_info_$default_language_index      external static fixed bin(17,0)          dcl 12-26
time_info_$gmt_zone_index              external static fixed bin(17,0)          dcl 12-25
time_info_$language_names              external static fixed bin(17,0)          dcl 12-40
time_info_$month_names                 external static fixed bin(17,0)          dcl 12-50
time_info_$offset_names                external static fixed bin(17,0)          dcl 12-66
time_info_$version                     external static char(8)                  packed unaligned dcl 12-21
time_info_$word_names                  external static fixed bin(17,0)          dcl 12-76
tiw_FiscalIndicator                    internal static fixed bin(17,0)          initial dcl 12-107

NAMES DECLARED BY EXPLICIT CONTEXT.
GO_COMMON                       001525 constant        label                    dcl 229 ref 376
RESET_COMMON                    003030 constant        label                    dcl 398 ref 388
RETURN                          005300 constant        label                    dcl 595 set ref 590
admin                           001343 constant        entry                    external dcl 200
bce                             001412 constant        entry                    external dcl 210
call_system_start_up_ec         005324 constant        entry                    internal dcl 562 ref 231 240 276 367
cripple                         003105 constant        entry                    external dcl 408
force_reset                     002716 constant        entry                    external dcl 379
go                              001465 constant        entry                    external dcl 220
intercom                        003205 constant        entry                    external dcl 418
message                         001641 constant        entry                    external dcl 253
multics                         001713 constant        entry                    external dcl 266
no_start_up                     000655 constant        entry                    external dcl 160
quit                            003531 constant        entry                    external dcl 441
reply                           000674 constant        entry                    external dcl 167
reset                           002767 constant        entry                    external dcl 390
return_in_debug                 005452 constant        entry                    internal dcl 585 ref 176 215 227 260 273 316 363 385
                                                                                  396
sc_requests_                    000642 constant        entry                    external dcl 11
self_identify                   005170 constant        entry                    external dcl 537
set_time_zone                   002044 constant        entry                    external dcl 289
setup                           005301 constant        entry                    internal dcl 553 ref 162 169 203 212 223 256 269 292
                                                                                  338 359 382 393 410 420 443 465 521 540
shutdown                        002460 constant        entry                    external dcl 335
sign_off                        004723 constant        entry                    external dcl 519
sign_on                         004020 constant        entry                    external dcl 462
startup                         002613 constant        entry                    external dcl 357

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      6556        6762    5476        6566
Length      7600    5476       204         602    1057           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sc_requests_                        638 external procedure  is an external procedure.  
setup                                   internal procedure  shares stack frame of external procedure sc_requests_.  
call_system_start_up_ec              96 internal procedure  enables or reverts conditions.  
on unit on line 572                  68 on unit               
return_in_debug                         internal procedure  shares stack frame of external procedure sc_requests_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
call_system_start_up_ec  000100 remask_count                call_system_start_up_ec
                         000101 saved_access_control_name   call_system_start_up_ec
sc_requests_             000100 al                          sc_requests_
                         000102 ap                          sc_requests_
                         000104 arg_count                   sc_requests_
                         000105 code                        sc_requests_
                         000106 destination                 sc_requests_
                         000117 found_zone                  sc_requests_
                         000120 lang_index                  sc_requests_
                         000121 message                     sc_requests_
                         000316 message_length              sc_requests_
                         000317 operator_name               sc_requests_
                         000327 old_name                    sc_requests_
                         000337 old_time_zone               sc_requests_
                         000340 password                    sc_requests_
                         000342 reason                      sc_requests_
                         000374 sci_ptr                     sc_requests_
                         000376 temp_line                   sc_requests_
                         000574 time_zone                   sc_requests_
                         000575 yea_shutdown                sc_requests_
                         000576 zone_index                  sc_requests_
                         000600 ip                          sc_requests_
                         000602 mc_atep                     sc_requests_
                         000604 PNTE                        sc_requests_
                         000724 query_info                  sc_requests_
                         000742 sc_subsystem_info_ptr       sc_requests_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this_desc  return_mac          tra_ext_2
enable_op           shorten_stack       ext_entry           int_entry           int_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
as_$as_init                   as_$go                        as_$reset                     as_$shut_ok
as_$startup                   call_ec_                      command_query_                command_query_$yes_no
date_time_$set_zone           hphcs_$call_bce               hphcs_$set_system_time_zone   ioa_
ioa_$rs                       iox_$control                  ipc_$mask_ev_calls            ipc_$unmask_ev_calls
lg_ctl_$login_operator        lg_ctl_$logout_operator       mc_check_access_$quit         mc_check_access_$reply
mc_commands_$intercom         mc_commands_$quit_command     mc_commands_$reply_command    mc_commands_$sign_in
mc_commands_$sign_out         pnt_manager_$login_get_entry  read_password_                restart_mc_ttys_
sc_abort_line_util_$real_abort_line                         sc_admin_mode_                sc_edit_motd_
sc_ipc_mask_$remask           sc_ipc_mask_$unmask           scramble_                     ssu_$abort_line
ssu_$arg_count                ssu_$arg_ptr                  ssu_$get_debug_mode           ssu_$print_message
sys_log_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
as_data_$rs_ptrs              error_table_$id_not_found     error_table_$noentry          error_table_$unknown_zone
sc_stat_$Go                   sc_stat_$Go_typed             sc_stat_$Multics              sc_stat_$Multics_typed
sc_stat_$Star_typed           sc_stat_$did_part1            sc_stat_$did_part2            sc_stat_$did_part3
sc_stat_$exec_access_name     sc_stat_$master_iocb          sc_stat_$mc_is_on             sc_stat_$no_operator_login
sc_stat_$system_shutdown_label                              sc_stat_$test_mode
sc_stat_$unidentified_access_name                           sc_stat_$vchn_requires_accept sys_info$time_zone
time_info_$zone_names




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
 7    7 000607        11 000641       160 000650       162 000663       164 000664       165 000671       167 000672
    169 000702       173 000703       176 000735       177 000736       178 000755       179 001012       180 001027
    182 001035       183 001045       184 001053       185 001055       186 001056       188 001130       189 001162
    191 001217       194 001250       195 001303       197 001340       200 001341       203 001351       204 001352
    207 001402       208 001407       210 001410       212 001420       213 001421       215 001452       216 001453
    218 001462       220 001463       223 001473       225 001474       227 001524       229 001525       231 001530
    234 001544       235 001547       236 001555       239 001603       240 001606       243 001622       244 001625
    245 001630       247 001633       251 001636       253 001637       256 001647       257 001650       260 001702
    262 001703       263 001710       266 001711       269 001721       270 001722       273 001754       275 001755
    276 001760       279 001774       280 001777       282 002005       285 002036       286 002041       289 002042
    292 002052       293 002053       296 002106       298 002125       302 002161       304 002166       305 002167
    306 002201       307 002215       309 002242       310 002244       312 002246       316 002302       318 002303
    320 002306       321 002316       325 002347       326 002366       329 002417       332 002455       335 002456
    338 002466       339 002467       342 002521       344 002524       345 002532       347 002534       348 002535
    351 002603       355 002606       357 002611       359 002621       360 002622       363 002654       365 002655
    366 002660       367 002661       370 002675       372 002700       373 002706       375 002710       376 002713
    379 002714       382 002724       383 002725       385 002754       386 002755       388 002764       390 002765
    393 002775       394 002776       396 003027       398 003030       400 003060       402 003067       403 003070
    404 003072       405 003101       406 003102       408 003103       410 003113       411 003114       414 003146
    415 003155       416 003202       418 003203       420 003213       422 003214       425 003244       426 003263
    427 003320       428 003335       430 003342       431 003352       432 003360       433 003362       434 003363
    436 003435       437 003471       439 003526       441 003527       443 003537       445 003540       447 003573
    448 003612       449 003636       451 003640       454 003676       457 003730       458 003755       460 004015
    462 004016       465 004026       466 004027       468 004057       472 004115       474 004117       475 004121
    476 004124       477 004163       479 004223       481 004224       482 004243       485 004250       486 004267
    488 004331       489 004341       490 004343       491 004346       492 004375       494 004377       496 004406
    497 004411       498 004412       501 004420       503 004424       504 004451       506 004501       507 004504
    508 004525       510 004531       511 004562       513 004605       514 004634       516 004671       517 004720
    519 004721       521 004731       523 004732       525 004764       527 005021       528 005043       530 005045
    531 005070       532 005124       533 005132       534 005133       535 005165       537 005166       540 005176
    544 005177       545 005202       548 005226       552 005277       595 005300       553 005301       556 005302
    557 005306       558 005311       559 005322       562 005323       570 005337       571 005340       572 005345
    574 005361       575 005370       576 005377       578 005400       579 005407       580 005416       581 005442
    582 005451       585 005452       590 005453       592 005467


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
