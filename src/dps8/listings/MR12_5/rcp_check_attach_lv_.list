	COMPILATION LISTING OF SEGMENT rcp_check_attach_lv_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1114.04_Tue_mdt
	    Options: optimize list

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 rcp_check_attach_lv_:  procedure  (arg_rcp_id, arg_volume_info_ptr, arg_statex, arg_ecode);
       14 
       15 /*	This procedure implements the rcp_$check_attach_lv entry.
       16**	Created on 04/08/76 by Bill Silver.
       17**	Modified 09/13/76 by Greenberg for lv_request_.
       18**
       19**	This procedure is basically a NOP.
       20**/
       21 
       22 dcl	arg_rcp_id	bit(36) aligned;	/* (I) RCP ID of logical volume attachment. */
       23 dcl	arg_volume_info_ptr	ptr;		/* (I) Not really used. */
       24 dcl	arg_statex	fixed bin;	/* (O) 0 => OK,  3 => error. */
       25 dcl	arg_ecode		fixed bin(35);
       26 
       27 dcl	ecode		fixed bin(35);
       28 dcl	lvid		bit(36) aligned;
       29 dcl	rcp_id		bit(36) aligned;
       30 dcl	statex		fixed bin;
       31 
       32 dcl	rcp_lv_$check	entry  (bit (36) aligned, bit (36) aligned, fixed bin, fixed bin(35));
       33 
       34 
       35 	rcp_id = arg_rcp_id;
       36 	call rcp_lv_$check (rcp_id, lvid, statex, ecode);
       37 
       38 	if   ecode ^= 0
       39 	then arg_statex = 3;
       40 	else arg_statex = statex;
       41 	arg_ecode = ecode;
       42 
       43 	end  rcp_check_attach_lv_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1114.0  rcp_check_attach_lv_.pl1          >udd>sm>ds>w>ml>rcp_check_attach_lv_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg_ecode                              parameter       fixed bin(35,0)          dcl 25 set ref 13 41*
arg_rcp_id                             parameter       bit(36)                  dcl 22 ref 13 35
arg_statex                             parameter       fixed bin(17,0)          dcl 24 set ref 13 38* 40*
arg_volume_info_ptr                    parameter       pointer                  dcl 23 ref 13
ecode                           000100 automatic       fixed bin(35,0)          dcl 27 set ref 36* 38 41
lvid                            000101 automatic       bit(36)                  dcl 28 set ref 36*
rcp_id                          000102 automatic       bit(36)                  dcl 29 set ref 35* 36*
rcp_lv_$check                   000010 constant        entry                    external dcl 32 ref 36
statex                          000103 automatic       fixed bin(17,0)          dcl 30 set ref 36* 40

NAME DECLARED BY EXPLICIT CONTEXT.
rcp_check_attach_lv_            000011 constant        entry                    external dcl 13

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       110         122      51         120
Length       270      51        12         132      36           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rcp_check_attach_lv_                 78 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rcp_check_attach_lv_     000100 ecode                       rcp_check_attach_lv_
                         000101 lvid                        rcp_check_attach_lv_
                         000102 rcp_id                      rcp_check_attach_lv_
                         000103 statex                      rcp_check_attach_lv_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
rcp_lv_$check

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.


CONSTANTS
000000  aa     404000000043

000001  aa     404000000021

000002  aa     464000000000

000003  aa     514000000044

BEGIN PROCEDURE rcp_check_attach_lv_
ENTRY TO rcp_check_attach_lv_                               STATEMENT 1 ON LINE 13
rcp_check_attach_lv_:  procedure  (arg_rcp_id, arg_volume_info_ptr, arg_statex, arg_ecode);

000004  at     000004000003
000005  tt     000002000001
000006  ta     000000000000
000007  ta     000004000000
000010  da     000032300000
000011  aa   000120 6270 00	eax7 	80
000012  aa  7 00034 3521 20	epp2 	pr7|28,*
000013  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000014  aa     000010000000
000015  aa     000000000000
						STATEMENT 1 ON LINE 35
	rcp_id = arg_rcp_id;

000016  aa  6 00032 3735 20	epp7 	pr6|26,*
000017  aa  7 00002 2351 20	lda  	pr7|2,*		arg_rcp_id
000020  aa  6 00102 7551 00	sta  	pr6|66		rcp_id
						STATEMENT 1 ON LINE 36
	call rcp_lv_$check (rcp_id, lvid, statex, ecode);

000021  aa  6 00102 3521 00	epp2 	pr6|66		rcp_id
000022  aa  6 00106 2521 00	spri2	pr6|70
000023  aa  6 00101 3521 00	epp2 	pr6|65		lvid
000024  aa  6 00110 2521 00	spri2	pr6|72
000025  aa  6 00103 3521 00	epp2 	pr6|67		statex
000026  aa  6 00112 2521 00	spri2	pr6|74
000027  aa  6 00100 3521 00	epp2 	pr6|64		ecode
000030  aa  6 00114 2521 00	spri2	pr6|76
000031  aa  6 00104 6211 00	eax1 	pr6|68
000032  aa   020000 4310 07	fld  	8192,dl
000033  la  4 00010 3521 20	epp2 	pr4|8,*		rcp_lv_$check
000034  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 38
	if   ecode ^= 0
	then arg_statex = 3;

000035  aa  6 00100 2361 00	ldq  	pr6|64		ecode
000036  aa   000005 6000 04	tze  	5,ic		000043
000037  aa   000003 2360 07	ldq  	3,dl
000040  aa  6 00032 3735 20	epp7 	pr6|26,*
000041  aa  7 00006 7561 20	stq  	pr7|6,*		arg_statex
000042  aa   000004 7100 04	tra  	4,ic		000046
						STATEMENT 1 ON LINE 40
	else arg_statex = statex;

000043  aa  6 00103 2361 00	ldq  	pr6|67		statex
000044  aa  6 00032 3735 20	epp7 	pr6|26,*
000045  aa  7 00006 7561 20	stq  	pr7|6,*		arg_statex
						STATEMENT 1 ON LINE 41
	arg_ecode = ecode;

000046  aa  6 00100 2361 00	ldq  	pr6|64		ecode
000047  aa  7 00010 7561 20	stq  	pr7|8,*		arg_ecode
						STATEMENT 1 ON LINE 43
	end  rcp_check_attach_lv_;

000050  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END PROCEDURE rcp_check_attach_lv_


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
