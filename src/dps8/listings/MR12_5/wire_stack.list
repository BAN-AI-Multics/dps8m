ASSEMBLY LISTING OF SEGMENT >spec>install>1111>wire_stack.alm                                                                                                                                       
ASSEMBLED ON:	11/11/89  0921.9 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
    000000                          11  	name	wire_stack
                                    12  
                                    13  
                                    14  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    15  "
                                    16  " Calling Sequence:
                                    17  "	call wire_stack
                                    18  "
                                    19  " This procedure is designed to be called only from PL/1 programs
                                    20  " through the use of the validate option.
                                    21  "
                                    22  " wire_stack performs the following steps:
                                    23  "	1. If the current stack is the PRDS, or if this is too
                                    24  "	   early in initialization, return.  Too early in
                                    25  "	   initialization means before the SCS is set up, as this
                                    26  "	   is when the masking mechanism is operative.
                                    27  "	2. A stack frame for wire_stack is created which
                                    28  "	   overlays the caller's stack frame.
                                    29  "	3. The memory mask is set to sys_level.
                                    30  "	4. The current and next pages of the stack are wired down.
                                    31  "	5. A cleanup condition is established.
                                    32  "	6. A new stack frame is manfactured for the caller.
                                    33  "	7. The caller is returned to in his new frame.
                                    34  "
                                    35  " The steps above are undone either when the caller returns
                                    36  " or when a non-local goto occurs.
                                    37  "
                                    38  "
                                    39  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    40  
                                    41  
                                    42  " 
                                    43  
    000000                          44  	segref	scs,faults_initialized
    000000                          45  	segref	scs,read_mask,mask_ptr,sys_level
    000000                          46  	segref	prds,processor_tag
    000000                          47  	segref	tc_data,system_shutdown
    000000                          48  	segref	privileged_mode_ut,wire_and_mask,unwire_unmask
    000000                          49  	segref	condition_,condition_
                                    50  
                        000014      51  	link	prds_link,<prds>|0
                                    52  
                                    53  
                                    54  	tempd	ptp		pointer to stack's page table
                                    55  	tempd	save_mask		previous memory controller mask
                                    56  	tempd	label(2)		label for cleanup condition
                                    57  	tempd	arglist(5)	argument list for call to condition_
                                    58  
                                    59  " 
                                    60  
                                    61  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    62  
                                    63  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                    64  
                                    65  	include	scs
                                   3-1  "	BEGIN INCLUDE FILE scs.incl.alm  2/4/76 S. Webber
                                   3-2  "	Modified 80 Sep 19 by Art Beattie:  added hbound_processor_data.
                                   3-3  
                        400000     3-4  	bool	processor_data.online,400000 "DU
                        200000     3-5  	bool	processor_data.offline,200000	"DU
                        020000     3-6  	bool	processor_data.delete_cpu,020000	"DU
                        010000     3-7  	bool	processor_data.interrupt_cpu,010000	"DU
                        004000     3-8  	bool	processor_data.halted_cpu,004000	"DU
                        000007     3-9  	bool	processor_data.port_mask,000007	"DL
                        000007    3-10  	bool	hbound_processor_data,7
                                  3-11  
                                  3-12  "	END INCLUDE FILE scs.incl.alm
                                    66  " 
                                    67  
                        000000      68  	entry	wire_stack
                                    69  
    000000                          70  wire_stack:
                                    71  
                                    72  " Ignore this call if on the PRDS or if too early in initialization
                                    73  
    000000  aa  6 00000 2131 00     74  	epaq	sp|0		segment # of stack in AU
    000001  aa   000000 6200 01     75  	eax0	0,au		place in X0
    000002  4a  4 00014 1001 00     76  	cmpx0	lp|prds_link	are we on the prds?
    000003  0a   000116 6000 00     77  	tze	.rt		if so, just return
    000004  4a  4 00030 2361 20     78  	ldq	prds$processor_tag
    000005  4a  4 00032 2351 20     79  	lda	scs$processor_data,ql	get data for this CPU
    000006  aa   600000 3150 03     80  	cana	processor_data.online+processor_data.offline,du	early initialization?
    000007  0a   000116 6000 00     81  	tze	.rt			yes, ignore call
                                    82  
                                    83  " Ignore this call if masked down.
                                    84  
    000010                          85  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000010  4a  4 00030 7213 20     86  	lxl1	processor_tag	CPU tag in X1
    000011  4a  4 00034 7613 20     87  	lprpab	mask_ptr,1	get pointer for masking
    000012  4a  4 00036 7163 20     88  	xec	read_mask,1	read system controller mask
    000013  4a  4 00040 6773 20     89  	eraq	sys_level		masked to sys level?
    000014  0a   000164 3772 00     90  	anaq	=v16/-1,20/,16/-1,20/  ..
    000015  0a   000116 6002 00     91  	tze	.rt		if so, ignore the call
    000016                          92  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                    93  
                                    94  " Make stack frame for wire_stack.
                                    95  
    000016  aa  6 00060 3501 00     96  	eppap	sp|stack_frame.min_length	establish stack frame for wire stack
    000017  aa  0 00020 6521 00     97  	sprisp	ap|stack_frame.prev_sp	leave only the bare minimum of old frame
    000020  aa  0 00000 3721 00     98  	eppsp	ap|0			caller's old frame will be rethreaded later
    000021  0a   000124 0500 00     99  	adwpap	push			ap -> new frame for caller
    000022  aa  6 00022 2501 00    100  	spriap	sp|stack_frame.next_sp	set pointer to next frame
    000023  aa  7 00024 3535 20    101  	eppbb	sb|stack_header.stack_end_ptr,*  save stack end ptr in bb
    000024  aa  7 00024 2501 00    102  	spriap	sb|stack_header.stack_end_ptr	set pointer to new end of stack
    000025  aa  6 00030 6501 00    103  	sprilp	sp|stack_frame.lp_ptr	save linkage pointer
                                   104  
                                   105  " Call privileged_mode_ut$wire_and_mask to do the work.
                                   106  
    000026  aa  6 00052 3521 00    107  	eppbp	save_mask		bp -> place for saved controller mask
    000027  aa  6 00062 2521 00    108  	spribp	arglist+2		..
    000030  aa  6 00050 3521 00    109  	eppbp	ptp		bp -> place for page table pointer
    000031  aa  6 00064 2521 00    110  	spribp	arglist+4		..
    000032  0a   000166 2370 00    111  	ldaq	=v18/4,18/4	set arglist header
    000033  aa  6 00060 7571 00    112  	staq	arglist		..
                                   113  
    000034  aa  6 00000 2541 00    114  	call	wire_and_mask(arglist) wire and mask
    000035  aa  6 00060 3501 00
    000036  4a  4 00016 3521 20
    000037  aa  6 00040 7531 00
    000040  aa  7 00036 6701 20
    000041  aa  6 00000 1731 00
    000042  aa  6 00040 0731 00
                                   115  
                                   116  " Set up argument list and call condition_.
                                   117  
    000043  4a  4 00042 2341 20    118  	szn	faults_initialized	have faults been initialized yet?
    000044  0a   000075 6000 00    119  	tze	create_frame	if not, skip call to condition_
                                   120  
    000045  4a  4 00044 2341 20    121  	szn	system_shutdown	are we shutting down?
    000046  0a   000075 6010 00    122  	tnz	create_frame	if so, don't establish condition
                                   123  
                        000020     124  	link	cleanup_link,<*text>|[cleanup_handler]
    000047  4a  4 00020 3501 20    125  	eppap	lp|cleanup_link,*	make label for cleanup handler
    000050  aa  6 00054 2501 00    126  	spriap	label		..
    000051  aa  6 00056 6521 00    127  	sprisp	label+2		..
                                   128  
    000052  9a  4 00010 3501 00    129  	eppap	lp|condition_name	ap -> character string
    000053  aa  6 00062 2501 00    130  	spriap	arglist+2		set up argument list
    000054  aa  6 00054 3501 00    131  	eppap	label		ap -> label
    000055  aa  6 00064 2501 00    132  	spriap	arglist+4		..
    000056  9a  4 00012 3501 00    133  	eppap	lp|condition_name_desc set up descriptor list
    000057  aa  6 00066 2501 00    134  	spriap	arglist+6		..
    000060  9a  4 00013 3501 00    135  	eppap	lp|label_desc	..
    000061  aa  6 00070 2501 00    136  	spriap	arglist+8		..
    000062  0a   000170 2370 00    137  	ldaq	=v18/4,18/4,18/4	set argument list header
    000063  aa  6 00060 7571 00    138  	staq	arglist		..
                                   139  
    000064  aa  6 00030 6501 00    140  	sprilp	sp|stack_frame.lp_ptr  be careful to save linkage pair
                                   141  
    000065  aa  6 00000 2541 00    142  	call	condition_(arglist)  establish the condition
    000066  aa  6 00060 3501 00
    000067  4a  4 00022 3521 20
    000070  aa  6 00040 7531 00
    000071  aa  7 00036 6701 20
    000072  aa  6 00000 1731 00
    000073  aa  6 00040 0731 00
                                   143  
    000074  aa  6 00030 3701 20    144  	epplp	sp|stack_frame.lp_ptr,*	restore the linkage pair now
                                   145  
                                   146  " Create new stack frame for caller.
                                   147  
    000075                         148  create_frame:
    000075  aa  7 00024 3521 20    149  	eppbp	sb|stack_header.stack_end_ptr,*  bp -> caller's new frame
    000076  aa  6 00020 3501 20    150  	eppap	sp|stack_frame.prev_sp,*	ap -> caller's old frame
    000077  aa  0 00100 1005 00    151  	mlr	(pr),(pr)			copy the stack frame header
    000100  aa   000000 000300     152  	desc9a	ap|0,stack_frame.min_length*4	
    000101  aa   200000 000300     153  	desc9a	bp|0,stack_frame.min_length*4	
                                   154  
    000102  aa  3 00000 6211 00    155  	eax1	bb|0			X1 contains offset of original end ptr
    000103  aa  6 00021 1211 00    156  	sblx1	sp|stack_frame.prev_sp+1	compute length of caller's frame
                                   157  
    000104  aa  0 00022 6521 00    158  	sprisp	ap|stack_frame.next_sp	set next sp in old frame
    000105  aa  2 00020 6521 00    159  	sprisp	bp|stack_frame.prev_sp	set last sp in new frame
    000106  aa  2 00000 3501 11    160  	eppap	bp|0,1			compute next sp for new frame
    000107  aa  2 00022 2501 00    161  	spriap	bp|stack_frame.next_sp	and set it
    000110  aa  7 00024 2501 00    162  	spriap	sb|stack_header.stack_end_ptr	save new stack end ptr
                                   163  
                                   164  " Fill in wire_stack's frame with vital info.
                                   165  
                        000024     166  	link	return_link,<*text>|[return]
    000111  4a  4 00024 3501 20    167  	eppap	lp|return_link,*	ap -> return entry
    000112  aa  6 00024 2501 00    168  	spriap	sp|stack_frame.return_ptr	set return control double info
    000113  aa  6 00030 6501 00    169  	sprilp	sp|stack_frame.lp_ptr	save pointer so return op will work
                                   170  
                                   171  " Switch to new frame and return to caller.
                                   172  
    000114  aa  2 00000 3721 00    173  	eppsp	bp|0		sp -> new frame
    000115  aa  6 00014 6521 00    174  	sprisp	sp|12		doctor the stored prs
                                   175  
    000116                         176  .rt:
    000116  aa  6 00030 3501 20    177  	eppap	sp|stack_frame.operator_ptr,*	restore pr to operators
    000117  aa  6 00024 6101 00    178  	rtcd	sp|stack_frame.return_ptr	return to caller
                                   179  
                                   180  
                                   181  " 
                                   182  
                        000120     183  	entry	return
                                   184  
    000120                         185  return:				"normal return from caller
    000120  aa  6 00000 3521 00    186  	eppbp	sp|0		bp -> stack frame
    000121  0a   000132 7070 00    187  	tsx7	undo		unwire and unmask
                                   188  
    000122                         189  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000122  aa  6 00020 3723 20    190  	eppsp	sp|stack_frame.prev_sp,*	sp -> caller's old frame
    000123  aa  7 00042 7103 20    191  	return			" return to caller's caller
    000124                         192  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                   193  
                                   194  
                        000124     195  	entry	cleanup_handler
                                   196  
    000124                         197  cleanup_handler:			"invoked by non-local goto
    000124  aa   000100 6270 00    198  push:	push
    000125  aa  7 00040 2721 20
                                   199  
    000126  aa  0 00000 2201 00    200  	ldx0	ap|0		2 * number of args in X0
    000127  aa  0 00002 3521 30    201  	eppbp	ap|2,0*		grab display pointer
    000130  0a   000132 7070 00    202  	tsx7	undo		clean things up
                                   203  
    000131  aa  7 00042 7101 20    204  	return			return to the unwinder
                                   205  
                                   206  
                                   207  " Subroutine to perform unwiring and unmasking.
                                   208  
    000132                         209  undo:
    000132  aa  2 00052 3501 00    210  	eppap	bp|save_mask	ap -> save mask
    000133  aa  2 00062 2501 00    211  	spriap	bp|arglist+2	..
    000134  aa  2 00050 3501 00    212  	eppap	bp|ptp		ap -> page table pointer
    000135  aa  2 00064 2501 00    213  	spriap	bp|arglist+4	..
    000136  0a   000166 2370 00    214  	ldaq	=v18/4,18/4	set arglist header
    000137  aa  2 00060 7571 00    215  	staq	bp|arglist	..
                                   216  
    000140  aa  6 00000 2541 00    217  	call	unwire_unmask(bp|arglist) unwire and unmask
    000141  aa  2 00060 3501 00
    000142  4a  4 00026 3521 20
    000143  aa  6 00040 7531 00
    000144  aa  7 00036 6701 20
    000145  aa  6 00000 1731 00
    000146  aa  6 00040 0731 00
                                   218  
    000147  aa   000000 7100 17    219  	tra	0,7		return to caller
                                   220  
                                   221  
                                   222  " 
                                   223  
                                   224  	even
                                   225  
    000150                         226  null:
    000150  aa   077777 000043     227  	its	-1,1		null pointer
    000151  aa   000001 000000 
                                   228  
                                   229  
                                   230  	use	internal_static
                                   231  	join	/link/internal_static
                                   232  
    000010                         233  condition_name:
    000010  aa  143 154 145 141    234  	aci	"cleanup"
    000011  aa  156 165 160 000
                                   235  
    000012                         236  condition_name_desc:
    000012  aa   010121 000007     237  	vfd	o18/10121,18/7
                                   238  
    000013                         239  label_desc:
    000013  aa   000172 000000     240  	vfd	o18/172
                                   241  
                                   242  
                                   243  	end
ENTRY SEQUENCES
     
    000152  5a   000025 0000 00
    000153  aa  7 00046 2721 20
    000154  0a   000000 7100 00
    000155  5a   000020 0000 00
    000156  aa  7 00046 2721 20
    000157  0a   000120 7100 00
    000160  5a   000011 0000 00
    000161  aa  7 00046 2721 20
    000162  0a   000124 7100 00
LITERALS
     
    000164  aa   777774 000000 
    000165  aa   777774 000000 
    000166  aa   000004 000004 
    000170  aa   000004 000004 
    000171  aa   000004 000000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000172  5a   000003 000000 
    000173  5a   000042 600000 
    000174  aa   000000 000000 
    000175  55   000011 000002 
    000176  5a   000002 400003 
    000177  55   000006 000011 
    000200  aa  012 167 151 162
    000201  aa  145 137 163 164
    000202  aa  141 143 153 000
    000203  55   000020 000003 
    000204  0a   000161 500000 
    000205  55   000014 000003 
    000206  aa  017 143 154 145         cleanup_handler
    000207  aa  141 156 165 160
    000210  aa  137 150 141 156
    000211  aa  144 154 145 162
    000212  55   000025 000011 
    000213  0a   000156 500000 
    000214  55   000023 000003 
    000215  aa  006 162 145 164         return
    000216  aa  165 162 156 000
    000217  55   000033 000020 
    000220  0a   000153 500000 
    000221  55   000030 000003 
    000222  aa  012 167 151 162         wire_stack
    000223  aa  145 137 163 164
    000224  aa  141 143 153 000
    000225  55   000002 000025 
    000226  6a   000000 400002 
    000227  55   000036 000003 
    000230  aa  014 163 171 155         symbol_table
    000231  aa  142 157 154 137
    000232  aa  164 141 142 154
    000233  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000234  aa   000000 000015 
    000235  aa   000000 000000 
    000236  aa   000000 000000 
    000237  5a   000025 000000 
    000240  aa   000000 000000 
    000241  aa   000000 000000 
    000242  aa   000000 000000 
    000243  5a   000033 000000 
    000244  aa   000000 000000 
    000245  aa   000000 000000 
    000246  5a   000020 000000 
    000247  aa   000000 000000 
    000250  aa   000000 000000 
    000251  5a   000011 000000 

EXTERNAL NAMES

    000252  aa  016 160 162 157         processor_data
    000253  aa  143 145 163 163
    000254  aa  157 162 137 144
    000255  aa  141 164 141 000
    000256  aa  012 143 157 156         condition_
    000257  aa  144 151 164 151
    000260  aa  157 156 137 000
    000261  aa  015 165 156 167         unwire_unmask
    000262  aa  151 162 145 137
    000263  aa  165 156 155 141
    000264  aa  163 153 000 000
    000265  aa  015 167 151 162         wire_and_mask
    000266  aa  145 137 141 156
    000267  aa  144 137 155 141
    000270  aa  163 153 000 000
    000271  aa  022 160 162 151         privileged_mode_ut
    000272  aa  166 151 154 145
    000273  aa  147 145 144 137
    000274  aa  155 157 144 145
    000275  aa  137 165 164 000
    000276  aa  017 163 171 163         system_shutdown
    000277  aa  164 145 155 137
    000300  aa  163 150 165 164
    000301  aa  144 157 167 156
    000302  aa  007 164 143 137         tc_data
    000303  aa  144 141 164 141
    000304  aa  015 160 162 157         processor_tag
    000305  aa  143 145 163 163
    000306  aa  157 162 137 164
    000307  aa  141 147 000 000
    000310  aa  004 160 162 144         prds
    000311  aa  163 000 000 000
    000312  aa  011 163 171 163         sys_level
    000313  aa  137 154 145 166
    000314  aa  145 154 000 000
    000315  aa  010 155 141 163         mask_ptr
    000316  aa  153 137 160 164
    000317  aa  162 000 000 000
    000320  aa  011 162 145 141         read_mask
    000321  aa  144 137 155 141
    000322  aa  163 153 000 000
    000323  aa  022 146 141 165         faults_initialized
    000324  aa  154 164 163 137
    000325  aa  151 156 151 164
    000326  aa  151 141 154 151
    000327  aa  172 145 144 000
    000330  aa  003 163 143 163         scs

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000331  aa   000004 000000 
    000332  55   000136 000060 
    000333  aa   000005 000000 
    000334  a5   000000 000023 
    000335  aa   000005 000000 
    000336  a5   000000 000014 
    000337  aa   000003 000000 
    000340  5a   000116 000000 
    000341  aa   000004 000000 
    000342  55   000064 000064 
    000343  aa   000004 000000 
    000344  55   000077 000067 
    000345  aa   000004 000000 
    000346  55   000077 000073 
    000347  aa   000004 000000 
    000350  55   000110 000104 
    000351  aa   000004 000000 
    000352  55   000116 000112 
    000353  aa   000004 000000 
    000354  55   000136 000120 
    000355  aa   000004 000000 
    000356  55   000136 000123 
    000357  aa   000004 000000 
    000360  55   000136 000126 
    000361  aa   000004 000000 
    000362  55   000136 000131 
    000363  aa   000001 000000 
    000364  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000365  5a   000155 000000 
    000366  5a   000167 000000 
    000367  5a   000161 000000 
    000370  5a   000165 000000 
    000371  5a   000163 000000 
    000372  5a   000137 000000 
    000373  5a   000157 000000 
    000374  5a   000151 000000 
    000375  5a   000141 000000 
    000376  5a   000147 000000 
    000377  5a   000143 000000 
    000400  5a   000153 000000 
    000401  5a   000145 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000172 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000014 000046 
    000007  a2   000000 000004 
    000014  9a   777764 0000 46         prds|       
    000015  5a   000207 0000 00
    000016  9a   777762 0000 46         privileged_mode_ut|wire_and_mask
    000017  5a   000206 0000 00
    000020  9a   777760 0000 46         *text|cleanup_handler
    000021  5a   000205 0000 00
    000022  9a   777756 0000 46         condition_|condition_
    000023  5a   000204 0000 00
    000024  9a   777754 0000 46         *text|return
    000025  5a   000203 0000 00
    000026  9a   777752 0000 46         privileged_mode_ut|unwire_unmask
    000027  5a   000202 0000 00
    000030  9a   777750 0000 46         prds|processor_tag
    000031  5a   000201 0000 00
    000032  9a   777746 0000 46         scs|processor_data
    000033  5a   000200 0000 06
    000034  9a   777744 0000 46         scs|mask_ptr
    000035  5a   000177 0000 11
    000036  9a   777742 0000 46         scs|read_mask
    000037  5a   000176 0000 11
    000040  9a   777740 0000 46         scs|sys_level
    000041  5a   000175 0000 00
    000042  9a   777736 0000 46         scs|faults_initialized
    000043  5a   000174 0000 00
    000044  9a   777734 0000 46         tc_data|system_shutdown
    000045  5a   000173 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   241121 402104 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000226 
    000020  aa   000000 000150 
    000021  aa   000175 000165 
    000022  aa   000216 000150 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000041 
    000067  aa   175453 017723 
    000070  aa   000000 117547 
    000071  aa   176205 200000 
    000072  aa   000117 000042 
    000073  aa   147777 464111 
    000074  aa   000000 115000 
    000075  aa   507463 000000 
    000076  aa   000130 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   000141 000031 
    000103  aa   075522 764240 
    000104  aa   000000 107555 
    000105  aa   332322 000000 
    000106  aa   076163 160145          >spec>install>1111>wire_stack.alm
    000107  aa   143076 151156 
    000110  aa   163164 141154 
    000111  aa   154076 061061 
    000112  aa   061061 076167 
    000113  aa   151162 145137 
    000114  aa   163164 141143 
    000115  aa   153056 141154 
    000116  aa   155040 040040 
    000117  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000120  aa   076151 156143 
    000121  aa   154165 144145 
    000122  aa   076163 164141 
    000123  aa   143153 137150 
    000124  aa   145141 144145 
    000125  aa   162056 151156 
    000126  aa   143154 056141 
    000127  aa   154155 040040 
    000130  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000131  aa   076151 156143 
    000132  aa   154165 144145 
    000133  aa   076163 164141 
    000134  aa   143153 137146 
    000135  aa   162141 155145 
    000136  aa   056151 156143 
    000137  aa   154056 141154 
    000140  aa   155040 040040 
    000141  aa   076154 144144          >ldd>include>scs.incl.alm
    000142  aa   076151 156143 
    000143  aa   154165 144145 
    000144  aa   076163 143163 
    000145  aa   056151 156143 
    000146  aa   154056 141154 
    000147  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

                *text                    wire_stack:   124,  166.
         116    .rt                      wire_stack:    77,   81,   91,  176.
          60    arglist                  wire_stack:    57,  108,  110,  112,  114,  130,  132,  134,  136,  138,  142,  211,
                                                       213,  215,  217.
        1170    call_offset              stack_header:        80.
         124    cleanup_handler          wire_stack:   124,  195,  197.
          20    cleanup_link             wire_stack:   124,  125.
                condition_               wire_stack:    49,  142.
          10    condition_name           wire_stack:   129,  233.
          12    condition_name_desc      wire_stack:   133,  236.
          75    create_frame             wire_stack:   119,  122,  148.
        1174    entry_offset             stack_header:        84.
                faults_initialized       wire_stack:    44,  118.
           7    hbound_processor_data    scs:           10.
          10    internal_static          wire_stack:   230,  231.
          54    label                    wire_stack:    56,  126,  127,  131.
          13    label_desc               wire_stack:   135,  239.
                mask_ptr                 wire_stack:    45,   87.
         150    null                     wire_stack:   226.
                prds                     wire_stack:    46,   51,   78.
          14    prds_link                wire_stack:    51,   76.
                privileged_mode_ut       wire_stack:    48.
                processor_data           wire_stack:    79.
       20000    processor_data.delete_cpu      scs:            6.
        4000    processor_data.halted_cpu      scs:            8.
       10000    processor_data.interrupt_cpu   scs:            7.
      200000    processor_data.offline   wire_stack:    80,
                                         scs:            5.
      400000    processor_data.online    wire_stack:    80,
                                         scs:            4.
           7    processor_data.port_mask       scs:            9.
                processor_tag            wire_stack:    46,   78,   86.
          50    ptp                      wire_stack:    54,  109,  212.
         124    push                     wire_stack:    99,  198.
        1171    push_offset              stack_header:        81.
                read_mask                wire_stack:    45,   88.
         120    return                   wire_stack:   166,  183,  185.
          24    return_link              wire_stack:   166,  167.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          52    save_mask                wire_stack:    55,  107,  210.
                scs                      wire_stack:    44,   45,   79.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       wire_stack:   103,  140,  144,  169,
                                         stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   wire_stack:    96,  152,  153,
                                         stack_frame:   23.
          22    stack_frame.next_sp      wire_stack:   100,  158,  161,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       wire_stack:   177,
                                               stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      wire_stack:    97,  150,  156,  159,  190,
                                         stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   wire_stack:   168,  178,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     wire_stack:   101,  102,  149,  162,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
                system_shutdown          wire_stack:    47,  121.
                sys_level                wire_stack:    45,   89.
                tc_data                  wire_stack:    47.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
         132    undo                     wire_stack:   187,  202,  209.
                unwire_unmask            wire_stack:    48,  217.
                wire_and_mask            wire_stack:    48,  114.
           0    wire_stack               wire_stack:    68,   70.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
