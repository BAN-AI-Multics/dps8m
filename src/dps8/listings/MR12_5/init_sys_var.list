	COMPILATION LISTING OF SEGMENT init_sys_var
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  0939.2 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 /* format: style2 */
       14 init_sys_var:
       15      procedure;
       16 
       17 /* Updated for NSS 4/75 THVV */
       18 /* Modified by E. Stone 10/73 to correct bug in construction of initializer's channel */
       19 /* OPTY support removed April 1981 by Benson I. Margulies */
       20 /* Modified for ADP SDWs, 05/01/81, W. Olin Sibert */
       21 /* Modified by J. Bongiovanni, December 1981, to remove sst$asthtp setup */
       22 /* Modified by J. Bongiovanni, February 1982, to eliminate FSDCT */
       23 /* Modified by J. Bongiovanni, October 1982, for sst$checksum_filemap */
       24 /* Modified BIM 830312 to move dir_lock initialization to its own program. */
       25 /* Modified by Keith Loepere, January 1985 for sst$seg_state_chg_operation. */
       26 
       27 /* This program used to parse a channel name like tty_NNN off of
       28*   the now undocumented config card OPTY. Channel names do not look
       29*   like that any more. FNP's are not loaded from BOS. 
       30*   Therefore this has been decommissioned. If it is restored
       31*   it should use config and not find to look at the deck. */
       32 
       33 	dcl     dbrp		 pointer;
       34 	dcl     stack_base		 fixed bin (14) unsigned;
       35 	dcl     chn_name		 char (12);
       36 	dcl     parm_ptr		 ptr;
       37 
       38 	dcl     sst$seg_state_chg_operation
       39 				 bit (36) aligned external static;
       40 	dcl     sst$pvhtp		 pointer unaligned external static;
       41 	dcl     sst$rqover		 fixed bin (35) external static;
       42 	dcl     sst$checksum_filemap	 fixed bin external static;
       43 
       44 	dcl     sys_info$system_type	 fixed bin external static;
       45 	dcl     sys_info$time_of_bootload
       46 				 fixed bin (71) ext;
       47 	dcl     pvt$time_of_bootload	 fixed bin (71) ext;
       48 	dcl     pds$apt_ptr		 ptr ext;
       49 	dcl     active_all_rings_data$hcscnt
       50 				 fixed bin ext;
       51 	dcl     tc_data$max_hproc_segno
       52 				 fixed bin ext;
       53 	dcl     active_all_rings_data$stack_base_segno
       54 				 fixed bin (18) ext;
       55 	dcl     dseg$		 (0:1024) fixed bin (71) ext;
       56 	dcl     access_operations_$excessive_seg_state_chg
       57 				 bit (36) aligned external;
       58 	dcl     error_table_$rqover	 fixed bin (35) external;
       59 	dcl     slt$		 fixed bin ext;
       60 
       61 
       62 	dcl     (addr, bin, mod, bit, divide, segno, size)
       63 				 builtin;
       64 
       65 	dcl     get_pvtx$ret_pvhtp	 entry returns (ptr);
       66 	dcl     config_$find_parm	 entry (char (4) aligned, ptr);
       67 	dcl     syserr		 entry options (variable);
  1     1 /* BEGIN INCLUDE FILE syserr_constants.incl.pl1 ... 11/11/80 W. Olin Sibert */
  1     2 /* 85-02-12, EJ Sharpe - Added sorting class constants, removed AIM_MESSAGE, added new action code names. */
  1     3 /* 85-04-24, G. Palter - Renamed SYSERR_UNUSED_10 to SYSERR_RING1_ERROR to reflect its actual use. */
  1     4 
  1     5 /* This include file has an ALM version.  Keep 'em in sync! */
  1     6 
  1     7 dcl (
  1     8 
  1     9 /* The following constants define the message action codes.  This indicates
  1    10*how a message is to be handled.  */
  1    11 
  1    12      SYSERR_CRASH_SYSTEM	init (1),			
  1    13      CRASH		init (1), 		/* Crash the system, and bleat plaintively. */
  1    14 
  1    15      SYSERR_TERMINATE_PROCESS	init (2),
  1    16      TERMINATE_PROCESS	init (2), 		/* Terminate the process, print the message, and beep. */
  1    17 
  1    18      SYSERR_PRINT_WITH_ALARM	init (3),
  1    19      BEEP 		init (3), 		/* Beep and print the message on the console. */
  1    20 
  1    21      SYSERR_PRINT_ON_CONSOLE	init (0),
  1    22      ANNOUNCE		init (0), 		/* Just print the message on the console. */
  1    23 
  1    24      SYSERR_LOG_OR_PRINT	init (4),
  1    25      LOG			init (4), 		/* Log the message, or print it if it can't be logged */
  1    26 
  1    27      SYSERR_LOG_OR_DISCARD	init (5),
  1    28      JUST_LOG		init (5), 		/* Just try to log the message, and discard it if it can't be */
  1    29 
  1    30 
  1    31 /* The following constants are added to the normal severities to indicate
  1    32*different sorting classes of messages.  */
  1    33 
  1    34      SYSERR_SYSTEM_ERROR	init (00),		/* indicates a standard level system error */
  1    35      SYSERR_RING1_ERROR	init (10),		/* indicates an error detected in ring 1 (mseg_, RCP) */
  1    36      SYSERR_COVERT_CHANNEL	init (20),		/* indicates covert channel audit trail message */
  1    37      SYSERR_UNSUCCESSFUL_ACCESS init (30),		/* indicates access denial audit trail message */
  1    38      SYSERR_SUCCESSFUL_ACCESS	init (40)			/* indicates access grant audit trail message */
  1    39 	) fixed bin internal static options (constant);
  1    40 
  1    41 /* END INCLUDE FILE syserr_constants.incl.pl1 */
       68 
       69 
       70 
       71 	sltp = addr (slt$);
       72 	stack_base = slt.last_sup_seg;		/* calculate hard core seg count */
       73 	stack_base = 8 + stack_base - mod (stack_base, 8);/* Make it 0 mod 8 (for stack segno's). */
       74 	active_all_rings_data$stack_base_segno, active_all_rings_data$hcscnt = stack_base;
       75 
       76 	if tc_data$max_hproc_segno < stack_base
       77 	then /* make sure hproc dsegs will be large enough */
       78 	     call syserr (CRASH, "init_sys_var: max_hproc_segno < hcscnt of ^o.", stack_base);
       79 
       80 	dbrp = addr (dseg$ (segno (addr (dseg$))));
       81 	if sys_info$system_type = ADP_SYSTEM
       82 	then do;					/* Set the stack base in the DSBR. */
       83 		dbrp -> adp_dbr.stack_base_segno = divide (stack_base, 8, 14, 0);
       84 		addr (pds$apt_ptr -> apte.dbr) -> adp_dbr.stack_base_segno = dbrp -> adp_dbr.stack_base_segno;
       85 	     end;
       86 
       87 	else do;
       88 		dbrp -> l68_dbr.stack_base_segno = divide (stack_base, 8, 14, 0);
       89 		addr (pds$apt_ptr -> apte.dbr) -> l68_dbr.stack_base_segno = dbrp -> l68_dbr.stack_base_segno;
       90 	     end;					/* Set the stack base in the DSBR. */
       91 
       92 	sys_info$time_of_bootload = pvt$time_of_bootload; /* get bootload time */
       93 
       94 	sst$pvhtp = get_pvtx$ret_pvhtp ();
       95 
       96 	sst$rqover = error_table_$rqover;		/* set up RQO error code */
       97 	sst$seg_state_chg_operation = access_operations_$excessive_seg_state_chg;
       98 
       99 	call config_$find_parm ("nock", parm_ptr);
      100 	if parm_ptr = null ()
      101 	then sst$checksum_filemap = 1;
      102 
      103 	return;
      104 
      105 /* format: off */
      106  /*  BEGIN INCLUDE FILE ... apte.incl.pl1 */
  2     2 
  2     3 /* Modified 1984-11-11 by E. Swenson for IPC event channel validation. */
  2     4 
  2     5 dcl  aptep pointer;
  2     6 
  2     7 dcl 1 apte based (aptep) aligned,			/* APT entry declaration for an active (known) process */
  2     8     2 thread unaligned,				/* List thread */
  2     9       3 fp bit (18),				/* Forward pointer */
  2    10       3 bp bit (18),				/* Backward pointer */
  2    11     2 flags unaligned,				/* Flags and miscellaneous */
  2    12       3 mbz bit (1),				/* This bit must be zero (sentinel bit) */
  2    13       3 wakeup_waiting bit (1),			/* ON if process has received wakeup */
  2    14       3 stop_pending bit (1),				/* ON if process has received stop connect */
  2    15       3 pre_empted bit (1),				/* ON if process is being pre-empted by get_processor */
  2    16       3 hproc bit (1),				/* ON if process is hardcore process */
  2    17       3 loaded bit (1),				/* ON if required per-process pages are in memory and wired */
  2    18       3 eligible bit (1),				/* ON if process is eligible */
  2    19       3 idle bit (1),				/* ON if  this is an idle process */
  2    20       3 interaction bit (1),				/* ON if process has interacted recently */
  2    21       3 pre_empt_pending bit (1),			/* ON if process has received pre-empt connect */
  2    22       3 default_procs_required bit (1),			/* ON if apte.procs_required is system default */
  2    23       3 realtime_burst bit (1),			/* ON if next eligibility is realtime */
  2    24       3 always_loaded bit (1),			/* ON if process is not to be unloaded */
  2    25       3 dbr_loaded bit (1),				/* ON if DBR is loaded on some CPU */
  2    26       3 being_loaded bit (1),				/* ON if somebody loading this process */
  2    27       3 shared_stack_0 bit (1),			/* ON if a shared stack_0 is assigned */
  2    28       3 page_wait_flag bit (1),			/* flag ON if waiting for page */
  2    29       3 firstsw bit (1),				/* OFF until process is intialized */
  2    30       3 state bit (18),				/* execution state */
  2    31     2 page_faults fixed bin (35),			/* total page faults for the process */
  2    32     2 processid bit (36),				/* bit 0-17: offset of ATPE */
  2    33 						/* bit 18-35: sequential number */
  2    34     2 te fixed bin (35),				/* virtual time since eligibility award */
  2    35     2 ts fixed bin (35),				/* virtual time since scheduling */
  2    36     2 ti fixed bin (35),				/* virtual time since interaction */
  2    37     2 timax fixed bin (35),				/* maximum value allowed for apte.ti */
  2    38 
  2    39 /* * * * * * * * */
  2    40 
  2    41     2 ipc_pointers unaligned,
  2    42       3 event_thread bit (18),			/* relative pointer to ITT list */
  2    43       3 pad3 bit (18),
  2    44     2 ips_message bit (36),				/* IPS signals pending */
  2    45     2 asteps unaligned,				/* relative ASTE pointers */
  2    46       3 pds bit (18),				/* PDS (per-process) */
  2    47       3 dseg bit (18),				/* DSEG (per-process) */
  2    48       3 prds bit (18),				/* PRDS (per-processor) */
  2    49     2 savex7 bit (18) unaligned,			/* x7 at call to getwork (return point in pxss) */
  2    50     2 term_processid bit (36),			/* process to send wakeup at temination */
  2    51     2 lock_id bit (36),				/* File System unqieu ID associated with process */
  2    52     2 time_used_clock fixed bin (71),			/* Total CPU time when process last lost CPU */
  2    53 
  2    54 /* * * * * * * * */
  2    55 
  2    56     2 wait_event bit (36) aligned,			/* Event ID process awaiting */
  2    57     2 wct_index bit (18) unaligned,			/* rel offset of WCTE */
  2    58     2 flags2 unaligned,
  2    59       3 priority_scheduling bit (1),			/* ON if guaranteed eligibility */
  2    60       3 special_wakeups bit (6),			/* Special wakeup channels */
  2    61       3 pad7 bit (7),
  2    62       3 batch bit (1),				/* ON if absentee */
  2    63       3 pr_tag bit (3),				/* CPU tag running or last run */
  2    64     2 state_change_time fixed bin (71),			/* Time apte.state last changed */
  2    65     2 alarm_event fixed bin (71),			/* wakeup event for alarm clock manager */
  2    66     2 alarm_time_thread bit (18) unaligned,		/* thread of processes with pending alarms */
  2    67     2 alarm_time bit (54) unaligned,			/* wakeup time for alarm */
  2    68 
  2    69 /* * * * * * */
  2    70 
  2    71     2 term_channel fixed bin (71),			/* wakeup event for account overflow */
  2    72     2 ws_size fixed bin,				/* working set estimate for the process */
  2    73     2 temax fixed bin (35),				/* maximum eligibility slice (vcpu) */
  2    74     2 deadline fixed bin (71),			/* time of next run */
  2    75     2 lock bit (18) unaligned,			/* 0 => APTE locked, unlocked => return point of last unlock */
  2    76     2 unusable bit (18) unaligned,			/* locking routines destroy */
  2    77     2 cpu_monitor fixed bin (35),			/* if not 0, send wakeup to term_processid when virtual cpu
  2    78*						/* reaches this (units = 1/1024 sec) */
  2    79     2 paging_measure fixed bin (71),			/* cumulative memory units */
  2    80     2 access_authorization bit (72),			/* authorization of this process */
  2    81     2 dbr fixed bin (71),				/* DBR value (constant since DSEG entry-held) */
  2    82 
  2    83     2 virtual_cpu_time fixed bin (71),			/* cumulative virtual CPU time for the process */
  2    84     2 ittes_sent fixed bin (18),			/* Unprocessed ITTs sent by this process */
  2    85     2 ittes_got fixed bin (18),			/* Unprocessed ITTs received by this process */
  2    86 
  2    87 /*  Cells used to drive and instrument finite-state model for response time
  2    88*    measurement. Maintained by meter_response_time */
  2    89 
  2    90     2 current_response_state fixed bin (17) unaligned,	/* Process state in modle */
  2    91     2 pad18 bit (18) unaligned,
  2    92     2 number_processing fixed bin (35),			/* Number interactions */
  2    93     2 last_response_state_time fixed bin (71),		/* Clock time at last response state change */
  2    94     2 total_processing_time fixed bin (71),		/* Total interaction processing time */
  2    95 
  2    96 /* * * * * * */
  2    97 
  2    98     2 begin_interaction_vcpu fixed bin (71),		/* Virtual cpu at beginning of last interaction */
  2    99 
  2   100 /*  End of cells for finite-state model */
  2   101 
  2   102     2 saved_temax fixed bin (35),			/* temax at eligibility award */
  2   103     2 procs_required bit (8) unaligned,			/* bit mask of CPUs this process can run */
  2   104     2 pad4 bit (28) unaligned,
  2   105     2 ipc_r_offset fixed bin (18) unsigned,
  2   106     2 ipc_r_factor fixed bin (35) unsigned,
  2   107     2 apad (10) fixed bin (35);
  2   108 
  2   109 /*  END INCLUDE FILE ... apte.incl.pl1 */
      106 
      107  /* BEGIN INCLUDE FILE slt.incl.pl1 --- Last modified 2/76 SHW */
  3     2 
  3     3 /* Declarations for Segment Loading Table header and array.
  3     4*
  3     5*   Used by Initialization and MST Checker subroutines */
  3     6 
  3     7 dcl sltp ptr,					/* pointer to base of SLT segment */
  3     8     names_ptr ptr,					/* pointer to base of SLT names segment */
  3     9     namep ptr,					/* pointer to segment name list block */
  3    10     pathp ptr,					/* pointer to segment's directory path name */
  3    11     aclp ptr;					/* pointer to acl structure */
  3    12 
  3    13 declare 1 slt based (sltp) aligned,			/* declaration of Segment Loading Table (SLT) */
  3    14 	2 name_seg_ptr ptr,				/* words 0-1, pointer (ITS pair) to name segment */
  3    15 	2 free_core_start fixed bin (24),		/* word 2, start of free core after perm-wired */
  3    16 	2 first_sup_seg fixed bin (18),		/* word 3, first supervisor segment number */
  3    17 	2 last_sup_seg fixed bin (18), 		/* word 4, last supervisor segment number */
  3    18 	2 first_init_seg fixed bin (18),		/* word 5, first initializer segment number */
  3    19 	2 last_init_seg fixed bin (18),		/* word 6, last initializer segment number */
  3    20 	2 free_core_size fixed bin (24),		/* size (in words) of free core after perm-wired */
  3    21 	2 seg (0:8191) aligned,			/* segment entries (4 words each) */
  3    22 	  3 slte (4) fixed bin (35);			/* Space for SLT entries */
  3    23 
  3    24 /* auxiliary segment of SLT for storing of segment names and directory path names */
  3    25 
  3    26 declare 1 name_seg based (names_ptr) aligned,		/* name segment header */
  3    27 	2 pad bit (18) unal,
  3    28 	2 next_loc bit (18) unal,			/* Next available free location in name seg */
  3    29 	2 ht (0:127) bit (18) aligned;		/* Names hash table */
  3    30 
  3    31 declare 1 segnam based (namep) aligned,			/* declaration for segment name block */
  3    32 	2 count fixed bin (17),			/* number of segment names in this block */
  3    33 	2 names (50 refer (segnam.count)),		/* segment name array */
  3    34 	  3 hp bit (18) unal,			/* hash thread pointer */
  3    35 	  3 ref bit (1) unal,			/* "1"b if name referenced */
  3    36 	  3 pad bit (5) unal,
  3    37 	  3 segno bit (12) unal,			/* segment number associated with this name */
  3    38 	  3 name char (32) unal;			/* space for name (max 32 characters) */
  3    39 
  3    40 declare 1 path based (pathp) aligned,			/* declaration for directory path name */
  3    41 	2 size fixed bin (17),			/* length of pathname */
  3    42 	2 name char (168 refer (path.size)) unal,	/* directory path name */
  3    43 	2 acls fixed bin;				/* ACL list starts here */
  3    44 
  3    45 declare 1 acls based (aclp) aligned,			/* declaration for acl list */
  3    46 	2 count fixed bin,				/* number of entries in acl list */
  3    47 	2 acl (50 refer (acls.count)),		/* array of acl entries */
  3    48 	  3 userid char (32),			/* user specification */
  3    49 	  3 mode bit (36) aligned,			/* mode for the specified user */
  3    50 	  3 pad bit (36) aligned,
  3    51 	  3 code fixed bin;
  3    52 
  3    53 
  3    54 /* END INCLUDE FILE slt.incl.pl1 */
      107 
      108  /* BEGIN INCLUDE FILE ... dbr.l68.incl.pl1 ... Created July, 1981 */
  4     2 
  4     3 dcl 1 l68_dbr aligned based,				/* Level 68 Descriptor Base Register */
  4     4 
  4     5    (2 add bit (24), 				/* main memory address of page table */
  4     6     2 pad1 bit (9),					/* overlays l68_sdw.rings */
  4     7     2 pad2 bit (3),					/* overlays l68_sdw.valid & df_no */
  4     8 
  4     9     2 pad3 bit (1),
  4    10     2 bound bit (14),				/* boundary field (in 16 word blocks) */
  4    11     2 pad4 bit (4),					/* overlays l68_sdw.access */
  4    12     2 unpaged bit (1),				/* segment is unpaged if this is 1 */
  4    13     2 pad5 bit (1),					/* overlays l68_sdw.not_a_gate */
  4    14     2 pad6 bit (1),					/* overlays l68_sdw.cache */
  4    15     2 stack_base_segno fixed bin (14) unsigned) unaligned;	/* overlays l68_sdw.entry_bound */
  4    16 
  4    17 /* END INCLUDE FILE ... dbr.l68.incl.pl1 */
      108 
      109  /* BEGIN INCLUDE FILE ... dbr.adp.incl.pl1 ... Created July, 1981 */
  5     2 
  5     3 dcl 1 adp_dbr aligned based,				/* ADP Descriptor Base Register */
  5     4 
  5     5    (2 add bit (26), 				/* Page table address */
  5     6     2 pad1 bit (1),					/* overlays adp_sdw.valid */
  5     7     2 pad2 bit (9),					/* overlays adp_sdw.rungs */
  5     8 
  5     9     2 bound bit (14),				/* Bound of segment, in 16 word blocks */
  5    10     2 pad3 bit (2),
  5    11     2 stack_base_segno fixed bin (14) unsigned,		/* overlays ad_sdw.entry_bound */
  5    12     2 pad4 bit (4),					/* overlays adp_sdw.access */
  5    13     2 unpaged bit (1),				/* "1"b => segment is unpaged */
  5    14     2 pad5 bit (1)) unaligned;			/* overlays adp_sdw.not_a_gate */
  5    15 
  5    16 /* END INCLUDE FILE dbr.adp.incl.pl1 */
      109 
      110  /* BEGIN INCLUDE FILE ... system_types.incl.pl1 ... 03/23/81 ... W. Olin Sibert */
  6     2 
  6     3 dcl  L68_SYSTEM	fixed bin (17) internal static options (constant) init (1);
  6     4 dcl  ADP_SYSTEM	fixed bin (17) internal static options (constant) init (2);
  6     5 
  6     6 dcl  SYSTEM_TYPE_NAME (2) char (8) internal static options (constant) init
  6     7     ("Level68", "ADP");
  6     8 
  6     9 /* END INCLUDE FILE ... system_types.incl.pl1 */
      110 
      111 
      112 
      113 
      114 /* BEGIN MESSAGE DOCUMENTATION
      115*
      116*Message:
      117*init_sys_var: max_hproc_segno < hcscnt of XXX
      118*
      119*S:	$crash
      120*
      121*T:	$init
      122*
      123*M:	The upper bound of the descriptor segment for hardcore processes is too small.
      124*$err
      125*
      126*A:	$recover
      127*$boot_tape
      128*
      129*
      130*END MESSAGE DOCUMENTATION */
      131 
      132      end init_sys_var;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0826.9  init_sys_var.pl1                  >spec>install>1112>init_sys_var.pl1
68           1    05/17/85  0615.7  syserr_constants.incl.pl1         >ldd>include>syserr_constants.incl.pl1
106          2    01/06/85  1422.2  apte.incl.pl1                     >ldd>include>apte.incl.pl1
107          3    05/24/82  1005.0  slt.incl.pl1                      >ldd>include>slt.incl.pl1
108          4    03/27/82  0430.3  dbr.l68.incl.pl1                  >ldd>include>dbr.l68.incl.pl1
109          5    03/27/82  0430.3  dbr.adp.incl.pl1                  >ldd>include>dbr.adp.incl.pl1
110          6    06/19/81  2115.0  system_types.incl.pl1             >ldd>include>system_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ADP_SYSTEM                             constant        fixed bin(17,0)          initial dcl 6-4 ref 81
CRASH                           000004 constant        fixed bin(17,0)          initial dcl 1-7 set ref 76*
access_operations_$excessive_seg_state_chg
                                000040 external static bit(36)                  dcl 56 ref 97
active_all_rings_data$hcscnt    000030 external static fixed bin(17,0)          dcl 49 set ref 74*
active_all_rings_data$stack_base_segno
                                000034 external static fixed bin(18,0)          dcl 53 set ref 74*
addr                                                   builtin function         dcl 62 ref 71 80 80 84 89
adp_dbr                                based           structure                level 1 dcl 5-3
apte                                   based           structure                level 1 dcl 2-7
config_$find_parm               000050 constant        entry                    external dcl 66 ref 99
dbr                      44            based           fixed bin(71,0)          level 2 dcl 2-7 set ref 84 89
dbrp                            000100 automatic       pointer                  dcl 33 set ref 80* 83 84 88 89
divide                                                 builtin function         dcl 62 ref 83 88
dseg$                           000036 external static fixed bin(71,0)          array dcl 55 set ref 80 80
error_table_$rqover             000042 external static fixed bin(35,0)          dcl 58 ref 96
get_pvtx$ret_pvhtp              000046 constant        entry                    external dcl 65 ref 94
l68_dbr                                based           structure                level 1 dcl 4-3
last_sup_seg              4            based           fixed bin(18,0)          level 2 dcl 3-13 ref 72
mod                                                    builtin function         dcl 62 ref 73
parm_ptr                        000104 automatic       pointer                  dcl 36 set ref 99* 100
pds$apt_ptr                     000026 external static pointer                  dcl 48 ref 84 89
pvt$time_of_bootload            000024 external static fixed bin(71,0)          dcl 47 ref 92
segno                                                  builtin function         dcl 62 ref 80
slt                                    based           structure                level 1 dcl 3-13
slt$                            000044 external static fixed bin(17,0)          dcl 59 set ref 71
sltp                            000106 automatic       pointer                  dcl 3-7 set ref 71* 72
sst$checksum_filemap            000016 external static fixed bin(17,0)          dcl 42 set ref 100*
sst$pvhtp                       000012 external static pointer                  packed unaligned dcl 40 set ref 94*
sst$rqover                      000014 external static fixed bin(35,0)          dcl 41 set ref 96*
sst$seg_state_chg_operation     000010 external static bit(36)                  dcl 38 set ref 97*
stack_base                      000102 automatic       fixed bin(14,0)          unsigned dcl 34 set ref 72* 73* 73 73 74 76 76* 83
                                                                                  88
stack_base_segno          1(16)        based           fixed bin(14,0)          level 2 in structure "adp_dbr" packed packed
                                                                                  unsigned unaligned dcl 5-3 in procedure
                                                                                  "init_sys_var" set ref 83* 84* 84
stack_base_segno          1(22)        based           fixed bin(14,0)          level 2 in structure "l68_dbr" packed packed
                                                                                  unsigned unaligned dcl 4-3 in procedure
                                                                                  "init_sys_var" set ref 88* 89* 89
sys_info$system_type            000020 external static fixed bin(17,0)          dcl 44 ref 81
sys_info$time_of_bootload       000022 external static fixed bin(71,0)          dcl 45 set ref 92*
syserr                          000052 constant        entry                    external dcl 67 ref 76
tc_data$max_hproc_segno         000032 external static fixed bin(17,0)          dcl 51 ref 76

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ANNOUNCE                               internal static fixed bin(17,0)          initial dcl 1-7
BEEP                                   internal static fixed bin(17,0)          initial dcl 1-7
JUST_LOG                               internal static fixed bin(17,0)          initial dcl 1-7
L68_SYSTEM                             internal static fixed bin(17,0)          initial dcl 6-3
LOG                                    internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_COVERT_CHANNEL                  internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_CRASH_SYSTEM                    internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_LOG_OR_DISCARD                  internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_LOG_OR_PRINT                    internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_PRINT_ON_CONSOLE                internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_PRINT_WITH_ALARM                internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_RING1_ERROR                     internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_SUCCESSFUL_ACCESS               internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_SYSTEM_ERROR                    internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_TERMINATE_PROCESS               internal static fixed bin(17,0)          initial dcl 1-7
SYSERR_UNSUCCESSFUL_ACCESS             internal static fixed bin(17,0)          initial dcl 1-7
SYSTEM_TYPE_NAME                       internal static char(8)                  initial array packed unaligned dcl 6-6
TERMINATE_PROCESS                      internal static fixed bin(17,0)          initial dcl 1-7
aclp                                   automatic       pointer                  dcl 3-7
acls                                   based           structure                level 1 dcl 3-45
aptep                                  automatic       pointer                  dcl 2-5
bin                                                    builtin function         dcl 62
bit                                                    builtin function         dcl 62
chn_name                               automatic       char(12)                 packed unaligned dcl 35
name_seg                               based           structure                level 1 dcl 3-26
namep                                  automatic       pointer                  dcl 3-7
names_ptr                              automatic       pointer                  dcl 3-7
path                                   based           structure                level 1 dcl 3-40
pathp                                  automatic       pointer                  dcl 3-7
segnam                                 based           structure                level 1 dcl 3-31
size                                                   builtin function         dcl 62

NAME DECLARED BY EXPLICIT CONTEXT.
init_sys_var                    000025 constant        entry                    external dcl 14

NAME DECLARED BY CONTEXT OR IMPLICATION.
null                                                   builtin function         ref 100

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       440         514     203         450
Length      1016     203        54         266     234           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
init_sys_var                        104 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
init_sys_var             000100 dbrp                        init_sys_var
                         000102 stack_base                  init_sys_var
                         000104 parm_ptr                    init_sys_var
                         000106 sltp                        init_sys_var

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          mdfx1               ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
config_$find_parm             get_pvtx$ret_pvhtp            syserr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
access_operations_$excessive_seg_state_chg                  active_all_rings_data$hcscnt
active_all_rings_data$stack_base_segno                      dseg$                         error_table_$rqover
pds$apt_ptr                   pvt$time_of_bootload          slt$                          sst$checksum_filemap
sst$pvhtp                     sst$rqover                    sst$seg_state_chg_operation   sys_info$system_type
sys_info$time_of_bootload     tc_data$max_hproc_segno




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000024        71 000032        72 000034        73 000036        74 000045        76 000047        80 000074
     81 000104        83 000110        84 000116        85 000124        88 000125        89 000132        92 000140
     94 000142        96 000153        97 000155        99 000157       100 000171       103 000200


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
