ASSEMBLY LISTING OF SEGMENT >spec>install>1115>rcp_sys_.alm                                                                                                                                         
ASSEMBLED ON:	11/11/89  0920.7 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  "	Gate to RCP to perform very privileged functions.
                                    13  "	This gate has ring brackets of (1,1,5).
                                    14  "	Its ACL gives access to only system daemon processes.
                                    15  "
                                    16  "	Modified 1985-03-08, BIM: remove obsolete "init" gate.
                                    17  
                                    18  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    19  
                                    20  	gate_info	rcp_sys_
                                        	use	transfer_vector
    000000  0a   000026 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000026  aa  7 00046 2721 20         .actor:	getlp
    000027  aa  0 00002 3521 20         	eppbp	ap|2,*
    000030  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000031  0a   000045 6000 00         	tze	.return_name	zero length => get name
                                        
    000032  aa   000001 0350 07         	adla	1,dl		include length of acc
    000033  aa  0 00004 4501 20         	stz	ap|4,*
    000034  0a   000060 7000 00         	tsx0	.search_defs
                                        
    000035  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000036  aa   277777 600005          	desc9a	bp|-1(3),al
    000037  aa   300000 000005          	desc9a	bb|0,al
    000040  0a   000070 6010 00         	tnz	.next_def
                                        
    000041  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000042  aa   000022 7710 00         	arl	18
    000043  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000044  aa  7 00044 7101 20         	short_return
                                        
    000045                              .return_name:
    000045  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000046  0a   000060 7000 00         	tsx0	.search_defs
                                        
    000047  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000050  0a   000070 6010 00         	tnz	.next_def
                                        
    000051  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000052  aa   000033 7710 00         	arl	27
    000053  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000054  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000055  aa   300000 200005          	desc9a	bb|0(1),al
    000056  aa   200000 000005          	desc9a	bp|0,al
                                        
    000057  aa  7 00044 7101 20         	short_return
                                        
    000060                              .search_defs:
    000060  aa   000000 6220 00         	eax2	0
    000061  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000062                              .defs_loop:
    000062  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000063  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000064  0a   000070 6010 00         	tnz	.next_def
                                        
    000065  aa  1 00002 2271 12         	ldx7	ab|2,2
    000066  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000067  aa   000000 7100 10         	tra	0,0		test definition
    000070                              .next_def:
    000070  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000071  0a   000062 6010 00         	tnz	.defs_loop
                                        
    000072  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000073  aa   000060 6270 00         .setup:	push
    000074  aa  7 00040 2721 20
    000075  aa  7 00046 2721 20         	getlp
    000076  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000077  0a   000124 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000100  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000101  0a   000124 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000102  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000103  0a   000112 3500 00
    000104  4a  4 00010 3521 20
    000105  aa  6 00040 7531 00
    000106  aa  7 00036 6701 20
    000107  aa  6 00000 1731 00
    000110  aa  6 00040 0731 00
    000111  aa   000000 000000          	oct	0
                                        
                                        	even
    000112                              signal_arglist:
    000112  aa   000002 000004          	zero	2,4
    000113  aa   000002 000000          	zero	2,0
    000114  0a   000120 0000 00         	arg	.gate_errorname
    000115  aa   000000 0000 00         	arg
    000116  0a   000123 0000 00         	arg	.gate_errordesc
    000117  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000120                              .gate_errorname:
    000120  aa  147 141 164 145         	aci	"gate_error"
    000121  aa  137 145 162 162
    000122  aa  157 162 000 000
    000123                              .gate_errordesc:
    000123  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000124                              .no_gate_error:
    000124  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    21  
                                    22  	gate	add_device,rcp_reconfigure_,add_device,2
                        000001          	segdef	add_device
    000001                              add_device:
    000001  0a   000126 7100 00         	tra	add_device.e
    000125  aa   000004 000000          	zero	2*2,0
    000126                              add_device.e:
    000126  0a   000073 7020 00         	tsx2	.setup
    000127  aa   000000 6340 07         	ldi	=0,dl
    000130  4a  4 00012 3521 20         	short_call rcp_reconfigure_$add_device(ap|0)
    000131  aa  7 00036 6701 20
    000132  aa  6 00030 3701 20
    000133  aa  7 00042 7101 20         	return
                                        
                                    23  	gate	authenticate_device,rcp_authenticate_device_,rcp_authenticate_device_,3
                        000002          	segdef	authenticate_device
    000002                              authenticate_device:
    000002  0a   000135 7100 00         	tra	authenticate_device.e
    000134  aa   000006 000000          	zero	3*2,0
    000135                              authenticate_device.e:
    000135  0a   000073 7020 00         	tsx2	.setup
    000136  aa   000000 6340 07         	ldi	=0,dl
    000137  4a  4 00014 3521 20         	short_call rcp_authenticate_device_$rcp_authenticate_device_(ap|0)
    000140  aa  7 00036 6701 20
    000141  aa  6 00030 3701 20
    000142  aa  7 00042 7101 20         	return
                                        
                                    24  	gate	check_mount_timer,rcp_mount_timer_,check,3
                        000003          	segdef	check_mount_timer
    000003                              check_mount_timer:
    000003  0a   000144 7100 00         	tra	check_mount_timer.e
    000143  aa   000006 000000          	zero	3*2,0
    000144                              check_mount_timer.e:
    000144  0a   000073 7020 00         	tsx2	.setup
    000145  aa   000000 6340 07         	ldi	=0,dl
    000146  4a  4 00016 3521 20         	short_call rcp_mount_timer_$check(ap|0)
    000147  aa  7 00036 6701 20
    000150  aa  6 00030 3701 20
    000151  aa  7 00042 7101 20         	return
                                        
                                    25  	gate	clear_resource,rcprm_find_resource_,clear,3
                        000004          	segdef	clear_resource
    000004                              clear_resource:
    000004  0a   000153 7100 00         	tra	clear_resource.e
    000152  aa   000006 000000          	zero	3*2,0
    000153                              clear_resource.e:
    000153  0a   000073 7020 00         	tsx2	.setup
    000154  aa   000000 6340 07         	ldi	=0,dl
    000155  4a  4 00020 3521 20         	short_call rcprm_find_resource_$clear(ap|0)
    000156  aa  7 00036 6701 20
    000157  aa  6 00030 3701 20
    000160  aa  7 00042 7101 20         	return
                                        
                                    26  	gate	copy_data,rcp_copy_,data,3
                        000005          	segdef	copy_data
    000005                              copy_data:
    000005  0a   000162 7100 00         	tra	copy_data.e
    000161  aa   000006 000000          	zero	3*2,0
    000162                              copy_data.e:
    000162  0a   000073 7020 00         	tsx2	.setup
    000163  aa   000000 6340 07         	ldi	=0,dl
    000164  4a  4 00022 3521 20         	short_call rcp_copy_$data(ap|0)
    000165  aa  7 00036 6701 20
    000166  aa  6 00030 3701 20
    000167  aa  7 00042 7101 20         	return
                                        
                                    27  	gate	create_registry,rcprm_registry_mgr_,create_registry,3
                        000006          	segdef	create_registry
    000006                              create_registry:
    000006  0a   000171 7100 00         	tra	create_registry.e
    000170  aa   000006 000000          	zero	3*2,0
    000171                              create_registry.e:
    000171  0a   000073 7020 00         	tsx2	.setup
    000172  aa   000000 6340 07         	ldi	=0,dl
    000173  4a  4 00024 3521 20         	short_call rcprm_registry_mgr_$create_registry(ap|0)
    000174  aa  7 00036 6701 20
    000175  aa  6 00030 3701 20
    000176  aa  7 00042 7101 20         	return
                                        
                                    28  	gate	delete_device,rcp_reconfigure_,delete_device,2
                        000007          	segdef	delete_device
    000007                              delete_device:
    000007  0a   000200 7100 00         	tra	delete_device.e
    000177  aa   000004 000000          	zero	2*2,0
    000200                              delete_device.e:
    000200  0a   000073 7020 00         	tsx2	.setup
    000201  aa   000000 6340 07         	ldi	=0,dl
    000202  4a  4 00026 3521 20         	short_call rcp_reconfigure_$delete_device(ap|0)
    000203  aa  7 00036 6701 20
    000204  aa  6 00030 3701 20
    000205  aa  7 00042 7101 20         	return
                                        
                                    29  	gate	initialize,rcp_ring1_init_,rcp_ring1_init_,2
                        000010          	segdef	initialize
    000010                              initialize:
    000010  0a   000207 7100 00         	tra	initialize.e
    000206  aa   000004 000000          	zero	2*2,0
    000207                              initialize.e:
    000207  0a   000073 7020 00         	tsx2	.setup
    000210  aa   000000 6340 07         	ldi	=0,dl
    000211  4a  4 00030 3521 20         	short_call rcp_ring1_init_$rcp_ring1_init_(ap|0)
    000212  aa  7 00036 6701 20
    000213  aa  6 00030 3701 20
    000214  aa  7 00042 7101 20         	return
                                        
                                    30  	gate	init_mount_timer,rcp_mount_timer_,init,2
                        000011          	segdef	init_mount_timer
    000011                              init_mount_timer:
    000011  0a   000216 7100 00         	tra	init_mount_timer.e
    000215  aa   000004 000000          	zero	2*2,0
    000216                              init_mount_timer.e:
    000216  0a   000073 7020 00         	tsx2	.setup
    000217  aa   000000 6340 07         	ldi	=0,dl
    000220  4a  4 00032 3521 20         	short_call rcp_mount_timer_$init(ap|0)
    000221  aa  7 00036 6701 20
    000222  aa  6 00030 3701 20
    000223  aa  7 00042 7101 20         	return
                                        
                                    31  	gate	init_account_chan,rcp_mount_timer_,account_init,2
                        000012          	segdef	init_account_chan
    000012                              init_account_chan:
    000012  0a   000225 7100 00         	tra	init_account_chan.e
    000224  aa   000004 000000          	zero	2*2,0
    000225                              init_account_chan.e:
    000225  0a   000073 7020 00         	tsx2	.setup
    000226  aa   000000 6340 07         	ldi	=0,dl
    000227  4a  4 00034 3521 20         	short_call rcp_mount_timer_$account_init(ap|0)
    000230  aa  7 00036 6701 20
    000231  aa  6 00030 3701 20
    000232  aa  7 00042 7101 20         	return
                                        
                                    32  	gate	reconstruct_registry,rcprm_journalize_,reconstruct,4
                        000013          	segdef	reconstruct_registry
    000013                              reconstruct_registry:
    000013  0a   000234 7100 00         	tra	reconstruct_registry.e
    000233  aa   000010 000000          	zero	4*2,0
    000234                              reconstruct_registry.e:
    000234  0a   000073 7020 00         	tsx2	.setup
    000235  aa   000000 6340 07         	ldi	=0,dl
    000236  4a  4 00036 3521 20         	short_call rcprm_journalize_$reconstruct(ap|0)
    000237  aa  7 00036 6701 20
    000240  aa  6 00030 3701 20
    000241  aa  7 00042 7101 20         	return
                                        
                                    33  	gate	reserve,rcp_reserve_,sys,4
                        000014          	segdef	reserve
    000014                              reserve:
    000014  0a   000243 7100 00         	tra	reserve.e
    000242  aa   000010 000000          	zero	4*2,0
    000243                              reserve.e:
    000243  0a   000073 7020 00         	tsx2	.setup
    000244  aa   000000 6340 07         	ldi	=0,dl
    000245  4a  4 00040 3521 20         	short_call rcp_reserve_$sys(ap|0)
    000246  aa  7 00036 6701 20
    000247  aa  6 00030 3701 20
    000250  aa  7 00042 7101 20         	return
                                        
                                    34  	gate	cancel_id,rcp_cancel_id_,sys,3
                        000015          	segdef	cancel_id
    000015                              cancel_id:
    000015  0a   000252 7100 00         	tra	cancel_id.e
    000251  aa   000006 000000          	zero	3*2,0
    000252                              cancel_id.e:
    000252  0a   000073 7020 00         	tsx2	.setup
    000253  aa   000000 6340 07         	ldi	=0,dl
    000254  4a  4 00042 3521 20         	short_call rcp_cancel_id_$sys(ap|0)
    000255  aa  7 00036 6701 20
    000256  aa  6 00030 3701 20
    000257  aa  7 00042 7101 20         	return
                                        
                                    35  	gate	cancel_id_string,rcp_cancel_id_,sys_string,3
                        000016          	segdef	cancel_id_string
    000016                              cancel_id_string:
    000016  0a   000261 7100 00         	tra	cancel_id_string.e
    000260  aa   000006 000000          	zero	3*2,0
    000261                              cancel_id_string.e:
    000261  0a   000073 7020 00         	tsx2	.setup
    000262  aa   000000 6340 07         	ldi	=0,dl
    000263  4a  4 00044 3521 20         	short_call rcp_cancel_id_$sys_string(ap|0)
    000264  aa  7 00036 6701 20
    000265  aa  6 00030 3701 20
    000266  aa  7 00042 7101 20         	return
                                        
                                    36  	gate	pre_claim,rcp_pre_claim_,rcp_pre_claim_,4
                        000017          	segdef	pre_claim
    000017                              pre_claim:
    000017  0a   000270 7100 00         	tra	pre_claim.e
    000267  aa   000010 000000          	zero	4*2,0
    000270                              pre_claim.e:
    000270  0a   000073 7020 00         	tsx2	.setup
    000271  aa   000000 6340 07         	ldi	=0,dl
    000272  4a  4 00046 3521 20         	short_call rcp_pre_claim_$rcp_pre_claim_(ap|0)
    000273  aa  7 00036 6701 20
    000274  aa  6 00030 3701 20
    000275  aa  7 00042 7101 20         	return
                                        
                                    37  	gate	remove_registry,rcprm_registry_mgr_,remove_registry,3
                        000020          	segdef	remove_registry
    000020                              remove_registry:
    000020  0a   000277 7100 00         	tra	remove_registry.e
    000276  aa   000006 000000          	zero	3*2,0
    000277                              remove_registry.e:
    000277  0a   000073 7020 00         	tsx2	.setup
    000300  aa   000000 6340 07         	ldi	=0,dl
    000301  4a  4 00050 3521 20         	short_call rcprm_registry_mgr_$remove_registry(ap|0)
    000302  aa  7 00036 6701 20
    000303  aa  6 00030 3701 20
    000304  aa  7 00042 7101 20         	return
                                        
                                    38  	gate	unassign_device,rcp_force_unassign_,unassign_device,2
                        000021          	segdef	unassign_device
    000021                              unassign_device:
    000021  0a   000306 7100 00         	tra	unassign_device.e
    000305  aa   000004 000000          	zero	2*2,0
    000306                              unassign_device.e:
    000306  0a   000073 7020 00         	tsx2	.setup
    000307  aa   000000 6340 07         	ldi	=0,dl
    000310  4a  4 00052 3521 20         	short_call rcp_force_unassign_$unassign_device(ap|0)
    000311  aa  7 00036 6701 20
    000312  aa  6 00030 3701 20
    000313  aa  7 00042 7101 20         	return
                                        
                                    39  	gate	unassign_process,rcp_force_unassign_,unassign_process,2
                        000022          	segdef	unassign_process
    000022                              unassign_process:
    000022  0a   000315 7100 00         	tra	unassign_process.e
    000314  aa   000004 000000          	zero	2*2,0
    000315                              unassign_process.e:
    000315  0a   000073 7020 00         	tsx2	.setup
    000316  aa   000000 6340 07         	ldi	=0,dl
    000317  4a  4 00054 3521 20         	short_call rcp_force_unassign_$unassign_process(ap|0)
    000320  aa  7 00036 6701 20
    000321  aa  6 00030 3701 20
    000322  aa  7 00042 7101 20         	return
                                        
                                    40  	gate	preload,rcp_preload_,rcp_preload_,4
                        000023          	segdef	preload
    000023                              preload:
    000023  0a   000324 7100 00         	tra	preload.e
    000323  aa   000010 000000          	zero	4*2,0
    000324                              preload.e:
    000324  0a   000073 7020 00         	tsx2	.setup
    000325  aa   000000 6340 07         	ldi	=0,dl
    000326  4a  4 00056 3521 20         	short_call rcp_preload_$rcp_preload_(ap|0)
    000327  aa  7 00036 6701 20
    000330  aa  6 00030 3701 20
    000331  aa  7 00042 7101 20         	return
                                        
                                    41  	gate	unload,rcp_unload_,rcp_unload_,3
                        000024          	segdef	unload
    000024                              unload:
    000024  0a   000333 7100 00         	tra	unload.e
    000332  aa   000006 000000          	zero	3*2,0
    000333                              unload.e:
    000333  0a   000073 7020 00         	tsx2	.setup
    000334  aa   000000 6340 07         	ldi	=0,dl
    000335  4a  4 00060 3521 20         	short_call rcp_unload_$rcp_unload_(ap|0)
    000336  aa  7 00036 6701 20
    000337  aa  6 00030 3701 20
    000340  aa  7 00042 7101 20         	return
                                        
                                    42  	gate	update_registry_header,rcprm_registry_mgr_,update_registry_header,3
                        000025          	segdef	update_registry_header
    000025                              update_registry_header:
    000025  0a   000342 7100 00         	tra	update_registry_header.e
    000341  aa   000006 000000          	zero	3*2,0
    000342                              update_registry_header.e:
    000342  0a   000073 7020 00         	tsx2	.setup
    000343  aa   000000 6340 07         	ldi	=0,dl
    000344  4a  4 00062 3521 20         	short_call rcprm_registry_mgr_$update_registry_header(ap|0)
    000345  aa  7 00036 6701 20
    000346  aa  6 00030 3701 20
    000347  aa  7 00042 7101 20         	return
                                        
                                    43  
                                    44  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000350  5a   000003 000000 
    000351  5a   000242 600000 
    000352  aa   000000 000000 
    000353  55   000011 000002 
    000354  5a   000002 400003 
    000355  55   000006 000011 
    000356  aa  010 162 143 160
    000357  aa  137 163 171 163
    000360  aa  137 000 000 000
    000361  55   000022 000003 
    000362  0a   000025 400000 
    000363  55   000014 000003 
    000364  aa  026 165 160 144         update_registry_header
    000365  aa  141 164 145 137
    000366  aa  162 145 147 151
    000367  aa  163 164 162 171
    000370  aa  137 150 145 141
    000371  aa  144 145 162 000
    000372  55   000027 000011 
    000373  0a   000024 400000 
    000374  55   000025 000003 
    000375  aa  006 165 156 154         unload
    000376  aa  157 141 144 000
    000377  55   000034 000022 
    000400  0a   000023 400000 
    000401  55   000032 000003 
    000402  aa  007 160 162 145         preload
    000403  aa  154 157 141 144
    000404  55   000044 000027 
    000405  0a   000022 400000 
    000406  55   000037 000003 
    000407  aa  020 165 156 141         unassign_process
    000410  aa  163 163 151 147
    000411  aa  156 137 160 162
    000412  aa  157 143 145 163
    000413  aa  163 000 000 000
    000414  55   000053 000034 
    000415  0a   000021 400000 
    000416  55   000047 000003 
    000417  aa  017 165 156 141         unassign_device
    000420  aa  163 163 151 147
    000421  aa  156 137 144 145
    000422  aa  166 151 143 145
    000423  55   000062 000044 
    000424  0a   000020 400000 
    000425  55   000056 000003 
    000426  aa  017 162 145 155         remove_registry
    000427  aa  157 166 145 137
    000430  aa  162 145 147 151
    000431  aa  163 164 162 171
    000432  55   000070 000053 
    000433  0a   000017 400000 
    000434  55   000065 000003 
    000435  aa  011 160 162 145         pre_claim
    000436  aa  137 143 154 141
    000437  aa  151 155 000 000
    000440  55   000100 000062 
    000441  0a   000016 400000 
    000442  55   000073 000003 
    000443  aa  020 143 141 156         cancel_id_string
    000444  aa  143 145 154 137
    000445  aa  151 144 137 163
    000446  aa  164 162 151 156
    000447  aa  147 000 000 000
    000450  55   000106 000070 
    000451  0a   000015 400000 
    000452  55   000103 000003 
    000453  aa  011 143 141 156         cancel_id
    000454  aa  143 145 154 137
    000455  aa  151 144 000 000
    000456  55   000113 000100 
    000457  0a   000014 400000 
    000460  55   000111 000003 
    000461  aa  007 162 145 163         reserve
    000462  aa  145 162 166 145
    000463  55   000124 000106 
    000464  0a   000013 400000 
    000465  55   000116 000003 
    000466  aa  024 162 145 143         reconstruct_registry
    000467  aa  157 156 163 164
    000470  aa  162 165 143 164
    000471  aa  137 162 145 147
    000472  aa  151 163 164 162
    000473  aa  171 000 000 000
    000474  55   000134 000113 
    000475  0a   000012 400000 
    000476  55   000127 000003 
    000477  aa  021 151 156 151         init_account_chan
    000500  aa  164 137 141 143
    000501  aa  143 157 165 156
    000502  aa  164 137 143 150
    000503  aa  141 156 000 000
    000504  55   000144 000124 
    000505  0a   000011 400000 
    000506  55   000137 000003 
    000507  aa  020 151 156 151         init_mount_timer
    000510  aa  164 137 155 157
    000511  aa  165 156 164 137
    000512  aa  164 151 155 145
    000513  aa  162 000 000 000
    000514  55   000152 000134 
    000515  0a   000010 400000 
    000516  55   000147 000003 
    000517  aa  012 151 156 151         initialize
    000520  aa  164 151 141 154
    000521  aa  151 172 145 000
    000522  55   000161 000144 
    000523  0a   000007 400000 
    000524  55   000155 000003 
    000525  aa  015 144 145 154         delete_device
    000526  aa  145 164 145 137
    000527  aa  144 145 166 151
    000530  aa  143 145 000 000
    000531  55   000170 000152 
    000532  0a   000006 400000 
    000533  55   000164 000003 
    000534  aa  017 143 162 145         create_registry
    000535  aa  141 164 145 137
    000536  aa  162 145 147 151
    000537  aa  163 164 162 171
    000540  55   000176 000161 
    000541  0a   000005 400000 
    000542  55   000173 000003 
    000543  aa  011 143 157 160         copy_data
    000544  aa  171 137 144 141
    000545  aa  164 141 000 000
    000546  55   000205 000170 
    000547  0a   000004 400000 
    000550  55   000201 000003 
    000551  aa  016 143 154 145         clear_resource
    000552  aa  141 162 137 162
    000553  aa  145 163 157 165
    000554  aa  162 143 145 000
    000555  55   000215 000176 
    000556  0a   000003 400000 
    000557  55   000210 000003 
    000560  aa  021 143 150 145         check_mount_timer
    000561  aa  143 153 137 155
    000562  aa  157 165 156 164
    000563  aa  137 164 151 155
    000564  aa  145 162 000 000
    000565  55   000225 000205 
    000566  0a   000002 400000 
    000567  55   000220 000003 
    000570  aa  023 141 165 164         authenticate_device
    000571  aa  150 145 156 164
    000572  aa  151 143 141 164
    000573  aa  145 137 144 145
    000574  aa  166 151 143 145
    000575  55   000233 000215 
    000576  0a   000001 400000 
    000577  55   000230 000003 
    000600  aa  012 141 144 144         add_device
    000601  aa  137 144 145 166
    000602  aa  151 143 145 000
    000603  55   000002 000225 
    000604  6a   000000 400002 
    000605  55   000236 000003 
    000606  aa  014 163 171 155         symbol_table
    000607  aa  142 157 154 137
    000610  aa  164 141 142 154
    000611  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000612  aa   000000 000033 
    000613  aa   000000 000000 
    000614  5a   000022 000000 
    000615  5a   000011 000000 
    000616  5a   000124 000000 
    000617  5a   000134 000000 
    000620  aa   000000 000000 
    000621  5a   000225 000000 
    000622  5a   000034 000000 
    000623  5a   000044 000000 
    000624  5a   000062 000000 
    000625  5a   000144 000000 
    000626  5a   000027 000000 
    000627  5a   000113 000000 
    000630  5a   000106 000000 
    000631  5a   000152 000000 
    000632  5a   000070 000000 
    000633  5a   000170 000000 
    000634  5a   000161 000000 
    000635  5a   000233 000000 
    000636  aa   000000 000000 
    000637  aa   000000 000000 
    000640  aa   000000 000000 
    000641  5a   000100 000000 
    000642  5a   000215 000000 
    000643  5a   000176 000000 
    000644  5a   000205 000000 
    000645  5a   000053 000000 

EXTERNAL NAMES

    000646  aa  013 162 143 160         rcp_unload_
    000647  aa  137 165 156 154
    000650  aa  157 141 144 137
    000651  aa  014 162 143 160         rcp_preload_
    000652  aa  137 160 162 145
    000653  aa  154 157 141 144
    000654  aa  137 000 000 000
    000655  aa  023 162 143 160         rcp_force_unassign_
    000656  aa  137 146 157 162
    000657  aa  143 145 137 165
    000660  aa  156 141 163 163
    000661  aa  151 147 156 137
    000662  aa  016 162 143 160         rcp_pre_claim_
    000663  aa  137 160 162 145
    000664  aa  137 143 154 141
    000665  aa  151 155 137 000
    000666  aa  012 163 171 163         sys_string
    000667  aa  137 163 164 162
    000670  aa  151 156 147 000
    000671  aa  016 162 143 160         rcp_cancel_id_
    000672  aa  137 143 141 156
    000673  aa  143 145 154 137
    000674  aa  151 144 137 000
    000675  aa  003 163 171 163         sys
    000676  aa  014 162 143 160         rcp_reserve_
    000677  aa  137 162 145 163
    000700  aa  145 162 166 145
    000701  aa  137 000 000 000
    000702  aa  013 162 145 143         reconstruct
    000703  aa  157 156 163 164
    000704  aa  162 165 143 164
    000705  aa  021 162 143 160         rcprm_journalize_
    000706  aa  162 155 137 152
    000707  aa  157 165 162 156
    000710  aa  141 154 151 172
    000711  aa  145 137 000 000
    000712  aa  014 141 143 143         account_init
    000713  aa  157 165 156 164
    000714  aa  137 151 156 151
    000715  aa  164 000 000 000
    000716  aa  004 151 156 151         init
    000717  aa  164 000 000 000
    000720  aa  017 162 143 160         rcp_ring1_init_
    000721  aa  137 162 151 156
    000722  aa  147 061 137 151
    000723  aa  156 151 164 137
    000724  aa  023 162 143 160         rcprm_registry_mgr_
    000725  aa  162 155 137 162
    000726  aa  145 147 151 163
    000727  aa  164 162 171 137
    000730  aa  155 147 162 137
    000731  aa  004 144 141 164         data
    000732  aa  141 000 000 000
    000733  aa  011 162 143 160         rcp_copy_
    000734  aa  137 143 157 160
    000735  aa  171 137 000 000
    000736  aa  005 143 154 145         clear
    000737  aa  141 162 000 000
    000740  aa  024 162 143 160         rcprm_find_resource_
    000741  aa  162 155 137 146
    000742  aa  151 156 144 137
    000743  aa  162 145 163 157
    000744  aa  165 162 143 145
    000745  aa  137 000 000 000
    000746  aa  005 143 150 145         check
    000747  aa  143 153 000 000
    000750  aa  020 162 143 160         rcp_mount_timer_
    000751  aa  137 155 157 165
    000752  aa  156 164 137 164
    000753  aa  151 155 145 162
    000754  aa  137 000 000 000
    000755  aa  030 162 143 160         rcp_authenticate_device_
    000756  aa  137 141 165 164
    000757  aa  150 145 156 164
    000760  aa  151 143 141 164
    000761  aa  145 137 144 145
    000762  aa  166 151 143 145
    000763  aa  137 000 000 000
    000764  aa  020 162 143 160         rcp_reconfigure_
    000765  aa  137 162 145 143
    000766  aa  157 156 146 151
    000767  aa  147 165 162 145
    000770  aa  137 000 000 000
    000771  aa  007 163 151 147         signal_
    000772  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000773  aa   000004 000000 
    000774  55   000354 000014 
    000775  aa   000004 000000 
    000776  55   000276 000276 
    000777  aa   000004 000000 
    001000  55   000301 000301 
    001001  aa   000004 000000 
    001002  55   000305 000037 
    001003  aa   000004 000000 
    001004  55   000305 000047 
    001005  aa   000004 000000 
    001006  55   000354 000056 
    001007  aa   000004 000000 
    001010  55   000312 000312 
    001011  aa   000004 000000 
    001012  55   000321 000316 
    001013  aa   000004 000000 
    001014  55   000321 000325 
    001015  aa   000004 000000 
    001016  55   000326 000325 
    001017  aa   000004 000000 
    001020  55   000335 000332 
    001021  aa   000004 000000 
    001022  55   000400 000342 
    001023  aa   000004 000000 
    001024  55   000400 000346 
    001025  aa   000004 000000 
    001026  55   000350 000350 
    001027  aa   000004 000000 
    001030  55   000414 000155 
    001031  aa   000004 000000 
    001032  55   000354 000164 
    001033  aa   000004 000000 
    001034  55   000363 000361 
    001035  aa   000004 000000 
    001036  55   000370 000366 
    001037  aa   000004 000000 
    001040  55   000400 000376 
    001041  aa   000004 000000 
    001042  55   000405 000405 
    001043  aa   000004 000000 
    001044  55   000414 000230 
    001045  aa   000004 000000 
    001046  55   000421 000421 
    001047  aa   000001 000000 
    001050  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001051  5a   000423 000000 
    001052  5a   000425 000000 
    001053  5a   000427 000000 
    001054  5a   000431 000000 
    001055  5a   000433 000000 
    001056  5a   000435 000000 
    001057  5a   000437 000000 
    001060  5a   000441 000000 
    001061  5a   000443 000000 
    001062  5a   000445 000000 
    001063  5a   000447 000000 
    001064  5a   000451 000000 
    001065  5a   000453 000000 
    001066  5a   000455 000000 
    001067  5a   000457 000000 
    001070  5a   000461 000000 
    001071  5a   000463 000000 
    001072  5a   000465 000000 
    001073  5a   000467 000000 
    001074  5a   000471 000000 
    001075  5a   000473 000000 
    001076  5a   000475 000000 
    001077  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000350 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000064 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000526 0000 00
    000012  9a   777766 0000 46         rcp_reconfigure_|add_device
    000013  5a   000525 0000 00
    000014  9a   777764 0000 46         rcp_authenticate_device_|rcp_authenticate_device_
    000015  5a   000524 0000 00
    000016  9a   777762 0000 46         rcp_mount_timer_|check
    000017  5a   000523 0000 00
    000020  9a   777760 0000 46         rcprm_find_resource_|clear
    000021  5a   000522 0000 00
    000022  9a   777756 0000 46         rcp_copy_|data
    000023  5a   000521 0000 00
    000024  9a   777754 0000 46         rcprm_registry_mgr_|create_registry
    000025  5a   000520 0000 00
    000026  9a   777752 0000 46         rcp_reconfigure_|delete_device
    000027  5a   000517 0000 00
    000030  9a   777750 0000 46         rcp_ring1_init_|rcp_ring1_init_
    000031  5a   000516 0000 00
    000032  9a   777746 0000 46         rcp_mount_timer_|init
    000033  5a   000515 0000 00
    000034  9a   777744 0000 46         rcp_mount_timer_|account_init
    000035  5a   000514 0000 00
    000036  9a   777742 0000 46         rcprm_journalize_|reconstruct
    000037  5a   000513 0000 00
    000040  9a   777740 0000 46         rcp_reserve_|sys
    000041  5a   000512 0000 00
    000042  9a   777736 0000 46         rcp_cancel_id_|sys
    000043  5a   000511 0000 00
    000044  9a   777734 0000 46         rcp_cancel_id_|sys_string
    000045  5a   000510 0000 00
    000046  9a   777732 0000 46         rcp_pre_claim_|rcp_pre_claim_
    000047  5a   000507 0000 00
    000050  9a   777730 0000 46         rcprm_registry_mgr_|remove_registry
    000051  5a   000506 0000 00
    000052  9a   777726 0000 46         rcp_force_unassign_|unassign_device
    000053  5a   000505 0000 00
    000054  9a   777724 0000 46         rcp_force_unassign_|unassign_process
    000055  5a   000504 0000 00
    000056  9a   777722 0000 46         rcp_preload_|rcp_preload_
    000057  5a   000503 0000 00
    000060  9a   777720 0000 46         rcp_unload_|rcp_unload_
    000061  5a   000502 0000 00
    000062  9a   777716 0000 46         rcprm_registry_mgr_|update_registry_header
    000063  5a   000501 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   240473 506651 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000245 
    000020  aa   000000 000117 
    000021  aa   000162 000147 
    000022  aa   000236 000117 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000037 
    000067  aa   175453 030402 
    000070  aa   000000 117547 
    000071  aa   227264 200000 
    000072  aa   000106 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   076163 160145          >spec>install>1115>rcp_sys_.alm
    000077  aa   143076 151156 
    000100  aa   163164 141154 
    000101  aa   154076 061061 
    000102  aa   061065 076162 
    000103  aa   143160 137163 
    000104  aa   171163 137056 
    000105  aa   141154 155040 
    000106  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000107  aa   076151 156143 
    000110  aa   154165 144145 
    000111  aa   076147 141164 
    000112  aa   145137 155141 
    000113  aa   143162 157163 
    000114  aa   056151 156143 
    000115  aa   154056 141154 
    000116  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          26    .actor                   rcp_sys_:      20.
          62    .defs_loop               rcp_sys_:      20.
         123    .gate_errordesc          rcp_sys_:      20.
         120    .gate_errorname          rcp_sys_:      20.
          70    .next_def                rcp_sys_:      20.
         124    .no_gate_error           rcp_sys_:      20.
          45    .return_name             rcp_sys_:      20.
          60    .search_defs             rcp_sys_:      20.
          73    .setup                   rcp_sys_:      20,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
                                                        33,   34,   35,   36,   37,   38,   39,   40,   41,   42.
                account_init             rcp_sys_:      31.
           1    add_device               rcp_sys_:      22.
         126    add_device.e             rcp_sys_:      22.
           2    authenticate_device      rcp_sys_:      23.
         135    authenticate_device.e    rcp_sys_:      23.
          15    cancel_id                rcp_sys_:      34.
         252    cancel_id.e              rcp_sys_:      34.
          16    cancel_id_string         rcp_sys_:      35.
         261    cancel_id_string.e       rcp_sys_:      35.
                check                    rcp_sys_:      24.
           3    check_mount_timer        rcp_sys_:      24.
         144    check_mount_timer.e      rcp_sys_:      24.
                clear                    rcp_sys_:      25.
           4    clear_resource           rcp_sys_:      25.
         153    clear_resource.e         rcp_sys_:      25.
           5    copy_data                rcp_sys_:      26.
         162    copy_data.e              rcp_sys_:      26.
           6    create_registry          rcp_sys_:      27.
         171    create_registry.e        rcp_sys_:      27.
                data                     rcp_sys_:      26.
           7    delete_device            rcp_sys_:      28.
         200    delete_device.e          rcp_sys_:      28.
                init                     rcp_sys_:      30.
          10    initialize               rcp_sys_:      29.
         207    initialize.e             rcp_sys_:      29.
          12    init_account_chan        rcp_sys_:      31.
         225    init_account_chan.e      rcp_sys_:      31.
          11    init_mount_timer         rcp_sys_:      30.
         216    init_mount_timer.e       rcp_sys_:      30.
          26    main                     rcp_sys_:      20,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
                                                        33,   34,   35,   36,   37,   38,   39,   40,   41,   42.
          23    preload                  rcp_sys_:      40.
         324    preload.e                rcp_sys_:      40.
          17    pre_claim                rcp_sys_:      36.
         270    pre_claim.e              rcp_sys_:      36.
                rcprm_find_resource_     rcp_sys_:      25.
                rcprm_journalize_        rcp_sys_:      32.
                rcprm_registry_mgr_      rcp_sys_:      27,   37,   42.
                rcp_authenticate_device_       rcp_sys_:      23.
                rcp_cancel_id_           rcp_sys_:      34,   35.
                rcp_copy_                rcp_sys_:      26.
                rcp_force_unassign_      rcp_sys_:      38,   39.
                rcp_mount_timer_         rcp_sys_:      24,   30,   31.
                rcp_preload_             rcp_sys_:      40.
                rcp_pre_claim_           rcp_sys_:      36.
                rcp_reconfigure_         rcp_sys_:      22,   28.
                rcp_reserve_             rcp_sys_:      33.
                rcp_ring1_init_          rcp_sys_:      29.
                rcp_unload_              rcp_sys_:      41.
                reconstruct              rcp_sys_:      32.
          13    reconstruct_registry     rcp_sys_:      32.
         234    reconstruct_registry.e   rcp_sys_:      32.
          20    remove_registry          rcp_sys_:      37.
         277    remove_registry.e        rcp_sys_:      37.
          14    reserve                  rcp_sys_:      33.
         243    reserve.e                rcp_sys_:      33.
                signal_                  rcp_sys_:      20.
         112    signal_arglist           rcp_sys_:      20.
                sys                      rcp_sys_:      33,   34.
                sys_string               rcp_sys_:      35.
           0    transfer_vector          rcp_sys_:      20,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
                                                        33,   34,   35,   36,   37,   38,   39,   40,   41,   42.
          26    tv_end                   rcp_sys_:      20.
          21    unassign_device          rcp_sys_:      38.
         306    unassign_device.e        rcp_sys_:      38.
          22    unassign_process         rcp_sys_:      39.
         315    unassign_process.e       rcp_sys_:      39.
          24    unload                   rcp_sys_:      41.
         333    unload.e                 rcp_sys_:      41.
          25    update_registry_header   rcp_sys_:      42.
         342    update_registry_header.e       rcp_sys_:      42.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
