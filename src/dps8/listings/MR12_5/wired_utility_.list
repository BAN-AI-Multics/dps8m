ASSEMBLY LISTING OF SEGMENT >spec>install>1110>wired_utility_.alm                                                                                                                                   
ASSEMBLED ON:	11/11/89  0940.0 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1983 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " 
                                    13  
                                    14  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    15  
                                    16  " 
                                    17  
                                    18  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                    19  
                                    20  " 
                                    21  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    22  "							"
                                    23  "	caller						"
                                    24  "							"
                                    25  "	Primitive to return a pointer to the caller of the	"
                                    26  "	program which called this primitive.			"
                                    27  "							"
                                    28  "	Usage:						"
                                    29  "							"
                                    30  "	caller_ptr = wired_utility$caller ();			"
                                    31  "							"
                                    32  "							"
                                    33  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    34  
                        000000      35  	segdef	caller
                                    36  
    000000  aa  6 00020 3521 20     37  caller:	eppbp	sp|stack_frame.prev_sp,*	get ptr to previous stack frame
    000001  aa  2 00024 3521 20     38  	eppbp	bp|stack_frame.return_ptr,*	get caller
    000002  aa  0 00002 2521 20     39  	spribp	ap|2,*			return the pointer
    000003  aa  7 00044 7101 20     40  	short_return
                                    41  
                                    42  " 
                                    43  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    44  "							"
                                    45  "	stacq						"
                                    46  "							"
                                    47  "	Primitive to perform an stacq function analogous		"
                                    48  "	to the stac builtin function.				"
                                    49  "							"
                                    50  "	Usage:						"
                                    51  "							"
                                    52  "	bit_1 = stacq (word_ptr, old_value, new_value);		"
                                    53  "							"
                                    54  "	word_ptr is a pointer to the word to change		"
                                    55  "	new_value is the new value to place in the word if	"
                                    56  "	old_value is the current contents of the word.		"
                                    57  "							"
                                    58  "	If the current contents of the word pointed to by word_ptr	"
                                    59  "	is not the same as old_value the function returns "0"b,	"
                                    60  "	if they match the function returns "1"b.		"
                                    61  "							"
                                    62  "							"
                                    63  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    64  
                        000004      65  	segdef	stacq
                                    66  
    000004  aa  0 00004 2361 20     67  stacq:	ldq	ap|4,*		fetch the expected old value
    000005  aa  0 00006 2351 20     68  	lda	ap|6,*		fetch the new value to store in the cell
    000006  aa  0 00002 3521 20     69  	eppbp	ap|2,*		get pointer to input pointer
                                    70  
    000007  aa  2 00000 6541 20     71  	stacq	bp|0,*		try to store the new value in the cell
    000010  0a   000013 6000 00     72  	tze	success		if zero indicator set, the store went through (matched old value)
    000011  aa  0 00010 4501 20     73  	stz	ap|8,*		return "0"b
    000012  aa  7 00044 7101 20     74  	short_return
                                    75  
    000013                          76  success:
    000013  aa   400000 2350 03     77  	lda	=o400000,du	return "1"b
    000014  aa  0 00010 7551 20     78  	sta	ap|8,*
    000015  aa  7 00044 7101 20     79  	short_return
                                    80  
                                    81  " 
                                    82  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    83  "							"
                                    84  "	ldac						"
                                    85  "							"
                                    86  "	Primitive to use ldac instruction to load and clear a word	"
                                    87  "	using one memory operation.				"
                                    88  "							"
                                    89  "	Usage:						"
                                    90  "							"
                                    91  "	word = ldac (word_ptr);				"
                                    92  "							"
                                    93  "	word_ptr is a pointer to the word to load and clear	"
                                    94  "	word receives contents of the word pointed to by word_ptr	"
                                    95  "							"
                                    96  "							"
                                    97  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    98  
                        000016      99  	segdef	ldac
                                   100  
    000016  aa  0 00002 3521 20    101  ldac:	eppbp	ap|2,*		get pointer to input pointer
    000017  aa  2 00000 0341 20    102  	ldac	bp|0,*		load and clear the word
    000020  aa  0 00004 7551 20    103  	sta	ap|4,*		return the value of the word
    000021  aa  7 00044 7101 20    104  	short_return
                                   105  
                                   106  " 
                                   107  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   108  "							"
                                   109  "	get_sp						"
                                   110  "							"
                                   111  "	Primitive to return the current value of sp to the caller	"
                                   112  "							"
                                   113  "	Usage:						"
                                   114  "							"
                                   115  "	sp = wired_utility_$get_sp;				"
                                   116  "							"
                                   117  "	sp will receive the value of the stack pointer		"
                                   118  "							"
                                   119  "							"
                                   120  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   121  
                        000022     122  	segdef	get_sp
                                   123  
    000022  aa  0 00002 6521 20    124  get_sp:	sprisp	ap|2,*		return the value of sp to the caller
    000023  aa  7 00044 7101 20    125  	short_return
                                   126  
                                   127  " 
                                   128  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   129  "							"
                                   130  "	grow_stack_frame					"
                                   131  "	shrink_stack_frame					"
                                   132  "							"
                                   133  "	Primitives to increase and decrease the size of the	"
                                   134  "	caller's stack frame.  Use these entries with care!	"
                                   135  "							"
                                   136  "	Usage:						"
                                   137  "							"
                                   138  "	p = wired_utility_$grow_stack_frame (size);		"
                                   139  "	call wired_utility_$shrink_stack_frame (endp);		"
                                   140  "							"
                                   141  "	grow_stack_frame will increase the stack fame by size words	"
                                   142  "	and return a pointer to the previous end of the frame.	"
                                   143  "	shrink stack_frame will shrink the frame back to the	"
                                   144  "	supplied endp.					"
                                   145  "							"
                                   146  "							"
                                   147  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   148  
                        000024     149  	segdef	grow_stack_frame
                        000037     150  	segdef	shrink_stack_frame
                                   151  
    000024                         152  grow_stack_frame:
    000024  aa  7 00024 3521 20    153  	eppbp	sb|stack_header.stack_end_ptr,*	bp -> end of frame
    000025  aa  0 00004 2521 20    154  	spribp	ap|4,*		return end pointer
                                   155  
    000026  aa  0 00002 2351 20    156  	lda	ap|2,*		get size to grow frame
    000027  aa  2 00000 6351 05    157  	eaa	bp|0,al		AU is new end pointer
    000030                         158  adjust_stack_frame:
    000030  aa   000017 6350 01    159  	eaa	15,au		round to 0 mod 16
    000031  aa   777760 3750 03    160  	ana	=o777760,du	..
    000032  aa   000000 3120 01    161  	eawpbp	0,au		bp -> new end of frame
    000033  aa  7 00024 2521 00    162  	spribp	sb|stack_header.stack_end_ptr	set new end of frame
    000034  aa  6 00022 2521 00    163  	spribp	sp|stack_frame.next_sp
    000035  aa  6 00004 2521 00    164  	spribp	sp|4		set for PL/1
    000036  aa  7 00044 7101 20    165  	short_return
                                   166  
    000037                         167  shrink_stack_frame:
    000037  aa  7 00024 3521 20    168  	eppbp	sb|stack_header.stack_end_ptr,*	bp -> end of frame
    000040  aa  0 00002 3535 20    169  	eppbb	ap|2,*		bb -> new end point
    000041  aa  3 00000 6351 20    170  	eaa	bb|0,*		stack end offset in AU
    000042  0a   000030 7100 00    171  	tra	adjust_stack_frame	use common code
                                   172  
                                   173  
                                   174  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   175  "
                                   176  "
                                   177  "	get_ring_ - this entry returns the number of the current ring
                                   178  "
                                   179  "	declare get_ring_ entry(fixed bin(3));
                                   180  "	call get_ring_(ring);
                                   181  "
                                   182  "	1. ring	the number of the current ring. (Output)
                                   183  "
                                   184  "
                                   185  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   186  
                        000043     187  	segdef	get_ring_
    000043                         188  get_ring_:
    000043  0a   000043 2130 00    189  	epaq	*		get ring number from effective pointer
    000044  aa   000007 3750 07    190  	ana	=o7,dl		leave only ring number in a-reg
    000045  aa  0 00002 7551 20    191  	sta	ap|2,*		return to caller
    000046  aa  7 00044 7101 20    192  	short_return
                                   193  
                                   194  
                                   195  
                                   196  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   197  "
                                   198  "
                                   199  "	arg_count_ - this entry returns the number of arguments with which the
                                   200  "		calling procedure was invoked.
                                   201  "
                                   202  "	declare arg_count_ entry(fixed bin);
                                   203  "	call arg_count_(args);
                                   204  "
                                   205  "	1. args	the number of arguments. (Output)
                                   206  "
                                   207  "
                                   208  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   209  
                        000047     210  	segdef	arg_count_
    000047                         211  arg_count_:
    000047  aa  6 00032 2351 20    212  	lda	sp|stack_frame.arg_ptr,* get argument list header
    000050  aa   000023 7710 00    213  	arl	18+1		shift right and divide by two
    000051  aa  0 00002 7551 20    214  	sta	ap|2,*		store in argument
    000052  aa  7 00044 7101 20    215  	short_return
                                   216  
                                   217  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   218  "
                                   219  "         arg_list_ptr_
                                   220  "
                                   221  "         declare arg_list_ptr entry returns (pointer);
                                   222  "         alp = arg_list_ptr_ ();
                                   223  "
                                   224  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   225  
                        000053     226  	segdef	arg_list_ptr_
    000053                         227  arg_list_ptr_:
    000053  aa  6 00032 3515 20    228  	epp1	sp|stack_frame.arg_ptr,* Pointer to arglist header
    000054  aa  0 00002 2515 20    229  	spri1	ap|2,*
    000055  aa  7 00044 7101 20    230  	short_return
                                   231  
                                   232  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000056  5a   000003 000000 
    000057  5a   000110 600000 
    000060  aa   000000 000000 
    000061  55   000012 000002 
    000062  5a   000002 400003 
    000063  55   000006 000012 
    000064  aa  016 167 151 162
    000065  aa  145 144 137 165
    000066  aa  164 151 154 151
    000067  aa  164 171 137 000
    000070  55   000021 000003 
    000071  0a   000053 400000 
    000072  55   000015 000003 
    000073  aa  015 141 162 147         arg_list_ptr_
    000074  aa  137 154 151 163
    000075  aa  164 137 160 164
    000076  aa  162 137 000 000
    000077  55   000027 000012 
    000100  0a   000047 400000 
    000101  55   000024 000003 
    000102  aa  012 141 162 147         arg_count_
    000103  aa  137 143 157 165
    000104  aa  156 164 137 000
    000105  55   000035 000021 
    000106  0a   000043 400000 
    000107  55   000032 000003 
    000110  aa  011 147 145 164         get_ring_
    000111  aa  137 162 151 156
    000112  aa  147 137 000 000
    000113  55   000045 000027 
    000114  0a   000037 400000 
    000115  55   000040 000003 
    000116  aa  022 163 150 162         shrink_stack_frame
    000117  aa  151 156 153 137
    000120  aa  163 164 141 143
    000121  aa  153 137 146 162
    000122  aa  141 155 145 000
    000123  55   000055 000035 
    000124  0a   000024 400000 
    000125  55   000050 000003 
    000126  aa  020 147 162 157         grow_stack_frame
    000127  aa  167 137 163 164
    000130  aa  141 143 153 137
    000131  aa  146 162 141 155
    000132  aa  145 000 000 000
    000133  55   000062 000045 
    000134  0a   000022 400000 
    000135  55   000060 000003 
    000136  aa  006 147 145 164         get_sp
    000137  aa  137 163 160 000
    000140  55   000067 000055 
    000141  0a   000016 400000 
    000142  55   000065 000003 
    000143  aa  004 154 144 141         ldac
    000144  aa  143 000 000 000
    000145  55   000074 000062 
    000146  0a   000004 400000 
    000147  55   000072 000003 
    000150  aa  005 163 164 141         stacq
    000151  aa  143 161 000 000
    000152  55   000101 000067 
    000153  0a   000000 400000 
    000154  55   000077 000003 
    000155  aa  006 143 141 154         caller
    000156  aa  154 145 162 000
    000157  55   000002 000074 
    000160  6a   000000 400002 
    000161  55   000104 000003 
    000162  aa  014 163 171 155         symbol_table
    000163  aa  142 157 154 137
    000164  aa  164 141 142 154
    000165  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000166  aa   000000 000015 
    000167  5a   000035 000000 
    000170  5a   000062 000000 
    000171  aa   000000 000000 
    000172  aa   000000 000000 
    000173  5a   000012 000000 
    000174  5a   000027 000000 
    000175  5a   000021 000000 
    000176  5a   000045 000000 
    000177  5a   000055 000000 
    000200  5a   000067 000000 
    000201  5a   000074 000000 
    000202  5a   000101 000000 
    000203  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000204  aa   000001 000000 
    000205  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000056 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   251201 033243 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000175 
    000020  aa   000000 000136 
    000021  aa   000146 000143 
    000022  aa   000165 000136 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000045 
    000067  aa   175453 020044 
    000070  aa   000000 117547 
    000071  aa   176457 600000 
    000072  aa   000114 000042 
    000073  aa   147777 464111 
    000074  aa   000000 115000 
    000075  aa   507463 000000 
    000076  aa   000125 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   076163 160145          >spec>install>1110>wired_utility_.alm
    000103  aa   143076 151156 
    000104  aa   163164 141154 
    000105  aa   154076 061061 
    000106  aa   061060 076167 
    000107  aa   151162 145144 
    000110  aa   137165 164151 
    000111  aa   154151 164171 
    000112  aa   137056 141154 
    000113  aa   155040 040040 
    000114  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000115  aa   076151 156143 
    000116  aa   154165 144145 
    000117  aa   076163 164141 
    000120  aa   143153 137150 
    000121  aa   145141 144145 
    000122  aa   162056 151156 
    000123  aa   143154 056141 
    000124  aa   154155 040040 
    000125  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000126  aa   076151 156143 
    000127  aa   154165 144145 
    000130  aa   076163 164141 
    000131  aa   143153 137146 
    000132  aa   162141 155145 
    000133  aa   056151 156143 
    000134  aa   154056 141154 
    000135  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          30    adjust_stack_frame       wired_utility_:     158,  171.
          47    arg_count_               wired_utility_:     210,  211.
          53    arg_list_ptr_            wired_utility_:     226,  227.
           0    caller                   wired_utility_:      35,   37.
        1170    call_offset              stack_header:        80.
        1174    entry_offset             stack_header:        84.
          43    get_ring_                wired_utility_:     187,  188.
          22    get_sp                   wired_utility_:     122,  124.
          24    grow_stack_frame         wired_utility_:     149,  152.
          16    ldac                     wired_utility_:      99,  101.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          37    shrink_stack_frame       wired_utility_:     150,  167.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      wired_utility_:     212,  228,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      wired_utility_:     163,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      wired_utility_:      37,
                                         stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   wired_utility_:      38,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     wired_utility_:     153,  162,  168,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           4    stacq                    wired_utility_:      65,   67.
          13    success                  wired_utility_:      72,   76.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
