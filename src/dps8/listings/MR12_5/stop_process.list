	COMPILATION LISTING OF SEGMENT stop_process
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1001.9 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 stop_process: proc (a_process_id);
       14 
       15 /* Procedure used by a process to put itself into "stopped" state.
       16*   Called by process-overseer on new_proc and logout.
       17*
       18*   Changed to crash system if caller is initializer - E Stone Aug 1974
       19*   Converted to PL/I, C Garman, 3 Feb 1971.
       20*
       21*   */
       22 
       23 dcl a_process_id bit (36) aligned;
       24 dcl  process_id bit (36) aligned,
       25      istate fixed bin;
       26 
       27 dcl  pds$process_id bit (36) aligned ext,
       28      tc_data$initializer_id bit (36) aligned ext;
       29 
       30 dcl syserr entry options (variable);
       31 
       32 dcl  pxss$stop entry (bit (36) aligned, fixed bin);
       33 
       34 	process_id = a_process_id;			/* Copy input */
       35 
       36 	if process_id = pds$process_id then do;		/* See if proper process */
       37 
       38 	     if process_id = tc_data$initializer_id then	/* Might as well end it all */
       39 		call syserr (1, "stop_process: attempt to stop initializer process");
       40 
       41 	     call pxss$stop (process_id, istate);
       42 
       43 	end;					/* That's all folks! */
       44 
       45 /* BEGIN MESSAGE DOCUMENTATION
       46*
       47*Message:
       48*stop_process: attempt to stop initializer process
       49*
       50*S:	$crash
       51*
       52*T:	$run
       53*
       54*M:	$err
       55*
       56*A:	$recover
       57*
       58*
       59*END MESSAGE DOCUMENTATION */
       60 
       61      end stop_process;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0805.3  stop_process.pl1                  >spec>install>1111>stop_process.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_process_id                           parameter       bit(36)                  dcl 23 ref 13 34
istate                          000101 automatic       fixed bin(17,0)          dcl 24 set ref 41*
pds$process_id                  000010 external static bit(36)                  dcl 27 ref 36
process_id                      000100 automatic       bit(36)                  dcl 24 set ref 34* 36 38 41*
pxss$stop                       000016 constant        entry                    external dcl 32 ref 41
syserr                          000014 constant        entry                    external dcl 30 ref 38
tc_data$initializer_id          000012 external static bit(36)                  dcl 27 ref 38

NAME DECLARED BY EXPLICIT CONTEXT.
stop_process                    000023 constant        entry                    external dcl 13

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       154         174      72         164
Length       340      72        20         130      61           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
stop_process                         92 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
stop_process             000100 process_id                  stop_process
                         000101 istate                      stop_process

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
pxss$stop                     syserr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pds$process_id                tc_data$initializer_id




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000020        34 000030        36 000033        38 000035        41 000060        61 000071


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
