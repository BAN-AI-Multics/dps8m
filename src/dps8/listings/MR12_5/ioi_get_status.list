	COMPILATION LISTING OF SEGMENT ioi_get_status
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1109.20_Tue_mdt
	    Options: optimize list

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 /* Written July 1983 by Chris Jones (from ioi_get_special_status). */
        9 
       10 /* Program to return either the special status or the detailed status from a given device.  A flag is set
       11*   indicating whether there was any such status to return. */
       12 /* Modified March 1985 by Keith Loepere to properly copy arguments. */
       13 
       14 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
       15 ioi_get_status:
       16      proc;
       17 
       18 dcl	p_dtx		   fixed bin parameter;	/* (I) device table index */
       19 dcl	p_valid		   bit (1) aligned parameter; /* (O) returned status is valid */
       20 dcl	p_special_status	   bit (36) aligned parameter;/* (O) special status */
       21 dcl	p_detailed_status	   bit (216) parameter;	/* (O) detailed status */
       22 dcl	p_code		   fixed bin (35) parameter;	/* (O) status code */
       23 
       24 dcl	code		   fixed bin (35);
       25 dcl	detailed_status	   bit (216);
       26 dcl	dtx		   fixed bin;
       27 dcl	special_status	   bit (36) aligned;
       28 dcl	valid		   bit (1) aligned;
       29 
       30 dcl	ioi_device$get_dtep	   entry (fixed bin, ptr, fixed bin (35));
       31 dcl	ioi_device$unlock	   entry (ptr);
       32 
       33 dcl	unspec		   builtin;
       34 
       35 special_status:
       36      entry (p_dtx, p_valid, p_special_status, p_code);
       37 
       38 	call setup;
       39 	if dte.special_interrupt then do;		/* If special interrupt has occurred ... */
       40 	     dte.special_interrupt = "0"b;		/* Clear the flag in table entry. */
       41 	     valid = "1"b;				/* Tell caller special occurred. */
       42 	     special_status = dte.special_status;	/* Give him back the special status. */
       43 	end;
       44 
       45 	else do;					/* No special occurred. */
       46 	     valid = "0"b;
       47 	     special_status = "0"b;
       48 	end;
       49 	call ioi_device$unlock (dtep);
       50 
       51 	p_valid = valid;
       52 	p_special_status = special_status;
       53 	return;
       54 
       55 /* return detailed status */
       56 
       57 detailed_status:
       58      entry (p_dtx, p_valid, p_detailed_status, p_code);
       59 
       60 	call setup;
       61 	if dte.detailed_status_valid then do;
       62 	     detailed_status = unspec (dte.detailed_status);
       63 	     valid = "1"b;
       64 	end;
       65 	else do;
       66 	     detailed_status = "0"b;
       67 	     valid = "0"b;
       68 	end;
       69 	call ioi_device$unlock (dtep);
       70 
       71 	p_valid = valid;
       72 	p_detailed_status = detailed_status;
       73 	return;
       74 
       75 setup:
       76      proc;
       77 
       78 	p_code, code = 0;
       79 	dtx = p_dtx;
       80 	call ioi_device$get_dtep (dtx, dtep, code);
       81 	if code ^= 0 then
       82 	     goto QUIT;
       83 
       84      end setup;
       85 
       86 QUIT:
       87 	p_valid = "0"b;
       88 	p_code = code;
       89 	return;
       90 
  1     1 /* Begin include file ...... ioi_data.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
  1     6*     audit(85-12-09,CLJones), install(86-03-21,MR12.0-1033):
  1     7*     Support for FIPS and
  1     8*     IMU.
  1     9*  2) change(86-05-16,Kissel), approve(86-07-30,MCR7461), audit(86-07-31,Coren),
  1    10*     install(86-08-19,MR12.0-1120):
  1    11*     Changed the value of IOI_DEFAULT_MAX_BOUND from 4096 to 1024.  This
  1    12*     corrects a problem when RCP tries to set the maximum workspace size if it
  1    13*     is less than 4096.  Since ioi_ (actually grab_aste) touched all the pages
  1    14*     at assignment time, the current length is 4, and trying to set the max
  1    15*     length to less than 4 (e.g. because the max unprivileged workspace size in
  1    16*     RCP for a special device is 1) returns an error.
  1    17*                                                   END HISTORY COMMENTS */
  1    18 
  1    19 /* Rewritten May 1982 by C. Hornig for new ioi_ */
  1    20 /* Rewrite finished March 1983 by Chris Jones */
  1    21 /* Extended for reconfiguration April 1983 by Chris Jones. */
  1    22 /* Modified November 1983 by Chris Jones to separate items in the dte protected by different locks. */
  1    23 /* Modified January 1984 by Chris Jones to add ite's. */
  1    24 /* Modified Feb 1984 by Rich Fawcett to add ipc and fips */
  1    25 /* Modified Sept 1985 by Paul Farley to add controller flag to dte. */
  1    26 
  1    27 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  1    28 
  1    29 dcl	idp		   ptr;			/* pointer to IOI data structure */
  1    30 dcl	gtep		   ptr;			/* pointer to channel/device group entry */
  1    31 dcl	ctep		   ptr;			/* pointer to channel table entry */
  1    32 dcl	dtep		   ptr;			/* pointer to wired device table entry */
  1    33 dcl	itep		   ptr;			/* pointer to I/O multiplexer entry */
  1    34 
  1    35 dcl	(ioi_subsystems, ioi_devices, ioi_channels, ioi_multiplexers)
  1    36 			   fixed bin;
  1    37 dcl	ioi_data$		   external;		/* IOI data segment */
  1    38 
  1    39 
  1    40 dcl	1 ioi_data	   based (idp) aligned,	/* I/O Interfacer data structure */
  1    41 	  2 ngt		   fixed bin,		/* number of groups */
  1    42 	  2 nct		   fixed bin,		/* number of channels */
  1    43 	  2 ndt		   fixed bin,		/* number of devices */
  1    44 	  2 nit		   fixed bin,		/* number of IOMs */
  1    45 	  2 spurious_interrupts
  1    46 			   fixed bin (35),		/* interrupts with no status */
  1    47 	  2 reconfig_lock	   like lock,		/* lock for reconfiguring devices, channels, etc. */
  1    48 	  2 flags,
  1    49 	    3 setup	   bit (1) unal,		/* "1"b => ioi_init has run */
  1    50 	    3 pad1	   bit (35) unal,
  1    51 	  2 rss_idcw	   bit (36),		/* reset status IDCW */
  1    52 	  2 pad2		   (6) fixed bin (35),	/* pad to 16 words */
  1    53 	  2 dt		   (ioi_devices refer (ioi_data.ndt)) like dte aligned,
  1    54 						/* device table */
  1    55 	  2 gt		   (ioi_subsystems refer (ioi_data.ngt)) like gte aligned,
  1    56 						/* channel/device group table */
  1    57 	  2 ct		   (ioi_channels refer (ioi_data.nct)) like cte aligned,
  1    58 						/* channel table */
  1    59 	  2 it		   (ioi_multiplexers refer (ioi_data.nit)) like ite aligned;
  1    60 						/* multiplexer table */
  2     1 /* Begin include file hc_lock.incl.pl1 BIM 2/82 */
  2     2 /* Replaced by hc_fast_lock.incl.pl1 RSC 11/84 because name of structure
  2     3*   encourages name conflicts.
  2     4*   USE HC_FAST_LOCK INSTEAD!
  2     5**/
  2     6 
  2     7 /* Lock format suitable for use with lock$lock_fast, unlock_fast */
  2     8 
  2     9 /* format: style3 */
  2    10 
  2    11 declare	lock_ptr		pointer;
  2    12 declare	1 lock		aligned based (lock_ptr),
  2    13 	  2 pid		bit (36) aligned,		/* holder of lock */
  2    14 	  2 event		bit (36) aligned,		/* event associated with lock */
  2    15 	  2 flags		aligned,
  2    16 	    3 notify_sw	bit (1) unaligned,
  2    17 	    3 pad		bit (35) unaligned;		/* certain locks use this pad, like dirs */
  2    18 
  2    19 /* End include file hc_lock.incl.pl1 */
  1    61 
  1    62 
  1    63 dcl	1 ite		   based (itep) aligned,	/* I/O multiplexer table entry */
  1    64 	  2 model		   char (4),		/* which flavor we are */
  1    65 	  2 flags,
  1    66 	  ( 3 deleting	   bit (1),
  1    67 	    3 deleted	   bit (1)
  1    68 	    )		   unaligned,
  1    69 	  2 pad1		   bit (16) unaligned,
  1    70 	  2 iom_table_idx	   fixed bin (17) unaligned,
  1    71 	  2 tag		   fixed bin (3),
  1    72 	  2 pad2		   (5) bit (36);
  1    73 
  1    74 dcl	1 gte		   based (gtep) aligned,	/* channel/device group table entry */
  1    75 	  2 lock		   bit (36),		/* (0) loop lock */
  1    76 	  2 name		   char (4),		/* (1) subsystem name */
  1    77 	  2 dtep		   bit (18) unaligned,	/* (2) rel ptr to device just serviced */
  1    78 	  2 ctep		   bit (18) unaligned,	/* (2) rel ptr to thread of channel table entries */
  1    79 	  2 detailed_status_cmd
  1    80 			   bit (6) unal,		/* (3) idcw command to read detailed status */
  1    81 	  2 flags		   unaligned,		/* (3) */
  1    82 	    3 psia	   bit (1),		/* "1"b if channel is PSIA */
  1    83 	    3 suspend_devices  bit (1),		/* "1"b if device I/O suspended */
  1    84 	    3 dual_controller  bit (1),		/* "1"b if dual controller subsystem (disk only) */
  1    85 	    3 ascii_dtst	   bit (1),		/* "1"b if detailed status sent in ASCII mode */
  1    86 	    3 mplex	   bit (1),		/* "1"b if channels are multiplexed among devices */
  1    87 	    3 ipc		   bit (1),		/* "1"b if devices are on an IMU */
  1    88 	    3 fips	   bit (1),		/* "1"b if devices start at zero */
  1    89 	    3 pad		   bit (23),
  1    90 	  2 n_devices	   fixed bin,		/* (4) number of devices in device table thread */
  1    91 	  2 pending_connects   fixed bin,		/* (5) count of pending connect requests */
  1    92 	  2 io_log_info_index  fixed bin,		/* (6) index into io_log_status_info table */
  1    93 	  2 disk_data_subsystem_idx
  1    94 			   fixed bin;		/* (7) index into disk_data.array for disks */
  1    95 
  1    96 dcl	1 cte		   based (ctep) aligned,	/* channel table entry */
  1    97 	  2 next_ctep	   bit (18) unaligned,	/* (0) rel ptr to next channel table entry */
  1    98 	  2 gtep		   bit (18) unaligned,	/* (0) rel ptr to channel/device group table entry */
  1    99 	  2 flags1	   unaligned,		/* (1) */
  1   100 	    3 ioi_use	   bit (1),		/* "1"b if channel currently being used */
  1   101 	    3 connected	   bit (1),		/* "1"b if channel is connected */
  1   102 	    3 toss_status	   bit (1),		/* "1"b if status is to be ignored */
  1   103 	    3 quiescing	   bit (1),		/* "1"b if the channel is just finishing what it's doing */
  1   104 	    3 direct	   bit (1),		/* "1"b if this is a direct channel */
  1   105 	    3 pad1	   bit (4),
  1   106 	  2 disktab_ctx	   fixed bin (9) uns unal,	/* (1) index into disktab.chantab for this channel */
  1   107 	  2 cur_dtep	   bit (18) unaligned,	/* (1) current device table entry */
  1   108 	  2 chanid	   char (8),		/* (2) io_manager's name for channel */
  1   109 	  2 statusp	   ptr unal,		/* (4) pointer to first word of status */
  1   110 	  2 chx		   fixed bin (35),		/* (5) channel index for io_manager */
  1   111 	  2 time_limit	   fixed bin (71),		/* (6) connect time limit */
  1   112 	  2 saved_status	   unaligned,		/* (8) status repository while reading detailed status */
  1   113 	    3 word1	   bit (36),
  1   114 	    3 word2	   bit (36),
  1   115 	    3 word4	   bit (36),
  1   116 	    3 next_lpw_offset  bit (18),
  1   117 	    3 command	   bit (6),
  1   118 	  2 pad3		   bit (12) unaligned,	/* (11) */
  1   119 	  2 base_ctep	   bit (18) unaligned,	/* (12) rel ptr to base logical chan. of physical chan. */
  1   120 	  2 itep		   bit (18) unaligned,	/* (12) rel ptr to itep */
  1   121 	  2 flags2	   unaligned,		/* (13) */
  1   122 	    3 deleting	   bit (1),		/* "1"b if attempting to delete this channel */
  1   123 	    3 deleted	   bit (1),		/* "1"b if channel deleted */
  1   124 	  2 pad4		   bit (16) unaligned,	/* (13) */
  1   125 	  2 channel_table_idx  fixed bin (17) unaligned,
  1   126 	  2 pad5		   (2) bit (36);		/* (14) pad to 8 word boundary */
  1   127 
  1   128 dcl	1 dte		   based (dtep) aligned,	/* wired device table entry */
  1   129 	  2 next_dtep	   bit (18) unaligned,	/* (0) rel ptr to next entry in thread */
  1   130 	  2 gtep		   bit (18) unaligned,	/* (0) rel ptr to channel/device group table entry */
  1   131 	  2 cur_ctep	   bit (18) unaligned,	/* (1) rel ptr to channel in use */
  1   132 	  2 flags1	   unaligned,		/* (1) flags protected by gte lock */
  1   133 	    3 connected	   bit (1),		/* "1"b if device has a channel */
  1   134 	    3 log_status_cnt   bit (1),		/* "1"b if count in log_status is valid */
  1   135 	    3 reading_detailed_status
  1   136 			   bit (1),		/* "1"b if read of detailed device status in progress */
  1   137 	    3 pad1	   bit (15),
  1   138 	  2 channel_required   char (8),		/* (2) channel name of required channel */
  1   139 	  2 ev_chn	   fixed bin (71),		/* (4) event ID for status wakeups */
  1   140 	  2 workspace_ptr	   ptr,			/* (6) workspace pointer */
  1   141 	  2 workspace_astep	   ptr,			/* (8) workspace ASTE ptr */
  1   142 	  2 workspace_sdw	   fixed bin (71),		/* (10) SDW of workspace segment */
  1   143 	  2 ptp		   ptr,			/* (12) device page table */
  1   144 	  2 max_bound	   fixed bin (19),		/* (14) largest allowable bound of workspace segment */
  1   145 	  2 bound		   fixed bin (19),		/* (15) bound of workspace */
  1   146 	  2 process_id	   bit (36),		/* (16) ID of process owning device */
  1   147 	  2 ring		   fixed bin (3),		/* (17) highest ring allowed to access device */
  1   148 	  2 device	   bit (6) unal,		/* (18) device code */
  1   149 	  2 flags2	   unal,			/* (18) constant or protected by dte lock */
  1   150 	    3 priv	   bit (1),		/* "1"b if privileged user */
  1   151 	    3 in_use	   bit (1),		/* "1"b if device is to be used */
  1   152 	    3 deleting	   bit (1),		/* "1"b if trying to delete this device */
  1   153 	    3 deleted	   bit (1),		/* "1"b if this device is deleted */
  1   154 	    3 suspended	   bit (1),		/* "1"b if device isn't to be used temporarily */
  1   155 	    3 workspace_wired  bit (1),		/* "1"b if workspace is wired */
  1   156               3 direct           bit (1),                   /* "1"b if device is connected to a direct channel */
  1   157 	    3 controller	   bit (1),		/* "1"b if dte for the devices controller */
  1   158 	    3 pad2	   bit (4),
  1   159 	  2 device_table_idx   fixed bin (17) unaligned,
  1   160 	  2 listx		   uns fixed bin (18) unal,	/* (19) DCW list index for connect */
  1   161 	  2 idcw_listx	   uns fixed bin (18) unal,	/* (19) DCW list index of IDCW */
  1   162 	  2 timeout	   fixed bin (35),		/* (20) time limit for I/O completion (usec) */
  1   163 	  2 max_timeout	   fixed bin (35),		/* (21) maximum allowable timeout grace time (usec) */
  1   164 	  2 unwire_time	   fixed bin (71),		/* (22) when to unwire the workspace */
  1   165 	  2 pcw		   bit (36),		/* (24) peripheral control word (PCW) */
  1   166 	  2 status_control,				/* (25) */
  1   167 	    3 status_offset	   fixed bin (18) unsigned unaligned,
  1   168 						/* offset of status queue in user workspace */
  1   169 	    3 status_entries   fixed bin (9) unsigned unaligned,
  1   170 						/* number of entries in status queue */
  1   171 	    3 status_entry_idx fixed bin (9) unsigned unaligned,
  1   172 						/* next entry to be used */
  1   173 	  2 idcw		   bit (36),		/* (26) instruction DCW (KEEP ON EVEN WORD BOUNDARY) */
  1   174 	  2 tdcw		   bit (36),		/* (27) transfer DCW to remainder of list */
  1   175 	  2 special_status	   bit (36),		/* (28) special interrupt status */
  1   176 	  2 lock		   like lock,		/* (29) wait lock */
  1   177 	  2 log_status,				/* (32) */
  1   178 	  ( 3 level	   fixed bin (3) unsigned,
  1   179 	    3 time_out	   bit (1),
  1   180 	    3 type	   bit (2),
  1   181 	    3 command	   bit (6),
  1   182 	    3 count	   fixed bin (6) unsigned,
  1   183 	    3 channel	   bit (18),
  1   184 	    3 status	   bit (36)
  1   185 	    )		   unaligned,
  1   186 	  2 ptx		   fixed bin,		/* (34) index of page table */
  1   187 	  2 active	   bit (1),		/* (35) "1"b if device running or to run */
  1   188 	  2 special_interrupt  bit (1),		/* (36) "1"b if special interrupt received */
  1   189 	  2 detailed_status_valid
  1   190 			   bit (1),		/* (37) "1"b if detailed status read sucessfully */
  1   191 	  2 last_log_time	   fixed bin (71),		/* (38) when status was last logged */
  1   192 	  2 detailed_status	   (8) bit (36),		/* (40) (buffer for reading most recent detailed status */
  1   193 	  2 log_detailed_status
  1   194 			   (8) bit (36);		/* (48) copy of last detailed status logged */
  1   195 
  1   196 /**** Defaults for various I/O parameters */
  1   197 
  1   198 dcl	IOI_DEFAULT_MAX_BOUND  fixed bin (19) static options (constant) init (1024);
  1   199 dcl	IOI_DEFAULT_MAX_TIMEOUT
  1   200 			   fixed bin (35) static options (constant) init (30000000);
  1   201 dcl	IOI_DEFAULT_TIMEOUT	   fixed bin (35) static options (constant) init (30000000);
  1   202 
  1   203 dcl	IO_STATUS_ERROR_MASK   bit (36) static options (constant) init ("370000770000"b3);
  1   204 
  1   205 dcl	IO_CHANNEL_LOCK_TEMPLATE
  1   206 			   char (2) int static options (constant) init ("ch");
  1   207 dcl	IOI_DEVICE_LOCK_EVENT_TEMPLATE
  1   208 			   char (2) static options (constant) init ("dv");
  1   209 
  1   210 /* End of include file ...... ioi_data.incl.pl1 */
       91 
       92 
       93      end ioi_get_status;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1109.2  ioi_get_status.pl1                >udd>sm>ds>w>ml>ioi_get_status.pl1
91           1    09/02/86  1652.9  ioi_data.incl.pl1                 >ldd>incl>ioi_data.incl.pl1
1-61         2    01/06/85  1522.1  hc_lock.incl.pl1                  >ldd>incl>hc_lock.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
code                            000100 automatic       fixed bin(35,0)          dcl 24 set ref 78* 80* 81 88
cte                                    based           structure                level 1 dcl 1-96
detailed_status                 000101 automatic       bit(216)                 packed unaligned dcl 25 in procedure
                                                                                  "ioi_get_status" set ref 62* 66* 72
detailed_status          50            based           bit(36)                  array level 2 in structure "dte" dcl 1-128
                                                                                  in procedure "ioi_get_status" ref 62
detailed_status_valid
                         45            based           bit(1)                   level 2 dcl 1-128 ref 61
dte                                    based           structure                level 1 dcl 1-128
dtep                            000112 automatic       pointer                  dcl 1-32 set ref 39 40 42 49* 61 62 69* 80*
dtx                             000107 automatic       fixed bin(17,0)          dcl 26 set ref 79* 80*
gte                                    based           structure                level 1 dcl 1-74
ioi_device$get_dtep             000010 constant        entry                    external dcl 30 ref 80
ioi_device$unlock               000012 constant        entry                    external dcl 31 ref 49 69
ite                                    based           structure                level 1 dcl 1-63
lock                                   based           structure                level 1 dcl 2-12
p_code                                 parameter       fixed bin(35,0)          dcl 22 set ref 35 57 78* 88*
p_detailed_status                      parameter       bit(216)                 packed unaligned dcl 21 set ref 57 72*
p_dtx                                  parameter       fixed bin(17,0)          dcl 18 ref 35 57 79
p_special_status                       parameter       bit(36)                  dcl 20 set ref 35 52*
p_valid                                parameter       bit(1)                   dcl 19 set ref 35 51* 57 71* 86*
special_interrupt        44            based           bit(1)                   level 2 dcl 1-128 set ref 39 40*
special_status           34            based           bit(36)                  level 2 in structure "dte" dcl 1-128 in procedure
                                                                                  "ioi_get_status" ref 42
special_status                  000110 automatic       bit(36)                  dcl 27 in procedure "ioi_get_status" set ref 42* 47*
                                                                                  52
unspec                                                 builtin function         dcl 33 ref 62
valid                           000111 automatic       bit(1)                   dcl 28 set ref 41* 46* 51 63* 67* 71

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
IOI_DEFAULT_MAX_BOUND                  internal static fixed bin(19,0)          initial dcl 1-198
IOI_DEFAULT_MAX_TIMEOUT                internal static fixed bin(35,0)          initial dcl 1-199
IOI_DEFAULT_TIMEOUT                    internal static fixed bin(35,0)          initial dcl 1-201
IOI_DEVICE_LOCK_EVENT_TEMPLATE         internal static char(2)                  initial packed unaligned dcl 1-207
IO_CHANNEL_LOCK_TEMPLATE               internal static char(2)                  initial packed unaligned dcl 1-205
IO_STATUS_ERROR_MASK                   internal static bit(36)                  initial packed unaligned dcl 1-203
ctep                                   automatic       pointer                  dcl 1-31
gtep                                   automatic       pointer                  dcl 1-30
idp                                    automatic       pointer                  dcl 1-29
ioi_channels                           automatic       fixed bin(17,0)          dcl 1-35
ioi_data                               based           structure                level 1 dcl 1-40
ioi_data$                              external static fixed bin(17,0)          dcl 1-37
ioi_devices                            automatic       fixed bin(17,0)          dcl 1-35
ioi_multiplexers                       automatic       fixed bin(17,0)          dcl 1-35
ioi_subsystems                         automatic       fixed bin(17,0)          dcl 1-35
itep                                   automatic       pointer                  dcl 1-33
lock_ptr                               automatic       pointer                  dcl 2-11

NAMES DECLARED BY EXPLICIT CONTEXT.
QUIT                            000126 constant        label                    dcl 86 set ref 81
detailed_status                 000064 constant        entry                    external dcl 57
ioi_get_status                  000006 constant        entry                    external dcl 15
setup                           000133 constant        entry                    internal dcl 75 ref 38 60
special_status                  000021 constant        entry                    external dcl 35

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       240         254     157         250
Length       454     157        14         164      61           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ioi_get_status                       94 external procedure  is an external procedure.  
setup                                   internal procedure  shares stack frame of external procedure ioi_get_status.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ioi_get_status           000100 code                        ioi_get_status
                         000101 detailed_status             ioi_get_status
                         000107 dtx                         ioi_get_status
                         000110 special_status              ioi_get_status
                         000111 valid                       ioi_get_status
                         000112 dtep                        ioi_get_status

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioi_device$get_dtep           ioi_device$unlock

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.


CONSTANTS
000000  aa     404000000043

000001  aa     516000000330

000002  aa     514000000044

000003  aa     514000000001

000004  aa     404000000021

BEGIN PROCEDURE ioi_get_status
ENTRY TO ioi_get_status                                     STATEMENT 1 ON LINE 15
ioi_get_status:
     proc;

000005  da     000037200000
000006  aa   000140 6270 00	eax7 	96
000007  aa  7 00034 3521 20	epp2 	pr7|28,*
000010  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000011  aa     000000000000
000012  aa     000000000000
						STATEMENT 1 ON LINE 35
special_status:
     entry (p_dtx, p_valid, p_special_status, p_code);

000013  aa   000013 7100 04	tra  	11,ic		000026
ENTRY TO special_status                                     STATEMENT 1 ON LINE 35
special_status:
     entry (p_dtx, p_valid, p_special_status, p_code);

000014  at     000004000004
000015  tt     000003000002
000016  ta     000000000000
000017  ta     000014000000
000020  da     000046300000
000021  aa   000140 6270 00	eax7 	96
000022  aa  7 00034 3521 20	epp2 	pr7|28,*
000023  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000024  aa     000010000000
000025  aa     000000000000
						STATEMENT 1 ON LINE 38
	call setup;

000026  aa   000105 6700 04	tsp4 	69,ic		000133
						STATEMENT 1 ON LINE 39
	if dte.special_interrupt then do;

000027  aa  6 00112 3735 20	epp7 	pr6|74,*		dtep
000030  aa  7 00044 2351 00	lda  	pr7|36		dte.special_interrupt
000031  aa   000007 6000 04	tze  	7,ic		000040
						STATEMENT 1 ON LINE 40
	     dte.special_interrupt = "0"b;

000032  aa  7 00044 4501 00	stz  	pr7|36		dte.special_interrupt
						STATEMENT 1 ON LINE 41
	     valid = "1"b;

000033  aa   400000 2350 03	lda  	131072,du
000034  aa  6 00111 7551 00	sta  	pr6|73		valid
						STATEMENT 1 ON LINE 42
	     special_status = dte.special_status;

000035  aa  7 00034 2351 00	lda  	pr7|28		dte.special_status
000036  aa  6 00110 7551 00	sta  	pr6|72		special_status
						STATEMENT 1 ON LINE 43
	end;

000037  aa   000003 7100 04	tra  	3,ic		000042
						STATEMENT 1 ON LINE 45
	else do;

						STATEMENT 1 ON LINE 46
	     valid = "0"b;

000040  aa  6 00111 4501 00	stz  	pr6|73		valid
						STATEMENT 1 ON LINE 47
	     special_status = "0"b;

000041  aa  6 00110 4501 00	stz  	pr6|72		special_status
						STATEMENT 1 ON LINE 48
	end;

						STATEMENT 1 ON LINE 49
	call ioi_device$unlock (dtep);

000042  aa  6 00112 3521 00	epp2 	pr6|74		dtep
000043  aa  6 00124 2521 00	spri2	pr6|84
000044  aa  6 00122 6211 00	eax1 	pr6|82
000045  aa   004000 4310 07	fld  	2048,dl
000046  aa  6 00044 3701 20	epp4 	pr6|36,*
000047  la  4 00012 3521 20	epp2 	pr4|10,*		ioi_device$unlock
000050  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 51
	p_valid = valid;

000051  aa  6 00111 2351 00	lda  	pr6|73		valid
000052  aa  6 00032 3735 20	epp7 	pr6|26,*
000053  aa  7 00004 7551 20	sta  	pr7|4,*		p_valid
						STATEMENT 1 ON LINE 52
	p_special_status = special_status;

000054  aa  6 00110 2351 00	lda  	pr6|72		special_status
000055  aa  7 00006 7551 20	sta  	pr7|6,*		p_special_status
						STATEMENT 1 ON LINE 53
	return;

000056  aa  0 00631 7101 00	tra  	pr0|409		return_mac
ENTRY TO detailed_status                                    STATEMENT 1 ON LINE 57
detailed_status:
     entry (p_dtx, p_valid, p_detailed_status, p_code);

000057  at     000004000004
000060  tt     000003000001
000061  ta     000000000000
000062  ta     000057000000
000063  da     000055300000
000064  aa   000140 6270 00	eax7 	96
000065  aa  7 00034 3521 20	epp2 	pr7|28,*
000066  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000067  aa     000010000000
000070  aa     000000000000
						STATEMENT 1 ON LINE 60
	call setup;

000071  aa   000042 6700 04	tsp4 	34,ic		000133
						STATEMENT 1 ON LINE 61
	if dte.detailed_status_valid then do;

000072  aa  6 00112 3735 20	epp7 	pr6|74,*		dtep
000073  aa  7 00045 2351 00	lda  	pr7|37		dte.detailed_status_valid
000074  aa   000007 6000 04	tze  	7,ic		000103
						STATEMENT 1 ON LINE 62
	     detailed_status = unspec (dte.detailed_status);

000075  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
000076  aa  7 00050 00 0030	desc9a	pr7|40,24
000077  aa  6 00101 00 0030	desc9a	pr6|65,24		detailed_status
						STATEMENT 1 ON LINE 63
	     valid = "1"b;

000100  aa   400000 2350 03	lda  	131072,du
000101  aa  6 00111 7551 00	sta  	pr6|73		valid
						STATEMENT 1 ON LINE 64
	end;

000102  aa   000005 7100 04	tra  	5,ic		000107
						STATEMENT 1 ON LINE 65
	else do;

						STATEMENT 1 ON LINE 66
	     detailed_status = "0"b;

000103  aa  000 100 100 400	mlr  	(),(pr),fill(000)
000104  aa   000000 00 0000	desc9a	0,0
000105  aa  6 00101 00 0030	desc9a	pr6|65,24		detailed_status
						STATEMENT 1 ON LINE 67
	     valid = "0"b;

000106  aa  6 00111 4501 00	stz  	pr6|73		valid
						STATEMENT 1 ON LINE 68
	end;

						STATEMENT 1 ON LINE 69
	call ioi_device$unlock (dtep);

000107  aa  6 00112 3521 00	epp2 	pr6|74		dtep
000110  aa  6 00124 2521 00	spri2	pr6|84
000111  aa  6 00122 6211 00	eax1 	pr6|82
000112  aa   004000 4310 07	fld  	2048,dl
000113  aa  6 00044 3701 20	epp4 	pr6|36,*
000114  la  4 00012 3521 20	epp2 	pr4|10,*		ioi_device$unlock
000115  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 71
	p_valid = valid;

000116  aa  6 00111 2351 00	lda  	pr6|73		valid
000117  aa  6 00032 3735 20	epp7 	pr6|26,*
000120  aa  7 00004 7551 20	sta  	pr7|4,*		p_valid
						STATEMENT 1 ON LINE 72
	p_detailed_status = detailed_status;

000121  aa  7 00006 3715 20	epp5 	pr7|6,*
000122  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
000123  aa  6 00101 00 0330	descb	pr6|65,216	detailed_status
000124  aa  5 00000 00 0330	descb	pr5|0,216		p_detailed_status
						STATEMENT 1 ON LINE 73
	return;

000125  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 86
QUIT:
	p_valid = "0"b;

000126  aa  6 00032 3735 20	epp7 	pr6|26,*
000127  aa  7 00004 4501 20	stz  	pr7|4,*		p_valid
						STATEMENT 1 ON LINE 88
	p_code = code;

000130  aa  6 00100 2361 00	ldq  	pr6|64		code
000131  aa  7 00010 7561 20	stq  	pr7|8,*		p_code
						STATEMENT 1 ON LINE 89
	return;

000132  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 93
     end ioi_get_status;

BEGIN PROCEDURE setup
ENTRY TO setup                                              STATEMENT 1 ON LINE 75
setup:
     proc;

000133  aa  6 00114 6501 00	spri4	pr6|76
						STATEMENT 1 ON LINE 78
	p_code, code = 0;

000134  aa  6 00032 3735 20	epp7 	pr6|26,*
000135  aa  7 00010 4501 20	stz  	pr7|8,*		p_code
000136  aa  6 00100 4501 00	stz  	pr6|64		code
						STATEMENT 1 ON LINE 79
	dtx = p_dtx;

000137  aa  7 00002 2361 20	ldq  	pr7|2,*		p_dtx
000140  aa  6 00107 7561 00	stq  	pr6|71		dtx
						STATEMENT 1 ON LINE 80
	call ioi_device$get_dtep (dtx, dtep, code);

000141  aa  6 00107 3521 00	epp2 	pr6|71		dtx
000142  aa  6 00130 2521 00	spri2	pr6|88
000143  aa  6 00112 3521 00	epp2 	pr6|74		dtep
000144  aa  6 00132 2521 00	spri2	pr6|90
000145  aa  6 00100 3521 00	epp2 	pr6|64		code
000146  aa  6 00134 2521 00	spri2	pr6|92
000147  aa  6 00126 6211 00	eax1 	pr6|86
000150  aa   014000 4310 07	fld  	6144,dl
000151  aa  6 00044 3701 20	epp4 	pr6|36,*
000152  la  4 00010 3521 20	epp2 	pr4|8,*		ioi_device$get_dtep
000153  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 81
	if code ^= 0 then
	     goto QUIT;

000154  aa  6 00100 2361 00	ldq  	pr6|64		code
000155  aa   777751 6010 04	tnz  	-23,ic		000126
						STATEMENT 1 ON LINE 84
     end setup;

000156  aa  6 00114 6101 00	rtcd 	pr6|76
  END PROCEDURE setup
  END PROCEDURE ioi_get_status


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
