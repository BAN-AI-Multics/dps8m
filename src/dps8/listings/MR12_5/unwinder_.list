	COMPILATION LISTING OF SEGMENT unwinder_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  0959.6 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 /* format: style4 */
       13 
       14 /* UNWINDER - This procedure performs all non-local goto's.
       15*   It is passed a label that specifies the location and stack frame
       16*   to which to return.  The stack is popped one frame at a time
       17*   until the correct frame is reached.  As each frame is popped,
       18*   its condition stack is checked for a cleanup condition.
       19*   Unwinding across rings is handled in a manner similar to signal_,
       20*   except that the non-local goto required by this technique
       21*   is performed with the aid of an ALM utility program.
       22*
       23*   Coded in PL/1 on July 21, 1970 by R. J. Feiertag
       24*   Code added for special handlers on November 14, 1971 by R. J. Feiertag
       25*   Code modified on January 13, 1972 by R. J. Feiertag
       26*   Modified for 645F and combined with signal_ - September 20, 1972 by N. I. Morris	*/
       27 /* Recoded 6 November 1973 by M. Weaver to separate from signal_ again, divide into 2
       28*   pieces (other is unwind_stack_) and signal cleanup */
       29 /* Modified March 9, 1978 by M. Weaver to not set stack end pointer when unwinding in same ring */
       30 /* Modified 1985-04-05, E. Swenson to zero out unused condition info flags */
       31 
       32 unwinder_: proc (a_target_label);
       33 
       34 dcl  (a_target_label, target_label) label;		/* target of non-local goto */
       35 
       36 dcl  target_loc ptr,				/* target location of non-local goto */
       37      target_sp ptr,					/* target stack level of non-local goto */
       38      p_target_sp ptr;
       39 
       40 dcl  (prev_sp, my_sp, labelp) ptr;
       41 dcl  label_variable label;
       42 dcl  code fixed bin (35);
       43 
       44 dcl  (addr, addrel, baseno, baseptr, bit, divide, fixed, index, length, null, ptr, rel, size, substr) builtin;
       45 
       46 dcl  1 label based (labelp),				/* overlay for label variable */
       47        2 target ptr,				/* target of label */
       48        2 stack ptr;					/* stack offset for label */
       49 
       50 
       51 dcl  1 unwinder_caller_frame based (sp) aligned,		/* stack frame for caller of unwinder_ */
       52        2 frame_header like stack_frame,			/* stack frame header */
       53        2 target_label label,				/* target of non-local goto. */
       54        2 arglist,					/* argument list to unwinder_ */
       55          3 arg_count fixed bin (17) unal,		/* 2 * number of args */
       56          3 flag fixed bin (17) unal,			/* =4 for pl/1 call */
       57          3 desc_count fixed bin (17) unal,		/* 2 * number of descriptors */
       58          3 pad fixed bin (17) unal,
       59          3 target_label_ptr ptr;			/* pointer to label variable */
       60 
       61 dcl  unwinder_caller_frame_size fixed bin;		/* size of created frame */
       62 
       63 dcl  1 unwind_err aligned,				/* structure for signalling unwinder_error */
       64        2 header like condition_info_header,
       65        2 label label;				/* copy of offending label */
       66 
       67 
       68 dcl  nonlocal_goto_$different_ring ext entry (ptr, ptr),
       69      nonlocal_goto_$same_ring ext entry (ptr, ptr),
       70      unwind_stack_ entry (ptr, ptr, fixed bin (35)),
       71      signal_ entry (char (*), ptr, ptr);
       72 
       73 
       74 /* Program */
       75 
       76 	target_label = a_target_label;
       77 begin:	labelp = addr (target_label);			/* Get pointer to target. */
       78 	target_loc = labelp -> label.target;		/* Extract target of non-local goto. */
       79 	target_sp = labelp -> label.stack;		/* Extract target stack pointer. */
       80 
       81 
       82 /* do the actual unwinding */
       83 
       84 	labelp = addr (label_variable);
       85 	label_variable = sig_error;			/* set to something to get sp */
       86 	my_sp = labelp -> label.stack;
       87 	my_sp -> stack_frame_flags.support = "1"b;	/* turn on support bit */
       88 
       89 /* see whether we unwind all or part of stack */
       90 
       91 	if baseno (my_sp) ^= baseno (target_sp) then do;	/* unwind all of this stack first */
       92 	     sp = ptr (my_sp, 0) -> stack_header.stack_begin_ptr -> stack_frame.prev_sp;
       93 						/* get ptr to previous stack */
       94 	     if sp = null then go to sig_error;		/* no other stack; will never find target */
       95 	     p_target_sp = null;
       96 	end;
       97 	else sp, p_target_sp = target_sp;		/* look for target in this stack */
       98 
       99 	call unwind_stack_ (my_sp, p_target_sp, code);	/* unwind ... */
      100 	if code ^= 0 then go to sig_error;		/* couldn't find target frame */
      101 
      102 /**/
      103 	if p_target_sp ^= null then do;		/* target is on this stack */
      104 
      105 /* Arrive here when the target stack frame for the non-local goto has been reached.
      106*   Must restore the indicators; get them from the mc if the frame was faulted out of
      107*   and from the return pointer otherwise.
      108*   Set the target frame's return pointer to the target of the goto and call
      109*   an ALM utility program to perform a return sequence.			*/
      110 
      111 	     sp -> stack_frame_flags.signaller = "0"b;	/* erase FIM flag */
      112 	     sp -> stack_frame_flags.old_signaller = "0"b;/* erase old FIM flag */
      113 
      114 	     sp -> stack_frame.return_ptr = target_loc;	/* Set return pointer to target. */
      115 	     call nonlocal_goto_$same_ring (sp, sp -> stack_frame.return_ptr); /* Let utility program do the return */
      116 	end;
      117 
      118 /* Arrive here when switching stacks on a non-local goto. */
      119 /* Construct a new stack frame on the outer ring stack.  This frame will contain
      120*   an argument list and arguments for a call to signal_. 			*/
      121 
      122 	sb = ptr (sp, "0"b);			/* Get pointer to base of outer ring stack. */
      123 	prev_sp = sp;				/* Save pointer to last frame on that stack. */
      124 	sp = sb -> stack_header.stack_end_ptr;		/* Get pointer to new frame. */
      125 	unwinder_caller_frame_size = divide (size (unwinder_caller_frame) + 15, 16, 18, 0) * 16;
      126 						/* Compute length of unwinder_caller stack frame.
      127*						   Round size up to nearest 16. */
      128 
      129 	sb -> stack_header.stack_end_ptr,		/* set new pointers to end of stack */
      130 	     sp -> stack_frame.next_sp = addrel (sp, unwinder_caller_frame_size);
      131 	sp -> stack_frame.prev_sp = prev_sp;		/* Thread new frame in. */
      132 	sp -> stack_frame_flags.condition = "0"b;	/* "prev_sp" may have had condition bit set. */
      133 	sp -> stack_frame_flags.crawl_out = "1"b;	/* indicate we're doing a crawl out */
      134 	sp -> stack_frame_flags.old_crawl_out = "1"b;
      135 	sp -> stack_frame_flags.support = "1"b;		/* indicate support frame */
      136 
      137 
      138 
      139 
      140 
      141 /* Construct an argument list to unwinder_ and simulate an unwinder_ call
      142*   on the target stack in a manner similar to signal_'s call for crawlouts */
      143 
      144 set_unwinder_arglist:
      145 	labelp -> label.target = target_loc;		/* Reconstruct label passed to unwinder_. */
      146 	labelp -> label.stack = target_sp;		/* .. */
      147 
      148 	unwinder_caller_frame.target_label = label_variable;
      149 						/* Set label in stack frame. */
      150 
      151 	unwinder_caller_frame.entry_ptr = null;		/* so won't be confused by garbage */
      152 
      153 	unwinder_caller_frame.arglist.arg_count = 2;	/* Indicate 1 argument. */
      154 	unwinder_caller_frame.arglist.flag = 4;
      155 	unwinder_caller_frame.arglist.desc_count = 0;	/* Indicate no descriptors. */
      156 	unwinder_caller_frame.arglist.pad = 0;
      157 
      158 	unwinder_caller_frame.arglist.target_label_ptr = addr (unwinder_caller_frame.target_label);
      159 						/* Set pointer to label in stack. */
      160 
      161 
      162 /* Set operator pointer in caller frame to point to argument list.
      163*   The ALM utility routine will place this value in pr0 when it performs
      164*   the non-local goto.  Beware -- this is a KLUDGE */
      165 
      166 	stack_frame.operator_and_lp_ptr = addr (unwinder_caller_frame.arglist);
      167 
      168 	sp -> stack_frame.return_ptr = sb -> stack_header.unwinder_ptr;
      169 						/* Set return info to call unwinder_. */
      170 
      171 
      172 /* Perform the non-local goto to call the unwinder_ by calling
      173*   an ALM utility routine.  This program will abandon the stack
      174*   that we are currently running on.					*/
      175 
      176 
      177 	call nonlocal_goto_$different_ring (sp, sp -> stack_frame.return_ptr); /* See you in the next stack */
      178 
      179 
      180 	return;
      181 
      182 sig_error:					/* code for signalling unwinder_error */
      183 	unwind_err.header.length = size (unwind_err);
      184 	unwind_err.header.version = 1;
      185 /**** Zero out all flags.  We do not allow any restarting. */
      186 	unspec (unwind_err.header.action_flags) = ""b;
      187 	unwind_err.header.info_string = "Attempt to perform non-local goto to invalid label.";
      188 	unwind_err.header.status_code = 0;
      189 	unwind_err.label = target_label;		/* fill in offending label */
      190 
      191 	call signal_ ("unwinder_error", null, addr (unwind_err)); /* tell user */
      192 
      193 	target_label = unwind_err.label;		/* assume if restart that label has been fixed */
      194 	go to begin;				/* start over */
      195 
      196 /* format: off */
      197  /* BEGIN INCLUDE FILE condition_info_header.incl.pl1 BIM 1981 */
  1     2 /* format: style2 */
  1     3 
  1     4      declare condition_info_header_ptr
  1     5 			      pointer;
  1     6      declare 1 condition_info_header
  1     7 			      aligned based (condition_info_header_ptr),
  1     8 	     2 length	      fixed bin,		/* length in words of this structure */
  1     9 	     2 version	      fixed bin,		/* version number of this structure */
  1    10 	     2 action_flags	      aligned,		/* tell handler how to proceed */
  1    11 	       3 cant_restart     bit (1) unaligned,	/* caller doesn't ever want to be returned to */
  1    12 	       3 default_restart  bit (1) unaligned,	/* caller can be returned to with no further action */
  1    13 	       3 quiet_restart    bit (1) unaligned,	/* return, and print no message */
  1    14 	       3 support_signal   bit (1) unaligned,	/* treat this signal as if the signalling procedure had the support bit set */
  1    15 						/* if the signalling procedure had the support bit set, do the same for its caller */
  1    16 	       3 pad	      bit (32) unaligned,
  1    17 	     2 info_string	      char (256) varying,	/* may contain printable message */
  1    18 	     2 status_code	      fixed bin (35);	/* if^=0, code interpretable by com_err_ */
  1    19 
  1    20 /* END INCLUDE FILE condition_info_header.incl.pl1 */
      197 
      198  /*  */
  2     2 /* BEGIN INCLUDE FILE  mc.incl.pl1   Created Dec 72 for 6180 - WSS. */
  2     3 /* Modified 06/07/76 by Greenberg for mc.resignal */
  2     4 /* Modified 07/07/76 by Morris for fault register data */
  2     5 /* Modified 08/28/80 by J. A. Bush for the DPS8/70M CVPU */
  2     6 /* Modified '82 to make values constant */
  2     7 
  2     8 /* words 0-15 pointer registers */
  2     9 
  2    10 dcl  mcp ptr;
  2    11 
  2    12 dcl 1 mc based (mcp) aligned,
  2    13     2 prs (0:7) ptr,				/* POINTER  REGISTERS */
  2    14    (2 regs,					/* registers */
  2    15       3 x (0:7) bit (18),				/* index registers */
  2    16       3 a bit (36),					/* accumulator */
  2    17       3 q bit (36),					/* q-register */
  2    18       3 e bit (8),					/* exponent */
  2    19       3 pad1 bit (28),
  2    20       3 t bit (27),					/* timer register */
  2    21       3 pad2 bit (6),
  2    22       3 ralr bit (3),				/* ring alarm register */
  2    23 
  2    24     2 scu (0:7) bit (36),
  2    25 
  2    26     2 mask bit (72),				/* mem controller mask at time of fault */
  2    27     2 ips_temp bit (36),				/* Temporary storage for IPS info */
  2    28     2 errcode fixed bin (35),				/* fault handler's error code */
  2    29     2 fim_temp,
  2    30       3 unique_index bit (18) unal,			/* unique index for restarting faults */
  2    31       3 resignal bit (1) unal,			/* recompute signal name with fcode below */
  2    32       3 fcode bit (17) unal,				/* fault code used as index to FIM table and SCT */
  2    33     2 fault_reg bit (36),				/* fault register */
  2    34     2 pad2 bit (1),
  2    35     2 cpu_type fixed bin (2) unsigned,			/* L68 = 0, DPS8/70M = 1 */
  2    36     2 ext_fault_reg bit (15),				/* extended fault reg for DPS8/70M CPU */
  2    37     2 fault_time bit (54),				/* time of fault */
  2    38 
  2    39     2 eis_info (0:7) bit (36)) unaligned;
  2    40 
  2    41 
  2    42 dcl (apx fixed bin init (0),
  2    43      abx fixed bin init (1),
  2    44      bpx fixed bin init (2),
  2    45      bbx fixed bin init (3),
  2    46      lpx fixed bin init (4),
  2    47      lbx fixed bin init (5),
  2    48      spx fixed bin init (6),
  2    49      sbx fixed bin init (7)) internal static options (constant);
  2    50 
  2    51 
  2    52 
  2    53 
  2    54 dcl  scup ptr;
  2    55 
  2    56 dcl 1 scu based (scup) aligned,			/* SCU DATA */
  2    57 
  2    58 
  2    59 /*	WORD (0)		*/
  2    60 
  2    61    (2 ppr,					/* PROCEDURE POINTER REGISTER */
  2    62       3 prr bit (3),				/* procedure ring register */
  2    63       3 psr bit (15),				/* procedure segment register */
  2    64       3 p bit (1),					/* procedure privileged bit */
  2    65 
  2    66     2 apu,					/* APPENDING UNIT STATUS */
  2    67       3 xsf bit (1),				/* ext seg flag - IT modification */
  2    68       3 sdwm bit (1),				/* match in SDW Ass. Mem. */
  2    69       3 sd_on bit (1),				/* SDW Ass. Mem.  ON */
  2    70       3 ptwm bit (1),				/* match in PTW Ass. Mem. */
  2    71       3 pt_on bit (1),				/* PTW Ass. Mem.  ON */
  2    72       3 pi_ap bit (1),				/* Instr Fetch or Append cycle */
  2    73       3 dsptw bit (1),				/* Fetch of DSPTW */
  2    74       3 sdwnp bit (1),				/* Fetch of SDW non paged */
  2    75       3 sdwp bit (1),				/* Fetch of SDW paged */
  2    76       3 ptw bit (1),				/* Fetch of PTW */
  2    77       3 ptw2 bit (1),				/* Fetch of pre-paged PTW */
  2    78       3 fap bit (1),				/* Fetch of final address paged */
  2    79       3 fanp bit (1),				/* Fetch of final address non-paged */
  2    80       3 fabs bit (1),				/* Fetch of final address absolute */
  2    81 
  2    82     2 fault_cntr bit (3),				/* number of retrys of EIS instructions */
  2    83 
  2    84 
  2    85 /*	WORD (1)		*/
  2    86 
  2    87     2 fd,						/* FAULT  DATA */
  2    88       3 iro bit (1),				/* illegal ring order */
  2    89       3 oeb bit (1),				/* out of execute bracket */
  2    90       3 e_off bit (1),				/* no execute */
  2    91       3 orb bit (1),				/* out of read bracket */
  2    92       3 r_off bit (1),				/* no read */
  2    93       3 owb bit (1),				/* out of write bracket */
  2    94       3 w_off bit (1),				/* no write */
  2    95       3 no_ga bit (1),				/* not a gate */
  2    96       3 ocb bit (1),				/* out of call bracket */
  2    97       3 ocall bit (1),				/* outward call */
  2    98       3 boc bit (1),				/* bad outward call */
  2    99       3 inret bit (1),				/* inward return */
  2   100       3 crt bit (1),				/* cross ring transfer */
  2   101       3 ralr bit (1),				/* ring alarm register */
  2   102       3 am_er bit (1),				/* associative memory fault */
  2   103       3 oosb bit (1),				/* out of segment bounds */
  2   104       3 paru bit (1),				/* processor parity upper */
  2   105       3 parl bit (1),				/* processor parity lower */
  2   106       3 onc_1 bit (1),				/* op not complete type 1 */
  2   107       3 onc_2 bit (1),				/* op not complete type 2 */
  2   108 
  2   109     2 port_stat,					/* PORT  STATUS */
  2   110       3 ial bit (4),				/* illegal action lines */
  2   111       3 iac bit (3),				/* illegal action channel */
  2   112       3 con_chan bit (3),				/* connect channel */
  2   113 
  2   114     2 fi_num bit (5),				/* (fault/interrupt)  number */
  2   115     2 fi_flag bit (1),				/*  1 => fault,  0 => interrupt  */
  2   116 
  2   117 
  2   118 /*	WORD (2)		*/
  2   119 
  2   120     2 tpr,					/* TEMPORARY POINTER REGISTER */
  2   121       3 trr bit (3),				/* temporary ring register */
  2   122       3 tsr bit (15),				/* temporary segment register */
  2   123 
  2   124     2 pad2 bit (9),
  2   125 
  2   126     2 cpu_no bit (3),				/* CPU number */
  2   127 
  2   128     2 delta bit (6),				/* tally modification DELTA */
  2   129 
  2   130 
  2   131 /*	WORD (3)		*/
  2   132 
  2   133     2 word3 bit (18),
  2   134 
  2   135     2 tsr_stat,					/* TSR STATUS for 1,2,&3 word instructions */
  2   136       3 tsna,					/* Word 1 status */
  2   137         4 prn bit (3),				/* Word 1  PR  number */
  2   138         4 prv bit (1),				/* Word 1  PR  valid bit */
  2   139       3 tsnb,					/* Word 2  status */
  2   140         4 prn bit (3),				/* Word 2  PR  number */
  2   141         4 prv bit (1),				/* Word 2  PR  valid bit */
  2   142       3 tsnc,					/* Word 3  status */
  2   143         4 prn bit (3),				/* Word 3  PR  number */
  2   144         4 prv bit (1),				/* Word 3  PR  valid bit */
  2   145 
  2   146     2 tpr_tbr bit (6),				/* TPR.TBR  field */
  2   147 
  2   148 
  2   149 /* 	WORD (4)		*/
  2   150 
  2   151     2 ilc bit (18),					/* INSTRUCTION  COUNTER */
  2   152 
  2   153     2 ir,						/* INDICATOR  REGISTERS */
  2   154       3 zero bit (1),				/* zero indicator */
  2   155       3 neg bit (1),				/* negative indicator */
  2   156       3 carry bit (1),				/* carryry indicator */
  2   157       3 ovfl bit (1),				/* overflow indicator */
  2   158       3 eovf bit (1),				/* eponent overflow */
  2   159       3 eufl bit (1),				/* exponent underflow */
  2   160       3 oflm bit (1),				/* overflow mask */
  2   161       3 tro bit (1),				/* tally runout */
  2   162       3 par bit (1),				/* parity error */
  2   163       3 parm bit (1),				/* parity mask */
  2   164       3 bm bit (1),					/* ^bar mode */
  2   165       3 tru bit (1),				/* truncation mode */
  2   166       3 mif bit (1),				/* multi-word instruction mode */
  2   167       3 abs bit (1),				/* absolute mode */
  2   168       3 hex bit (1),				/* hexadecimal exponent mode */
  2   169       3 pad bit (3),
  2   170 
  2   171 
  2   172 /*	WORD (5)		*/
  2   173 
  2   174     2 ca bit (18),					/* COMPUTED  ADDRESS */
  2   175 
  2   176     2 cu,						/* CONTROL UNIT STATUS */
  2   177       3 rf bit (1),					/* on first cycle of repeat instr */
  2   178       3 rpt bit (1),				/* repeat instruction */
  2   179       3 rd bit (1),					/* repeat double instruction */
  2   180       3 rl bit (1),					/* repeat link instruciton */
  2   181       3 pot bit (1),				/* IT  modification */
  2   182       3 pon bit (1),				/* return type instruction */
  2   183       3 xde bit (1),				/* XDE from Even location */
  2   184       3 xdo bit (1),				/* XDE from Odd  location */
  2   185       3 poa bit (1),				/* operation preparation */
  2   186       3 rfi bit (1),				/* tells CPU to refetch instruction */
  2   187       3 its bit (1),				/* ITS modification */
  2   188       3 if bit (1),					/* fault occured during instruction fetch */
  2   189 
  2   190     2 cpu_tag bit (6)) unaligned,			/* computed tag field */
  2   191 
  2   192 
  2   193 /*	WORDS (6,7)	*/
  2   194 
  2   195     2 even_inst bit (36),				/* even instruction of faulting pair */
  2   196 
  2   197     2 odd_inst bit (36);				/* odd  instruction of faulting pair */
  2   198 
  2   199 
  2   200 
  2   201 
  2   202 
  2   203 
  2   204 /*	ALTERNATE   SCU  DECLARATION		*/
  2   205 
  2   206 
  2   207 dcl 1 scux based (scup) aligned,
  2   208 
  2   209    (2 pad0 bit (36),
  2   210 
  2   211     2 fd,						/* GROUP II  FAULT DATA */
  2   212       3 isn bit (1),				/* illegal segment number */
  2   213       3 ioc bit (1),				/* illegal op  code  */
  2   214       3 ia_am bit (1),				/* illegal address - modifier */
  2   215       3 isp bit (1),				/* illegal slave  procedure */
  2   216       3 ipr bit (1),				/* illegal procedure */
  2   217       3 nea bit (1),				/* non existent address */
  2   218       3 oobb bit (1),				/* out of bounds */
  2   219       3 pad bit (29),
  2   220 
  2   221     2 pad2 bit (36),
  2   222 
  2   223     2 pad3a bit (18),
  2   224 
  2   225     2 tsr_stat (0:2),				/* TSR  STATUS  as an  ARRAY */
  2   226       3 prn bit (3),				/* PR  number */
  2   227       3 prv bit (1),				/* PR  valid bit */
  2   228 
  2   229     2 pad3b bit (6)) unaligned,
  2   230 
  2   231     2 pad45 (0:1) bit (36),
  2   232 
  2   233     2 instr (0:1) bit (36);				/* Instruction ARRAY */
  2   234 
  2   235 
  2   236 
  2   237 /*  END INCLUDE FILE   mc.incl.pl1 */
      198 
      199  /* 	BEGIN INCLUDE FILE ... stack_frame.incl.pl1 ... */
  3     2 
  3     3 /* format: off */
  3     4 
  3     5 /* Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr and pl1_ps_ptr */
  3     6 /* Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager bit & main_proc bit */
  3     7 /* Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr */
  3     8 /* Modified: 03/01/84, S. Herbst - Added RETURN_PTR_MASK */
  3     9 
  3    10 
  3    11 /****^  HISTORY COMMENTS:
  3    12*  1) change(86-09-15,Kissel), approve(86-09-15,MCR7473),
  3    13*     audit(86-10-01,Fawcett), install(86-11-03,MR12.0-1206):
  3    14*     Modified to add constants for the translator_id field in the stack_frame
  3    15*     structure.
  3    16*                                                   END HISTORY COMMENTS */
  3    17 
  3    18 
  3    19 dcl RETURN_PTR_MASK bit (72) int static options (constant)  /* mask to be AND'd with stack_frame.return_ptr */
  3    20 	init ("777777777777777777000000"b3);		/* when copying, to ignore bits that a call fills */
  3    21 						/* with indicators (nonzero for Fortran hexfp caller) */
  3    22 			/* say: unspec(ptr) = unspec(stack_frame.return_ptr) & RETURN_PTR_MASK; */
  3    23 
  3    24 dcl TRANSLATOR_ID_PL1V2 bit (18) internal static options (constant) init ("000000"b3);
  3    25 dcl TRANSLATOR_ID_ALM bit (18) internal static options (constant) init ("000001"b3);
  3    26 dcl TRANSLATOR_ID_PL1V1 bit (18) internal static options (constant) init ("000002"b3);
  3    27 dcl TRANSLATOR_ID_SIGNAL_CALLER bit (18) internal static options (constant) init ("000003"b3);
  3    28 dcl TRANSLATOR_ID_SIGNALLER bit (18) internal static options (constant) init ("000004"b3);
  3    29 
  3    30 
  3    31 dcl  sp pointer;					/* pointer to beginning of stack frame */
  3    32 
  3    33 dcl  stack_frame_min_length fixed bin static init(48);
  3    34 
  3    35 
  3    36 dcl 1 stack_frame based(sp) aligned,
  3    37     2 pointer_registers(0 : 7) ptr,
  3    38     2 prev_sp pointer,
  3    39     2 next_sp pointer,
  3    40     2 return_ptr pointer,
  3    41     2 entry_ptr pointer,
  3    42     2 operator_and_lp_ptr ptr,			/* serves as both */
  3    43     2 arg_ptr pointer,
  3    44     2 static_ptr ptr unaligned,
  3    45     2 support_ptr ptr unal, /* only used by fortran I/O */
  3    46     2 on_unit_relp1 bit(18) unaligned,
  3    47     2 on_unit_relp2 bit(18) unaligned,
  3    48     2 translator_id bit(18) unaligned,			/* Translator ID (see constants above)
  3    49*						   0 => PL/I version II
  3    50*						   1 => ALM
  3    51*						   2 => PL/I version I   
  3    52*						   3 => signal caller frame
  3    53*						   4 => signaller frame */
  3    54     2 operator_return_offset bit(18) unaligned,
  3    55     2 x(0: 7) bit(18) unaligned,			/* index registers */
  3    56     2 a bit(36),					/* accumulator */
  3    57     2 q bit(36),					/* q-register */
  3    58     2 e bit(36),					/* exponent */
  3    59     2 timer bit(27) unaligned,				/* timer */
  3    60     2 pad bit(6) unaligned,
  3    61     2 ring_alarm_reg bit(3) unaligned;
  3    62 
  3    63 
  3    64 dcl 1 stack_frame_flags based(sp) aligned,
  3    65     2 pad(0 : 7) bit(72),				/* skip over prs */
  3    66     2 xx0 bit(22) unal,
  3    67     2 main_proc bit(1) unal,				/* on if frame belongs to a main procedure */
  3    68     2 run_unit_manager bit(1) unal,			/* on if frame belongs to run unit manager */
  3    69     2 signal bit(1) unal,				/* on if frame belongs to logical signal_ */
  3    70     2 crawl_out bit(1) unal,				/* on if this is a signal caller frame */
  3    71     2 signaller bit(1) unal,				/* on if next frame is signaller's */
  3    72     2 link_trap bit(1) unal,				/* on if this frame was made by the linker */
  3    73     2 support bit(1) unal,				/* on if frame belongs to a support proc */
  3    74     2 condition bit(1) unal,				/* on if condition established in this frame */
  3    75     2 xx0a bit(6) unal,
  3    76     2 xx1 fixed bin,
  3    77     2 xx2 fixed bin,
  3    78     2 xx3 bit(25) unal,
  3    79     2 old_crawl_out bit (1) unal,			/* on if this is a signal caller frame */
  3    80     2 old_signaller bit(1) unal,			/* on if next frame is signaller's */
  3    81     2 xx3a bit(9) unaligned,
  3    82     2 xx4(9) bit(72) aligned,
  3    83     2 v2_pl1_op_ret_base ptr,				/* When a V2 PL/I program calls an operator the
  3    84*						*  operator puts a pointer to the base of
  3    85*						*  the calling procedure here. (text base ptr)  */
  3    86     2 xx5 bit(72) aligned,
  3    87     2 pl1_ps_ptr ptr;				/* ptr to ps for this frame; also used by fio. */
  3    88 
  3    89 /* format: on */
  3    90 
  3    91 /* 	END INCLUDE FILE ... stack_frame.incl.pl1 */
      199 
      200  /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  4     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  4     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  4     4 /*	Modified April 1983 by C. Hornig for tasking */
  4     5 
  4     6 /****^  HISTORY COMMENTS:
  4     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  4     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  4     9*     added the heap_header_ptr definition.
  4    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  4    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  4    12*     Modified to support control point management.  These changes were actually
  4    13*     made in February 1985 by G. Palter.
  4    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  4    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  4    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  4    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  4    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  4    19*     (ITS pair).
  4    20*                                                   END HISTORY COMMENTS */
  4    21 
  4    22 /* format: style2 */
  4    23 
  4    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  4    25 
  4    26      dcl	   1 stack_header	      based (sb) aligned,
  4    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  4    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  4    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  4    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  4    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  4    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  4    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  4    34 	     2 pad4	      bit (2) unal,
  4    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  4    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  4    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  4    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  4    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  4    40 	     2 null_ptr	      ptr,		/*  (16)  */
  4    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  4    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  4    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  4    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  4    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  4    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  4    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  4    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  4    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  4    50 	     2 return_no_pop_op_ptr
  4    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  4    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  4    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  4    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  4    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  4    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  4    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  4    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  4    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  4    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  4    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  4    62 	     2 trace,
  4    63 	       3 frames,
  4    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  4    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  4    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  4    67 	     2 pad2	      bit (36),		/*  (61) */
  4    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  4    69 
  4    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  4    71 
  4    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  4    73 						/* (551) octal */
  4    74 
  4    75 
  4    76 /*	The following constants are offsets within this transfer vector table.  */
  4    77 
  4    78      dcl	   (
  4    79 	   call_offset	      fixed bin init (271),
  4    80 	   push_offset	      fixed bin init (272),
  4    81 	   return_offset	      fixed bin init (273),
  4    82 	   return_no_pop_offset   fixed bin init (274),
  4    83 	   entry_offset	      fixed bin init (275)
  4    84 	   )		      internal static;
  4    85 
  4    86 
  4    87 
  4    88 
  4    89 
  4    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  4    91*	move the whole stack header should use this overlay.
  4    92**/
  4    93 
  4    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  4    95 
  4    96 
  4    97 
  4    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
      200 
      201 
      202 	end unwinder_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0804.3  unwinder_.pl1                     >spec>install>1110>unwinder_.pl1
197          1    03/24/82  1347.2  condition_info_header.incl.pl1    >ldd>include>condition_info_header.incl.pl1
198          2    12/15/83  1100.4  mc.incl.pl1                       >ldd>include>mc.incl.pl1
199          3    11/07/86  1550.3  stack_frame.incl.pl1              >ldd>include>stack_frame.incl.pl1
200          4    11/07/86  1550.3  stack_header.incl.pl1             >ldd>include>stack_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_target_label                         parameter       label variable           dcl 34 ref 32 76
action_flags              2     000126 automatic       structure                level 3 dcl 63 set ref 186*
addr                                                   builtin function         dcl 44 ref 77 84 158 166 191 191
addrel                                                 builtin function         dcl 44 ref 129
arg_count                54            based           fixed bin(17,0)          level 3 packed packed unaligned dcl 51 set ref 153*
arglist                  54            based           structure                level 2 dcl 51 set ref 166
baseno                                                 builtin function         dcl 44 ref 91 91
code                            000124 automatic       fixed bin(35,0)          dcl 42 set ref 99* 100
condition                20(29)        based           bit(1)                   level 2 packed packed unaligned dcl 3-64 set ref
                                                                                  132*
condition_info_header                  based           structure                level 1 dcl 1-6
crawl_out                20(25)        based           bit(1)                   level 2 packed packed unaligned dcl 3-64 set ref
                                                                                  133*
desc_count               55            based           fixed bin(17,0)          level 3 packed packed unaligned dcl 51 set ref 155*
divide                                                 builtin function         dcl 44 ref 125
entry_ptr                26            based           pointer                  level 3 dcl 51 set ref 151*
flag                     54(18)        based           fixed bin(17,0)          level 3 packed packed unaligned dcl 51 set ref 154*
frame_header                           based           structure                level 2 dcl 51
header                          000126 automatic       structure                level 2 dcl 63
info_string               3     000126 automatic       varying char(256)        level 3 dcl 63 set ref 187*
label                   106     000126 automatic       label variable           level 2 in structure "unwind_err" dcl 63
                                                                                  in procedure "unwinder_" set ref 189* 193
label                                  based           structure                level 1 unaligned dcl 46 in procedure "unwinder_"
label_variable                  000120 automatic       label variable           dcl 41 set ref 84 85* 148
labelp                          000116 automatic       pointer                  dcl 40 set ref 77* 78 79 84* 86 144 146
length                          000126 automatic       fixed bin(17,0)          level 3 dcl 63 set ref 182*
my_sp                           000114 automatic       pointer                  dcl 40 set ref 86* 87 91 92 99*
next_sp                  22            based           pointer                  level 2 dcl 3-36 set ref 129*
nonlocal_goto_$different_ring   000010 constant        entry                    external dcl 68 ref 177
nonlocal_goto_$same_ring        000012 constant        entry                    external dcl 68 ref 115
null                                                   builtin function         dcl 44 ref 94 95 103 151 191 191
old_crawl_out            23(25)        based           bit(1)                   level 2 packed packed unaligned dcl 3-64 set ref
                                                                                  134*
old_signaller            23(26)        based           bit(1)                   level 2 packed packed unaligned dcl 3-64 set ref
                                                                                  112*
operator_and_lp_ptr      30            based           pointer                  level 2 dcl 3-36 set ref 166*
p_target_sp                     000110 automatic       pointer                  dcl 36 set ref 95* 97* 99* 103
pad                      55(18)        based           fixed bin(17,0)          level 3 packed packed unaligned dcl 51 set ref 156*
prev_sp                         000112 automatic       pointer                  dcl 40 in procedure "unwinder_" set ref 123* 131
prev_sp                  20            based           pointer                  level 2 in structure "stack_frame" dcl 3-36
                                                                                  in procedure "unwinder_" set ref 92 131*
ptr                                                    builtin function         dcl 44 ref 92 122
return_ptr               24            based           pointer                  level 2 dcl 3-36 set ref 114* 115* 168* 177*
sb                              000242 automatic       pointer                  dcl 4-24 set ref 122* 124 129 168
signal_                         000016 constant        entry                    external dcl 68 ref 191
signaller                20(26)        based           bit(1)                   level 2 packed packed unaligned dcl 3-64 set ref
                                                                                  111*
size                                                   builtin function         dcl 44 ref 125 182
sp                              000240 automatic       pointer                  dcl 3-31 set ref 92* 94 97* 111 112 114 115* 115 122
                                                                                  123 124* 125 129 129 131 132 133 134 135 148 151
                                                                                  153 154 155 156 158 158 166 166 168 177* 177
stack                     2            based           pointer                  level 2 dcl 46 set ref 79 86 146*
stack_begin_ptr          22            based           pointer                  level 2 dcl 4-26 ref 92
stack_end_ptr            24            based           pointer                  level 2 dcl 4-26 set ref 124 129*
stack_frame                            based           structure                level 1 dcl 3-36
stack_frame_flags                      based           structure                level 1 dcl 3-64
stack_header                           based           structure                level 1 dcl 4-26
status_code             104     000126 automatic       fixed bin(35,0)          level 3 dcl 63 set ref 188*
support                  20(28)        based           bit(1)                   level 2 packed packed unaligned dcl 3-64 set ref 87*
                                                                                  135*
target                                 based           pointer                  level 2 dcl 46 set ref 78 144*
target_label             50            based           label variable           level 2 in structure "unwinder_caller_frame" dcl 51
                                                                                  in procedure "unwinder_" set ref 148* 158
target_label                    000100 automatic       label variable           dcl 34 in procedure "unwinder_" set ref 76* 77 189
                                                                                  193*
target_label_ptr         56            based           pointer                  level 3 dcl 51 set ref 158*
target_loc                      000104 automatic       pointer                  dcl 36 set ref 78* 114 144
target_sp                       000106 automatic       pointer                  dcl 36 set ref 79* 91 97 146
unwind_err                      000126 automatic       structure                level 1 dcl 63 set ref 182 191 191
unwind_stack_                   000014 constant        entry                    external dcl 68 ref 99
unwinder_caller_frame                  based           structure                level 1 dcl 51 set ref 125
unwinder_caller_frame_size      000125 automatic       fixed bin(17,0)          dcl 61 set ref 125* 129
unwinder_ptr             56            based           pointer                  level 2 dcl 4-26 ref 168
version                   1     000126 automatic       fixed bin(17,0)          level 3 dcl 63 set ref 184*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
RETURN_PTR_MASK                        internal static bit(72)                  initial packed unaligned dcl 3-19
TRANSLATOR_ID_ALM                      internal static bit(18)                  initial packed unaligned dcl 3-25
TRANSLATOR_ID_PL1V1                    internal static bit(18)                  initial packed unaligned dcl 3-26
TRANSLATOR_ID_PL1V2                    internal static bit(18)                  initial packed unaligned dcl 3-24
TRANSLATOR_ID_SIGNALLER                internal static bit(18)                  initial packed unaligned dcl 3-28
TRANSLATOR_ID_SIGNAL_CALLER            internal static bit(18)                  initial packed unaligned dcl 3-27
abx                                    internal static fixed bin(17,0)          initial dcl 2-42
apx                                    internal static fixed bin(17,0)          initial dcl 2-42
baseptr                                                builtin function         dcl 44
bbx                                    internal static fixed bin(17,0)          initial dcl 2-42
bit                                                    builtin function         dcl 44
bpx                                    internal static fixed bin(17,0)          initial dcl 2-42
call_offset                            internal static fixed bin(17,0)          initial dcl 4-78
condition_info_header_ptr              automatic       pointer                  dcl 1-4
entry_offset                           internal static fixed bin(17,0)          initial dcl 4-78
fixed                                                  builtin function         dcl 44
index                                                  builtin function         dcl 44
lbx                                    internal static fixed bin(17,0)          initial dcl 2-42
length                                                 builtin function         dcl 44
lpx                                    internal static fixed bin(17,0)          initial dcl 2-42
mc                                     based           structure                level 1 dcl 2-12
mcp                                    automatic       pointer                  dcl 2-10
push_offset                            internal static fixed bin(17,0)          initial dcl 4-78
rel                                                    builtin function         dcl 44
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 4-78
return_offset                          internal static fixed bin(17,0)          initial dcl 4-78
sbx                                    internal static fixed bin(17,0)          initial dcl 2-42
scu                                    based           structure                level 1 dcl 2-56
scup                                   automatic       pointer                  dcl 2-54
scux                                   based           structure                level 1 dcl 2-207
spx                                    internal static fixed bin(17,0)          initial dcl 2-42
stack_frame_min_length                 internal static fixed bin(17,0)          initial dcl 3-33
stack_header_overlay                   based           fixed bin(17,0)          array dcl 4-94
substr                                                 builtin function         dcl 44
tv_offset                              internal static fixed bin(17,0)          initial dcl 4-72

NAMES DECLARED BY EXPLICIT CONTEXT.
begin                           000045 constant        label                    dcl 77 ref 194
set_unwinder_arglist            000201 constant        label                    dcl 144
sig_error                       000245 constant        label                    dcl 182 set ref 85 94 100
unwinder_                       000032 constant        entry                    external dcl 32

NAME DECLARED BY CONTEXT OR IMPLICATION.
unspec                                                 builtin function         ref 186

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       404         424     323         414
Length       654     323        20         213      61           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
unwinder_                           192 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
unwinder_                000100 target_label                unwinder_
                         000104 target_loc                  unwinder_
                         000106 target_sp                   unwinder_
                         000110 p_target_sp                 unwinder_
                         000112 prev_sp                     unwinder_
                         000114 my_sp                       unwinder_
                         000116 labelp                      unwinder_
                         000120 label_variable              unwinder_
                         000124 code                        unwinder_
                         000125 unwinder_caller_frame_size  unwinder_
                         000126 unwind_err                  unwinder_
                         000240 sp                          unwinder_
                         000242 sb                          unwinder_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
nonlocal_goto_$different_ring nonlocal_goto_$same_ring      signal_                       unwind_stack_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     32 000027        76 000037        77 000045        78 000047        79 000051        84 000053        85 000055
     86 000060        87 000062        91 000064        92 000073        94 000077        95 000103        96 000105
     97 000106        99 000110       100 000123       103 000125       111 000131       112 000134       114 000135
    115 000137       122 000150       123 000152       124 000154       125 000156       129 000162       131 000167
    132 000171       133 000173       134 000175       135 000177       144 000201       146 000203       148 000206
    151 000212       153 000214       154 000216       155 000220       156 000222       158 000224       166 000226
    168 000230       177 000233       180 000244       182 000245       184 000247       186 000251       187 000252
    188 000257       189 000260       191 000264       193 000314       194 000320


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
