ASSEMBLY LISTING OF SEGMENT >spec>install>1110>call_math_error_.alm                                                                                                                                 
ASSEMBLED ON:	11/11/89  0946.8 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " HISTORY COMMENTS:
                                    13  "  1) change(86-07-14,BWong), approve(86-07-14,MCR7413),
                                    14  "     audit(86-07-16,Ginter), install(86-07-28,MR12.0-1104):
                                    15  "     Fix fortran bug 495.
                                    16  "                                                      END HISTORY COMMENTS
                                    17  
                                    18  
                                    19  " This routine is called when an error is detected by an ALM math routine.
                                    20  " Calling sequence is
                                    21  "		ldq	error_code
                                    22  "		tsx0	call_math_error_
                                    23  " This routine must be bound with the other math routines in order to work!
                                    24  "
                                    25  " At entry,	pr0 -> pl1_operators_ | arglist of caller and must be preserved
                                    26  " 		pr2 -> work area of math routines and must be preserved
                                    27  "		pr3 -> return loc of real math routine which may be
                                    28  "		in the PL/I program or in an alm write-around.
                                    29  "
                                    30  "	Modified by BW 86-03-18 to store PR3 in 'stack_frame.return_ptr'.
                                    31  "		This is needed by 'trace_stack' and 'probe' to correctly
                                    32  "		diagnose the line on which the math error occurs.  In
                                    33  "		the case of a math routine calling another math routine,
                                    34  "		the called math routine must not encounter an error
                                    35  "		which requires a call to 'call_math_error_'.  It is up
                                    36  "		to the math routine which calls the other math routine
                                    37  "		to ensure this.  'double_square_root_' is currently the
                                    38  "		only routine which is called by other math routines 
                                    39  "		(arc_sine_ and double_arc_sine_).  Fixes Fortran error
                                    40  "		number 495.
                                    41  "	Modified by HH 84-01-13 to not store PR3 in 'stack_frame.return_ptr'.
                                    42  "		This was of no value since control is always returned
                                    43  "		through PR3, but was of great harm if the calling math
                                    44  "		routine was called from another math routine, since that
                                    45  "		would change the segment number in 'stack_frame.return_ptr'
                                    46  "		from that of the owner of the stack frame to that of our
                                    47  "		caller's caller (which means that the next call to
                                    48  "		'pl1_operators_' could return to our caller's caller
                                    49  "		at a random offset, rather than to the owner of the frame).
                                    50  "
                        000000      51  	segdef	call_math_error_
                                    52  "
                                    53  	tempd	work_ptr,ops_ptr,arglist(5)
                                    54  	temp	code
                                    55  "
                                    56  	include	stack_frame
                                   1-1  "
                                   1-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   1-3  "
                                   1-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   1-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   1-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   1-7  "
                        000020     1-8  	equ	stack_frame.prev_sp,16
                        000020     1-9  	equ	stack_frame.condition_word,16
                        000022    1-10  	equ	stack_frame.next_sp,18
                        000022    1-11  	equ	stack_frame.signaller_word,18
                        000024    1-12  	equ	stack_frame.return_ptr,20
                        000026    1-13  	equ	stack_frame.entry_ptr,22
                        000030    1-14  	equ	stack_frame.operator_ptr,24
                        000030    1-15  	equ	stack_frame.lp_ptr,24
                        000032    1-16  	equ	stack_frame.arg_ptr,26
                        000034    1-17  	equ	stack_frame.static_ptr,28
                        000035    1-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    1-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    1-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    1-21  	equ	stack_frame.translator_id,31
                        000040    1-22  	equ	stack_frame.regs,32
                        000060    1-23  	equ	stack_frame.min_length,48
                        000020    1-24  	equ	stack_frame.flag_word,16
                        020000    1-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    1-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    1-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    1-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    1-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    1-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    1-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    1-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  1-33  
                                  1-34  "
                                  1-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  1-36  "
                                    57  	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    58  "
    000000                          59  call_math_error_:
    000000  aa  2 00000 3701 00     60  	epp4	2|0		save work ptr in pr4
    000001  aa  6 00024 2535 00     61  	spri3	sp|stack_frame.return_ptr	save return pointer
    000002  aa  6 00000 3731 00     62  	epbpsb	sp|0		get ptr to base of stack
    000003  aa   000100 6270 00     63  	push
    000004  aa  7 00040 2721 20
    000005  aa  6 00066 7561 00     64  	stq	code		save error code
    000006  aa   000200 2360 07     65  	ldq	stack_frame.support_bit,dl	set support bit
    000007  aa  6 00020 2561 00     66  	orsq	sp|stack_frame.flag_word
    000010  aa  6 00052 2501 00     67  	spri0	ops_ptr		save ptr to pl1_operators_
    000011  4a  4 00012 3521 20     68  	epp2	<call_math_error_>|[error_in_math_routine_]+1	set entry ptr
    000012  aa  6 00026 2521 00     69  	spri2	sp|stack_frame.entry_ptr
    000013  aa  6 00050 6501 00     70  	spri4	work_ptr		save work ptr where we can get at it
    000014  aa  6 00066 3521 00     71  	epp2	code		1st arg = code
    000015  aa  6 00056 2521 00     72  	spri2	arglist+2
    000016  aa   004000 4310 07     73  	fld	1*2048,dl
    000017  aa  6 00054 7571 00     74  	staq	arglist
    000020  0a   000020 2130 00     75  	epaq	*
    000021  aa  7 00026 7641 61     76  	lprplp	sb|stack_header.lot_ptr,*au
    000022  aa  6 00000 2541 00     77  	call	<math_error_>|[math_error_](arglist)
    000023  aa  6 00054 3501 00
    000024  4a  4 00010 3521 20
    000025  aa  6 00040 7531 00
    000026  aa  7 00036 6701 20
    000027  aa  6 00000 1731 00
    000030  aa  6 00040 0731 00
    000031  aa  6 00050 3521 20     78  	epp2	work_ptr,*	restore work ptr
    000032  aa  6 00052 3501 20     79  	epp0	ops_ptr,*		restore operator ptr
    000033  aa  7 00024 6521 00     80  	sprisp	sb|stack_header.stack_end_ptr	pop stack
    000034  aa  6 00020 3721 20     81  	eppsp	sp|stack_frame.prev_sp,*
    000035  aa   000000 7100 10     82  	tra	0,0		and return to caller
                                    83  "
                                    84  "	this entry is here just so entry_pt field in stack
                                    85  "	frame can point to an ALM entry.  it must be retained.
                                    86  "
                        000036      87  	entry	error_in_math_routine_
    000036                          88  error_in_math_routine_:
                                    89  	end
ENTRY SEQUENCES
     
    000036  5a   000013 0000 00
    000037  aa  7 00046 2721 20
    000040  0a   000036 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000042  5a   000003 000000 
    000043  5a   000043 600000 
    000044  aa   000000 000000 
    000045  55   000013 000002 
    000046  5a   000002 400003 
    000047  55   000006 000013 
    000050  aa  020 143 141 154
    000051  aa  154 137 155 141
    000052  aa  164 150 137 145
    000053  aa  162 162 157 162
    000054  aa  137 000 000 000
    000055  55   000024 000003 
    000056  0a   000037 500000 
    000057  55   000016 000003 
    000060  aa  026 145 162 162         error_in_math_routine_
    000061  aa  157 162 137 151
    000062  aa  156 137 155 141
    000063  aa  164 150 137 162
    000064  aa  157 165 164 151
    000065  aa  156 145 137 000
    000066  55   000034 000013 
    000067  0a   000000 400000 
    000070  55   000027 000003 
    000071  aa  020 143 141 154         call_math_error_
    000072  aa  154 137 155 141
    000073  aa  164 150 137 145
    000074  aa  162 162 157 162
    000075  aa  137 000 000 000
    000076  55   000002 000024 
    000077  6a   000000 400002 
    000100  55   000037 000003 
    000101  aa  014 163 171 155         symbol_table
    000102  aa  142 157 154 137
    000103  aa  164 141 142 154
    000104  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000105  aa   000000 000015 
    000106  aa   000000 000000 
    000107  aa   000000 000000 
    000110  aa   000000 000000 
    000111  aa   000000 000000 
    000112  aa   000000 000000 
    000113  5a   000013 000000 
    000114  5a   000034 000000 
    000115  aa   000000 000000 
    000116  aa   000000 000000 
    000117  aa   000000 000000 
    000120  aa   000000 000000 
    000121  5a   000024 000000 
    000122  aa   000000 000000 

EXTERNAL NAMES

    000123  aa  013 155 141 164         math_error_
    000124  aa  150 137 145 162
    000125  aa  162 157 162 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000126  aa   000004 000000 
    000127  55   000027 000016 
    000130  aa   000004 000000 
    000131  55   000061 000061 
    000132  aa   000001 000000 
    000133  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000134  5a   000064 000001 
    000135  5a   000066 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000042 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000014 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         math_error_|math_error_
    000011  5a   000073 0000 00
    000012  9a   777766 0000 46         call_math_error_|error_in_math_routine_
    000013  5a   000072 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   254212 231313 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000170 
    000020  aa   000000 000136 
    000021  aa   000147 000143 
    000022  aa   000160 000136 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000047 
    000067  aa   175453 017771 
    000070  aa   000000 117547 
    000071  aa   176336 000000 
    000072  aa   000114 000041 
    000073  aa   052721 247134 
    000074  aa   000000 105272 
    000075  aa   317215 400000 
    000076  aa   000125 000042 
    000077  aa   147777 464111 
    000100  aa   000000 115000 
    000101  aa   507463 000000 
    000102  aa   076163 160145          >spec>install>1110>call_math_error_.alm
    000103  aa   143076 151156 
    000104  aa   163164 141154 
    000105  aa   154076 061061 
    000106  aa   061060 076143 
    000107  aa   141154 154137 
    000110  aa   155141 164150 
    000111  aa   137145 162162 
    000112  aa   157162 137056 
    000113  aa   141154 155040 
    000114  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000115  aa   076151 156143 
    000116  aa   154165 144145 
    000117  aa   076163 164141 
    000120  aa   143153 137146 
    000121  aa   162141 155145 
    000122  aa   056151 156143 
    000123  aa   154056 141154 
    000124  aa   155040 040040 
    000125  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000126  aa   076151 156143 
    000127  aa   154165 144145 
    000130  aa   076163 164141 
    000131  aa   143153 137150 
    000132  aa   145141 144145 
    000133  aa   162056 151156 
    000134  aa   143154 056141 
    000135  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          54    arglist                  call_math_error_:    53,   72,   74,   77.
           0    call_math_error_         call_math_error_:    51,   59,   68.
        1170    call_offset              stack_header:        80.
          66    code                     call_math_error_:    54,   64,   71.
        1174    entry_offset             stack_header:        84.
          36    error_in_math_routine_   call_math_error_:    68,   87,   88.
                math_error_              call_math_error_:    77.
          52    ops_ptr                  call_math_error_:    53,   67,   79.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    call_math_error_:    69,
                                         stack_frame:   13.
          20    stack_frame.flag_word    call_math_error_:    66,
                                         stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      call_math_error_:    81,
                                         stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   call_math_error_:    61,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  call_math_error_:    65,
                                         stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     call_math_error_:    76,
                                         stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     call_math_error_:    80,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          50    work_ptr                 call_math_error_:    53,   70,   78.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
