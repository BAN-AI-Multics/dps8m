	COMPILATION LISTING OF SEGMENT bce_lock_mca
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1023.0 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 /****^  HISTORY COMMENTS:
        9*  1) change(85-09-11,Farley), approve(85-09-11,MCR6979),
       10*     audit(86-02-28,Coppola), install(86-03-21,MR12.0-1033):
       11*     Created for IMU
       12*     support (control MCA).
       13*                                                   END HISTORY COMMENTS */
       14 bce_lock_mca: proc (p_ss_info_ptr);
       15 
       16 /* Written by Paul K Farley June 1985 to allow the MCA operator interface 
       17*   to be either disabled (locked) or enabled (unlocked). */
       18 
       19 /* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */
       20 
       21 dcl  Me				char (10);
       22 dcl  arg_count			fixed bin;
       23 dcl  arg				char (arg_len) based (arg_ptr);
       24 dcl  arg_len			fixed bin (21);
       25 dcl  arg_ptr			ptr;
       26 dcl  args_expected			fixed bin;
       27 dcl  code				fixed bin (35);
       28 dcl  lock_mca			bit (1);
       29 dcl  mca_number			fixed bin (35);
       30 dcl  mca_to_unlock			char (4);
       31 dcl  P99				pic "99" based;
       32 dcl  com_err_			entry () options (variable);
       33 dcl  cu_$arg_count_rel		entry (fixed bin, ptr, fixed bin (35));
       34 dcl  cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
       35 dcl  cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
       36 dcl  ioa_				entry () options (variable);
       37 dcl  ocdcm_$reconfigure		entry (char (4), fixed bin, fixed bin (35));
       38 dcl  p_ss_info_ptr			ptr parameter;
       39 dcl  convert			builtin;
       40 
       41 
       42 	lock_mca = "1"b;
       43 	Me = "lock_mca";
       44 	args_expected = 0;
       45 	goto join;
       46 
       47 bce_lock_mca$bce_unlock_mca:
       48      entry (p_ss_info_ptr);
       49 
       50 	lock_mca = "0"b;
       51 	Me = "unlock_mca";
       52 	args_expected = 1;
       53 
       54 join:
       55 	ss_info_ptr = p_ss_info_ptr;
       56 	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
       57 	if code ^= 0 then do;
       58 	     call com_err_ (code, Me);
       59 	     return;
       60 	end;
       61 	if arg_count ^= args_expected then do;
       62 	     if lock_mca then call ioa_ ("lock_mca: This command takes NO arguments.^/Usage: lock_mca");
       63 	     else call ioa_ ("unlock_mca: This command requires one argument.^/Usage: unlock_mca MCA_NUMBER");
       64 	     return;
       65 	end;
       66 
       67 	if lock_mca then do;
       68 	     call ocdcm_$reconfigure ("", LOCK_MCA_INPUT, code);
       69 	     call ioa_ ("lock_mca: MCA interface^[ NOT^] locked.", (code ^= 0));
       70 	     return;
       71 	end;
       72 	call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
       73 	mca_number = cv_dec_check_ (arg, code);
       74 	if code ^= 0 | mca_number < 0 | mca_number > 31 then do;
       75 	     call ioa_ ("unlock_mca: Illegal MCA number. Range is 0 - 31.");
       76 	     return;
       77 	end;
       78 	mca_to_unlock = "M_" || convert (P99, mca_number);
       79 	call ocdcm_$reconfigure (mca_to_unlock, UNLOCK_MCA_INPUT, code);
       80 	call ioa_ ("unlock_mca: MCA(^a) interface^[ NOT^] unlocked.",
       81 	     convert (P99, mca_number), (code ^= 0));
       82 	return;
       83  /* Begin include file bce_subsystem_info_.incl.pl1 BIM 11/82 */
  1     2 
  1     3 /* format: style3 */
  1     4 
  1     5 /* Deleted unused items, Keith Loepere, 5/84 */
  1     6 
  1     7 
  1     8 /****^  HISTORY COMMENTS:
  1     9*  1) change(86-04-22,Farley), approve(86-07-18,MCR7439),
  1    10*     audit(86-10-08,Fawcett), install(86-10-20,MR12.0-1189):
  1    11*     Added request_handling_opr_aborts flag for save/restore.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 declare	ss_info_ptr	pointer;
  1    15 declare	1 ss_info		aligned based (ss_info_ptr),
  1    16 	  2 request_table_ptr
  1    17 			pointer,
  1    18 	  2 abort_label	label,
  1    19 	  2 name		char (32) unaligned,
  1    20 	  2 arg_list_ptr	pointer,
  1    21 	  2 info_ptr	pointer,
  1    22 	  2 flags           aligned,
  1    23 	    3 forbid_semicolons bit (1) unaligned,
  1    24 	    3 request_handling_opr_aborts bit (1) unaligned;
  1    25 
  1    26 /* End include file bce_subsystem_info_ */
       83 
       84  /*  START OF:	opc_reconfig_options.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
  2     2 
  2     3 	
  2     4 /****^  HISTORY COMMENTS:
  2     5*  1) change(85-09-09,Farley), approve(85-12-03,MCR7312),
  2     6*     audit(85-11-14,Fawcett), install(86-03-21,MR12.0-1033):
  2     7*     Add Lock and unlock
  2     8*     MCA.
  2     9*  2) change(85-12-03,Farley), approve(85-12-03,MCR7306),
  2    10*     audit(85-12-03,Fawcett), install(86-03-21,MR12.0-1033):
  2    11*     Fix bugs found while doing Dipper changes.
  2    12*  3) change(85-12-03,Farley), approve(85-12-03,MCR7312),
  2    13*     audit(85-12-03,Fawcett), install(86-03-21,MR12.0-1033):
  2    14*     Add BCE MCA lock and unlock.
  2    15*                                                   END HISTORY COMMENTS */
  2    16 
  2    17 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    18 	/*										*/
  2    19 	/* Purpose:									*/
  2    20 	/*										*/
  2    21 	/* This include file contains the possible operator console reconfiguration options. These are 	*/
  2    22 	/* passed to hphcs_$ocdcm_reconfigure to effect explicit console reconfiguration.		*/
  2    23 	/*										*/
  2    24 	/* Initial Coding:		06/18/83							*/
  2    25 	/*										*/
  2    26 	/* Author:		E. A. Ranzenbach	(Ranzenbach.Multics@M)			*/
  2    27 	/* Location:		System-M.							*/
  2    28 	/* Release:		MR10.2							*/
  2    29 	/*										*/
  2    30 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    31 	/*										*/
  2    32 	/* Modifications:									*/
  2    33 	/*										*/
  2    34 	/* Date    Author			Reason						*/
  2    35 	/*										*/
  2    36 	/* 840420  E. A. Ranzenbach		Added MAKE_UNAVAILABLE option.			*/
  2    37 	/* 850205  E. A. Ranzenbach		Added SEND_MC_IO option.				*/
  2    38 	/* 850520  Paul K Farley		Added LOCK_MCA_INPUT option.				*/
  2    39 	/*				Added UNLOCK_MCA_INPUT option.			*/
  2    40 	/*										*/
  2    41 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    42 
  2    43 /* format: off */
  2    44 
  2    45      dcl	(
  2    46 	NOP			init	(0),			/* just to make sure...		*/
  2    47 	ENABLE_CONSOLE_SERVICE	init	(1),			/* allow syserr and normal I/O...	*/
  2    48 	SUSPEND_CONSOLE_SERVICE	init	(2),			/* the opposite of ENABLE...		*/
  2    49 	MAKE_BOOTLOAD_CONSOLE	init	(3),			/* make the bootload console...	*/
  2    50 	MAKE_ALTERNATE_CONSOLE	init	(4),			/* add console to alternate list...	*/
  2    51 	MAKE_IO_DEVICE		init	(5),			/* release the console to IOI...	*/
  2    52 	MAKE_INOP_DEVICE		init	(6),			/* release the console to IOI...	*/
  2    53 	RESET_CONSOLE		init	(7),			/* reset the bootload console...	*/
  2    54 	CRASH_ON_CRF		init	(8),			/* CRASH on console recovery failure... */
  2    55 	RUN_ON_CRF		init	(9),			/* RUN on console recovery failure... 	*/
  2    56 	MAKE_UNAVAILABLE		init	(10),			/* put console into the OFF state...	*/
  2    57           SEND_MC_IO		init	(11),			/* forward all I/O to the MC console... */
  2    58           LOCK_MCA_INPUT		init	(12),			/* Disable input path from console to MCA(in IMU)... */
  2    59           UNLOCK_MCA_INPUT		init	(13)			/* Enable input path from console to MCA(in IMU)... */
  2    60 	)
  2    61 				fixed bin	(17)
  2    62 				internal static	options (constant);
  2    63 
  2    64 /*  END OF:	opc_reconfig_options.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
       84 
       85      end bce_lock_mca;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0826.3  bce_lock_mca.pl1                  >special_ldd>install>MR12.3-1114>bce_lock_mca.pl1
83           1    10/21/86  1251.6  bce_subsystem_info_.incl.pl1      >ldd>include>bce_subsystem_info_.incl.pl1
84           2    03/27/86  1120.0  opc_reconfig_options.incl.pl1     >ldd>include>opc_reconfig_options.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LOCK_MCA_INPUT                  000001 constant        fixed bin(17,0)          initial dcl 2-45 set ref 68*
Me                              000100 automatic       char(10)                 packed unaligned dcl 21 set ref 43* 51* 58*
P99                                    based           picture(2)               packed unaligned dcl 31 ref 78 80 80
UNLOCK_MCA_INPUT                000000 constant        fixed bin(17,0)          initial dcl 2-45 set ref 79*
arg                                    based           char                     packed unaligned dcl 23 set ref 73*
arg_count                       000103 automatic       fixed bin(17,0)          dcl 22 set ref 56* 61
arg_len                         000104 automatic       fixed bin(21,0)          dcl 24 set ref 72* 73 73
arg_list_ptr             16            based           pointer                  level 2 dcl 1-15 set ref 56* 72*
arg_ptr                         000106 automatic       pointer                  dcl 25 set ref 72* 73
args_expected                   000110 automatic       fixed bin(17,0)          dcl 26 set ref 44* 52* 61
code                            000111 automatic       fixed bin(35,0)          dcl 27 set ref 56* 57 58* 68* 69 72* 73* 74 79* 80
com_err_                        000010 constant        entry                    external dcl 32 ref 58
convert                                                builtin function         dcl 39 ref 78 80 80
cu_$arg_count_rel               000012 constant        entry                    external dcl 33 ref 56
cu_$arg_ptr_rel                 000014 constant        entry                    external dcl 34 ref 72
cv_dec_check_                   000016 constant        entry                    external dcl 35 ref 73
ioa_                            000020 constant        entry                    external dcl 36 ref 62 63 69 75 80
lock_mca                        000112 automatic       bit(1)                   packed unaligned dcl 28 set ref 42* 50* 62 67
mca_number                      000113 automatic       fixed bin(35,0)          dcl 29 set ref 73* 74 74 78 80 80
mca_to_unlock                   000114 automatic       char(4)                  packed unaligned dcl 30 set ref 78* 79*
ocdcm_$reconfigure              000022 constant        entry                    external dcl 37 ref 68 79
p_ss_info_ptr                          parameter       pointer                  dcl 38 ref 14 47 54
ss_info                                based           structure                level 1 dcl 1-15
ss_info_ptr                     000116 automatic       pointer                  dcl 1-14 set ref 54* 56 72

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
CRASH_ON_CRF                           internal static fixed bin(17,0)          initial dcl 2-45
ENABLE_CONSOLE_SERVICE                 internal static fixed bin(17,0)          initial dcl 2-45
MAKE_ALTERNATE_CONSOLE                 internal static fixed bin(17,0)          initial dcl 2-45
MAKE_BOOTLOAD_CONSOLE                  internal static fixed bin(17,0)          initial dcl 2-45
MAKE_INOP_DEVICE                       internal static fixed bin(17,0)          initial dcl 2-45
MAKE_IO_DEVICE                         internal static fixed bin(17,0)          initial dcl 2-45
MAKE_UNAVAILABLE                       internal static fixed bin(17,0)          initial dcl 2-45
NOP                                    internal static fixed bin(17,0)          initial dcl 2-45
RESET_CONSOLE                          internal static fixed bin(17,0)          initial dcl 2-45
RUN_ON_CRF                             internal static fixed bin(17,0)          initial dcl 2-45
SEND_MC_IO                             internal static fixed bin(17,0)          initial dcl 2-45
SUSPEND_CONSOLE_SERVICE                internal static fixed bin(17,0)          initial dcl 2-45

NAMES DECLARED BY EXPLICIT CONTEXT.
bce_lock_mca                    000133 constant        entry                    external dcl 14
bce_lock_mca$bce_unlock_mca     000151 constant        entry                    external dcl 47
join                            000164 constant        label                    dcl 54 set ref 45

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       620         644     502         630
Length      1064     502        24         204     116           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
bce_lock_mca                        136 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
bce_lock_mca             000100 Me                          bce_lock_mca
                         000103 arg_count                   bce_lock_mca
                         000104 arg_len                     bce_lock_mca
                         000106 arg_ptr                     bce_lock_mca
                         000110 args_expected               bce_lock_mca
                         000111 code                        bce_lock_mca
                         000112 lock_mca                    bce_lock_mca
                         000113 mca_number                  bce_lock_mca
                         000114 mca_to_unlock               bce_lock_mca
                         000116 ss_info_ptr                 bce_lock_mca

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count_rel             cu_$arg_ptr_rel               cv_dec_check_
ioa_                          ocdcm_$reconfigure

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000130        42 000140        43 000142        44 000145        45 000146        47 000147        50 000156
     51 000157        52 000162        54 000164        56 000170        57 000203        58 000205        59 000222
     61 000223        62 000226        63 000245        64 000261        67 000262        68 000264        69 000301
     70 000324        72 000325        73 000347        74 000372        75 000400        76 000414        78 000415
     79 000431        80 000444        82 000500


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
