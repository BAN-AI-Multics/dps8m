	COMPILATION LISTING OF SEGMENT rcp_lock_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  0948.4 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 rcp_lock_:  procedure;
       14 
       15 /*	This program is an internal RCP interface.
       16**	Created on 12/07/74 by Bill Silver.
       17**
       18**	This program manages the locks that control RCPD and RCS.
       19**	It contains the following two entry points:
       20**	     1.	lock   -	Lock the segment.
       21**	     2.	unlock -	Unlock the segment.
       22**/
       23 
       24 /*		ARGUMENT  DATA		*/
       25 
       26 dcl	arg_ecode		fixed bin(35);	/* (O) error_table_ code. */
       27 dcl	arg_lock_info_ptr	ptr;		/* (I) Pointer to lock info structure. */
       28 
       29 
       30 /*		AUTOMATIC  DATA		*/
       31 
       32 dcl	ecode		fixed bin(35);	/* error_table_ code. */
       33 dcl	time_locked	fixed bin(71);	/* Length of time lock was locked. */
       34 dcl	time_waiting	fixed bin(71);	/* Length of time waiting for lock. */
       35 
       36 
       37 /*		EXTERNAL ENTRIES CALLED	*/
       38 
       39 dcl	error_table_$invalid_lock_reset  fixed bin(35)  external;
       40 
       41 dcl	admin_gate_$guaranteed_eligibility_off	entry  options(variable);
       42 dcl	admin_gate_$guaranteed_eligibility_on	entry  options(variable);
       43 dcl	rcp_set_lock_$meter_lock    entry  (bit(36) aligned,fixed bin,fixed bin(71),fixed bin(71),fixed bin(35));
       44 dcl	rcp_set_lock_$meter_unlock  entry  (bit(36) aligned,fixed bin(71),fixed bin(71),fixed bin(35));
       45 /*	*/
  1     1 /*	Begin  include file ... rcp_com_seg.incl.pl1
  1     2*   *
  1     3*   *	Created on 11/20/74 by Bill Silver.
  1     4*   *	Modified on 09/19/77 by R.J.C. Kissel to add label authentication bits.
  1     5*   *	Modified on 12/09/78 by Michael R. Jordan to add removable media bit and label_type.
  1     6*   *	Modified 1/79 by R.J.C. Kissel to add disk label authentication bits.
  1     7*   *	Modified 2/79 by Michael R. Jordan to add volume_density.
  1     8*   *	Modified 11/84 by Paul Farley to add fips flag.
  1     9*   *      Modified 1/3/85 by Fawcett to allow room for mca device type
  1    10*   *	Modified 02/85 by Paul Farley to add no_protect and opr_int_available flags.
  1    11*   *	This include file defines the Resource Control Package communication segment.
  1    12*   *	This segment is used to communicate requests between the various internal
  1    13*   *	parts of RCP.
  1    14**/
  1    15 
  1    16 /****^  HISTORY COMMENTS:
  1    17*  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
  1    18*     audit(85-12-09,CLJones), install(86-03-21,MR12.0-1033):
  1    19*     Support MCA and FIPS.
  1    20*                                                   END HISTORY COMMENTS */
  1    21 
  1    22 dcl  lock_info_ptr ptr;				/* Pointer to lock info structure. */
  1    23 dcl  rcs_ptr ptr;					/* Pointer to base of RCS. */
  1    24 dcl  rcse_ptr ptr;					/* Pointer to an RCS entry. */
  1    25 
  1    26 dcl 1 based_rcp_id based aligned,			/* Overlay of an rcp_id. */
  1    27    (2 id_count fixed bin (17),			/* Unique count index. */
  1    28     2 rcse_off bit (18)) unaligned;			/* Offset of rcp_com_seg entry. */
  1    29 
  1    30 dcl 1 rcs based (rcs_ptr) aligned,			/* Begin at word zero of rcp_com_seg. */
  1    31     2 lock_info like lock_info,			/* Data used to lock this segment. */
  1    32     2 ws_maxs (8) fixed bin (19),			/* Max IOI workspace size in words. */
  1    33     2 ws_pmaxs (8) fixed bin (19),			/* Max IOI workspace size for priv attachments. */
  1    34     2 to_maxs (8) fixed bin (71),			/* Max IOI time-out intervals in microseconds. */
  1    35     2 sys_directory char (32),			/* Directory  used to define a system process. */
  1    36     2 sys_acs char (32),				/* Entry name used to define a system process. */
  1    37     2 acs_directory char (32),			/* Directory containing device ACSs. */
  1    38     2 id_count fixed bin (35),			/* Counter used to form rcp_id. */
  1    39     2 max_entries fixed bin,				/* Maximum number of entries allowed. */
  1    40     2 num_entries fixed bin,				/* Total number of entries. */
  1    41     2 first_free_off bit (18),			/* Offset of first free entry. */
  1    42     2 entry (0 refer (rcs.num_entries))			/* Array of request entries. */
  1    43      like rcse,					/* See structure below. */
  1    44     2 end bit (36);					/* End of rcp_com_seg. */
  1    45 
  1    46 dcl 1 lock_info based (lock_info_ptr) aligned,		/* Used to meter locking. */
  1    47     2 lock bit (36),				/* The lock itself. */
  1    48     2 num_locks fixed bin (35),			/* Number of times locked. */
  1    49     2 num_lock_waits fixed bin (35),			/* Number of lock waits. */
  1    50     2 time_of_lock fixed bin (71),			/* Time of last lock. */
  1    51     2 tot_lock_time fixed bin (71),			/* Total time locked. */
  1    52     2 tot_wait_time fixed bin (71),			/* Total time waiting for lock. */
  1    53     2 starting_time fixed bin (71);			/* Time metering started. */
  1    54 
  1    55 dcl 1 rcse based (rcse_ptr) aligned,			/* Up to state must = rcpd.device. */
  1    56     2 device_name char (8),				/* Name of device associated with this entry. */
  1    57     2 volume_name char (32),				/* Volume name.  Blank => no volume. */
  1    58     2 dtypex fixed bin,				/* Device type index. */
  1    59     2 model fixed bin,				/* Device model number. */
  1    60     2 num_qualifiers fixed bin,			/* Number of device qualifiers. */
  1    61     2 qualifiers (4) fixed bin (35),			/* Device qualifiers. */
  1    62     2 state_time fixed bin (71),			/* Time device put into current state. */
  1    63     2 state fixed bin,				/* 0 - free       1 - assigning  2 - assigned */
  1    64 						/* 3 - attaching  4 - attached   5 - completed. */
  1    65 
  1    66 /*	*	*	*	*	** Following fields are unique to RCS entry. */
  1    67     2 kind fixed bin,				/* 1 => attach, 2 => assign */
  1    68     2 free_off bit (18),				/* Offset of next free entry.  0 => not free. */
  1    69     2 user_off bit (18),				/* Offset of next entry in user list. */
  1    70     2 device_off bit (18),				/* Offset of device entry in RCPD. */
  1    71     2 volume_off bit (18),				/* Offset of volume entry in RCPD. */
  1    72     2 rcse_off bit (18),				/* Offset of associated RCS entry. */
  1    73     2 caller_level fixed bin,				/* Caller's validation level. */
  1    74     2 disposition bit (1),				/* ON => retain, OFF => unassign. */
  1    75     2 flags,					/* Special info flags. */
  1    76      (3 device bit (1),				/* ON => assigning a specific device. */
  1    77       3 priv bit (1),				/* ON => attached with IOI privilege. */
  1    78       3 system bit (1),				/* ON => assigned to a system process. */
  1    79       3 t_and_d bit (1),				/* ON => T&D attachment. */
  1    80       3 volume bit (1),				/* ON => volume associated with this device. */
  1    81       3 writing bit (1),				/* ON => writing on volume. */
  1    82       3 have_auth bit (1),				/* ON => tape volume authenticated. */
  1    83       3 need_auth bit (1),				/* ON => tape volume needs authentication. */
  1    84       3 auth_set bit (1),				/* ON => "have_auth" has been set. */
  1    85       3 preload_allowed bit (1),			/* ON => preloading of volumes is allowed. */
  1    86       3 preloaded bit (1),				/* ON => volume may be loaded on device. */
  1    87       3 not_removable_media bit (1),			/* ON => cannot remove volume from device. */
  1    88       3 disk_ss_pack bit (1),				/* ON => disk is a storage system volume. */
  1    89       3 disk_copy_of_ss_pack bit (1),			/* ON => disk is a copy of a storage system volume. */
  1    90       3 disk_io_pack bit (1),				/* ON => disk has label but is not storage system. */
  1    91       3 disk_unregistered bit (1),			/* ON => disk is unregistered storage system volume. */
  1    92       3 disk_unreadable bit (1),			/* ON => io error reading disk label. */
  1    93       3 must_auto_register bit (1),			/* ON => unregistered volume requested */
  1    94       3 fips bit (1),				/* ON => FIPS device. */
  1    95       3 no_protect bit (1),				/* ON => device has no protect sw. */
  1    96       3 opr_int_available bit (1),			/* ON => device connected to MPC with OI button. */
  1    97       3 unused bit (6),
  1    98       3 volume_density_index fixed bin (3) unsigned,	/* Density of volume */
  1    99       3 label_type fixed bin (6) unsigned)unaligned,	/* Type of label read by RCP. */
  1   100     2 rcp_id bit (36),				/* ID of this entry. */
  1   101     2 event_id fixed bin (71),			/* Caller's event channel ID. */
  1   102     2 process_id bit (36),				/* ID of calling process. */
  1   103     2 group_id char (32),				/* Group ID of calling process. */
  1   104     2 ecode fixed bin (35),				/* Assignment error code. */
  1   105     2 version_num fixed bin,				/* Device info version number. */
  1   106     2 workspace_max fixed bin (19),			/* Max size of IOI workspace buffer. */
  1   107     2 timeout_max fixed bin (71),			/* Max IOI time-out interval. */
  1   108     2 ioi_index fixed bin,				/* IOI device index. */
  1   109     2 workspace_ptr ptr,				/* Pointer to IOI workspace buffer. */
  1   110     2 caller_comment char (64);			/* Caller's comment. */
  1   111 
  1   112 /*	End of include file ... rcp_com_seg.incl.pl1	*/
       46 
       47 /*	*/
       48 /*	This entry point is called to lock the specified lock.  Before locking we
       49**	must make sure that we will not lose eligibility while the lock is locked.
       50**	We will meter any time that we have to wait for the lock.  We will wait for
       51**	up to 2 minutes for the lock.  We will remember when the lock was locked
       52**	so we can calculate other meters at unlock time.
       53**/
       54 lock:  entry  (arg_lock_info_ptr,arg_ecode);
       55 
       56 	lock_info_ptr = arg_lock_info_ptr;	/* Get pointer to lock info structure. */
       57 
       58 	call admin_gate_$guaranteed_eligibility_on();
       59 
       60 	call rcp_set_lock_$meter_lock (lock_info.lock,120,lock_info.time_of_lock,time_waiting,ecode);
       61 	if   (ecode ^= 0)  &		/* Any trouble locking? */
       62 	     (ecode ^= error_table_$invalid_lock_reset)
       63 	     then do;			/* Yes, lock not locked. */
       64 		arg_ecode = ecode;		/* Abort lock. */
       65 		call admin_gate_$guaranteed_eligibility_off();
       66 		return;
       67 	     end;
       68 
       69 	lock_info.num_locks = lock_info.num_locks + 1;
       70 	if   time_waiting ^= 0
       71 	     then lock_info.num_lock_waits = lock_info.num_lock_waits + 1;
       72 	lock_info.tot_wait_time = lock_info.tot_wait_time + time_waiting;
       73 
       74 	arg_ecode = 0;
       75 	return;
       76 /*	*/
       77 /*	This entry is called to unlock the specified lock.
       78**	After it is unlocked we must turn OFF the guaranteed eligibility.
       79**	We will compute the length of time the lock was locked.
       80**/
       81 unlock:  entry  (arg_lock_info_ptr);
       82 
       83 	lock_info_ptr = arg_lock_info_ptr;	/* Get pointer to lock info structure. */
       84 
       85 	call rcp_set_lock_$meter_unlock (lock_info.lock,lock_info.time_of_lock,time_locked,ecode);
       86 
       87 	call admin_gate_$guaranteed_eligibility_off();
       88 
       89 	lock_info.tot_lock_time = lock_info.tot_lock_time + time_locked;
       90 
       91 	end  rcp_lock_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0807.0  rcp_lock_.pl1                     >spec>install>1111>rcp_lock_.pl1
46           1    03/27/86  1120.0  rcp_com_seg.incl.pl1              >ldd>include>rcp_com_seg.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
admin_gate_$guaranteed_eligibility_off
                                000012 constant        entry                    external dcl 41 ref 65 87
admin_gate_$guaranteed_eligibility_on
                                000014 constant        entry                    external dcl 42 ref 58
arg_ecode                              parameter       fixed bin(35,0)          dcl 26 set ref 54 64* 74*
arg_lock_info_ptr                      parameter       pointer                  dcl 27 ref 54 56 81 83
ecode                           000100 automatic       fixed bin(35,0)          dcl 32 set ref 60* 61 61 64 85*
error_table_$invalid_lock_reset 000010 external static fixed bin(35,0)          dcl 39 ref 61
lock                                   based           bit(36)                  level 2 dcl 1-46 set ref 60* 85*
lock_info                              based           structure                level 1 dcl 1-46
lock_info_ptr                   000106 automatic       pointer                  dcl 1-22 set ref 56* 60 60 69 69 70 70 72 72 83* 85
                                                                                  85 89 89
num_lock_waits            2            based           fixed bin(35,0)          level 2 dcl 1-46 set ref 70* 70
num_locks                 1            based           fixed bin(35,0)          level 2 dcl 1-46 set ref 69* 69
rcp_set_lock_$meter_lock        000016 constant        entry                    external dcl 43 ref 60
rcp_set_lock_$meter_unlock      000020 constant        entry                    external dcl 44 ref 85
rcse                                   based           structure                level 1 dcl 1-55
time_locked                     000102 automatic       fixed bin(71,0)          dcl 33 set ref 85* 89
time_of_lock              4            based           fixed bin(71,0)          level 2 dcl 1-46 set ref 60* 85*
time_waiting                    000104 automatic       fixed bin(71,0)          dcl 34 set ref 60* 70 72
tot_lock_time             6            based           fixed bin(71,0)          level 2 dcl 1-46 set ref 89* 89
tot_wait_time            10            based           fixed bin(71,0)          level 2 dcl 1-46 set ref 72* 72

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
based_rcp_id                           based           structure                level 1 dcl 1-26
rcs                                    based           structure                level 1 dcl 1-30
rcs_ptr                                automatic       pointer                  dcl 1-23
rcse_ptr                               automatic       pointer                  dcl 1-24

NAMES DECLARED BY EXPLICIT CONTEXT.
lock                            000015 constant        entry                    external dcl 54
rcp_lock_                       000003 constant        entry                    external dcl 13
unlock                          000114 constant        entry                    external dcl 81

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       276         320     154         306
Length       510     154        22         153     122           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rcp_lock_                            86 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rcp_lock_                000100 ecode                       rcp_lock_
                         000102 time_locked                 rcp_lock_
                         000104 time_waiting                rcp_lock_
                         000106 lock_info_ptr               rcp_lock_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
admin_gate_$guaranteed_eligibility_off                      admin_gate_$guaranteed_eligibility_on
rcp_set_lock_$meter_lock      rcp_set_lock_$meter_unlock

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$invalid_lock_reset




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000002        54 000010        56 000022        58 000026        60 000032        61 000054        64 000061
     65 000063        66 000067        69 000070        70 000075        72 000103        74 000106        75 000110
     81 000111        83 000121        85 000125        87 000142        89 000147        91 000153


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
