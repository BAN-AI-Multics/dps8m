ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.3-1114>bootload_formline.alm                                                                                                                  
ASSEMBLED ON:	11/11/89  0936.4 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                                     8  
                                     9  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    10  "
                                    11  "
                                    12  "
                                    13  "    BOOTLOAD_FORMLINE
                                    14  "
                                    15  "
                                    16  "    This is a primitive string mainpulator, on the lines of formline_,
                                    17  "    for use before collection 1 is prelinked, and the real formline_
                                    18  "    available.
                                    19  "
                                    20  "    It always formats into a supplied string, since console i/o is another
                                    21  "    story.
                                    22  "
                                    23  "    Like the rest of bbl0, it is impure (we have no stack).
                                    24  "
                                    25  "    CALLING SEQUENCE
                                    26  "    tsx2		bootload_formline
                                    27  "    arg	control_string
                                    28  "    arg  output_string
                                    29  "    dec  maximum output string length
                                    30  "    dec  nargs
                                    31  "    arg  arg_one_addr   (offset in bound_bootload_0)
                                    32  "    arg  arg_two_addr   (ditto)
                                    33  "
                                    34  "    areg contains length of rtrim'd string on return
                                    35  "
                                    36  "    actual invocation is with the formline macro ---
                                    37  "
                                    38  "    formline	(control string),output,arg1,arg2,arg3,...argN
                                    39  "
                                    40  "    SUPPORTED ^ thingies:
                                    41  "
                                    42  "     ^a one word of ascii chars
                                    43  "     ^b one word of BCD chars    (^g for you bos fans)
                                    44  "     ^A acc string
                                    45  "     ^o octal number, leading zero suppression
                                    46  "     ^w octal number, simple fullword
                                    47  " 
                                    48  
                                    49  
    000000                          50  	name	bootload_formline
                        000032      51  	segdef	bootload_formline
                                    52  
                                    53  	include	eis_micro_ops
                        000020     1-1  	bool	insm,020
                        000040     1-2  	bool	enf,040
                        000060     1-3  	bool	ses,060
                        000100     1-4  	bool	mvzb,100
                        000120     1-5  	bool	mvza,120
                        000140     1-6  	bool	mfls,140
                        000160     1-7  	bool	mflc,160
                        000200     1-8  	bool	insb,200
                        000220     1-9  	bool	insa,220
                        000240    1-10  	bool	insn,240
                        000260    1-11  	bool	insp,260
                        000300    1-12  	bool	ign,300
                        000320    1-13  	bool	mvc,320
                        000340    1-14  	bool	mses,340
                        000360    1-15  	bool	mors,360
                        000400    1-16  	bool	lte,400
                        000420    1-17  	bool	cht,420
                                  1-18  "
                        000010    1-19  	bool	if0,10
                        000004    1-20  	bool	if1,4
                        000002    1-21  	bool	if2,2
                        000001    1-22  	bool	if3,1
                                    54  	include	bootload_equs
                                   2-1  " BEGIN INCLUDE FILE bootload_equs.incl.alm
                                   2-2  " Created 10/04/80 W. Olin Sibert, mostly from bootstrap1
                                   2-3  " Modified by almost everyone, it seems.
                                   2-4  " Last modified for MR11 bootload Multics addresses starting in 1983 by
                                   2-5  "     Keith Loepere.
                                   2-6  "
                                   2-7  " This include file describes various things used by the programs in
                                   2-8  " bound_bootload_0.
                                   2-9  
                                  2-10  " Default pointer register usage:
                                  2-11  
                        000000    2-12  	equ	ds,0		" Descriptor segment
                        000001    2-13  	equ	seg2,1		" Another temporary
                        000002    2-14  	equ	mb,2		" IOM mailbox
                        000003    2-15  	equ	slt,3		" Segment loading table (SLT)
                        000004    2-16  	equ	nt,4		" Name_table
                        000005    2-17  	equ	prb,5		" Physical_record_buffer
                        000006    2-18  	equ	seg,6		" Temporary
                        000007    2-19  	equ	fv,7		" Interrupt and fault vectors
                                  2-20  
                                  2-21  " Macros
                                  2-22  
                                  2-23  	macro	equ_o
                              1   2-24  	maclist	off,save
                              2   2-25  	bool	&U,&2
                              3   2-26  	equ	&1,&U
                              4   2-27  	maclist	restore
                              5   2-28  &end
                                  2-29  
                                  2-30  	macro	set_o
                              1   2-31  	maclist	off,save
                              2   2-32  	bool	&U,&2
                              3   2-33  	set	&1,&U
                              4   2-34  	maclist	restore
                              5   2-35  &end
                                  2-36  
                                  2-37  	macro	include_nolist
                              1   2-38  	maclist	off,save
                              2   2-39  	include	&1
                              3   2-40  	maclist	restore
                              4   2-41  &end
                                  2-42  
                                  2-43  	macro	Bpush
                              1   2-44  	stx2	bootload_0$entry_stack_ptr,id
                              2   2-45  	ttn	bootload_error$out_of_stack
                              3   2-46  &end
                                  2-47  
                                  2-48  " 	Breturn	offset-from-return-point
                                  2-49  
                                  2-50  	macro	Breturn
                              1   2-51  	ldx2	bootload_0$entry_stack_ptr,di
                              2   2-52  	tra	0+&1,x2
                              3   2-53  &end
                                  2-54  
                                  2-55  "	Bentry	name,offset-from-return-point
                                  2-56  
                                  2-57  	macro	Bentry
                              1   2-58  	segdef	&1
                              2   2-59  	macro	&1_return
                              3   2-60  	Breturn	&<&K,2&[0&;&2&]
                              4   2-61  &&end
                              5   2-62  &end
                                  2-63  
                                  2-64  " 	Bentry_internal	name,offset_from_return_point
                                  2-65  
                                  2-66  	macro	Bentry_internal
                              1   2-67  	macro	&1_return	
                              2   2-68  	Breturn	&<&K,2&[0&;&2&]
                              3   2-69  &&end
                              4   2-70  &end
                                  2-71  
                                  2-72  
                                  2-73  " Definitions
                                  2-74  
                                  2-75  	equ_o	bostoe_absloc,10000		" bos_teohold
                                  2-76  	equ_o	bostoe_lth,2000
                                  2-77  
                                  2-78  	equ_o	fgbx_absloc,24000		" now in bce toehold
                                  2-79  	equ_o	fgbx_lth,2000
                                  2-80  
                                  2-81  	equ_o	toe_absloc,24000		" bootload Multics toehold
                                  2-82  	equ_o	toe_lth,4000		" This starts at a 0 mod 4 
                                  2-83  					" page address.  It is 
                                  2-84  					" bound as first element
                                  2-85  					" of bound_bootload_0.
                                  2-86  
                                  2-87  	equ_o	bbl0_absloc,24000		" bound_bootload_0 location
                                  2-88  	equ_o	bbl0_lth,22000		" and length.
                                  2-89  
                                  2-90  	equ_o	toedata_absloc,46000	" toehold_data
                                  2-91  	equ_o	toedata_lth,4000
                                  2-92  
                                  2-93  	equ_o	upt_absloc,52000		" unpaged_page_tables
                                  2-94  	equ_o	upt_lth,2000
                                  2-95  
                                  2-96  	equ_o	iupt_absloc,54000		" init_unpaged_page_tables
                                  2-97  	equ_o	iupt_lth,2000
                                  2-98  
                                  2-99  	equ_o	bkpt_absloc,56000		" breakpoint_page
                                 2-100  	equ_o	bkpt_lth,2000
                                 2-101  
                                 2-102  	equ_o	prb_absloc,60000		" physical_record_buffer
                                 2-103  	equ_o	prb_lth,6000		" memory past here up for 
                                 2-104  					" grabs
                                 2-105  
                                 2-106  " END INCLUDE FILE bootload_equs.incl.alm
                                    55  
                                    56  " 
                                    57  
                                    58  	mod	8
    000000                          59  register_save_area:
    000000                          60  	bss	,8
    000010                          61  pointer_register_save_area:
    000010                          62  	bss	,16
                                    63  
                                    64  
                                    65  " Arg list definition
                        000000      66  	equ	control_string,0
                        000001      67  	equ	output_string,1
                        000002      68  	equ	output_string_limit,2
                        000003      69  	equ	n_args,3
                        000004      70  	equ	args,4
                                    71  
    000030                          72  	bss	return_address,1	" temp for calculation
    000031                          73  	bss	arg_count,1	" to record usage of them
    000032                          74  bootload_formline:
    000032  0a   000000 7530 00     75  	sreg	register_save_area
    000033  0a   000010 2540 00     76  	spri	pointer_register_save_area
                                    77  
                                    78  " Calculate return address
                                    79  " Don't push return address on stack until it has been bumped
                                    80  
    000034  0a   000030 7420 00     81  	stx2	return_address
    000035  aa   000003 7220 12     82  	lxl2	n_args,x2		" get n substitutions
    000036  0a   000031 4420 00     83  	sxl2	arg_count		" for check of ^ count
    000037  0a   000030 0220 00     84  	adlx2	return_address	" skip them
    000040  aa   000004 6220 12     85  	eax2	4,x2		" skip fixed arguments
                                    86  
                                    87  	Bpush
    000041  4a  4 00010 7421 20         	stx2	bootload_0$entry_stack_ptr,id
    000042  4a  4 00012 6065 20         	ttn	bootload_error$out_of_stack
                                    88  
    000043  0a   000030 2220 00     89  	ldx2	return_address	" restore to first arg
                                    90  
                                    91  " Set up for input and output strings
                                    92  " set registers that we will use
                                    93  
    000044  aa   000000 3714 32     94  	epp5	control_string,x2*
    000045  0a   000764 7070 00     95  	tsx7	get_input_char      " count in a
    000046  aa   000777 3750 07     96  	ana	=o000777,dl	" go away, spaces
    000047  aa   000000 6210 05     97  	eax1	0,al		" count in x1
                                    98  
    000050  aa   000001 3734 32     99  	epp7	output_string,x2*   " assumed word aligned
    000051  aa   000002 7240 12    100  	lxl4	output_string_limit,x2 " dont scribble randomly
    000052  0a   000763 4440 00    101  	sxl4	return.output_length
                                   102  	
                                   103  
    000053  aa   000004 6220 12    104  	eax2	args,x2		" Advance X2 to first arg
                                   105   
                                   106  " 
                                   107  
                                   108  " Now we loop down characters
                                   109  " This is dumb, but compact
                                   110  
    000054                         111  main_char_loop:
    000054  aa   000001 1610 03    112  	sbx1	1,du
    000055  0a   000746 6040 00    113  	tmi	return_to_caller
    000056  0a   000064 6000 00    114  	tze	main_char_loop.get_last_char
    000057  0a   000764 7070 00    115  	tsx7	get_input_char
                                   116  
    000060  aa   000136 1150 07    117  	cmpa	=o000136,dl		" ^
    000061  0a   000067 6000 00    118  	tze	main_char_loop.special_char
    000062                         119  main_char_loop.circumflex:
    000062  0a   000774 7070 00    120  	tsx7	put_one_char
    000063  0a   000054 7100 00    121  	tra	main_char_loop
                                   122  
    000064                         123  main_char_loop.get_last_char:
    000064  0a   000764 7070 00    124  	tsx7	get_input_char
    000065                         125  main_char_loop.last_char_in_A:
    000065  0a   000774 7070 00    126  	tsx7	put_one_char	" trailing ^ is just left
    000066  0a   000746 7100 00    127  	tra	return_to_caller
                                   128  
    000067                         129  main_char_loop.special_char:
    000067  0a   000764 7070 00    130  	tsx7	get_input_char
    000070  aa   000001 1610 03    131  	sbx1	1,du
    000071  aa   000136 1150 07    132  	cmpa	=o000136,dl		" ^
    000072  0a   000062 6000 00    133  	tze	main_char_loop.circumflex
    000073  0a   000031 2360 00    134  	ldq	arg_count			 " progressively reduced
    000074  0a   000114 6000 00    135  	tze	main_char_loop.unknown_control " just print it
    000075  aa   000001 1760 07    136  	sbq	1,dl
    000076  0a   000031 7560 00    137  	stq	arg_count		           " use one up
                                   138  
    000077  aa   000141 1150 07    139  	cmpa	=o000141,dl		" a
    000100  0a   000123 6000 00    140  	tze	main_char_loop.word_ascii
    000101  aa   000101 1150 07    141  	cmpa	=o000101,dl		" A
    000102  0a   000127 6000 00    142  	tze	main_char_loop.acc_string
    000103  aa   000142 1150 07    143  	cmpa	=o000142,dl		" b
    000104  0a   000142 6000 00    144  	tze	main_char_loop.word_bcd
    000105  aa   000144 1150 07    145  	cmpa	=o000144,dl		" d
    000106  0a   000156 6000 00    146  	tze	main_char_loop.word_decimal
    000107  aa   000157 1150 07    147  	cmpa	=o000157,dl		" o
    000110  0a   000174 6000 00    148  	tze	main_char_loop.octal_word_sup
    000111  aa   000167 1150 07    149  	cmpa	=o000167,dl		" w
    000112  0a   000176 6000 00    150  	tze	main_char_loop.octal_word
                                   151  
                                   152  " no such thingie
    000113  0a   000031 0540 00    153  	aos	arg_count			" don't use it up after all
    000114                         154  main_char_loop.unknown_control:
    000114  0a   000122 7550 00    155  	sta	main_char_loop.save_char
    000115  aa   000136 2350 07    156  	lda	=o000136,dl		" ^
    000116  0a   000774 7070 00    157  	tsx7	put_one_char
    000117  0a   000122 2350 00    158  	lda	main_char_loop.save_char
    000120  0a   000774 7070 00    159  	tsx7	put_one_char
    000121  0a   000054 7100 00    160  	tra	main_char_loop
                                   161  
    000122                         162  main_char_loop.save_char:
    000122                         163  	bss	,1
                                   164  " 
                                   165  
    000123                         166  main_char_loop.word_ascii:
                                   167  
    000123  0a   001005 7070 00    168  	tsx7	get_arg_address		" to x6
    000124  aa   000000 3514 36    169  	epp1	0,x6*			" pr1 -> word of chars
    000125  aa   000004 2350 07    170  	lda	4,dl		" count
                                   171  
    000126  0a   000232 7100 00    172  	tra	ascii_common
                                   173  
    000127                         174  main_char_loop.acc_string:
                                   175  
    000127  0a   001005 7070 00    176  	tsx7	get_arg_address
    000130  aa   000000 3514 36    177  	epp1	0,x6*			" word with count
    000131  0a   000141 4500 00    178  	stz	acc_string.temp
    000132  aa  0 00000 1005 00    179  	mlr	(pr),()
    000133  aa   100000 000001     180  	desc9a	1|0,1
    000134  0a   000141 600001     181  	desc9a	acc_string.temp(3),1	" grab count to LOWER
    000135  aa   000001 6230 00    182  	eax3	1
    000136  aa  1 00000 5005 13    183  	a9bd	1|0,x3			" skip count
    000137  0a   000141 2350 00    184  	lda	acc_string.temp
    000140  0a   000260 7100 00    185  	tra	ascii.no_trim
                                   186  
    000141                         187  acc_string.temp:
    000141                         188  	bss	,1
                                   189  
    000142                         190  main_char_loop.word_bcd:
                                   191  
    000142  0a   001005 7070 00    192  	tsx7	get_arg_address		" in x6
    000143  aa   000000 3514 36    193  	epp1	0,x6*			" eis wants chars in index
    000144  aa  0 40000 1605 00    194  	mvt	(pr),(),fill(040)
    000145  aa   100000 020006     195  	desc6a	pr1|0,6
    000146  0a   001010 000006     196  	desc9a	string_temp,6
    000147  0a   001030 0000 00    197  	arg	bcd_to_ascii_table
    000150  0a   001010 3514 00    198  	epp1	string_temp		" word aligned
    000151  aa   000006 2350 07    199  	lda	6,dl	" length
    000152  0a   000232 7100 00    200  	tra	ascii_common
                                   201  
    000153                         202  main_char_loop.decimal_temp:
    000153                         203  	bss	,3
                                   204  
    000156                         205  main_char_loop.word_decimal:
    000156  0a   001005 7070 00    206  	tsx7	get_arg_address
    000157  aa   000000 3514 36    207  	epp1	0,x6*
    000160  aa  0 00000 3015 00    208  	btd	(pr),()
    000161  aa   100000 000004     209  	desc9a	pr1|0,4
    000162  0a   000153 010014     210  	desc9ls	main_char_loop.decimal_temp,12
                                   211  
    000163  aa   000000 0244 00    212  	mvne	(),(),()			" flush leading zeros
    000164  0a   000153 010014     213  	desc9ls	main_char_loop.decimal_temp,12		
    000165  0a   000172 000005     214  	desc9a	main_char_loop.decimal_mops,5
    000166  0a   001010 000014     215  	desc9a	string_temp,12
                                   216  
    000167  0a   001010 3514 00    217  	epp1	string_temp
    000170  aa   000014 2350 07    218  	lda	12,dl	" length
    000171  0a   000232 7100 00    219  	tra	ascii_common
                                   220  
                        000040     221  	bool	blank,040
                                   222  	macro	mop_string
                              1    223  	vfd	&R1&(0009/&i&<&x,&k&[,&]&)
                              2    224  	&end
                                   225  
                                   226  
    000172                         227  main_char_loop.decimal_mops:
                                   228  	mop_string  lte+3,blank,mfls,mfls,mfls
    000172  aa   403040 140140          	vfd	9/lte+3,9/blank,9/mfls,9/mfls,9/mfls
    000173  aa   140000 000000 
                                   229  
                                   230  
    000174                         231  main_char_loop.octal_word_sup:
    000174  aa   000001 6200 00    232  	eax0	1		" flag -- suppress
    000175  0a   000177 7100 00    233  	tra	octal.common
    000176                         234  main_char_loop.octal_word:
    000176  aa   000000 6200 00    235  	eax0	0
    000177                         236  octal.common:
    000177  0a   001005 7070 00    237  	tsx7	get_arg_address
    000200  aa   000000 2360 36    238  	ldq	0,x6*		" get the word
    000201  0a   000205 6010 00    239  	tnz	octal.nonzero
    000202  aa   000060 2350 07    240  	lda	=o000060,dl	" A zero
    000203  0a   000774 7070 00    241  	tsx7	put_one_char	" and that's it
    000204  0a   000054 7100 00    242  	tra	main_char_loop
                                   243  
    000205                         244  octal.nonzero:
    000205  aa   000014 6250 00    245  	eax5	12		" digits
    000206  aa   000000 2350 07    246  	lda	0,dl
                                   247  	
    000207                         248  octal_loop:
    000207  aa   000003 7770 00    249  	llr	3		" 3 bits into q
    000210  aa   000001 3000 03    250  	canx0	1,du		" suppressing?
    000211  0a   000214 6000 00    251  	tze	octal_loop.no_suppress
    000212  aa   000000 1150 07    252  	cmpa	0,dl		" zero?
    000213  0a   000217 6000 00    253  	tze	octal_loop.suppress
    000214                         254  octal_loop.no_suppress:
    000214  aa   000000 6200 00    255  	eax0	0		" turn off suppression
    000215  aa   000060 0750 07    256  	ada	=o000060,dl	" Ascii !
    000216  0a   000774 7070 00    257  	tsx7	put_one_char	" output directly
    000217                         258  octal_loop.suppress:
    000217  aa   000000 2350 07    259  	lda	0,dl		" clean
    000220  aa   000001 1650 03    260   	sbx5	1,du
    000221  0a   000054 6000 00    261  	tze	main_char_loop
    000222  aa   000006 1050 03    262  	cmpx5	6,du		" used up half?
    000223  0a   000207 6010 00    263  	tnz	octal_loop
    000224  aa   000001 3000 03    264  	canx0	1,du
    000225  0a   000207 6010 00    265  	tnz	octal_loop	" if still suppressing, no need.
    000226  aa   000040 2350 07    266  	lda	=o000040,dl	" space
    000227  0a   000774 7070 00    267  	tsx7	put_one_char
    000230  aa   000000 2350 07    268  	lda	0,dl
    000231  0a   000207 7100 00    269  	tra	octal_loop
                                   270  
                                   271  " 
                                   272  
                                   273  " tra here with pr1 -> string to be trimmed and inserted,
                                   274  " a contains length to be considered
                                   275  
    000232                         276  ascii_common:
                                   277  
                                   278  " LTRIM
                                   279  
    000232  aa  0 00000 1645 40    280  	tct	(pr,rl)
    000233  aa   100000 000005     281  	desc9a	pr1|0,al
    000234  0a   000276 0000 00    282  	arg	ascii.tct_table
    000235  0a   000275 0000 00    283  	arg	ascii.tct_count
                                   284  
    000236  0a   000275 2360 00    285  	ldq	ascii.tct_count
    000237  0a   001050 3760 00    286  	anq	=o000077777777  " remove trash
    000240  0a   000275 7560 00    287  	stq	ascii.tct_count
    000241  aa  1 00000 5005 06    288  	a9bd	1|0,ql	      " move past trash
    000242  0a   000275 1750 00    289  	sba	ascii.tct_count " reduce length
    000243  0a   000255 6000 00    290  	tze	ascii.just_spaces
                                   291  
                                   292  " RTRIM
                                   293  
    000244  aa  0 00000 1655 40    294  	tctr	(pr,rl)
    000245  aa   100000 000005     295  	desc9a	pr1|0,al
    000246  0a   000276 0000 00    296  	arg	ascii.tct_table
    000247  0a   000275 0000 00    297  	arg	ascii.tct_count
                                   298  
    000250  0a   000275 2360 00    299  	ldq	ascii.tct_count
    000251  0a   001050 3760 00    300  	anq	=o000077777777
    000252  0a   000275 7560 00    301  	stq	ascii.tct_count
    000253  0a   000275 1750 00    302  	sba	ascii.tct_count	" trim length
    000254  0a   000260 6010 00    303  	tnz	ascii.not_just_spaces
    000255                         304  ascii.just_spaces:
    000255  aa   000040 2350 07    305  	lda	=o000040,dl
    000256  0a   000774 7070 00    306  	tsx7	put_one_char
    000257  0a   000054 7100 00    307  	tra	main_char_loop
                                   308  
    000260                         309  ascii.not_just_spaces:
    000260                         310  ascii.no_trim:
    000260  aa  0 40140 1605 40    311  	mvt	(pr,rl),(pr,rl),fill(040)     " we will do some useless filling
    000261  aa   100000 000005     312  	desc9a	pr1|0,al
    000262  aa   700000 000014     313  	desc9a	pr7|0,x4
    000263  0a   000376 0000 00    314  	arg	ascii.bad_char_trans
    000264  0a   000273 6064 00    315  	ttn	ascii.truncated
                                   316  
    000265  aa  7 00000 5005 05    317  	a9bd	7|0,al
    000266  aa   000022 7350 00    318  	als	18
    000267  0a   000275 7550 00    319  	sta	ascii.tct_count	"  so we can subtract 
    000270  0a   000275 1640 00    320   	sbx4	ascii.tct_count	" cant be negative, since no truncation
    000271  0a   000746 6044 00    321  	tmoz	return_to_caller	" but be safe
    000272  0a   000054 7100 00    322  	tra	main_char_loop
                                   323  
    000273                         324  ascii.truncated:
    000273  aa   000000 6240 00    325  	eax4	0		" none left
    000274  0a   000751 7100 00    326  	tra	return_to_caller.no_trim
    000275                         327  ascii.tct_count:
    000275                         328  	bss	,1
                                   329  	macro	wc
                              1    330  	maclist	object,save
                              2    331  	vfd	&R1&(o9/&=&i,0&[000&;777&]&<&x,&k&[,&]&)
                              3    332  	maclist	restore
                              4    333  	&end
    000276                         334  ascii.tct_table:
                                   335  	wc	0,0,0,0	" 0 1 2 3
    000276  aa   000000 000000 
                                   336  	wc	0,0,0,0	" 4 5 6 7
    000277  aa   000000 000000 
                                   337  	wc	0,0,0,0	" 10 11 12 13
    000300  aa   000000 000000 
                                   338  	wc	0,0,0,0	" 14 15 16 17
    000301  aa   000000 000000 
                                   339  	wc	0,0,0,0	" 20 21 22 23
    000302  aa   000000 000000 
                                   340  	wc	0,0,0,0	" 24 25 26 27
    000303  aa   000000 000000 
                                   341  	wc	0,0,0,0	" 30 31 32 33
    000304  aa   000000 000000 
                                   342  	wc	0,0,0,0	" 34 35 36 37
    000305  aa   000000 000000 
                                   343  	wc	0,1,1,1	" 40 41 42 43  (space, ...)
    000306  aa   000777 777777 
                                   344  	wc	1,1,1,1	" 44 45 46 47
    000307  aa   777777 777777 
                                   345  	wc	1,1,1,1	" 50 51 52 53
    000310  aa   777777 777777 
                                   346  	wc	1,1,1,1	" 54 55 56 57
    000311  aa   777777 777777 
                                   347  	wc	1,1,1,1	" 60 61 62 63
    000312  aa   777777 777777 
                                   348  	wc	1,1,1,1	" 64 65 66 67
    000313  aa   777777 777777 
                                   349  	wc	1,1,1,1	" 70 71 72 73
    000314  aa   777777 777777 
                                   350  	wc	1,1,1,1	" 74 75 76 77
    000315  aa   777777 777777 
                                   351  	wc	1,1,1,1	" 100 101 102 103
    000316  aa   777777 777777 
                                   352  	wc	1,1,1,1	" 104 105 106 107
    000317  aa   777777 777777 
                                   353  	wc	1,1,1,1	" 110 111 112 113
    000320  aa   777777 777777 
                                   354  	wc	1,1,1,1	" 114 115 116 117
    000321  aa   777777 777777 
                                   355  	wc	1,1,1,1	" 120 121 122 123
    000322  aa   777777 777777 
                                   356  	wc	1,1,1,1	" 124 124 126 127
    000323  aa   777777 777777 
                                   357  	wc	1,1,1,1	" 130 131 132 133
    000324  aa   777777 777777 
                                   358  	wc	1,1,1,1	" 134 135 136 137
    000325  aa   777777 777777 
                                   359  	wc	1,1,1,1	" 140 141 142 143
    000326  aa   777777 777777 
                                   360  	wc 	1,1,1,1	" 144 145 146 147
    000327  aa   777777 777777 
                                   361  	wc	1,1,1,1	" 150 151 152 153
    000330  aa   777777 777777 
                                   362  	wc	1,1,1,1	" 154 155 156 157
    000331  aa   777777 777777 
                                   363  	wc	1,1,1,1	" 160 161 162 163
    000332  aa   777777 777777 
                                   364  	wc	1,1,1,1	" 164 165 166 167
    000333  aa   777777 777777 
                                   365  	wc	1,1,1,1	" 170 171 172 173
    000334  aa   777777 777777 
                                   366  	wc	1,1,1,0	" 174 175 176 177
    000335  aa   777777 777000 
                        000040     367  	dup	128/4
                                   368  	wc	0,0,0,0
    000336  aa   000000 000000 
                                   369  	dupend
                                        	wc	0,0,0,0
    000337  aa   000000 000000 
                                        	wc	0,0,0,0
    000340  aa   000000 000000 
                                        	wc	0,0,0,0
    000341  aa   000000 000000 
                                        	wc	0,0,0,0
    000342  aa   000000 000000 
                                        	wc	0,0,0,0
    000343  aa   000000 000000 
                                        	wc	0,0,0,0
    000344  aa   000000 000000 
                                        	wc	0,0,0,0
    000345  aa   000000 000000 
                                        	wc	0,0,0,0
    000346  aa   000000 000000 
                                        	wc	0,0,0,0
    000347  aa   000000 000000 
                                        	wc	0,0,0,0
    000350  aa   000000 000000 
                                        	wc	0,0,0,0
    000351  aa   000000 000000 
                                        	wc	0,0,0,0
    000352  aa   000000 000000 
                                        	wc	0,0,0,0
    000353  aa   000000 000000 
                                        	wc	0,0,0,0
    000354  aa   000000 000000 
                                        	wc	0,0,0,0
    000355  aa   000000 000000 
                                        	wc	0,0,0,0
    000356  aa   000000 000000 
                                        	wc	0,0,0,0
    000357  aa   000000 000000 
                                        	wc	0,0,0,0
    000360  aa   000000 000000 
                                        	wc	0,0,0,0
    000361  aa   000000 000000 
                                        	wc	0,0,0,0
    000362  aa   000000 000000 
                                        	wc	0,0,0,0
    000363  aa   000000 000000 
                                        	wc	0,0,0,0
    000364  aa   000000 000000 
                                        	wc	0,0,0,0
    000365  aa   000000 000000 
                                        	wc	0,0,0,0
    000366  aa   000000 000000 
                                        	wc	0,0,0,0
    000367  aa   000000 000000 
                                        	wc	0,0,0,0
    000370  aa   000000 000000 
                                        	wc	0,0,0,0
    000371  aa   000000 000000 
                                        	wc	0,0,0,0
    000372  aa   000000 000000 
                                        	wc	0,0,0,0
    000373  aa   000000 000000 
                                        	wc	0,0,0,0
    000374  aa   000000 000000 
                                        	wc	0,0,0,0
    000375  aa   000000 000000 
    000376                         370  ascii.bad_char_trans:
                        000010     371  	dup	8
    000376  aa   077077 077077     372  	oct	077077077077
                                   373  	dupend
    000377  aa   077077 077077          	oct	077077077077
    000400  aa   077077 077077          	oct	077077077077
    000401  aa   077077 077077          	oct	077077077077
    000402  aa   077077 077077          	oct	077077077077
    000403  aa   077077 077077          	oct	077077077077
    000404  aa   077077 077077          	oct	077077077077
    000405  aa   077077 077077          	oct	077077077077
                        000040     374  	set	char.c,32
                        000137     375  	dup	95
    000406  aa   040041 042043     376  	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000044     377  	set	char.c,char.c+4
                                   378  	dupend
    000407  aa   044045 046047          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000050          	set	char.c,char.c+4
    000410  aa   050051 052053          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000054          	set	char.c,char.c+4
    000411  aa   054055 056057          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000060          	set	char.c,char.c+4
    000412  aa   060061 062063          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000064          	set	char.c,char.c+4
    000413  aa   064065 066067          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000070          	set	char.c,char.c+4
    000414  aa   070071 072073          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000074          	set	char.c,char.c+4
    000415  aa   074075 076077          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000100          	set	char.c,char.c+4
    000416  aa   100101 102103          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000104          	set	char.c,char.c+4
    000417  aa   104105 106107          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000110          	set	char.c,char.c+4
    000420  aa   110111 112113          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000114          	set	char.c,char.c+4
    000421  aa   114115 116117          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000120          	set	char.c,char.c+4
    000422  aa   120121 122123          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000124          	set	char.c,char.c+4
    000423  aa   124125 126127          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000130          	set	char.c,char.c+4
    000424  aa   130131 132133          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000134          	set	char.c,char.c+4
    000425  aa   134135 136137          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000140          	set	char.c,char.c+4
    000426  aa   140141 142143          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000144          	set	char.c,char.c+4
    000427  aa   144145 146147          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000150          	set	char.c,char.c+4
    000430  aa   150151 152153          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000154          	set	char.c,char.c+4
    000431  aa   154155 156157          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000160          	set	char.c,char.c+4
    000432  aa   160161 162163          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000164          	set	char.c,char.c+4
    000433  aa   164165 166167          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000170          	set	char.c,char.c+4
    000434  aa   170171 172173          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000174          	set	char.c,char.c+4
    000435  aa   174175 176177          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000200          	set	char.c,char.c+4
    000436  aa   200201 202203          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000204          	set	char.c,char.c+4
    000437  aa   204205 206207          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000210          	set	char.c,char.c+4
    000440  aa   210211 212213          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000214          	set	char.c,char.c+4
    000441  aa   214215 216217          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000220          	set	char.c,char.c+4
    000442  aa   220221 222223          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000224          	set	char.c,char.c+4
    000443  aa   224225 226227          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000230          	set	char.c,char.c+4
    000444  aa   230231 232233          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000234          	set	char.c,char.c+4
    000445  aa   234235 236237          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000240          	set	char.c,char.c+4
    000446  aa   240241 242243          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000244          	set	char.c,char.c+4
    000447  aa   244245 246247          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000250          	set	char.c,char.c+4
    000450  aa   250251 252253          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000254          	set	char.c,char.c+4
    000451  aa   254255 256257          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000260          	set	char.c,char.c+4
    000452  aa   260261 262263          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000264          	set	char.c,char.c+4
    000453  aa   264265 266267          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000270          	set	char.c,char.c+4
    000454  aa   270271 272273          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000274          	set	char.c,char.c+4
    000455  aa   274275 276277          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000300          	set	char.c,char.c+4
    000456  aa   300301 302303          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000304          	set	char.c,char.c+4
    000457  aa   304305 306307          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000310          	set	char.c,char.c+4
    000460  aa   310311 312313          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000314          	set	char.c,char.c+4
    000461  aa   314315 316317          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000320          	set	char.c,char.c+4
    000462  aa   320321 322323          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000324          	set	char.c,char.c+4
    000463  aa   324325 326327          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000330          	set	char.c,char.c+4
    000464  aa   330331 332333          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000334          	set	char.c,char.c+4
    000465  aa   334335 336337          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000340          	set	char.c,char.c+4
    000466  aa   340341 342343          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000344          	set	char.c,char.c+4
    000467  aa   344345 346347          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000350          	set	char.c,char.c+4
    000470  aa   350351 352353          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000354          	set	char.c,char.c+4
    000471  aa   354355 356357          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000360          	set	char.c,char.c+4
    000472  aa   360361 362363          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000364          	set	char.c,char.c+4
    000473  aa   364365 366367          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000370          	set	char.c,char.c+4
    000474  aa   370371 372373          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000374          	set	char.c,char.c+4
    000475  aa   374375 376377          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000400          	set	char.c,char.c+4
    000476  aa   400401 402403          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000404          	set	char.c,char.c+4
    000477  aa   404405 406407          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000410          	set	char.c,char.c+4
    000500  aa   410411 412413          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000414          	set	char.c,char.c+4
    000501  aa   414415 416417          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000420          	set	char.c,char.c+4
    000502  aa   420421 422423          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000424          	set	char.c,char.c+4
    000503  aa   424425 426427          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000430          	set	char.c,char.c+4
    000504  aa   430431 432433          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000434          	set	char.c,char.c+4
    000505  aa   434435 436437          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000440          	set	char.c,char.c+4
    000506  aa   440441 442443          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000444          	set	char.c,char.c+4
    000507  aa   444445 446447          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000450          	set	char.c,char.c+4
    000510  aa   450451 452453          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000454          	set	char.c,char.c+4
    000511  aa   454455 456457          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000460          	set	char.c,char.c+4
    000512  aa   460461 462463          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000464          	set	char.c,char.c+4
    000513  aa   464465 466467          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000470          	set	char.c,char.c+4
    000514  aa   470471 472473          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000474          	set	char.c,char.c+4
    000515  aa   474475 476477          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000500          	set	char.c,char.c+4
    000516  aa   500501 502503          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000504          	set	char.c,char.c+4
    000517  aa   504505 506507          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000510          	set	char.c,char.c+4
    000520  aa   510511 512513          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000514          	set	char.c,char.c+4
    000521  aa   514515 516517          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000520          	set	char.c,char.c+4
    000522  aa   520521 522523          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000524          	set	char.c,char.c+4
    000523  aa   524525 526527          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000530          	set	char.c,char.c+4
    000524  aa   530531 532533          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000534          	set	char.c,char.c+4
    000525  aa   534535 536537          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000540          	set	char.c,char.c+4
    000526  aa   540541 542543          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000544          	set	char.c,char.c+4
    000527  aa   544545 546547          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000550          	set	char.c,char.c+4
    000530  aa   550551 552553          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000554          	set	char.c,char.c+4
    000531  aa   554555 556557          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000560          	set	char.c,char.c+4
    000532  aa   560561 562563          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000564          	set	char.c,char.c+4
    000533  aa   564565 566567          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000570          	set	char.c,char.c+4
    000534  aa   570571 572573          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000574          	set	char.c,char.c+4
    000535  aa   574575 576577          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000600          	set	char.c,char.c+4
    000536  aa   600601 602603          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000604          	set	char.c,char.c+4
    000537  aa   604605 606607          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000610          	set	char.c,char.c+4
    000540  aa   610611 612613          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000614          	set	char.c,char.c+4
    000541  aa   614615 616617          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000620          	set	char.c,char.c+4
    000542  aa   620621 622623          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000624          	set	char.c,char.c+4
    000543  aa   624625 626627          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000630          	set	char.c,char.c+4
    000544  aa   630631 632633          	vfd	9/char.c,9/char.c+1,9/char.c+2,9/char.c+3
                        000634          	set	char.c,char.c+4
    000545  aa   174175 176077     379  	vfd	o9/174,o9/175,o9/176,o9/077
                        000200     380  	dup	128
    000546  aa  077 077 077 077    381  	aci	"????"
                                   382  	dupend
    000547  aa  077 077 077 077         	aci	"????"
    000550  aa  077 077 077 077         	aci	"????"
    000551  aa  077 077 077 077         	aci	"????"
    000552  aa  077 077 077 077         	aci	"????"
    000553  aa  077 077 077 077         	aci	"????"
    000554  aa  077 077 077 077         	aci	"????"
    000555  aa  077 077 077 077         	aci	"????"
    000556  aa  077 077 077 077         	aci	"????"
    000557  aa  077 077 077 077         	aci	"????"
    000560  aa  077 077 077 077         	aci	"????"
    000561  aa  077 077 077 077         	aci	"????"
    000562  aa  077 077 077 077         	aci	"????"
    000563  aa  077 077 077 077         	aci	"????"
    000564  aa  077 077 077 077         	aci	"????"
    000565  aa  077 077 077 077         	aci	"????"
    000566  aa  077 077 077 077         	aci	"????"
    000567  aa  077 077 077 077         	aci	"????"
    000570  aa  077 077 077 077         	aci	"????"
    000571  aa  077 077 077 077         	aci	"????"
    000572  aa  077 077 077 077         	aci	"????"
    000573  aa  077 077 077 077         	aci	"????"
    000574  aa  077 077 077 077         	aci	"????"
    000575  aa  077 077 077 077         	aci	"????"
    000576  aa  077 077 077 077         	aci	"????"
    000577  aa  077 077 077 077         	aci	"????"
    000600  aa  077 077 077 077         	aci	"????"
    000601  aa  077 077 077 077         	aci	"????"
    000602  aa  077 077 077 077         	aci	"????"
    000603  aa  077 077 077 077         	aci	"????"
    000604  aa  077 077 077 077         	aci	"????"
    000605  aa  077 077 077 077         	aci	"????"
    000606  aa  077 077 077 077         	aci	"????"
    000607  aa  077 077 077 077         	aci	"????"
    000610  aa  077 077 077 077         	aci	"????"
    000611  aa  077 077 077 077         	aci	"????"
    000612  aa  077 077 077 077         	aci	"????"
    000613  aa  077 077 077 077         	aci	"????"
    000614  aa  077 077 077 077         	aci	"????"
    000615  aa  077 077 077 077         	aci	"????"
    000616  aa  077 077 077 077         	aci	"????"
    000617  aa  077 077 077 077         	aci	"????"
    000620  aa  077 077 077 077         	aci	"????"
    000621  aa  077 077 077 077         	aci	"????"
    000622  aa  077 077 077 077         	aci	"????"
    000623  aa  077 077 077 077         	aci	"????"
    000624  aa  077 077 077 077         	aci	"????"
    000625  aa  077 077 077 077         	aci	"????"
    000626  aa  077 077 077 077         	aci	"????"
    000627  aa  077 077 077 077         	aci	"????"
    000630  aa  077 077 077 077         	aci	"????"
    000631  aa  077 077 077 077         	aci	"????"
    000632  aa  077 077 077 077         	aci	"????"
    000633  aa  077 077 077 077         	aci	"????"
    000634  aa  077 077 077 077         	aci	"????"
    000635  aa  077 077 077 077         	aci	"????"
    000636  aa  077 077 077 077         	aci	"????"
    000637  aa  077 077 077 077         	aci	"????"
    000640  aa  077 077 077 077         	aci	"????"
    000641  aa  077 077 077 077         	aci	"????"
    000642  aa  077 077 077 077         	aci	"????"
    000643  aa  077 077 077 077         	aci	"????"
    000644  aa  077 077 077 077         	aci	"????"
    000645  aa  077 077 077 077         	aci	"????"
    000646  aa  077 077 077 077         	aci	"????"
    000647  aa  077 077 077 077         	aci	"????"
    000650  aa  077 077 077 077         	aci	"????"
    000651  aa  077 077 077 077         	aci	"????"
    000652  aa  077 077 077 077         	aci	"????"
    000653  aa  077 077 077 077         	aci	"????"
    000654  aa  077 077 077 077         	aci	"????"
    000655  aa  077 077 077 077         	aci	"????"
    000656  aa  077 077 077 077         	aci	"????"
    000657  aa  077 077 077 077         	aci	"????"
    000660  aa  077 077 077 077         	aci	"????"
    000661  aa  077 077 077 077         	aci	"????"
    000662  aa  077 077 077 077         	aci	"????"
    000663  aa  077 077 077 077         	aci	"????"
    000664  aa  077 077 077 077         	aci	"????"
    000665  aa  077 077 077 077         	aci	"????"
    000666  aa  077 077 077 077         	aci	"????"
    000667  aa  077 077 077 077         	aci	"????"
    000670  aa  077 077 077 077         	aci	"????"
    000671  aa  077 077 077 077         	aci	"????"
    000672  aa  077 077 077 077         	aci	"????"
    000673  aa  077 077 077 077         	aci	"????"
    000674  aa  077 077 077 077         	aci	"????"
    000675  aa  077 077 077 077         	aci	"????"
    000676  aa  077 077 077 077         	aci	"????"
    000677  aa  077 077 077 077         	aci	"????"
    000700  aa  077 077 077 077         	aci	"????"
    000701  aa  077 077 077 077         	aci	"????"
    000702  aa  077 077 077 077         	aci	"????"
    000703  aa  077 077 077 077         	aci	"????"
    000704  aa  077 077 077 077         	aci	"????"
    000705  aa  077 077 077 077         	aci	"????"
    000706  aa  077 077 077 077         	aci	"????"
    000707  aa  077 077 077 077         	aci	"????"
    000710  aa  077 077 077 077         	aci	"????"
    000711  aa  077 077 077 077         	aci	"????"
    000712  aa  077 077 077 077         	aci	"????"
    000713  aa  077 077 077 077         	aci	"????"
    000714  aa  077 077 077 077         	aci	"????"
    000715  aa  077 077 077 077         	aci	"????"
    000716  aa  077 077 077 077         	aci	"????"
    000717  aa  077 077 077 077         	aci	"????"
    000720  aa  077 077 077 077         	aci	"????"
    000721  aa  077 077 077 077         	aci	"????"
    000722  aa  077 077 077 077         	aci	"????"
    000723  aa  077 077 077 077         	aci	"????"
    000724  aa  077 077 077 077         	aci	"????"
    000725  aa  077 077 077 077         	aci	"????"
    000726  aa  077 077 077 077         	aci	"????"
    000727  aa  077 077 077 077         	aci	"????"
    000730  aa  077 077 077 077         	aci	"????"
    000731  aa  077 077 077 077         	aci	"????"
    000732  aa  077 077 077 077         	aci	"????"
    000733  aa  077 077 077 077         	aci	"????"
    000734  aa  077 077 077 077         	aci	"????"
    000735  aa  077 077 077 077         	aci	"????"
    000736  aa  077 077 077 077         	aci	"????"
    000737  aa  077 077 077 077         	aci	"????"
    000740  aa  077 077 077 077         	aci	"????"
    000741  aa  077 077 077 077         	aci	"????"
    000742  aa  077 077 077 077         	aci	"????"
    000743  aa  077 077 077 077         	aci	"????"
    000744  aa  077 077 077 077         	aci	"????"
    000745  aa  077 077 077 077         	aci	"????"
                                   383  
    000746                         384  return_to_caller:
    000746  aa   040140 1004 00    385  	mlr	(),(pr,rl),fill(040)
    000747  aa   000000 000000     386  	desc9a	0
    000750  aa   700000 000014     387  	desc9a	7|0,x4
    000751                         388  return_to_caller.no_trim:
    000751  0a   000762 4440 00    389  	sxl4	return.count_temp
    000752  0a   000763 2350 00    390  	lda	return.output_length
    000753  0a   000762 1750 00    391  	sba	return.count_temp
    000754  0a   000762 7550 00    392  	sta	return.count_temp
    000755  0a   000000 0730 00    393  	lreg	register_save_area
    000756  0a   000010 1730 00    394  	lpri	pointer_register_save_area
    000757  0a   000762 2350 00    395  	lda	return.count_temp
                                   396  	Breturn
    000760  4a  4 00014 2221 20         	ldx2	bootload_0$entry_stack_ptr,di
    000761  aa   000000 7100 12         	tra	0+,x2
    000762                         397  return.count_temp:
    000762                         398  	bss	,1
    000763                         399  return.output_length:
    000763                         400  	bss	,1
                                   401  
                                   402  " 
                                   403  
                                   404  " Subroutine to fetch next input char into A
                                   405  
L12534:
    000764                         406  get_input_char:
    000764  aa  0 00000 1005 00    407  	mlr	(pr),()
    000765  aa   500000 000001     408  	desc9a	5|0,1
    000766  0a   000773 600001     409  	desc9a	get_input_char.temp(3),1	" in bottom of word
    000767  aa   000001 2350 07    410  	lda	1,dl
    000770  aa  5 00000 5005 05    411  	a9bd	5|0,al			" add 1 to pr5
    000771  0a   000773 2350 00    412  	lda	get_input_char.temp
    000772  aa   000000 7100 17    413  	tra	0,x7			" and return
    000773                         414  put_one_char.temp:
    000773                         415  get_input_char.temp:
    000773  aa   000000 000000     416  	dec	0
                                   417  
                                   418  " Subroutine to stuff out the next character
                                   419  
    000774                         420  put_one_char:
    000774  0a   000773 7550 00    421  	sta	put_one_char.temp
    000775  aa   000100 1004 00    422  	mlr	(),(pr)
    000776  0a   000773 600001     423  	desc9a	put_one_char.temp(3),1
    000777  aa   700000 000001     424  	desc9a	pr7|0,1
    001000  aa   000001 2350 07    425  	lda	1,dl
    001001  aa  7 00000 5005 05    426  	a9bd	7|0,al
    001002  aa   000001 1640 03    427  	sbx4	1,du
    001003  0a   000746 6000 00    428  	tze	return_to_caller	" no more space
    001004  aa   000000 7100 17    429  	tra	0,x7
                                   430  
                                   431  " Subroutine to use up an argument
                                   432  
    001005                         433  get_arg_address:
    001005  aa   000000 6260 12    434  	eax6	0,x2		" x6 -> actual location of arg pointer
    001006  aa   000001 6220 12    435  	eax2	1,x2		" use up arg
    001007  aa   000000 7100 17    436  	tra	0,x7
                                   437  
    001010                         438  string_temp:
    001010  aa  040 040 040 040    439  	aci	"",64
    001011  aa  040 040 040 040
    001012  aa  040 040 040 040
    001013  aa  040 040 040 040
    001014  aa  040 040 040 040
    001015  aa  040 040 040 040
    001016  aa  040 040 040 040
    001017  aa  040 040 040 040
    001020  aa  040 040 040 040
    001021  aa  040 040 040 040
    001022  aa  040 040 040 040
    001023  aa  040 040 040 040
    001024  aa  040 040 040 040
    001025  aa  040 040 040 040
    001026  aa  040 040 040 040
    001027  aa  040 040 040 040
    001030                         440  bcd_to_ascii_table:
    001030  aa  060 061 062 063    441  	aci	X0123456789[#@:>?X
    001031  aa  064 065 066 067
    001032  aa  070 071 133 043
    001033  aa  100 072 076 077
    001034  aa  040 141 142 143    442  	aci	X abcdefghi&.](<\X
    001035  aa  144 145 146 147
    001036  aa  150 151 046 056
    001037  aa  135 050 074 134
    001040  aa  136 152 153 154    443  	aci	X^jklmnopqr-$*);'X
    001041  aa  155 156 157 160
    001042  aa  161 162 055 044
    001043  aa  052 051 073 047
    001044  aa  053 057 163 164    444  	aci	X+/stuvwxyz_,%="!X
    001045  aa  165 166 167 170
    001046  aa  171 172 137 054
    001047  aa  045 075 042 041
                                   445  
                                   446  	end
LITERALS
     
    001050  aa   000077 777777 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    001051  5a   000003 000000 
    001052  5a   000032 600000 
    001053  aa   000000 000000 
    001054  55   000013 000002 
    001055  5a   000002 400003 
    001056  55   000006 000013 
    001057  aa  021 142 157 157
    001060  aa  164 154 157 141
    001061  aa  144 137 146 157
    001062  aa  162 155 154 151
    001063  aa  156 145 000 000
    001064  55   000023 000003 
    001065  0a   000032 400000 
    001066  55   000016 000003 
    001067  aa  021 142 157 157         bootload_formline
    001070  aa  164 154 157 141
    001071  aa  144 137 146 157
    001072  aa  162 155 154 151
    001073  aa  156 145 000 000
    001074  55   000002 000013 
    001075  6a   000000 400002 
    001076  55   000026 000003 
    001077  aa  014 163 171 155         symbol_table
    001100  aa  142 157 154 137
    001101  aa  164 141 142 154
    001102  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001103  aa   000000 000015 
    001104  aa   000000 000000 
    001105  aa   000000 000000 
    001106  5a   000013 000000 
    001107  aa   000000 000000 
    001110  aa   000000 000000 
    001111  aa   000000 000000 
    001112  5a   000023 000000 
    001113  aa   000000 000000 
    001114  aa   000000 000000 
    001115  aa   000000 000000 
    001116  aa   000000 000000 
    001117  aa   000000 000000 
    001120  aa   000000 000000 

EXTERNAL NAMES

    001121  aa  014 157 165 164         out_of_stack
    001122  aa  137 157 146 137
    001123  aa  163 164 141 143
    001124  aa  153 000 000 000
    001125  aa  016 142 157 157         bootload_error
    001126  aa  164 154 157 141
    001127  aa  144 137 145 162
    001130  aa  162 157 162 000
    001131  aa  017 145 156 164         entry_stack_ptr
    001132  aa  162 171 137 163
    001133  aa  164 141 143 153
    001134  aa  137 160 164 162
    001135  aa  012 142 157 157         bootload_0
    001136  aa  164 154 157 141
    001137  aa  144 137 060 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001140  aa   000004 000000 
    001141  55   000054 000050 
    001142  aa   000004 000000 
    001143  55   000064 000060 
    001144  aa   000001 000000 
    001145  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001146  5a   000067 000000 
    001147  5a   000071 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   001051 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000016 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         bootload_0|entry_stack_ptr
    000011  5a   000076 0000 56
    000012  9a   777766 0000 46         bootload_error|out_of_stack
    000013  5a   000075 0000 00
    000014  9a   777764 0000 46         bootload_0|entry_stack_ptr
    000015  5a   000076 0000 54
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   247504 633352 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000010 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000244 
    000020  aa   000000 000142 
    000021  aa   000223 000217 
    000022  aa   000234 000142 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000066 
    000067  aa   175453 021716 
    000070  aa   000000 117547 
    000071  aa   215115 200000 
    000072  aa   000120 000043 
    000073  aa   043243 127523 
    000074  aa   000000 101621 
    000075  aa   351624 000000 
    000076  aa   000131 000043 
    000077  aa   127236 043477 
    000100  aa   000000 112724 
    000101  aa   701742 600000 
    000102  aa   076163 160145          >special_ldd>install>MR12.3-1114>bootload_formline.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 063055 
    000111  aa   061061 061064 
    000112  aa   076142 157157 
    000113  aa   164154 157141 
    000114  aa   144137 146157 
    000115  aa   162155 154151 
    000116  aa   156145 056141 
    000117  aa   154155 040040 
    000120  aa   076154 144144          >ldd>include>eis_micro_ops.incl.alm
    000121  aa   076151 156143 
    000122  aa   154165 144145 
    000123  aa   076145 151163 
    000124  aa   137155 151143 
    000125  aa   162157 137157 
    000126  aa   160163 056151 
    000127  aa   156143 154056 
    000130  aa   141154 155040 
    000131  aa   076154 144144          >ldd>include>bootload_equs.incl.alm
    000132  aa   076151 156143 
    000133  aa   154165 144145 
    000134  aa   076142 157157 
    000135  aa   164154 157141 
    000136  aa   144137 145161 
    000137  aa   165163 056151 
    000140  aa   156143 154056 
    000141  aa   141154 155040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

       10000    .._00000                 bootload_equs:       75.
        2000    .._00001                 bootload_equs:       76.
       24000    .._00002                 bootload_equs:       78.
        2000    .._00003                 bootload_equs:       79.
       24000    .._00004                 bootload_equs:       81.
        4000    .._00005                 bootload_equs:       82.
       24000    .._00006                 bootload_equs:       87.
       22000    .._00007                 bootload_equs:       88.
       46000    .._00010                 bootload_equs:       90.
        4000    .._00011                 bootload_equs:       91.
       52000    .._00012                 bootload_equs:       93.
        2000    .._00013                 bootload_equs:       94.
       54000    .._00014                 bootload_equs:       96.
        2000    .._00015                 bootload_equs:       97.
       56000    .._00016                 bootload_equs:       99.
        2000    .._00017                 bootload_equs:      100.
       60000    .._00020                 bootload_equs:      102.
        6000    .._00021                 bootload_equs:      103.
         141    acc_string.temp          bootload_formline:  178,  181,  184,  187.
           4    args                     bootload_formline:   70,  104.
          31    arg_count                bootload_formline:   73,   83,  134,  137,  153.
         376    ascii.bad_char_trans     bootload_formline:  314,  370.
         255    ascii.just_spaces        bootload_formline:  290,  304.
         260    ascii.not_just_spaces    bootload_formline:  303,  309.
         260    ascii.no_trim            bootload_formline:  185,  310.
         275    ascii.tct_count          bootload_formline:  283,  285,  287,  289,  297,  299,  301,  302,  319,  320,  327.
         276    ascii.tct_table          bootload_formline:  282,  296,  334.
         273    ascii.truncated          bootload_formline:  315,  324.
         232    ascii_common             bootload_formline:  172,  200,  219,  276.
       24000    bbl0_absloc              bootload_equs:       87.
       22000    bbl0_lth                 bootload_equs:       88.
        1030    bcd_to_ascii_table       bootload_formline:  197,  440.
       56000    bkpt_absloc              bootload_equs:       99.
        2000    bkpt_lth                 bootload_equs:      100.
          40    blank                    bootload_formline:  221,  228.
                bootload_0               bootload_formline:   87,  396.
                bootload_error           bootload_formline:   87.
          32    bootload_formline        bootload_formline:   51,   74.
       10000    bostoe_absloc            bootload_equs:       75.
        2000    bostoe_lth               bootload_equs:       76.
         634    char.c                   bootload_formline:  374,  376,  377,  378.
         420    cht                      eis_micro_ops:       17.
           0    control_string           bootload_formline:   66,   94.
           0    ds                       bootload_equs:       12.
          40    enf                      eis_micro_ops:        2.
                entry_stack_ptr          bootload_formline:   87,  396.
       24000    fgbx_absloc              bootload_equs:       78.
        2000    fgbx_lth                 bootload_equs:       79.
           7    fv                       bootload_equs:       19.
        1005    get_arg_address          bootload_formline:  168,  176,  192,  206,  237,  433.
         764    get_input_char           bootload_formline:   95,  115,  124,  130,  406.
         773    get_input_char.temp      bootload_formline:  409,  412,  415.
          10    if0                      eis_micro_ops:       19.
           4    if1                      eis_micro_ops:       20.
           2    if2                      eis_micro_ops:       21.
           1    if3                      eis_micro_ops:       22.
         300    ign                      eis_micro_ops:       12.
         220    insa                     eis_micro_ops:        9.
         200    insb                     eis_micro_ops:        8.
          20    insm                     eis_micro_ops:        1.
         240    insn                     eis_micro_ops:       10.
         260    insp                     eis_micro_ops:       11.
       54000    iupt_absloc              bootload_equs:       96.
        2000    iupt_lth                 bootload_equs:       97.
         400    lte                      bootload_formline:  228,
                                         eis_micro_ops:       16.
          54    main_char_loop           bootload_formline:  111,  121,  160,  242,  261,  307,  322.
         127    main_char_loop.acc_string      bootload_formline:  142,  174.
          62    main_char_loop.circumflex      bootload_formline:  119,  133.
         172    main_char_loop.decimal_mops    bootload_formline:  214,  227.
         153    main_char_loop.decimal_temp    bootload_formline:  202,  210,  213.
          64    main_char_loop.get_last_char   bootload_formline:  114,  123.
          65    main_char_loop.last_char_in_A  bootload_formline:  125.
         176    main_char_loop.octal_word      bootload_formline:  150,  234.
         174    main_char_loop.octal_word_sup  bootload_formline:  148,  231.
         122    main_char_loop.save_char       bootload_formline:  155,  158,  162.
          67    main_char_loop.special_char    bootload_formline:  118,  129.
         114    main_char_loop.unknown_control       bootload_formline:  135,  154.
         123    main_char_loop.word_ascii      bootload_formline:  140,  166.
         142    main_char_loop.word_bcd  bootload_formline:  144,  190.
         156    main_char_loop.word_decimal    bootload_formline:  146,  205.
           2    mb                       bootload_equs:       14.
         160    mflc                     eis_micro_ops:        7.
         140    mfls                     bootload_formline:  228,
                                         eis_micro_ops:        6.
         360    mors                     eis_micro_ops:       15.
         340    mses                     eis_micro_ops:       14.
         320    mvc                      eis_micro_ops:       13.
         120    mvza                     eis_micro_ops:        5.
         100    mvzb                     eis_micro_ops:        4.
           4    nt                       bootload_equs:       16.
           3    n_args                   bootload_formline:   69,   82.
         177    octal.common             bootload_formline:  233,  236.
         205    octal.nonzero            bootload_formline:  239,  244.
         207    octal_loop               bootload_formline:  248,  263,  265,  269.
         214    octal_loop.no_suppress   bootload_formline:  251,  254.
         217    octal_loop.suppress      bootload_formline:  253,  258.
           1    output_string            bootload_formline:   67,   99.
           2    output_string_limit      bootload_formline:   68,  100.
                out_of_stack             bootload_formline:   87.
          10    pointer_register_save_area     bootload_formline:   61,   76,  394.
           5    prb                      bootload_equs:       17.
       60000    prb_absloc               bootload_equs:      102.
        6000    prb_lth                  bootload_equs:      103.
         774    put_one_char             bootload_formline:  120,  126,  157,  159,  241,  257,  267,  306,  420.
         773    put_one_char.temp        bootload_formline:  414,  421,  423.
           0    register_save_area       bootload_formline:   59,   75,  393.
         762    return.count_temp        bootload_formline:  389,  391,  392,  395,  397.
         763    return.output_length     bootload_formline:  101,  390,  399.
          30    return_address           bootload_formline:   72,   81,   84,   89.
         746    return_to_caller         bootload_formline:  113,  127,  321,  384,  428.
         751    return_to_caller.no_trim       bootload_formline:  326,  388.
           6    seg                      bootload_equs:       18.
           1    seg2                     bootload_equs:       13.
          60    ses                      eis_micro_ops:        3.
           3    slt                      bootload_equs:       15.
        1010    string_temp              bootload_formline:  196,  198,  215,  217,  438.
       46000    toedata_absloc           bootload_equs:       90.
        4000    toedata_lth              bootload_equs:       91.
       24000    toe_absloc               bootload_equs:       81.
        4000    toe_lth                  bootload_equs:       82.
       52000    upt_absloc               bootload_equs:       93.
        2000    upt_lth                  bootload_equs:       94.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
