ASSEMBLY LISTING OF SEGMENT >spec>install>1115>hc_backup_.alm                                                                                                                                       
ASSEMBLED ON:	11/11/89  0936.5 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " Modified 1985-05-09, EJ Sharpe: changed decode_uidpath entry to use
                                    13  "	new name of target in uid_path_util
                                    14  
                                    15  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    16  
                                    17  	hardcore_gate_info	hc_backup_
    000000                              	name	hc_backup_
                                        
                                        	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                        
                                        	include	stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                        	include	gate_data
                                   4-1  
                                   4-2  
                                   4-3       "BEGIN INCLUDE FILE gate_data.incl.alm
                                   4-4  
                                   4-5  
                                   4-6  	"Created 11/07/83  0737.6 est Mon by convert_include_file,
                                   4-7  	"   Version of 11/07/82  1445.1 est Sun.
                                   4-8  
                                   4-9  	"Made from >user_dir_dir>Multics>Margulies>h>gate_data.incl.pl1,
                                  4-10  	"   modified 11/07/83  0737.5 est Mon
                                  4-11  
                                  4-12  "
                                  4-13  "	Structure gate_table
                                  4-14  "
                        000003    4-15  	equ	gate_table_size,3
                                  4-16  
                                  4-17  
                        000000    4-18  	equ	gate_table.entryp,0
                        000001    4-19  	equ	gate_table.entryl,1
                        000002    4-20  	equ	gate_table.datap,2
                                  4-21  
                                  4-22  "
                                  4-23  "	Structure gate_entry_data
                                  4-24  "
                        000010    4-25  	equ	gate_entry_data_size,8
                                  4-26  
                        000000    4-27  	equ	gate_entry_data.cpu_time,0	" DOUBLE
                        000002    4-28  	equ	gate_entry_data.vcpu_time,2	" DOUBLE
                        000004    4-29  	equ	gate_entry_data.page_waits,4
                        000005    4-30  	equ	gate_entry_data.calls,5
                        000006    4-31  	equ	gate_entry_data.ring_alarms,6
                                  4-32  
                                  4-33       "END INCLUDE FILE gate_data.incl.alm
                                        
                                        
                                        
                                        	tempd	.temp
                                        	tempd	.label_variable(0)
                                        	tempd	.time1,.time2
                                        	tempd	.unwinder_arglist(0)
                                        	tempd	.on_unit(5)
                                        	temp	.pf,.entryp
                                        	tempd	.vfl_arglist(2)
                                        	tempd	.mcptr
                                        
                                        	use	transfer_vector
                        000000          	equ	.tv_begin,*
                                        
    000000  0a   000032 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                        000027          	segdef	.tv_end
    000027  aa   000560 000000          .tv_end:	vfd	14/(*-.tv_begin)
                                        
                                        	use	main
                                        
                        000030          	segdef	.my_lp
                                        	even
    000030                              .my_lp:	bss	,2
                                        
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        	use	linkage
                                        	join	/link/linkage
                                        
                                        	use	main
                                        
                                        
                                        
    000032  0a   000030 3700 20         .actor:	epplp	.my_lp,*
    000033  aa  0 00002 3521 20         	eppbp	ap|2,*
    000034  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000035  0a   000051 6000 00         	tze	.return_name	zero length => get name
                                        
    000036  aa   000001 0350 07         	adla	1,dl		include length of acc
    000037  aa  0 00004 4501 20         	stz	ap|4,*
    000040  0a   000064 7000 00         	tsx0	.search_defs
                                        
    000041  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000042  aa   277777 600005          	desc9a	bp|-1(3),al
    000043  aa   300000 000005          	desc9a	bb|0,al
    000044  0a   000074 6010 00         	tnz	.next_def
                                        
    000045  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000046  aa   000022 7710 00         	arl	18
    000047  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000050  aa  7 00044 7101 20         	short_return
                                        
    000051                              .return_name:
    000051  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000052  0a   000064 7000 00         	tsx0	.search_defs
                                        
    000053  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000054  0a   000074 6010 00         	tnz	.next_def
                                        
    000055  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000056  aa   000033 7710 00         	arl	27
    000057  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000060  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000061  aa   300000 200005          	desc9a	bb|0(1),al
    000062  aa   200000 000005          	desc9a	bp|0,al
                                        
    000063  aa  7 00044 7101 20         	short_return
                                        
    000064                              .search_defs:
    000064  aa   000000 6220 00         	eax2	0
    000065  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000066                              .defs_loop:
    000066  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000067  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000070  0a   000074 6010 00         	tnz	.next_def
                                        
    000071  aa  1 00002 2271 12         	ldx7	ab|2,2
    000072  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000073  aa   000000 7100 10         	tra	0,0		test definition
    000074                              .next_def:
    000074  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000075  0a   000066 6010 00         	tnz	.defs_loop
                                        
    000076  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000077  aa   000120 6270 00         .setup:	push
    000100  aa  7 00040 2721 20
    000101  0a   000030 3700 20         	epplp	.my_lp,*
    000102  aa  6 00030 6501 00         	sprilp	sp|stack_frame.lp_ptr
                                        
    000103  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000104  0a   000132 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000105  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000106  0a   000132 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000107  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000110  0a   000120 3500 00
    000111  4a  4 00250 3521 20
    000112  aa  6 00040 7531 00
    000113  aa  7 00036 6701 20
    000114  aa  6 00000 1731 00
    000115  aa  6 00040 0731 00
    000116  aa   000000 000000          	oct	0
                                        
    000117  aa   000000 0110 03         	even
    000120                              signal_arglist:
    000120  aa   000002 000004          	zero	2,4
    000121  aa   000002 000000          	zero	2,0
    000122  0a   000126 0000 00         	arg	.gate_errorname
    000123  aa   000000 0000 00         	arg
    000124  0a   000131 0000 00         	arg	.gate_errordesc
    000125  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000126                              .gate_errorname:
    000126  aa  147 141 164 145         	aci	"gate_error"
    000127  aa  137 145 162 162
    000130  aa  157 162 000 000
    000131                              .gate_errordesc:
    000131  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000132                              .no_gate_error:
                                        
    000132                              	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000132  4a  4 00254 6333 20         	rccl	sys_info$clock_,*	calculate times
    000133  4a  4 00256 1773 20         	sbaq	pds$cpu_time
    000134  aa  6 00052 7573 00         	staq	.time1
    000135  4a  4 00260 1773 20         	sbaq	pds$virtual_delta
    000136  aa  6 00054 7573 00         	staq	.time2
    000137  4a  4 00262 2353 20         	lda	pds$page_waits
    000140  aa  6 00070 7553 00         	sta	.pf
    000141                              	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
    000141  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
    000142                              .return_code:
                                        
    000142                              	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000142  4a  4 00254 6333 20         	rccl	sys_info$clock_,*	calculate times
    000143  4a  4 00256 1773 20         	sbaq	pds$cpu_time
    000144  aa  6 00050 7573 00         	staq	.temp
    000145  aa  6 00052 1773 00         	sbaq	.time1
    000146  aa  2 00000 0773 00         	adaq	bp|gate_entry_data.cpu_time
    000147  aa  2 00000 7573 00         	staq	bp|gate_entry_data.cpu_time
    000150  aa  6 00050 2373 00         	ldaq	.temp
    000151  4a  4 00260 1773 20         	sbaq	pds$virtual_delta
    000152  aa  6 00054 1773 00         	sbaq	.time2
    000153  aa  2 00002 0773 00         	adaq	bp|gate_entry_data.vcpu_time
    000154  aa  2 00002 7573 00         	staq	bp|gate_entry_data.vcpu_time
    000155  4a  4 00262 2353 20         	lda	pds$page_waits
    000156  aa  6 00070 1353 00         	sbla	.pf
    000157  aa  2 00004 0553 00         	asa	bp|gate_entry_data.page_waits
    000160  aa  2 00005 0543 00         	aos	bp|gate_entry_data.calls
    000161                              	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                        
                                        			" Poll for ring alarms
    000161  aa  6 00050 7545 00         	sra	.temp	Borrow from time calc
    000162  aa  6 00050 2341 00         	szn	.temp	Zero?
    000163  0a   000171 6000 00         	tze	.return_code_return
                                        
    000164  aa  6 00020 3515 20         	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
    000165  aa  1 00024 2131 20         	epaq	pr1|stack_frame.return_ptr,*
    000166  aa   000007 3750 07         	ana	7,dl	" ring number to which we return
    000167  aa  6 00050 1151 00         	cmpa	.temp
    000170  0a   000172 6050 00         	tpl	.ring_alarm	" ring alarm will occur
                                        
    000171                              .return_code_return:
    000171  aa  7 00042 7101 20         	return
                                        
    000172                              .ring_alarm:		" perhaps we can handle without faults?
                                        
    000172  aa  2 00006 0541 00         	aos	bp|gate_entry_data.ring_alarms
    000173  aa  6 00050 4501 00         	stz	.temp	" return argument for ring_alarm$poll
    000174  0a   000214 2370 00         	ldaq	.one_arg_header
    000175  aa  6 00100 7571 00         	staq	.ring_alarm_arg_list
    000176  aa  6 00050 3515 00         	epp1	.temp
    000177  aa  6 00102 2515 00         	spri1	.ring_alarm_arg_list+2
    000200  aa  6 00100 3501 00         	eppap	.ring_alarm_arg_list
    000201  4a  4 00264 3521 20         	short_call ring_alarm$poll
    000202  aa  7 00036 6701 20
    000203  aa  6 00030 3701 20
    000204  aa  6 00050 2341 00         	szn	.temp
    000205  0a   000171 6000 00         	tze	.return_code_return
    000206  aa  6 00020 3721 20         	eppsp	sp|stack_frame.prev_sp,*
    000207  4a  4 00266 6521 20         	sprisp	pds$pre_empt_poll_return          " short-return from here
    000210  aa  7 00022 3515 20         	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
    000211  aa  7 00024 2515 00         	spri1	sb|stack_header.stack_end_ptr
                                        " Leave SB as stack_0, so pxss can get to operators.
    000212  4a  4 00270 7101 20         	tra	pxss$pre_empt_poll
                                        
                                        	tempd	.ring_alarm_arg_list(2)
    000213  aa   000000 0110 03         	even
    000214                              .one_arg_header:
    000214  aa   000004 000004          	vfd	17/2,1/0,18/4
    000215  aa   000000 000000          	vfd	18/0,18/0
                                        
                                        
                                        
                                    18  
                                    19  	hgate	dmpr_build_vtoc_map,hc_dmpr_primitives,dmpr_build_vtoc_map,3
                        000001          	segdef	dmpr_build_vtoc_map
    000001                              dmpr_build_vtoc_map:
    000001  0a   000217 7100 00         	tra	dmpr_build_vtoc_map.e
    000216  a8   000006 000010          	zero	3*2,dmpr_build_vtoc_map.t
    000217                              dmpr_build_vtoc_map.e:
    000217  0a   000077 7020 00         	tsx2	.setup
    000220  aa   000000 6340 07         	ldi	=0,dl
    000221  4a  4 00272 3521 20         	short_call hc_dmpr_primitives$dmpr_build_vtoc_map(ap|0)
    000222  aa  7 00036 6701 20
    000223  aa  6 00030 3701 20
    000224  9a  4 00010 3521 00         	eppbp	lp|dmpr_build_vtoc_map.t
    000225  0a   000142 7100 00         	tra	.return_code
    000010                              dmpr_build_vtoc_map.t:
    000010                              	bss	,gate_entry_data_size
                                        
                                    20  	hgate	dmpr_lock_pv,hc_dmpr_primitives,dmpr_lock_pv,4
                        000002          	segdef	dmpr_lock_pv
    000002                              dmpr_lock_pv:
    000002  0a   000227 7100 00         	tra	dmpr_lock_pv.e
    000226  a8   000010 000020          	zero	4*2,dmpr_lock_pv.t
    000227                              dmpr_lock_pv.e:
    000227  0a   000077 7020 00         	tsx2	.setup
    000230  aa   000000 6340 07         	ldi	=0,dl
    000231  4a  4 00274 3521 20         	short_call hc_dmpr_primitives$dmpr_lock_pv(ap|0)
    000232  aa  7 00036 6701 20
    000233  aa  6 00030 3701 20
    000234  9a  4 00020 3521 00         	eppbp	lp|dmpr_lock_pv.t
    000235  0a   000142 7100 00         	tra	.return_code
    000020                              dmpr_lock_pv.t:
    000020                              	bss	,gate_entry_data_size
                                        
                                    21  	hgate	dmpr_unlock_pv,hc_dmpr_primitives,dmpr_unlock_pv,3
                        000003          	segdef	dmpr_unlock_pv
    000003                              dmpr_unlock_pv:
    000003  0a   000237 7100 00         	tra	dmpr_unlock_pv.e
    000236  a8   000006 000030          	zero	3*2,dmpr_unlock_pv.t
    000237                              dmpr_unlock_pv.e:
    000237  0a   000077 7020 00         	tsx2	.setup
    000240  aa   000000 6340 07         	ldi	=0,dl
    000241  4a  4 00276 3521 20         	short_call hc_dmpr_primitives$dmpr_unlock_pv(ap|0)
    000242  aa  7 00036 6701 20
    000243  aa  6 00030 3701 20
    000244  9a  4 00030 3521 00         	eppbp	lp|dmpr_unlock_pv.t
    000245  0a   000142 7100 00         	tra	.return_code
    000030                              dmpr_unlock_pv.t:
    000030                              	bss	,gate_entry_data_size
                                        
                                    22  	hgate	init_dmpr,hc_dmpr_primitives,init_dmpr,3
                        000004          	segdef	init_dmpr
    000004                              init_dmpr:
    000004  0a   000247 7100 00         	tra	init_dmpr.e
    000246  a8   000006 000040          	zero	3*2,init_dmpr.t
    000247                              init_dmpr.e:
    000247  0a   000077 7020 00         	tsx2	.setup
    000250  aa   000000 6340 07         	ldi	=0,dl
    000251  4a  4 00300 3521 20         	short_call hc_dmpr_primitives$init_dmpr(ap|0)
    000252  aa  7 00036 6701 20
    000253  aa  6 00030 3701 20
    000254  9a  4 00040 3521 00         	eppbp	lp|init_dmpr.t
    000255  0a   000142 7100 00         	tra	.return_code
    000040                              init_dmpr.t:
    000040                              	bss	,gate_entry_data_size
                                        
                                    23  	hgate	release_dmpr_aste,hc_dmpr_primitives,release_dmpr_aste,2
                        000005          	segdef	release_dmpr_aste
    000005                              release_dmpr_aste:
    000005  0a   000257 7100 00         	tra	release_dmpr_aste.e
    000256  a8   000004 000050          	zero	2*2,release_dmpr_aste.t
    000257                              release_dmpr_aste.e:
    000257  0a   000077 7020 00         	tsx2	.setup
    000260  aa   000000 6340 07         	ldi	=0,dl
    000261  4a  4 00302 3521 20         	short_call hc_dmpr_primitives$release_dmpr_aste(ap|0)
    000262  aa  7 00036 6701 20
    000263  aa  6 00030 3701 20
    000264  9a  4 00050 3521 00         	eppbp	lp|release_dmpr_aste.t
    000265  0a   000142 7100 00         	tra	.return_code
    000050                              release_dmpr_aste.t:
    000050                              	bss	,gate_entry_data_size
                                        
                                    24  	hgate	revert_dmpr,hc_dmpr_primitives,revert_dmpr,1
                        000006          	segdef	revert_dmpr
    000006                              revert_dmpr:
    000006  0a   000267 7100 00         	tra	revert_dmpr.e
    000266  a8   000002 000060          	zero	1*2,revert_dmpr.t
    000267                              revert_dmpr.e:
    000267  0a   000077 7020 00         	tsx2	.setup
    000270  aa   000000 6340 07         	ldi	=0,dl
    000271  4a  4 00304 3521 20         	short_call hc_dmpr_primitives$revert_dmpr(ap|0)
    000272  aa  7 00036 6701 20
    000273  aa  6 00030 3701 20
    000274  9a  4 00060 3521 00         	eppbp	lp|revert_dmpr.t
    000275  0a   000142 7100 00         	tra	.return_code
    000060                              revert_dmpr.t:
    000060                              	bss	,gate_entry_data_size
                                        
                                    25  	hgate	get_dmpr_data_object,hc_dmpr_primitives,get_dmpr_data_object,3
                        000007          	segdef	get_dmpr_data_object
    000007                              get_dmpr_data_object:
    000007  0a   000277 7100 00         	tra	get_dmpr_data_object.e
    000276  a8   000006 000070          	zero	3*2,get_dmpr_data_object.t
    000277                              get_dmpr_data_object.e:
    000277  0a   000077 7020 00         	tsx2	.setup
    000300  aa   000000 6340 07         	ldi	=0,dl
    000301  4a  4 00306 3521 20         	short_call hc_dmpr_primitives$get_dmpr_data_object(ap|0)
    000302  aa  7 00036 6701 20
    000303  aa  6 00030 3701 20
    000304  9a  4 00070 3521 00         	eppbp	lp|get_dmpr_data_object.t
    000305  0a   000142 7100 00         	tra	.return_code
    000070                              get_dmpr_data_object.t:
    000070                              	bss	,gate_entry_data_size
                                        
                                    26  	hgate	retv_append,append,retv,5,bad_dir_trap
                        000010          	segdef	retv_append
    000010                              retv_append:
    000010  0a   000307 7100 00         	tra	retv_append.e
    000306  a8   000012 000100          	zero	5*2,retv_append.t
    000307                              retv_append.e:
    000307  0a   000077 7020 00         	tsx2	.setup
    000310  0a   000472 7000 00         	tsx0	.set_dir_trap
    000311  aa   000000 6340 07         	ldi	=0,dl
    000312  4a  4 00310 3521 20         	short_call append$retv(ap|0)
    000313  aa  7 00036 6701 20
    000314  aa  6 00030 3701 20
    000315  9a  4 00100 3521 00         	eppbp	lp|retv_append.t
    000316  0a   000142 7100 00         	tra	.return_code
    000100                              retv_append.t:
    000100                              	bss	,gate_entry_data_size
                                        
                                    27  	hgate	retv_addname,retv_util,addname,4,bad_dir_trap
                        000011          	segdef	retv_addname
    000011                              retv_addname:
    000011  0a   000320 7100 00         	tra	retv_addname.e
    000317  a8   000010 000110          	zero	4*2,retv_addname.t
    000320                              retv_addname.e:
    000320  0a   000077 7020 00         	tsx2	.setup
    000321  0a   000472 7000 00         	tsx0	.set_dir_trap
    000322  aa   000000 6340 07         	ldi	=0,dl
    000323  4a  4 00312 3521 20         	short_call retv_util$addname(ap|0)
    000324  aa  7 00036 6701 20
    000325  aa  6 00030 3701 20
    000326  9a  4 00110 3521 00         	eppbp	lp|retv_addname.t
    000327  0a   000142 7100 00         	tra	.return_code
    000110                              retv_addname.t:
    000110                              	bss	,gate_entry_data_size
                                        
                                    28  	hgate	retv_add_acl,retv_util,add_acl,5,bad_dir_trap
                        000012          	segdef	retv_add_acl
    000012                              retv_add_acl:
    000012  0a   000331 7100 00         	tra	retv_add_acl.e
    000330  a8   000012 000120          	zero	5*2,retv_add_acl.t
    000331                              retv_add_acl.e:
    000331  0a   000077 7020 00         	tsx2	.setup
    000332  0a   000472 7000 00         	tsx0	.set_dir_trap
    000333  aa   000000 6340 07         	ldi	=0,dl
    000334  4a  4 00314 3521 20         	short_call retv_util$add_acl(ap|0)
    000335  aa  7 00036 6701 20
    000336  aa  6 00030 3701 20
    000337  9a  4 00120 3521 00         	eppbp	lp|retv_add_acl.t
    000340  0a   000142 7100 00         	tra	.return_code
    000120                              retv_add_acl.t:
    000120                              	bss	,gate_entry_data_size
                                        
                                    29  	hgate	retv_status,retv_util,status,13,bad_dir_trap
                        000013          	segdef	retv_status
    000013                              retv_status:
    000013  0a   000342 7100 00         	tra	retv_status.e
    000341  a8   000032 000130          	zero	13*2,retv_status.t
    000342                              retv_status.e:
    000342  0a   000077 7020 00         	tsx2	.setup
    000343  0a   000472 7000 00         	tsx0	.set_dir_trap
    000344  aa   000000 6340 07         	ldi	=0,dl
    000345  4a  4 00316 3521 20         	short_call retv_util$status(ap|0)
    000346  aa  7 00036 6701 20
    000347  aa  6 00030 3701 20
    000350  9a  4 00130 3521 00         	eppbp	lp|retv_status.t
    000351  0a   000142 7100 00         	tra	.return_code
    000130                              retv_status.t:
    000130                              	bss	,gate_entry_data_size
                                        
                                    30  	hgate	retv_check,retv_util,check,5,bad_dir_trap
                        000014          	segdef	retv_check
    000014                              retv_check:
    000014  0a   000353 7100 00         	tra	retv_check.e
    000352  a8   000012 000140          	zero	5*2,retv_check.t
    000353                              retv_check.e:
    000353  0a   000077 7020 00         	tsx2	.setup
    000354  0a   000472 7000 00         	tsx0	.set_dir_trap
    000355  aa   000000 6340 07         	ldi	=0,dl
    000356  4a  4 00320 3521 20         	short_call retv_util$check(ap|0)
    000357  aa  7 00036 6701 20
    000360  aa  6 00030 3701 20
    000361  9a  4 00140 3521 00         	eppbp	lp|retv_check.t
    000362  0a   000142 7100 00         	tra	.return_code
    000140                              retv_check.t:
    000140                              	bss	,gate_entry_data_size
                                        
                                    31  	hgate	retv_name_list,retv_util,name_list,5,bad_dir_trap
                        000015          	segdef	retv_name_list
    000015                              retv_name_list:
    000015  0a   000364 7100 00         	tra	retv_name_list.e
    000363  a8   000012 000150          	zero	5*2,retv_name_list.t
    000364                              retv_name_list.e:
    000364  0a   000077 7020 00         	tsx2	.setup
    000365  0a   000472 7000 00         	tsx0	.set_dir_trap
    000366  aa   000000 6340 07         	ldi	=0,dl
    000367  4a  4 00322 3521 20         	short_call retv_util$name_list(ap|0)
    000370  aa  7 00036 6701 20
    000371  aa  6 00030 3701 20
    000372  9a  4 00150 3521 00         	eppbp	lp|retv_name_list.t
    000373  0a   000142 7100 00         	tra	.return_code
    000150                              retv_name_list.t:
    000150                              	bss	,gate_entry_data_size
                                        
                                    32  	hgate	retv_copy,retv_copy,retv_copy,9,bad_dir_trap
                        000016          	segdef	retv_copy
    000016                              retv_copy:
    000016  0a   000375 7100 00         	tra	retv_copy.e
    000374  a8   000022 000160          	zero	9*2,retv_copy.t
    000375                              retv_copy.e:
    000375  0a   000077 7020 00         	tsx2	.setup
    000376  0a   000472 7000 00         	tsx0	.set_dir_trap
    000377  aa   000000 6340 07         	ldi	=0,dl
    000400  4a  4 00324 3521 20         	short_call retv_copy$retv_copy(ap|0)
    000401  aa  7 00036 6701 20
    000402  aa  6 00030 3701 20
    000403  9a  4 00160 3521 00         	eppbp	lp|retv_copy.t
    000404  0a   000142 7100 00         	tra	.return_code
    000160                              retv_copy.t:
    000160                              	bss	,gate_entry_data_size
                                        
                                    33  	hgate	retv_hash_search,retv_util,hash_search,4
                        000017          	segdef	retv_hash_search
    000017                              retv_hash_search:
    000017  0a   000406 7100 00         	tra	retv_hash_search.e
    000405  a8   000010 000170          	zero	4*2,retv_hash_search.t
    000406                              retv_hash_search.e:
    000406  0a   000077 7020 00         	tsx2	.setup
    000407  aa   000000 6340 07         	ldi	=0,dl
    000410  4a  4 00326 3521 20         	short_call retv_util$hash_search(ap|0)
    000411  aa  7 00036 6701 20
    000412  aa  6 00030 3701 20
    000413  9a  4 00170 3521 00         	eppbp	lp|retv_hash_search.t
    000414  0a   000142 7100 00         	tra	.return_code
    000170                              retv_hash_search.t:
    000170                              	bss	,gate_entry_data_size
                                        
                                    34  	hgate	decode_uidpath,uid_path_util,decode_uidpath_raw,4,bad_dir_trap
                        000020          	segdef	decode_uidpath
    000020                              decode_uidpath:
    000020  0a   000416 7100 00         	tra	decode_uidpath.e
    000415  a8   000010 000200          	zero	4*2,decode_uidpath.t
    000416                              decode_uidpath.e:
    000416  0a   000077 7020 00         	tsx2	.setup
    000417  0a   000472 7000 00         	tsx0	.set_dir_trap
    000420  aa   000000 6340 07         	ldi	=0,dl
    000421  4a  4 00330 3521 20         	short_call uid_path_util$decode_uidpath_raw(ap|0)
    000422  aa  7 00036 6701 20
    000423  aa  6 00030 3701 20
    000424  9a  4 00200 3521 00         	eppbp	lp|decode_uidpath.t
    000425  0a   000142 7100 00         	tra	.return_code
    000200                              decode_uidpath.t:
    000200                              	bss	,gate_entry_data_size
                                        
                                    35  	hgate	get_uidpath,uid_path_util,get_uidpath,4,bad_dir_trap
                        000021          	segdef	get_uidpath
    000021                              get_uidpath:
    000021  0a   000427 7100 00         	tra	get_uidpath.e
    000426  a8   000010 000210          	zero	4*2,get_uidpath.t
    000427                              get_uidpath.e:
    000427  0a   000077 7020 00         	tsx2	.setup
    000430  0a   000472 7000 00         	tsx0	.set_dir_trap
    000431  aa   000000 6340 07         	ldi	=0,dl
    000432  4a  4 00332 3521 20         	short_call uid_path_util$get_uidpath(ap|0)
    000433  aa  7 00036 6701 20
    000434  aa  6 00030 3701 20
    000435  9a  4 00210 3521 00         	eppbp	lp|get_uidpath.t
    000436  0a   000142 7100 00         	tra	.return_code
    000210                              get_uidpath.t:
    000210                              	bss	,gate_entry_data_size
                                        
                                    36  	hgate	get_entry,retv_util,get,4,bad_dir_trap
                        000022          	segdef	get_entry
    000022                              get_entry:
    000022  0a   000440 7100 00         	tra	get_entry.e
    000437  a8   000010 000220          	zero	4*2,get_entry.t
    000440                              get_entry.e:
    000440  0a   000077 7020 00         	tsx2	.setup
    000441  0a   000472 7000 00         	tsx0	.set_dir_trap
    000442  aa   000000 6340 07         	ldi	=0,dl
    000443  4a  4 00334 3521 20         	short_call retv_util$get(ap|0)
    000444  aa  7 00036 6701 20
    000445  aa  6 00030 3701 20
    000446  9a  4 00220 3521 00         	eppbp	lp|get_entry.t
    000447  0a   000142 7100 00         	tra	.return_code
    000220                              get_entry.t:
    000220                              	bss	,gate_entry_data_size
                                        
                                    37  	hgate	set_bc,retv_util,set_bc,5,bad_dir_trap
                        000023          	segdef	set_bc
    000023                              set_bc:
    000023  0a   000451 7100 00         	tra	set_bc.e
    000450  a8   000012 000230          	zero	5*2,set_bc.t
    000451                              set_bc.e:
    000451  0a   000077 7020 00         	tsx2	.setup
    000452  0a   000472 7000 00         	tsx0	.set_dir_trap
    000453  aa   000000 6340 07         	ldi	=0,dl
    000454  4a  4 00336 3521 20         	short_call retv_util$set_bc(ap|0)
    000455  aa  7 00036 6701 20
    000456  aa  6 00030 3701 20
    000457  9a  4 00230 3521 00         	eppbp	lp|set_bc.t
    000460  0a   000142 7100 00         	tra	.return_code
    000230                              set_bc.t:
    000230                              	bss	,gate_entry_data_size
                                        
                                    38  	hgate	delete,retv_util,delete,4,bad_dir_trap
                        000024          	segdef	delete
    000024                              delete:
    000024  0a   000462 7100 00         	tra	delete.e
    000461  a8   000010 000240          	zero	4*2,delete.t
    000462                              delete.e:
    000462  0a   000077 7020 00         	tsx2	.setup
    000463  0a   000472 7000 00         	tsx0	.set_dir_trap
    000464  aa   000000 6340 07         	ldi	=0,dl
    000465  4a  4 00340 3521 20         	short_call retv_util$delete(ap|0)
    000466  aa  7 00036 6701 20
    000467  aa  6 00030 3701 20
    000470  9a  4 00240 3521 00         	eppbp	lp|delete.t
    000471  0a   000142 7100 00         	tra	.return_code
    000240                              delete.t:
    000240                              	bss	,gate_entry_data_size
                                        
                                    39  
                                    40  	bad_dir_handler
                                        
                                        	include	on_unit
                                   5-1  "
                                   5-2  "	BEGIN INCLUDE FILE --- on_unit.incl.alm	5/75 RAB
                                   5-3  "
                        000000     5-4  	equ	on_unit.name,0
                        000002     5-5  	equ	on_unit.body,2
                        000004     5-6  	equ	on_unit.size,4
                        000005     5-7  	equ	on_unit.next,5	upper	offset relative to stack FRAME
                        000005     5-8  	equ	on_unit.flags,5	lower
                        000006     5-9  	equ	on_unit.file,6
                        000010    5-10  	equ	on_unit.file_copy,8
                                  5-11  "
                                  5-12  "	END INCLUDE FILE --- on_unit.incl.alm
                                  5-13  "
                                        
                                        	use	transfer_vector
    000025                              .handler_entry:
    000025  0a   000515 7100 00         	tra	.handler
    000026                              .handler_restart_entry:
    000026  0a   000555 7100 00         	tra	.handler_restart_point
                                        
                                        	use	main
    000472                              .set_dir_trap:
    000472  aa  6 00071 7401 00         	stx0	.entryp		save for restart
                                        
    000473  aa   000100 1004 00         	mlr	(),(pr),fill(000)
    000474  aa   000000 000000          	desc9a	0,0
    000475  aa   600056 000050          	desc9a	.on_unit,10*4
    000476  0a   000512 3520 00         	eppbp	.bad_dir_name
    000477  aa  6 00056 2521 00         	spribp	.on_unit+on_unit.name
    000500  0a   000025 3520 00         	eppbp	.handler_entry
    000501  aa  6 00060 2521 00         	spribp	.on_unit+on_unit.body
    000502  0a   000514 7210 00         	lxl1	.bad_dir_desc
    000503  aa  6 00062 4411 00         	sxl1	.on_unit+on_unit.size
    000504  aa  6 00056 6351 00         	eaa	.on_unit		set up on-unit for bad_dir_
    000505  aa  6 00000 1351 03         	sbla	sp|0,du		.. make rel to sp
    000506  aa  6 00036 7551 00         	sta	sp|stack_frame.on_unit_rel_ptrs
    000507  aa   000100 2350 07         	lda	stack_frame.condition_bit,dl
    000510  aa  6 00020 2551 00         	orsa	sp|stack_frame.flag_word
    000511  aa   000000 7100 10         	tra	0,0
                                        
                                        	string	bad_dir_
    000512                              .bad_dir_name:
    000512  aa  142 141 144 137         	aci	"bad_dir_"
    000513  aa  144 151 162 137
    000514                              .bad_dir_desc:
    000514  aa   525000 000010          	vfd	o9/525,o27/8
                                        
                                        
                                        
                                        
    000515  aa  6 00000 2131 00         .handler:	epaq	sp|0		verify that call came from ring 0
    000516  aa   777777 3150 07         	cana	-1,dl		check ring number in AL
    000517  0a   000521 6000 00         	tze	*+2
    000520  aa   000000 000000          	zero	0		go way kid you bother me
                                        
    000521  aa   000120 6270 00         	push			" ok, we like the call
    000522  aa  7 00040 2721 20
    000523  0a   000030 3700 20         	epplp	.my_lp,*
    000524  aa  0 00000 2201 00         	ldx0	ap|0		get display
    000525  aa  0 00002 3521 30         	eppbp	ap|2,0*
    000526  aa  2 00020 2351 00         	lda	bp|stack_frame.prev_sp
    000527  aa   700000 3150 07         	cana	=o700000,dl	from another ring?
    000530  0a   000552 6000 00         	tze	.continue_signal	if not, back to signal_
    000531  aa  0 00002 3501 20         	eppap	ap|2,*		Get mcptr
    000532  aa  0 00000 3501 20         	eppap	ap|0,*		..
    000533  aa  2 00076 2501 00         	spriap	bp|.mcptr		.. save in gate frame
    000534  aa  6 00054 2521 00         	spribp	.label_variable+2
    000535  0a   000026 3520 00         	eppbp	.handler_restart_entry
    000536  aa  6 00052 2521 00         	spribp	.label_variable
    000537  aa  6 00052 3521 00         	eppbp	.label_variable
    000540  aa  6 00060 2521 00         	spribp	.unwinder_arglist+2
    000541  aa   004000 4310 07         	fld	=1b24,dl
    000542  aa  6 00056 7571 00         	staq	.unwinder_arglist
    000543  aa  6 00000 2541 00         	call	unwinder_$unwinder_(.unwinder_arglist)
    000544  aa  6 00056 3501 00
    000545  4a  4 00252 3521 20
    000546  aa  6 00040 7531 00
    000547  aa  7 00036 6701 20
    000550  aa  6 00000 1731 00
    000551  aa  6 00040 0731 00
                                        
    000552                              .continue_signal:
    000552  aa   400000 2350 03         	lda	=o400000,du	"1"b
    000553  aa  0 00012 7551 20         	sta	ap|10,*		set continue bit
    000554  aa  7 00042 7101 20         	return
                                        
    000555                              .handler_restart_point:
    000555  aa  6 00000 2131 00         	epaq	sp|0		check that call came from ring 0
    000556  aa   777777 3150 07         	cana	-1,dl
    000557  0a   000561 6000 00         	tze	*+2
    000560  aa   000001 000000          	zero	1
    000561  0a   000030 3700 20         	epplp	.my_lp,*
    000562  aa   000101 3350 07         	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
    000563  aa  6 00020 3551 00         	ansa	sp|stack_frame.flag_word
    000564  aa  6 00076 3521 00         	eppbp	.mcptr
    000565  aa  6 00074 2521 00         	spribp	.vfl_arglist+2
    000566  aa   004000 4310 07         	fld	=1b24,dl
    000567  aa  6 00072 7571 00         	staq	.vfl_arglist
    000570  4a  4 00342 3521 20         	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
    000571  aa  7 00036 6701 20
    000572  aa  6 00030 3701 20
    000573  aa  6 00071 2201 00         	ldx0	.entryp
    000574  aa  6 00032 3501 20         	eppap	sp|stack_frame.arg_ptr,*
    000575  aa   000000 7100 10         	tra	0,0		retry the call
                                        
                                        
                                    41  
                                    42  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000576  5a   000003 000000 
    000577  5a   000237 600000 
    000600  aa   000000 000000 
    000601  55   000011 000002 
    000602  5a   000002 400003 
    000603  55   000006 000011 
    000604  aa  012 150 143 137
    000605  aa  142 141 143 153
    000606  aa  165 160 137 000
    000607  55   000016 000003 
    000610  0a   000024 400000 
    000611  55   000014 000003 
    000612  aa  006 144 145 154         delete
    000613  aa  145 164 145 000
    000614  55   000023 000011 
    000615  0a   000023 400000 
    000616  55   000021 000003 
    000617  aa  006 163 145 164         set_bc
    000620  aa  137 142 143 000
    000621  55   000031 000016 
    000622  0a   000022 400000 
    000623  55   000026 000003 
    000624  aa  011 147 145 164         get_entry
    000625  aa  137 145 156 164
    000626  aa  162 171 000 000
    000627  55   000037 000023 
    000630  0a   000021 400000 
    000631  55   000034 000003 
    000632  aa  013 147 145 164         get_uidpath
    000633  aa  137 165 151 144
    000634  aa  160 141 164 150
    000635  55   000046 000031 
    000636  0a   000020 400000 
    000637  55   000042 000003 
    000640  aa  016 144 145 143         decode_uidpath
    000641  aa  157 144 145 137
    000642  aa  165 151 144 160
    000643  aa  141 164 150 000
    000644  55   000056 000037 
    000645  0a   000017 400000 
    000646  55   000051 000003 
    000647  aa  020 162 145 164         retv_hash_search
    000650  aa  166 137 150 141
    000651  aa  163 150 137 163
    000652  aa  145 141 162 143
    000653  aa  150 000 000 000
    000654  55   000064 000046 
    000655  0a   000016 400000 
    000656  55   000061 000003 
    000657  aa  011 162 145 164         retv_copy
    000660  aa  166 137 143 157
    000661  aa  160 171 000 000
    000662  55   000073 000056 
    000663  0a   000015 400000 
    000664  55   000067 000003 
    000665  aa  016 162 145 164         retv_name_list
    000666  aa  166 137 156 141
    000667  aa  155 145 137 154
    000670  aa  151 163 164 000
    000671  55   000101 000064 
    000672  0a   000014 400000 
    000673  55   000076 000003 
    000674  aa  012 162 145 164         retv_check
    000675  aa  166 137 143 150
    000676  aa  145 143 153 000
    000677  55   000107 000073 
    000700  0a   000013 400000 
    000701  55   000104 000003 
    000702  aa  013 162 145 164         retv_status
    000703  aa  166 137 163 164
    000704  aa  141 164 165 163
    000705  55   000116 000101 
    000706  0a   000012 400000 
    000707  55   000112 000003 
    000710  aa  014 162 145 164         retv_add_acl
    000711  aa  166 137 141 144
    000712  aa  144 137 141 143
    000713  aa  154 000 000 000
    000714  55   000125 000107 
    000715  0a   000011 400000 
    000716  55   000121 000003 
    000717  aa  014 162 145 164         retv_addname
    000720  aa  166 137 141 144
    000721  aa  144 156 141 155
    000722  aa  145 000 000 000
    000723  55   000133 000116 
    000724  0a   000010 400000 
    000725  55   000130 000003 
    000726  aa  013 162 145 164         retv_append
    000727  aa  166 137 141 160
    000730  aa  160 145 156 144
    000731  55   000144 000125 
    000732  0a   000007 400000 
    000733  55   000136 000003 
    000734  aa  024 147 145 164         get_dmpr_data_object
    000735  aa  137 144 155 160
    000736  aa  162 137 144 141
    000737  aa  164 141 137 157
    000740  aa  142 152 145 143
    000741  aa  164 000 000 000
    000742  55   000152 000133 
    000743  0a   000006 400000 
    000744  55   000147 000003 
    000745  aa  013 162 145 166         revert_dmpr
    000746  aa  145 162 164 137
    000747  aa  144 155 160 162
    000750  55   000162 000144 
    000751  0a   000005 400000 
    000752  55   000155 000003 
    000753  aa  021 162 145 154         release_dmpr_aste
    000754  aa  145 141 163 145
    000755  aa  137 144 155 160
    000756  aa  162 137 141 163
    000757  aa  164 145 000 000
    000760  55   000170 000152 
    000761  0a   000004 400000 
    000762  55   000165 000003 
    000763  aa  011 151 156 151         init_dmpr
    000764  aa  164 137 144 155
    000765  aa  160 162 000 000
    000766  55   000177 000162 
    000767  0a   000003 400000 
    000770  55   000173 000003 
    000771  aa  016 144 155 160         dmpr_unlock_pv
    000772  aa  162 137 165 156
    000773  aa  154 157 143 153
    000774  aa  137 160 166 000
    000775  55   000206 000170 
    000776  0a   000002 400000 
    000777  55   000202 000003 
    001000  aa  014 144 155 160         dmpr_lock_pv
    001001  aa  162 137 154 157
    001002  aa  143 153 137 160
    001003  aa  166 000 000 000
    001004  55   000216 000177 
    001005  0a   000001 400000 
    001006  55   000211 000003 
    001007  aa  023 144 155 160         dmpr_build_vtoc_map
    001010  aa  162 137 142 165
    001011  aa  151 154 144 137
    001012  aa  166 164 157 143
    001013  aa  137 155 141 160
    001014  55   000223 000206 
    001015  0a   000030 400000 
    001016  55   000221 000003 
    001017  aa  006 056 155 171         .my_lp
    001020  aa  137 154 160 000
    001021  55   000230 000216 
    001022  0a   000027 400000 
    001023  55   000226 000003 
    001024  aa  007 056 164 166         .tv_end
    001025  aa  137 145 156 144
    001026  55   000002 000223 
    001027  6a   000000 400002 
    001030  55   000233 000003 
    001031  aa  014 163 171 155         symbol_table
    001032  aa  142 157 154 137
    001033  aa  164 141 142 154
    001034  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001035  aa   000000 000033 
    001036  aa   000000 000000 
    001037  5a   000023 000000 
    001040  aa   000000 000000 
    001041  5a   000037 000000 
    001042  5a   000206 000000 
    001043  5a   000046 000000 
    001044  aa   000000 000000 
    001045  5a   000064 000000 
    001046  5a   000170 000000 
    001047  5a   000107 000000 
    001050  5a   000101 000000 
    001051  5a   000073 000000 
    001052  5a   000056 000000 
    001053  5a   000116 000000 
    001054  5a   000125 000000 
    001055  5a   000144 000000 
    001056  5a   000016 000000 
    001057  5a   000133 000000 
    001060  5a   000162 000000 
    001061  5a   000177 000000 
    001062  5a   000011 000000 
    001063  5a   000223 000000 
    001064  5a   000230 000000 
    001065  5a   000152 000000 
    001066  aa   000000 000000 
    001067  5a   000216 000000 
    001070  5a   000031 000000 

EXTERNAL NAMES

    001071  aa  023 166 145 162         verify_lock_bad_dir
    001072  aa  151 146 171 137
    001073  aa  154 157 143 153
    001074  aa  137 142 141 144
    001075  aa  137 144 151 162
    001076  aa  013 166 145 162         verify_lock
    001077  aa  151 146 171 137
    001100  aa  154 157 143 153
    001101  aa  003 147 145 164         get
    001102  aa  022 144 145 143         decode_uidpath_raw
    001103  aa  157 144 145 137
    001104  aa  165 151 144 160
    001105  aa  141 164 150 137
    001106  aa  162 141 167 000
    001107  aa  015 165 151 144         uid_path_util
    001110  aa  137 160 141 164
    001111  aa  150 137 165 164
    001112  aa  151 154 000 000
    001113  aa  013 150 141 163         hash_search
    001114  aa  150 137 163 145
    001115  aa  141 162 143 150
    001116  aa  011 156 141 155         name_list
    001117  aa  145 137 154 151
    001120  aa  163 164 000 000
    001121  aa  005 143 150 145         check
    001122  aa  143 153 000 000
    001123  aa  006 163 164 141         status
    001124  aa  164 165 163 000
    001125  aa  007 141 144 144         add_acl
    001126  aa  137 141 143 154
    001127  aa  007 141 144 144         addname
    001130  aa  156 141 155 145
    001131  aa  011 162 145 164         retv_util
    001132  aa  166 137 165 164
    001133  aa  151 154 000 000
    001134  aa  004 162 145 164         retv
    001135  aa  166 000 000 000
    001136  aa  006 141 160 160         append
    001137  aa  145 156 144 000
    001140  aa  022 150 143 137         hc_dmpr_primitives
    001141  aa  144 155 160 162
    001142  aa  137 160 162 151
    001143  aa  155 151 164 151
    001144  aa  166 145 163 000
    001145  aa  015 160 162 145         pre_empt_poll
    001146  aa  137 145 155 160
    001147  aa  164 137 160 157
    001150  aa  154 154 000 000
    001151  aa  004 160 170 163         pxss
    001152  aa  163 000 000 000
    001153  aa  024 160 162 145         pre_empt_poll_return
    001154  aa  137 145 155 160
    001155  aa  164 137 160 157
    001156  aa  154 154 137 162
    001157  aa  145 164 165 162
    001160  aa  156 000 000 000
    001161  aa  004 160 157 154         poll
    001162  aa  154 000 000 000
    001163  aa  012 162 151 156         ring_alarm
    001164  aa  147 137 141 154
    001165  aa  141 162 155 000
    001166  aa  012 160 141 147         page_waits
    001167  aa  145 137 167 141
    001170  aa  151 164 163 000
    001171  aa  015 166 151 162         virtual_delta
    001172  aa  164 165 141 154
    001173  aa  137 144 145 154
    001174  aa  164 141 000 000
    001175  aa  010 143 160 165         cpu_time
    001176  aa  137 164 151 155
    001177  aa  145 000 000 000
    001200  aa  003 160 144 163         pds
    001201  aa  006 143 154 157         clock_
    001202  aa  143 153 137 000
    001203  aa  010 163 171 163         sys_info
    001204  aa  137 151 156 146
    001205  aa  157 000 000 000
    001206  aa  011 165 156 167         unwinder_
    001207  aa  151 156 144 145
    001210  aa  162 137 000 000
    001211  aa  007 163 151 147         signal_
    001212  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001213  aa   000004 000000 
    001214  55   000300 000273 
    001215  aa   000004 000000 
    001216  55   000333 000014 
    001217  aa   000004 000000 
    001220  55   000333 000021 
    001221  aa   000004 000000 
    001222  55   000333 000303 
    001223  aa   000004 000000 
    001224  55   000311 000034 
    001225  aa   000004 000000 
    001226  55   000311 000304 
    001227  aa   000004 000000 
    001230  55   000333 000315 
    001231  aa   000004 000000 
    001232  55   000061 000061 
    001233  aa   000004 000000 
    001234  55   000333 000320 
    001235  aa   000004 000000 
    001236  55   000333 000323 
    001237  aa   000004 000000 
    001240  55   000333 000325 
    001241  aa   000004 000000 
    001242  55   000333 000327 
    001243  aa   000004 000000 
    001244  55   000333 000331 
    001245  aa   000004 000000 
    001246  55   000340 000336 
    001247  aa   000004 000000 
    001250  55   000342 000136 
    001251  aa   000004 000000 
    001252  55   000342 000147 
    001253  aa   000004 000000 
    001254  55   000342 000155 
    001255  aa   000004 000000 
    001256  55   000342 000165 
    001257  aa   000004 000000 
    001260  55   000342 000173 
    001261  aa   000004 000000 
    001262  55   000342 000202 
    001263  aa   000004 000000 
    001264  55   000342 000211 
    001265  aa   000004 000000 
    001266  55   000353 000347 
    001267  aa   000004 000000 
    001270  55   000402 000355 
    001271  aa   000004 000000 
    001272  55   000365 000363 
    001273  aa   000004 000000 
    001274  55   000402 000370 
    001275  aa   000004 000000 
    001276  55   000402 000373 
    001277  aa   000004 000000 
    001300  55   000402 000377 
    001301  aa   000004 000000 
    001302  55   000405 000403 
    001303  aa   000004 000000 
    001304  55   000410 000410 
    001305  aa   000004 000000 
    001306  55   000413 000413 
    001307  aa   000001 000000 
    001310  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001311  5a   000415 000000 
    001312  5a   000417 000000 
    001313  5a   000421 000000 
    001314  5a   000423 000000 
    001315  5a   000425 000000 
    001316  5a   000427 000000 
    001317  5a   000431 000000 
    001320  5a   000433 000000 
    001321  5a   000435 000000 
    001322  5a   000437 000000 
    001323  5a   000441 000000 
    001324  5a   000443 000000 
    001325  5a   000445 000000 
    001326  5a   000447 000000 
    001327  5a   000451 000000 
    001330  5a   000453 000000 
    001331  5a   000455 000000 
    001332  5a   000457 000000 
    001333  5a   000461 000000 
    001334  5a   000463 000000 
    001335  5a   000465 000000 
    001336  5a   000467 000000 
    001337  5a   000471 000000 
    001340  5a   000473 000000 
    001341  5a   000475 000000 
    001342  5a   000477 000000 
    001343  5a   000501 000000 
    001344  5a   000503 000000 
    001345  5a   000505 000000 
    001346  5a   000507 000000 
    001347  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000576 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000250 000344 
    000007  a2   000000 000240 
    000250  9a   777530 0000 46         signal_|signal_
    000251  5a   000550 0000 00
    000252  9a   777526 0000 46         unwinder_|unwinder_
    000253  5a   000547 0000 00
    000254  9a   777524 0000 46         sys_info|clock_
    000255  5a   000546 0000 20
    000256  9a   777522 0000 46         pds|cpu_time
    000257  5a   000545 0000 00
    000260  9a   777520 0000 46         pds|virtual_delta
    000261  5a   000544 0000 00
    000262  9a   777516 0000 46         pds|page_waits
    000263  5a   000543 0000 00
    000264  9a   777514 0000 46         ring_alarm|poll
    000265  5a   000542 0000 00
    000266  9a   777512 0000 46         pds|pre_empt_poll_return
    000267  5a   000541 0000 00
    000270  9a   777510 0000 46         pxss|pre_empt_poll
    000271  5a   000540 0000 00
    000272  9a   777506 0000 46         hc_dmpr_primitives|dmpr_build_vtoc_map
    000273  5a   000537 0000 00
    000274  9a   777504 0000 46         hc_dmpr_primitives|dmpr_lock_pv
    000275  5a   000536 0000 00
    000276  9a   777502 0000 46         hc_dmpr_primitives|dmpr_unlock_pv
    000277  5a   000535 0000 00
    000300  9a   777500 0000 46         hc_dmpr_primitives|init_dmpr
    000301  5a   000534 0000 00
    000302  9a   777476 0000 46         hc_dmpr_primitives|release_dmpr_aste
    000303  5a   000533 0000 00
    000304  9a   777474 0000 46         hc_dmpr_primitives|revert_dmpr
    000305  5a   000532 0000 00
    000306  9a   777472 0000 46         hc_dmpr_primitives|get_dmpr_data_object
    000307  5a   000531 0000 00
    000310  9a   777470 0000 46         append|retv
    000311  5a   000530 0000 00
    000312  9a   777466 0000 46         retv_util|addname
    000313  5a   000527 0000 00
    000314  9a   777464 0000 46         retv_util|add_acl
    000315  5a   000526 0000 00
    000316  9a   777462 0000 46         retv_util|status
    000317  5a   000525 0000 00
    000320  9a   777460 0000 46         retv_util|check
    000321  5a   000524 0000 00
    000322  9a   777456 0000 46         retv_util|name_list
    000323  5a   000523 0000 00
    000324  9a   777454 0000 46         retv_copy|retv_copy
    000325  5a   000522 0000 00
    000326  9a   777452 0000 46         retv_util|hash_search
    000327  5a   000521 0000 00
    000330  9a   777450 0000 46         uid_path_util|decode_uidpath_raw
    000331  5a   000520 0000 00
    000332  9a   777446 0000 46         uid_path_util|get_uidpath
    000333  5a   000517 0000 00
    000334  9a   777444 0000 46         retv_util|get
    000335  5a   000516 0000 00
    000336  9a   777442 0000 46         retv_util|set_bc
    000337  5a   000515 0000 00
    000340  9a   777440 0000 46         retv_util|delete
    000341  5a   000514 0000 00
    000342  9a   777436 0000 46         verify_lock|verify_lock_bad_dir
    000343  5a   000513 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   247540 650065 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000376 
    000020  aa   000000 000202 
    000021  aa   000303 000255 
    000022  aa   000364 000202 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000006 
    000066  aa   000116 000041 
    000067  aa   175453 027551 
    000070  aa   000000 117547 
    000071  aa   224324 200000 
    000072  aa   000127 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   000140 000042 
    000077  aa   147777 464111 
    000100  aa   000000 115000 
    000101  aa   507463 000000 
    000102  aa   000151 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   000162 000037 
    000107  aa   127236 043523 
    000110  aa   000000 112724 
    000111  aa   701744 400000 
    000112  aa   000172 000035 
    000113  aa   043243 130223 
    000114  aa   000000 102727 
    000115  aa   712743 600000 
    000116  aa   076163 160145          >spec>install>1115>hc_backup_.alm
    000117  aa   143076 151156 
    000120  aa   163164 141154 
    000121  aa   154076 061061 
    000122  aa   061065 076150 
    000123  aa   143137 142141 
    000124  aa   143153 165160 
    000125  aa   137056 141154 
    000126  aa   155040 040040 
    000127  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000130  aa   076151 156143 
    000131  aa   154165 144145 
    000132  aa   076147 141164 
    000133  aa   145137 155141 
    000134  aa   143162 157163 
    000135  aa   056151 156143 
    000136  aa   154056 141154 
    000137  aa   155040 040040 
    000140  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000141  aa   076151 156143 
    000142  aa   154165 144145 
    000143  aa   076163 164141 
    000144  aa   143153 137150 
    000145  aa   145141 144145 
    000146  aa   162056 151156 
    000147  aa   143154 056141 
    000150  aa   154155 040040 
    000151  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000152  aa   076151 156143 
    000153  aa   154165 144145 
    000154  aa   076163 164141 
    000155  aa   143153 137146 
    000156  aa   162141 155145 
    000157  aa   056151 156143 
    000160  aa   154056 141154 
    000161  aa   155040 040040 
    000162  aa   076154 144144          >ldd>include>gate_data.incl.alm
    000163  aa   076151 156143 
    000164  aa   154165 144145 
    000165  aa   076147 141164 
    000166  aa   145137 144141 
    000167  aa   164141 056151 
    000170  aa   156143 154056 
    000171  aa   141154 155040 
    000172  aa   076154 144144          >ldd>include>on_unit.incl.alm
    000173  aa   076151 156143 
    000174  aa   154165 144145 
    000175  aa   076157 156137 
    000176  aa   165156 151164 
    000177  aa   056151 156143 
    000200  aa   154056 141154 
    000201  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          32    .actor                   hc_backup_:    17.
         514    .bad_dir_desc            hc_backup_:    40.
         512    .bad_dir_name            hc_backup_:    40.
         552    .continue_signal         hc_backup_:    40.
          66    .defs_loop               hc_backup_:    17.
          71    .entryp                  hc_backup_:    17,   40.
         131    .gate_errordesc          hc_backup_:    17.
         126    .gate_errorname          hc_backup_:    17.
         515    .handler                 hc_backup_:    40.
          25    .handler_entry           hc_backup_:    40.
          26    .handler_restart_entry   hc_backup_:    40.
         555    .handler_restart_point   hc_backup_:    40.
          52    .label_variable          hc_backup_:    17,   40.
          76    .mcptr                   hc_backup_:    17,   40.
          30    .my_lp                   hc_backup_:    17,   40.
          74    .next_def                hc_backup_:    17.
         132    .no_gate_error           hc_backup_:    17.
         214    .one_arg_header          hc_backup_:    17.
          56    .on_unit                 hc_backup_:    17,   40.
          70    .pf                      hc_backup_:    17.
         142    .return_code             hc_backup_:    17,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
                                                        30,   31,   32,   33,   34,   35,   36,   37,   38.
         171    .return_code_return      hc_backup_:    17.
          51    .return_name             hc_backup_:    17.
         172    .ring_alarm              hc_backup_:    17.
         100    .ring_alarm_arg_list     hc_backup_:    17.
          64    .search_defs             hc_backup_:    17.
          77    .setup                   hc_backup_:    17,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
                                                        30,   31,   32,   33,   34,   35,   36,   37,   38.
         472    .set_dir_trap            hc_backup_:    26,   27,   28,   29,   30,   31,   32,   34,   35,   36,   37,   38,   40.
          50    .temp                    hc_backup_:    17.
          52    .time1                   hc_backup_:    17.
          54    .time2                   hc_backup_:    17.
           0    .tv_begin                hc_backup_:    17.
          27    .tv_end                  hc_backup_:    17.
          56    .unwinder_arglist        hc_backup_:    17,   40.
          72    .vfl_arglist             hc_backup_:    17,   40.
                addname                  hc_backup_:    27.
                add_acl                  hc_backup_:    28.
                append                   hc_backup_:    26.
        1170    call_offset              stack_header:        80.
                check                    hc_backup_:    30.
                clock_                   hc_backup_:    17.
                cpu_time                 hc_backup_:    17.
          20    decode_uidpath           hc_backup_:    34.
         416    decode_uidpath.e         hc_backup_:    34.
         200    decode_uidpath.t         hc_backup_:    34.
                decode_uidpath_raw       hc_backup_:    34.
          24    delete                   hc_backup_:    38.
         462    delete.e                 hc_backup_:    38.
         240    delete.t                 hc_backup_:    38.
           1    dmpr_build_vtoc_map      hc_backup_:    19.
         217    dmpr_build_vtoc_map.e    hc_backup_:    19.
          10    dmpr_build_vtoc_map.t    hc_backup_:    19.
           2    dmpr_lock_pv             hc_backup_:    20.
         227    dmpr_lock_pv.e           hc_backup_:    20.
          20    dmpr_lock_pv.t           hc_backup_:    20.
           3    dmpr_unlock_pv           hc_backup_:    21.
         237    dmpr_unlock_pv.e         hc_backup_:    21.
          30    dmpr_unlock_pv.t         hc_backup_:    21.
        1174    entry_offset             stack_header:        84.
           5    gate_entry_data.calls    hc_backup_:    17,
                                         gate_data:     30.
           0    gate_entry_data.cpu_time       hc_backup_:    17,
                                               gate_data:     27.
           4    gate_entry_data.page_waits     hc_backup_:    17,
                                               gate_data:     29.
           6    gate_entry_data.ring_alarms    hc_backup_:    17,
                                               gate_data:     31.
           2    gate_entry_data.vcpu_time      hc_backup_:    17,
                                               gate_data:     28.
          10    gate_entry_data_size     hc_backup_:    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
                                                        31,   32,   33,   34,   35,   36,   37,   38,
                                         gate_data:     25.
           2    gate_table.datap         gate_data:     20.
           1    gate_table.entryl        gate_data:     19.
           0    gate_table.entryp        gate_data:     18.
           3    gate_table_size          gate_data:     15.
                get                      hc_backup_:    36.
           7    get_dmpr_data_object     hc_backup_:    25.
         277    get_dmpr_data_object.e   hc_backup_:    25.
          70    get_dmpr_data_object.t   hc_backup_:    25.
          22    get_entry                hc_backup_:    36.
         440    get_entry.e              hc_backup_:    36.
         220    get_entry.t              hc_backup_:    36.
          21    get_uidpath              hc_backup_:    35.
         427    get_uidpath.e            hc_backup_:    35.
         210    get_uidpath.t            hc_backup_:    35.
                hash_search              hc_backup_:    33.
                hc_dmpr_primitives       hc_backup_:    19,   20,   21,   22,   23,   24,   25.
           4    init_dmpr                hc_backup_:    22.
         247    init_dmpr.e              hc_backup_:    22.
          40    init_dmpr.t              hc_backup_:    22.
          10    linkage                  hc_backup_:    17,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
                                                        30,   31,   32,   33,   34,   35,   36,   37,   38.
          30    main                     hc_backup_:    17,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
                                                        30,   31,   32,   33,   34,   35,   36,   37,   38,   40.
                name_list                hc_backup_:    31.
           2    on_unit.body             hc_backup_:    40,
                                         on_unit:        5.
           6    on_unit.file             on_unit:        9.
          10    on_unit.file_copy        on_unit:       10.
           5    on_unit.flags            on_unit:        8.
           0    on_unit.name             hc_backup_:    40,
                                         on_unit:        4.
           5    on_unit.next             on_unit:        7.
           4    on_unit.size             hc_backup_:    40,
                                         on_unit:        6.
                page_waits               hc_backup_:    17.
                pds                      hc_backup_:    17.
                poll                     hc_backup_:    17.
                pre_empt_poll            hc_backup_:    17.
                pre_empt_poll_return     hc_backup_:    17.
        1171    push_offset              stack_header:        81.
                pxss                     hc_backup_:    17.
           5    release_dmpr_aste        hc_backup_:    23.
         257    release_dmpr_aste.e      hc_backup_:    23.
          50    release_dmpr_aste.t      hc_backup_:    23.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
                retv                     hc_backup_:    26.
          11    retv_addname             hc_backup_:    27.
         320    retv_addname.e           hc_backup_:    27.
         110    retv_addname.t           hc_backup_:    27.
          12    retv_add_acl             hc_backup_:    28.
         331    retv_add_acl.e           hc_backup_:    28.
         120    retv_add_acl.t           hc_backup_:    28.
          10    retv_append              hc_backup_:    26.
         307    retv_append.e            hc_backup_:    26.
         100    retv_append.t            hc_backup_:    26.
          14    retv_check               hc_backup_:    30.
         353    retv_check.e             hc_backup_:    30.
         140    retv_check.t             hc_backup_:    30.
          16    retv_copy                hc_backup_:    32.
         375    retv_copy.e              hc_backup_:    32.
         160    retv_copy.t              hc_backup_:    32.
          17    retv_hash_search         hc_backup_:    33.
         406    retv_hash_search.e       hc_backup_:    33.
         170    retv_hash_search.t       hc_backup_:    33.
          15    retv_name_list           hc_backup_:    31.
         364    retv_name_list.e         hc_backup_:    31.
         150    retv_name_list.t         hc_backup_:    31.
          13    retv_status              hc_backup_:    29.
         342    retv_status.e            hc_backup_:    29.
         130    retv_status.t            hc_backup_:    29.
                retv_util                hc_backup_:    27,   28,   29,   30,   31,   33,   36,   37,   38.
           6    revert_dmpr              hc_backup_:    24.
         267    revert_dmpr.e            hc_backup_:    24.
          60    revert_dmpr.t            hc_backup_:    24.
                ring_alarm               hc_backup_:    17.
          23    set_bc                   hc_backup_:    37.
         451    set_bc.e                 hc_backup_:    37.
         230    set_bc.t                 hc_backup_:    37.
                signal_                  hc_backup_:    17.
         120    signal_arglist           hc_backup_:    17.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      hc_backup_:    40,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      hc_backup_:    40,
                                               stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    hc_backup_:    40,
                                         stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       hc_backup_:    17,
                                         stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   hc_backup_:    40,
                                               stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      hc_backup_:    17,   40,
                                         stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   hc_backup_:    17,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   hc_backup_:    17,
                                               stack_header:        37.
          24    stack_header.stack_end_ptr     hc_backup_:    17,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
                status                   hc_backup_:    29.
                sys_info                 hc_backup_:    17.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          hc_backup_:    17,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
                                                        30,   31,   32,   33,   34,   35,   36,   37,   38,   40.
          27    tv_end                   hc_backup_:    17.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
                uid_path_util            hc_backup_:    34,   35.
                unwinder_                hc_backup_:    40.
                verify_lock              hc_backup_:    40.
                verify_lock_bad_dir      hc_backup_:    40.
                virtual_delta            hc_backup_:    17.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
