	COMPILATION LISTING OF SEGMENT !BBBJZjXmgZDgJF
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1100.3 mst Sat
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*   *                                                         *
        5*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        6*   *                                                         *
        7*   *********************************************************** */
        8 /* initialize_faults_data.cds -- control bits for initialize_faults */
        9 /* format: style2 */
       10 
       11 initialize_faults_data:
       12      procedure;
       13 
       14 	declare 1 if_data		 aligned,
       15 		2 primary_one	 (0:31) bit (1) unaligned,
       16 		2 pad_align1	 bit (0) aligned,
       17 		2 signal_one	 (0:31) bit (1) unaligned,
       18 		2 pad_align2	 bit (0) aligned,
       19 		2 onc_one		 (0:31) bit (1) unaligned,
       20 		2 pad_align3	 bit (0) aligned,
       21 		2 primary_two	 (0:31) bit (1) unaligned,
       22 		2 pad_align4	 bit (0) aligned,
       23 		2 signal_two	 (0:31) bit (1) unaligned,
       24 		2 pad_align5	 bit (0) aligned,
       25 		2 onc_two		 (0:31) bit (1) unaligned;
       26 
       27 	declare create_data_segment_	 entry (ptr, fixed bin (35));
       28 	declare com_err_		 entry () options (variable);
       29 	declare code		 fixed bin (35);
       30 	declare PADSTAR		 (1) char (32) init ("pad*") int static options (constant);
       31 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... fault_vector.incl.pl1 ... last modified February 1981 */
  1     3 
  1     4 dcl  fvp ptr;					/* pointer to the fault and interrupt vectors */
  1     5 
  1     6 dcl 1 fv based (fvp) aligned,				/* fault and interrupt vectors */
  1     7     2 ipair (0: 31),				/* interrupt pairs */
  1     8       3 scu bit (36),				/* SCU instruction */
  1     9       3 tra bit (36),				/* TRA instruction */
  1    10     2 fpair (0: 31),				/* fault pairs */
  1    11       3 scu bit (36),				/* SCU instruction */
  1    12       3 tra bit (36),				/* TRA instruction */
  1    13     2 i_tra_ptr (0: 31) ptr,				/* ITS pair for interrupt TRA instruction */
  1    14     2 i_scu_ptr (0: 31) ptr,				/* ITS pair for interrupt SCU instruction */
  1    15     2 f_tra_ptr (0: 31) ptr,				/* ITS pairs for fault TRA instruction */
  1    16     2 f_scu_ptr (0: 31) ptr;				/* ITS pairs for fault SCU instruction */
  1    17 
  1    18 /* Fault Types by fault number								*/
  1    19 	
  1    20    dcl (FAULT_NO_SDF  init (0),			/* Shutdown 				*/
  1    21         FAULT_NO_STR  init (1),			/* Store 				*/
  1    22         FAULT_NO_MME  init (2),			/* Master Mode Entry 1			*/
  1    23         FAULT_NO_F1   init (3),			/* Fault Tag 1				*/
  1    24         FAULT_NO_TRO  init (4),			/* Timer Runout				*/
  1    25         FAULT_NO_CMD  init (5),			/* Command				*/
  1    26         FAULT_NO_DRL  init (6),			/* Derail					*/
  1    27         FAULT_NO_LUF  init (7),			/* Lockup					*/
  1    28         FAULT_NO_CON  init (8),			/* Connect				*/
  1    29         FAULT_NO_PAR  init (9),			/* Parity					*/
  1    30         FAULT_NO_IPR  init (10),			/* Illegal Procedure			*/
  1    31         FAULT_NO_ONC  init (11),			/* Operation Not Complete			*/
  1    32         FAULT_NO_SUF  init (12),			/* Startup				*/
  1    33         FAULT_NO_OFL  init (13),			/* Overflow				*/
  1    34         FAULT_NO_DIV  init (14),			/* Divide Check				*/
  1    35         FAULT_NO_EXF  init (15),			/* Execute				*/
  1    36         FAULT_NO_DF0  init (16),			/* Directed Fault 0 (Segment Fault)		*/
  1    37         FAULT_NO_DF1  init (17),			/* Directed Fault 1 (Page Fault)		*/
  1    38         FAULT_NO_DF2  init (18),			/* Directed Fault 2				*/
  1    39         FAULT_NO_DF3  init (19),			/* Directed Fault 3				*/
  1    40         FAULT_NO_ACV  init (20),			/* Access Violation				*/
  1    41         FAULT_NO_MME2 init (21),			/* Master Mode Entry 2			*/
  1    42         FAULT_NO_MME3 init (22),			/* Master Mode Entry 3			*/
  1    43         FAULT_NO_MME4 init (23),			/* Master Mode Entry 4			*/
  1    44         FAULT_NO_F2   init (24),			/* Fault Tag 2 (Linkage Fault)		*/
  1    45         FAULT_NO_F3   init (25),			/* Fault Tag 3				*/
  1    46 						/* Fault Numbers 26-30 unassigned 		*/
  1    47         FAULT_NO_TRB  init (31)			/* Trouble				*/
  1    48 	
  1    49                                 ) fixed bin (17) int static options (constant);
  1    50 	
  1    51 
  1    52 
  1    53 /* END INCLUDE FILE ... fault_vector.incl.pl1 */
  1    54 
       32 
  2     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  2     2 
  2     3 dcl 1 cds_args based aligned,
  2     4     2 sections (2),
  2     5       3 p ptr,					/* pointer to data for text/static section */
  2     6       3 len fixed bin (18),				/* size of text/static section */
  2     7       3 struct_name char (32),			/* name of declared structure for this section */
  2     8     2 seg_name char (32),				/* name to create segment by */
  2     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  2    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  2    11     2 switches,					/* control switches */
  2    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  2    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  2    14       3 have_text bit (1) unal,			/* ON if text section given */
  2    15       3 have_static bit (1) unal,			/* ON if static section given */
  2    16       3 pad bit (32) unal;
  2    17 
  2    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  2    19 
  2    20 /* END INCLUDE FILE cds_args.incl.pl1 */
       33 
       34 	declare 1 CDSA		 aligned like cds_args;
       35 	declare (null, size, string, unspec)
       36 				 builtin;
       37 
       38 
       39 	unspec (if_data) = ""b;
       40 
       41 	if_data.primary_one (FAULT_NO_CMD) = "1"b;
       42 	if_data.primary_one (FAULT_NO_TRB) = "1"b;
       43 
       44 	if_data.primary_two = if_data.primary_one;
       45 
       46 	if_data.primary_two (FAULT_NO_DF0) = "1"b;
       47 	if_data.primary_two (FAULT_NO_F2) = "1"b;
       48 
       49 	if_data.signal_one (FAULT_NO_ACV) = "1"b;
       50 	if_data.signal_one (FAULT_NO_STR) = "1"b;
       51 	if_data.signal_one (FAULT_NO_MME) = "1"b;
       52 	if_data.signal_one (FAULT_NO_F1) = "1"b;
       53 	if_data.signal_one (FAULT_NO_DRL) = "1"b;
       54 	if_data.signal_one (FAULT_NO_LUF) = "1"b;
       55 	if_data.signal_one (FAULT_NO_IPR) = "1"b;
       56 	if_data.signal_one (FAULT_NO_OFL) = "1"b;
       57 	if_data.signal_one (FAULT_NO_DIV) = "1"b;
       58 	if_data.signal_one (FAULT_NO_DF0) = "1"b;
       59 	if_data.signal_one (FAULT_NO_DF1) = "1"b;
       60 	if_data.signal_one (FAULT_NO_DF2) = "1"b;
       61 	if_data.signal_one (FAULT_NO_DF3) = "1"b;
       62 	if_data.signal_one (FAULT_NO_MME2) = "1"b;
       63 	if_data.signal_one (FAULT_NO_MME3) = "1"b;
       64 	if_data.signal_one (FAULT_NO_MME4) = "1"b;
       65 	if_data.signal_one (FAULT_NO_F2) = "1"b;
       66 	if_data.signal_one (FAULT_NO_F3) = "1"b;
       67 
       68 	if_data.signal_two = if_data.signal_one;
       69 
       70 	if_data.signal_two (FAULT_NO_DF0) = "0"b;
       71 	if_data.signal_two (FAULT_NO_DF1) = "0"b;
       72 	if_data.signal_two (FAULT_NO_DF2) = "0"b;
       73 	if_data.signal_two (FAULT_NO_ACV) = "0"b;
       74 	if_data.signal_two (FAULT_NO_F2) = "0"b;
       75 
       76 	if_data.onc_one (FAULT_NO_SDF) = "1"b;
       77 	if_data.onc_one (FAULT_NO_SUF) = "1"b;
       78 	if_data.onc_one (FAULT_NO_ONC) = "1"b;
       79 
       80 
       81 	unspec (CDSA) = ""b;
       82 	CDSA.sections (1).p = addr (if_data);
       83 	CDSA.sections (1).len = size (if_data);
       84 	CDSA.sections (2).p = null;
       85 	CDSA.sections (2).len = 0;
       86 	CDSA.sections (1).struct_name = "if_data";
       87 	CDSA.num_exclude_names = 1;
       88 	CDSA.exclude_array_ptr = addr (PADSTAR);
       89 	CDSA.have_text = "1"b;
       90 	CDSA.seg_name = "initialize_faults_data";
       91 
       92 	call create_data_segment_ (addr (CDSA), code);
       93 	if code ^= 0
       94 	then call com_err_ (code, "initialize_faults_data");
       95 	return;
       96 
       97      end initialize_faults_data;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0801.1  !BBBJZjXmgZDgJF.pl1               >spec>install>1110>initialize_faults_data.cds
32           1    06/22/81  1815.3  fault_vector.incl.pl1             >ldd>include>fault_vector.incl.pl1
33           2    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CDSA                            000112 automatic       structure                level 1 dcl 34 set ref 81* 92 92
FAULT_NO_ACV                    000006 constant        fixed bin(17,0)          initial dcl 1-20 ref 49 73
FAULT_NO_CMD                    000020 constant        fixed bin(17,0)          initial dcl 1-20 ref 41
FAULT_NO_DF0                    000012 constant        fixed bin(17,0)          initial dcl 1-20 ref 46 58 70
FAULT_NO_DF1                    000011 constant        fixed bin(17,0)          initial dcl 1-20 ref 59 71
FAULT_NO_DF2                    000010 constant        fixed bin(17,0)          initial dcl 1-20 ref 60 72
FAULT_NO_DF3                    000007 constant        fixed bin(17,0)          initial dcl 1-20 ref 61
FAULT_NO_DIV                    000013 constant        fixed bin(17,0)          initial dcl 1-20 ref 57
FAULT_NO_DRL                    000346 constant        fixed bin(17,0)          initial dcl 1-20 ref 53
FAULT_NO_F1                     000021 constant        fixed bin(17,0)          initial dcl 1-20 ref 52
FAULT_NO_F2                     000002 constant        fixed bin(17,0)          initial dcl 1-20 ref 47 65 74
FAULT_NO_F3                     000001 constant        fixed bin(17,0)          initial dcl 1-20 ref 66
FAULT_NO_IPR                    000016 constant        fixed bin(17,0)          initial dcl 1-20 ref 55
FAULT_NO_LUF                    000017 constant        fixed bin(17,0)          initial dcl 1-20 ref 54
FAULT_NO_MME                    000347 constant        fixed bin(17,0)          initial dcl 1-20 ref 51
FAULT_NO_MME2                   000005 constant        fixed bin(17,0)          initial dcl 1-20 ref 62
FAULT_NO_MME3                   000004 constant        fixed bin(17,0)          initial dcl 1-20 ref 63
FAULT_NO_MME4                   000003 constant        fixed bin(17,0)          initial dcl 1-20 ref 64
FAULT_NO_OFL                    000014 constant        fixed bin(17,0)          initial dcl 1-20 ref 56
FAULT_NO_ONC                    000015 constant        fixed bin(17,0)          initial dcl 1-20 ref 78
FAULT_NO_SDF                    000351 constant        fixed bin(17,0)          initial dcl 1-20 ref 76
FAULT_NO_STR                    000350 constant        fixed bin(17,0)          initial dcl 1-20 ref 50
FAULT_NO_SUF                    000345 constant        fixed bin(17,0)          initial dcl 1-20 ref 77
FAULT_NO_TRB                    000000 constant        fixed bin(17,0)          initial dcl 1-20 ref 42
PADSTAR                         000022 constant        char(32)                 initial array packed unaligned dcl 30 set ref 88
cds_args                               based           structure                level 1 dcl 2-3
code                            000106 automatic       fixed bin(35,0)          dcl 29 set ref 92* 93 93*
com_err_                        000014 constant        entry                    external dcl 28 ref 93
create_data_segment_            000012 constant        entry                    external dcl 27 ref 92
exclude_array_ptr        42     000112 automatic       pointer                  level 2 dcl 34 set ref 88*
have_text                44(02) 000112 automatic       bit(1)                   level 3 packed packed unaligned dcl 34 set ref 89*
if_data                         000100 automatic       structure                level 1 dcl 14 set ref 39* 82 83
len                       2     000112 automatic       fixed bin(18,0)          array level 3 dcl 34 set ref 83* 85*
null                                                   builtin function         dcl 35 ref 84
num_exclude_names        40     000112 automatic       fixed bin(17,0)          level 2 dcl 34 set ref 87*
onc_one                   2     000100 automatic       bit(1)                   array level 2 packed packed unaligned dcl 14 set ref
                                                                                  76* 77* 78*
p                               000112 automatic       pointer                  array level 3 dcl 34 set ref 82* 84*
primary_one                     000100 automatic       bit(1)                   array level 2 packed packed unaligned dcl 14 set ref
                                                                                  41* 42* 44
primary_two               3     000100 automatic       bit(1)                   array level 2 packed packed unaligned dcl 14 set ref
                                                                                  44* 46* 47*
sections                        000112 automatic       structure                array level 2 dcl 34
seg_name                 30     000112 automatic       char(32)                 level 2 dcl 34 set ref 90*
signal_one                1     000100 automatic       bit(1)                   array level 2 packed packed unaligned dcl 14 set ref
                                                                                  49* 50* 51* 52* 53* 54* 55* 56* 57* 58* 59* 60*
                                                                                  61* 62* 63* 64* 65* 66* 68
signal_two                4     000100 automatic       bit(1)                   array level 2 packed packed unaligned dcl 14 set ref
                                                                                  68* 70* 71* 72* 73* 74*
size                                                   builtin function         dcl 35 ref 83
struct_name               3     000112 automatic       char(32)                 array level 3 dcl 34 set ref 86*
switches                 44     000112 automatic       structure                level 2 dcl 34
unspec                                                 builtin function         dcl 35 set ref 39* 81*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
FAULT_NO_CON                           constant        fixed bin(17,0)          initial dcl 1-20
FAULT_NO_EXF                           constant        fixed bin(17,0)          initial dcl 1-20
FAULT_NO_PAR                           constant        fixed bin(17,0)          initial dcl 1-20
FAULT_NO_TRO                           constant        fixed bin(17,0)          initial dcl 1-20
exclude_names                          based           char(32)                 array packed unaligned dcl 2-18
fv                                     based           structure                level 1 dcl 1-6
fvp                             000110 automatic       pointer                  dcl 1-4
string                                                 builtin function         dcl 35

NAME DECLARED BY EXPLICIT CONTEXT.
initialize_faults_data          000047 constant        entry                    external dcl 11

NAME DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 82 88 92 92

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       430         446     352         440
Length      2304     352        16        1622      55           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
initialize_faults_data              130 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
initialize_faults_data   000100 if_data                     initialize_faults_data
                         000106 code                        initialize_faults_data
                         000110 fvp                         initialize_faults_data
                         000112 CDSA                        initialize_faults_data

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000046        39 000054        41 000057        42 000063        44 000067        46 000073        47 000077
     49 000103        50 000107        51 000113        52 000117        53 000123        54 000127        55 000133
     56 000137        57 000143        58 000147        59 000153        60 000157        61 000163        62 000167
     63 000173        64 000177        65 000203        66 000207        68 000213        70 000217        71 000223
     72 000227        73 000233        74 000237        76 000243        77 000247        78 000253        81 000257
     82 000262        83 000264        84 000266        85 000270        86 000271        87 000274        88 000276
     89 000300        90 000302        92 000305        93 000317        95 000344


Object Segment >spec>install>1110>initialize_faults_data
Created on 11/11/89  1100.3 mst Sat
by Hirneisen.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0       6      74     104     104
Length     273       6      66      10     153       0


8 Definitions:


segname:    initialize_faults_data

text|2          onc_one
text|5          onc_two
text|0          primary_one
text|3          primary_two
text|1          signal_one
text|4          signal_two
symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
