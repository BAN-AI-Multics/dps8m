ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.3-1114>fast_connect_init.alm                                                                                                                  
ASSEMBLED ON:	11/11/89  0954.3 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    13  "                                                                    "
                                    14  "	fast_connect_init                                          "
                                    15  "                                                                    "
                                    16  "	This routine is called during initialization of the prds   "
                                    17  "	to initialize the connect fault handling code.             "
                                    18  "                                                                    "
                                    19  "	The code is copied to the prds, and is called directly on  "
                                    20  "	a connect fault via the connect fault vector.  Its         "
                                    21  "	purpose is to optimize the most frequent type of connect   "
                                    22  "  	fault (to clear cam/cache) by doing so with minimal        "
                                    23  "	context saving/restoring.  It also checks for other types  "
                                    24  "	of connects, and transfers to wired_fim if necessary to    "
                                    25  "	handle these. Otherwise, it returns to the interrupted     "
                                    26  "	process.                                                   "
                                    27  "                                                                    "
                                    28  "	This routine does the following:                           "
                                    29  "                                                                    "
                                    30  "		1. copies the fast connect code (contained       "
                                    31  "		   herein) to the prds                           "
                                    32  "		2. fills in its pointers needed by this code     "
                                    33  "		3. adjusts its pointers for per-processor arrays "
                                    34  "		   to point to the correct array elements        "
                                    35  "                                                                    "
                                    36  "	Calling sequence:                                          "
                                    37  "                                                                    "
                                    38  "	call  fast_connect_init (prds_ptr, processor_tag, code)    "
                                    39  "                                                                    "
                                    40  "		prds_ptr = pointer to prds being initialized     "
                                    41  "		processor_tag = cpu tag for cpu being initialized"
                                    42  "		code = status code (0=>OK, ^0=>incorrect code    "
                                    43  "		          size)			         "
                                    44  "                                                                    "
                                    45  "                                                                    "
                                    46  "	Written February 1981 by J. Bongiovanni                    "
                                    47  "	Modified 84-01-10 by SGH (UNCA) to fix cam_wait race.      "
                                    48  "                                                                    "
                                    49  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    50  
    000000                          51  	name	fast_connect_init
                        000210      52  	entry	fast_connect_init
                                    53  
                                    54  "
                                    55  	include	apte
                                   1-1  "	BEGIN INCLUDE FILE apte.incl.alm
                                   1-2  "
                                   1-3  "
                                   1-4  " HISTORY COMMENTS:
                                   1-5  "  1) change(86-08-09,Kissel), approve(86-08-12,MCR7479),
                                   1-6  "     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
                                   1-7  "     Added the ipc_r_offset, ipc_r_factor, and apad fields from the pl1
                                   1-8  "     include file to support async event channel wakeups.
                                   1-9  "                                                      END HISTORY COMMENTS
                                  1-10  
                        000000    1-11  	equ	apte.thread,0
                        000000    1-12  	equ	apte.fp,0			"UPPER
                        000000    1-13  	equ	apte.bp,0			"LOWER
                                  1-14  
                        000001    1-15  	equ	apte.flags,1
                        000001    1-16  	equ	apte.sentinel,1
                        400000    1-17  	bool	apte.mbz,400000		"DU
                        200000    1-18  	bool	apte.wakeup_waiting,200000	"DU
                        100000    1-19  	bool	apte.stop_pending,100000	"DU
                        040000    1-20  	bool	apte.pre_empted,040000	"DU
                        020000    1-21  	bool	apte.hproc,020000		"DU
                        010000    1-22  	bool	apte.loaded,010000		"DU
                        004000    1-23  	bool	apte.eligible,004000	"DU
                        002000    1-24  	bool	apte.idle,002000		"DU
                        001000    1-25  	bool	apte.interaction,001000	"DU
                        000400    1-26  	bool	apte.pre_empt_pending,000400	"DU
                        000200    1-27  	bool	apte.default_procs_required,000200 "DU
                        000100    1-28  	bool	apte.realtime_burst,000100	"DU
                        000040    1-29  	bool	apte.always_loaded,000040	"DU
                        000020    1-30  	bool	apte.dbr_loaded,000020	"DU
                        000010    1-31  	bool	apte.being_loaded,000010	"DU
                        000004    1-32  	bool	apte.shared_stack_0,000004	"DU
                        000002    1-33  	bool	apte.page_wait_flag,000002	"DU
                        000001    1-34  	bool	apte.firstsw,000001		"DU
                        000001    1-35  	equ	apte.state,1		"LOWER
                                  1-36  
                        000002    1-37  	equ	apte.page_faults,2
                                  1-38  
                        000003    1-39  	equ	apte.processid,3
                                  1-40  
                        000004    1-41  	equ	apte.te,4
                                  1-42  
                        000005    1-43  	equ	apte.ts,5
                                  1-44  
                        000006    1-45  	equ	apte.ti,6
                                  1-46  
                        000007    1-47  	equ	apte.timax,7
                                  1-48  
                        000010    1-49  	equ	apte.ipc_pointers,8
                        000010    1-50  	equ	apte.event_thread,8		"UPPER
                                  1-51  
                        000011    1-52  	equ	apte.ips_message,9
                                  1-53  
                        000012    1-54  	equ	apte.asteps,10
                        000012    1-55  	equ	apte.pds,10		"UPPER
                        000012    1-56  	equ	apte.dseg,10		"LOWER
                                  1-57  
                        000013    1-58  	equ	apte.prds,11		"UPPER
                        000013    1-59  	equ	apte.savex7,11		"LOWER
                                  1-60  
                        000014    1-61  	equ	apte.term_processid,12
                                  1-62  
                        000015    1-63  	equ	apte.lock_id,13
                        000016    1-64  	equ	apte.time_used_clock,14
                                  1-65  
                        000020    1-66  	equ	apte.wait_event,16
                                  1-67  
                        000021    1-68  	equ	apte.wct_index,17		"UPPER
                        000021    1-69  	equ	apte.flags2,17		"LOWER
                        400000    1-70  	bool	apte.prior_sched,400000	"DL
                        000023    1-71  	equ	apte.chans_offset,19
                        374000    1-72  	bool	apte.special_chans,374000	"DL
                        000021    1-73  	equ	apte.batch_word,17
                        000010    1-74  	bool	apte.batch,000010		"DL
                        000007    1-75  	bool	apte.pr_tag_mask,000007
                                  1-76  
                        000022    1-77  	equ	apte.state_change_time,18
                                  1-78  
                        000024    1-79  	equ	apte.alarm_event,20
                                  1-80  
                        000026    1-81  	equ	apte.alarm_time_thread,22	"UPPER
                        000026    1-82  	equ	apte.alarm_time,22
                                  1-83  
                        000030    1-84  	equ	apte.term_channel,24
                                  1-85  
                        000032    1-86  	equ	apte.ws_size,26
                                  1-87  
                        000033    1-88  	equ	apte.temax,27
                                  1-89  
                        000034    1-90  	equ	apte.deadline,28
                                  1-91  
                        000036    1-92  	equ	apte.lock,30
                                  1-93  
                        000037    1-94  	equ	apte.cpu_monitor,31		units = 1/1024 sec
                                  1-95  
                        000040    1-96  	equ	apte.paging_measure,32
                                  1-97  
                        000042    1-98  	equ	apte.access_authorization,34 	"DOUBLE WORD
                        400000    1-99  	bool	apte.no_ipc_check,400000	"DL
                                 1-100  
                        000044   1-101  	equ	apte.dbr,36
                                 1-102  
                        000046   1-103  	equ	apte.virtual_cpu_time,38
                                 1-104  
                        000050   1-105  	equ	apte.ittes_sent,40
                        000051   1-106  	equ	apte.ittes_got,41
                                 1-107  
                        000052   1-108  	equ	apte.current_response_state,42	" DU
                        000053   1-109  	equ	apte.number_processing,43
                        000054   1-110  	equ	apte.last_response_state_time,44
                        000056   1-111  	equ	apte.total_processing_time,46
                        000060   1-112  	equ	apte.begin_interaction_vcpu,48
                                 1-113  
                        000062   1-114  	equ	apte.saved_temax,50
                        000063   1-115  	equ	apte.procs_required,51
                        776000   1-116  	bool	apte.procs_required_mask,776000	" DU
                                 1-117  
                        000064   1-118  	equ	apte.ipc_r_offset,52
                        000065   1-119  	equ	apte.ipc_r_factor,53
                        000066   1-120  	equ	apte.apad,54
                                 1-121  
                        000100   1-122  	equ	size_of_apt_entry,64
                                 1-123  
                                 1-124  "	MISC OLD DCLS.
                                 1-125  
                        000013   1-126  	equ	apte.le_shift,11
                        000175   1-127  	bool	apte.timer_factor,175
                                 1-128  
                                 1-129  
                                 1-130  "
                                 1-131  "	END INCLUDE FILE apte.incl.alm
                                 1-132  "
                                    56  	include	scs
                                   2-1  "	BEGIN INCLUDE FILE scs.incl.alm  2/4/76 S. Webber
                                   2-2  "	Modified 80 Sep 19 by Art Beattie:  added hbound_processor_data.
                                   2-3  
                        400000     2-4  	bool	processor_data.online,400000 "DU
                        200000     2-5  	bool	processor_data.offline,200000	"DU
                        020000     2-6  	bool	processor_data.delete_cpu,020000	"DU
                        010000     2-7  	bool	processor_data.interrupt_cpu,010000	"DU
                        004000     2-8  	bool	processor_data.halted_cpu,004000	"DU
                        000007     2-9  	bool	processor_data.port_mask,000007	"DL
                        000007    2-10  	bool	hbound_processor_data,7
                                  2-11  
                                  2-12  "	END INCLUDE FILE scs.incl.alm
                                    57  	include	fault_vector
                                   3-1  
                                   3-2  
                                   3-3       "BEGIN INCLUDE FILE fault_vector.incl.alm
                                   3-4  
                                   3-5  "	Modified February 1981 by J. Bongiovanni to add fault types
                                   3-6  
                                   3-7  "
                                   3-8  "	Structure fv
                                   3-9  "
                        000600    3-10  	equ	fv_size,384
                                  3-11  
                                  3-12  
                        000000    3-13  	equ	fv.ipair,0		"LEVEL 2
                                  3-14  
                        000000    3-15  	equ	fv.ipair.scu,0
                        000001    3-16  	equ	fv.ipair.tra,1
                        000100    3-17  	equ	fv.fpair,64		"LEVEL 2
                                  3-18  
                        000100    3-19  	equ	fv.fpair.scu,64
                        000101    3-20  	equ	fv.fpair.tra,65
                        000200    3-21  	equ	fv.i_tra_ptr,128
                        000300    3-22  	equ	fv.i_scu_ptr,192
                        000400    3-23  	equ	fv.f_tra_ptr,256
                        000500    3-24  	equ	fv.f_scu_ptr,320
                                  3-25  
                        000000    3-26  	equ	FAULT_NO_SDF,0		" Shutdown
                        000001    3-27  	equ	FAULT_NO_STR,1		" Store
                        000002    3-28  	equ	FAULT_NO_MME,2		" Master Mode Entry 1
                        000003    3-29  	equ	FAULT_NO_F1,3		" Fault Tag 1
                        000004    3-30  	equ	FAULT_NO_TRO,4		" Timer Runout
                        000005    3-31  	equ	FAULT_NO_CMD,5		" Command
                        000006    3-32  	equ	FAULT_NO_DRL,6		" Derail
                        000007    3-33  	equ	FAULT_NO_LUF,7		" Lockup
                        000010    3-34  	equ	FAULT_NO_CON,8		" Connect
                        000011    3-35  	equ	FAULT_NO_PAR,9		" Parity
                        000012    3-36  	equ	FAULT_NO_IPR,10		" Illegal Procedure
                        000013    3-37  	equ	FAULT_NO_ONC,11		" Operation Not Complete
                        000014    3-38  	equ	FAULT_NO_SUF,12		" Startup
                        000015    3-39  	equ	FAULT_NO_OFL,13		" Overflow
                        000016    3-40  	equ	FAULT_NO_DIV,14		" Divide Check
                        000017    3-41  	equ	FAULT_NO_EXF,15		" Execute
                        000020    3-42  	equ	FAULT_NO_DF0,16		" Directed Fault 0 (Segment Fault)
                        000021    3-43  	equ	FAULT_NO_DF1,17		" Directed FAult 1 (Page Fault)
                        000022    3-44  	equ	FAULT_NO_DF2,18		" Directed Fault 2
                        000023    3-45  	equ	FAULT_NO_DF3,19		" Directed Fault 3
                        000024    3-46  	equ	FAULT_NO_ACV,20		" Access Violation
                        000025    3-47  	equ	FAULT_NO_MME2,21		" Master Mode Entry 2
                        000026    3-48  	equ	FAULT_NO_MME3,22		" Master Mode Entry 3
                        000027    3-49  	equ	FAULT_NO_MME4,23		" Master Mode Entry 4
                        000030    3-50  	equ	FAULT_NO_F2,24		" Fault Tag 2 (Linkage Fault)
                        000031    3-51  	equ	FAULT_NO_F3,25		" Fault Tag 3
                                  3-52  					" Fault No. 26-30 are Undefined
                        000037    3-53  	equ	FAULT_NO_TRB,31		" Trouble
                                  3-54  
                                  3-55       "END INCLUDE FILE fault_vector.incl.alm
                                    58  	include	mc
                                   4-1  "
                                   4-2  "	BEGIN INCLUDE FILE  mc.incl.alm  6/72 SHW
                                   4-3  "	Modified 8/80 by J. A. Bush for dps8/70M CPU
                                   4-4  "
                                   4-5  
                                   4-6  "	General layout of data items.
                                   4-7  
                        000000     4-8  	equ	mc.prs,0		pointer registers
                        000020     4-9  	equ	mc.regs,16	registers
                        000030    4-10  	equ	mc.scu,24		SCU data
                        000050    4-11  	equ	mc.eis_info,40	pointers and lengths for EIS
                                  4-12  
                                  4-13  "	Temporary storage for software
                                  4-14  
                        000040    4-15  	equ	mc.mask,32	system controller mask at time of fault
                        000042    4-16  	equ	mc.ips_temp,34	temporary storage for IPS info
                        000043    4-17  	equ	mc.errcode,35	error code
                        000044    4-18  	equ	mc.fim_temp,36	temporary to hold fault index and unique index
                        000045    4-19  	equ	mc.fault_reg,37	fault register
                        000046    4-20  	equ	mc.fault_time,38	time of fault
                        000046    4-21  	equ	mc.cpu_type_word,38	CPU type from  rsw (2). overlays part of time word
                        300000    4-22  	bool	mc.cpu_type_mask,300000 DU
                        000046    4-23  	equ	mc.ext_fault_reg,38	ext fault reg for dps8. overlays part of time word
                        077774    4-24  	bool	mc.ext_fault_reg_mask,77774 DU
                        000003    4-25  	equ	mc.cpu_type_shift,3 positions to shift right or left
                                  4-26  
                                  4-27  
                                  4-28  
                                  4-29  "	SCU  DATA
                                  4-30  
                                  4-31  "	WORD  (0)		PROCEDURE POINTER REGISTER
                                  4-32  
                        000030    4-33  	equ	mc.scu.ppr.prr_word,24	Procedure Ring Register
                        000000    4-34  	equ	scu.ppr.prr_word,0
                        700000    4-35  	bool	scu.ppr.prr_mask,700000	DU
                        000041    4-36  	equ	scu.ppr.prr_shift,33
                                  4-37  
                        000030    4-38  	equ	mc.scu.ppr.psr_word,24	Procedure Segment Register
                        000000    4-39  	equ	scu.ppr.psr_word,0
                        077777    4-40  	bool	scu.ppr.psr_mask,077777	DU
                        000022    4-41  	equ	scu.ppr.psr_shift,18
                                  4-42  
                        000030    4-43  	equ	mc.scu.ppr.p_word,24	Procedure Privileged Bit
                        000000    4-44  	equ	scu.ppr.p_word,0
                        400000    4-45  	bool	scu.ppr.p,400000		DL
                                  4-46  
                                  4-47  "	  APPENDING UNIT STATUS
                        000030    4-48  	equ	mc.scu.apu_stat_word,24	APPENDING UNIT STATUS
                        000000    4-49  	equ	scu.apu_stat_word,0		
                                  4-50  
                        200000    4-51  	bool	scu.apu.xsf,200000		DL - Ext Seg Flag - IT mod.
                        100000    4-52  	bool	scu.apu.sdwm,100000		DL - Match in SDW Ass. Mem.
                        040000    4-53  	bool	scu.apu.sd_on,040000	DL - SDW Ass. Mem.  ON
                        020000    4-54  	bool	scu.apu.ptwm,020000		DL - Match in PTW Ass. Mem.
                        010000    4-55  	bool	scu.apu.pt_on,010000	DL - PTW Ass. Mem.  ON
                        004000    4-56  	bool	scu.apu.pi_ap,004000	DL - Instr fetch or Append cycle
                        002000    4-57  	bool	scu.apu.dsptw,002000	DL - Fetch of DSPTW
                        001000    4-58  	bool	scu.apu.sdwnp,001000	DL - Fetch of SDW non-paged
                        000400    4-59  	bool	scu.apu.sdwp,000400		DL - Fetch of SDW paged
                        000200    4-60  	bool	scu.apu.ptw,000200		DL - Fetch of PTW
                        000100    4-61  	bool	scu.apu.ptw2,000100		DL - Fetch of pre-paged  PTW
                        000040    4-62  	bool	scu.apu.fap,000040		DL - Fetch of final address paged
                        000020    4-63  	bool	scu.apu.fanp,000020		DL - Fetch final address non-paged
                        000010    4-64  	bool	scu.apu.fabs,000010		DL - Fetch of final address absolute
                                  4-65  
                        000030    4-66  	equ	mc.scu.fault_cntr_word,24	Num of retrys of EIS instructions.
                        000000    4-67  	equ	scu.fault_cntr_word,0	
                                  4-68  
                        000007    4-69  	bool	scu.fault_cntr_mask,000007
                                  4-70  
                                  4-71  
                                  4-72  "	WORD  (1)		FAULT DATA
                                  4-73  
                        000031    4-74  	equ	mc.scu.fault_data_word,25	FAULT  DATA
                        000001    4-75  	equ	scu.fault_data_word,1
                                  4-76  
                        400000    4-77  	bool	scu.fd.iro,400000		DU - Illegal Ring Order
                        200000    4-78  	bool	scu.fd.oeb,200000		DU - Not In Execute Bracket
                        100000    4-79  	bool	scu.fd.e_off,100000		DU - No  Execute
                        040000    4-80  	bool	scu.fd.orb,040000		DU - Not In Read Bracket
                        020000    4-81  	bool	scu.fd.r_off,020000		DU - No  Read
                        010000    4-82  	bool	scu.fd.owb,010000		DU - Not In Write Bracket
                        004000    4-83  	bool	scu.fd.w_off,004000		DU - No  Write
                        002000    4-84  	bool	scu.fd.no_ga,002000		DU - Not A Gate
                        001000    4-85  	bool	scu.fd.ocb,001000		DU - Not in  Call Bracket
                        000400    4-86  	bool	scu.fd.ocall,000400		DU - Outward Call
                        000200    4-87  	bool	scu.fd.boc,000200		DU - Bad Outward Call
                        000100    4-88  	bool	scu.fd.inret,000100		DU - Inward Return
                        000040    4-89  	bool	scu.fd.crt,000040		DU - Cross  Ring Transfer
                        000020    4-90  	bool	scu.fd.ralr,000020		DU - Ring   Alarm
                        000010    4-91  	bool	scu.fd.am_er,000010		DU - Assoc. Mem. Fault
                        000004    4-92  	bool	scu.fd.oosb,000004		DU - Out Of Bounds
                        000002    4-93  	bool	scu.fd.paru,000002		DU - Parity Upper
                        000001    4-94  	bool	scu.fd.parl,000001		DU - Parity Lower
                                  4-95  
                        400000    4-96  	bool	scu.fd.onc_1,400000		DL - Op Not Complete
                        200000    4-97  	bool	scu.fd.onc_2,200000		DL - Op Not Complete
                                  4-98  
                                  4-99  "  	  GROUP II  FAULT DATA
                        400000   4-100  	bool	scu.fd.isn,400000		DU - Illegal Segment Number
                        200000   4-101  	bool	scu.fd.ioc,200000		DU - Illegal Op Code
                        100000   4-102  	bool	scu.fd.ia_im,100000		DU - Illegal Addr - Modifier
                        040000   4-103  	bool	scu.fd.isp,040000		DU - Illegal Slave Procedure
                        020000   4-104  	bool	scu.fd.ipr,020000		DU - Illegal Procedure
                        010000   4-105  	bool	scu.fd.nea,010000		DU - Non Existent Address
                        004000   4-106  	bool	scu.fd.oobb,004000		DU - Out Of  Bounds
                                 4-107  
                        000031   4-108  	equ	mc.scu.port_stat_word,25	PORT STATUS
                        000001   4-109  	equ	scu.port_stat_word,1
                                 4-110  
                        170000   4-111  	bool	scu.ial_mask,170000		DL - Illegal Action Lines
                        000014   4-112  	equ	scu.ial_shift,12
                                 4-113  
                        007000   4-114  	bool	scu.iac_mask,007000		DL - Illegal Action Channel
                        000011   4-115  	equ	scu.iac_shift,9
                                 4-116  
                        000700   4-117  	bool	scu.con_chan_mask,000700	DL - Connect Channel
                        000006   4-118  	equ	scu.con_chan_shift,6
                                 4-119  
                        000076   4-120  	bool	scu.fi_num_mask,000076	DL - Fault / Interrupt  Number
                        000001   4-121  	equ	scu.fi_num_shift,1
                                 4-122  
                        000001   4-123  	bool	scu.fi_flag_mask,000001	DL - Fault / Interrupt  Flag
                                 4-124  
                                 4-125  
                                 4-126  "	WORD  (2)		TEMPORARY POINTER REGISTER
                                 4-127  
                        000032   4-128  	equ	mc.scu.tpr.trr_word,26	Temporary Ring Register
                        000002   4-129  	equ	scu.tpr.trr_word,2
                        700000   4-130  	bool	scu.tpr.trr_mask,700000	DU
                        000041   4-131  	equ	scu.tpr.trr_shift,33
                                 4-132  
                        000032   4-133  	equ	mc.scu.tpr.tsr_word,26	Temporary Segment Register
                        000002   4-134  	equ	scu.tpr.tsr_word,2
                        077777   4-135  	bool	scu.tpr.tsr_mask,077777	DU
                        000022   4-136  	equ	scu.tpr.tsr_shift,18
                                 4-137  
                        000032   4-138  	equ	mc.scu.cpu_no_word,26	CPU  Number
                        000002   4-139  	equ	scu.cpu_no_word,2
                                 4-140  
                        000700   4-141  	bool	scu.cpu_no_mask,000700	DL
                        000006   4-142  	equ	scu.cpu_shift,6
                                 4-143  
                        000032   4-144  	equ	mc.scu.delta_word,26	Tally Modification DELTA
                        000002   4-145  	equ	scu.delta_word,2
                                 4-146  
                        000077   4-147  	bool	scu.delta_mask,000077	DL
                                 4-148  
                                 4-149  
                                 4-150  "	WORD  (3)		TSR STATUS
                                 4-151  
                        000033   4-152  	equ	mc.scu.tsr_stat_word,27	TSR STATUS for 1,2, and 3
                        000003   4-153  	equ	scu.tsr_stat_word,3		Word Instructions
                                 4-154  
                        777700   4-155  	bool	scu.tsr_stat_mask,777700	DL - All of Status
                        000006   4-156  	equ	scu.tsr_stat_shift,6
                                 4-157  
                        740000   4-158  	bool	scu.tsna_mask,740000	DL - Word 1 Status
                        700000   4-159  	bool	scu.tsna.prn_mask,700000	DL - Word 1 PR num
                        000017   4-160  	equ	scu.tsna.prn_shift,15
                        040000   4-161  	bool	scu.tsna.prv,040000		DL - Word 1 PR valid bit
                                 4-162  
                        036000   4-163  	bool	scu.tsnb_mask,036000	DL - Word 2 Status
                        034000   4-164  	bool	scu.tsnb.prn_mask,034000	DL - Word 2 PR num
                        000013   4-165  	equ	scu.tsnb.prn_shift,11
                        002000   4-166  	bool	scu.tsnb.prv,002000		DL - Word 2 PR valid bit
                                 4-167  
                        000013   4-168  	bool	scu.tsnc_mask,0013		DL - Word 3 Status
                        001600   4-169  	bool 	scu.tsnc.prn_mask,001600	DL - Word 3 PR num
                        000007   4-170  	equ	scu.tsnc.prn_shift,7
                        000100   4-171  	bool	scu.tsnc.prv,000100		DL - Word 3 PR valid bit
                                 4-172  
                                 4-173  
                        000033   4-174  	equ	mc.scu.tpr.tbr_word,27	TPR.TBR  Field
                        000003   4-175  	equ	scu.tpr.tbr_word,3
                                 4-176  
                        000077   4-177  	bool	scu.tpr.tbr_mask,000077	DL
                                 4-178  
                                 4-179  
                                 4-180  "	WORD  (4)		INSTRUCTION COUNTER
                                 4-181  
                        000034   4-182  	equ	mc.scu.ilc_word,28		INSTRUCTION  COUNTER
                        000004   4-183  	equ	scu.ilc_word,4
                        000022   4-184  	equ	scu.ilc_shift,18
                                 4-185  
                        000034   4-186  	equ	mc.scu.indicators_word,28	INDICATOR  REGISTERS
                        000004   4-187  	equ	scu.indicators_word,4
                                 4-188  
                        400000   4-189  	bool	scu.ir.zero,400000		DL - Zero  Indicator
                        200000   4-190  	bool	scu.ir.neg,200000		DL - Negative Indicator
                        100000   4-191  	bool	scu.ir.carry,100000		DL - Carry Indicator
                        040000   4-192  	bool	scu.ir.ovfl,040000		DL - Overflow Indicator
                        020000   4-193  	bool	scu.ir.eovf,020000		DL - Exponent Overflow  Ind
                        010000   4-194  	bool	scu.ir.eufl,010000		DL - Exponent Underflow Ind
                        004000   4-195  	bool	scu.ir.oflm,004000		DL - Overflow Mask Indicator
                        002000   4-196  	bool	scu.ir.tro,002000		DL - Tally Runout  Indicator
                        001000   4-197  	bool	scu.ir.par,001000		DL - Parity  Indicator
                        000400   4-198  	bool	scu.ir.parm,000400		DL - Parity  Mask  Indicator
                        000200   4-199  	bool	scu.ir.bm,000200			DL - Bar  Mode  Indicator
                        000100   4-200  	bool	scu.ir.tru,000100		DL - Truncation Indicator
                        000040   4-201  	bool	scu.ir.mif,000040		DL - Multiword  Indicator
                        000020   4-202  	bool	scu.ir.abs,000020		DL - Absolute   Indicator
                        000010   4-203  	bool	scu.ir.hex,000010		DL - Hexadecimal Indicator
                                 4-204  
                                 4-205  "	WORD  (5)		COMPUTED ADDRESS
                                 4-206  
                        000035   4-207  	equ	mc.scu.ca_word,29		COMPUTED  ADDRESS
                        000005   4-208  	equ	scu.ca_word,5
                        000022   4-209  	equ	scu.ca_shift,18
                                 4-210  
                        000035   4-211  	equ	mc.scu.cu_stat_word,29	CONTROL UNIT STATUS
                        000005   4-212  	equ	scu.cu_stat_word,5
                                 4-213  
                        400000   4-214  	bool	scu.cu.rf,400000		DL - Repeat First
                                 4-215  "					On First Cycle of Repeat Inst.
                        200000   4-216  	bool	scu.cu.rpt,200000		DL - Repeat Instruction
                        100000   4-217  	bool	scu.cu.rd,100000		DL - Repeat Double Instr.
                        040000   4-218  	bool	scu.cu.rl,040000		DL - Repeat Link   Instr.
                                 4-219  
                        020000   4-220  	bool	scu.cu.pot,020000		DL - IT Modification
                        010000   4-221  	bool	scu.cu.pon,010000		DL - Return Type Instruction
                                 4-222  
                        004000   4-223  	bool	scu.cu.xde,004000		DL - XDE from Even Location
                        002000   4-224  	bool	scu.cu.xdo,002000		DL - XDE from Odd  Location
                                 4-225  
                        001000   4-226  	bool	scu.cu.poa,001000		DL - Operand Preparation
                        000400   4-227  	bool	scu.cu.rfi,000400		DL - Tells CPU to refetch instruction
                                 4-228  "	This Bit  Not Used    (000200)
                        000100   4-229  	bool	scu.cu.if,000100		DL - Fault occurred during instruction fetch
                                 4-230  
                        000035   4-231  	equ	mc.scu.cpu_tag_word,29	Computed Tag Field
                        000005   4-232  	equ	scu.cpu_tag_word,5
                                 4-233  
                        000007   4-234  	bool	scu.cpu_tag_mask,000007	DL
                                 4-235  
                                 4-236  
                                 4-237  "	WORDS  (6,7)	INSTRUCTIONS
                                 4-238  
                        000036   4-239  	equ	scu.even_inst_word,30	Even Instruction
                                 4-240  
                        000037   4-241  	equ	scu.odd_inst_word,31	Odd  Instruction
                                 4-242  
                                 4-243  
                                 4-244  "	END INCLUDE FILE incl.alm
                                    59  
                                    60  "
                                    61  
                                    62  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    63  "                                                                    "
                                    64  "	This is the fast connect code which is copied to the prds  "
                                    65  "                                                                    "
                                    66  "	This code does the following                               "
                                    67  "                                                                    "
                                    68  "	1. As quickly as possible, check for cam/cache-clear       "
                                    69  "	   pending and do it                                       "
                                    70  "                                                                    "
                                    71  "	2. With minimal register usage, check for other types of   "
                                    72  "	   connects (saving all registers it uses).  To speed      "
                                    73  "	   things up, skip checks for this processor (e.g., check  "
                                    74  "	   for sys_trouble_pending on any processor). The real     "
                                    75  "	   connect handler will straighten things out. Also check  "
                                    76  "	   for tracing machine conditions.                         "
                                    77  "                                                                    "
                                    78  "	3. If no other type of connect pending, restore all        "
                                    79  "	   registers it uses (hopefully not many), and return to   "
                                    80  "	   the interrupted process directly                        "
                                    81  "                                                                    "
                                    82  "	4. If any other type of connect pending, restore all       "
                                    83  "	   registers it uses, and transfer to the connect fault    "
                                    84  "	   handler                                                 "
                                    85  "                                                                    "
                                    86  "	If the size of this code changes, this must be reflected   "
                                    87  "	in the prds                                                "
                                    88  "                                                                    "
                                    89  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    90  
                                    91  
    000000                          92  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
                                    93  
                                    94  	even
                                    95  
    000000                          96  fast_connect_code:
    000000  aa   000060 7572 04     97  	staq	save_aq_temp-*,ic		we only use/restore a and q
    000001  aa   000061 2342 24     98  	szn	fast_cam_pending_cpu-*,ic*	cam/cache pending this cpu
    000002  aa   000005 6002 04     99  	tze	next-*,ic			no--check for other connects
    000003  aa   000063 2342 24    100  	szn	cam_wait-*,ic*		cam with wait
    000004  aa   000044 6012 04    101  	tnz	continue_quick-*,ic           yes--go to connect handler
    000005  aa   000057 7172 24    102  	xed	cam_pair-*,ic*		cam/cache clear
    000006  aa   000054 4502 24    103  	stz	fast_cam_pending_cpu-*,ic*	flag that we cleared
    000007                         104  next:	
    000007  aa   000051 7572 04    105  	staq	save_aq_temp-*,ic		we only use/restore a and q
    000010  aa   000062 2342 24    106  	szn	sys_trouble_pending-*,ic*	sys_trouble action going down
    000011  aa   000037 6012 04    107  	tnz	continue-*,ic		yes--go to connect handler
    000012  aa   000062 2342 24    108  	szn	processor_start_wait-*,ic*	waiting for cpu to start
    000013  aa   000035 6012 04    109  	tnz	continue-*,ic		yes--go to connect handler
    000014  aa   000062 2352 24    110  	lda	processor_data_cpu-*,ic*	processor data this cpu
    000015  aa   020000 3152 03    111  	cana	processor_data.delete_cpu,du  should this cpu delete self
    000016  aa   000032 6012 04    112  	tnz	continue-*,ic		yes--go to connect handler
    000017  aa   000001 2352 03    113  	lda	apte.flags,du		au=offset into apte to check
    000020                         114  apte_ptr_au_1:
    000020  aa   000000 2362 61    115  	ldq	0,*au			ldq with my apte.flags
    000021  aa   100400 3162 03    116  	canq	apte.pre_empt_pending+apte.stop_pending,du
    000022  aa   000026 6012 04    117  	tnz	continue-*,ic		pre-empt or stop
    000023  aa   000011 2352 03    118  	lda	apte.ips_message,du		au=offset into apte to check
    000024                         119  apte_ptr_au_2:
    000024  aa   000000 2362 61    120  	ldq	0,*au			ldq with my apte.ips_message
    000025  aa   000023 6012 04    121  	tnz	continue-*,ic		ips message pending
    000026  aa   000060 2342 24    122  	szn	pds_mc_trace_sw-*,ic*	are we tracing machine conditions
    000027  aa   000021 6042 04    123  	tmi	continue-*,ic		yes--go to connect handler
    000030  aa   000004 2352 03    124  	lda	scu.indicators_word,du	check whether EIS instruction
    000031  aa   000051 2352 24    125  	lda	scu_info_au-*,ic*		 was interrupted
    000032  aa   000040 3152 07    126  	cana	scu.ir.mif,dl		   in mid-stream
    000033  aa   000004 6002 04    127  	tze	skip_spl_lpl-*,ic		transfer if not
    000034  aa   000020 2352 03    128  	lda	mc.eis_info-mc.scu,du	we must reset the EIS box
    000035  aa   000045 4476 24    129  	spl	scu_info_au-*,ic*		thusly
    000036  aa   000044 4676 24    130  	lpl	scu_info_au-*,ic*
    000037                         131  skip_spl_lpl: 
    000037  aa   000002 2352 03    132  	lda	scu.cpu_no_word,du		get offset of SCU2 in AU
    000040  aa   000042 2352 24    133  	lda	scu_info_au-*,ic*		load A with SCU2
    000041  aa   000700 3752 07    134  	ana	scu.cpu_no_mask,dl		mask unwanted bits
    000042  aa   000023 7352 00    135  	als	7+12			right justify in AU, multiply by 128
    000043  aa   000025 0542 24    136  	aos	fault_counters_connect-*,ic*	bump count of connect faults	
    000044  aa   000014 2372 04    137  	ldaq	save_aq_temp-*,ic		restore what we used
    000045                         138  cache_luf_reg:
    000045  aa   000000 6742 02    139  	lcpr	0,02			turn on cache (prds$cache_luf_reg)
    000046                         140  mode_reg_enabled:
    000046  aa   000000 6742 04    141  	lcpr	0,04			and history registers (prds$mode_reg_enabled)
    000047  aa   000031 6132 24    142  	rcu	scu_info-*,ic*		and restart
                                   143  
    000050                         144  continue:
    000050                         145  continue_quick: 
    000050  aa   000002 2352 03    146  	lda	scu.cpu_no_word,du		get offset of SCU2 in AU
    000051  aa   000031 2352 24    147  	lda	scu_info_au-*,ic*		load A with SCU2
    000052  aa   000700 3752 07    148  	ana	scu.cpu_no_mask,dl		mask unwanted bits
    000053  aa   000023 7352 00    149  	als	7+12			right justify in AU, multiply by 128
    000054  aa   000014 0542 24    150  	aos	fault_counters_connect-*,ic*	bump count of connect faults	
    000055  aa   000003 2372 04    151  	ldaq	save_aq_temp-*,ic		restore what we used
    000056  aa   000026 7102 24    152  	tra	connect_handler-*,ic*	do full connect fault
                                   153  
                                   154  
    000057                         155  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
                                   156  "
                                   157  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   158  "                                                                    "
                                   159  "	its pointers and data for fast connect code                "
                                   160  "	This also lives on the prds                                "
                                   161  "                                                                    "
                                   162  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   163  
    000057  aa   000000 0110 03    164  	even
    000060                         165  save_aq_temp:
    000060                         166  	bss	,2			temp storage for a and q
    000062                         167  fast_cam_pending_cpu:
    000062  aa   077777 000043     168  	its	-1,1			scs$fast_cam_pending+<cpu tag>
    000063  aa   000001 000000 
    000064                         169  cam_pair:
    000064  aa   077777 000043     170  	its	-1,1			scs$cam_pair
    000065  aa   000001 000000 
    000066                         171  cam_wait:
    000066  aa   077777 000043     172  	its	-1,1			scs$cam_wait
    000067  aa   000001 000000 
    000070                         173  fault_counters_connect:
    000070  aa   077777 000043     174  	its	-1,1			wired_hardcore_data$fault_counters
    000071  aa   000001 000000 
                                   175  					" +FAULT_NO_CON mod by AU
    000072                         176  sys_trouble_pending:
    000072  aa   077777 000043     177  	its	-1,1			scs$sys_trouble_pending
    000073  aa   000001 000000 
    000074                         178  processor_start_wait:
    000074  aa   077777 000043     179  	its	-1,1			scs$processor_start_wait
    000075  aa   000001 000000 
    000076                         180  processor_data_cpu:
    000076  aa   077777 000043     181  	its	-1,1			scs$processor_data+<cpu tag>
    000077  aa   000001 000000 
    000100                         182  scu_info:
    000100  aa   077777 000043     183  	its	-1,1			copy of its pointer for scu in fault_vector
    000101  aa   000001 000000 
    000102                         184  scu_info_au:
    000102  aa   077777 000043     185  	its	-1,1			its pointer for scu in FV mod by au
    000103  aa   000001 000000 
    000104                         186  connect_handler:
    000104  aa   077777 000043     187  	its	-1,1			wired_fim$connect_handler
    000105  aa   000001 000000 
    000106                         188  pds_mc_trace_sw: 
    000106  aa   077777 000043     189  	its	-1,1			pds$mc_trace_sw	
    000107  aa   000001 000000 
                                   190  
                        000110     191  	equ	fast_connect_code_words,*-fast_connect_code
                        000440     192  	equ	fast_connect_code_chars,4*fast_connect_code_words
                                   193  
                                   194  
                                   195  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   196  "                                                                    "
                                   197  "	End of fast connect code copied to prds                    "
                                   198  "                                                                    "
                                   199  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   200  
                                   201  "
                                   202  
                                   203  	
                        000010     204  	link	fast_cam_pending_cpu_link,scs$fast_cam_pending
                        000012     205  	link	cam_pair_link,scs$cam_pair
                        000014     206  	link	cam_wait_link,scs$cam_wait
                        000016     207  	link	fault_counters_connect_link,wired_hardcore_data$cpu_a_flt_ctr_array+FAULT_NO_CON,au
                        000020     208  	link	sys_trouble_pending_link,scs$sys_trouble_pending
                        000022     209  	link	processor_start_wait_link,scs$processor_start_wait
                        000024     210  	link	processor_data_cpu_link,scs$processor_data
                        000026     211  	link	apte_ptr_au_1_link,prds$apt_ptr
                        000026     212  	link	apte_ptr_au_2_link,prds$apt_ptr
                        000030     213  	link	cache_luf_reg_link,prds$cache_luf_reg
                        000032     214  	link	mode_reg_enabled_link,prds$mode_reg_enabled
                        000034     215  	link	fast_connect_code_link,prds$fast_connect_code
                        000036     216  	link	fast_connect_code_end_link,prds$fast_connect_code_end
                        000040     217  	link	scu_info_link,fault_vector$0+fv.f_scu_ptr+2*FAULT_NO_CON,*
                        000042     218  	link	connect_handler_link,wired_fim$connect_handler
                        000044     219  	link	scu_info_au_link,fault_vector$0+fv.f_scu_ptr+2*FAULT_NO_CON,*au
                        000046     220  	link	pds_mc_trace_sw_link,pds$mc_trace_sw
                                   221  
                                   222  
                        000002     223  	equ	pr2,2
                        000004     224  	equ	pr4,4		" so that symbolic itp works
                                   225  
                                   226  "
                                   227  
                                   228  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   229  "                                                                    "
                                   230  "	Table to define its pointers in prds to be filled in       "
                                   231  "                                                                    "
                                   232  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   233  
                                   234  	macro	its_link
                              1    235  	itp	pr4,&1_link
                              2    236  	itp	pr2,&1-fast_connect_code
                              3    237  	&end
                                   238  
                                   239  
                                   240  	even
    000110                         241  its_link_table:
                                   242  	its_link	fast_cam_pending_cpu
    000110  aa   400000 000041          	itp	pr4,fast_cam_pending_cpu_link
    000111  2a   000010 000000 
    000112  aa   200000 000041          	itp	pr2,fast_cam_pending_cpu-fast_connect_code
    000113  aa   000062 000000 
                                   243  	its_link	cam_pair
    000114  aa   400000 000041          	itp	pr4,cam_pair_link
    000115  2a   000012 000000 
    000116  aa   200000 000041          	itp	pr2,cam_pair-fast_connect_code
    000117  aa   000064 000000 
                                   244  	its_link	cam_wait
    000120  aa   400000 000041          	itp	pr4,cam_wait_link
    000121  2a   000014 000000 
    000122  aa   200000 000041          	itp	pr2,cam_wait-fast_connect_code
    000123  aa   000066 000000 
                                   245  	its_link	fault_counters_connect
    000124  aa   400000 000041          	itp	pr4,fault_counters_connect_link
    000125  2a   000016 000000 
    000126  aa   200000 000041          	itp	pr2,fault_counters_connect-fast_connect_code
    000127  aa   000070 000000 
                                   246  	its_link	sys_trouble_pending
    000130  aa   400000 000041          	itp	pr4,sys_trouble_pending_link
    000131  2a   000020 000000 
    000132  aa   200000 000041          	itp	pr2,sys_trouble_pending-fast_connect_code
    000133  aa   000072 000000 
                                   247  	its_link	processor_start_wait
    000134  aa   400000 000041          	itp	pr4,processor_start_wait_link
    000135  2a   000022 000000 
    000136  aa   200000 000041          	itp	pr2,processor_start_wait-fast_connect_code
    000137  aa   000074 000000 
                                   248  	its_link	processor_data_cpu
    000140  aa   400000 000041          	itp	pr4,processor_data_cpu_link
    000141  2a   000024 000000 
    000142  aa   200000 000041          	itp	pr2,processor_data_cpu-fast_connect_code
    000143  aa   000076 000000 
                                   249  	its_link	scu_info
    000144  aa   400000 000041          	itp	pr4,scu_info_link
    000145  2a   000040 000000 
    000146  aa   200000 000041          	itp	pr2,scu_info-fast_connect_code
    000147  aa   000100 000000 
                                   250  	its_link	scu_info_au
    000150  aa   400000 000041          	itp	pr4,scu_info_au_link
    000151  2a   000044 000000 
    000152  aa   200000 000041          	itp	pr2,scu_info_au-fast_connect_code
    000153  aa   000102 000000 
                                   251  	its_link	connect_handler
    000154  aa   400000 000041          	itp	pr4,connect_handler_link
    000155  2a   000042 000000 
    000156  aa   200000 000041          	itp	pr2,connect_handler-fast_connect_code
    000157  aa   000104 000000 
                                   252  	its_link	pds_mc_trace_sw
    000160  aa   400000 000041          	itp	pr4,pds_mc_trace_sw_link
    000161  2a   000046 000000 
    000162  aa   200000 000041          	itp	pr2,pds_mc_trace_sw-fast_connect_code
    000163  aa   000106 000000 
    000164                         253  its_link_table_end:
                                   254  
                        000004     255  	equ	its_link_table_entry,4
                                   256  	
                                   257  
                                   258  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   259  "                                                                    "
                                   260  "	Table of its pointers which refer to per-processor arrays  "
                                   261  "	These pointers are adjusted by cpu tag                     "
                                   262  "                                                                    "
                                   263  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   264  
                                   265  
                                   266  	macro	cpu_reloc
                              1    267  	itp	pr2,&1_cpu-fast_connect_code+1
                              2    268  	&end
                                   269  
                                   270  
    000164                         271  cpu_tag_reloc_table:
                                   272  	cpu_reloc	fast_cam_pending
    000164  aa   200000 000041          	itp	pr2,fast_cam_pending_cpu-fast_connect_code+1
    000165  aa   000063 000000 
                                   273  	cpu_reloc	processor_data
    000166  aa   200000 000041          	itp	pr2,processor_data_cpu-fast_connect_code+1
    000167  aa   000077 000000 
    000170                         274  cpu_tag_reloc_table_end:
                                   275  
                        000002     276  	equ	cpu_tag_reloc_entry,2
                                   277  	
                                   278  "
                                   279  
                                   280  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   281  "                                                                    "
                                   282  "	Table of instructions which refer to prds locations        "
                                   283  "	outside of the fast connect code.  These will be           "
                                   284  "	set appropriately.                                         "
                                   285  "                                                                    "
                                   286  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   287  
                                   288  
                                   289  	macro	prds_rel
                              1    290  	itp	pr4,&1_link
                              2    291  	itp	pr2,&1-fast_connect_code
                              3    292  	&end
                                   293  
                                   294  
    000170                         295  prds_rel_table:
                                   296  	prds_rel	apte_ptr_au_1
    000170  aa   400000 000041          	itp	pr4,apte_ptr_au_1_link
    000171  2a   000026 000000 
    000172  aa   200000 000041          	itp	pr2,apte_ptr_au_1-fast_connect_code
    000173  aa   000020 000000 
                                   297  	prds_rel	apte_ptr_au_2
    000174  aa   400000 000041          	itp	pr4,apte_ptr_au_2_link
    000175  2a   000026 000000 
    000176  aa   200000 000041          	itp	pr2,apte_ptr_au_2-fast_connect_code
    000177  aa   000024 000000 
                                   298  	prds_rel	cache_luf_reg
    000200  aa   400000 000041          	itp	pr4,cache_luf_reg_link
    000201  2a   000030 000000 
    000202  aa   200000 000041          	itp	pr2,cache_luf_reg-fast_connect_code
    000203  aa   000045 000000 
                                   299  	prds_rel	mode_reg_enabled
    000204  aa   400000 000041          	itp	pr4,mode_reg_enabled_link
    000205  2a   000032 000000 
    000206  aa   200000 000041          	itp	pr2,mode_reg_enabled-fast_connect_code
    000207  aa   000046 000000 
    000210                         300  prds_rel_table_end:
                                   301  
                        000004     302  	equ	prds_rel_table_entry,4
                                   303  	
                                   304  
                                   305  
                                   306  "
                                   307  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   308  "                                                                    "
                                   309  "	Make sure the space reserved in the prds is the	         "
                                   310  "	right size				         "
                                   311  "						         "
                                   312  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   313  	
    000210                         314  fast_connect_init:
    000210  aa  0 00006 4501 20    315  	stz	pr0|6,*			clear return code
    000211  4a  4 00034 6351 20    316  	eaa	pr4|fast_connect_code_link,*  au=offset of begin of code in prds
    000212  aa   000000 5310 00    317  	neg
    000213  4a  4 00036 6201 61    318  	eax0	pr4|fast_connect_code_end_link,*au  x0=length of area for code
    000214  aa   000110 1000 03    319  	cmpx0	fast_connect_code_words,du	expected length
    000215  0a   000220 6000 00    320  	tze	copy_fast_connect_code	correct
    000216  aa  0 00006 5541 20    321  	stc1	pr0|6,*			return non-zero error code
    000217  aa  7 00044 7101 20    322  	short_return			(no error_table_ yet)
                                   323  
                                   324  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   325  "                                                                    "
                                   326  "	Move the fast connect code to the prds                     "
                                   327  "                                                                    "
                                   328  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   329  
    000220                         330  copy_fast_connect_code: 	
    000220  aa  0 00002 3515 20    331  	epp1	pr0|2,*			
    000221  aa  1 00000 3515 20    332  	epp1	pr1|0,*			pr1 -> base of new prds
    000222  4a  4 00034 2131 20    333  	epaq	pr4|fast_connect_code_link,*	its pointer to prds$fast_connect_code
    000223  aa  1 00000 3521 02    334  	epp2	pr1|0,qu			pr2->fast connect code in new prds
                                   335  
    000224  aa   000100 1004 00    336  	mlr	(),(pr)
    000225  0a   000000 000440     337  	desc9a	fast_connect_code,fast_connect_code_chars
    000226  aa   200000 000440     338  	desc9a	pr2|0,fast_connect_code_chars
                                   339  
                                   340  
                                   341  
                                   342  "
                                   343  
                                   344  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   345  "                                                                    "
                                   346  "	Fill in its pointers                                       "
                                   347  "                                                                    "
                                   348  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   349  
                                   350  
    000227  aa   000054 2200 03    351  	ldx0	its_link_table_end-its_link_table,du
                                   352  
    000230                         353  next_its:
    000230  aa   777774 6200 10    354  	eax0	-its_link_table_entry,x0	bump to next entry
    000231  0a   000235 6040 00    355  	tmi	its_done			done table
    000232  0a   000110 2370 30    356  	ldaq	its_link_table,x0*		proper its pointer
    000233  0a   000112 7570 30    357  	staq	its_link_table+2,x0*		fill it in
    000234  0a   000230 7100 00    358  	tra	next_its
                                   359  
    000235                         360  its_done:
                                   361  
                                   362  
                                   363  
                                   364  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   365  "                                                                    "
                                   366  "	Adjust its pointers which refer to per-processor arrays    "
                                   367  "                                                                    "
                                   368  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   369  
    000235  aa   000004 2200 03    370  	ldx0	cpu_tag_reloc_table_end-cpu_tag_reloc_table,du
    000236  aa  0 00004 7211 20    371  	lxl1	pr0|4,*			cpu tag for new processor
                                   372  
    000237                         373  next_cpu_tag:
    000237  aa   777776 6200 10    374  	eax0	-cpu_tag_reloc_entry,x0	bump to next table entry
    000240  0a   000243 6040 00    375  	tmi	cpu_tag_done		done table
    000241  0a   000164 0410 30    376  	asx1	cpu_tag_reloc_table,x0*	adjust pointer by cpu tag
    000242  0a   000237 7100 00    377  	tra	next_cpu_tag
                                   378  
    000243                         379  cpu_tag_done:
                                   380  
                                   381  "
                                   382  
                                   383  
                                   384  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   385  "                                                                    "
                                   386  "	Adjust addresses of instructions which refer to prds       "
                                   387  "	cells outside of the fast connect code                     "
                                   388  "                                                                    "
                                   389  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                   390  
                                   391  
    000243  aa   000020 2200 03    392  	ldx0	prds_rel_table_end-prds_rel_table,du
                                   393  
    000244                         394  next_prds_rel:
    000244  aa   777774 6200 10    395  	eax0	-prds_rel_table_entry,x0	bump to next table entry
    000245  0a   000252 6040 00    396  	tmi	prds_rel_done		done table
    000246  0a   000170 2370 30    397  	ldaq	prds_rel_table,x0*		its pointer into prds
    000247  aa   000000 6210 02    398  	eax1	0,qu			offset into prds
    000250  0a   000172 7410 30    399  	stx1	prds_rel_table+2,x0*		into address field of instruction
    000251  0a   000244 7100 00    400  	tra	next_prds_rel
                                   401  
    000252                         402  prds_rel_done:
                                   403  
                                   404  
    000252  aa  7 00044 7101 20    405  	short_return
                                   406  
                                   407  	
                                   408  
                                   409  
                                   410  	end
ENTRY SEQUENCES
     
    000253  5a   000013 0000 00
    000254  aa  7 00046 2721 20
    000255  0a   000210 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000256  5a   000003 000000 
    000257  5a   000032 600000 
    000260  aa   000000 000000 
    000261  55   000013 000002 
    000262  5a   000002 400003 
    000263  55   000006 000013 
    000264  aa  021 146 141 163
    000265  aa  164 137 143 157
    000266  aa  156 156 145 143
    000267  aa  164 137 151 156
    000270  aa  151 164 000 000
    000271  55   000023 000003 
    000272  0a   000254 500000 
    000273  55   000016 000003 
    000274  aa  021 146 141 163         fast_connect_init
    000275  aa  164 137 143 157
    000276  aa  156 156 145 143
    000277  aa  164 137 151 156
    000300  aa  151 164 000 000
    000301  55   000002 000013 
    000302  6a   000000 400002 
    000303  55   000026 000003 
    000304  aa  014 163 171 155         symbol_table
    000305  aa  142 157 154 137
    000306  aa  164 141 142 154
    000307  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000310  aa   000000 000015 
    000311  aa   000000 000000 
    000312  aa   000000 000000 
    000313  aa   000000 000000 
    000314  aa   000000 000000 
    000315  aa   000000 000000 
    000316  aa   000000 000000 
    000317  5a   000023 000000 
    000320  aa   000000 000000 
    000321  aa   000000 000000 
    000322  aa   000000 000000 
    000323  5a   000013 000000 
    000324  aa   000000 000000 
    000325  aa   000000 000000 

EXTERNAL NAMES

    000326  aa  013 155 143 137         mc_trace_sw
    000327  aa  164 162 141 143
    000330  aa  145 137 163 167
    000331  aa  003 160 144 163         pds
    000332  aa  017 143 157 156         connect_handler
    000333  aa  156 145 143 164
    000334  aa  137 150 141 156
    000335  aa  144 154 145 162
    000336  aa  011 167 151 162         wired_fim
    000337  aa  145 144 137 146
    000340  aa  151 155 000 000
    000341  aa  014 146 141 165         fault_vector
    000342  aa  154 164 137 166
    000343  aa  145 143 164 157
    000344  aa  162 000 000 000
    000345  aa  025 146 141 163         fast_connect_code_end
    000346  aa  164 137 143 157
    000347  aa  156 156 145 143
    000350  aa  164 137 143 157
    000351  aa  144 145 137 145
    000352  aa  156 144 000 000
    000353  aa  021 146 141 163         fast_connect_code
    000354  aa  164 137 143 157
    000355  aa  156 156 145 143
    000356  aa  164 137 143 157
    000357  aa  144 145 000 000
    000360  aa  020 155 157 144         mode_reg_enabled
    000361  aa  145 137 162 145
    000362  aa  147 137 145 156
    000363  aa  141 142 154 145
    000364  aa  144 000 000 000
    000365  aa  015 143 141 143         cache_luf_reg
    000366  aa  150 145 137 154
    000367  aa  165 146 137 162
    000370  aa  145 147 000 000
    000371  aa  007 141 160 164         apt_ptr
    000372  aa  137 160 164 162
    000373  aa  004 160 162 144         prds
    000374  aa  163 000 000 000
    000375  aa  016 160 162 157         processor_data
    000376  aa  143 145 163 163
    000377  aa  157 162 137 144
    000400  aa  141 164 141 000
    000401  aa  024 160 162 157         processor_start_wait
    000402  aa  143 145 163 163
    000403  aa  157 162 137 163
    000404  aa  164 141 162 164
    000405  aa  137 167 141 151
    000406  aa  164 000 000 000
    000407  aa  023 163 171 163         sys_trouble_pending
    000410  aa  137 164 162 157
    000411  aa  165 142 154 145
    000412  aa  137 160 145 156
    000413  aa  144 151 156 147
    000414  aa  023 143 160 165         cpu_a_flt_ctr_array
    000415  aa  137 141 137 146
    000416  aa  154 164 137 143
    000417  aa  164 162 137 141
    000420  aa  162 162 141 171
    000421  aa  023 167 151 162         wired_hardcore_data
    000422  aa  145 144 137 150
    000423  aa  141 162 144 143
    000424  aa  157 162 145 137
    000425  aa  144 141 164 141
    000426  aa  010 143 141 155         cam_wait
    000427  aa  137 167 141 151
    000430  aa  164 000 000 000
    000431  aa  010 143 141 155         cam_pair
    000432  aa  137 160 141 151
    000433  aa  162 000 000 000
    000434  aa  020 146 141 163         fast_cam_pending
    000435  aa  164 137 143 141
    000436  aa  155 137 160 145
    000437  aa  156 144 151 156
    000440  aa  147 000 000 000
    000441  aa  003 163 143 163         scs

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000442  aa   000004 000000 
    000443  55   000053 000050 
    000444  aa   000004 000000 
    000445  55   000060 000054 
    000446  aa   000003 000000 
    000447  5a   000063 000000 
    000450  aa   000004 000000 
    000451  55   000115 000067 
    000452  aa   000004 000000 
    000453  55   000115 000075 
    000454  aa   000004 000000 
    000455  55   000115 000102 
    000456  aa   000004 000000 
    000457  55   000115 000107 
    000460  aa   000004 000000 
    000461  55   000115 000113 
    000462  aa   000004 000000 
    000463  55   000163 000117 
    000464  aa   000004 000000 
    000465  55   000163 000123 
    000466  aa   000004 000000 
    000467  55   000163 000131 
    000470  aa   000004 000000 
    000471  55   000143 000136 
    000472  aa   000004 000000 
    000473  55   000163 000150 
    000474  aa   000004 000000 
    000475  55   000163 000153 
    000476  aa   000004 000000 
    000477  55   000163 000156 
    000500  aa   000001 000000 
    000501  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000502  5a   000164 000000 
    000503  5a   000166 000000 
    000504  5a   000170 000520 
    000505  5a   000172 000000 
    000506  5a   000174 000000 
    000507  5a   000176 000000 
    000510  5a   000200 000000 
    000511  5a   000202 000000 
    000512  5a   000204 000000 
    000513  5a   000206 000000 
    000514  5a   000210 000000 
    000515  5a   000212 000010 
    000516  5a   000214 000000 
    000517  5a   000216 000000 
    000520  5a   000220 000000 
    000521  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000256 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000050 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         scs|fast_cam_pending
    000011  5a   000242 0000 00
    000012  9a   777766 0000 46         scs|cam_pair
    000013  5a   000241 0000 00
    000014  9a   777764 0000 46         scs|cam_wait
    000015  5a   000240 0000 00
    000016  9a   777762 0000 46         wired_hardcore_data|cpu_a_flt_ctr_array
    000017  5a   000237 0000 01
    000020  9a   777760 0000 46         scs|sys_trouble_pending
    000021  5a   000236 0000 00
    000022  9a   777756 0000 46         scs|processor_start_wait
    000023  5a   000235 0000 00
    000024  9a   777754 0000 46         scs|processor_data
    000025  5a   000234 0000 00
    000026  9a   777752 0000 46         prds|apt_ptr
    000027  5a   000233 0000 00
    000030  9a   777750 0000 46         prds|cache_luf_reg
    000031  5a   000232 0000 00
    000032  9a   777746 0000 46         prds|mode_reg_enabled
    000033  5a   000231 0000 00
    000034  9a   777744 0000 46         prds|fast_connect_code
    000035  5a   000230 0000 00
    000036  9a   777742 0000 46         prds|fast_connect_code_end
    000037  5a   000227 0000 00
    000040  9a   777740 0000 46         fault_vector|       
    000041  5a   000226 0000 20
    000042  9a   777736 0000 46         wired_fim|connect_handler
    000043  5a   000225 0000 00
    000044  9a   777734 0000 46         fault_vector|       
    000045  5a   000226 0000 61
    000046  9a   777732 0000 46         pds|mc_trace_sw
    000047  5a   000224 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   257477 572070 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000252 
    000020  aa   000000 000165 
    000021  aa   000216 000205 
    000022  aa   000241 000165 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000005 
    000066  aa   000112 000066 
    000067  aa   175453 021040 
    000070  aa   000000 117547 
    000071  aa   207734 400000 
    000072  aa   000130 000032 
    000073  aa   147777 464062 
    000074  aa   000000 115000 
    000075  aa   507456 000000 
    000076  aa   000137 000031 
    000077  aa   075522 764240 
    000100  aa   000000 107555 
    000101  aa   332322 000000 
    000102  aa   000146 000042 
    000103  aa   101301 045475 
    000104  aa   000000 110133 
    000105  aa   352304 600000 
    000106  aa   000157 000030 
    000107  aa   123154 505731 
    000110  aa   000000 112316 
    000111  aa   133412 600000 
    000112  aa   076163 160145          >special_ldd>install>MR12.3-1114>fast_connect_init.alm
    000113  aa   143151 141154 
    000114  aa   137154 144144 
    000115  aa   076151 156163 
    000116  aa   164141 154154 
    000117  aa   076115 122061 
    000120  aa   062056 063055 
    000121  aa   061061 061064 
    000122  aa   076146 141163 
    000123  aa   164137 143157 
    000124  aa   156156 145143 
    000125  aa   164137 151156 
    000126  aa   151164 056141 
    000127  aa   154155 040040 
    000130  aa   076154 144144          >ldd>include>apte.incl.alm
    000131  aa   076151 156143 
    000132  aa   154165 144145 
    000133  aa   076141 160164 
    000134  aa   145056 151156 
    000135  aa   143154 056141 
    000136  aa   154155 040040 
    000137  aa   076154 144144          >ldd>include>scs.incl.alm
    000140  aa   076151 156143 
    000141  aa   154165 144145 
    000142  aa   076163 143163 
    000143  aa   056151 156143 
    000144  aa   154056 141154 
    000145  aa   155040 040040 
    000146  aa   076154 144144          >ldd>include>fault_vector.incl.alm
    000147  aa   076151 156143 
    000150  aa   154165 144145 
    000151  aa   076146 141165 
    000152  aa   154164 137166 
    000153  aa   145143 164157 
    000154  aa   162056 151156 
    000155  aa   143154 056141 
    000156  aa   154155 040040 
    000157  aa   076154 144144          >ldd>include>mc.incl.alm
    000160  aa   076151 156143 
    000161  aa   154165 144145 
    000162  aa   076155 143056 
    000163  aa   151156 143154 
    000164  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          42    apte.access_authorization      apte:          98.
          24    apte.alarm_event         apte:          79.
          26    apte.alarm_time          apte:          82.
          26    apte.alarm_time_thread   apte:          81.
          40    apte.always_loaded       apte:          29.
          66    apte.apad                apte:         120.
          12    apte.asteps              apte:          54.
          10    apte.batch               apte:          74.
          21    apte.batch_word          apte:          73.
          60    apte.begin_interaction_vcpu    apte:         112.
          10    apte.being_loaded        apte:          31.
           0    apte.bp                  apte:          13.
          23    apte.chans_offset        apte:          71.
          37    apte.cpu_monitor         apte:          94.
          52    apte.current_response_state    apte:         108.
          44    apte.dbr                 apte:         101.
          20    apte.dbr_loaded          apte:          30.
          34    apte.deadline            apte:          90.
         200    apte.default_procs_required    apte:          27.
          12    apte.dseg                apte:          56.
        4000    apte.eligible            apte:          23.
          10    apte.event_thread        apte:          50.
           1    apte.firstsw             apte:          34.
           1    apte.flags               fast_connect_init:  113,
                                         apte:          15.
          21    apte.flags2              apte:          69.
           0    apte.fp                  apte:          12.
       20000    apte.hproc               apte:          21.
        2000    apte.idle                apte:          24.
        1000    apte.interaction         apte:          25.
          10    apte.ipc_pointers        apte:          49.
          65    apte.ipc_r_factor        apte:         119.
          64    apte.ipc_r_offset        apte:         118.
          11    apte.ips_message         fast_connect_init:  118,
                                         apte:          52.
          51    apte.ittes_got           apte:         106.
          50    apte.ittes_sent          apte:         105.
          54    apte.last_response_state_time  apte:         110.
          13    apte.le_shift            apte:         126.
       10000    apte.loaded              apte:          22.
          36    apte.lock                apte:          92.
          15    apte.lock_id             apte:          63.
      400000    apte.mbz                 apte:          17.
      400000    apte.no_ipc_check        apte:          99.
          53    apte.number_processing   apte:         109.
           2    apte.page_faults         apte:          37.
           2    apte.page_wait_flag      apte:          33.
          40    apte.paging_measure      apte:          96.
          12    apte.pds                 apte:          55.
          13    apte.prds                apte:          58.
       40000    apte.pre_empted          apte:          20.
         400    apte.pre_empt_pending    fast_connect_init:  116,
                                         apte:          26.
      400000    apte.prior_sched         apte:          70.
           3    apte.processid           apte:          39.
          63    apte.procs_required      apte:         115.
      776000    apte.procs_required_mask       apte:         116.
           7    apte.pr_tag_mask         apte:          75.
         100    apte.realtime_burst      apte:          28.
          62    apte.saved_temax         apte:         114.
          13    apte.savex7              apte:          59.
           1    apte.sentinel            apte:          16.
           4    apte.shared_stack_0      apte:          32.
      374000    apte.special_chans       apte:          72.
           1    apte.state               apte:          35.
          22    apte.state_change_time   apte:          77.
      100000    apte.stop_pending        fast_connect_init:  116,
                                         apte:          19.
           4    apte.te                  apte:          41.
          33    apte.temax               apte:          88.
          30    apte.term_channel        apte:          84.
          14    apte.term_processid      apte:          61.
           0    apte.thread              apte:          11.
           6    apte.ti                  apte:          45.
           7    apte.timax               apte:          47.
         175    apte.timer_factor        apte:         127.
          16    apte.time_used_clock     apte:          64.
          56    apte.total_processing_time     apte:         111.
           5    apte.ts                  apte:          43.
          46    apte.virtual_cpu_time    apte:         103.
          20    apte.wait_event          apte:          66.
      200000    apte.wakeup_waiting      apte:          18.
          21    apte.wct_index           apte:          68.
          32    apte.ws_size             apte:          86.
          20    apte_ptr_au_1            fast_connect_init:  114,  296.
          26    apte_ptr_au_1_link       fast_connect_init:  211,  296.
          24    apte_ptr_au_2            fast_connect_init:  119,  297.
          26    apte_ptr_au_2_link       fast_connect_init:  212,  297.
                apt_ptr                  fast_connect_init:  211,  212.
          45    cache_luf_reg            fast_connect_init:  138,  213,  298.
          30    cache_luf_reg_link       fast_connect_init:  213,  298.
          64    cam_pair                 fast_connect_init:  102,  169,  205,  243.
          12    cam_pair_link            fast_connect_init:  205,  243.
          66    cam_wait                 fast_connect_init:  100,  171,  206,  244.
          14    cam_wait_link            fast_connect_init:  206,  244.
         104    connect_handler          fast_connect_init:  152,  186,  218,  251.
          42    connect_handler_link     fast_connect_init:  218,  251.
          50    continue                 fast_connect_init:  107,  109,  112,  117,  121,  123,  144.
          50    continue_quick           fast_connect_init:  101,  145.
         220    copy_fast_connect_code   fast_connect_init:  320,  330.
                cpu_a_flt_ctr_array      fast_connect_init:  207.
         243    cpu_tag_done             fast_connect_init:  375,  379.
           2    cpu_tag_reloc_entry      fast_connect_init:  276,  374.
         164    cpu_tag_reloc_table      fast_connect_init:  271,  370,  376.
         170    cpu_tag_reloc_table_end  fast_connect_init:  274,  370.
                fast_cam_pending         fast_connect_init:  204.
          62    fast_cam_pending_cpu     fast_connect_init:   98,  103,  167,  242,  272.
          10    fast_cam_pending_cpu_link      fast_connect_init:  204,  242.
           0    fast_connect_code        fast_connect_init:   96,  191,  215,  242,  243,  244,  245,  246,  247,  248,  249,
                                                             250,  251,  252,  272,  273,  296,  297,  298,  299,  337.
         440    fast_connect_code_chars  fast_connect_init:  192,  337,  338.
                fast_connect_code_end    fast_connect_init:  216.
          36    fast_connect_code_end_link     fast_connect_init:  216,  318.
          34    fast_connect_code_link   fast_connect_init:  215,  316,  333.
         110    fast_connect_code_words  fast_connect_init:  191,  192,  319.
         210    fast_connect_init        fast_connect_init:   52,  314.
          70    fault_counters_connect   fast_connect_init:  136,  150,  173,  245.
          16    fault_counters_connect_link    fast_connect_init:  207,  245.
          24    FAULT_NO_ACV             fault_vector:        46.
           5    FAULT_NO_CMD             fault_vector:        31.
          10    FAULT_NO_CON             fast_connect_init:  207,  217,  219,
                                         fault_vector:        34.
          20    FAULT_NO_DF0             fault_vector:        42.
          21    FAULT_NO_DF1             fault_vector:        43.
          22    FAULT_NO_DF2             fault_vector:        44.
          23    FAULT_NO_DF3             fault_vector:        45.
          16    FAULT_NO_DIV             fault_vector:        40.
           6    FAULT_NO_DRL             fault_vector:        32.
          17    FAULT_NO_EXF             fault_vector:        41.
           3    FAULT_NO_F1              fault_vector:        29.
          30    FAULT_NO_F2              fault_vector:        50.
          31    FAULT_NO_F3              fault_vector:        51.
          12    FAULT_NO_IPR             fault_vector:        36.
           7    FAULT_NO_LUF             fault_vector:        33.
           2    FAULT_NO_MME             fault_vector:        28.
          25    FAULT_NO_MME2            fault_vector:        47.
          26    FAULT_NO_MME3            fault_vector:        48.
          27    FAULT_NO_MME4            fault_vector:        49.
          15    FAULT_NO_OFL             fault_vector:        39.
          13    FAULT_NO_ONC             fault_vector:        37.
          11    FAULT_NO_PAR             fault_vector:        35.
           0    FAULT_NO_SDF             fault_vector:        26.
           1    FAULT_NO_STR             fault_vector:        27.
          14    FAULT_NO_SUF             fault_vector:        38.
          37    FAULT_NO_TRB             fault_vector:        53.
           4    FAULT_NO_TRO             fault_vector:        30.
                fault_vector             fast_connect_init:  217,  219.
         100    fv.fpair                 fault_vector:        17.
         100    fv.fpair.scu             fault_vector:        19.
         101    fv.fpair.tra             fault_vector:        20.
         500    fv.f_scu_ptr             fast_connect_init:  217,  219,
                                         fault_vector:        24.
         400    fv.f_tra_ptr             fault_vector:        23.
           0    fv.ipair                 fault_vector:        13.
           0    fv.ipair.scu             fault_vector:        15.
           1    fv.ipair.tra             fault_vector:        16.
         300    fv.i_scu_ptr             fault_vector:        22.
         200    fv.i_tra_ptr             fault_vector:        21.
         600    fv_size                  fault_vector:        10.
           7    hbound_processor_data    scs:           10.
         235    its_done                 fast_connect_init:  355,  360.
         110    its_link_table           fast_connect_init:  241,  351,  356,  357.
         164    its_link_table_end       fast_connect_init:  253,  351.
           4    its_link_table_entry     fast_connect_init:  255,  354.
      300000    mc.cpu_type_mask         mc:            22.
           3    mc.cpu_type_shift        mc:            25.
          46    mc.cpu_type_word         mc:            21.
          50    mc.eis_info              fast_connect_init:  128,
                                         mc:            11.
          43    mc.errcode               mc:            17.
          46    mc.ext_fault_reg         mc:            23.
       77774    mc.ext_fault_reg_mask    mc:            24.
          45    mc.fault_reg             mc:            19.
          46    mc.fault_time            mc:            20.
          44    mc.fim_temp              mc:            18.
          42    mc.ips_temp              mc:            16.
          40    mc.mask                  mc:            15.
           0    mc.prs                   mc:             8.
          20    mc.regs                  mc:             9.
          30    mc.scu                   fast_connect_init:  128,
                                         mc:            10.
          30    mc.scu.apu_stat_word     mc:            48.
          35    mc.scu.ca_word           mc:           207.
          32    mc.scu.cpu_no_word       mc:           138.
          35    mc.scu.cpu_tag_word      mc:           231.
          35    mc.scu.cu_stat_word      mc:           211.
          32    mc.scu.delta_word        mc:           144.
          30    mc.scu.fault_cntr_word   mc:            66.
          31    mc.scu.fault_data_word   mc:            74.
          34    mc.scu.ilc_word          mc:           182.
          34    mc.scu.indicators_word   mc:           186.
          31    mc.scu.port_stat_word    mc:           108.
          30    mc.scu.ppr.prr_word      mc:            33.
          30    mc.scu.ppr.psr_word      mc:            38.
          30    mc.scu.ppr.p_word        mc:            43.
          33    mc.scu.tpr.tbr_word      mc:           174.
          32    mc.scu.tpr.trr_word      mc:           128.
          32    mc.scu.tpr.tsr_word      mc:           133.
          33    mc.scu.tsr_stat_word     mc:           152.
                mc_trace_sw              fast_connect_init:  220.
          46    mode_reg_enabled         fast_connect_init:  140,  214,  299.
          32    mode_reg_enabled_link    fast_connect_init:  214,  299.
           7    next                     fast_connect_init:   99,  104.
         237    next_cpu_tag             fast_connect_init:  373,  377.
         230    next_its                 fast_connect_init:  353,  358.
         244    next_prds_rel            fast_connect_init:  394,  400.
                pds                      fast_connect_init:  220.
         106    pds_mc_trace_sw          fast_connect_init:  122,  188,  252.
          46    pds_mc_trace_sw_link     fast_connect_init:  220,  252.
           2    pr2                      fast_connect_init:  223,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
                                                             252,  272,  273,  296,  297,  298,  299.
           4    pr4                      fast_connect_init:  224,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
                                                             252,  296,  297,  298,  299.
                prds                     fast_connect_init:  211,  212,  213,  214,  215,  216.
         252    prds_rel_done            fast_connect_init:  396,  402.
         170    prds_rel_table           fast_connect_init:  295,  392,  397,  399.
         210    prds_rel_table_end       fast_connect_init:  300,  392.
           4    prds_rel_table_entry     fast_connect_init:  302,  395.
                processor_data           fast_connect_init:  210.
       20000    processor_data.delete_cpu      fast_connect_init:  111,
                                               scs:            6.
        4000    processor_data.halted_cpu      scs:            8.
       10000    processor_data.interrupt_cpu   scs:            7.
      200000    processor_data.offline   scs:            5.
      400000    processor_data.online    scs:            4.
           7    processor_data.port_mask       scs:            9.
          76    processor_data_cpu       fast_connect_init:  110,  180,  248,  273.
          24    processor_data_cpu_link  fast_connect_init:  210,  248.
          74    processor_start_wait     fast_connect_init:  108,  178,  209,  247.
          22    processor_start_wait_link      fast_connect_init:  209,  247.
          60    save_aq_temp             fast_connect_init:   97,  105,  137,  151,  165.
                scs                      fast_connect_init:  204,  205,  206,  208,  209,  210.
        2000    scu.apu.dsptw            mc:            57.
          10    scu.apu.fabs             mc:            64.
          20    scu.apu.fanp             mc:            63.
          40    scu.apu.fap              mc:            62.
        4000    scu.apu.pi_ap            mc:            56.
         200    scu.apu.ptw              mc:            60.
         100    scu.apu.ptw2             mc:            61.
       20000    scu.apu.ptwm             mc:            54.
       10000    scu.apu.pt_on            mc:            55.
      100000    scu.apu.sdwm             mc:            52.
        1000    scu.apu.sdwnp            mc:            58.
         400    scu.apu.sdwp             mc:            59.
       40000    scu.apu.sd_on            mc:            53.
      200000    scu.apu.xsf              mc:            51.
           0    scu.apu_stat_word        mc:            49.
          22    scu.ca_shift             mc:           209.
           5    scu.ca_word              mc:           208.
         700    scu.con_chan_mask        mc:           117.
           6    scu.con_chan_shift       mc:           118.
         700    scu.cpu_no_mask          fast_connect_init:  134,  148,
                                         mc:           141.
           2    scu.cpu_no_word          fast_connect_init:  132,  146,
                                         mc:           139.
           6    scu.cpu_shift            mc:           142.
           7    scu.cpu_tag_mask         mc:           234.
           5    scu.cpu_tag_word         mc:           232.
         100    scu.cu.if                mc:           229.
        1000    scu.cu.poa               mc:           226.
       10000    scu.cu.pon               mc:           221.
       20000    scu.cu.pot               mc:           220.
      100000    scu.cu.rd                mc:           217.
      400000    scu.cu.rf                mc:           214.
         400    scu.cu.rfi               mc:           227.
       40000    scu.cu.rl                mc:           218.
      200000    scu.cu.rpt               mc:           216.
        4000    scu.cu.xde               mc:           223.
        2000    scu.cu.xdo               mc:           224.
           5    scu.cu_stat_word         mc:           212.
          77    scu.delta_mask           mc:           147.
           2    scu.delta_word           mc:           145.
          36    scu.even_inst_word       mc:           239.
           7    scu.fault_cntr_mask      mc:            69.
           0    scu.fault_cntr_word      mc:            67.
           1    scu.fault_data_word      mc:            75.
          10    scu.fd.am_er             mc:            91.
         200    scu.fd.boc               mc:            87.
          40    scu.fd.crt               mc:            89.
      100000    scu.fd.e_off             mc:            79.
      100000    scu.fd.ia_im             mc:           102.
         100    scu.fd.inret             mc:            88.
      200000    scu.fd.ioc               mc:           101.
       20000    scu.fd.ipr               mc:           104.
      400000    scu.fd.iro               mc:            77.
      400000    scu.fd.isn               mc:           100.
       40000    scu.fd.isp               mc:           103.
       10000    scu.fd.nea               mc:           105.
        2000    scu.fd.no_ga             mc:            84.
         400    scu.fd.ocall             mc:            86.
        1000    scu.fd.ocb               mc:            85.
      200000    scu.fd.oeb               mc:            78.
      400000    scu.fd.onc_1             mc:            96.
      200000    scu.fd.onc_2             mc:            97.
        4000    scu.fd.oobb              mc:           106.
           4    scu.fd.oosb              mc:            92.
       40000    scu.fd.orb               mc:            80.
       10000    scu.fd.owb               mc:            82.
           1    scu.fd.parl              mc:            94.
           2    scu.fd.paru              mc:            93.
          20    scu.fd.ralr              mc:            90.
       20000    scu.fd.r_off             mc:            81.
        4000    scu.fd.w_off             mc:            83.
           1    scu.fi_flag_mask         mc:           123.
          76    scu.fi_num_mask          mc:           120.
           1    scu.fi_num_shift         mc:           121.
        7000    scu.iac_mask             mc:           114.
          11    scu.iac_shift            mc:           115.
      170000    scu.ial_mask             mc:           111.
          14    scu.ial_shift            mc:           112.
          22    scu.ilc_shift            mc:           184.
           4    scu.ilc_word             mc:           183.
           4    scu.indicators_word      fast_connect_init:  124,
                                         mc:           187.
          20    scu.ir.abs               mc:           202.
         200    scu.ir.bm                mc:           199.
      100000    scu.ir.carry             mc:           191.
       20000    scu.ir.eovf              mc:           193.
       10000    scu.ir.eufl              mc:           194.
          10    scu.ir.hex               mc:           203.
          40    scu.ir.mif               fast_connect_init:  126,
                                         mc:           201.
      200000    scu.ir.neg               mc:           190.
        4000    scu.ir.oflm              mc:           195.
       40000    scu.ir.ovfl              mc:           192.
        1000    scu.ir.par               mc:           197.
         400    scu.ir.parm              mc:           198.
        2000    scu.ir.tro               mc:           196.
         100    scu.ir.tru               mc:           200.
      400000    scu.ir.zero              mc:           189.
          37    scu.odd_inst_word        mc:           241.
           1    scu.port_stat_word       mc:           109.
      400000    scu.ppr.p                mc:            45.
      700000    scu.ppr.prr_mask         mc:            35.
          41    scu.ppr.prr_shift        mc:            36.
           0    scu.ppr.prr_word         mc:            34.
       77777    scu.ppr.psr_mask         mc:            40.
          22    scu.ppr.psr_shift        mc:            41.
           0    scu.ppr.psr_word         mc:            39.
           0    scu.ppr.p_word           mc:            44.
          77    scu.tpr.tbr_mask         mc:           177.
           3    scu.tpr.tbr_word         mc:           175.
      700000    scu.tpr.trr_mask         mc:           130.
          41    scu.tpr.trr_shift        mc:           131.
           2    scu.tpr.trr_word         mc:           129.
       77777    scu.tpr.tsr_mask         mc:           135.
          22    scu.tpr.tsr_shift        mc:           136.
           2    scu.tpr.tsr_word         mc:           134.
      700000    scu.tsna.prn_mask        mc:           159.
          17    scu.tsna.prn_shift       mc:           160.
       40000    scu.tsna.prv             mc:           161.
      740000    scu.tsna_mask            mc:           158.
       34000    scu.tsnb.prn_mask        mc:           164.
          13    scu.tsnb.prn_shift       mc:           165.
        2000    scu.tsnb.prv             mc:           166.
       36000    scu.tsnb_mask            mc:           163.
        1600    scu.tsnc.prn_mask        mc:           169.
           7    scu.tsnc.prn_shift       mc:           170.
         100    scu.tsnc.prv             mc:           171.
          13    scu.tsnc_mask            mc:           168.
      777700    scu.tsr_stat_mask        mc:           155.
           6    scu.tsr_stat_shift       mc:           156.
           3    scu.tsr_stat_word        mc:           153.
         100    scu_info                 fast_connect_init:  142,  182,  249.
         102    scu_info_au              fast_connect_init:  125,  129,  130,  133,  147,  184,  250.
          44    scu_info_au_link         fast_connect_init:  219,  250.
          40    scu_info_link            fast_connect_init:  217,  249.
         100    size_of_apt_entry        apte:         122.
          37    skip_spl_lpl             fast_connect_init:  127,  131.
          72    sys_trouble_pending      fast_connect_init:  106,  176,  208,  246.
          20    sys_trouble_pending_link       fast_connect_init:  208,  246.
                wired_fim                fast_connect_init:  218.
                wired_hardcore_data      fast_connect_init:  207.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
