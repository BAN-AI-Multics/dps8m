	COMPILATION LISTING OF SEGMENT sc_admin_mode_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1018.6 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 /* format: style2,idind30 */
       10 
       11 sc_admin_mode_:
       12      procedure;
       13 
       14 /**** System control request to enter admin mode.
       15*      This assumes that I/O switches are already set up reasonably. */
       16 
       17 /**** Written 1984-11-02 BIM */
       18 
       19 
       20 /****^  HISTORY COMMENTS:
       21*  1) change(86-08-01,Swenson), approve(87-05-25,MCR7680),
       22*     audit(87-02-19,GDixon), install(87-08-04,MR12.1-1055):
       23*     Avoid calling hphcs_$syserr_error_code when running in system control test
       24*     mode.
       25*  2) change(87-02-19,GDixon), approve(87-05-25,MCR7680),
       26*     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
       27*     Correct coding standard violations.
       28*                                                   END HISTORY COMMENTS */
       29 
       30 
       31 	declare cu_$arg_list_ptr	        entry returns (ptr);
       32 	declare cu_$get_cl_intermediary       entry (entry);
       33 	declare cu_$generate_call	        entry (entry, ptr);
       34 	declare cu_$reset_command_processor   entry;
       35 	declare cu_$set_cl_intermediary       entry (entry);
       36 	declare default_error_handler_$wall   entry;
       37 	declare get_group_id_	        entry () returns (char (32));
       38 	declare hcs_$fs_search_set_wdir       entry (char (*), fixed bin (35));
       39 	declare hphcs_$syserr_error_code      entry entry options (variable);
       40 	declare ioa_		        entry options (variable);
       41 	declare listen_		        entry (char (*) var);
       42 	declare pnt_manager_$priv_get_entry   entry (char (*), pointer, fixed bin (35));
       43 	declare read_password_	        entry (character (*), character (*));
       44 	declare sc_ipc_mask_$unmask	        entry (fixed binary);
       45 	declare sc_ipc_mask_$remask	        entry (fixed binary);
       46 	declare sc_signal_io_handler_	        entry;
       47 	declare scramble_		        entry (character (8)) returns (character (8));
       48 	declare ssu_$abort_line	        entry () options (variable);
       49 	declare ssu_$get_info_ptr	        entry (ptr) returns (ptr);
       50 	declare ssu_$print_message	        entry () options (variable);
       51 	declare sys_log_		        entry options (variable);
       52 
       53 	declare code		        fixed bin (35);
       54 	declare default_cl_intermediary       entry variable;
       55 	declare remask_count	        fixed bin;
       56 	declare saved_access_name	        char (32);
       57 	declare sci_ptr		        pointer;
       58 	declare w_password		        char (8);
       59 
       60 	declare (addr, null)	        builtin;
       61 
       62 	declare any_other		        condition;
       63 	declare cleanup		        condition;
       64 	declare finish		        condition;
       65 	declare signal_io_		        condition;
       66 
       67 	declare ssu_$null_label	        label ext static;
       68 
       69 
       70 	sci_ptr = sc_stat_$admin_sci_ptr;
       71 
       72 	if sc_stat_$admin_listener_switch
       73 	then call ssu_$abort_line (sci_ptr, 0, "Admin mode busy.");
       74 
       75 	call pnt_manager_$priv_get_entry (OPERATOR_ADMIN_MODE_USER_NAME, addr (PNTE), code);
       76 	if code ^= 0
       77 	then do;
       78 		if ^sc_stat_$test_mode
       79 		then call hphcs_$syserr_error_code (LOG, code,
       80 			"admin: Could not retrieve admin password from the PNT to check admin password. Entering admin mode."
       81 			);
       82 		call ssu_$print_message (sci_ptr, code,
       83 		     "Could not retrieve admin password from the PNT to check admin password. Entering admin mode.");
       84 	     end;
       85 	else if ^PNTE.has_password
       86 	then ;					/* no password required */
       87 	else do;
       88 		call read_password_ ("Password", w_password);
       89 		if ^(scramble_ (w_password) = PNTE.password)
       90 		then do;
       91 			call sys_log_ (SL_LOG_SILENT, "admin: incorrect admin mode password given.");
       92 			call ssu_$abort_line (sci_ptr, 0, "Password incorrect.");
       93 		     end;
       94 	     end;
       95 
       96 
       97 	call cu_$get_cl_intermediary (default_cl_intermediary);
       98 	sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
       99 
      100 	on finish go to FINISH_SIGNALLED;
      101 	on any_other call default_error_handler_$wall;
      102 	on signal_io_ call sc_signal_io_handler_;	/* make sure our handler takes */
      103 
      104 	remask_count = 0;
      105 
      106 	saved_access_name = sc_subsystem_info.access_control_name;
      107 
      108 	on cleanup call clean;			/* Allow for nonlocal exit */
      109 
      110 	sc_subsystem_info.access_control_name = get_group_id_ ();
      111 						/* Act as the Initializer */
      112 
      113 	call cu_$set_cl_intermediary (ADMIN_CL_INTERMEDIARY);
      114 	sc_stat_$admin_listener_exit_label = RETURN;
      115 	sc_stat_$admin_listener_switch = "1"b;
      116 	call iox_$control (iox_$user_io, "quit_enable", null (), (0));
      117 	call sc_ipc_mask_$unmask (remask_count);
      118 
      119 	call listen_ ("");				/* This dosen't usually return, but... */
      120 	go to RETURN;
      121 
      122 admin_mode_exit:
      123 ame:
      124      entry;
      125 
      126 	if sc_stat_$admin_listener_switch
      127 	then go to sc_stat_$admin_listener_exit_label;
      128 
      129 	else call ioa_ ("""admin_mode_exit"" ignored.");	/* else ignore exit command */
      130 	return;
      131 
      132 RETURN:
      133 	revert any_other;
      134 	call clean;				/* borrow */
      135 	return;
      136 
      137 FINISH_SIGNALLED:
      138 	revert any_other;
      139 	call clean;
      140 	call ssu_$abort_line (sci_ptr, 0, "finish condition signalled.");
      141 
      142 
      143 ADMIN_CL_INTERMEDIARY:
      144      procedure;
      145 
      146 	on signal_io_ call sc_signal_io_handler_;
      147 	call cu_$generate_call (default_cl_intermediary, cu_$arg_list_ptr ());
      148 	return;
      149      end ADMIN_CL_INTERMEDIARY;
      150 
      151 clean:
      152      procedure;
      153 	sc_subsystem_info.access_control_name = saved_access_name;
      154 	call sc_ipc_mask_$remask (remask_count);
      155 	call iox_$control (iox_$user_io, "quit_disable", null (), (0));
      156 	call cu_$set_cl_intermediary (default_cl_intermediary);
      157 	sc_stat_$admin_listener_switch = "0"b;
      158 	sc_stat_$admin_listener_exit_label = ssu_$null_label;
      159 	call hcs_$fs_search_set_wdir (sc_stat_$sysdir, (0));
      160 	call cu_$reset_command_processor;
      161 	return;
      162      end clean;
      163 
  1     1 /* --------------- BEGIN include file iox_dcls.incl.pl1 --------------- */
  1     2 
  1     3 /* Written 05/04/78 by C. D. Tavares */
  1     4 /* Fixed declaration of iox_$find_iocb_n 05/07/80 by R. Holmstedt */
  1     5 /* Modified 5/83 by S. Krupp to add declarations for:  iox_$open_file,
  1     6*     iox_$close_file, iox_$detach and iox_$attach_loud entries. */
  1     7 
  1     8 dcl  iox_$attach_name entry (char (*), pointer, char (*), pointer, fixed bin (35)),
  1     9      iox_$attach_ptr entry (pointer, char (*), pointer, fixed bin (35)),
  1    10      iox_$close entry (pointer, fixed bin (35)),
  1    11      iox_$control entry (pointer, char (*), pointer, fixed bin (35)),
  1    12      iox_$delete_record entry (pointer, fixed bin (35)),
  1    13      iox_$destroy_iocb entry (pointer, fixed bin (35)),
  1    14      iox_$detach_iocb entry (pointer, fixed bin (35)),
  1    15      iox_$err_not_attached entry options (variable),
  1    16      iox_$err_not_closed entry options (variable),
  1    17      iox_$err_no_operation entry options (variable),
  1    18      iox_$err_not_open entry options (variable),
  1    19      iox_$find_iocb entry (char (*), pointer, fixed bin (35)),
  1    20      iox_$find_iocb_n entry (fixed bin, ptr, fixed bin(35)),
  1    21      iox_$get_chars entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  1    22      iox_$get_line entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  1    23      iox_$look_iocb entry (char (*), pointer, fixed bin (35)),
  1    24      iox_$modes entry (pointer, char (*), char (*), fixed bin (35)),
  1    25      iox_$move_attach entry (pointer, pointer, fixed bin (35)),
  1    26      iox_$open entry (pointer, fixed bin, bit (1) aligned, fixed bin (35)),
  1    27      iox_$position entry (pointer, fixed bin, fixed bin (21), fixed bin (35)),
  1    28      iox_$propagate entry (pointer),
  1    29      iox_$put_chars entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  1    30      iox_$read_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
  1    31      iox_$read_length entry (pointer, fixed bin (21), fixed bin (35)),
  1    32      iox_$read_record entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  1    33      iox_$rewrite_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  1    34      iox_$seek_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
  1    35      iox_$write_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  1    36      iox_$open_file entry(ptr, fixed bin, char(*), bit(1) aligned, fixed bin(35)),
  1    37      iox_$close_file entry(ptr, char(*), fixed bin(35)),
  1    38      iox_$detach entry(ptr, char(*), fixed bin(35)),
  1    39      iox_$attach_loud entry(ptr, char(*), ptr, fixed bin(35));
  1    40 
  1    41 dcl (iox_$user_output,
  1    42      iox_$user_input,
  1    43      iox_$user_io,
  1    44      iox_$error_output) external static pointer;
  1    45 
  1    46 /* ---------------- END include file iox_dcls.incl.pl1 ---------------- */
      164 
      165 
  2     1 /* BEGIN INCLUDE FILE ... pnt_entry.incl.pl1 */
  2     2 
  2     3 /* Modified 790702 by C. Hornig for MSF PNT */
  2     4 /* Modified 84-07-18 BIM for V2, aim ranges, long passwords. */
  2     5 /* Modified 84-09-25 for operator attribute... -E. A. Ranzenbach */
  2     6 /* Modified 85-03-05 E. Swenson for user_validated_time */
  2     7 
  2     8 /**** The ms_table_mgr_ has fixed sized entries, for now.
  2     9*      The presence of a version field and some pad allow
  2    10*      us to have incrementally-upgraded PNTE's in a future change.
  2    11**/
  2    12 
  2    13 /**** The conversion to V2 copies the existing encrypted passwords.
  2    14*      Since the 32 character scrambling algorithm will not give the
  2    15*      same results, the short_XX flags indicate that the old scrambler
  2    16*      should be used. The short flags are automatically turned off
  2    17*      by calls to update the password with the long-scrambled form. */
  2    18 
  2    19 /* format: style4,insnl,delnl */
  2    20 
  2    21 declare  pntep pointer automatic;
  2    22 declare  1 pnt_entry based (pntep) aligned,		/* declaration of a single PNT entry */
  2    23 	 2 version fixed bin,
  2    24 	 2 private aligned,
  2    25 	   3 pw_flags aligned,
  2    26 	     4 short_pw bit (1) unal,			/* ON password is eight-character form */
  2    27 	     4 short_network_pw bit (1) unal,		/* ON card password is eight character form. */
  2    28 	   3 password character (32),			/* person's password */
  2    29 	   3 network_password character (32),
  2    30 	 2 public,
  2    31 	   3 user_id character (32),			/* user ID (for alias entries */
  2    32 	   3 alias character (8),
  2    33 	   3 default_project character (16),		/* user's default project */
  2    34 	   3 flags,				/* one-bit flags */
  2    35 	     4 has_password bit (1) unaligned,
  2    36 	     4 has_network_password bit (1) unaligned,
  2    37 	     4 trap bit (1) unal,			/* If this password is used, holler */
  2    38 	     4 lock bit (1) unal,			/* prevent login if on. */
  2    39 	     4 nochange bit (1) unal,			/* user cannot change password */
  2    40 	     4 must_change bit unal,			/* user must change password at next login */
  2    41 	     4 pw_time_lock bit (1) unal,		/* if password has a time lock */
  2    42 	     4 generate_pw bit (1) unal,		/* ON if we give new pw, OFF lets user select new pw */
  2    43 	     4 last_bad_pw_reported bit (1) unal,	/* ON if user has NOT been told about last bad password  */
  2    44 	     4 operator bit (1) unal,			/* ON if user can login as an operator... */
  2    45 	     4 pads bit (26) unal,
  2    46 	   3 n_good_pw fixed bin,			/* Number of good passwords */
  2    47 	   3 n_bad_pw fixed bin,			/* Number of wrong passwords */
  2    48 	   3 n_bad_pw_since_good fixed bin,		/* Number of wrong passwords since good */
  2    49 	   3 time_pw_changed fixed bin (71),		/* When password was modified by user */
  2    50 
  2    51 	   3 time_last_good_pw fixed bin (71),
  2    52 	   3 time_last_bad_pw fixed bin (71),		/* When pw was last given wrong */
  2    53 	   3 bad_pw_term_id character (4),		/* where bad password from */
  2    54 	   3 bad_pw_line_type fixed bin (17),		/* ... */
  2    55 	   3 bad_pw_term_type character (32),
  2    56 	   3 password_timelock fixed bin (71),		/* Password is locked up until here */
  2    57 	   3 person_authorization (2) bit (72),		/* authorization of this person */
  2    58 	   3 default_person_authorization bit (72),	/* default authorization of this person */
  2    59 	   3 audit bit (36),			/* audit flags for person */
  2    60 	   3 pad1 bit (36),				/* pad to even word boundary */
  2    61 	   3 user_validated_time fixed bin (71),		/* time this PNT entry was last validated by an administrator */
  2    62 	 2 pad (80 - 64) bit (36) aligned;
  2    63 
  2    64 declare  PNT_ENTRY_VERSION_2 fixed bin init (2) int static options (constant);
  2    65 
  2    66 /* END INCLUDE FILE ... pnte.incl.pl1 */
      166 
      167 	declare 1 PNTE		        aligned like pnt_entry;
      168 
  3     1 /*  BEGIN:   sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
  3     2 
  3     3 /* format:style3,idind30 */
  3     4 
  3     5 /* Created  1984-10-24  BIM */
  3     6 /* Modified 1985-01-07, BIM: access control flags that track admin and X */
  3     7 /* Modified 1985-02-18, E. Swenson to save away abort_line procedure. */
  3     8 
  3     9 
  3    10 /****^  HISTORY COMMENTS:
  3    11*  1) change(87-02-17,GDixon), approve(87-07-03,MCR7680),
  3    12*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  3    13*     Correct formatting problems.  Add sc_subsystem_info.flags.dont_mask_calls
  3    14*     switch.
  3    15*  2) change(87-07-03,GDixon), approve(87-07-03,MCR7680),
  3    16*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  3    17*     Removed dont_mask_calls flag.  It is no longer needed to correctly perform
  3    18*     masking on a per-request basis.
  3    19*                                                   END HISTORY COMMENTS */
  3    20 
  3    21 
  3    22 declare	sc_subsystem_info_ptr	pointer;
  3    23 declare	1 sc_subsystem_info		aligned based (sc_subsystem_info_ptr),
  3    24 	  2 restriction_flags	bit (36) aligned,	/* copied from mc atep or fabricated */
  3    25 	  2 flags			aligned,
  3    26 	    3 no_real_tty		bit (1) unaligned,	/* for sc_admin_command_ */
  3    27 	    3 print_ready		bit (1) unal,	/* on for all except the system console,	*/
  3    28 						/*  instructs sc_process_command_line_ to deal	*/
  3    29 						/*  with the prompt				*/
  3    30 	    3 the_system_console	bit (1) unal,	/* syserr messages are printed here (but console	*/
  3    31 						/*  recover doesn't try to fix this) copied here	*/
  3    32 						/*  from the mc_ate to save other looking in there*/
  3    33 	    3 printer_offed		bit (1) unal,	/* suppress logging */
  3    34 	    3 pad			bit (32) unaligned,
  3    35 	  2 source_name		char (32) unaligned,
  3    36 	  2 area_ptr		pointer,
  3    37 	  2 mc_atep		pointer,		/* needed to play with attachments */
  3    38 	  2 real_iocb		pointer,		/* for sc_signal_io_handler_ */
  3    39 	  2 hangup_entry		entry (pointer) variable,
  3    40 						/* called on io_no_permission. */
  3    41 	  2 real_execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
  3    42 	  2 real_locate_request	entry (ptr, char (*), ptr, fixed bin (35)),
  3    43 	  2 access_control_name	char (32) unaligned,
  3    44 	  2 real_invoke_request	entry,		/* since MR11 ssu_ lacks the ability to	abort a	*/
  3    45 						/*  single request, we have an invoke_request that*/
  3    46 						/*  handles a condition to unwind the request	*/
  3    47 	  2 abort_request_label	label,		/* go here (nonlocally) to unwind a single request */
  3    48 	  2 real_abort_line		entry options (variable);
  3    49 
  3    50 declare	sc_ss_area		area based (sc_subsystem_info.area_ptr);
  3    51 
  3    52 /* The following defines the user flags for the request table. */
  3    53 
  3    54 declare	sc_rf_ptr			pointer;
  3    55 declare	1 sc_request_flags		unaligned based (sc_rf_ptr),
  3    56 	  2 dont_parse_arguments	bit,		/* reply, intercom */
  3    57 	  2 obsolete		bit,		/* warn opr to not use it */
  3    58 	  2 dont_mask_calls		bit,		/* this runs without masking ev calls */
  3    59 	  2 requires_as		bit,		/* not before AS */
  3    60 	  2 requires_no_as		bit,		/* only before AS */
  3    61 	  2 complete_disks_first	bit,		/* try to mount disks */
  3    62 	  2 no_login_needed		bit,		/* sign_on */
  3    63 	  2 pad			bit (5),
  3    64 	  2 restriction_type	fixed bin (6) unsigned;
  3    65 						/* index into restriction flag string */
  3    66 
  3    67 
  3    68 /*  END OF:  sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
      169 
      170 
  4     1 /*  BEGIN:   sc_stat_.incl.pl1			  *  *  *  *  *  */
  4     2 
  4     3 
  4     4 /****^  HISTORY COMMENTS:
  4     5*  1) change(87-02-04,GDixon), approve(87-05-25,MCR7690),
  4     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  4     7*     Add sc_stat_$vchn_requires_accept in support of DSA virtual channels.
  4     8*  2) change(87-02-04,GDixon), approve(87-05-25,MCR7680),
  4     9*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  4    10*     Reorganized by type of data to improve readability.
  4    11*                                                   END HISTORY COMMENTS */
  4    12 
  4    13 
  4    14 			      /* ACCESS NAMES		       */
  4    15 dcl (
  4    16  sc_stat_$exec_access_name,	      /* check MC access in an exec request    */
  4    17  sc_stat_$unidentified_access_name  /* check access if no one is logged in.  */
  4    18     ) char(32) ext static;
  4    19 
  4    20 		        /* PATHNAMES			       */
  4    21 dcl (
  4    22  sc_stat_$info_dir,	        /* admin info segs directory		       */
  4    23  sc_stat_$log_dir,	        /* as log segs directory		       */
  4    24  sc_stat_$mc_acs_dir,       /* message coordinator ACS segments (.mcacs) dir */
  4    25  sc_stat_$sysdir	        /* system control directory		       */
  4    26     ) char(168) ext static;
  4    27 
  4    28 		        /* OTHER CHAR STRINGS			       */
  4    29 dcl (
  4    30  sc_stat_$master_channel    /* Master TTY channel.		       */
  4    31     )  char(6) aligned ext static;
  4    32 
  4    33 			       /* LABELS			       */
  4    34 dcl (
  4    35  sc_stat_$admin_listener_exit_label, /* GO here to exit admin mode.  Set to  */
  4    36 			       /*    ssu_$null_label unless 	       */
  4    37 			       /*	   admin_listener is active.	       */
  4    38  sc_stat_$master_abort_label,	       /* GO here after fault that is not      */
  4    39 			       /*    attributable to a particular      */
  4    40 			       /*	   command.		       */
  4    41  sc_stat_$system_shutdown_label      /* GO here to shut down system	       */
  4    42     ) label variable ext static;
  4    43 
  4    44 			 /* POINTERS TO			       */
  4    45 dcl (
  4    46  sc_stat_$admin_log_iocb,	 /* IOCB for admin log		       */
  4    47  sc_stat_$admin_log_write_ptr, /* DATA for log_write_ calls on the admin log */
  4    48  sc_stat_$admin_sci_ptr,	 /* DATA ssu_ for terminal currently executing */
  4    49  sc_stat_$as_log_write_ptr,	 /* DATA for log_write_ calls on as log, used  */
  4    50 			 /*      by sys_log_.		       */
  4    51  sc_stat_$initzer_ttyp,	 /* ENT  mc_ate for initializer terminal       */
  4    52  sc_stat_$master_iocb,	 /* IOCB for "master_i/o"		       */
  4    53  sc_stat_$master_sci_ptr,	 /* DATA ssu_ (permanent) for system control   */
  4    54  sc_stat_$mc_ansp,		 /* HEAD of mc_anstbl		       */
  4    55  sc_stat_$mc_iocb,		 /* IOCB ptr for "mc_i/o"		       */
  4    56  sc_stat_$sv1_iocb,		 /* IOCB ptr for "severity1"		       */
  4    57  sc_stat_$sv2_iocb,		 /* IOCB ptr for "severity2"		       */
  4    58  sc_stat_$sv3_iocb		 /* IOCB ptr for "severity3"		       */
  4    59     ) ptr ext static;
  4    60 
  4    61 			   /* SWITCHES			       */
  4    62 dcl (
  4    63  sc_stat_$Go,		   /* TRUE after answering service is listening*/
  4    64  sc_stat_$Go_typed,		   /* TRUE immediately after 'go' is typed     */
  4    65  sc_stat_$Multics,		   /* TRUE after answering service started     */
  4    66  sc_stat_$Multics_typed,	   /* TRUE immediately after 'mult' is typed   */
  4    67  sc_stat_$Star_typed,	   /* TRUE if 'mult' and 'go' came from 'star' */
  4    68  sc_stat_$admin_listener_switch, /* TRUE if in the admin listener	       */
  4    69  sc_stat_$did_part1,	   /* TRUE if part 1 of system startup ec done */
  4    70  sc_stat_$did_part2,	   /* TRUE if part 2 of system startup ec done */
  4    71  sc_stat_$did_part3,	   /* TRUE if part 3 of system startup ec done */
  4    72  sc_stat_$mc_is_on,		   /* TRUE if message coordinator running      */
  4    73  sc_stat_$no_operator_login,	   /* TRUE if operator login not required, or  */
  4    74 			   /*	 if PNT not yet available.	       */
  4    75  sc_stat_$shutdown_typed,	   /* TRUE if 'shutdown' command in progress.  */
  4    76  sc_stat_$test_mode,	   /* TRUE if in test environment	       */
  4    77  sc_stat_$vchn_requires_accept   /* TRUE if vchn may only be used if accepted*/
  4    78 			   /*      by operator signed on system console*/
  4    79     ) bit(1) aligned ext static;
  4    80 
  4    81 
  4    82 /*  END OF:  sc_stat_.incl.pl1			  *  *  *  *  *  */
      171 
      172 
  5     1 /* Begin include file special_person_names.incl.pl1 BIM 1984-10-12 */
  5     2 /* format: style3,idind30 */
  5     3 
  5     4 /* This include file contains the user names which are used for 
  5     5*   special (non-login) passwords stored in the PNT. Since there
  5     6*   are not very many of these (one, as of this writing), having
  5     7*   to recompile programs to add them seems a small price to pay.
  5     8*
  5     9*   At worst, set_special_password and new_user have to be
  5    10*   recompiled when one is added. */
  5    11 
  5    12 declare	OPERATOR_ADMIN_MODE_USER_NAME char (32) init ("_operator_admin_mode_") int static options (constant);
  5    13 
  5    14 declare	1 SPECIAL_USER_NAME_ARRAY	(1) aligned int static options (constant),
  5    15 	  2 print_name		char (40) init ("Operator admin mode"),
  5    16 	  2 command_line_name	char (40) init ("operator_admin_mode"),
  5    17 	  2 pnte_entry_name		char (32) init ("_operator_admin_mode_");
  5    18 
  5    19 /* End include file special_person_names.incl.pl1 */
      173 
      174 
  6     1 /* BEGIN INCLUDE FILE sys_log_constants.incl.pl1 ... 82-09-24 E. N. Kittlitz */
  6     2 
  6     3 
  6     4 /****^  HISTORY COMMENTS:
  6     5*  1) change(87-04-22,GDixon), approve(87-06-10,MCR7708),
  6     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  6     7*     Added sl_info structure and associated named constants for use in calling
  6     8*     sys_log_$general.
  6     9*                                                   END HISTORY COMMENTS */
  6    10 
  6    11 
  6    12 /* format: style4 */
  6    13 
  6    14 dcl  (
  6    15      SL_TYPE_CRASH init (-3),				/* type message with banner & kill system */
  6    16      SL_TYPE_BEEP init (-2),				/* type message with banner */
  6    17      SL_TYPE init (-1),				/* type message */
  6    18      SL_LOG_SILENT init (0),				/* log message */
  6    19      SL_LOG init (1),				/* log & type message */
  6    20      SL_LOG_BEEP init (2),				/* log & type message with banner */
  6    21      SL_LOG_CRASH init (3)				/* log & type message with banner & kill system */
  6    22      ) fixed bin internal static options (constant);
  6    23 
  6    24 dcl  1 sl_info aligned automatic,
  6    25        2 version char(8),			/* structure version       */
  6    26        2 arg_list_ptr ptr,			/* arg_list with values    */
  6    27        2 loc,
  6    28          3 (mode, severity, code, caller, data, class, ioa_msg) fixed bin,
  6    29            /* These flags control where the corresponding data item is found.*/
  6    30 	 /*  -1: data appears in the corresponding structure element below */
  6    31 	 /*   0: data is not present anywhere			       */
  6    32 	 /*  +N: data is Nth item in argument list pointed to by 	       */
  6    33 	 /*      sl_info.arg_list_ptr.  Upon return, data copied into      */
  6    34 	 /*      corresponding structure element.		       */
  6    35 	 /*  if data = +N:					       */
  6    36 	 /*      argN is data_ptr, argN+1 is data_len		       */
  6    37 	 /*  if ioa_msg = +N:				       */
  6    38 	 /*      argN+1, ... argLAST are arguments substituted into the    */
  6    39 	 /*      ioa_msg control string.  The formatted msg is returned.   */
  6    40        2 flags,
  6    41          3 ioa_msg_is_error_code bit(1) unal,	/* ioa_ctl is error code.  */
  6    42          3 flags_pad bit(35) unal,
  6    43        2 mode fixed bin,			/* as-mode, command-mode   */
  6    44        2 severity fixed bin,			/* error severity	       */
  6    45        2 code fixed bin(35),			/* error table code        */
  6    46        2 caller char(65) varying,		/* caller refname$entryname*/
  6    47        2 data,				/* binary data ptr/length  */
  6    48          3 data_ptr ptr,
  6    49          3 data_lth fixed bin(21),
  6    50        2 class char(10) varying,		/* binary data class       */
  6    51        2 ioa_msg char(500) varying;		/* formatted message text  */
  6    52 
  6    53 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  6    54 /*							       */
  6    55 /* If data values (eg, sl_info.caller) are passed in the argument list,      */
  6    56 /* their data types should be as shown in the structure above, except that   */
  6    57 /* character strings should be char(*) nonvarying.		       */
  6    58 /*							       */
  6    59 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  6    60 
  6    61 /* value for sl_info.version */
  6    62 dcl  SL_INFO_version_1 char (8) int static options(constant) init("sl_info1");
  6    63 
  6    64 /* values for sl_info.mode */
  6    65 dcl (SL_INFO_as_mode init(1),
  6    66      SL_INFO_command_mode init(2)) fixed bin int static options(constant);
  6    67 
  6    68 /* values for sl_info.loc.(severity code caller data class ioa_ctl arg) */
  6    69 dcl (SL_INFO_arg_given_in_structure init(-1),
  6    70      SL_INFO_arg_not_given init(0)) fixed bin int static options(constant);
  6    71 
  6    72 
  6    73 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  6    74 /*							       */
  6    75 /* The following static structures are commonly used in the Login Server     */
  6    76 /* user control software.					       */
  6    77 /*							       */
  6    78 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  6    79 
  6    80 /* Syntax: call Abort (severity, code, ioa_ctl, args);		       */
  6    81 
  6    82 dcl  1 sl_info_sev_code_msg		aligned int static options(constant),
  6    83        2 version char(8)		init ("sl_info1"),
  6    84        2 arg_list_ptr ptr		init (null),
  6    85        2 loc,
  6    86          3 (mode			init (-1),
  6    87 	  severity  		init ( 1),
  6    88 	  code 			init ( 2),
  6    89 	  caller 			init (-1),
  6    90 	  data 			init ( 0),
  6    91 	  class 			init ( 0),
  6    92 	  ioa_msg			init ( 3)) fixed bin,
  6    93        2 flags,
  6    94          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  6    95          3 flags_pad bit(35) unal	init ("0"b),
  6    96        2 mode fixed bin		init ( 1),
  6    97        2 severity fixed bin		init ( 0),
  6    98        2 code fixed bin(35)		init ( 0),
  6    99        2 caller char(65) varying	init (""),
  6   100        2 data,
  6   101          3 data_ptr ptr		init (null),
  6   102          3 data_lth fixed bin(21)	init ( 0),
  6   103        2 class char(10) varying	init (""),
  6   104        2 ioa_msg char(500) varying	init ("");
  6   105 
  6   106 /* Syntax: call Abort (severity, ioa_ctl, args);			       */
  6   107 
  6   108 dcl  1 sl_info_sev_msg		aligned int static options(constant),
  6   109        2 version char(8)		init ("sl_info1"),
  6   110        2 arg_list_ptr ptr		init (null),
  6   111        2 loc,
  6   112          3 (mode			init (-1),
  6   113 	  severity  		init ( 1),
  6   114 	  code 			init ( 0),
  6   115 	  caller 			init (-1),
  6   116 	  data 			init ( 0),
  6   117 	  class 			init ( 0),
  6   118 	  ioa_msg			init ( 2)) fixed bin,
  6   119        2 flags,
  6   120          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  6   121          3 flags_pad bit(35) unal	init ("0"b),
  6   122        2 mode fixed bin		init ( 1),
  6   123        2 severity fixed bin		init ( 0),
  6   124        2 code fixed bin(35)		init ( 0),
  6   125        2 caller char(65) varying	init (""),
  6   126        2 data,
  6   127          3 data_ptr ptr		init (null),
  6   128          3 data_lth fixed bin(21)	init ( 0),
  6   129        2 class char(10) varying	init (""),
  6   130        2 ioa_msg char(500) varying	init ("");
  6   131 
  6   132 /* Syntax: call Abort (severity, ioa_ctl_as_error_code, args);	       */
  6   133 
  6   134 dcl  1 sl_info_sev_coded_msg		aligned int static options(constant),
  6   135        2 version char(8)		init ("sl_info1"),
  6   136        2 arg_list_ptr ptr		init (null),
  6   137        2 loc,
  6   138          3 (mode			init (-1),
  6   139 	  severity  		init ( 1),
  6   140 	  code 			init ( 0),
  6   141 	  caller 			init (-1),
  6   142 	  data 			init ( 0),
  6   143 	  class 			init ( 0),
  6   144 	  ioa_msg			init ( 2)) fixed bin,
  6   145        2 flags,
  6   146          3 ioa_msg_is_error_code bit(1) unal init ("1"b),
  6   147          3 flags_pad bit(35) unal	init ("0"b),
  6   148        2 mode fixed bin		init ( 1),
  6   149        2 severity fixed bin		init ( 0),
  6   150        2 code fixed bin(35)		init ( 0),
  6   151        2 caller char(65) varying	init (""),
  6   152        2 data,
  6   153          3 data_ptr ptr		init (null),
  6   154          3 data_lth fixed bin(21)	init ( 0),
  6   155        2 class char(10) varying	init (""),
  6   156        2 ioa_msg char(500) varying	init ("");
  6   157 
  6   158 
  6   159 /* Syntax: call Abort (severity, code, error_return_label, ioa_ctl, args);   */
  6   160 
  6   161 dcl  1 sl_info_sev_code_label_msg	aligned int static options(constant),
  6   162        2 version char(8)		init ("sl_info1"),
  6   163        2 arg_list_ptr ptr		init (null),
  6   164        2 loc,
  6   165          3 (mode			init (-1),
  6   166 	  severity  		init ( 1),
  6   167 	  code 			init ( 2),
  6   168 	  caller 			init (-1),
  6   169 	  data 			init ( 0),
  6   170 	  class 			init ( 0),
  6   171 	  ioa_msg			init ( 4)) fixed bin,
  6   172        2 flags,
  6   173          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  6   174          3 flags_pad bit(35) unal	init ("0"b),
  6   175        2 mode fixed bin		init ( 1),
  6   176        2 severity fixed bin		init ( 0),
  6   177        2 code fixed bin(35)		init ( 0),
  6   178        2 caller char(65) varying	init (""),
  6   179        2 data,
  6   180          3 data_ptr ptr		init (null),
  6   181          3 data_lth fixed bin(21)	init ( 0),
  6   182        2 class char(10) varying	init (""),
  6   183        2 ioa_msg char(500) varying	init ("");
  6   184 
  6   185 /* Syntax:  call Log_error (code, ioa_ctl, args);			       */
  6   186 
  6   187 dcl  1 sl_info_code_msg		aligned int static options(constant),
  6   188        2 version char(8)		init ("sl_info1"),
  6   189        2 arg_list_ptr ptr		init (null),
  6   190        2 loc,
  6   191          3 (mode			init (-1),
  6   192 	  severity  		init (-1),
  6   193 	  code 			init ( 1),
  6   194 	  caller 			init (-1),
  6   195 	  data 			init ( 0),
  6   196 	  class 			init ( 0),
  6   197 	  ioa_msg			init ( 2)) fixed bin,
  6   198        2 flags,
  6   199          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  6   200          3 flags_pad bit(35) unal	init ("0"b),
  6   201        2 mode fixed bin		init ( 1),
  6   202        2 severity fixed bin		init ( 0),
  6   203        2 code fixed bin(35)		init ( 0),
  6   204        2 caller char(65) varying	init (""),
  6   205        2 data,
  6   206          3 data_ptr ptr		init (null),
  6   207          3 data_lth fixed bin(21)	init ( 0),
  6   208        2 class char(10) varying	init (""),
  6   209        2 ioa_msg char(500) varying	init ("");
  6   210 
  6   211 
  6   212 /* Syntax:  call Trace (ioa_ctl, args);				       */
  6   213 
  6   214 dcl  1 sl_info_msg			aligned int static options(constant),
  6   215        2 version char(8)		init ("sl_info1"),
  6   216        2 arg_list_ptr ptr		init (null),
  6   217        2 loc,
  6   218          3 (mode			init (-1),
  6   219 	  severity  		init (-1),
  6   220 	  code 			init ( 0),
  6   221 	  caller 			init (-1),
  6   222 	  data 			init ( 0),
  6   223 	  class 			init ( 0),
  6   224 	  ioa_msg			init ( 1)) fixed bin,
  6   225        2 flags,
  6   226          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  6   227          3 flags_pad bit(35) unal	init ("0"b),
  6   228        2 mode fixed bin		init ( 1),
  6   229        2 severity fixed bin		init ( 0),
  6   230        2 code fixed bin(35)		init ( 0),
  6   231        2 caller char(65) varying	init (""),
  6   232        2 data,
  6   233          3 data_ptr ptr		init (null),
  6   234          3 data_lth fixed bin(21)	init ( 0),
  6   235        2 class char(10) varying	init (""),
  6   236        2 ioa_msg char(500) varying	init ("");
  6   237 
  6   238 /* END INCLUDE FILE sys_log_constants.incl.pl1 */
      175 
      176 
  7     1 /* BEGIN INCLUDE FILE syserr_constants.incl.pl1 ... 11/11/80 W. Olin Sibert */
  7     2 /* 85-02-12, EJ Sharpe - Added sorting class constants, removed AIM_MESSAGE, added new action code names. */
  7     3 /* 85-04-24, G. Palter - Renamed SYSERR_UNUSED_10 to SYSERR_RING1_ERROR to reflect its actual use. */
  7     4 
  7     5 /* This include file has an ALM version.  Keep 'em in sync! */
  7     6 
  7     7 dcl (
  7     8 
  7     9 /* The following constants define the message action codes.  This indicates
  7    10*how a message is to be handled.  */
  7    11 
  7    12      SYSERR_CRASH_SYSTEM	init (1),			
  7    13      CRASH		init (1), 		/* Crash the system, and bleat plaintively. */
  7    14 
  7    15      SYSERR_TERMINATE_PROCESS	init (2),
  7    16      TERMINATE_PROCESS	init (2), 		/* Terminate the process, print the message, and beep. */
  7    17 
  7    18      SYSERR_PRINT_WITH_ALARM	init (3),
  7    19      BEEP 		init (3), 		/* Beep and print the message on the console. */
  7    20 
  7    21      SYSERR_PRINT_ON_CONSOLE	init (0),
  7    22      ANNOUNCE		init (0), 		/* Just print the message on the console. */
  7    23 
  7    24      SYSERR_LOG_OR_PRINT	init (4),
  7    25      LOG			init (4), 		/* Log the message, or print it if it can't be logged */
  7    26 
  7    27      SYSERR_LOG_OR_DISCARD	init (5),
  7    28      JUST_LOG		init (5), 		/* Just try to log the message, and discard it if it can't be */
  7    29 
  7    30 
  7    31 /* The following constants are added to the normal severities to indicate
  7    32*different sorting classes of messages.  */
  7    33 
  7    34      SYSERR_SYSTEM_ERROR	init (00),		/* indicates a standard level system error */
  7    35      SYSERR_RING1_ERROR	init (10),		/* indicates an error detected in ring 1 (mseg_, RCP) */
  7    36      SYSERR_COVERT_CHANNEL	init (20),		/* indicates covert channel audit trail message */
  7    37      SYSERR_UNSUCCESSFUL_ACCESS init (30),		/* indicates access denial audit trail message */
  7    38      SYSERR_SUCCESSFUL_ACCESS	init (40)			/* indicates access grant audit trail message */
  7    39 	) fixed bin internal static options (constant);
  7    40 
  7    41 /* END INCLUDE FILE syserr_constants.incl.pl1 */
      177 
      178 
      179      end sc_admin_mode_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0809.1  sc_admin_mode_.pl1                >spec>install>1112>sc_admin_mode_.pl1
164          1    05/23/83  0916.6  iox_entries.incl.pl1              >ldd>include>iox_dcls.incl.pl1
166          2    03/15/85  0953.1  pnt_entry.incl.pl1                >ldd>include>pnt_entry.incl.pl1
169          3    08/06/87  0913.5  sc_subsystem_info_.incl.pl1       >ldd>include>sc_subsystem_info_.incl.pl1
171          4    08/06/87  0913.5  sc_stat_.incl.pl1                 >ldd>include>sc_stat_.incl.pl1
173          5    01/21/85  0912.3  special_person_names.incl.pl1     >ldd>include>special_person_names.incl.pl1
175          6    08/06/87  0913.5  sys_log_constants.incl.pl1        >ldd>include>sys_log_constants.incl.pl1
177          7    05/17/85  0615.7  syserr_constants.incl.pl1         >ldd>include>syserr_constants.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LOG                             000000 constant        fixed bin(17,0)          initial dcl 7-7 set ref 78*
OPERATOR_ADMIN_MODE_USER_NAME   000001 constant        char(32)                 initial packed unaligned dcl 5-12 set ref 75*
PNTE                            000154 automatic       structure                level 1 dcl 167 set ref 75 75
SL_LOG_SILENT                   000030 constant        fixed bin(17,0)          initial dcl 6-14 set ref 91*
access_control_name      34            based           char(32)                 level 2 packed packed unaligned dcl 3-23 set ref 106
                                                                                  110* 153*
addr                                                   builtin function         dcl 60 ref 75 75
any_other                       000124 stack reference condition                dcl 62 ref 101 132 137
cleanup                         000132 stack reference condition                dcl 63 ref 108
code                            000100 automatic       fixed bin(35,0)          dcl 53 set ref 75* 76 78* 82*
cu_$arg_list_ptr                000010 constant        entry                    external dcl 31 ref 147 147
cu_$generate_call               000014 constant        entry                    external dcl 33 ref 147
cu_$get_cl_intermediary         000012 constant        entry                    external dcl 32 ref 97
cu_$reset_command_processor     000016 constant        entry                    external dcl 34 ref 160
cu_$set_cl_intermediary         000020 constant        entry                    external dcl 35 ref 113 156
default_cl_intermediary         000102 automatic       entry variable           dcl 54 set ref 97* 147* 156*
default_error_handler_$wall     000022 constant        entry                    external dcl 36 ref 101
finish                          000140 stack reference condition                dcl 64 ref 100
flags                    40     000154 automatic       structure                level 3 dcl 167
get_group_id_                   000024 constant        entry                    external dcl 37 ref 110
has_password             40     000154 automatic       bit(1)                   level 4 packed packed unaligned dcl 167 set ref 85
hcs_$fs_search_set_wdir         000026 constant        entry                    external dcl 38 ref 159
hphcs_$syserr_error_code        000030 constant        entry                    external dcl 39 ref 78
ioa_                            000032 constant        entry                    external dcl 40 ref 129
iox_$control                    000064 constant        entry                    external dcl 1-8 ref 116 155
iox_$user_io                    000066 external static pointer                  dcl 1-41 set ref 116* 155*
listen_                         000034 constant        entry                    external dcl 41 ref 119
null                                                   builtin function         dcl 60 ref 116 116 155 155
password                  2     000154 automatic       char(32)                 level 3 dcl 167 set ref 89
pnt_entry                              based           structure                level 1 dcl 2-22
pnt_manager_$priv_get_entry     000036 constant        entry                    external dcl 42 ref 75
private                   1     000154 automatic       structure                level 2 dcl 167
public                   22     000154 automatic       structure                level 2 dcl 167
read_password_                  000040 constant        entry                    external dcl 43 ref 88
remask_count                    000106 automatic       fixed bin(17,0)          dcl 55 set ref 104* 117* 154*
saved_access_name               000107 automatic       char(32)                 packed unaligned dcl 56 set ref 106* 153
sc_ipc_mask_$remask             000044 constant        entry                    external dcl 45 ref 154
sc_ipc_mask_$unmask             000042 constant        entry                    external dcl 44 ref 117
sc_signal_io_handler_           000046 constant        entry                    external dcl 46 ref 102 146
sc_stat_$admin_listener_exit_label
                                000072 external static label variable           dcl 4-34 set ref 114* 126 158*
sc_stat_$admin_listener_switch  000076 external static bit(1)                   dcl 4-62 set ref 72 115* 126 157*
sc_stat_$admin_sci_ptr          000074 external static pointer                  dcl 4-45 ref 70
sc_stat_$sysdir                 000070 external static char(168)                packed unaligned dcl 4-21 set ref 159*
sc_stat_$test_mode              000100 external static bit(1)                   dcl 4-62 ref 78
sc_subsystem_info                      based           structure                level 1 dcl 3-23
sc_subsystem_info_ptr           000274 automatic       pointer                  dcl 3-22 set ref 98* 106 110 153
sci_ptr                         000120 automatic       pointer                  dcl 57 set ref 70* 72* 82* 92* 98* 140*
scramble_                       000050 constant        entry                    external dcl 47 ref 89
signal_io_                      000146 stack reference condition                dcl 65 ref 102 146
ssu_$abort_line                 000052 constant        entry                    external dcl 48 ref 72 92 140
ssu_$get_info_ptr               000054 constant        entry                    external dcl 49 ref 98
ssu_$null_label                 000062 external static label variable           dcl 67 ref 158
ssu_$print_message              000056 constant        entry                    external dcl 50 ref 82
sys_log_                        000060 constant        entry                    external dcl 51 ref 91
w_password                      000122 automatic       char(8)                  packed unaligned dcl 58 set ref 88* 89*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ANNOUNCE                               internal static fixed bin(17,0)          initial dcl 7-7
BEEP                                   internal static fixed bin(17,0)          initial dcl 7-7
CRASH                                  internal static fixed bin(17,0)          initial dcl 7-7
JUST_LOG                               internal static fixed bin(17,0)          initial dcl 7-7
PNT_ENTRY_VERSION_2                    internal static fixed bin(17,0)          initial dcl 2-64
SL_INFO_arg_given_in_structure         internal static fixed bin(17,0)          initial dcl 6-69
SL_INFO_arg_not_given                  internal static fixed bin(17,0)          initial dcl 6-69
SL_INFO_as_mode                        internal static fixed bin(17,0)          initial dcl 6-65
SL_INFO_command_mode                   internal static fixed bin(17,0)          initial dcl 6-65
SL_INFO_version_1                      internal static char(8)                  initial packed unaligned dcl 6-62
SL_LOG                                 internal static fixed bin(17,0)          initial dcl 6-14
SL_LOG_BEEP                            internal static fixed bin(17,0)          initial dcl 6-14
SL_LOG_CRASH                           internal static fixed bin(17,0)          initial dcl 6-14
SL_TYPE                                internal static fixed bin(17,0)          initial dcl 6-14
SL_TYPE_BEEP                           internal static fixed bin(17,0)          initial dcl 6-14
SL_TYPE_CRASH                          internal static fixed bin(17,0)          initial dcl 6-14
SPECIAL_USER_NAME_ARRAY                internal static structure                array level 1 dcl 5-14
SYSERR_COVERT_CHANNEL                  internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_CRASH_SYSTEM                    internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_LOG_OR_DISCARD                  internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_LOG_OR_PRINT                    internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_PRINT_ON_CONSOLE                internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_PRINT_WITH_ALARM                internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_RING1_ERROR                     internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_SUCCESSFUL_ACCESS               internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_SYSTEM_ERROR                    internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_TERMINATE_PROCESS               internal static fixed bin(17,0)          initial dcl 7-7
SYSERR_UNSUCCESSFUL_ACCESS             internal static fixed bin(17,0)          initial dcl 7-7
TERMINATE_PROCESS                      internal static fixed bin(17,0)          initial dcl 7-7
iox_$attach_loud                000000 constant        entry                    external dcl 1-8
iox_$attach_name                000000 constant        entry                    external dcl 1-8
iox_$attach_ptr                 000000 constant        entry                    external dcl 1-8
iox_$close                      000000 constant        entry                    external dcl 1-8
iox_$close_file                 000000 constant        entry                    external dcl 1-8
iox_$delete_record              000000 constant        entry                    external dcl 1-8
iox_$destroy_iocb               000000 constant        entry                    external dcl 1-8
iox_$detach                     000000 constant        entry                    external dcl 1-8
iox_$detach_iocb                000000 constant        entry                    external dcl 1-8
iox_$err_no_operation           000000 constant        entry                    external dcl 1-8
iox_$err_not_attached           000000 constant        entry                    external dcl 1-8
iox_$err_not_closed             000000 constant        entry                    external dcl 1-8
iox_$err_not_open               000000 constant        entry                    external dcl 1-8
iox_$error_output                      external static pointer                  dcl 1-41
iox_$find_iocb                  000000 constant        entry                    external dcl 1-8
iox_$find_iocb_n                000000 constant        entry                    external dcl 1-8
iox_$get_chars                  000000 constant        entry                    external dcl 1-8
iox_$get_line                   000000 constant        entry                    external dcl 1-8
iox_$look_iocb                  000000 constant        entry                    external dcl 1-8
iox_$modes                      000000 constant        entry                    external dcl 1-8
iox_$move_attach                000000 constant        entry                    external dcl 1-8
iox_$open                       000000 constant        entry                    external dcl 1-8
iox_$open_file                  000000 constant        entry                    external dcl 1-8
iox_$position                   000000 constant        entry                    external dcl 1-8
iox_$propagate                  000000 constant        entry                    external dcl 1-8
iox_$put_chars                  000000 constant        entry                    external dcl 1-8
iox_$read_key                   000000 constant        entry                    external dcl 1-8
iox_$read_length                000000 constant        entry                    external dcl 1-8
iox_$read_record                000000 constant        entry                    external dcl 1-8
iox_$rewrite_record             000000 constant        entry                    external dcl 1-8
iox_$seek_key                   000000 constant        entry                    external dcl 1-8
iox_$user_input                        external static pointer                  dcl 1-41
iox_$user_output                       external static pointer                  dcl 1-41
iox_$write_record               000000 constant        entry                    external dcl 1-8
pntep                                  automatic       pointer                  dcl 2-21
sc_request_flags                       based           structure                level 1 packed packed unaligned dcl 3-55
sc_rf_ptr                              automatic       pointer                  dcl 3-54
sc_ss_area                             based           area(1024)               dcl 3-50
sc_stat_$Go                            external static bit(1)                   dcl 4-62
sc_stat_$Go_typed                      external static bit(1)                   dcl 4-62
sc_stat_$Multics                       external static bit(1)                   dcl 4-62
sc_stat_$Multics_typed                 external static bit(1)                   dcl 4-62
sc_stat_$Star_typed                    external static bit(1)                   dcl 4-62
sc_stat_$admin_log_iocb                external static pointer                  dcl 4-45
sc_stat_$admin_log_write_ptr           external static pointer                  dcl 4-45
sc_stat_$as_log_write_ptr              external static pointer                  dcl 4-45
sc_stat_$did_part1                     external static bit(1)                   dcl 4-62
sc_stat_$did_part2                     external static bit(1)                   dcl 4-62
sc_stat_$did_part3                     external static bit(1)                   dcl 4-62
sc_stat_$exec_access_name              external static char(32)                 packed unaligned dcl 4-15
sc_stat_$info_dir                      external static char(168)                packed unaligned dcl 4-21
sc_stat_$initzer_ttyp                  external static pointer                  dcl 4-45
sc_stat_$log_dir                       external static char(168)                packed unaligned dcl 4-21
sc_stat_$master_abort_label            external static label variable           dcl 4-34
sc_stat_$master_channel                external static char(6)                  dcl 4-29
sc_stat_$master_iocb                   external static pointer                  dcl 4-45
sc_stat_$master_sci_ptr                external static pointer                  dcl 4-45
sc_stat_$mc_acs_dir                    external static char(168)                packed unaligned dcl 4-21
sc_stat_$mc_ansp                       external static pointer                  dcl 4-45
sc_stat_$mc_iocb                       external static pointer                  dcl 4-45
sc_stat_$mc_is_on                      external static bit(1)                   dcl 4-62
sc_stat_$no_operator_login             external static bit(1)                   dcl 4-62
sc_stat_$shutdown_typed                external static bit(1)                   dcl 4-62
sc_stat_$sv1_iocb                      external static pointer                  dcl 4-45
sc_stat_$sv2_iocb                      external static pointer                  dcl 4-45
sc_stat_$sv3_iocb                      external static pointer                  dcl 4-45
sc_stat_$system_shutdown_label         external static label variable           dcl 4-34
sc_stat_$unidentified_access_name      external static char(32)                 packed unaligned dcl 4-15
sc_stat_$vchn_requires_accept          external static bit(1)                   dcl 4-62
sl_info                                automatic       structure                level 1 dcl 6-24
sl_info_code_msg                       internal static structure                level 1 dcl 6-187
sl_info_msg                            internal static structure                level 1 dcl 6-214
sl_info_sev_code_label_msg             internal static structure                level 1 dcl 6-161
sl_info_sev_code_msg                   internal static structure                level 1 dcl 6-82
sl_info_sev_coded_msg                  internal static structure                level 1 dcl 6-134
sl_info_sev_msg                        internal static structure                level 1 dcl 6-108

NAMES DECLARED BY EXPLICIT CONTEXT.
ADMIN_CL_INTERMEDIARY           001013 constant        entry                    internal dcl 143 ref 113 113
FINISH_SIGNALLED                000757 constant        label                    dcl 137 ref 100
RETURN                          000751 constant        label                    dcl 132 set ref 114 120
admin_mode_exit                 000721 constant        entry                    external dcl 122
ame                             000712 constant        entry                    external dcl 122
clean                           001064 constant        entry                    internal dcl 151 ref 108 134 139
sc_admin_mode_                  000203 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1656        1760    1202        1666
Length      2356    1202       102         361     453           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sc_admin_mode_                      237 external procedure  is an external procedure.  
on unit on line 100                  64 on unit               
on unit on line 101                  64 on unit               
on unit on line 102                  64 on unit               
on unit on line 108                  64 on unit               
ADMIN_CL_INTERMEDIARY                82 internal procedure  is assigned to an entry variable, and enables or reverts conditions.  
on unit on line 146                  64 on unit               
clean                                90 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sc_admin_mode_           000100 code                        sc_admin_mode_
                         000102 default_cl_intermediary     sc_admin_mode_
                         000106 remask_count                sc_admin_mode_
                         000107 saved_access_name           sc_admin_mode_
                         000120 sci_ptr                     sc_admin_mode_
                         000122 w_password                  sc_admin_mode_
                         000154 PNTE                        sc_admin_mode_
                         000274 sc_subsystem_info_ptr       sc_admin_mode_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac
tra_ext_1           tra_ext_2           enable_op           ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_list_ptr              cu_$generate_call             cu_$get_cl_intermediary       cu_$reset_command_processor
cu_$set_cl_intermediary       default_error_handler_$wall   get_group_id_                 hcs_$fs_search_set_wdir
hphcs_$syserr_error_code      ioa_                          iox_$control                  listen_
pnt_manager_$priv_get_entry   read_password_                sc_ipc_mask_$remask           sc_ipc_mask_$unmask
sc_signal_io_handler_         scramble_                     ssu_$abort_line               ssu_$get_info_ptr
ssu_$print_message            sys_log_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$user_io                  sc_stat_$admin_listener_exit_label
sc_stat_$admin_listener_switch                              sc_stat_$admin_sci_ptr        sc_stat_$sysdir
sc_stat_$test_mode            ssu_$null_label




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000202        70 000210        72 000213        75 000242        76 000265        78 000267        82 000315
     84 000341        85 000342        88 000346        89 000365        91 000403        92 000423        97 000453
     98 000462       100 000473       101 000512       102 000533       104 000554       106 000555       108 000561
    110 000603       113 000613       114 000625       115 000632       116 000634       117 000667       119 000676
    120 000710       122 000711       126 000726       129 000734       130 000750       132 000751       134 000752
    135 000756       137 000757       139 000760       140 000764       179 001011       143 001012       146 001020
    147 001041       148 001062       151 001063       153 001071       154 001076       155 001104       156 001137
    157 001147       158 001151       159 001157       160 001174       161 001201


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
