ASSEMBLY LISTING OF SEGMENT >spec>install>1110>fim.alm                                                                                                                                              
ASSEMBLED ON:	11/11/89  0952.5 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " HISTORY COMMENTS:
                                    13  "  1) change(85-11-27,Herbst), approve(87-07-20,MCR7697),
                                    14  "     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1055):
                                    15  "     Added system_message_ IPS signal.
                                    16  "                                                      END HISTORY COMMENTS
                                    17  
                                    18  
                                    19  "
                                    20  " FIM - Multics Fault Intercept Module.
                                    21  "
                                    22  "	Modification record: (Date and Reason)
                                    23  "	85-03-20 by E.D. Schroth (UNCA) to clear exp under/overflow
                                    24  "		indicators when restarting
                                    25  "	84-12-03 by EJ Sharpe for new security auditing
                                    26  "         08/22/84 by R. Michael Tague: Removed dm_shutdown_warning_ and
                                    27  "	    dm_user_shutdown_ from table of signals.  Added
                                    28  "	    system_shutdown_scheduled_ and dm_shutdown_scheduled_.
                                    29  "	07/16/84 by R. Michael Tague: Added dm_shutdown_warning_ and
                                    30  "		  dm_user_shutdown_ signals to the table of signals.
                                    31  "	December 1983 by Keith Loepere for hardcore breakpoint support
                                    32  "	831206 by E. N. Kittlitz for hex overflow support
                                    33  "	10 October 1983 by R. Coppola to meter faults and cache errors
                                    34  "	on a per-cpu basis.
                                    35  "	19 September 1983 by E. N. Kittlitz to set rfi+if for all overflows
                                    36  "	August 1983 by Keith Loepere for minor fix to null pointer fault
                                    37  "	13 October 1982 (Wednesday, this month) by E. N. Kittlitz for instruction size
                                    38  "	06 October 1982 by BIM to check for signal_entry fault
                                    39  "	in fim, running fim in collection 1.
                                    40  "	24 March 1983 by J. A. Bush for 16/32K cache parity data capture
                                    41  "	6 April 1983 by E. N. Kittlitz DRL in ring 0 causes crash.
                                    42  "	sometime by BIM for bootload multics.
                                    43  "	17 July 1981 by M. Weaver for undefined_pointer
                                    44  "	04 June 81 by J. A. Bush to fix some unreported bugs
                                    45  "	3 April 81 by Benson I. Margulies for null_pointer
                                    46  "	17 Jan 81 by J. Bongiovanni for fault_counters
                                    47  "	27 August 80 by J. A. Bush for the DPS8/70M
                                    48  "	25 march 80 by J. A. Bush to fix negative exp. overflow bug
                                    49  "	15 Jan 80 by J. A. Bush for cache parity error data capture
                                    50  "	24 July 79 by J. A. Bush for new signal_entry and to merge fim_table  back in.
                                    51  "	1 Feb 79 by D. Spector for new scs format for 8-cpu cioc
                                    52  "	2/8/76 by Noel I. Morris for new reconfig
                                    53  "	10/14/75 by R. Bratt for prelinking
                                    54  "	6/20/75 by S.Webber for static handlers
                                    55  "	3/75 by S. Webber for new restarting conventions and returning
                                    56  "		history registers to users.
                                    57  "	5/29/74 by M. Weaver to special case out of bounds on stack
                                    58  "	11/1/73 by Steve Webber to allow truncation (stringsize) faults to be restarted
                                    59  "	10/15/73 by Steve Webber to correct some illegal procedure "fanout" mapping problems.
                                    60  "	07/21/71 by Richard H. Gumpertz to use prds_link to get prds segment number
                                    61  "	5/30/70		- Noel I. Morris
                                    62  
                                    63  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    64  "
                                    65  " FIM is transferred to as the result of a fault. The control
                                    66  " unit data has been stored either in pds$fim_data or pds$signal_data.
                                    67  "
                                    68  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    69  
                                    70  
    000000                          71  	name	fim
    000000                          72  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                                    73  
                                    74  
                                    75  " 
                                    76  
                        000010      77  	link	prds_link,prds$+0
                                    78  
                                    79  
                                    80  
                        760000      81  	bool	lprp_insts,760000
                        400000      82  	bool	minus_128,400000
                        002000      83  	bool	dp_opcode,2000
                        000400      84  	bool	inst_bit27_on,400
                        777400      85  	bool	op_code_mask,777400
                        470000      86  	bool	fstr_inst,470000
                        472000      87  	bool	dfstr_inst,472000
                        000040      88  	bool	cu_hreg,40
                        000140      89  	bool	apu_hreg,140
                        400000      90  	bool	access_audit_flag,400000	" indicates in fault_table that fault is auditable
                                    91  
                                    92  	tempd	v_temp		temporary for virtual time computation
                                    93  	tempd	v_delta		temporary to remember virtual_delta
                                    94  	tempd	pad(2)
                                    95  	temp8	mach_cond(6)	machine conditions
                                    96  	temp8	history_registers(16)
                                    97  	tempd	mc_ptr		pointer to machine conditions
                                    98  	tempd	call_ptr		pointer to fault handling routine
                                    99  	tempd	arglist(4)	argument list
                                   100  	temp	fcode		fault code
                                   101  	temp	temp(3)		temporary cells
                                   102  
                                   103  " 
                                   104  
                                   105  " ACCESS_VIOLATION_ENTRY - Handle Access Violation Faults.
                                   106  
                        000000     107  	segdef	access_violation_entry
                                   108  
                                   109  	even
    000000                         110  access_violation_entry:
    000000  0a   001242 2542 20    111  	spri	prs,*			save prs
    000001  0a   001242 3522 20    112  	eppbp	prs,*			bp -> machine conditions
    000002  aa  2 00020 7533 00    113  	sreg	bp|mc.regs		save registers
    000003  0a   001240 3702 20    114  	epplp	lp,*			set lp value
    000004  aa  2 00050 4477 00    115  	spl	bp|mc.eis_info		save eis ptrs and lengths
    000005  4a  4 00036 7003 20    116  	tsx0	fim_util$fim_v_time_init	remember accrued virtual time
    000006  4a  4 00040 7003 20    117  	tsx0	fim_util$check_fault  is it OK to take this fault?
                                   118  
    000007  0a   000007 2132 00    119  	epaq	*		get our segment number
    000010  aa  2 00030 6753 00    120  	era	bp|mc.scu.ppr.psr_word  compare against procedure segment register
    000011  aa   077777 3752 03    121  	ana	scu.ppr.psr_mask,du	were we in the fim?
    000012  0a   001206 6002 00    122  	tze	die_die_die_	suicide
                                   123  
    000013  0a   000413 7102 00    124  	tra	fault_join
                                   125  " 
                                   126  " ONC_START_SHUT_ENTRY - entry to handle op-not-complete, startup and shutdown faults
                                   127  
                        000014     128  	segdef	onc_start_shut_entry
                                   129  
                                   130  	even
    000014                         131  onc_start_shut_entry:
    000014  0a   001242 2542 20    132  	spri	prs,*			save prs
    000015  0a   001242 3522 20    133  	eppbp	prs,*			bp -> machine conditions
    000016  aa  2 00020 7533 00    134  	sreg	bp|mc.regs		save registers
    000017  0a   001240 3702 20    135  	epplp	lp,*			set lp value
    000020  aa  2 00050 4477 00    136  	spl	bp|mc.eis_info		save eis ptrs and lengths
    000021  0a   001320 4676 00    137  	lpl	eight_angry_zeros		try to condition EIS box
    000022  4a  4 00036 7003 20    138  	tsx0	fim_util$fim_v_time_init	remember accrued virtual time
                                   139  
    000023  4a  4 00040 7003 20    140  	tsx0	fim_util$check_fault  	kill Multics if not legal fault
    000024  4a  4 00042 3537 20    141  	eppbb	pds$history_reg_data  	bb -> place to store history regs 
    000025  4a  4 00044 7003 20    142  	tsx0	fim_util$check_mct		go save M.C.'s an hregs if required
    000026  4a  4 00046 7003 20    143  	tsx0	fim_util$force_hist_regs	(ret ic +1) force save hregs in pds 
    000027  0a   000416 7102 00    144  	tra	onc_par_join		go join common code
                                   145  "
                                   146  " drl_entry - entry to handle derail faults, special case of signal_entry.
                                   147  
                        000030     148  	segdef	drl_entry
                                   149  
                                   150  	even
    000030                         151  drl_entry:
    000030  0a   001246 2542 20    152  	spri	sig_prs,*		save prs
    000031  0a   001246 3522 20    153  	eppbp	sig_prs,*		bp -> machine conditions
    000032  aa  2 00020 7533 00    154  	sreg	bp|mc.regs	save registers
    000033  0a   001240 3702 20    155  	epplp	lp,*		set lp value
    000034  aa  2 00050 4477 00    156  	spl	bp|mc.eis_info	what the hell...
    000035  aa  2 00030 2363 00    157  	ldq	bp|mc.scu.ppr.prr_word check whether running in ring-0
    000036  aa   700000 3162 03    158  	canq	scu.ppr.prr_mask,du	ring number in ppr
    000037  0a   000305 6012 00    159  	tnz	drl_join		not ring 0
                                   160  
    000040  4a  4 00050 4503 20    161  	stz	scs$drl_message_pointer assume the worst
    000041  aa  2 00034 2353 00    162  	lda	bp|mc.scu.ilc_word
    000042  aa   000000 3536 01    163  	eppbb	0,au		offset of DRL 
    000043  aa  2 00030 2353 00    164  	lda	bp|mc.scu.ppr.psr_word
    000044  aa   077777 3752 03    165  	ana	scu.ppr.psr_mask,du
    000045  aa   000000 3126 01    166  	easpbb	0,au		segno of DRL
    000046  aa  3 00000 2353 00    167  	lda	bb|0		get the DRL instruction
    000047  aa   777777 3752 03    168  	ana	=o777777,du
    000050  0a   000055 6002 00    169  	tze	drl_die		no operand
    000051  aa   777777 1152 03    170  	cmpa	=o777777,du
    000052  0a   000056 6002 00    171  	tze	breakpoint	drl -1 => breakpoint
                                   172  
    000053  aa   000000 3136 01    173  	eawpbb	0,au		operand of DRL instruction
    000054  4a  4 00050 5433 20    174  	sprpbb	scs$drl_message_pointer
    000055  4a  4 00052 7103 20    175  drl_die:	tra	fim_util$drl_fault_trouble punt ye system
                                   176  "
                                   177  " Handle a hardcore breakpoint - call bce
                                   178  
    000056                         179  breakpoint:
    000056  4a  4 00054 3503 20    180  	eppap	flagbox$
    000057  aa   010000 2352 03    181  	lda	fgbx.breakpoint,du
    000060  aa  0 00043 2553 00    182  	orsa	ap|fgbx.rtb
                                   183  
    000061  4a  4 00056 3503 20    184  	eppap	breakpoint_page$		place so bce can find
    000062  4a  4 00060 7003 20    185  	tsx0	fim_util$copy_mc
    000063  aa  2 00060 4523 06    186  	scpr	bp|bkpt_page.mode_reg,06
    000064  aa  2 00062 1543 00    187  	sdbr	bp|bkpt_page.dbr
    000065  aa  2 00064 5503 00    188  	sbar	bp|bkpt_page.bar
                                   189  
    000066  4a  4 00062 7003 20    190  	tsx0	fim_util$reset_mode_reg
                                   191  
    000067  aa   000001 2352 03    192  	lda	1,du			make so simple bce go works
    000070  aa  2 00034 0353 00    193  	adla	bp|mc.scu.ilc_word
    000071  aa  2 00034 7553 00    194  	sta	bp|mc.scu.ilc_word
    000072  aa   000400 2352 07    195  	lda	scu.cu.rfi,dl		refetch instruction
    000073  aa  2 00035 7553 00    196  	sta	bp|mc.scu.cu_stat_word
                                   197  
    000074  4a  4 00064 3737 20    198  	eppsb	pds$stack_0_ptr,*
    000075  0a   001252 2272 00    199  	ldx7	push
    000076  4a  4 00066 7003 20    200  	tsx0	fim_util$push_stack		prepare for pmut call
                                   201  
    000077  aa  6 00000 2543 00    202  	call	pmut$bce_and_return
    000100  0a   002204 3502 00
    000101  4a  4 00012 3523 20
    000102  aa  6 00040 7533 00
    000103  aa  7 00036 6703 20
    000104  aa  6 00000 1733 00
    000105  aa  6 00040 0733 00
                                   203  
    000106  4a  4 00054 3503 20    204  	eppap	flagbox$
    000107  aa   010000 3352 03    205  	lca	fgbx.breakpoint,du
    000110  aa   000001 1752 07    206  	sba	1,dl		make sure bit off
    000111  aa  0 00043 3553 00    207  	ansa	ap|fgbx.rtb
                                   208  
    000112  0a   001242 3502 20    209  	eppap	prs,*		ap -> wired-down m.c.
    000113  aa  0 00100 1007 00    210  	mlr	(pr),(pr)
    000114  aa   200030 000040     211  	desc9a	bp|mc.scu,8*4
    000115  aa   000030 000040     212  	desc9a	ap|mc.scu,8*4
                                   213  
    000116  aa  7 00024 6523 00    214  	sprisp	sb|stack_header.stack_end_ptr	pop frame
                                   215  
    000117  4a  4 00056 3523 20    216  	eppbp	breakpoint_page$		return to break
    000120  aa  2 00050 4677 00    217  	lpl	bp|mc.eis_info
    000121  aa  2 00020 0733 00    218  	lreg	bp|mc.regs
    000122  aa  2 00000 1733 00    219  	lpri	bp|mc.prs
    000123  0a   001244 6132 20    220  	rcu	scu,*		return to breakpoint
                                   221  "
                                   222  " parity_entry - entry to handle parity faults
                                   223  
                        000124     224  	segdef	parity_entry
                                   225  	even
    000124                         226  parity_entry:
    000124  0a   001254 6742 02    227  	lcpr	cache_off,02		turn cache off in case this is cache parity
    000125  0a   001242 2542 20    228  	spri	prs,*			save prs
    000126  0a   001242 3522 20    229  	eppbp	prs,*			bp -> machine conditions
    000127  aa  2 00020 7533 00    230  	sreg	bp|mc.regs		save registers
    000130  0a   001240 3702 20    231  	epplp	lp,*			set lp value
    000131  aa  2 00050 4477 00    232  	spl	bp|mc.eis_info		save eis ptrs and lengths
    000132  4a  4 00036 7003 20    233  	tsx0	fim_util$fim_v_time_init	remember accrued virtual time
    000133  4a  4 00042 3537 20    234  	eppbb	pds$history_reg_data	bb -> place to store history regs 
    000134  4a  4 00044 7003 20    235  	tsx0	fim_util$check_mct		go save M. C.'s and hregs if required
    000135  4a  4 00046 7003 20    236  	tsx0	fim_util$force_hist_regs	(ret ic +1) force save hregs in pds
    000136  aa  2 00045 2353 00    237  	lda	bp|mc.fault_reg		load fault reg
    000137  aa   000014 3152 07    238  	cana	12,dl			is it cache store or cache dir parity?
    000140  0a   000143 6012 00    239  	tnz	csd_par			xfer if yes
    000141  4a  4 00040 7003 20    240  	tsx0	fim_util$check_fault	no, kill Multics if parity in hardcore etc.
    000142  0a   000416 7102 00    241  	tra	onc_par_join		and join common code
                                   242  
    000143  4a  4 00070 4503 20    243  csd_par:	stz	pds$cpar_info		initialize cache parity info structure
    000144  aa   000004 3152 07    244  	cana	4,dl			is it cache store parity?
    000145  0a   000151 6012 00    245  	tnz	cstr_par			xfer if yes
    000146  4a  4 00040 7003 20    246  	tsx0	fim_util$check_fault	no cache dir parity
    000147  0a   001034 7002 00    247  	tsx0	save_cache		go save cache enable bits
    000150  0a   000416 7102 00    248  	tra	onc_par_join		and join common code
                                   249  
    000151  aa  2 00032 2353 00    250  cstr_par:	lda	bp|mc.scu.cpu_no_word	Get the cpu number in A
    000152  aa   000700 3752 07    251  	ana	scu.cpu_no_mask,dl
    000153  aa   000006 7712 00    252  	arl	scu.cpu_shift		right justify in AL
    000154  4a  4 00072 2213 20    253  	ldx1	scs$processor_data,al	Get cache size
    000155  aa   000007 3612 03    254  	anx1	7,du			in X1
    000156  aa   777777 6212 11    255  	eax1	-1,1			can't have 0 size at this point
    000157  4a  4 00074 2133 20    256  	epaq	fim_abs_seg$		get ptr to abs seg
    000160  aa   000001 7352 00    257  	als	1			multiply by 2
    000161  aa   000000 6272 01    258  	eax7	0,au			copy segno to x7
    000162  4a  4 00074 3503 20    259  	eppap	fim_abs_seg$		set ap with abs_seg ptr
    000163  aa   000036 6222 00    260  	eax2	15*2			set initial cu hreg index
    000164  aa   000036 6252 00    261  cuhrlp:	eax5	15*2			set initial apu hreg index
    000165  0a   001010 7002 00    262  	tsx0	fnd_crd			go check for cache read cycle
    000166  0a   000173 7102 00    263  	tra	apuhrlp			return ic+1, cache read (L68)
    000167  0a   000210 7102 00    264  	tra	dps8_hit			return ic+2, cache read (DPS8)
    000170  aa   777776 6222 12    265  dec_cux:	eax2	-2,2			return ic+3, not cache read
    000171  0a   000267 6042 00    266  	tmi	no_find			exit if no more cu hregs
    000172  0a   000164 7102 00    267  	tra	cuhrlp			go get next cu hreg
                                   268  
    000173  aa  3 00140 2373 15    269  apuhrlp:	ldaq	bb|apu_hreg,5		load next apu hreg
    000174  aa   014000 3152 07    270  	cana	apuhra.fap+apuhra.fanp,dl	is this final address (fanp or fap)?
    000175  0a   000202 6002 00    271  	tze	dec_apx			xfer if no, skip to next apu hreg
    000176  aa   000014 7722 00    272  	qrl	apuhra.finadd_shift		right justify abs addr
    000177  aa   000777 3762 07    273  	anq	=o777,dl			and out upper addr bits
    000200  aa  2 00044 1163 00    274  	cmpq	bp|mc.fim_temp		is this the same as cu addr?
    000201  0a   000205 6002 00    275  	tze	addmatch			xfer if yes
    000202  aa   777776 6252 15    276  dec_apx:	eax5	-2,5			no, go to nxt apu hreg
    000203  0a   000170 6042 00    277  	tmi	dec_cux			get nxt cu hreg is apu hregs exhausted
    000204  0a   000173 7102 00    278  	tra	apuhrlp			get nxt apu hreg
                                   279  
    000205  aa  3 00141 2353 15    280  addmatch:	lda	bb|apu_hreg+1,5		matching cu and apu address
    000206  aa   000040 3152 07    281  	cana	apuhra.encache,dl		is segment encacheable?
    000207  0a   000170 6002 00    282  	tze	dec_cux			xfer if no, go to nxt cu/apu match
    000210                         283  dps8_hit:					" Enter here if dps8 cache read
    000210  aa   000014 7712 00    284  	arl	12			zero out all but 24 bit address
    000211  4a  4 00070 7553 20    285  	sta	pds$cpar_info		and save
    000212  aa   000000 6262 05    286  	eax6	0,al			copy lower 256k address to x6
    000213  0a   001275 3662 11    287  	anx6	c_256k_mask,1		make mod <cache size> address
    000214  0a   001302 3752 11    288  	ana	c_abs_addr_mask,1		make absaddr mod <cache size>
    000215  aa   000014 7352 00    289  	als	12			shift into position
    000216  aa   000004 2752 07    290  	ora	sdw.valid,dl		set directed fault bit
    000217  0a   001256 2362 11    291  	ldq	c_sdw_bounds,1		set up rest of sdw
    000220  4a  4 00076 7573 20    292  	staq	dseg$,7			set sdw in dseg
    000221  aa   000000 5322 00    293  	cams				"clear associative memory
    000222  aa   000000 5326 00    294  	camp
    000223  aa  0 00000 2373 16    295  	ldaq	ap|0,6			get memory contents
    000224  4a  4 00100 7573 20    296  	staq	pds$cpar_mem_data		and save
    000225  0a   001270 3662 11    297  	anx6	c_lv_st_mask,1		make address start at level 0
    000226  aa   777774 6232 00    298  	eax3	-4			x3 counts levels
    000227  aa   000400 6342 07    299  cparlvlp:	ldi	scu.ir.parm,dl		set parity mask
    000230  0a   001255 6742 02    300  	lcpr	cache_to_reg_mode,02	set cache dump mode
    000231  aa  0 00000 2373 16    301  	ldaq	ap|0,6			dump cache contents
    000232  0a   001254 6742 02    302  	lcpr	cache_off,02		reset cache dump mode
    000233  aa  2 00044 7543 00    303  	sti	bp|mc.fim_temp		save indicators
    000234  4a  4 00100 6773 20    304  	eraq	pds$cpar_mem_data		exclusive or it with data in mem
    000235  4a  4 00102 7573 20    305  	staq	pds$cpar_err_data		save it
    000236  aa   000000 6342 07    306  	ldi	0,dl			reset parity mask
    000237  aa  2 00044 2353 00    307  	lda	bp|mc.fim_temp		load indicators
    000240  aa   001000 3152 07    308  	cana	scu.ir.par,dl		parity error?
    000241  0a   000246 6012 00    309  	tnz	cpar_hit			xfer if yes
    000242  0a   001263 0662 11    310  nxt_lvl:	adx6	c_lv_inc_tab,1		get set for nxt level
    000243  aa   000001 6232 13    311  	eax3	1,3			any more levels?
    000244  0a   000227 6042 00    312  	tmi	cparlvlp			yes, go to nxt level
    000245  0a   000170 7102 00    313  	tra	dec_cux			no, go check previous read
                                   314  
    000246  aa   004000 6342 07    315  cpar_hit:	ldi	scu.ir.oflm,dl		mask overflows
    000247  4a  4 00102 3373 20    316  	lcaq	pds$cpar_err_data		get compliment of XOR data
    000250  aa   000000 6342 07    317  	ldi	0,dl			reset overflow mask
    000251  4a  4 00102 3773 20    318  	anaq	pds$cpar_err_data		and 2s compliment data with itself
    000252  4a  4 00102 1173 20    319  	cmpaq	pds$cpar_err_data		if single bit failure, it should compare
    000253  0a   000242 6012 00    320  	tnz	nxt_lvl			multiple bit failure, go try nxt level
    000254  aa   000400 6342 07    321  	ldi	scu.ir.parm,dl		set parity mask
    000255  0a   001255 6742 02    322  	lcpr	cache_to_reg_mode,02	set cache dump mode
    000256  aa  0 00000 2373 16    323  	ldaq	ap|0,6			dump cache contents
    000257  0a   001254 6742 02    324  	lcpr	cache_off,02		reset cache dump mode
    000260  4a  4 00102 7573 20    325  	staq	pds$cpar_err_data		save it
    000261  aa   000000 6342 07    326  	ldi	0,dl			reset parity mask
    000262  aa   000000 6352 16    327  	eaa	0,6			copy level info to a
    000263  0a   001307 7712 11    328  	arl	c_lv_shift,1		position per cache size
    000264  aa   000300 3752 03    329  	ana	=o300,du			and out all but level
    000265  aa   400000 2752 03    330  	ora	=o400000,du		set flag for data capture
    000266  4a  4 00070 2553 20    331  	orsa	pds$cpar_info		and save
    000267  aa   000000 2352 03    332  no_find:	lda	0,du
    000270  aa   000000 2362 03    333  	ldq	0,du			zero out abs seg sdw
    000271  4a  4 00076 7573 20    334  	staq	dseg$,7
    000272  aa   000004 5322 00    335  	cams	4			clear assosiative memory and cache
    000273  aa   000000 5326 00    336  	camp
    000274  0a   001034 7002 00    337  	tsx0	save_cache		go save cache enable bits
    000275  4a  4 00040 7003 20    338  	tsx0	fim_util$check_fault	now go check to see if fault in hardcore
    000276  0a   000416 7102 00    339  	tra	onc_par_join		and go join common code
                                   340  " 
                                   341  " signal_entry - entry to handle faults that are directly signalable
                                   342  " in the outer rings (not ring 0)
                                   343  
                        000300     344  	segdef	signal_entry
                                   345  
    000277  aa   000000 0112 03    346  	even
    000300                         347  signal_entry:
    000300  0a   001246 2542 20    348  	spri	sig_prs,*			save prs
    000301  0a   001246 3522 20    349  	eppbp	sig_prs,*			bp -> machine conditions
    000302  aa  2 00020 7533 00    350  	sreg	bp|mc.regs		save registers
    000303  0a   001240 3702 20    351  	epplp	lp,*			set lp value
    000304  aa  2 00050 4477 00    352  	spl	bp|mc.eis_info		save eis ptrs and lengths
    000305                         353  drl_join:
    000305  4a  4 00036 7003 20    354  	tsx0	fim_util$fim_v_time_init	remember accrued virtual time
    000306  4a  4 00040 7003 20    355  	tsx0	fim_util$check_fault	kill Multics if not legal fault
    000307  aa  2 00031 2353 00    356  	lda	bp|mc.scu.fault_data_word
    000310  aa   000076 3752 07    357  	ana	scu.fi_num_mask,dl		get fault address
    000311                         358  signal_it:
    000311  aa  2 00043 7553 00    359  	sta	bp|mc.errcode		temporarily save fault code
    000312  aa   000001 7712 00    360  	arl	1			divide by 2
    000313  4a  4 00104 2363 20    361  	ldq	prds$processor_tag		get cpu num
    000314  0a   000456 7162 06    362  	xec	fault_ctr_tab,ql		BB => per-cpu fault ctr array	
    000315  aa  3 00000 0543 05    363  	aos	bb|0,al			and increment the fault ctr
    000316  aa   000001 7352 00    364  	als 	1			multiply by 2
    000317  0a   001330 2372 05    365  	ldaq	fault_table,al		pick up table entry
    000320  aa   400000 3762 07    366  	anq	access_audit_flag,dl	do we need to audit this event?
    000321  0a   000323 6002 00    367  	tze	no_sig_audit		xfer if no.
    000322  0a   000350 7012 00    368  	tsx1	call_audit_for_signal	yes, go do it (will push frame)
    000323                         369  no_sig_audit:
    000323  aa   000000 7102 01    370  	tra	0,au			dispatch on entry value
                                   371  
    000324                         372  call_signaller:				"most signalable faults come here directly
    000324  4a  4 00042 3537 20    373  	eppbb	pds$history_reg_data	bb -> place to store history regs 
    000325  4a  4 00044 7003 20    374  	tsx0	fim_util$check_mct		go save M. C.'s and hregs if required
    000326  4a  4 00106 7003 20    375  	tsx0	fim_util$hist_regs		(ret ic +1) save hregs in pds
    000327  4a  4 00062 7003 20    376  	tsx0	fim_util$reset_mode_reg  	(ret ic +2) turn them back on now
    000330  aa  2 00043 2353 00    377  	lda	bp|mc.errcode		get fault code for retrieving name
    000331  aa   000001 7712 00    378  	arl	1			divide by 2
    000332  aa  2 00044 7553 00    379  	sta	bp|mc.fim_temp		save the sct index for signal_
    000333  aa   000001 7352 00    380  	als	1			multiply by 2
    000334  aa  2 00043 4503 00    381  	stz	bp|mc.errcode		initialize error code
    000335  0a   001331 2352 05    382  	lda	fault_table+1,al		pick up second word of fault table entry
    000336  aa   000000 3536 01    383  	eppbb	0,au			get pointer to name from its left half word
    000337  4a  4 00110 3517 20    384  	eppab	pds$condition_name		get pointer to place to store name
    000340  aa  3 00000 2363 00    385  	ldq	bb|0			get first word of string for ACC size
    000341  aa   000033 7722 00    386  	qrl	27			right justify size of string
    000342  aa   000001 0362 07    387  	adlq	1,dl			add 1 for count character
    000343  aa  0 00100 1007 40    388  	mlr	(pr,rl),(pr),fill(0)
    000344  aa   300000 000006     389  	desc9a	bb|0,ql
    000345  aa   100000 000040     390  	desc9a	ab|0,32
    000346  4a  4 00064 3737 20    391  	eppsb	pds$stack_0_ptr,*		set SB to the ring 0 stack
    000347  4a  4 00112 7103 20    392  	tra	signaller$signaller		now give control to the signaller
                                   393  "
    000350                         394  call_audit_for_signal:		" security auditing for signal_entry
    000350  aa   000004 2362 07    395  	ldq	audit_flags.faults,dl get process's audit flags
    000351  4a  4 00114 3163 20    396  	canq	pds$audit_flags	Check appropriate audit flag
    000352  aa   000000 6002 11    397  	tze	0,1		Not auditing, go back
                                   398  
    000353  4a  4 00064 3737 20    399  	eppsb	pds$stack_0_ptr,*	make FIM's stack frame on the ring 0 stack
    000354  0a   001252 2272 00    400  	ldx7	push		..
    000355  4a  4 00066 7003 20    401  	tsx0	fim_util$push_stack	..
    000356  aa  6 00060 3503 00    402  	eppap	mach_cond		ap -> place for machine conditions
    000357  4a  4 00060 7003 20    403  	tsx0	fim_util$copy_mc	copy machine conditions into stack frame
    000360                         404  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
    000360  aa  6 00340 2521 00    405  	spribp	mc_ptr		set mc_ptr in stack frame
    000361  aa  6 00340 3501 00    406  	eppap	mc_ptr		Get machine conditions pointer
    000362  aa  6 00346 2501 00    407  	spriap	arglist+2		Stuff it in arg list
    000363  aa   004000 4310 07    408  	fld	=1b24,dl		One argument
    000364  aa   000004 2750 07    409  	ora	=o4,dl		Make arglist header
    000365  aa  6 00344 7571 00    410  	staq	arglist		Stuff it where it belongs
    000366  aa  6 00000 2541 00    411  	call	access_audit_log_fault_$log_fault(arglist)	Call fault entry in auditor
    000367  aa  6 00344 3501 00
    000370  4a  4 00014 3521 20
    000371  aa  6 00040 7531 00
    000372  aa  7 00036 6701 20
    000373  aa  6 00000 1731 00
    000374  aa  6 00040 0731 00
    000375  4a  4 00116 3501 20    412  	eppap	pds$signal_data	copy M.C.s back to signal data
    000376  4a  4 00060 7001 20    413  	tsx0	fim_util$copy_mc
    000377                         414  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000377  aa  7 00024 6523 00    415  	sprisp	sb|stack_header.stack_end_ptr reset stack end pointer (and pop frame)
    000400  aa  2 00043 2353 00    416  	lda	bp|mc.errcode	restore the fault code from the MC
    000401  0a   001330 2352 05    417  	lda	fault_table,al	and pick up table entry
    000402  aa   000000 7102 11    418  	tra	0,1		and return
                                   419  " 
                                   420  " PRIMARY_FAULT_ENTRY - Most faults arrive at this entry.
                                   421  
                        000404     422  	segdef	primary_fault_entry
                                   423  
    000403  aa   000000 0112 03    424  	even
    000404                         425  primary_fault_entry:
    000404  0a   001242 2542 20    426  	spri	prs,*			save prs
    000405  0a   001242 3522 20    427  	eppbp	prs,*			bp -> machine conditions
    000406  aa  2 00020 7533 00    428  	sreg	bp|mc.regs		save registers
    000407  0a   001240 3702 20    429  	epplp	lp,*			set lp value
    000410  aa  2 00050 4477 00    430  	spl	bp|mc.eis_info		save eis ptrs and lengths
    000411  4a  4 00036 7003 20    431  	tsx0	fim_util$fim_v_time_init	remember accrued virtual time
    000412  4a  4 00040 7003 20    432  	tsx0	fim_util$check_fault	kill Multics if not legal fault
    000413                         433  fault_join:
    000413  4a  4 00042 3537 20    434  	eppbb	pds$history_reg_data  bb -> place to store history regs 
    000414  4a  4 00044 7003 20    435  	tsx0	fim_util$check_mct	go save M.C.'s an hregs if required
    000415  4a  4 00106 7003 20    436  	tsx0	fim_util$hist_regs	(ret ic +1) save hregs (if not saved by check_mct)
    000416                         437  onc_par_join:
    000416  4a  4 00062 7003 20    438  	tsx0	fim_util$reset_mode_reg   (ret ic +2) turn them back on now
    000417  4a  4 00064 3737 20    439  	eppsb	pds$stack_0_ptr,*	make FIM's stack frame on the ring 0 stack
    000420  0a   001252 2272 00    440  	ldx7	push		..
    000421  4a  4 00066 7003 20    441  	tsx0	fim_util$push_stack	..
    000422  aa  6 00060 3503 00    442  	eppap	mach_cond		ap -> place for machine conditions
    000423  4a  4 00060 7003 20    443  	tsx0	fim_util$copy_mc	copy machine conditions into stack frame
    000424  aa  6 00340 2523 00    444  	spribp	mc_ptr		set mc_ptr in stack frame
    000425  4a  4 00120 2373 20    445  	ldaq	pds$fim_v_temp	save CPU time at start of fault
    000426  aa  6 00050 7573 00    446  	staq	v_temp		..
    000427  4a  4 00122 2373 20    447  	ldaq	pds$fim_v_delta	save virtual delta at start of fault
    000430  aa  6 00052 7573 00    448  	staq	v_delta		..
    000431  4a  4 00124 2343 20    449  	szn	pds$hregs_saved  	do we want to copy hregs?
    000432  0a   000437 6002 00    450  	tze	no_hist
    000433  aa  6 00140 3503 00    451  	eppap	history_registers	bb -> hregs either in mc_trace buffer or pds
    000434  aa  0 00100 1007 00    452  	mlr	(pr),(pr)		copy hregs into stack frame
    000435  aa   300000 001000     453  	desc9a	bb|0,128*4
    000436  aa   000000 001000     454  	desc9a	ap|0,128*4
    000437                         455  no_hist:	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                   456  
                                   457  " Dispatch on Fault Code.
                                   458  
    000437  aa  2 00043 4501 00    459  	stz	bp|mc.errcode	clear the error code
    000440  aa  2 00031 2351 00    460  	lda	bp|mc.scu.fault_data_word get fault number
    000441  aa   000076 3750 07    461  	ana	scu.fi_num_mask,dl
    000442                         462  set_fault:
    000442  aa  6 00354 7551 00    463  	sta	fcode		save the fault code
    000443  aa   000001 7710 00    464  	arl	1		divide by 2
    000444  4a  4 00104 2361 20    465  	ldq	prds$processor_tag	get cpu num in QL
    000445  0a   000456 7160 06    466  	xec	fault_ctr_tab,ql	BB=> per-cpu fault counter
    000446  aa  3 00000 0541 05    467  	aos	bb|0,al		increment the fault counter
    000447  aa  2 00044 7551 00    468  	sta	bp|mc.fim_temp	save the fault code in the MC
    000450  aa   000001 7350 00    469  	als	1		multiply by 2
    000451  0a   001330 2370 05    470  	ldaq	fault_table,al	pick up table entry
    000452  aa   400000 3760 07    471  	anq	access_audit_flag,dl	get special action code for this fault
    000453  0a   000455 6000 00    472  	tze	no_pri_audit	xfer if no need to audit
    000454  0a   000466 7010 00    473  	tsx1	call_audit_for_primary	we need to audit this event
    000455                         474  no_pri_audit:
    000455  aa   000000 7100 01    475  	tra	0,au		dispatch on entry value
                                   476  
    000456                         477  fault_ctr_tab: 
    000456  4a  4 00126 3535 20    478  	eppbb	wired_hardcore_data$cpu_a_flt_ctr_array
    000457  4a  4 00130 3535 20    479  	eppbb	wired_hardcore_data$cpu_b_flt_ctr_array
    000460  4a  4 00132 3535 20    480  	eppbb	wired_hardcore_data$cpu_c_flt_ctr_array
    000461  4a  4 00134 3535 20    481  	eppbb	wired_hardcore_data$cpu_d_flt_ctr_array
    000462  4a  4 00136 3535 20    482  	eppbb	wired_hardcore_data$cpu_e_flt_ctr_array
    000463  4a  4 00140 3535 20    483  	eppbb	wired_hardcore_data$cpu_f_flt_ctr_array
    000464  4a  4 00142 3535 20    484  	eppbb	wired_hardcore_data$cpu_g_flt_ctr_array
    000465  4a  4 00144 3535 20    485  	eppbb	wired_hardcore_data$cpu_h_flt_ctr_array
                                   486  " 
                                   487  
    000466                         488  call_audit_for_primary:		" security auditing for primary_fault_entry
    000466  aa   000004 2360 07    489  	ldq	audit_flags.faults,dl get process's audit flags
    000467  4a  4 00114 3161 20    490  	canq	pds$audit_flags	Check appropriate audit flag
    000470  aa   000000 6000 11    491  	tze	0,1		Not auditing, go back
    000471  aa  6 00340 3501 00    492  	eppap	mc_ptr		Get machine conditions pointer
    000472  aa  6 00346 2501 00    493  	spriap	arglist+2		Stuff it in arg list
    000473  aa   004000 4310 07    494  	fld	=1b24,dl		One argument
    000474  aa   000004 2750 07    495  	ora	=o4,dl		Make arglist header
    000475  aa  6 00344 7571 00    496  	staq	arglist		Stuff it where it belongs
    000476  aa  6 00000 2541 00    497  	call	access_audit_log_fault_$log_fault(arglist)  Call fault entry in auditor
    000477  aa  6 00344 3501 00
    000500  4a  4 00014 3521 20
    000501  aa  6 00040 7531 00
    000502  aa  7 00036 6701 20
    000503  aa  6 00000 1731 00
    000504  aa  6 00040 0731 00
    000505  aa  6 00354 2351 00    498  	lda	fcode		Pick up the fault code again
    000506  0a   001330 2350 05    499  	lda	fault_table,al	Pick up the table entry
    000507  aa   000000 7100 11    500  	tra	0,1		Go back
                                   501  
                                   502  "
                                   503  
                                   504  "	Set up the call to the appropriate handler.
                                   505  "
                                   506  "	The right half of the accumulator contains an offset
                                   507  "	in the fim's linkage section of the procedure to call
                                   508  "	to handle the fault.
                                   509  "
                                   510  "	All handlers are called in the following way:
                                   511  "
                                   512  "	call handler (mc_ptr)
                                   513  "
                                   514  "	where mc_ptr points to the machine conditions, not the
                                   515  "	SCU data.
                                   516  "
                                   517  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   518  
                                   519  
    000510                         520  call_signaller_signal:
    000510  0a   000324 0000 00    521  	arg	call_signaller
    000511  0a   001156 0000 00    522  	arg	call_signal
                                   523  
    000512                         524  standard.signal_check_coll:
    000512  aa   000001 6200 00    525  	eax0	1
    000513  0a   000515 7100 00    526  	tra	standard.check_common
                                   527  
    000514                         528  standard.signaller_check_coll:
    000514  aa   000000 6200 00    529  	eax0	0
    000515                         530  standard.check_common:
    000515  4a  4 00146 2361 20    531  	ldq	sys_info$initialization_state
    000516  aa   000001 1160 07    532  	cmpq	1,dl
    000517  0a   000510 6044 30    533  	tmoz	call_signaller_signal,x0*
                                   534  
    000520                         535  standard:
    000520  aa  4 00000 3501 25    536  	eppap	lp|0,al*		generate pointer to the handler
    000521  aa  6 00342 2501 00    537  	spriap	call_ptr		save the handler pointer
                                   538  
    000522  aa   004000 4310 07    539  	fld	=1b24,dl		set up argument list header (1 argument)
    000523  aa   000004 2750 07    540  	ora	=o4,dl
    000524  aa  6 00344 7571 00    541  	staq	arglist
                                   542  
    000525  aa  6 00340 3501 00    543  	eppap	mc_ptr		set up argument list (1st arg is mc_ptr)
    000526  aa  6 00346 2501 00    544  	spriap	arglist+2
                                   545  
    000527  0a   001114 7100 00    546  	tra	call
                                   547  
                                   548  " 
                                   549  "	Access Violation faults
                                   550  "
                                   551  "	All access violation subcases are separated out
                                   552  "	in the next sequence of code. Some are signalled, some are handled
                                   553  "	by the system.
                                   554  "
                                   555  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   556  
                                   557  
    000530                         558  access_violation:
    000530  aa  2 00031 2351 00    559  	lda	bp|mc.scu.fault_data_word get sub-class of access violation fault
    000531  aa   777777 3750 03    560  	ana	-1,du		leave only sub-class bits
    000532  aa   000000 6270 00    561  	eax7	0		 Determine which is highest bit on.
    000533                         562  acv_bit_loop:
    000533  aa   400000 3150 03    563  	cana	=o400000,du	 Test bit.
    000534  0a   000540 6010 00    564  	tnz	acv_bit_end
                                   565  
    000535  aa   000002 6270 17    566  	eax7	2,7		 On to next bit.
    000536  aa   000001 7350 00    567  	als	1
    000537  0a   000533 6010 00    568  	tnz	acv_bit_loop	 Unless all bits off.
                                   569  
    000540                         570  acv_bit_end:
    000540  0a   001436 6350 17    571  	eaa	avf,7	generate simulated code word
    000541  0a   001474 1150 03    572  	cmpa	oob,du	see if bound fault (if so make special checks)
    000542  0a   000544 6000 00    573  	tze	check_special_oob	yes, make tests
                                   574  
    000543  0a   000564 7100 00    575  	tra	fixindex_1	must be normal access violation of some type
                                   576  
    000544                         577  check_special_oob:
    000544  aa  2 00032 2361 00    578  	ldq	bp|mc.scu.tpr.tsr_word "fetch the TSR
    000545  aa   077777 3760 03    579  	anq	scu.tpr.tsr_mask,du	leave only segment number
    000546  0a   001432 6270 00    580  	eax7	null		get set for simfault
    000547  aa   077777 1160 03    581  	cmpq	=o077777,du	is it a null pointer?
    000550  0a   000563 6000 00    582  	tze	fixindex		yes, handle the null pointer.
    000551  aa   077776 1160 03    583  	cmpq	=o077776,du	is a terminate process?
    000552  0a   001221 6000 00    584  	tze	term_it		yes, go handle it
    000553  0a   001546 6270 00    585  	eax7	undefp		get set for undefined_pointer
    000554  aa   077775 1160 03    586  	cmpq	=o077775,du	is it an undefined pointer?
    000555  0a   000563 6000 00    587  	tze	fixindex		yes, handle it
    000556  0a   001510 6270 00    588  	eax7	stk_oob		get set for out_of_bounds on stack
    000557  aa  2 00014 6761 00    589  	erq	bp|mc.prs+6*2	exclusive or  stack segno with  tsr
    000560  aa   077777 3760 03    590  	anq	=o077777,du	set indicators to note any difference
    000561  0a   000563 6000 00    591  	tze	fixindex		no,  call handler to extend stack
    000562  0a   000564 7100 00    592  	tra	fixindex_1	not special oob, treat as real oob
                                   593  
                                   594  
    000563                         595  fixindex:
    000563  aa   000000 6350 17    596  	eaa	0,7		new index in A
    000564                         597  fixindex_1:
    000564  0a   001330 1350 03    598  	sbla	fault_table,du  get relative address
    000565  aa   000022 7710 00    599  	arl	18		right-justify
    000566  0a   000442 7100 00    600  	tra	set_fault		back to the dispatch table
                                   601  
                                   602  "
                                   603  "	Command faults
                                   604  "
                                   605  "	The command fault could be either hardware oriented, configuration
                                   606  "	oriented, or an attempt to load a faulting packed pointer.
                                   607  "
                                   608  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   609  
                                   610  
    000567                         611  command_fault:
    000567  0a   001536 6270 00    612  	eax7	com	assume normal command fault
    000570  aa  2 00031 2361 00    613  	ldq	bp|mc.scu.port_stat_word check illegal action
    000571  aa   170000 3160 07    614  	canq	scu.ial_mask,dl
    000572  0a   000563 6010 00    615  	tnz	fixindex		nonzero, treat as normal case
    000573  aa  2 00036 2361 00    616  	ldq	bp|scu.even_inst_word check for LPRPxx instruction
    000574  aa   770400 3760 07    617  	anq	=o770400,dl
    000575  aa   760000 1160 07    618  	cmpq	lprp_insts,dl
    000576  0a   000563 6010 00    619  	tnz	fixindex		isn't LPRPxx, treat as normal
                                   620  
                                   621  "	It is packed pointer fault. See if system version.
                                   622  
    000577  0a   001512 6270 00    623  	eax7	ppf	
    000600  aa  2 00035 2361 00    624  	ldq	bp|mc.scu.ca_word	pick up faulting pointer pair
    000601  aa  2 00032 2351 00    625  	lda	bp|mc.scu.tpr.tsr_word
    000602  aa   077777 3750 03    626  	ana	scu.tpr.tsr_mask,du
    000603  aa   000000 3124 01    627  	easp3	0,au		generate pointer
    000604  aa   000000 3134 02    628  	eawp3	0,qu
    000605  aa  3 00000 2351 00    629  	lda	bb|0		pick up the packed pointer
    000606  aa   100000 3150 03    630  	cana	=o100000,du	check system bit
    000607  0a   000563 6000 00    631  	tze	fixindex		not ON. Treat as normal packed pointer fault
    000610  aa   000777 3750 03    632  	ana	=o000777,du
    000611  aa   000003 1150 03    633  	cmpa	3,du
    000612  0a   000563 6050 00    634  	tpl	fixindex
    000613  aa   000001 7350 00    635  	als	1		multiply by 2
    000614  0a   001514 6270 01    636  	eax7	sppf,au
    000615  0a   000563 7100 00    637  	tra	fixindex
                                   638  " 
                                   639  "	Overflow faults
                                   640  "
                                   641  "	The overflow fault could result from one of:
                                   642  "
                                   643  "	fixedoverflow
                                   644  "	exponent overflow
                                   645  "	exponent underflow
                                   646  "	stringesize (EIS truncation fault)
                                   647  "
                                   648  "
                                   649  "	The following code looks at the indicators to see what kind
                                   650  "	of overflow fault occured and to remap the fault into the
                                   651  "	corresponding name.
                                   652  "
                                   653  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   654  
                                   655  
    000616                         656  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000616                         657  split_overflow:
    000616  aa   000500 2352 07    658  	lda	scu.cu.rfi+scu.cu.if,dl	set rfi and if bits
    000617  aa  2 00035 2553 00    659  	orsa	bp|mc.scu.cu_stat_word	in cu status word
    000620  aa  2 00034 2363 00    660  	ldq	bp|mc.scu.indicators_word	get the indicators and ilc
    000621  aa   000000 6232 00    661  	eax3	0			set ^hex mode
    000622  aa   000010 3162 07    662  	canq	scu.ir.hex,dl
    000623  0a   000627 6002 00    663  	tze	sov_binary		IR bit not set, so binary it is
    000624  4a  4 00150 2343 20    664  	szn	pds$hfp_exponent_enabled	is per-process enablement on?
    000625  0a   000627 6002 00    665  	tze	sov_binary		nope
    000626  aa   000001 6232 00    666  	eax3	1			hex mode if exponent ufl/ofl
    000627                         667  sov_binary:
    000627  aa   040000 3162 07    668  	canq	scu.ir.ovfl,dl		is it "fixedoverflow"?
    000630  0a   000742 6012 00    669  	tnz	ck_eis_size		yes go check for eis size.
    000631  aa   010000 3162 07    670  	canq	scu.ir.eufl,dl		is it "underflow"?
    000632  0a   000672 6002 00    671  	tze	ck_eovfl			no, go check for exp overflow
    000633  0a   001502 6272 00    672  	eax7	eufl			yes, set exp underflow index
    000634  0a   001043 7012 00    673  	tsx1	ck_str_rd			go get op_code from object seg
    000635  0a   000745 7102 00    674  	tra	sig_index			return (ic+1), don't restart EIS
    000636  0a   000641 7102 00    675  	tra	set_und_rfi		return (ic+2) don't increment ic
    000637  aa   000001 0362 03    676  	adlq	1,du			return (ic+3) increment ic
    000640  aa  2 00034 7563 00    677  	stq	bp|mc.scu.ilc_word		by one and restore ic word
    000641                         678  set_und_rfi:
    000641  aa  2 00024 4503 00    679  	stz	bp|mc.regs+4		zero out saved a
    000642  aa  2 00025 4503 00    680  	stz	bp|mc.regs+5		and q regs
    000643  aa   400000 2352 03    681  	lda	minus_128,du		and set e reg to -128
    000644  aa  2 00026 7553 00    682  	sta	bp|mc.regs+6
    000645  4a  4 00152 2363 20    683  	ldq	pds$exp_undfl_rest		restart fault in the fim?
    000646  aa   000000 7362 13    684  	qls	0,x3			shift according to bin/hex mode
    000647  0a   000745 6052 00    685  	tpl	sig_index			xfer if no, go signal fault
    000650  4a  4 00104 2363 20    686  	ldq	prds$processor_tag		restarting so count fault here. get cpu num
    000651  0a   000456 7162 06    687  	xec	fault_ctr_tab,ql		BB => per-cpu fault ctr array	
    000652  aa  3 00065 0543 00    688  	aos	bb|(eufl-fault_table)/2	and increment the fault ctr
    000653  aa  2 00034 2353 00    689  	lda	bp|mc.scu.indicators_word	get indicator reg
    000654  aa   567777 3752 07    690  	ana	-(scu.ir.neg+scu.ir.eufl+1),dl negative and exp underflow indicators off
    000655  aa   400000 2752 07    691  	ora	scu.ir.zero,dl		and set zero indicator
    000656                         692  und_ovr_rest:
    000656  aa  2 00034 5513 14    693  	stba	bp|mc.scu.indicators_word,14	and restore indicators
    000657  aa   030001 3352 07    694  	lca	scu.ir.eufl+scu.ir.eovf+1,dl	reset exp over/under flow indicators
    000660  aa  2 00034 3553 00    695  	ansa	bp|mc.scu.indicators_word
    000661  4a  4 00062 7003 20    696  	tsx0	fim_util$reset_mode_reg	turn hregs back on
    000662  4a  4 00154 2143 20    697  	sznc	pds$connect_pending		is connect pending?
    000663  0a   000667 6002 00    698  	tze	no_con_pend		if not, skip next
    000664  4a  4 00104 7213 20    699  	lxl1	prds$processor_tag		CPU tag in X1
    000665  4a  4 00156 0153 20    700  	cioc	scs$cow_ptrs,1* 		do a connect now
    000666  0a   002206 7746 00    701  	lra	=0			prevent ring alarm before cioc takes
    000667                         702  no_con_pend:
    000667  aa  2 00020 0733 00    703  	lreg	bp|mc.regs		restore the registers
    000670  aa  2 00000 1733 00    704  	lpri	bp|mc.prs			and the prs
    000671  0a   001250 6132 20    705  	rcu	sig_scu,*			return to faulting location
                                   706  
    000672                         707  ck_eovfl:
    000672  aa   020000 3162 07    708  	canq	scu.ir.eovf,dl		is it "overflow"?
    000673  0a   000756 6002 00    709  	tze	ck_trunc			no, go check truncation
    000674  0a   001500 6272 00    710  	eax7	eovf			yes, load table index
    000675  0a   001043 7012 00    711  	tsx1	ck_str_rd			check for fstr/dfstr instr
    000676  0a   000745 7102 00    712  	tra	sig_index			return (ic+1), don't restart EIS
    000677  0a   000702 7102 00    713  	tra	ck_ovfl_rest		return (ic+2), don't increment ic
    000700  aa   000001 0362 03    714  	adlq	1,du			return (ic+3) increment ic
    000701  aa  2 00034 7563 00    715  	stq	bp|mc.scu.ilc_word		by one and restore ic word
    000702                         716  ck_ovfl_rest:
    000702  4a  4 00160 2363 20    717  	ldq	pds$exp_ovfl_rest		restart fault in fim?
    000703  aa   000000 7362 13    718  	qls	0,x3			shift according to bin/hex
    000704  0a   000745 6052 00    719  	tpl	sig_index			xfer if no, go signal fault
    000705  4a  4 00104 2363 20    720  	ldq	prds$processor_tag		restarting, so count fault here. get cpu num
    000706  0a   000456 7162 06    721  	xec	fault_ctr_tab,ql		BB => per-cpu fault ctr array	
    000707  aa  3 00064 0543 00    722  	aos	bb|(eovf-fault_table)/2	and increment the fault ctr
    000710  aa   000000 6232 13    723  	eax3	0,x3			re-sex mode
    000711  0a   000731 6012 00    724  	tnz	hex_ovfl
    000712  aa   002000 3052 03    725  	canx5	dp_opcode,du		yes, is this double precision?
    000713  0a   000716 6012 00    726  	tnz	doub_prec			xfer if yes
    000714  4a  4 00162 4313 20    727  	fld	pds$eovfl_value		no, load sp restart value
    000715  0a   000717 7102 00    728  	tra	str_rest_vlu		and go store it
                                   729  
    000716                         730  doub_prec:
    000716  4a  4 00162 4333 20    731  	dfld	pds$eovfl_value		load dp restart value
    000717                         732  str_rest_vlu:
    000717  aa  2 00024 2343 00    733  	szn	bp|mc.regs+4		is this a negative overflow?
    000720  0a   000722 6052 00    734  	tpl	no_negate			no, store value as is
    000721  aa   000000 5132 00    735  	fneg	0			yes, negate the value
    000722                         736  no_negate:
    000722  aa  2 00024 7573 00    737  	staq	bp|mc.regs+4		and store it
    000723  aa  2 00026 4563 00    738  	ste	bp|mc.regs+6		store exponent
    000724  aa   000500 2352 07    739  	lda	scu.cu.rfi+scu.cu.if,dl	set rfi and if bits
    000725  aa  2 00035 2553 00    740  	orsa	bp|mc.scu.cu_stat_word	in cu status word
    000726  aa  2 00034 2353 00    741  	lda	bp|mc.scu.indicators_word	get indicator register
    000727  aa   757777 3752 07    742  	ana	-(scu.ir.eovf+1),dl		turn off overflow indicator
    000730  0a   000656 7102 00    743  	tra	und_ovr_rest		go restart overflow
                                   744  
    000731  aa   000010 6342 07    745  hex_ovfl:	ldi	scu.ir.hex,dl		enable hex mode
    000732  aa   002000 3052 03    746  	canx5	dp_opcode,du		yes, is this double precision?
    000733  0a   000737 6012 00    747  	tnz	hex_doub_prec		xfer if yes
    000734  4a  4 00164 4313 20    748  	fld	pds$hex_eovfl_value		no, load sp restart value
    000735  aa   000000 6342 07    749  	ldi	0,dl			clear hex mode
    000736  0a   000717 7102 00    750  	tra	str_rest_vlu		and go store it
                                   751  
    000737                         752  hex_doub_prec:
    000737  4a  4 00164 4333 20    753  	dfld	pds$hex_eovfl_value		load dp restart value
    000740  aa   000000 6342 07    754  	ldi	0,dl			clear hex mode
    000741  0a   000717 7102 00    755  	tra	str_rest_vlu
                                   756  
    000742                         757  ck_eis_size:
    000742  0a   001476 6272 00    758  	eax7	ovfl			set up for "fixedoverflow"
    000743  aa   000040 3162 07    759  	canq	scu.ir.mif,dl		is it EIS fault?
    000744  0a   000751 6012 00    760  	tnz	ck_sz_loc			xfer if yes
    000745                         761  sig_index:
    000745  aa   000000 6352 17    762  	eaa	0,7			copy  fault index to a
    000746  0a   001330 1352 03    763  	sbla	fault_table,du		get relative address
    000747  aa   000022 7712 00    764  	arl	18			right justify
    000750  0a   000311 7102 00    765  	tra	signal_it			and go signal fault
                                   766  
    000751                         767  ck_sz_loc:
    000751  aa  2 00036 2353 00    768  	lda	bp|scu.even_inst_word	is this potenialy eis instr?
    000752  aa   000400 3152 07    769  	cana	inst_bit27_on,dl		if bit 27 is not on, can't be eis inst
    000753  0a   000745 6002 00    770  	tze	sig_index			no, signal fixedoverflow
    000754  0a   001532 6272 00    771  	eax7	size_loc			set size fault index
    000755  0a   000745 7102 00    772  	tra	sig_index			and go signal it
                                   773  
    000756                         774  ck_trunc:
    000756  aa   000100 3162 07    775  	canq	scu.ir.tru,dl		is it truncation?
    000757  4a  4 00166 6003 20    776  	tze	fim_util$fault_trouble	hardware error id none of above
    000760  0a   001504 6272 00    777  	eax7	trun			yes, set truncation fault index
                                   778  "
                                   779  "	We have a "stringsize" condition. Set up the machine
                                   780  "	conditions so we can restart the instruction.
                                   781  "
    000761  4a  4 00170 2343 20    782  	szn	pds$pl1_machine		can we alter apparent machine ops?
    000762  0a   000745 6002 00    783  	tze	sig_index			xfer if no, bare 6180 machine
    000763  0a   001060 7012 00    784  	tsx1	get_instruction_size
    000764  aa  2 00034 0353 00    785  	adla	bp|mc.scu.ilc_word		increment ic by eis instr size
    000765  aa  2 00034 7553 00    786  	sta	bp|mc.scu.ilc_word		and restore ic word
    000766  aa   000041 3352 07    787  	lca	scu.ir.mif+1,dl		we must turn OFF this indicator so the next
    000767  aa  2 00034 3553 00    788  	ansa	bp|mc.scu.indicators_word  	EIS instruction will be correctly initialized
    000770  aa   000500 2352 07    789  	lda	scu.cu.rfi+scu.cu.if,dl	set rfi and if bits
    000771  aa  2 00035 2553 00    790  	orsa	bp|mc.scu.cu_stat_word	in cu status word
    000772  0a   000745 7102 00    791  	tra	sig_index			go signal "stringsize"
                                   792  
                                   793  "
                                   794  "	Illegal procedure faults
                                   795  "
                                   796  "	There are several subcases which are distinguished
                                   797  "	They are:
                                   798  "		illegal op code
                                   799  "		illegal address and modifier
                                   800  "		other illegal procedure faults
                                   801  "
                                   802  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   803  
                                   804  
    000773                         805  illegal_procedure:
                                   806  
    000773  0a   000773 2132 00    807  	epaq	*		get our segment number
    000774  aa  2 00030 6753 00    808  	era	bp|mc.scu.ppr.psr_word  compare against procedure segment register
    000775  aa   077777 3752 03    809  	ana	scu.ppr.psr_mask,du	were we in the fim?
    000776  0a   001206 6002 00    810  	tze	die_die_die_	suicide
    000777  aa  2 00031 2353 00    811  	lda	bp|mc.scu.fault_data_word get the fault dataister
    001000  0a   001430 6272 00    812  	eax7	foc	get set for illegal op code
    001001  aa   200000 3152 03    813  	cana	scu.fd.ioc,du
    001002  0a   000745 6012 00    814  	tnz	sig_index		yes, use the given index
                                   815  
    001003  0a   001434 6272 00    816  	eax7	bam	get set for bad modifier or address
    001004  aa   100000 3152 03    817  	cana	scu.fd.ia_im,du
    001005  0a   000745 6012 00    818  	tnz	sig_index
                                   819  
    001006  0a   001506 6272 00    820  	eax7	ipr	get set for all other illegal procedure
    001007  0a   000745 7102 00    821  	tra	sig_index
                                   822  "
                                   823  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   824  "
                                   825  "	fnd_crd - subroutine to check for cache read cycle in current CU history reg
                                   826  "	for cache parity diagnostics.
                                   827  "	return is ic+1, if L68 cache read cycle,
                                   828  "		ic+2, if dps8 cache read cycle (A reg contains abs addr, in upper)
                                   829  "		ic+3, if not a cache read cycle
                                   830  "
                                   831  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   832  
    001010  aa  3 00040 2373 12    833  fnd_crd:	ldaq	bb|cu_hreg,2		load next cu hreg
    001011  aa   000001 1042 03    834  	cmpx4	1,du			is this a dps8 cpu?
    001012  0a   001026 6002 00    835  	tze	cu_dps8			xfer if yes, otherwise  L68
    001013  aa   000004 3162 07    836  	canq	cuhra.dir,dl		is this direct cu cycle?
    001014  aa   000002 6012 10    837  	tnz	2,0			xfer if yes, skip to next cu hreg
    001015  aa   000022 7372 00    838  	lls	18			position addr in al
    001016  aa   760000 3762 03    839  	anq	=o760000,du		mem cmd in qu
    001017  0a   001023 6002 00    840  	tze	l68_rd_cmd		xfer if single precision read
    001020  aa   040000 1162 03    841  	cmpq	=o40000,du		no, is it D.P read?
    001021  0a   001023 6002 00    842  	tze	l68_rd_cmd		xfer if yes
    001022  aa   000002 7102 10    843  	tra	2,0			not cache read, return ic+3
                                   844  
    001023                         845  l68_rd_cmd:
    001023  aa   000777 3752 07    846  	ana	=o777,dl			discard upper address
    001024  aa  2 00044 7553 00    847  	sta	bp|mc.fim_temp		save address
    001025  aa   000000 7102 10    848  	tra	0,0			return ic+1, L68 cache read
                                   849  
    001026  aa   400000 3152 03    850  cu_dps8:	cana	cuhr.pia,du		dps8 pia cycle?
    001027  aa   000002 6002 10    851  	tze	2,0			No, return ic+3
    001030  aa   000010 3152 03    852  	cana	cuhr.internal,du		dps8 cache cycle?
    001031  aa   000002 6002 10    853  	tze	2,0			No, return ic+3
    001032  aa  3 00041 2353 12    854  	lda	bb|cu_hreg+1,2		got a hit, load abs addr in A
    001033  aa   000001 7102 10    855  	tra	1,0			return ic+2, DPS8 cache read
                                   856  
                                   857  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   858  "
                                   859  "	save_cache - subroutine to save current state of cache memory enable bits
                                   860  "	(csh1 and csh2) located in the prds$cache_luf_reg and then reset the bits
                                   861  "
                                   862  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   863  
    001034                         864  save_cache:
    001034  4a  4 00172 2353 20    865  	lda	prds$cache_luf_reg		get current cache enable bits
    001035  aa   600000 3752 07    866  	ana	=o600000,dl		and out all but csh1 and csh2
    001036  aa   000012 7352 00    867  	als	10			position
    001037  4a  4 00070 2553 20    868  	orsa	pds$cpar_info		and save in pds
    001040  aa   000003 2352 07    869  	lda	3,dl
    001041  4a  4 00172 3553 20    870  	ansa	prds$cache_luf_reg		turn off all cache enable bits
    001042  aa   000000 7102 10    871  	tra	0,0			return to caller
                                   872  "
                                   873  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   874  "
                                   875  "	ck_str_rd - subroutine to check if faulting instruction is a
                                   876  "	FSTR or DFSTR by looking in the object segment at psr|ic.
                                   877  "	entry:	tsx1	ck_str_rd
                                   878  "	in regs:	QR =	ilc,indicator word from scu data
                                   879  "		BP ->	machine conditions
                                   880  "	out regs:	QR	is unchanged
                                   881  "		x5  =	instruction op code
                                   882  "	return:	ic+1 if bit 27 is on (EIS instruction)
                                   883  "		ic+2 if instruction is fstr or dfstr instruction
                                   884  "		ic+3 if any other instruction
                                   885  "
                                   886  "	NOTE:
                                   887  "	Theory of touching the text segment, as of 82-10-26.
                                   888  "	Yes, we might take a page or segment fault on the load
                                   889  "	of the instruction word.  However, it is VERY unlikely, given
                                   890  "	selection algorithms for evicting a page/segment.
                                   891  "	Further, the SDW and PTW are almost certainly in our AM, and
                                   892  "	we haven't been listening to any connects to get them out.
                                   893  "	If we take a seg_fault, we'll be using fim_data for machine
                                   894  "	conditions, and the only fim routines that call this routine
                                   895  "	are supposed to have come in using signal_data/signal_entry.
                                   896  "	Thus, we don't have to worry about our data getting clobbered.
                                   897  "	If we end up taking a seg-fault error (seg deleted), or
                                   898  "	a page-fault error, we're just going to signal that error
                                   899  "	anyhow. For anything except the original fault being in
                                   900  "	ring zero, this means crawlout.  
                                   901  "	For ring zero, we would conceivably have to worry about
                                   902  "	someone having a handler for such an error and actually
                                   903  "	wanting to restart the original fault. "It'll never happen."
                                   904  "
                                   905  "	All this makes us think that it isn't worth the expense
                                   906  "	of moving the machine conditions to a stack frame before
                                   907  "	touching the text instruction.  
                                   908  "	
                                   909  "
                                   910  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   911  
    001043                         912  ck_str_rd:
    001043  aa  2 00030 2353 00    913  	lda	bp|mc.scu.ppr.psr_word
    001044  aa   077777 3752 03    914  	ana	scu.ppr.psr_mask,du
    001045  aa   000000 3516 02    915  	eppab	0,qu			set word offset, pr.ringno=0
    001046  aa   000000 3106 01    916  	easpab	0,au			get segno from psr
    001047  aa  1 00000 7253 00    917  	lxl5	ab|0			load instruction op code in x5
    001050  aa   777400 3652 03    918  	anx5	op_code_mask,du		just look at op code
    001051  aa   000400 3052 03    919  	canx5	inst_bit27_on,du		is this an EIS instruction?
    001052  aa   000000 6012 11    920  	tnz	0,1			yes, return ic+1
    001053  aa   470000 1052 03    921  	cmpx5	fstr_inst,du		fstr instruction?
    001054  aa   000001 6002 11    922  	tze	1,1			return ic+2 if yes
    001055  aa   472000 1052 03    923  	cmpx5	dfstr_inst,du		no, dfstr instruction?
    001056  aa   000001 6002 11    924  	tze	1,1			return ic+2 if yes
    001057  aa   000002 7102 11    925  	tra	2,1			no, return ic+3
                                   926  
                                   927  "
                                   928  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   929  "
                                   930  "	get_instruction_size - subroutine to determine the size of an instruction
                                   931  "	by looking in the object segment at psr|ic.
                                   932  "	entry:	tsx1	get_instruction_size
                                   933  "	in regs:	QR =	ilc,indicator word from scu data
                                   934  "		BP ->	machine conditions
                                   935  "	out regs:	QR	is unchanged
                                   936  "		X5  =	instruction op code
                                   937  "		AU =	instruction size 
                                   938  "
                                   939  "	See the NOTE in check_str_rd.
                                   940  "
                                   941  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   942  
    001060                         943  get_instruction_size:
    001060  aa  2 00030 2353 00    944  	lda	bp|mc.scu.ppr.psr_word
    001061  aa   077777 3752 03    945  	ana	scu.ppr.psr_mask,du
    001062  aa   000000 3516 02    946  	eppab	0,qu			get word offset from ilc, set PRab.ring = 0
    001063  aa   000000 3106 01    947  	easpab	0,au			get segno from psr
    001064  aa  1 00000 7253 00    948  	lxl5	ab|0			load instruction op code in x5
    001065  aa   777400 3652 03    949  	anx5	op_code_mask,du		just look at op code
    001066  aa   000001 2352 07    950  	lda	1,dl			default to 1 word
    001067  aa   000400 3052 03    951  	canx5	inst_bit27_on,du		is this an EIS instruction?
    001070  aa   000000 6002 11    952  	tze	0,1			no, return
    001071  0a   001101 6352 00    953  	eaa	gis_table			table pointer
                                   954  
    001072  aa   000000 1052 01    955  gis_loop:	cmpx5	0,au			gone far enough down the table?
    001073  0a   001076 6022 00    956  	tnc	gis_found			got it
    001074  aa   000001 6352 01    957  	eaa	1,au			get next entry
    001075  0a   001072 7102 00    958  	tra	gis_loop
                                   959  
    001076                         960  gis_found:
    001076  aa   000000 2352 01    961  	lda	0,au			return the size
    001077  aa   000022 7352 00    962  	als	18	
    001100  aa   000000 7102 11    963  	tra	0,1
                                   964  
                                   965  
    001101                         966  gis_table:
    001101  aa   057400 000004     967  	vfd	9o/057,1/1,8/0,18/4		mve,mvne
    001102  aa   117400 000003     968  	vfd	9o/117,1/1,8/0,18/3		csl,csr,sztl,sztr,cmpb,mlr,mrl,cmpc
    001103  aa   127400 000004     969  	vfd	9o/127,1/1,8/0,18/4		scd,scdr,scm,scmr
    001104  aa   157400 000001     970  	vfd	9o/157,1/1,8/0,18/1		sptr
    001105  aa   167400 000004     971  	vfd	9o/167,1/1,8/0,18/4		mvt,tct,tctr
    001106  aa   177400 000001     972  	vfd	9o/177,1/1,8/0,18/1		lptr
    001107  aa   217400 000003     973  	vfd	9o/217,1/1,8/0,18/3		ad2d,sb2d,mp2d,dv2d
    001110  aa   227400 000004     974  	vfd	9o/227,1/1,8/0,18/4		ad3d,sb3d,mp3d,dv3d
    001111  aa   277400 000001     975  	vfd	9o/277,1/1,8/0,18/1		lsdr,sbpb0-3,ssdr,lptp
    001112  aa   307400 000003     976  	vfd	9o/307,1/1,8/0,18/3		mvn,btd,cmpn,dtb
    001113  aa   777777 000001     977  	vfd	9o/777,9o/777,18/1		easpN,epbpN,sareg,spl,lareg,
                                   978  					" and all the others...
                                   979  
                                   980  " 
    001114                         981  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                   982  
                                   983  " Make call to fault handler.
                                   984  
    001114                         985  call:
    001114  aa  6 00000 2541 00    986  	call	call_ptr,*(arglist)	make the call
    001115  aa  6 00344 3501 00
    001116  aa  6 00342 3521 20
    001117  aa  6 00040 7531 00
    001120  aa  7 00036 6701 20
    001121  aa  6 00000 1731 00
    001122  aa  6 00040 0731 00
                                   987  
                                   988  
                                   989  " Test for error .
                                   990  
    001123  aa  6 00060 3521 00    991  	eppbp	mach_cond		bp -> machine conditions
    001124  aa  2 00043 2341 00    992  	szn	bp|mc.errcode	test for error
    001125  0a   001156 6010 00    993  	tnz	call_signal	..
                                   994  
    001126                         995  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                                   996  
    001126  0a   001242 3502 20    997  	eppap	prs,*		ap -> wired-down m.c.
    001127  aa  0 00100 1007 00    998  	mlr	(pr),(pr)
    001130  aa   200030 000040     999  	desc9a	bp|mc.scu,8*4
    001131  aa   000030 000040    1000  	desc9a	ap|mc.scu,8*4
                                  1001  
    001132  aa  6 00050 2373 00   1002  	ldaq	v_temp		restore virtual time parameters
    001133  4a  4 00120 7573 20   1003  	staq	pds$fim_v_temp	..
    001134  aa  6 00052 2373 00   1004  	ldaq	v_delta		..
    001135  4a  4 00122 7573 20   1005  	staq	pds$fim_v_delta	..
                                  1006  
    001136  aa  6 00354 2353 00   1007  	lda	fcode		get fault code again
    001137  0a   001330 2372 05   1008  	ldaq	fault_table,al  load table entry
                                  1009  
    001140  aa  7 00024 6523 00   1010  	sprisp	sb|stack_header.stack_end_ptr reset stack end pointer
                                  1011  
    001141  4a  4 00154 2143 20   1012  	sznc	pds$connect_pending	must we do connect?
    001142  0a   001146 6002 00   1013  	tze	no_connect	if not, skip next
    001143  4a  4 00104 7213 20   1014  	lxl1	prds$processor_tag	CPU tag in X1
    001144  4a  4 00156 0153 20   1015  	cioc	scs$cow_ptrs,1* 	do a connect now
    001145  0a   002206 7746 00   1016  	lra	=0		prevent ring alarm before connect takes
    001146                        1017  no_connect:
                                  1018  
    001146  aa   000001 3162 07   1019  	canq	=o1,dl		suspend virtual time?
    001147  0a   001152 6002 00   1020  	tze	no_v_time_meter	if not, don't meter
    001150  aa   000000 0112 03   1021  	odd
    001151  4a  4 00174 7003 20   1022  	tsx0	fim_util$fim_v_time_calc  compute virtual delta
    001152                        1023  no_v_time_meter:
                                  1024  
    001152  aa  2 00050 4677 00   1025  	lpl	bp|mc.eis_info		save eis ptrs and lengths
    001153  aa  2 00020 0733 00   1026  	lreg	bp|mc.regs	restore the registers
    001154  aa  2 00000 1733 00   1027  	lpri	bp|mc.prs		and the prs
    001155  0a   001244 6132 20   1028  	rcu	scu,*		return to faulting location
                                  1029  " 
                                  1030  "	Come here when time to signal the event.
                                  1031  
                                  1032  
    001156                        1033  call_signal:
    001156  aa  2 00044 2353 00   1034  	lda	bp|mc.fim_temp	resignal?
    001157  aa   400000 3152 07   1035  	cana	=o400000,dl	..
    001160  0a   001163 6002 00   1036  	tze	call_signal.1	no.
                                  1037  
    001161  aa   000001 7352 00   1038  	als	1		get new fault code
    001162  aa  6 00354 7513 07   1039  	stca	fcode,07
                                  1040  
    001163                        1041  call_signal.1:
    001163  aa  6 00354 7273 00   1042  	lxl7	fcode		get fault code for retrieving name
    001164  0a   001331 2352 17   1043  	lda	fault_table+1,7  pick up second word of fault table entry
    001165  aa   000000 3536 01   1044  	eppbb	0,au		get pointer to name from its left half word
    001166  4a  4 00110 3517 20   1045  	eppab	pds$condition_name	get pointer to place to store name
    001167  aa  3 00000 2363 00   1046  	ldq	bb|0		get first word of string for ACC size
    001170  aa   000033 7722 00   1047  	qrl	27		right justify size of string
    001171  aa   000001 0362 07   1048  	adlq	1,dl		add 1 for count character
    001172  aa  0 00100 1007 40   1049  	mlr	(pr,rl),(pr),fill(0)
    001173  aa   300000 000006    1050  	desc9a	bb|0,ql
    001174  aa   100000 000040    1051  	desc9a	ab|0,32
                                  1052  
    001175  4a  4 00116 3503 20   1053  	eppap	pds$signal_data
    001176  4a  4 00060 7003 20   1054  	tsx0	fim_util$copy_mc
    001177  4a  4 00064 3737 20   1055  	eppsb	pds$stack_0_ptr,*	get a pointer to the base of the ring 0 stack
    001200  4a  4 00124 2343 20   1056  	szn	pds$hregs_saved
    001201  4a  4 00112 6003 20   1057  	tze	signaller$signaller
                                  1058  
    001202  aa  0 00100 1007 00   1059  	mlr	(pr),(pr)
    001203  aa   600140 001000    1060  	desc9a	history_registers,128*4
    001204  aa   000060 001000    1061  	desc9a	ap|48,128*4
    001205  4a  4 00112 7103 20   1062  	tra	signaller$signaller	now give control to the signaller
                                  1063  
                                  1064  " 
                                  1065  
                                  1066  " Arrive Here If Fault Occurred While Running in the FIM.
                                  1067  
    001206                        1068  die_die_die_:
    001206  4a  4 00064 3737 20   1069  	eppsb	pds$stack_0_ptr,*	get a pointer to the base of the ring 0 stack
                                  1070  " Try to preserve stack history in case the original fault was
                                  1071  " on the ring 0 stack.
                                  1072  
    001207  aa  7 00024 3723 20   1073  	eppsp	sb|stack_header.stack_end_ptr,*  " where does it think it is?
    001210  aa  6 00000 6203 00   1074  	eax0	sp|0
    001211  aa   030000 1002 03   1075  	cmpx0	=o30000,du	reasonable ?
    001212  0a   001215 6046 00   1076  	tmoz	die_die_die_.use_end_ptr
                                  1077  
    001213  aa  7 00022 3723 20   1078  	eppsp	sb|stack_header.stack_begin_ptr,* lay down frame at first available place
    001214  aa  7 00024 6523 00   1079  	sprisp	sb|stack_header.stack_end_ptr
                                  1080  
    001215                        1081  die_die_die_.use_end_ptr:
    001215  0a   001252 2272 00   1082  	ldx7	push		get size of stack frame
    001216  4a  4 00066 7003 20   1083  	tsx0	fim_util$push_stack	make frame at base of pds
                                  1084  
    001217  aa   777777 2352 03   1085  	lda	-1,du
    001220  0a   001222 7102 00   1086  	tra	die_die_die_.fake_ca
                                  1087  
    001221                        1088  term_it:
    001221  aa  2 00035 2353 00   1089  	lda	bp|mc.scu.ca_word	get computed address
    001222                        1090  die_die_die_.fake_ca:
    001222  aa   000022 7312 00   1091  	ars	18		convert to fixed bin
    001223  aa  6 00355 7553 00   1092  	sta	temp		save in stack (temporary cell)
    001224  4a  4 00176 2343 20   1093  	szn	tc_data$wait_enable
    001225  4a  4 00200 6003 20   1094  	tze	wired_fim$unexp_fault
    001226  4a  4 00202 3503 20   1095  	eppap	terminate_proc$terminate_proc  kill this process
    001227  aa  6 00342 2503 00   1096  	spriap	call_ptr		..
    001230  aa  6 00355 3503 00   1097  	eppap	temp
    001231  aa  6 00346 2503 00   1098  	spriap	arglist+2
    001232  aa   004000 4312 07   1099  	fld	=1b24,dl		one argument
    001233  aa   000004 2752 07   1100  	ora	=o4,dl		make PL/1 calling sequence
    001234  aa  6 00344 7573 00   1101  	staq	arglist		..
    001235  0a   001114 7102 00   1102  	tra	call		make the call
                                  1103  
                                  1104  
                                  1105  " 
                                  1106  
                                  1107  " Storage and Constants.
                                  1108  
    001236                        1109  illegal_fault:			"transfer vector for illegal fault
    001236  4a  4 00166 7103 20   1110  	tra	fim_util$fault_trouble
    001237                        1111  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                  1112  
                                  1113  " The following items must be filled in at
                                  1114  " system initialization time.
                                  1115  
                        001250    1116  	segdef	lp,prs,scu,sig_prs,sig_scu
                                  1117  
    001237  aa   000000 0110 03   1118  	even
    001240  aa   077777 000043    1119  lp:	its	-1,1		lp value for fim
    001241  aa   000001 000000 
    001242  aa   077777 000043    1120  prs:	its	-1,1		pointer to pds$fim_data
    001243  aa   000001 000000 
    001244  aa   077777 000043    1121  scu:	its	-1,1		pointer to pds$fim_data+24
    001245  aa   000001 000000 
    001246  aa   077777 000043    1122  sig_prs:	its	-1,1		pointer to pds$signal_data
    001247  aa   000001 000000 
    001250  aa   077777 000043    1123  sig_scu:	its	-1,1		pointer to pds$signal_data+24
    001251  aa   000001 000000 
                                  1124  
    001252  aa   000360 6270 00   1125  push:	push			" used to get size of stack frame
    001253  aa  7 00040 2721 20
    001254                        1126  cache_off:
    001254  aa   000000 000003    1127  	vfd	36/3			constant to turn off cache, luf time max
    001255                        1128  cache_to_reg_mode:
    001255  aa   000000 010003    1129  	oct	10003			constant  to dump cache to aq, luf time max
                                  1130  " 
                                  1131  " Tables indexed by cache size used for cache parity error diagnosis
                                  1132   
    001256                        1133  c_sdw_bounds:			"template for last half of abs_seg sdw
    001256  aa   001774 200000    1134  	vfd	1/,o14/177,3/sdw.read,o18/sdw.unpaged  for 2k (L68) cache
    001257  aa   007774 200000    1135  	vfd	1/,o14/777,3/sdw.read,o18/sdw.unpaged  for 8k (DPS8) cache
    001260  aa   007774 200000    1136  	vfd	1/,o14/777,3/sdw.read,o18/sdw.unpaged  for 8k (DPS8 VS & SC) cache
    001261  aa   017774 200000    1137  	vfd	1/,o14/1777,3/sdw.read,o18/sdw.unpaged  for 16k (DPS8 VS & SC) cache
    001262  aa   037774 200000    1138  	vfd	1/,o14/3777,3/sdw.read,o18/sdw.unpaged  for 32k (DPS8 VS & SC) cache
    001263                        1139  c_lv_inc_tab:			" to increment cache levels
    001263  aa   001000 000000    1140  	vfd	o18/1000,18/0	for 2k (L68) cache
    001264  aa   004000 000000    1141  	vfd	o18/4000,18/0	for 8k (DPS8) cache
    001265  aa   004000 000000    1142  	vfd	o18/4000,18/0	for 8k (DPS8 VS & SC) cache
    001266  aa   010000 000000    1143  	vfd	o18/10000,18/0	for 16k (DPS8 VS & SC) cache
    001267  aa   020000 000000    1144  	vfd	o18/20000,18/0	for 32k (DPS8 VS & SC) cache
    001270                        1145  c_lv_st_mask:			" to mask to level 0 for start
    001270  aa   000776 000000    1146  	vfd	o18/776,18/0	for 2k (L68) cache
    001271  aa   003776 000000    1147  	vfd	o18/3776,18/0	for 8k (DPS8) cache
    001272  aa   003776 000000    1148  	vfd	o18/3776,18/0	for 8k (DPS8 VS & SC) cache
    001273  aa   007776 000000    1149  	vfd	o18/7776,18/0	for 16k (DPS8 VS & SC) cache
    001274  aa   017776 000000    1150  	vfd	o18/17776,18/0	for 32k (DPS8 VS & SC) cache
    001275                        1151  c_256k_mask:			" to mask cache addr within mod cache size
    001275  aa   003776 000000    1152  	vfd	o18/3776,18/0	for 2k (L68) cache
    001276  aa   017776 000000    1153  	vfd	o18/17776,18/0	for 8k (DPS8) cache
    001277  aa   017776 000000    1154  	vfd	o18/17776,18/0	for 8k (DPS8 VS & SC) cache
    001300  aa   037776 000000    1155  	vfd	o18/37776,18/0	for 16k (DPS8 VS & SC) cache
    001301  aa   077776 000000    1156  	vfd	o18/77776,18/0	for 32k (DPS8 VS & SC) cache
    001302                        1157  c_abs_addr_mask:			" to mask abs addr to mod cache size for SDW
    001302  aa   000077 774000    1158  	vfd	12/0,o15/77774,9/0	for 2k (L68) cache
    001303  aa   000077 760000    1159  	vfd	12/0,o15/77760,9/0	for 8k (DPS8) cache
    001304  aa   000077 760000    1160  	vfd	12/0,o15/77760,9/0	for 8k (DPS8 VS & SC) cache
    001305  aa   000077 740000    1161  	vfd	12/0,o15/77740,9/0	for 16k (DPS8 VS & SC) cache
    001306  aa   000077 700000    1162  	vfd	12/0,o15/77700,9/0	for 32k (DPS8 VS & SC) cache
    001307                        1163  c_lv_shift:			" to shift level info for saving
    001307  aa   000000 000003    1164  	dec	3		for 2k (L68) cache
    001310  aa   000000 000005    1165  	dec	5		for 8k (DPS8) cache
    001311  aa   000000 000005    1166  	dec	5		for 8k (DPS8 VS & SC) cache
    001312  aa   000000 000006    1167  	dec	6		for 16k (DPS8 VS & SC) cache
    001313  aa   000000 000007    1168  	dec	7		for 32k (DPS8 VS & SC) cache
                                  1169  
                                  1170  
                                  1171  "
                                  1172  " Dispatch Table for fim.
                                  1173  "	modified 1/7/76 by D. M. Wells to add neti condition
                                  1174  "	modified 2/26/76 by Noel I. Morris to place in separate segment.
                                  1175  "	modified July 77 by T. Casey to add susp and term.
                                  1176  "	modified Oct 77 by T. Casey to rename them to sus_ and trm_.
                                  1177  "	modified 7/79 by J. A. Bush for new signal_entry of fim and to merge back into the fim
                                  1178  
                                  1179  
                                  1180  
                                  1181  "	Each entry in the dispatch table contains two words. The first
                                  1182  "	word has an entrypoint in the fim to transfer to to handle the fault
                                  1183  "	in the left half and a pointer relative to the linkage section of
                                  1184  "	an external entry to call in the right half. If the left half
                                  1185  "	is not standard, the right half is not defined.
                                  1186  "	The second word contains a relative pointer to the ACC string name
                                  1187  "	of the condition associated with the fault in the left half. The right
                                  1188  "	half contains flags, which currently are used to indicate 
                                  1189  "	the necessity of auditing this fault
                                  1190  "	(one or more bits in the left 15 bits of this field).
                                  1191  "	The presence of the low-order bit indicates that the time
                                  1192  "	for processing this fault should be accrued to virtual time.
                                  1193  "
                                  1194  "	___________________________________________
                                  1195  "	|                    |                    |
                                  1196  "	|  FIM handler       |  External handler  |
                                  1197  "	_|_____________________|_____________________|
                                  1198  "	|		 |		  |
                                  1199  "	|  ACC string ptr	 |	FLAGS	  |
                                  1200  "	_|_____________________|_____________________|
                                  1201  "
                                  1202  "
                                  1203  "	The following macro is used to generate entries in the dispatch table.
                                  1204  "	The unique string (label) is the value of the SCT index.
                                  1205  
                                  1206  	macro	table
                              1   1207  	zero	&1,&2
                              2   1208  	vfd	18/&U,18/&4
                              3   1209  
                              4   1210  	use	names
                              5   1211  &U:	acc	"&3"
                              6   1212  
                              7   1213  	use	main
                              8   1214  "
                              9   1215  	&end
                                  1216  
                                  1217  	use	names
                                  1218  	use	main
                                  1219  	join	/text/main,names
                                  1220  
                                  1221  " 
                                  1222  
                                  1223  
                                  1224  " External Links.
                                  1225  
                        000016    1226  	link	am_fault_link,access_viol$am_fault
                        000020    1227  	link	ring_alarm_fault_link,ring_alarm$fault
                        000022    1228  	link	seg_fault_link,seg_fault$seg_fault
                        000024    1229  	link	hardware_fault_link,hardware_fault$hardware_fault
                        000026    1230  	link	boundfault_link,boundfault$boundfault
                        000030    1231  	link	linkage_fault_link,link_snap$link_fault
                        000032    1232  	link	owc_link,outward_call_handler$outward_call_handler
                        000034    1233  	link	stack_oob_handler,stack_oob_handler$stack_oob_handler
                                  1234  
                                  1235  
                                  1236  " 
                                  1237  
                                  1238  	mod	8
    001320                        1239  eight_angry_zeros:
    001320  aa   000000 000000    1240  	dec	0,0,0,0,0,0,0,0
    001321  aa   000000 000000 
    001322  aa   000000 000000 
    001323  aa   000000 000000 
    001324  aa   000000 000000 
    001325  aa   000000 000000 
    001326  aa   000000 000000 
    001327  aa   000000 000000 
                                  1241  
                                  1242  	even
    001330                        1243  fault_table:
                                  1244  	table	standard,hardware_fault_link,shutdown
    001330  02   000520 000024          	zero	standard,hardware_fault_link
    001331  0a   001560 000000          	vfd	18/.._00000,18/
                                        
                                        	use	names
    001560  aa  010 163 150 165         .._00000:	acc	"shutdown"
    001561  aa  164 144 157 167
    001562  aa  156 000 000 000
                                        
                                        	use	main
                                        "
                                  1245  	table	call_signaller,,store
    001332  0a   000324 000000          	zero	call_signaller,
    001333  0a   001563 000000          	vfd	18/.._00001,18/
                                        
                                        	use	names
    001563  aa  005 163 164 157         .._00001:	acc	"store"
    001564  aa  162 145 000 000
                                        
                                        	use	main
                                        "
                                  1246  	table	call_signaller,,mme1
    001334  0a   000324 000000          	zero	call_signaller,
    001335  0a   001565 000000          	vfd	18/.._00002,18/
                                        
                                        	use	names
    001565  aa  004 155 155 145         .._00002:	acc	"mme1"
    001566  aa  061 000 000 000
                                        
                                        	use	main
                                        "
                                  1247  	table	call_signaller,,fault_tag_1
    001336  0a   000324 000000          	zero	call_signaller,
    001337  0a   001567 000000          	vfd	18/.._00003,18/
                                        
                                        	use	names
    001567  aa  013 146 141 165         .._00003:	acc	"fault_tag_1"
    001570  aa  154 164 137 164
    001571  aa  141 147 137 061
                                        
                                        	use	main
                                        "
                                  1248  	table	illegal_fault,,timer_runout
    001340  0a   001236 000000          	zero	illegal_fault,
    001341  0a   001572 000000          	vfd	18/.._00004,18/
                                        
                                        	use	names
    001572  aa  014 164 151 155         .._00004:	acc	"timer_runout"
    001573  aa  145 162 137 162
    001574  aa  165 156 157 165
    001575  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1249  	table	command_fault,,command
    001342  0a   000567 000000          	zero	command_fault,
    001343  0a   001576 000000          	vfd	18/.._00005,18/
                                        
                                        	use	names
    001576  aa  007 143 157 155         .._00005:	acc	"command"
    001577  aa  155 141 156 144
                                        
                                        	use	main
                                        "
                                  1250  	table	call_signaller,,derail
    001344  0a   000324 000000          	zero	call_signaller,
    001345  0a   001600 000000          	vfd	18/.._00006,18/
                                        
                                        	use	names
    001600  aa  006 144 145 162         .._00006:	acc	"derail"
    001601  aa  141 151 154 000
                                        
                                        	use	main
                                        "
                                  1251  	table	call_signaller,,lockup
    001346  0a   000324 000000          	zero	call_signaller,
    001347  0a   001602 000000          	vfd	18/.._00007,18/
                                        
                                        	use	names
    001602  aa  006 154 157 143         .._00007:	acc	"lockup"
    001603  aa  153 165 160 000
                                        
                                        	use	main
                                        "
                                  1252  	table	illegal_fault,,connect
    001350  0a   001236 000000          	zero	illegal_fault,
    001351  0a   001604 000000          	vfd	18/.._00010,18/
                                        
                                        	use	names
    001604  aa  007 143 157 156         .._00010:	acc	"connect"
    001605  aa  156 145 143 164
                                        
                                        	use	main
                                        "
                                  1253  	table	standard,hardware_fault_link,parity
    001352  02   000520 000024          	zero	standard,hardware_fault_link
    001353  0a   001606 000000          	vfd	18/.._00011,18/
                                        
                                        	use	names
    001606  aa  006 160 141 162         .._00011:	acc	"parity"
    001607  aa  151 164 171 000
                                        
                                        	use	main
                                        "
                                  1254  	table	illegal_procedure,,illegal_procedure
    001354  0a   000773 000000          	zero	illegal_procedure,
    001355  0a   001610 000000          	vfd	18/.._00012,18/
                                        
                                        	use	names
    001610  aa  021 151 154 154         .._00012:	acc	"illegal_procedure"
    001611  aa  145 147 141 154
    001612  aa  137 160 162 157
    001613  aa  143 145 144 165
    001614  aa  162 145 000 000
                                        
                                        	use	main
                                        "
                                  1255  	table	standard,hardware_fault_link,op_not_complete
    001356  02   000520 000024          	zero	standard,hardware_fault_link
    001357  0a   001615 000000          	vfd	18/.._00013,18/
                                        
                                        	use	names
    001615  aa  017 157 160 137         .._00013:	acc	"op_not_complete"
    001616  aa  156 157 164 137
    001617  aa  143 157 155 160
    001620  aa  154 145 164 145
                                        
                                        	use	main
                                        "
                                  1256  	table	standard,hardware_fault_link,startup
    001360  02   000520 000024          	zero	standard,hardware_fault_link
    001361  0a   001621 000000          	vfd	18/.._00014,18/
                                        
                                        	use	names
    001621  aa  007 163 164 141         .._00014:	acc	"startup"
    001622  aa  162 164 165 160
                                        
                                        	use	main
                                        "
                                  1257  	table	split_overflow,,ovrflo
    001362  0a   000616 000000          	zero	split_overflow,
    001363  0a   001623 000000          	vfd	18/.._00015,18/
                                        
                                        	use	names
    001623  aa  006 157 166 162         .._00015:	acc	"ovrflo"
    001624  aa  146 154 157 000
                                        
                                        	use	main
                                        "
                                  1258  	table	call_signaller,,zerodivide
    001364  0a   000324 000000          	zero	call_signaller,
    001365  0a   001625 000000          	vfd	18/.._00016,18/
                                        
                                        	use	names
    001625  aa  012 172 145 162         .._00016:	acc	"zerodivide"
    001626  aa  157 144 151 166
    001627  aa  151 144 145 000
                                        
                                        	use	main
                                        "
                                  1259  	table	illegal_fault,,execute
    001366  0a   001236 000000          	zero	illegal_fault,
    001367  0a   001630 000000          	vfd	18/.._00017,18/
                                        
                                        	use	names
    001630  aa  007 145 170 145         .._00017:	acc	"execute"
    001631  aa  143 165 164 145
                                        
                                        	use	main
                                        "
                                  1260  	table	standard.signaller_check_coll,seg_fault_link,seg_fault_error,1
    001370  02   000514 000022          	zero	standard.signaller_check_coll,seg_fault_link
    001371  0a   001632 000001          	vfd	18/.._00020,18/1
                                        
                                        	use	names
    001632  aa  017 163 145 147         .._00020:	acc	"seg_fault_error"
    001633  aa  137 146 141 165
    001634  aa  154 164 137 145
    001635  aa  162 162 157 162
                                        
                                        	use	main
                                        "
                                  1261  pf_loc:	table	illegal_fault,,page_fault_error
    001372  0a   001236 000000          	zero	illegal_fault,
    001373  0a   001636 000000          	vfd	18/.._00021,18/
                                        
                                        	use	names
    001636  aa  020 160 141 147         .._00021:	acc	"page_fault_error"
    001637  aa  145 137 146 141
    001640  aa  165 154 164 137
    001641  aa  145 162 162 157
    001642  aa  162 000 000 000
                                        
                                        	use	main
                                        "
                                  1262  	table	illegal_fault,,directed_fault_2
    001374  0a   001236 000000          	zero	illegal_fault,
    001375  0a   001643 000000          	vfd	18/.._00022,18/
                                        
                                        	use	names
    001643  aa  020 144 151 162         .._00022:	acc	"directed_fault_2"
    001644  aa  145 143 164 145
    001645  aa  144 137 146 141
    001646  aa  165 154 164 137
    001647  aa  062 000 000 000
                                        
                                        	use	main
                                        "
                                  1263  	table	call_signaller,,directed_fault_3
    001376  0a   000324 000000          	zero	call_signaller,
    001377  0a   001650 000000          	vfd	18/.._00023,18/
                                        
                                        	use	names
    001650  aa  020 144 151 162         .._00023:	acc	"directed_fault_3"
    001651  aa  145 143 164 145
    001652  aa  144 137 146 141
    001653  aa  165 154 164 137
    001654  aa  063 000 000 000
                                        
                                        	use	main
                                        "
                                  1264  	table	access_violation,,accessviolation
    001400  0a   000530 000000          	zero	access_violation,
    001401  0a   001655 000000          	vfd	18/.._00024,18/
                                        
                                        	use	names
    001655  aa  017 141 143 143         .._00024:	acc	"accessviolation"
    001656  aa  145 163 163 166
    001657  aa  151 157 154 141
    001660  aa  164 151 157 156
                                        
                                        	use	main
                                        "
                                  1265  	table	call_signaller,,mme2
    001402  0a   000324 000000          	zero	call_signaller,
    001403  0a   001661 000000          	vfd	18/.._00025,18/
                                        
                                        	use	names
    001661  aa  004 155 155 145         .._00025:	acc	"mme2"
    001662  aa  062 000 000 000
                                        
                                        	use	main
                                        "
                                  1266  	table	call_signaller,,mme3
    001404  0a   000324 000000          	zero	call_signaller,
    001405  0a   001663 000000          	vfd	18/.._00026,18/
                                        
                                        	use	names
    001663  aa  004 155 155 145         .._00026:	acc	"mme3"
    001664  aa  063 000 000 000
                                        
                                        	use	main
                                        "
                                  1267  	table	call_signaller,,mme4
    001406  0a   000324 000000          	zero	call_signaller,
    001407  0a   001665 000000          	vfd	18/.._00027,18/
                                        
                                        	use	names
    001665  aa  004 155 155 145         .._00027:	acc	"mme4"
    001666  aa  064 000 000 000
                                        
                                        	use	main
                                        "
                                  1268  	table	standard.signaller_check_coll,linkage_fault_link,linkage_error
    001410  02   000514 000030          	zero	standard.signaller_check_coll,linkage_fault_link
    001411  0a   001667 000000          	vfd	18/.._00030,18/
                                        
                                        	use	names
    001667  aa  015 154 151 156         .._00030:	acc	"linkage_error"
    001670  aa  153 141 147 145
    001671  aa  137 145 162 162
    001672  aa  157 162 000 000
                                        
                                        	use	main
                                        "
                                  1269  	table	call_signaller,,fault_tag_3
    001412  0a   000324 000000          	zero	call_signaller,
    001413  0a   001673 000000          	vfd	18/.._00031,18/
                                        
                                        	use	names
    001673  aa  013 146 141 165         .._00031:	acc	"fault_tag_3"
    001674  aa  154 164 137 164
    001675  aa  141 147 137 063
                                        
                                        	use	main
                                        "
                                  1270  	table	illegal_fault,,undefined_fault
    001414  0a   001236 000000          	zero	illegal_fault,
    001415  0a   001676 000000          	vfd	18/.._00032,18/
                                        
                                        	use	names
    001676  aa  017 165 156 144         .._00032:	acc	"undefined_fault"
    001677  aa  145 146 151 156
    001700  aa  145 144 137 146
    001701  aa  141 165 154 164
                                        
                                        	use	main
                                        "
                                  1271  	table	illegal_fault,,undefined_fault
    001416  0a   001236 000000          	zero	illegal_fault,
    001417  0a   001702 000000          	vfd	18/.._00033,18/
                                        
                                        	use	names
    001702  aa  017 165 156 144         .._00033:	acc	"undefined_fault"
    001703  aa  145 146 151 156
    001704  aa  145 144 137 146
    001705  aa  141 165 154 164
                                        
                                        	use	main
                                        "
                                  1272  	table	illegal_fault,,undefined_fault
    001420  0a   001236 000000          	zero	illegal_fault,
    001421  0a   001706 000000          	vfd	18/.._00034,18/
                                        
                                        	use	names
    001706  aa  017 165 156 144         .._00034:	acc	"undefined_fault"
    001707  aa  145 146 151 156
    001710  aa  145 144 137 146
    001711  aa  141 165 154 164
                                        
                                        	use	main
                                        "
                                  1273  	table	illegal_fault,,undefined_fault
    001422  0a   001236 000000          	zero	illegal_fault,
    001423  0a   001712 000000          	vfd	18/.._00035,18/
                                        
                                        	use	names
    001712  aa  017 165 156 144         .._00035:	acc	"undefined_fault"
    001713  aa  145 146 151 156
    001714  aa  145 144 137 146
    001715  aa  141 165 154 164
                                        
                                        	use	main
                                        "
                                  1274  	table	illegal_fault,,undefined_fault
    001424  0a   001236 000000          	zero	illegal_fault,
    001425  0a   001716 000000          	vfd	18/.._00036,18/
                                        
                                        	use	names
    001716  aa  017 165 156 144         .._00036:	acc	"undefined_fault"
    001717  aa  145 146 151 156
    001720  aa  145 144 137 146
    001721  aa  141 165 154 164
                                        
                                        	use	main
                                        "
                                  1275  	table	illegal_fault,,trouble
    001426  0a   001236 000000          	zero	illegal_fault,
    001427  0a   001722 000000          	vfd	18/.._00037,18/
                                        
                                        	use	names
    001722  aa  007 164 162 157         .._00037:	acc	"trouble"
    001723  aa  165 142 154 145
                                        
                                        	use	main
                                        "
                                  1276  
                                  1277  " 
                                  1278  
                                  1279  " Additional entries for subcases of faults.
                                  1280  
                                  1281  foc:	table	call_signaller,,illegal_opcode,access_audit_flag
    001430  0a   000324 000000          	zero	call_signaller,
    001431  0a   001724 400000          	vfd	18/.._00040,18/access_audit_flag
                                        
                                        	use	names
    001724  aa  016 151 154 154         .._00040:	acc	"illegal_opcode"
    001725  aa  145 147 141 154
    001726  aa  137 157 160 143
    001727  aa  157 144 145 000
                                        
                                        	use	main
                                        "
                                  1282  null:	table	call_signal,,null_pointer
    001432  0a   001156 000000          	zero	call_signal,
    001433  0a   001730 000000          	vfd	18/.._00041,18/
                                        
                                        	use	names
    001730  aa  014 156 165 154         .._00041:	acc	"null_pointer"
    001731  aa  154 137 160 157
    001732  aa  151 156 164 145
    001733  aa  162 000 000 000
                                        
                                        	use	main
                                        "
                                  1283  bam:	table	call_signaller,,illegal_modifier,access_audit_flag
    001434  0a   000324 000000          	zero	call_signaller,
    001435  0a   001734 400000          	vfd	18/.._00042,18/access_audit_flag
                                        
                                        	use	names
    001734  aa  020 151 154 154         .._00042:	acc	"illegal_modifier"
    001735  aa  145 147 141 154
    001736  aa  137 155 157 144
    001737  aa  151 146 151 145
    001740  aa  162 000 000 000
                                        
                                        	use	main
                                        "
                                  1284  avf:	table	call_signal,,illegal_ring_order,access_audit_flag
    001436  0a   001156 000000          	zero	call_signal,
    001437  0a   001741 400000          	vfd	18/.._00043,18/access_audit_flag
                                        
                                        	use	names
    001741  aa  022 151 154 154         .._00043:	acc	"illegal_ring_order"
    001742  aa  145 147 141 154
    001743  aa  137 162 151 156
    001744  aa  147 137 157 162
    001745  aa  144 145 162 000
                                        
                                        	use	main
                                        "
                                  1285  	table	call_signal,,not_in_execute_bracket,access_audit_flag
    001440  0a   001156 000000          	zero	call_signal,
    001441  0a   001746 400000          	vfd	18/.._00044,18/access_audit_flag
                                        
                                        	use	names
    001746  aa  026 156 157 164         .._00044:	acc	"not_in_execute_bracket"
    001747  aa  137 151 156 137
    001750  aa  145 170 145 143
    001751  aa  165 164 145 137
    001752  aa  142 162 141 143
    001753  aa  153 145 164 000
                                        
                                        	use	main
                                        "
                                  1286  	table	call_signal,,no_execute_permission,access_audit_flag
    001442  0a   001156 000000          	zero	call_signal,
    001443  0a   001754 400000          	vfd	18/.._00045,18/access_audit_flag
                                        
                                        	use	names
    001754  aa  025 156 157 137         .._00045:	acc	"no_execute_permission"
    001755  aa  145 170 145 143
    001756  aa  165 164 145 137
    001757  aa  160 145 162 155
    001760  aa  151 163 163 151
    001761  aa  157 156 000 000
                                        
                                        	use	main
                                        "
                                  1287  	table	call_signal,,not_in_read_bracket,access_audit_flag
    001444  0a   001156 000000          	zero	call_signal,
    001445  0a   001762 400000          	vfd	18/.._00046,18/access_audit_flag
                                        
                                        	use	names
    001762  aa  023 156 157 164         .._00046:	acc	"not_in_read_bracket"
    001763  aa  137 151 156 137
    001764  aa  162 145 141 144
    001765  aa  137 142 162 141
    001766  aa  143 153 145 164
                                        
                                        	use	main
                                        "
                                  1288  	table	call_signal,,no_read_permission,access_audit_flag
    001446  0a   001156 000000          	zero	call_signal,
    001447  0a   001767 400000          	vfd	18/.._00047,18/access_audit_flag
                                        
                                        	use	names
    001767  aa  022 156 157 137         .._00047:	acc	"no_read_permission"
    001770  aa  162 145 141 144
    001771  aa  137 160 145 162
    001772  aa  155 151 163 163
    001773  aa  151 157 156 000
                                        
                                        	use	main
                                        "
                                  1289  	table	call_signal,,not_in_write_bracket,access_audit_flag
    001450  0a   001156 000000          	zero	call_signal,
    001451  0a   001774 400000          	vfd	18/.._00050,18/access_audit_flag
                                        
                                        	use	names
    001774  aa  024 156 157 164         .._00050:	acc	"not_in_write_bracket"
    001775  aa  137 151 156 137
    001776  aa  167 162 151 164
    001777  aa  145 137 142 162
    002000  aa  141 143 153 145
    002001  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1290  	table	call_signal,,no_write_permission,access_audit_flag
    001452  0a   001156 000000          	zero	call_signal,
    001453  0a   002002 400000          	vfd	18/.._00051,18/access_audit_flag
                                        
                                        	use	names
    002002  aa  023 156 157 137         .._00051:	acc	"no_write_permission"
    002003  aa  167 162 151 164
    002004  aa  145 137 160 145
    002005  aa  162 155 151 163
    002006  aa  163 151 157 156
                                        
                                        	use	main
                                        "
                                  1291  	table	call_signal,,not_a_gate,access_audit_flag
    001454  0a   001156 000000          	zero	call_signal,
    001455  0a   002007 400000          	vfd	18/.._00052,18/access_audit_flag
                                        
                                        	use	names
    002007  aa  012 156 157 164         .._00052:	acc	"not_a_gate"
    002010  aa  137 141 137 147
    002011  aa  141 164 145 000
                                        
                                        	use	main
                                        "
                                  1292  	table	call_signal,,not_in_call_bracket,access_audit_flag
    001456  0a   001156 000000          	zero	call_signal,
    001457  0a   002012 400000          	vfd	18/.._00053,18/access_audit_flag
                                        
                                        	use	names
    002012  aa  023 156 157 164         .._00053:	acc	"not_in_call_bracket"
    002013  aa  137 151 156 137
    002014  aa  143 141 154 154
    002015  aa  137 142 162 141
    002016  aa  143 153 145 164
                                        
                                        	use	main
                                        "
                                  1293  	table	standard.signal_check_coll,owc_link,outward_call
    001460  02   000512 000032          	zero	standard.signal_check_coll,owc_link
    001461  0a   002017 000000          	vfd	18/.._00054,18/
                                        
                                        	use	names
    002017  aa  014 157 165 164         .._00054:	acc	"outward_call"
    002020  aa  167 141 162 144
    002021  aa  137 143 141 154
    002022  aa  154 000 000 000
                                        
                                        	use	main
                                        "
                                  1294  	table	call_signal,,bad_outward_call,access_audit_flag
    001462  0a   001156 000000          	zero	call_signal,
    001463  0a   002023 400000          	vfd	18/.._00055,18/access_audit_flag
                                        
                                        	use	names
    002023  aa  020 142 141 144         .._00055:	acc	"bad_outward_call"
    002024  aa  137 157 165 164
    002025  aa  167 141 162 144
    002026  aa  137 143 141 154
    002027  aa  154 000 000 000
                                        
                                        	use	main
                                        "
                                  1295  	table	call_signal,,inward_return,access_audit_flag
    001464  0a   001156 000000          	zero	call_signal,
    001465  0a   002030 400000          	vfd	18/.._00056,18/access_audit_flag
                                        
                                        	use	names
    002030  aa  015 151 156 167         .._00056:	acc	"inward_return"
    002031  aa  141 162 144 137
    002032  aa  162 145 164 165
    002033  aa  162 156 000 000
                                        
                                        	use	main
                                        "
                                  1296  	table	call_signal,,cross_ring_transfer
    001466  0a   001156 000000          	zero	call_signal,
    001467  0a   002034 000000          	vfd	18/.._00057,18/
                                        
                                        	use	names
    002034  aa  023 143 162 157         .._00057:	acc	"cross_ring_transfer"
    002035  aa  163 163 137 162
    002036  aa  151 156 147 137
    002037  aa  164 162 141 156
    002040  aa  163 146 145 162
                                        
                                        	use	main
                                        "
                                  1297  	table	standard.signal_check_coll,ring_alarm_fault_link,ring_alarm_fault,1
    001470  02   000512 000020          	zero	standard.signal_check_coll,ring_alarm_fault_link
    001471  0a   002041 000001          	vfd	18/.._00060,18/1
                                        
                                        	use	names
    002041  aa  020 162 151 156         .._00060:	acc	"ring_alarm_fault"
    002042  aa  147 137 141 154
    002043  aa  141 162 155 137
    002044  aa  146 141 165 154
    002045  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1298  	table	standard,am_fault_link,am_fault
    001472  02   000520 000016          	zero	standard,am_fault_link
    001473  0a   002046 000000          	vfd	18/.._00061,18/
                                        
                                        	use	names
    002046  aa  010 141 155 137         .._00061:	acc	"am_fault"
    002047  aa  146 141 165 154
    002050  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1299  oob:	table	standard.signal_check_coll,boundfault_link,out_of_bounds,1
    001474  02   000512 000026          	zero	standard.signal_check_coll,boundfault_link
    001475  0a   002051 000001          	vfd	18/.._00062,18/1
                                        
                                        	use	names
    002051  aa  015 157 165 164         .._00062:	acc	"out_of_bounds"
    002052  aa  137 157 146 137
    002053  aa  142 157 165 156
    002054  aa  144 163 000 000
                                        
                                        	use	main
                                        "
                                  1300  ovfl:	table	call_signaller,,fixedoverflow
    001476  0a   000324 000000          	zero	call_signaller,
    001477  0a   002055 000000          	vfd	18/.._00063,18/
                                        
                                        	use	names
    002055  aa  015 146 151 170         .._00063:	acc	"fixedoverflow"
    002056  aa  145 144 157 166
    002057  aa  145 162 146 154
    002060  aa  157 167 000 000
                                        
                                        	use	main
                                        "
                                  1301  eovf:	table	call_signaller,,overflow
    001500  0a   000324 000000          	zero	call_signaller,
    001501  0a   002061 000000          	vfd	18/.._00064,18/
                                        
                                        	use	names
    002061  aa  010 157 166 145         .._00064:	acc	"overflow"
    002062  aa  162 146 154 157
    002063  aa  167 000 000 000
                                        
                                        	use	main
                                        "
                                  1302  eufl:	table	call_signaller,,underflow
    001502  0a   000324 000000          	zero	call_signaller,
    001503  0a   002064 000000          	vfd	18/.._00065,18/
                                        
                                        	use	names
    002064  aa  011 165 156 144         .._00065:	acc	"underflow"
    002065  aa  145 162 146 154
    002066  aa  157 167 000 000
                                        
                                        	use	main
                                        "
                                  1303  trun:	table	call_signaller,,stringsize
    001504  0a   000324 000000          	zero	call_signaller,
    001505  0a   002067 000000          	vfd	18/.._00066,18/
                                        
                                        	use	names
    002067  aa  012 163 164 162         .._00066:	acc	"stringsize"
    002070  aa  151 156 147 163
    002071  aa  151 172 145 000
                                        
                                        	use	main
                                        "
                                  1304  ipr:	table	call_signaller,,illegal_procedure
    001506  0a   000324 000000          	zero	call_signaller,
    001507  0a   002072 000000          	vfd	18/.._00067,18/
                                        
                                        	use	names
    002072  aa  021 151 154 154         .._00067:	acc	"illegal_procedure"
    002073  aa  145 147 141 154
    002074  aa  137 160 162 157
    002075  aa  143 145 144 165
    002076  aa  162 145 000 000
                                        
                                        	use	main
                                        "
                                  1305  stk_oob:	table	standard.signal_check_coll,stack_oob_handler,storage
    001510  02   000512 000034          	zero	standard.signal_check_coll,stack_oob_handler
    001511  0a   002077 000000          	vfd	18/.._00070,18/
                                        
                                        	use	names
    002077  aa  007 163 164 157         .._00070:	acc	"storage"
    002100  aa  162 141 147 145
                                        
                                        	use	main
                                        "
                                  1306  ppf:	table	call_signal,,packed_pointer_fault
    001512  0a   001156 000000          	zero	call_signal,
    001513  0a   002101 000000          	vfd	18/.._00071,18/
                                        
                                        	use	names
    002101  aa  024 160 141 143         .._00071:	acc	"packed_pointer_fault"
    002102  aa  153 145 144 137
    002103  aa  160 157 151 156
    002104  aa  164 145 162 137
    002105  aa  146 141 165 154
    002106  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1307  sppf:	table	call_signal,,lot_fault
    001514  0a   001156 000000          	zero	call_signal,
    001515  0a   002107 000000          	vfd	18/.._00072,18/
                                        
                                        	use	names
    002107  aa  011 154 157 164         .._00072:	acc	"lot_fault"
    002110  aa  137 146 141 165
    002111  aa  154 164 000 000
                                        
                                        	use	main
                                        "
                                  1308  	table	call_signal,,isot_fault
    001516  0a   001156 000000          	zero	call_signal,
    001517  0a   002112 000000          	vfd	18/.._00073,18/
                                        
                                        	use	names
    002112  aa  012 151 163 157         .._00073:	acc	"isot_fault"
    002113  aa  164 137 146 141
    002114  aa  165 154 164 000
                                        
                                        	use	main
                                        "
                                  1309  	table	call_signal,,system_packed_pointer
    001520  0a   001156 000000          	zero	call_signal,
    001521  0a   002115 000000          	vfd	18/.._00074,18/
                                        
                                        	use	names
    002115  aa  025 163 171 163         .._00074:	acc	"system_packed_pointer"
    002116  aa  164 145 155 137
    002117  aa  160 141 143 153
    002120  aa  145 144 137 160
    002121  aa  157 151 156 164
    002122  aa  145 162 000 000
                                        
                                        	use	main
                                        "
                                  1310  quit_loc:	table	call_signal,,quit
    001522  0a   001156 000000          	zero	call_signal,
    001523  0a   002123 000000          	vfd	18/.._00075,18/
                                        
                                        	use	names
    002123  aa  004 161 165 151         .._00075:	acc	"quit"
    002124  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1311  alrm_loc:	table	call_signal,,alrm
    001524  0a   001156 000000          	zero	call_signal,
    001525  0a   002125 000000          	vfd	18/.._00076,18/
                                        
                                        	use	names
    002125  aa  004 141 154 162         .._00076:	acc	"alrm"
    002126  aa  155 000 000 000
                                        
                                        	use	main
                                        "
                                  1312  cput_loc:	table	call_signal,,cput
    001526  0a   001156 000000          	zero	call_signal,
    001527  0a   002127 000000          	vfd	18/.._00077,18/
                                        
                                        	use	names
    002127  aa  004 143 160 165         .._00077:	acc	"cput"
    002130  aa  164 000 000 000
                                        
                                        	use	main
                                        "
                                  1313  rqo_loc:	table	call_signal,,record_quota_overflow
    001530  0a   001156 000000          	zero	call_signal,
    001531  0a   002131 000000          	vfd	18/.._00100,18/
                                        
                                        	use	names
    002131  aa  025 162 145 143         .._00100:	acc	"record_quota_overflow"
    002132  aa  157 162 144 137
    002133  aa  161 165 157 164
    002134  aa  141 137 157 166
    002135  aa  145 162 146 154
    002136  aa  157 167 000 000
                                        
                                        	use	main
                                        "
                                  1314  size_loc: table	call_signaller,,size
    001532  0a   000324 000000          	zero	call_signaller,
    001533  0a   002137 000000          	vfd	18/.._00101,18/
                                        
                                        	use	names
    002137  aa  004 163 151 172         .._00101:	acc	"size"
    002140  aa  145 000 000 000
                                        
                                        	use	main
                                        "
                                  1315  	table	call_signal,,neti
    001534  0a   001156 000000          	zero	call_signal,
    001535  0a   002141 000000          	vfd	18/.._00102,18/
                                        
                                        	use	names
    002141  aa  004 156 145 164         .._00102:	acc	"neti"
    002142  aa  151 000 000 000
                                        
                                        	use	main
                                        "
                                  1316  com:	table	standard,hardware_fault_link,command
    001536  02   000520 000024          	zero	standard,hardware_fault_link
    001537  0a   002143 000000          	vfd	18/.._00103,18/
                                        
                                        	use	names
    002143  aa  007 143 157 155         .._00103:	acc	"command"
    002144  aa  155 141 156 144
                                        
                                        	use	main
                                        "
                                  1317  	table	call_signal,,sus_
    001540  0a   001156 000000          	zero	call_signal,
    001541  0a   002145 000000          	vfd	18/.._00104,18/
                                        
                                        	use	names
    002145  aa  004 163 165 163         .._00104:	acc	"sus_"
    002146  aa  137 000 000 000
                                        
                                        	use	main
                                        "
                                  1318  	table	call_signal,,trm_
    001542  0a   001156 000000          	zero	call_signal,
    001543  0a   002147 000000          	vfd	18/.._00105,18/
                                        
                                        	use	names
    002147  aa  004 164 162 155         .._00105:	acc	"trm_"
    002150  aa  137 000 000 000
                                        
                                        	use	main
                                        "
                                  1319  	table	call_signal,,wkp_
    001544  0a   001156 000000          	zero	call_signal,
    001545  0a   002151 000000          	vfd	18/.._00106,18/
                                        
                                        	use	names
    002151  aa  004 167 153 160         .._00106:	acc	"wkp_"
    002152  aa  137 000 000 000
                                        
                                        	use	main
                                        "
                                  1320  undefp:	table	call_signal,,undefined_pointer
    001546  0a   001156 000000          	zero	call_signal,
    001547  0a   002153 000000          	vfd	18/.._00107,18/
                                        
                                        	use	names
    002153  aa  021 165 156 144         .._00107:	acc	"undefined_pointer"
    002154  aa  145 146 151 156
    002155  aa  145 144 137 160
    002156  aa  157 151 156 164
    002157  aa  145 162 000 000
                                        
                                        	use	main
                                        "
                                  1321  	table	call_signal,,pgt_
    001550  0a   001156 000000          	zero	call_signal,
    001551  0a   002160 000000          	vfd	18/.._00110,18/
                                        
                                        	use	names
    002160  aa  004 160 147 164         .._00110:	acc	"pgt_"
    002161  aa  137 000 000 000
                                        
                                        	use	main
                                        "
                                  1322  	table	call_signal,,system_shutdown_scheduled_
    001552  0a   001156 000000          	zero	call_signal,
    001553  0a   002162 000000          	vfd	18/.._00111,18/
                                        
                                        	use	names
    002162  aa  032 163 171 163         .._00111:	acc	"system_shutdown_scheduled_"
    002163  aa  164 145 155 137
    002164  aa  163 150 165 164
    002165  aa  144 157 167 156
    002166  aa  137 163 143 150
    002167  aa  145 144 165 154
    002170  aa  145 144 137 000
                                        
                                        	use	main
                                        "
                                  1323  	table	call_signal,,dm_shutdown_scheduled_
    001554  0a   001156 000000          	zero	call_signal,
    001555  0a   002171 000000          	vfd	18/.._00112,18/
                                        
                                        	use	names
    002171  aa  026 144 155 137         .._00112:	acc	"dm_shutdown_scheduled_"
    002172  aa  163 150 165 164
    002173  aa  144 157 167 156
    002174  aa  137 163 143 150
    002175  aa  145 144 165 154
    002176  aa  145 144 137 000
                                        
                                        	use	main
                                        "
                                  1324  	table	call_signal,,system_message_
    001556  0a   001156 000000          	zero	call_signal,
    001557  0a   002177 000000          	vfd	18/.._00113,18/
                                        
                                        	use	names
    002177  aa  017 163 171 163         .._00113:	acc	"system_message_"
    002200  aa  164 145 155 137
    002201  aa  155 145 163 163
    002202  aa  141 147 145 137
                                        
                                        	use	main
                                        "
                                  1325  " 
                                  1326  	include	mc
                                   1-1  "
                                   1-2  "	BEGIN INCLUDE FILE  mc.incl.alm  6/72 SHW
                                   1-3  "	Modified 8/80 by J. A. Bush for dps8/70M CPU
                                   1-4  "
                                   1-5  
                                   1-6  "	General layout of data items.
                                   1-7  
                        000000     1-8  	equ	mc.prs,0		pointer registers
                        000020     1-9  	equ	mc.regs,16	registers
                        000030    1-10  	equ	mc.scu,24		SCU data
                        000050    1-11  	equ	mc.eis_info,40	pointers and lengths for EIS
                                  1-12  
                                  1-13  "	Temporary storage for software
                                  1-14  
                        000040    1-15  	equ	mc.mask,32	system controller mask at time of fault
                        000042    1-16  	equ	mc.ips_temp,34	temporary storage for IPS info
                        000043    1-17  	equ	mc.errcode,35	error code
                        000044    1-18  	equ	mc.fim_temp,36	temporary to hold fault index and unique index
                        000045    1-19  	equ	mc.fault_reg,37	fault register
                        000046    1-20  	equ	mc.fault_time,38	time of fault
                        000046    1-21  	equ	mc.cpu_type_word,38	CPU type from  rsw (2). overlays part of time word
                        300000    1-22  	bool	mc.cpu_type_mask,300000 DU
                        000046    1-23  	equ	mc.ext_fault_reg,38	ext fault reg for dps8. overlays part of time word
                        077774    1-24  	bool	mc.ext_fault_reg_mask,77774 DU
                        000003    1-25  	equ	mc.cpu_type_shift,3 positions to shift right or left
                                  1-26  
                                  1-27  
                                  1-28  
                                  1-29  "	SCU  DATA
                                  1-30  
                                  1-31  "	WORD  (0)		PROCEDURE POINTER REGISTER
                                  1-32  
                        000030    1-33  	equ	mc.scu.ppr.prr_word,24	Procedure Ring Register
                        000000    1-34  	equ	scu.ppr.prr_word,0
                        700000    1-35  	bool	scu.ppr.prr_mask,700000	DU
                        000041    1-36  	equ	scu.ppr.prr_shift,33
                                  1-37  
                        000030    1-38  	equ	mc.scu.ppr.psr_word,24	Procedure Segment Register
                        000000    1-39  	equ	scu.ppr.psr_word,0
                        077777    1-40  	bool	scu.ppr.psr_mask,077777	DU
                        000022    1-41  	equ	scu.ppr.psr_shift,18
                                  1-42  
                        000030    1-43  	equ	mc.scu.ppr.p_word,24	Procedure Privileged Bit
                        000000    1-44  	equ	scu.ppr.p_word,0
                        400000    1-45  	bool	scu.ppr.p,400000		DL
                                  1-46  
                                  1-47  "	  APPENDING UNIT STATUS
                        000030    1-48  	equ	mc.scu.apu_stat_word,24	APPENDING UNIT STATUS
                        000000    1-49  	equ	scu.apu_stat_word,0		
                                  1-50  
                        200000    1-51  	bool	scu.apu.xsf,200000		DL - Ext Seg Flag - IT mod.
                        100000    1-52  	bool	scu.apu.sdwm,100000		DL - Match in SDW Ass. Mem.
                        040000    1-53  	bool	scu.apu.sd_on,040000	DL - SDW Ass. Mem.  ON
                        020000    1-54  	bool	scu.apu.ptwm,020000		DL - Match in PTW Ass. Mem.
                        010000    1-55  	bool	scu.apu.pt_on,010000	DL - PTW Ass. Mem.  ON
                        004000    1-56  	bool	scu.apu.pi_ap,004000	DL - Instr fetch or Append cycle
                        002000    1-57  	bool	scu.apu.dsptw,002000	DL - Fetch of DSPTW
                        001000    1-58  	bool	scu.apu.sdwnp,001000	DL - Fetch of SDW non-paged
                        000400    1-59  	bool	scu.apu.sdwp,000400		DL - Fetch of SDW paged
                        000200    1-60  	bool	scu.apu.ptw,000200		DL - Fetch of PTW
                        000100    1-61  	bool	scu.apu.ptw2,000100		DL - Fetch of pre-paged  PTW
                        000040    1-62  	bool	scu.apu.fap,000040		DL - Fetch of final address paged
                        000020    1-63  	bool	scu.apu.fanp,000020		DL - Fetch final address non-paged
                        000010    1-64  	bool	scu.apu.fabs,000010		DL - Fetch of final address absolute
                                  1-65  
                        000030    1-66  	equ	mc.scu.fault_cntr_word,24	Num of retrys of EIS instructions.
                        000000    1-67  	equ	scu.fault_cntr_word,0	
                                  1-68  
                        000007    1-69  	bool	scu.fault_cntr_mask,000007
                                  1-70  
                                  1-71  
                                  1-72  "	WORD  (1)		FAULT DATA
                                  1-73  
                        000031    1-74  	equ	mc.scu.fault_data_word,25	FAULT  DATA
                        000001    1-75  	equ	scu.fault_data_word,1
                                  1-76  
                        400000    1-77  	bool	scu.fd.iro,400000		DU - Illegal Ring Order
                        200000    1-78  	bool	scu.fd.oeb,200000		DU - Not In Execute Bracket
                        100000    1-79  	bool	scu.fd.e_off,100000		DU - No  Execute
                        040000    1-80  	bool	scu.fd.orb,040000		DU - Not In Read Bracket
                        020000    1-81  	bool	scu.fd.r_off,020000		DU - No  Read
                        010000    1-82  	bool	scu.fd.owb,010000		DU - Not In Write Bracket
                        004000    1-83  	bool	scu.fd.w_off,004000		DU - No  Write
                        002000    1-84  	bool	scu.fd.no_ga,002000		DU - Not A Gate
                        001000    1-85  	bool	scu.fd.ocb,001000		DU - Not in  Call Bracket
                        000400    1-86  	bool	scu.fd.ocall,000400		DU - Outward Call
                        000200    1-87  	bool	scu.fd.boc,000200		DU - Bad Outward Call
                        000100    1-88  	bool	scu.fd.inret,000100		DU - Inward Return
                        000040    1-89  	bool	scu.fd.crt,000040		DU - Cross  Ring Transfer
                        000020    1-90  	bool	scu.fd.ralr,000020		DU - Ring   Alarm
                        000010    1-91  	bool	scu.fd.am_er,000010		DU - Assoc. Mem. Fault
                        000004    1-92  	bool	scu.fd.oosb,000004		DU - Out Of Bounds
                        000002    1-93  	bool	scu.fd.paru,000002		DU - Parity Upper
                        000001    1-94  	bool	scu.fd.parl,000001		DU - Parity Lower
                                  1-95  
                        400000    1-96  	bool	scu.fd.onc_1,400000		DL - Op Not Complete
                        200000    1-97  	bool	scu.fd.onc_2,200000		DL - Op Not Complete
                                  1-98  
                                  1-99  "  	  GROUP II  FAULT DATA
                        400000   1-100  	bool	scu.fd.isn,400000		DU - Illegal Segment Number
                        200000   1-101  	bool	scu.fd.ioc,200000		DU - Illegal Op Code
                        100000   1-102  	bool	scu.fd.ia_im,100000		DU - Illegal Addr - Modifier
                        040000   1-103  	bool	scu.fd.isp,040000		DU - Illegal Slave Procedure
                        020000   1-104  	bool	scu.fd.ipr,020000		DU - Illegal Procedure
                        010000   1-105  	bool	scu.fd.nea,010000		DU - Non Existent Address
                        004000   1-106  	bool	scu.fd.oobb,004000		DU - Out Of  Bounds
                                 1-107  
                        000031   1-108  	equ	mc.scu.port_stat_word,25	PORT STATUS
                        000001   1-109  	equ	scu.port_stat_word,1
                                 1-110  
                        170000   1-111  	bool	scu.ial_mask,170000		DL - Illegal Action Lines
                        000014   1-112  	equ	scu.ial_shift,12
                                 1-113  
                        007000   1-114  	bool	scu.iac_mask,007000		DL - Illegal Action Channel
                        000011   1-115  	equ	scu.iac_shift,9
                                 1-116  
                        000700   1-117  	bool	scu.con_chan_mask,000700	DL - Connect Channel
                        000006   1-118  	equ	scu.con_chan_shift,6
                                 1-119  
                        000076   1-120  	bool	scu.fi_num_mask,000076	DL - Fault / Interrupt  Number
                        000001   1-121  	equ	scu.fi_num_shift,1
                                 1-122  
                        000001   1-123  	bool	scu.fi_flag_mask,000001	DL - Fault / Interrupt  Flag
                                 1-124  
                                 1-125  
                                 1-126  "	WORD  (2)		TEMPORARY POINTER REGISTER
                                 1-127  
                        000032   1-128  	equ	mc.scu.tpr.trr_word,26	Temporary Ring Register
                        000002   1-129  	equ	scu.tpr.trr_word,2
                        700000   1-130  	bool	scu.tpr.trr_mask,700000	DU
                        000041   1-131  	equ	scu.tpr.trr_shift,33
                                 1-132  
                        000032   1-133  	equ	mc.scu.tpr.tsr_word,26	Temporary Segment Register
                        000002   1-134  	equ	scu.tpr.tsr_word,2
                        077777   1-135  	bool	scu.tpr.tsr_mask,077777	DU
                        000022   1-136  	equ	scu.tpr.tsr_shift,18
                                 1-137  
                        000032   1-138  	equ	mc.scu.cpu_no_word,26	CPU  Number
                        000002   1-139  	equ	scu.cpu_no_word,2
                                 1-140  
                        000700   1-141  	bool	scu.cpu_no_mask,000700	DL
                        000006   1-142  	equ	scu.cpu_shift,6
                                 1-143  
                        000032   1-144  	equ	mc.scu.delta_word,26	Tally Modification DELTA
                        000002   1-145  	equ	scu.delta_word,2
                                 1-146  
                        000077   1-147  	bool	scu.delta_mask,000077	DL
                                 1-148  
                                 1-149  
                                 1-150  "	WORD  (3)		TSR STATUS
                                 1-151  
                        000033   1-152  	equ	mc.scu.tsr_stat_word,27	TSR STATUS for 1,2, and 3
                        000003   1-153  	equ	scu.tsr_stat_word,3		Word Instructions
                                 1-154  
                        777700   1-155  	bool	scu.tsr_stat_mask,777700	DL - All of Status
                        000006   1-156  	equ	scu.tsr_stat_shift,6
                                 1-157  
                        740000   1-158  	bool	scu.tsna_mask,740000	DL - Word 1 Status
                        700000   1-159  	bool	scu.tsna.prn_mask,700000	DL - Word 1 PR num
                        000017   1-160  	equ	scu.tsna.prn_shift,15
                        040000   1-161  	bool	scu.tsna.prv,040000		DL - Word 1 PR valid bit
                                 1-162  
                        036000   1-163  	bool	scu.tsnb_mask,036000	DL - Word 2 Status
                        034000   1-164  	bool	scu.tsnb.prn_mask,034000	DL - Word 2 PR num
                        000013   1-165  	equ	scu.tsnb.prn_shift,11
                        002000   1-166  	bool	scu.tsnb.prv,002000		DL - Word 2 PR valid bit
                                 1-167  
                        000013   1-168  	bool	scu.tsnc_mask,0013		DL - Word 3 Status
                        001600   1-169  	bool 	scu.tsnc.prn_mask,001600	DL - Word 3 PR num
                        000007   1-170  	equ	scu.tsnc.prn_shift,7
                        000100   1-171  	bool	scu.tsnc.prv,000100		DL - Word 3 PR valid bit
                                 1-172  
                                 1-173  
                        000033   1-174  	equ	mc.scu.tpr.tbr_word,27	TPR.TBR  Field
                        000003   1-175  	equ	scu.tpr.tbr_word,3
                                 1-176  
                        000077   1-177  	bool	scu.tpr.tbr_mask,000077	DL
                                 1-178  
                                 1-179  
                                 1-180  "	WORD  (4)		INSTRUCTION COUNTER
                                 1-181  
                        000034   1-182  	equ	mc.scu.ilc_word,28		INSTRUCTION  COUNTER
                        000004   1-183  	equ	scu.ilc_word,4
                        000022   1-184  	equ	scu.ilc_shift,18
                                 1-185  
                        000034   1-186  	equ	mc.scu.indicators_word,28	INDICATOR  REGISTERS
                        000004   1-187  	equ	scu.indicators_word,4
                                 1-188  
                        400000   1-189  	bool	scu.ir.zero,400000		DL - Zero  Indicator
                        200000   1-190  	bool	scu.ir.neg,200000		DL - Negative Indicator
                        100000   1-191  	bool	scu.ir.carry,100000		DL - Carry Indicator
                        040000   1-192  	bool	scu.ir.ovfl,040000		DL - Overflow Indicator
                        020000   1-193  	bool	scu.ir.eovf,020000		DL - Exponent Overflow  Ind
                        010000   1-194  	bool	scu.ir.eufl,010000		DL - Exponent Underflow Ind
                        004000   1-195  	bool	scu.ir.oflm,004000		DL - Overflow Mask Indicator
                        002000   1-196  	bool	scu.ir.tro,002000		DL - Tally Runout  Indicator
                        001000   1-197  	bool	scu.ir.par,001000		DL - Parity  Indicator
                        000400   1-198  	bool	scu.ir.parm,000400		DL - Parity  Mask  Indicator
                        000200   1-199  	bool	scu.ir.bm,000200			DL - Bar  Mode  Indicator
                        000100   1-200  	bool	scu.ir.tru,000100		DL - Truncation Indicator
                        000040   1-201  	bool	scu.ir.mif,000040		DL - Multiword  Indicator
                        000020   1-202  	bool	scu.ir.abs,000020		DL - Absolute   Indicator
                        000010   1-203  	bool	scu.ir.hex,000010		DL - Hexadecimal Indicator
                                 1-204  
                                 1-205  "	WORD  (5)		COMPUTED ADDRESS
                                 1-206  
                        000035   1-207  	equ	mc.scu.ca_word,29		COMPUTED  ADDRESS
                        000005   1-208  	equ	scu.ca_word,5
                        000022   1-209  	equ	scu.ca_shift,18
                                 1-210  
                        000035   1-211  	equ	mc.scu.cu_stat_word,29	CONTROL UNIT STATUS
                        000005   1-212  	equ	scu.cu_stat_word,5
                                 1-213  
                        400000   1-214  	bool	scu.cu.rf,400000		DL - Repeat First
                                 1-215  "					On First Cycle of Repeat Inst.
                        200000   1-216  	bool	scu.cu.rpt,200000		DL - Repeat Instruction
                        100000   1-217  	bool	scu.cu.rd,100000		DL - Repeat Double Instr.
                        040000   1-218  	bool	scu.cu.rl,040000		DL - Repeat Link   Instr.
                                 1-219  
                        020000   1-220  	bool	scu.cu.pot,020000		DL - IT Modification
                        010000   1-221  	bool	scu.cu.pon,010000		DL - Return Type Instruction
                                 1-222  
                        004000   1-223  	bool	scu.cu.xde,004000		DL - XDE from Even Location
                        002000   1-224  	bool	scu.cu.xdo,002000		DL - XDE from Odd  Location
                                 1-225  
                        001000   1-226  	bool	scu.cu.poa,001000		DL - Operand Preparation
                        000400   1-227  	bool	scu.cu.rfi,000400		DL - Tells CPU to refetch instruction
                                 1-228  "	This Bit  Not Used    (000200)
                        000100   1-229  	bool	scu.cu.if,000100		DL - Fault occurred during instruction fetch
                                 1-230  
                        000035   1-231  	equ	mc.scu.cpu_tag_word,29	Computed Tag Field
                        000005   1-232  	equ	scu.cpu_tag_word,5
                                 1-233  
                        000007   1-234  	bool	scu.cpu_tag_mask,000007	DL
                                 1-235  
                                 1-236  
                                 1-237  "	WORDS  (6,7)	INSTRUCTIONS
                                 1-238  
                        000036   1-239  	equ	scu.even_inst_word,30	Even Instruction
                                 1-240  
                        000037   1-241  	equ	scu.odd_inst_word,31	Odd  Instruction
                                 1-242  
                                 1-243  
                                 1-244  "	END INCLUDE FILE incl.alm
                                  1327  " 
                                  1328  	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                  1329  " 
                                  1330  	include	access_audit_flags
                                   3-1  " BEGIN INCLUDE FILE access_audit_flags.incl.alm
                                   3-2  "
                                   3-3  "  NOTE:  All changes must also be done to access_audit_flags.incl.alm
                                   3-4  "
                                   3-5  "	Masks for extracting elements of the per-process security
                                   3-6  "	auditing flags (pds$audit_flags).
                                   3-7  "
                                   3-8  "	History:
                                   3-9  "	85-01-07 EJ Sharpe - cleanup
                                  3-10  "	84-12-03 EJ Sharpe - created
                                  3-11  "	85-04-05 KP Loepere - added shift flag
                                  3-12  "
                                  3-13  
                                  3-14  "    Upper 18 bit definitions
                                  3-15  
                        000002    3-16  	equ	audit_flags.grant_or_deny_shift,2
                        000040    3-17  	equ	audit_flags.grant_deny_shift,32
                                  3-18  
                        600000    3-19  	bool	audit_flags.fsobj_grant_mask,600000
                        140000    3-20  	bool	audit_flags.fsobj_deny_mask,140000
                        030000    3-21  	bool	audit_flags.fsattr_grant_mask,030000
                        006000    3-22  	bool	audit_flags.fsattr_deny_mask,006000
                        001400    3-23  	bool	audit_flags.rcp_grant_mask,001400
                        000300    3-24  	bool	audit_flags.rcp_deny_mask,000300
                        000060    3-25  	bool	audit_flags.admin_grant_mask,000060
                        000014    3-26  	bool	audit_flags.admin_deny_mask,000014
                        000003    3-27  	bool	audit_flags.special_grant_mask,000003
                                  3-28  
                                  3-29  "    Lower 18 bit definitions
                                  3-30  
                        600000    3-31  	bool	audit_flags.special_deny_mask,600000
                        140000    3-32  	bool	audit_flags.other_grant_mask,140000
                        030000    3-33  	bool	audit_flags.other_deny_mask,030000
                                  3-34  
                        007740    3-35  	bool	audit_flags.pad,007740
                                  3-36  
                        000020    3-37  	bool	audit_flags.admin_ops,000020
                        000010    3-38  	bool	audit_flags.priv_ops,000010
                        000004    3-39  	bool	audit_flags.faults,000004
                        000002    3-40  	bool	audit_flags.cc_1_10,000002
                        000001    3-41  	bool	audit_flags.cc_10_100,000001
                                  3-42  
                                  3-43  " END INCLUDE FILE access_audit_flags.incl.alm
                                  1331  " 
                                  1332  	include	sdw
                                   4-1  " BEGIN INCLUDE FILE ... sdw.incl.alm ... 03/01/81, for ADP conversion
                                   4-2  
                                   4-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	sdw.l68
                                   5-1  
                                   5-2  
                                   5-3       "BEGIN INCLUDE FILE sdw.l68.incl.alm
                                   5-4  
                                   5-5  
                                   5-6  	"Created 04/05/81  1616.1 est Sun by convert_include_file,
                                   5-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   5-8  
                                   5-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>sdw.l68.incl.pl1,
                                  5-10  	"   modified 03/20/81  2215.5 est Fri
                                  5-11  
                                  5-12  "
                                  5-13  "	Structure sdw
                                  5-14  "
                        000002    5-15  	equ	sdw_size,2
                                  5-16  
                        000000    5-17  	equ	sdw.add_word,0
                        000014    5-18  	equ	sdw.add_shift,12
                        000000    5-19  	equ	sdw.rings_word,0
                        000003    5-20  	equ	sdw.rings_shift,3
                        000777    5-21  	bool	sdw.rings_mask,000777
                        000000    5-22  	equ	sdw.r1_word,0
                        000011    5-23  	equ	sdw.r1_shift,9
                        000007    5-24  	bool	sdw.r1_mask,000007
                        000000    5-25  	equ	sdw.r2_word,0
                        000006    5-26  	equ	sdw.r2_shift,6
                        000007    5-27  	bool	sdw.r2_mask,000007
                        000000    5-28  	equ	sdw.r3_word,0
                        000003    5-29  	equ	sdw.r3_shift,3
                        000007    5-30  	bool	sdw.r3_mask,000007
                        000000    5-31  	equ	sdw.valid_word,0
                        000004    5-32  	bool	sdw.valid,000004	" DL
                        000000    5-33  	equ	sdw.df_no_word,0
                        000000    5-34  	equ	sdw.df_no_shift,0
                        000003    5-35  	bool	sdw.df_no_mask,000003
                                  5-36  
                        000001    5-37  	equ	sdw.bound_word,1
                        000025    5-38  	equ	sdw.bound_shift,21
                        037777    5-39  	bool	sdw.bound_mask,037777
                        000001    5-40  	equ	sdw.access_word,1
                        000021    5-41  	equ	sdw.access_shift,17
                        000017    5-42  	bool	sdw.access_mask,000017
                        000001    5-43  	equ	sdw.read_word,1
                        000004    5-44  	bool	sdw.read,000004		" DU
                        000001    5-45  	equ	sdw.execute_word,1
                        000002    5-46  	bool	sdw.execute,000002	" DU
                        000001    5-47  	equ	sdw.write_word,1
                        000001    5-48  	bool	sdw.write,000001	" DU
                        000001    5-49  	equ	sdw.privileged_word,1
                        400000    5-50  	bool	sdw.privileged,400000	" DL
                        000001    5-51  	equ	sdw.unpaged_word,1
                        200000    5-52  	bool	sdw.unpaged,200000	" DL
                        000001    5-53  	equ	sdw.not_a_gate_word,1
                        100000    5-54  	bool	sdw.not_a_gate,100000	" DL
                        000001    5-55  	equ	sdw.cache_word,1
                        040000    5-56  	bool	sdw.cache,040000	" DL
                        000001    5-57  	equ	sdw.entry_bound_word,1
                        000000    5-58  	equ	sdw.entry_bound_shift,0
                        037777    5-59  	bool	sdw.entry_bound_mask,037777
                                  5-60  
                                  5-61       "END INCLUDE FILE sdw.l68.incl.alm
                                        "	ifend
                                   4-6  
                                   4-7  	iftarget	adp
                                        "	 include	sdw.adp
                                        "	ifend
                                  4-10  
                                  4-11  " END INCLUDE FILE ... sdw.incl.alm
                                  1333  " 
                                  1334  	include	history_regs_dps8
                                   6-1       "BEGIN INCLUDE FILE history_regs_dps8.incl.alm
                                   6-2  
                                   6-3  
                                   6-4  	"Created 03/15/83  1430.7 est Tue by convert_include_file,
                                   6-5  	"   Version of 11/07/82  1445.1 est Sun.
                                   6-6  
                                   6-7  	"Made from >user_dir_dir>Multics>Bush>history_regs_dps8.incl.pl1,
                                   6-8  	"   modified 03/15/83  1430.6 est Tue
                                   6-9  
                        000000    6-10  	equ	du_ou_offset,0		" MANIFEST
                        000040    6-11  	equ	cu_offset,32		" MANIFEST
                        000100    6-12  	equ	au_offset2,64		" MANIFEST
                        000140    6-13  	equ	au_offset1,96		" MANIFEST
                                  6-14  
                                  6-15  "
                                  6-16  "	Structure cuhr
                                  6-17  "
                        000000    6-18  	equ	cuhr.pia_word,0
                        400000    6-19  	bool	cuhr.pia,400000		" DU
                        000000    6-20  	equ	cuhr.poa_word,0
                        200000    6-21  	bool	cuhr.poa,200000		" DU
                        000000    6-22  	equ	cuhr.riw_word,0
                        100000    6-23  	bool	cuhr.riw,100000		" DU
                        000000    6-24  	equ	cuhr.siw_word,0
                        040000    6-25  	bool	cuhr.siw,040000		" DU
                        000000    6-26  	equ	cuhr.pot_word,0
                        020000    6-27  	bool	cuhr.pot,020000		" DU
                        000000    6-28  	equ	cuhr.pon_word,0
                        010000    6-29  	bool	cuhr.pon,010000		" DU
                        000000    6-30  	equ	cuhr.raw_word,0
                        004000    6-31  	bool	cuhr.raw,004000		" DU
                        000000    6-32  	equ	cuhr.saw_word,0
                        002000    6-33  	bool	cuhr.saw,002000		" DU
                        000000    6-34  	equ	cuhr.rtrgo_word,0
                        001000    6-35  	bool	cuhr.rtrgo,001000		" DU
                        000000    6-36  	equ	cuhr.xde_word,0
                        000400    6-37  	bool	cuhr.xde,000400		" DU
                        000000    6-38  	equ	cuhr.xdo_word,0
                        000200    6-39  	bool	cuhr.xdo,000200		" DU
                        000000    6-40  	equ	cuhr.ic_word,0
                        000100    6-41  	bool	cuhr.ic,000100		" DU
                        000000    6-42  	equ	cuhr.rpts_word,0
                        000040    6-43  	bool	cuhr.rpts,000040		" DU
                        000000    6-44  	equ	cuhr.portf_word,0
                        000020    6-45  	bool	cuhr.portf,000020		" DU
                        000000    6-46  	equ	cuhr.internal_word,0
                        000010    6-47  	bool	cuhr.internal,000010	" DU
                        000000    6-48  	equ	cuhr.pai_word,0
                        000004    6-49  	bool	cuhr.pai,000004		" DU
                        000000    6-50  	equ	cuhr.pfa_word,0
                        000002    6-51  	bool	cuhr.pfa,000002		" DU
                        000000    6-52  	equ	cuhr.master_mode_word,0
                        000001    6-53  	bool	cuhr.master_mode,000001	" DU
                        000000    6-54  	equ	cuhr.op_code_word,0
                        000010    6-55  	equ	cuhr.op_code_shift,8
                        001777    6-56  	bool	cuhr.op_code_mask,001777
                        000000    6-57  	equ	cuhr.inhib_word,0
                        000200    6-58  	bool	cuhr.inhib,000200		" DL
                        000000    6-59  	equ	cuhr.its_flag_word,0
                        000100    6-60  	bool	cuhr.its_flag,000100	" DL
                        000000    6-61  	equ	cuhr.tag_word,0
                        000000    6-62  	equ	cuhr.tag_shift,0
                        000077    6-63  	bool	cuhr.tag_mask,000077
                                  6-64  
                        000001    6-65  	equ	cuhr.ca_value_word,1
                        000014    6-66  	equ	cuhr.ca_value_shift,12
                        000001    6-67  	equ	cuhr.pcmd_word,1
                        000007    6-68  	equ	cuhr.pcmd_shift,7
                        000037    6-69  	bool	cuhr.pcmd_mask,000037
                        000001    6-70  	equ	cuhr.xint_word,1
                        000100    6-71  	bool	cuhr.xint,000100		" DL
                        000001    6-72  	equ	cuhr.ins_fetch_word,1
                        000040    6-73  	bool	cuhr.ins_fetch,000040	" DL
                        000001    6-74  	equ	cuhr.cache_rd_word,1
                        000020    6-75  	bool	cuhr.cache_rd,000020	" DL
                        000001    6-76  	equ	cuhr.mem_rd_word,1
                        000010    6-77  	bool	cuhr.mem_rd,000010		" DL
                        000001    6-78  	equ	cuhr.mem_sto_word,1
                        000004    6-79  	bool	cuhr.mem_sto,000004		" DL
                        000001    6-80  	equ	cuhr.pib_word,1
                        000002    6-81  	bool	cuhr.pib,000002		" DL
                        000001    6-82  	equ	cuhr.cache_flush_word,1
                        000001    6-83  	bool	cuhr.cache_flush,000001	" DL
                                  6-84  
                                  6-85  "
                                  6-86  "	Structure du_ouhr
                                  6-87  "
                        000000    6-88  	equ	du_ouhr.fanld1_word,0
                        400000    6-89  	bool	du_ouhr.fanld1,400000	" DU
                        000000    6-90  	equ	du_ouhr.fanld2_word,0
                        200000    6-91  	bool	du_ouhr.fanld2,200000	" DU
                        000000    6-92  	equ	du_ouhr.fanstr_word,0
                        100000    6-93  	bool	du_ouhr.fanstr,100000	" DU
                        000000    6-94  	equ	du_ouhr.fldwrt1_word,0
                        040000    6-95  	bool	du_ouhr.fldwrt1,040000	" DU
                        000000    6-96  	equ	du_ouhr.fldwrt2_word,0
                        020000    6-97  	bool	du_ouhr.fldwrt2,020000	" DU
                        000000    6-98  	equ	du_ouhr.fnld1_word,0
                        010000    6-99  	bool	du_ouhr.fnld1,010000	" DU
                        000000   6-100  	equ	du_ouhr.fnld2_word,0
                        004000   6-101  	bool	du_ouhr.fnld2,004000	" DU
                        000000   6-102  	equ	du_ouhr.endseqf_word,0
                        002000   6-103  	bool	du_ouhr.endseqf,002000	" DU
                        000000   6-104  	equ	du_ouhr.fdud_word,0
                        001000   6-105  	bool	du_ouhr.fdud,001000		" DU
                        000000   6-106  	equ	du_ouhr.fgstr_word,0
                        000400   6-107  	bool	du_ouhr.fgstr,000400	" DU
                        000000   6-108  	equ	du_ouhr.endseq_word,0
                        000200   6-109  	bool	du_ouhr.endseq,000200	" DU
                        000000   6-110  	equ	du_ouhr.nine_word,0
                        000100   6-111  	bool	du_ouhr.nine,000100		" DU
                        000000   6-112  	equ	du_ouhr.six_word,0
                        000040   6-113  	bool	du_ouhr.six,000040		" DU
                        000000   6-114  	equ	du_ouhr.four_word,0
                        000020   6-115  	bool	du_ouhr.four,000020		" DU
                        000000   6-116  	equ	du_ouhr.du_bit_word,0
                        000010   6-117  	bool	du_ouhr.du_bit,000010	" DU
                        000000   6-118  	equ	du_ouhr.du_word_word,0
                        000004   6-119  	bool	du_ouhr.du_word,000004	" DU
                        000000   6-120  	equ	du_ouhr.ptr1_word,0
                        000002   6-121  	bool	du_ouhr.ptr1,000002		" DU
                        000000   6-122  	equ	du_ouhr.ptr2_word,0
                        000001   6-123  	bool	du_ouhr.ptr2,000001		" DU
                        000000   6-124  	equ	du_ouhr.ptr3_word,0
                        400000   6-125  	bool	du_ouhr.ptr3,400000		" DL
                        000000   6-126  	equ	du_ouhr.fpop_word,0
                        200000   6-127  	bool	du_ouhr.fpop,200000		" DL
                        000000   6-128  	equ	du_ouhr.fgeac_word,0
                        100000   6-129  	bool	du_ouhr.fgeac,100000	" DL
                        000000   6-130  	equ	du_ouhr.fgeae_word,0
                        040000   6-131  	bool	du_ouhr.fgeae,040000	" DL
                        000000   6-132  	equ	du_ouhr.fgeaf_word,0
                        020000   6-133  	bool	du_ouhr.fgeaf,020000	" DL
                        000000   6-134  	equ	du_ouhr.fgeah_word,0
                        010000   6-135  	bool	du_ouhr.fgeah,010000	" DL
                        000000   6-136  	equ	du_ouhr.fgldp1_word,0
                        004000   6-137  	bool	du_ouhr.fgldp1,004000	" DL
                        000000   6-138  	equ	du_ouhr.fsweq_word,0
                        002000   6-139  	bool	du_ouhr.fsweq,002000	" DL
                        000000   6-140  	equ	du_ouhr.fgch_word,0
                        001000   6-141  	bool	du_ouhr.fgch,001000		" DL
                        000000   6-142  	equ	du_ouhr.dfrst_word,0
                        000400   6-143  	bool	du_ouhr.dfrst,000400	" DL
                        000000   6-144  	equ	du_ouhr.exh_word,0
                        000200   6-145  	bool	du_ouhr.exh,000200		" DL
                        000000   6-146  	equ	du_ouhr.fgadd_word,0
                        000100   6-147  	bool	du_ouhr.fgadd,000100	" DL
                        000000   6-148  	equ	du_ouhr.intrptd_word,0
                        000040   6-149  	bool	du_ouhr.intrptd,000040	" DL
                        000000   6-150  	equ	du_ouhr.dcode_word,0
                        000000   6-151  	equ	du_ouhr.dcode_shift,0
                        000037   6-152  	bool	du_ouhr.dcode_mask,000037
                        000000   6-153  	equ	du_ouhr.gldp2_word,0
                        000020   6-154  	bool	du_ouhr.gldp2,000020	" DL
                        000000   6-155  	equ	du_ouhr.gemc_word,0
                        000010   6-156  	bool	du_ouhr.gemc,000010		" DL
                        000000   6-157  	equ	du_ouhr.gbda_word,0
                        000004   6-158  	bool	du_ouhr.gbda,000004		" DL
                        000000   6-159  	equ	du_ouhr.gsp5_word,0
                        000002   6-160  	bool	du_ouhr.gsp5,000002		" DL
                        000000   6-161  	equ	du_ouhr.dcode_pad_word,0
                        000001   6-162  	bool	du_ouhr.dcode_pad,000001	" DL
                                 6-163  
                        000001   6-164  	equ	du_ouhr.ict,1		" UPPER
                        000001   6-165  	equ	du_ouhr.rs_word,1
                        000011   6-166  	equ	du_ouhr.rs_shift,9
                        000777   6-167  	bool	du_ouhr.rs_mask,000777
                        000001   6-168  	equ	du_ouhr.ir_reg_word,1
                        000001   6-169  	equ	du_ouhr.ir_reg_shift,1
                        000377   6-170  	bool	du_ouhr.ir_reg_mask,000377
                        000001   6-171  	equ	du_ouhr.zero__word,1
                        000400   6-172  	bool	du_ouhr.zero_,000400	" DL
                        000001   6-173  	equ	du_ouhr.sign__word,1
                        000200   6-174  	bool	du_ouhr.sign_,000200	" DL
                        000001   6-175  	equ	du_ouhr.carry__word,1
                        000100   6-176  	bool	du_ouhr.carry_,000100	" DL
                        000001   6-177  	equ	du_ouhr.ovfl__word,1
                        000040   6-178  	bool	du_ouhr.ovfl_,000040	" DL
                        000001   6-179  	equ	du_ouhr.eovfl__word,1
                        000020   6-180  	bool	du_ouhr.eovfl_,000020	" DL
                        000001   6-181  	equ	du_ouhr.eufl__word,1
                        000010   6-182  	bool	du_ouhr.eufl_,000010	" DL
                        000001   6-183  	equ	du_ouhr.oflm__word,1
                        000004   6-184  	bool	du_ouhr.oflm_,000004	" DL
                        000001   6-185  	equ	du_ouhr.hex__word,1
                        000002   6-186  	bool	du_ouhr.hex_,000002		" DL
                        000001   6-187  	equ	du_ouhr.dtrgo_word,1
                        000001   6-188  	bool	du_ouhr.dtrgo,000001	" DL
                                 6-189  
                                 6-190  "
                                 6-191  "	Structure apuhr1
                                 6-192  "
                        000000   6-193  	equ	apuhr1.esn_word,0
                        000025   6-194  	equ	apuhr1.esn_shift,21
                        077777   6-195  	bool	apuhr1.esn_mask,077777
                        000000   6-196  	equ	apuhr1.piapgbsy_word,0
                        000004   6-197  	bool	apuhr1.piapgbsy,000004	" DU
                        000000   6-198  	equ	apuhr1.piaoosb_word,0
                        000002   6-199  	bool	apuhr1.piaoosb,000002	" DU
                        000000   6-200  	equ	apuhr1.fdsptw_word,0
                        000001   6-201  	bool	apuhr1.fdsptw,000001	" DU
                        000000   6-202  	equ	apuhr1.mdsptw_word,0
                        400000   6-203  	bool	apuhr1.mdsptw,400000	" DL
                        000000   6-204  	equ	apuhr1.fsdwp_word,0
                        200000   6-205  	bool	apuhr1.fsdwp,200000		" DL
                        000000   6-206  	equ	apuhr1.fptw_word,0
                        100000   6-207  	bool	apuhr1.fptw,100000		" DL
                        000000   6-208  	equ	apuhr1.fptw2_word,0
                        040000   6-209  	bool	apuhr1.fptw2,040000		" DL
                        000000   6-210  	equ	apuhr1.mptw_word,0
                        020000   6-211  	bool	apuhr1.mptw,020000		" DL
                        000000   6-212  	equ	apuhr1.fanp_word,0
                        010000   6-213  	bool	apuhr1.fanp,010000		" DL
                        000000   6-214  	equ	apuhr1.fap_word,0
                        004000   6-215  	bool	apuhr1.fap,004000		" DL
                        000000   6-216  	equ	apuhr1.mtchsdw_word,0
                        002000   6-217  	bool	apuhr1.mtchsdw,002000	" DL
                        000000   6-218  	equ	apuhr1.sdwmf_word,0
                        001000   6-219  	bool	apuhr1.sdwmf,001000		" DL
                        000000   6-220  	equ	apuhr1.bsy_word,0
                        000007   6-221  	equ	apuhr1.bsy_shift,7
                        000003   6-222  	bool	apuhr1.bsy_mask,000003
                        000000   6-223  	equ	apuhr1.ptwmf_word,0
                        000100   6-224  	bool	apuhr1.ptwmf,000100		" DL
                        000000   6-225  	equ	apuhr1.mtchptw_word,0
                        000040   6-226  	bool	apuhr1.mtchptw,000040	" DL
                        000000   6-227  	equ	apuhr1.ptwaddr_word,0
                        000001   6-228  	equ	apuhr1.ptwaddr_shift,1
                        000017   6-229  	bool	apuhr1.ptwaddr_mask,000017
                        000000   6-230  	equ	apuhr1.flt_word,0
                        000001   6-231  	bool	apuhr1.flt,000001		" DL
                                 6-232  
                        000001   6-233  	equ	apuhr1.finadd_word,1
                        000014   6-234  	equ	apuhr1.finadd_shift,12
                        000001   6-235  	equ	apuhr1.trr_word,1
                        000011   6-236  	equ	apuhr1.trr_shift,9
                        000007   6-237  	bool	apuhr1.trr_mask,000007
                        000001   6-238  	equ	apuhr1.sdwerr_word,1
                        000400   6-239  	bool	apuhr1.sdwerr,000400	" DL
                        000001   6-240  	equ	apuhr1.sdwlvl_word,1
                        000006   6-241  	equ	apuhr1.sdwlvl_shift,6
                        000003   6-242  	bool	apuhr1.sdwlvl_mask,000003
                        000001   6-243  	equ	apuhr1.cache_used_word,1
                        000040   6-244  	bool	apuhr1.cache_used,000040	" DL
                        000001   6-245  	equ	apuhr1.ptwerr_word,1
                        000020   6-246  	bool	apuhr1.ptwerr,000020	" DL
                        000001   6-247  	equ	apuhr1.ptwlvl_word,1
                        000002   6-248  	equ	apuhr1.ptwlvl_shift,2
                        000003   6-249  	bool	apuhr1.ptwlvl_mask,000003
                        000001   6-250  	equ	apuhr1.flthld_word,1
                        000002   6-251  	bool	apuhr1.flthld,000002	" DL
                        000001   6-252  	equ	apuhr1.apu_pad2_word,1
                        000001   6-253  	bool	apuhr1.apu_pad2,000001	" DL
                                 6-254  
                                 6-255  "
                                 6-256  "	Structure apuhr2
                                 6-257  "
                        000000   6-258  	equ	apuhr2.CA,0		" UPPER
                        000000   6-259  	equ	apuhr2.opcode_word,0
                        000010   6-260  	equ	apuhr2.opcode_shift,8
                        001777   6-261  	bool	apuhr2.opcode_mask,001777
                        000000   6-262  	equ	apuhr2.inhibit_bit_word,0
                        000200   6-263  	bool	apuhr2.inhibit_bit,000200	" DL
                        000000   6-264  	equ	apuhr2.pr_flag_word,0
                        000100   6-265  	bool	apuhr2.pr_flag,000100	" DL
                        000000   6-266  	equ	apuhr2.TAG_word,0
                        000000   6-267  	equ	apuhr2.TAG_shift,0
                        000077   6-268  	bool	apuhr2.TAG_mask,000077
                                 6-269  
                                 6-270       "END INCLUDE FILE history_regs_dps8.incl.alm
                                  1335  " 
                                  1336  	include	history_regs_l68
                                   7-1  
                                   7-2  
                                   7-3       "BEGIN INCLUDE FILE history_regs_l68.incl.alm
                                   7-4  
                                   7-5  
                                   7-6  	"Created 03/24/83  1119.0 mst Thu by convert_include_file,
                                   7-7  	"   Version of 12/01/81  1340.3 mst Tue.
                                   7-8  
                                   7-9  	"Made from >udd>m>Bush>dpsx>history_regs_l68.incl.pl1,
                                  7-10  	"   modified 03/24/83  1118.8 mst Thu
                                  7-11  
                                  7-12  
                        000000    7-13  	equ	ou_offset,0		" MANIFEST
                        000040    7-14  	equ	cu_offset,32		" MANIFEST
                        000100    7-15  	equ	du_offset,64		" MANIFEST
                        000140    7-16  	equ	au_offset,96		" MANIFEST
                                  7-17  
                                  7-18  "
                                  7-19  "	Structure cuhra
                                  7-20  "
                        000040    7-21  	equ	cuhra_size,32
                                  7-22  
                        000000    7-23  	equ	cuhra.pia_word,0
                        400000    7-24  	bool	cuhra.pia,400000		" DU
                        000000    7-25  	equ	cuhra.poa_word,0
                        200000    7-26  	bool	cuhra.poa,200000		" DU
                        000000    7-27  	equ	cuhra.riw_word,0
                        100000    7-28  	bool	cuhra.riw,100000		" DU
                        000000    7-29  	equ	cuhra.siw_word,0
                        040000    7-30  	bool	cuhra.siw,040000		" DU
                        000000    7-31  	equ	cuhra.pot_word,0
                        020000    7-32  	bool	cuhra.pot,020000		" DU
                        000000    7-33  	equ	cuhra.pon_word,0
                        010000    7-34  	bool	cuhra.pon,010000		" DU
                        000000    7-35  	equ	cuhra.raw_word,0
                        004000    7-36  	bool	cuhra.raw,004000		" DU
                        000000    7-37  	equ	cuhra.saw_word,0
                        002000    7-38  	bool	cuhra.saw,002000		" DU
                        000000    7-39  	equ	cuhra.trgo_word,0
                        001000    7-40  	bool	cuhra.trgo,001000		" DU
                        000000    7-41  	equ	cuhra.xde_word,0
                        000400    7-42  	bool	cuhra.xde,000400		" DU
                        000000    7-43  	equ	cuhra.xdo_word,0
                        000200    7-44  	bool	cuhra.xdo,000200		" DU
                        000000    7-45  	equ	cuhra.ic_word,0
                        000100    7-46  	bool	cuhra.ic,000100		" DU
                        000000    7-47  	equ	cuhra.rpts_word,0
                        000040    7-48  	bool	cuhra.rpts,000040		" DU
                        000000    7-49  	equ	cuhra.wi_word,0
                        000020    7-50  	bool	cuhra.wi,000020		" DU
                        000000    7-51  	equ	cuhra.ar_word,0
                        000010    7-52  	bool	cuhra.ar,000010		" DU
                        000000    7-53  	equ	cuhra.nxip_word,0
                        000004    7-54  	bool	cuhra.nxip,000004		" DU
                        000000    7-55  	equ	cuhra.nflt_word,0
                        000002    7-56  	bool	cuhra.nflt,000002		" DU
                        000000    7-57  	equ	cuhra.np_word,0
                        000001    7-58  	bool	cuhra.np,000001		" DU
                        000000    7-59  	equ	cuhra.op_code_word,0
                        000010    7-60  	equ	cuhra.op_code_shift,8
                        001777    7-61  	bool	cuhra.op_code_mask,001777
                        000000    7-62  	equ	cuhra.inhib_word,0
                        000200    7-63  	bool	cuhra.inhib,000200		" DL
                        000000    7-64  	equ	cuhra.its_flag_word,0
                        000100    7-65  	bool	cuhra.its_flag,000100	" DL
                        000000    7-66  	equ	cuhra.tag_word,0
                        000000    7-67  	equ	cuhra.tag_shift,0
                        000077    7-68  	bool	cuhra.tag_mask,000077
                                  7-69  
                        000001    7-70  	equ	cuhra.ca_value,1		" UPPER
                        000001    7-71  	equ	cuhra.pcmd_word,1
                        000015    7-72  	equ	cuhra.pcmd_shift,13
                        000037    7-73  	bool	cuhra.pcmd_mask,000037
                        000001    7-74  	equ	cuhra.psl_word,1
                        000011    7-75  	equ	cuhra.psl_shift,9
                        000017    7-76  	bool	cuhra.psl_mask,000017
                        000001    7-77  	equ	cuhra.xint_word,1
                        000400    7-78  	bool	cuhra.xint,000400		" DL
                        000001    7-79  	equ	cuhra.ins_fetch_word,1
                        000200    7-80  	bool	cuhra.ins_fetch,000200	" DL
                        000001    7-81  	equ	cuhra.cus_word,1
                        000100    7-82  	bool	cuhra.cus,000100		" DL
                        000001    7-83  	equ	cuhra.ous_word,1
                        000040    7-84  	bool	cuhra.ous,000040		" DL
                        000001    7-85  	equ	cuhra.cul_word,1
                        000020    7-86  	bool	cuhra.cul,000020		" DL
                        000001    7-87  	equ	cuhra.oul_word,1
                        000010    7-88  	bool	cuhra.oul,000010		" DL
                        000001    7-89  	equ	cuhra.dir_word,1
                        000004    7-90  	bool	cuhra.dir,000004		" DL
                        000001    7-91  	equ	cuhra.npcb_word,1
                        000002    7-92  	bool	cuhra.npcb,000002		" DL
                        000001    7-93  	equ	cuhra.pib_word,1
                        000001    7-94  	bool	cuhra.pib,000001		" DL
                                  7-95  
                                  7-96  "
                                  7-97  "	Structure ouhra
                                  7-98  "
                        000040    7-99  	equ	ouhra_size,32
                                 7-100  
                        000000   7-101  	equ	ouhra.nopc_word,0
                        000033   7-102  	equ	ouhra.nopc_shift,27
                        000777   7-103  	bool	ouhra.nopc_mask,000777
                        000000   7-104  	equ	ouhra.itw_word,0
                        000400   7-105  	bool	ouhra.itw,000400		" DU
                        000000   7-106  	equ	ouhra.ntg_word,0
                        000027   7-107  	equ	ouhra.ntg_shift,23
                        000007   7-108  	bool	ouhra.ntg_mask,000007
                        000000   7-109  	equ	ouhra.cmod_word,0
                        000020   7-110  	bool	ouhra.cmod,000020		" DU
                        000000   7-111  	equ	ouhra.dir_word,0
                        000010   7-112  	bool	ouhra.dir,000010		" DU
                        000000   7-113  	equ	ouhra.efad_word,0
                        000023   7-114  	equ	ouhra.efad_shift,19
                        000003   7-115  	bool	ouhra.efad_mask,000003
                        000000   7-116  	equ	ouhra.rp_word,0
                        000011   7-117  	equ	ouhra.rp_shift,9
                        000777   7-118  	bool	ouhra.rp_mask,000777
                        000000   7-119  	equ	ouhra.opbf_word,0
                        000400   7-120  	bool	ouhra.opbf,000400		" DL
                        000000   7-121  	equ	ouhra.frpf_word,0
                        000200   7-122  	bool	ouhra.frpf,000200		" DL
                        000000   7-123  	equ	ouhra.srf_word,0
                        000100   7-124  	bool	ouhra.srf,000100		" DL
                        000000   7-125  	equ	ouhra.gin_word,0
                        000040   7-126  	bool	ouhra.gin,000040		" DL
                        000000   7-127  	equ	ouhra.gos_word,0
                        000020   7-128  	bool	ouhra.gos,000020		" DL
                        000000   7-129  	equ	ouhra.gd1_word,0
                        000010   7-130  	bool	ouhra.gd1,000010		" DL
                        000000   7-131  	equ	ouhra.gd2_word,0
                        000004   7-132  	bool	ouhra.gd2,000004		" DL
                        000000   7-133  	equ	ouhra.goe_word,0
                        000002   7-134  	bool	ouhra.goe,000002		" DL
                        000000   7-135  	equ	ouhra.goa_word,0
                        000001   7-136  	bool	ouhra.goa,000001		" DL
                                 7-137  
                        000001   7-138  	equ	ouhra.gom_word,1
                        400000   7-139  	bool	ouhra.gom,400000		" DU
                        000001   7-140  	equ	ouhra.gon_word,1
                        200000   7-141  	bool	ouhra.gon,200000		" DU
                        000001   7-142  	equ	ouhra.gof_word,1
                        100000   7-143  	bool	ouhra.gof,100000		" DU
                        000001   7-144  	equ	ouhra.fstr_word,1
                        040000   7-145  	bool	ouhra.fstr,040000		" DU
                        000001   7-146  	equ	ouhra.dn_word,1
                        020000   7-147  	bool	ouhra.dn,020000		" DU
                        000001   7-148  	equ	ouhra.an_word,1
                        010000   7-149  	bool	ouhra.an,010000		" DU
                        000001   7-150  	equ	ouhra.qn_word,1
                        004000   7-151  	bool	ouhra.qn,004000		" DU
                        000001   7-152  	equ	ouhra.x0n_word,1
                        002000   7-153  	bool	ouhra.x0n,002000		" DU
                        000001   7-154  	equ	ouhra.x1n_word,1
                        001000   7-155  	bool	ouhra.x1n,001000		" DU
                        000001   7-156  	equ	ouhra.x2n_word,1
                        000400   7-157  	bool	ouhra.x2n,000400		" DU
                        000001   7-158  	equ	ouhra.x3n_word,1
                        000200   7-159  	bool	ouhra.x3n,000200		" DU
                        000001   7-160  	equ	ouhra.x4n_word,1
                        000100   7-161  	bool	ouhra.x4n,000100		" DU
                        000001   7-162  	equ	ouhra.x5n_word,1
                        000040   7-163  	bool	ouhra.x5n,000040		" DU
                        000001   7-164  	equ	ouhra.x6n_word,1
                        000020   7-165  	bool	ouhra.x6n,000020		" DU
                        000001   7-166  	equ	ouhra.x7n_word,1
                        000010   7-167  	bool	ouhra.x7n,000010		" DU
                        000001   7-168  	equ	ouhra.ict,1		" LOWER
                                 7-169  
                                 7-170  "
                                 7-171  "	Structure apuhra
                                 7-172  "
                        000040   7-173  	equ	apuhra_size,32
                                 7-174  
                        000000   7-175  	equ	apuhra.esn_word,0
                        000025   7-176  	equ	apuhra.esn_shift,21
                        077777   7-177  	bool	apuhra.esn_mask,077777
                        000000   7-178  	equ	apuhra.bsy_word,0
                        000023   7-179  	equ	apuhra.bsy_shift,19
                        000003   7-180  	bool	apuhra.bsy_mask,000003
                        000000   7-181  	equ	apuhra.fdsptw_word,0
                        000001   7-182  	bool	apuhra.fdsptw,000001	" DU
                        000000   7-183  	equ	apuhra.mdsptw_word,0
                        400000   7-184  	bool	apuhra.mdsptw,400000	" DL
                        000000   7-185  	equ	apuhra.dfsdw_word,0
                        200000   7-186  	bool	apuhra.dfsdw,200000		" DL
                        000000   7-187  	equ	apuhra.fptw_word,0
                        100000   7-188  	bool	apuhra.fptw,100000		" DL
                        000000   7-189  	equ	apuhra.fptw2_word,0
                        040000   7-190  	bool	apuhra.fptw2,040000		" DL
                        000000   7-191  	equ	apuhra.mptw_word,0
                        020000   7-192  	bool	apuhra.mptw,020000		" DL
                        000000   7-193  	equ	apuhra.fanp_word,0
                        010000   7-194  	bool	apuhra.fanp,010000		" DL
                        000000   7-195  	equ	apuhra.fap_word,0
                        004000   7-196  	bool	apuhra.fap,004000		" DL
                        000000   7-197  	equ	apuhra.sdwmf_word,0
                        002000   7-198  	bool	apuhra.sdwmf,002000		" DL
                        000000   7-199  	equ	apuhra.sdwamr_word,0
                        000006   7-200  	equ	apuhra.sdwamr_shift,6
                        000017   7-201  	bool	apuhra.sdwamr_mask,000017
                        000000   7-202  	equ	apuhra.ptwmf_word,0
                        000040   7-203  	bool	apuhra.ptwmf,000040		" DL
                        000000   7-204  	equ	apuhra.ptwamr_word,0
                        000001   7-205  	equ	apuhra.ptwamr_shift,1
                        000017   7-206  	bool	apuhra.ptwamr_mask,000017
                        000000   7-207  	equ	apuhra.flt_word,0
                        000001   7-208  	bool	apuhra.flt,000001		" DL
                                 7-209  
                        000001   7-210  	equ	apuhra.finadd_word,1
                        000014   7-211  	equ	apuhra.finadd_shift,12
                        000001   7-212  	equ	apuhra.trr_word,1
                        000011   7-213  	equ	apuhra.trr_shift,9
                        000007   7-214  	bool	apuhra.trr_mask,000007
                        000001   7-215  	equ	apuhra.apu_pad1_word,1
                        000006   7-216  	equ	apuhra.apu_pad1_shift,6
                        000007   7-217  	bool	apuhra.apu_pad1_mask,000007
                        000001   7-218  	equ	apuhra.encache_word,1
                        000040   7-219  	bool	apuhra.encache,000040	" DL
                        000001   7-220  	equ	apuhra.apu_pad2_word,1
                        000002   7-221  	equ	apuhra.apu_pad2_shift,2
                        000007   7-222  	bool	apuhra.apu_pad2_mask,000007
                        000001   7-223  	equ	apuhra.flthld_word,1
                        000002   7-224  	bool	apuhra.flthld,000002	" DL
                        000001   7-225  	equ	apuhra.apu_pad3_word,1
                        000001   7-226  	bool	apuhra.apu_pad3,000001	" DL
                                 7-227  
                                 7-228  "
                                 7-229  "	Structure duhra
                                 7-230  "
                        000040   7-231  	equ	duhra_size,32
                                 7-232  
                        000000   7-233  	equ	duhra.pol_word,0
                        400000   7-234  	bool	duhra.pol,400000		" DU
                        000000   7-235  	equ	duhra.pop_word,0
                        200000   7-236  	bool	duhra.pop,200000		" DU
                        000000   7-237  	equ	duhra.ndesc_word,0
                        100000   7-238  	bool	duhra.ndesc,100000		" DU
                        000000   7-239  	equ	duhra.seladr_word,0
                        040000   7-240  	bool	duhra.seladr,040000		" DU
                        000000   7-241  	equ	duhra.dlendr_word,0
                        020000   7-242  	bool	duhra.dlendr,020000		" DU
                        000000   7-243  	equ	duhra.dfrst_word,0
                        010000   7-244  	bool	duhra.dfrst,010000		" DU
                        000000   7-245  	equ	duhra.exr_word,0
                        004000   7-246  	bool	duhra.exr,004000		" DU
                        000000   7-247  	equ	duhra.ldfrst_word,0
                        002000   7-248  	bool	duhra.ldfrst,002000		" DU
                        000000   7-249  	equ	duhra.dulea_word,0
                        001000   7-250  	bool	duhra.dulea,001000		" DU
                        000000   7-251  	equ	duhra.dusea_word,0
                        000400   7-252  	bool	duhra.dusea,000400		" DU
                        000000   7-253  	equ	duhra.redo_word,0
                        000200   7-254  	bool	duhra.redo,000200		" DU
                        000000   7-255  	equ	duhra.wcws_word,0
                        000100   7-256  	bool	duhra.wcws,000100		" DU
                        000000   7-257  	equ	duhra.exh_word,0
                        000040   7-258  	bool	duhra.exh,000040		" DU
                        000000   7-259  	equ	duhra.eseq_word,0
                        000020   7-260  	bool	duhra.eseq,000020		" DU
                        000000   7-261  	equ	duhra.einst_word,0
                        000010   7-262  	bool	duhra.einst,000010		" DU
                        000000   7-263  	equ	duhra.durw_word,0
                        000004   7-264  	bool	duhra.durw,000004		" DU
                        000000   7-265  	equ	duhra.ptra_word,0
                        000022   7-266  	equ	duhra.ptra_shift,18
                        000003   7-267  	bool	duhra.ptra_mask,000003
                        000000   7-268  	equ	duhra.fai1_word,0
                        400000   7-269  	bool	duhra.fai1,400000		" DL
                        000000   7-270  	equ	duhra.fai2_word,0
                        200000   7-271  	bool	duhra.fai2,200000		" DL
                        000000   7-272  	equ	duhra.fai3_word,0
                        100000   7-273  	bool	duhra.fai3,100000		" DL
                        000000   7-274  	equ	duhra.du_wrd_word,0
                        040000   7-275  	bool	duhra.du_wrd,040000		" DL
                        000000   7-276  	equ	duhra.nine_word,0
                        020000   7-277  	bool	duhra.nine,020000		" DL
                        000000   7-278  	equ	duhra.six_word,0
                        010000   7-279  	bool	duhra.six,010000		" DL
                        000000   7-280  	equ	duhra.four_word,0
                        004000   7-281  	bool	duhra.four,004000		" DL
                        000000   7-282  	equ	duhra.one_word,0
                        002000   7-283  	bool	duhra.one,002000		" DL
                        000000   7-284  	equ	duhra.du_pad1_word,0
                        000006   7-285  	equ	duhra.du_pad1_shift,6
                        000017   7-286  	bool	duhra.du_pad1_mask,000017
                        000000   7-287  	equ	duhra.samplint_word,0
                        000040   7-288  	bool	duhra.samplint,000040	" DL
                        000000   7-289  	equ	duhra.sfcsq_word,0
                        000020   7-290  	bool	duhra.sfcsq,000020		" DL
                        000000   7-291  	equ	duhra.adjlen_word,0
                        000010   7-292  	bool	duhra.adjlen,000010		" DL
                        000000   7-293  	equ	duhra.mif_word,0
                        000004   7-294  	bool	duhra.mif,000004		" DL
                        000000   7-295  	equ	duhra.inhibstc1_word,0
                        000002   7-296  	bool	duhra.inhibstc1,000002	" DL
                        000000   7-297  	equ	duhra.du_pad2_word,0
                        000001   7-298  	bool	duhra.du_pad2,000001	" DL
                                 7-299  
                        000001   7-300  	equ	duhra.duidl_word,1
                        400000   7-301  	bool	duhra.duidl,400000		" DU
                        000001   7-302  	equ	duhra.dcldgta_word,1
                        200000   7-303  	bool	duhra.dcldgta,200000	" DU
                        000001   7-304  	equ	duhra.dcldgtb_word,1
                        100000   7-305  	bool	duhra.dcldgtb,100000	" DU
                        000001   7-306  	equ	duhra.dcldgtc_word,1
                        040000   7-307  	bool	duhra.dcldgtc,040000	" DU
                        000001   7-308  	equ	duhra.nopl1_word,1
                        020000   7-309  	bool	duhra.nopl1,020000		" DU
                        000001   7-310  	equ	duhra.nopgl1_word,1
                        010000   7-311  	bool	duhra.nopgl1,010000		" DU
                        000001   7-312  	equ	duhra.nopl2_word,1
                        004000   7-313  	bool	duhra.nopl2,004000		" DU
                        000001   7-314  	equ	duhra.nopgl2_word,1
                        002000   7-315  	bool	duhra.nopgl2,002000		" DU
                        000001   7-316  	equ	duhra.aoplg1_word,1
                        001000   7-317  	bool	duhra.aoplg1,001000		" DU
                        000001   7-318  	equ	duhra.aoplg2_word,1
                        000400   7-319  	bool	duhra.aoplg2,000400		" DU
                        000001   7-320  	equ	duhra.lrwrg1_word,1
                        000200   7-321  	bool	duhra.lrwrg1,000200		" DU
                        000001   7-322  	equ	duhra.lrwrg2_word,1
                        000100   7-323  	bool	duhra.lrwrg2,000100		" DU
                        000001   7-324  	equ	duhra.dataav_du_word,1
                        000040   7-325  	bool	duhra.dataav_du,000040	" DU
                        000001   7-326  	equ	duhra.rw1rl_word,1
                        000020   7-327  	bool	duhra.rw1rl,000020		" DU
                        000001   7-328  	equ	duhra.numstg_word,1
                        000010   7-329  	bool	duhra.numstg,000010		" DU
                        000001   7-330  	equ	duhra.anstg_word,1
                        000004   7-331  	bool	duhra.anstg,000004		" DU
                        000001   7-332  	equ	duhra.opav_word,1
                        000002   7-333  	bool	duhra.opav,000002		" DU
                        000001   7-334  	equ	duhra.endseq_du_word,1
                        000001   7-335  	bool	duhra.endseq_du,000001	" DU
                        000001   7-336  	equ	duhra.len128_word,1
                        400000   7-337  	bool	duhra.len128,400000		" DL
                        000001   7-338  	equ	duhra.charop_word,1
                        200000   7-339  	bool	duhra.charop,200000		" DL
                        000001   7-340  	equ	duhra.anpk_word,1
                        100000   7-341  	bool	duhra.anpk,100000		" DL
                        000001   7-342  	equ	duhra.exmop_word,1
                        040000   7-343  	bool	duhra.exmop,040000		" DL
                        000001   7-344  	equ	duhra.blnk_word,1
                        020000   7-345  	bool	duhra.blnk,020000		" DL
                        000001   7-346  	equ	duhra.du_pad3_word,1
                        010000   7-347  	bool	duhra.du_pad3,010000	" DL
                        000001   7-348  	equ	duhra.bde_word,1
                        004000   7-349  	bool	duhra.bde,004000		" DL
                        000001   7-350  	equ	duhra.dbe_word,1
                        002000   7-351  	bool	duhra.dbe,002000		" DL
                        000001   7-352  	equ	duhra.shft_word,1
                        001000   7-353  	bool	duhra.shft,001000		" DL
                        000001   7-354  	equ	duhra.flt_word,1
                        000400   7-355  	bool	duhra.flt,000400		" DL
                        000001   7-356  	equ	duhra.rnd_word,1
                        000200   7-357  	bool	duhra.rnd,000200		" DL
                        000001   7-358  	equ	duhra.addsub_word,1
                        000100   7-359  	bool	duhra.addsub,000100		" DL
                        000001   7-360  	equ	duhra.multdiv_word,1
                        000040   7-361  	bool	duhra.multdiv,000040	" DL
                        000001   7-362  	equ	duhra.expon_word,1
                        000020   7-363  	bool	duhra.expon,000020		" DL
                        000001   7-364  	equ	duhra.du_pad4_word,1
                        000000   7-365  	equ	duhra.du_pad4_shift,0
                        000017   7-366  	bool	duhra.du_pad4_mask,000017
                                 7-367  
                                 7-368       "END INCLUDE FILE history_regs_l68.incl.alm
                                  1337  " 
                                  1338  	include	bce_breakpoint_page
                                   8-1  " BEGIN include file bce_breakpoint_page.incl.alm
                                   8-2  
                                   8-3  " Description of hardcore breakpoint information saved in breakpoint_page.
                                   8-4  " Keith Loepere, December 1983.
                                   8-5  " Sentinel added, July 1984 by Keith Loepere.
                                   8-6  
                        000000     8-7  	equ	bkpt_page.mc_,0
                        000060     8-8  	equ	bkpt_page.mode_reg,48
                        000061     8-9  	equ	bkpt_page.cache_mode_reg,49
                        000062    8-10  	equ	bkpt_page.dbr,50
                        000064    8-11  	equ	bkpt_page.bar,52
                        000065    8-12  	equ	bkpt_page.sentinel,53
                                  8-13  
                                  8-14  " END include file bce_breakpoint_page.incl.alm
                                  1339  " 
                                  1340  	include	flagbox
                                   9-1  
                                   9-2  
                                   9-3       "BEGIN INCLUDE FILE flagbox.incl.alm
                                   9-4  
                                   9-5  
                                   9-6  " HISTORY COMMENTS:
                                   9-7  "  1) change(87-03-03,Farley), approve(87-04-15,MCR7661),
                                   9-8  "     audit(87-04-21,Fawcett), install(87-04-28,MR12.1-1028):
                                   9-9  "     Added io_reconfig flag to inhibit BCE from attempting an emergency
                                  9-10  "     shutdown when the data in memory could be corrupted.
                                  9-11  "                                                      END HISTORY COMMENTS
                                  9-12  
                                  9-13  
                                  9-14  
                                  9-15  
                                  9-16  	"Created 03/03/87  1026.3 mst Tue by convert_include_file,
                                  9-17  	"   Version of 01/09/85  0754.4 mst Wed.
                                  9-18  
                                  9-19  	"Made from >udd>m>Farley>install_dir>rcf>flagbox.incl.pl1,
                                  9-20  	"   modified 02/26/87  1355.3 mst Thu
                                  9-21  
                                  9-22  "
                                  9-23  "	Structure fgbx
                                  9-24  "
                        000140    9-25  	equ	fgbx_size,96
                                  9-26  
                                  9-27  
                        000000    9-28  	equ	fgbx.toehold_used,0
                                  9-29  
                        000040    9-30  	equ	fgbx.flags_word,32
                        400000    9-31  	bool	fgbx.flags,400000		" DU
                                  9-32  
                        000041    9-33  	equ	fgbx.slt_segno,33		" UPPER
                                  9-34  
                        000043    9-35  	equ	fgbx.rtb,35		" LEVEL 2
                                  9-36  
                        400000    9-37  	bool	fgbx.ssenb,400000		" DU
                        200000    9-38  	bool	fgbx.call_bce,200000	" DU
                        100000    9-39  	bool	fgbx.shut,100000		" DU
                        040000    9-40  	bool	fgbx.mess,040000		" DU
                        020000    9-41  	bool	fgbx.alert,020000		" DU
                        010000    9-42  	bool	fgbx.breakpoint,010000	" DU
                        004000    9-43  	bool	fgbx.manual_crash,004000	" DU
                        002000    9-44  	bool	fgbx.io_reconfig,002000	" DU
                        000001    9-45  	equ	fgbx.bce_entry_shift,1
                        000077    9-46  	bool	fgbx.bce_entry_mask,000077
                                  9-47  
                        000044    9-48  	equ	fgbx.sentinel,36
                        000054    9-49  	equ	fgbx.sst_sdw,44		" DOUBLE
                        000056    9-50  	equ	fgbx.hc_dbr,46		" DOUBLE
                        000060    9-51  	equ	fgbx.message,48
                        000100    9-52  	equ	fgbx.return_to_bce_command,64
                                  9-53  
                                  9-54       "END INCLUDE FILE flagbox.incl.alm
                                  1341  
                                  1342  "  BEGIN MESSAGE DOCUMENTATION
                                  1343  "
                                  1344  "  Message:
                                  1345  "  AUDIT (fim): access violation fault - ring ADDED_INFO
                                  1346  "
                                  1347  "  S:	$access_audit
                                  1348  "
                                  1349  "  T:	$run
                                  1350  "
                                  1351  "  M:	The specified process took an access violation fault
                                  1352  "	due to ring brackets inconsistant with the operation.
                                  1353  "
                                  1354  "  A:	$ignore
                                  1355  "
                                  1356  "
                                  1357  "  Message:
                                  1358  "  AUDIT (fim): access violation fault - mode ADDED_INFO
                                  1359  "
                                  1360  "  S:	$access_audit
                                  1361  "
                                  1362  "  T:	$run
                                  1363  "
                                  1364  "  M:	The specified process took an access violation fault
                                  1365  "	because the access mode was inconsistant with the operation.
                                  1366  "
                                  1367  "  A:	$ignore
                                  1368  "
                                  1369  "
                                  1370  "  Message:
                                  1371  "  AUDIT (fim): illegal procedure fault ADDED_INFO
                                  1372  "
                                  1373  "  S:	$access_audit
                                  1374  "
                                  1375  "  T:	$run
                                  1376  "
                                  1377  "  M:	The specified process took an illegal procedure fault.
                                  1378  "
                                  1379  "  A:	$ignore
                                  1380  "
                                  1381  "  END MESSAGE DOCUMENTATION
                                  1382  "
                                  1383  	end
LITERALS
     
    002204  aa   000000 000000 
    002205  aa   000000 000000 
    002206  aa   000000 000000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    002207  5a   000003 000000 
    002210  5a   000122 600000 
    002211  aa   000000 000000 
    002212  55   000007 000002 
    002213  5a   000002 400003 
    002214  55   000006 000007 
    002215  aa  003 146 151 155
    002216  55   000014 000003 
    002217  0a   001250 400000 
    002220  55   000012 000003 
    002221  aa  007 163 151 147         sig_scu
    002222  aa  137 163 143 165
    002223  55   000021 000007 
    002224  0a   001246 400000 
    002225  55   000017 000003 
    002226  aa  007 163 151 147         sig_prs
    002227  aa  137 160 162 163
    002230  55   000025 000014 
    002231  0a   001244 400000 
    002232  55   000024 000003 
    002233  aa  003 163 143 165         scu
    002234  55   000031 000021 
    002235  0a   001242 400000 
    002236  55   000030 000003 
    002237  aa  003 160 162 163         prs
    002240  55   000035 000025 
    002241  0a   001240 400000 
    002242  55   000034 000003 
    002243  aa  002 154 160 000         lp
    002244  55   000045 000031 
    002245  0a   000404 400000 
    002246  55   000040 000003 
    002247  aa  023 160 162 151         primary_fault_entry
    002250  aa  155 141 162 171
    002251  aa  137 146 141 165
    002252  aa  154 164 137 145
    002253  aa  156 164 162 171
    002254  55   000054 000035 
    002255  0a   000300 400000 
    002256  55   000050 000003 
    002257  aa  014 163 151 147         signal_entry
    002260  aa  156 141 154 137
    002261  aa  145 156 164 162
    002262  aa  171 000 000 000
    002263  55   000063 000045 
    002264  0a   000124 400000 
    002265  55   000057 000003 
    002266  aa  014 160 141 162         parity_entry
    002267  aa  151 164 171 137
    002270  aa  145 156 164 162
    002271  aa  171 000 000 000
    002272  55   000071 000054 
    002273  0a   000030 400000 
    002274  55   000066 000003 
    002275  aa  011 144 162 154         drl_entry
    002276  aa  137 145 156 164
    002277  aa  162 171 000 000
    002300  55   000102 000063 
    002301  0a   000014 400000 
    002302  55   000074 000003 
    002303  aa  024 157 156 143         onc_start_shut_entry
    002304  aa  137 163 164 141
    002305  aa  162 164 137 163
    002306  aa  150 165 164 137
    002307  aa  145 156 164 162
    002310  aa  171 000 000 000
    002311  55   000113 000071 
    002312  0a   000000 400000 
    002313  55   000105 000003 
    002314  aa  026 141 143 143         access_violation_entry
    002315  aa  145 163 163 137
    002316  aa  166 151 157 154
    002317  aa  141 164 151 157
    002320  aa  156 137 145 156
    002321  aa  164 162 171 000
    002322  55   000002 000102 
    002323  6a   000000 400002 
    002324  55   000116 000003 
    002325  aa  014 163 171 155         symbol_table
    002326  aa  142 157 154 137
    002327  aa  164 141 142 154
    002330  aa  145 000 000 000

DEFINITIONS HASH TABLE

    002331  aa   000000 000015 
    002332  5a   000031 000000 
    002333  5a   000021 000000 
    002334  5a   000035 000000 
    002335  5a   000045 000000 
    002336  5a   000054 000000 
    002337  5a   000063 000000 
    002340  5a   000102 000000 
    002341  5a   000113 000000 
    002342  aa   000000 000000 
    002343  5a   000071 000000 
    002344  5a   000007 000000 
    002345  5a   000014 000000 
    002346  5a   000025 000000 

EXTERNAL NAMES

    002347  aa  016 164 145 162         terminate_proc
    002350  aa  155 151 156 141
    002351  aa  164 145 137 160
    002352  aa  162 157 143 000
    002353  aa  013 165 156 145         unexp_fault
    002354  aa  170 160 137 146
    002355  aa  141 165 154 164
    002356  aa  011 167 151 162         wired_fim
    002357  aa  145 144 137 146
    002360  aa  151 155 000 000
    002361  aa  013 167 141 151         wait_enable
    002362  aa  164 137 145 156
    002363  aa  141 142 154 145
    002364  aa  007 164 143 137         tc_data
    002365  aa  144 141 164 141
    002366  aa  017 146 151 155         fim_v_time_calc
    002367  aa  137 166 137 164
    002370  aa  151 155 145 137
    002371  aa  143 141 154 143
    002372  aa  015 143 141 143         cache_luf_reg
    002373  aa  150 145 137 154
    002374  aa  165 146 137 162
    002375  aa  145 147 000 000
    002376  aa  013 160 154 061         pl1_machine
    002377  aa  137 155 141 143
    002400  aa  150 151 156 145
    002401  aa  015 146 141 165         fault_trouble
    002402  aa  154 164 137 164
    002403  aa  162 157 165 142
    002404  aa  154 145 000 000
    002405  aa  017 150 145 170         hex_eovfl_value
    002406  aa  137 145 157 166
    002407  aa  146 154 137 166
    002410  aa  141 154 165 145
    002411  aa  013 145 157 166         eovfl_value
    002412  aa  146 154 137 166
    002413  aa  141 154 165 145
    002414  aa  015 145 170 160         exp_ovfl_rest
    002415  aa  137 157 166 146
    002416  aa  154 137 162 145
    002417  aa  163 164 000 000
    002420  aa  010 143 157 167         cow_ptrs
    002421  aa  137 160 164 162
    002422  aa  163 000 000 000
    002423  aa  017 143 157 156         connect_pending
    002424  aa  156 145 143 164
    002425  aa  137 160 145 156
    002426  aa  144 151 156 147
    002427  aa  016 145 170 160         exp_undfl_rest
    002430  aa  137 165 156 144
    002431  aa  146 154 137 162
    002432  aa  145 163 164 000
    002433  aa  024 150 146 160         hfp_exponent_enabled
    002434  aa  137 145 170 160
    002435  aa  157 156 145 156
    002436  aa  164 137 145 156
    002437  aa  141 142 154 145
    002440  aa  144 000 000 000
    002441  aa  024 151 156 151         initialization_state
    002442  aa  164 151 141 154
    002443  aa  151 172 141 164
    002444  aa  151 157 156 137
    002445  aa  163 164 141 164
    002446  aa  145 000 000 000
    002447  aa  010 163 171 163         sys_info
    002450  aa  137 151 156 146
    002451  aa  157 000 000 000
    002452  aa  023 143 160 165         cpu_h_flt_ctr_array
    002453  aa  137 150 137 146
    002454  aa  154 164 137 143
    002455  aa  164 162 137 141
    002456  aa  162 162 141 171
    002457  aa  023 143 160 165         cpu_g_flt_ctr_array
    002460  aa  137 147 137 146
    002461  aa  154 164 137 143
    002462  aa  164 162 137 141
    002463  aa  162 162 141 171
    002464  aa  023 143 160 165         cpu_f_flt_ctr_array
    002465  aa  137 146 137 146
    002466  aa  154 164 137 143
    002467  aa  164 162 137 141
    002470  aa  162 162 141 171
    002471  aa  023 143 160 165         cpu_e_flt_ctr_array
    002472  aa  137 145 137 146
    002473  aa  154 164 137 143
    002474  aa  164 162 137 141
    002475  aa  162 162 141 171
    002476  aa  023 143 160 165         cpu_d_flt_ctr_array
    002477  aa  137 144 137 146
    002500  aa  154 164 137 143
    002501  aa  164 162 137 141
    002502  aa  162 162 141 171
    002503  aa  023 143 160 165         cpu_c_flt_ctr_array
    002504  aa  137 143 137 146
    002505  aa  154 164 137 143
    002506  aa  164 162 137 141
    002507  aa  162 162 141 171
    002510  aa  023 143 160 165         cpu_b_flt_ctr_array
    002511  aa  137 142 137 146
    002512  aa  154 164 137 143
    002513  aa  164 162 137 141
    002514  aa  162 162 141 171
    002515  aa  023 143 160 165         cpu_a_flt_ctr_array
    002516  aa  137 141 137 146
    002517  aa  154 164 137 143
    002520  aa  164 162 137 141
    002521  aa  162 162 141 171
    002522  aa  023 167 151 162         wired_hardcore_data
    002523  aa  145 144 137 150
    002524  aa  141 162 144 143
    002525  aa  157 162 145 137
    002526  aa  144 141 164 141
    002527  aa  013 150 162 145         hregs_saved
    002530  aa  147 163 137 163
    002531  aa  141 166 145 144
    002532  aa  013 146 151 155         fim_v_delta
    002533  aa  137 166 137 144
    002534  aa  145 154 164 141
    002535  aa  012 146 151 155         fim_v_temp
    002536  aa  137 166 137 164
    002537  aa  145 155 160 000
    002540  aa  013 163 151 147         signal_data
    002541  aa  156 141 154 137
    002542  aa  144 141 164 141
    002543  aa  013 141 165 144         audit_flags
    002544  aa  151 164 137 146
    002545  aa  154 141 147 163
    002546  aa  011 163 151 147         signaller
    002547  aa  156 141 154 154
    002550  aa  145 162 000 000
    002551  aa  016 143 157 156         condition_name
    002552  aa  144 151 164 151
    002553  aa  157 156 137 156
    002554  aa  141 155 145 000
    002555  aa  011 150 151 163         hist_regs
    002556  aa  164 137 162 145
    002557  aa  147 163 000 000
    002560  aa  015 160 162 157         processor_tag
    002561  aa  143 145 163 163
    002562  aa  157 162 137 164
    002563  aa  141 147 000 000
    002564  aa  015 143 160 141         cpar_err_data
    002565  aa  162 137 145 162
    002566  aa  162 137 144 141
    002567  aa  164 141 000 000
    002570  aa  015 143 160 141         cpar_mem_data
    002571  aa  162 137 155 145
    002572  aa  155 137 144 141
    002573  aa  164 141 000 000
    002574  aa  004 144 163 145         dseg
    002575  aa  147 000 000 000
    002576  aa  013 146 151 155         fim_abs_seg
    002577  aa  137 141 142 163
    002600  aa  137 163 145 147
    002601  aa  016 160 162 157         processor_data
    002602  aa  143 145 163 163
    002603  aa  157 162 137 144
    002604  aa  141 164 141 000
    002605  aa  011 143 160 141         cpar_info
    002606  aa  162 137 151 156
    002607  aa  146 157 000 000
    002610  aa  012 160 165 163         push_stack
    002611  aa  150 137 163 164
    002612  aa  141 143 153 000
    002613  aa  013 163 164 141         stack_0_ptr
    002614  aa  143 153 137 060
    002615  aa  137 160 164 162
    002616  aa  016 162 145 163         reset_mode_reg
    002617  aa  145 164 137 155
    002620  aa  157 144 145 137
    002621  aa  162 145 147 000
    002622  aa  007 143 157 160         copy_mc
    002623  aa  171 137 155 143
    002624  aa  017 142 162 145         breakpoint_page
    002625  aa  141 153 160 157
    002626  aa  151 156 164 137
    002627  aa  160 141 147 145
    002630  aa  007 146 154 141         flagbox
    002631  aa  147 142 157 170
    002632  aa  021 144 162 154         drl_fault_trouble
    002633  aa  137 146 141 165
    002634  aa  154 164 137 164
    002635  aa  162 157 165 142
    002636  aa  154 145 000 000
    002637  aa  023 144 162 154         drl_message_pointer
    002640  aa  137 155 145 163
    002641  aa  163 141 147 145
    002642  aa  137 160 157 151
    002643  aa  156 164 145 162
    002644  aa  003 163 143 163         scs
    002645  aa  017 146 157 162         force_hist_regs
    002646  aa  143 145 137 150
    002647  aa  151 163 164 137
    002650  aa  162 145 147 163
    002651  aa  011 143 150 145         check_mct
    002652  aa  143 153 137 155
    002653  aa  143 164 000 000
    002654  aa  020 150 151 163         history_reg_data
    002655  aa  164 157 162 171
    002656  aa  137 162 145 147
    002657  aa  137 144 141 164
    002660  aa  141 000 000 000
    002661  aa  003 160 144 163         pds
    002662  aa  013 143 150 145         check_fault
    002663  aa  143 153 137 146
    002664  aa  141 165 154 164
    002665  aa  017 146 151 155         fim_v_time_init
    002666  aa  137 166 137 164
    002667  aa  151 155 145 137
    002670  aa  151 156 151 164
    002671  aa  010 146 151 155         fim_util
    002672  aa  137 165 164 151
    002673  aa  154 000 000 000
    002674  aa  021 163 164 141         stack_oob_handler
    002675  aa  143 153 137 157
    002676  aa  157 142 137 150
    002677  aa  141 156 144 154
    002700  aa  145 162 000 000
    002701  aa  024 157 165 164         outward_call_handler
    002702  aa  167 141 162 144
    002703  aa  137 143 141 154
    002704  aa  154 137 150 141
    002705  aa  156 144 154 145
    002706  aa  162 000 000 000
    002707  aa  012 154 151 156         link_fault
    002710  aa  153 137 146 141
    002711  aa  165 154 164 000
    002712  aa  011 154 151 156         link_snap
    002713  aa  153 137 163 156
    002714  aa  141 160 000 000
    002715  aa  012 142 157 165         boundfault
    002716  aa  156 144 146 141
    002717  aa  165 154 164 000
    002720  aa  016 150 141 162         hardware_fault
    002721  aa  144 167 141 162
    002722  aa  145 137 146 141
    002723  aa  165 154 164 000
    002724  aa  011 163 145 147         seg_fault
    002725  aa  137 146 141 165
    002726  aa  154 164 000 000
    002727  aa  005 146 141 165         fault
    002730  aa  154 164 000 000
    002731  aa  012 162 151 156         ring_alarm
    002732  aa  147 137 141 154
    002733  aa  141 162 155 000
    002734  aa  010 141 155 137         am_fault
    002735  aa  146 141 165 154
    002736  aa  164 000 000 000
    002737  aa  013 141 143 143         access_viol
    002740  aa  145 163 163 137
    002741  aa  166 151 157 154
    002742  aa  011 154 157 147         log_fault
    002743  aa  137 146 141 165
    002744  aa  154 164 000 000
    002745  aa  027 141 143 143         access_audit_log_fault_
    002746  aa  145 163 163 137
    002747  aa  141 165 144 151
    002750  aa  164 137 154 157
    002751  aa  147 137 146 141
    002752  aa  165 154 164 137
    002753  aa  016 142 143 145         bce_and_return
    002754  aa  137 141 156 144
    002755  aa  137 162 145 164
    002756  aa  165 162 156 000
    002757  aa  004 160 155 165         pmut
    002760  aa  164 000 000 000
    002761  aa  004 160 162 144         prds
    002762  aa  163 000 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    002763  aa   000004 000000 
    002764  55   000140 000140 
    002765  aa   000004 000000 
    002766  55   000147 000144 
    002767  aa   000004 000000 
    002770  55   000155 000152 
    002771  aa   000004 000000 
    002772  55   000462 000157 
    002773  aa   000004 000000 
    002774  55   000552 000163 
    002775  aa   000004 000000 
    002776  55   000452 000167 
    002777  aa   000004 000000 
    003000  55   000462 000172 
    003001  aa   000004 000000 
    003002  55   000452 000176 
    003003  aa   000004 000000 
    003004  55   000452 000202 
    003005  aa   000004 000000 
    003006  55   000452 000205 
    003007  aa   000004 000000 
    003010  55   000435 000211 
    003011  aa   000004 000000 
    003012  55   000452 000214 
    003013  aa   000004 000000 
    003014  55   000452 000220 
    003015  aa   000004 000000 
    003016  55   000452 000224 
    003017  aa   000004 000000 
    003020  55   000240 000232 
    003021  aa   000004 000000 
    003022  55   000313 000243 
    003023  aa   000004 000000 
    003024  55   000313 000250 
    003025  aa   000004 000000 
    003026  55   000313 000255 
    003027  aa   000004 000000 
    003030  55   000313 000262 
    003031  aa   000004 000000 
    003032  55   000313 000267 
    003033  aa   000004 000000 
    003034  55   000313 000274 
    003035  aa   000004 000000 
    003036  55   000313 000301 
    003037  aa   000004 000000 
    003040  55   000313 000306 
    003041  aa   000004 000000 
    003042  55   000452 000320 
    003043  aa   000004 000000 
    003044  55   000452 000323 
    003045  aa   000004 000000 
    003046  55   000452 000326 
    003047  aa   000004 000000 
    003050  55   000452 000331 
    003051  aa   000004 000000 
    003052  55   000452 000334 
    003053  aa   000004 000000 
    003054  55   000337 000337 
    003055  aa   000004 000000 
    003056  55   000452 000342 
    003057  aa   000004 000000 
    003060  55   000462 000346 
    003061  aa   000004 000000 
    003062  55   000552 000351 
    003063  aa   000004 000000 
    003064  55   000452 000355 
    003065  aa   000004 000000 
    003066  55   000452 000361 
    003067  aa   000003 000000 
    003070  5a   000365 000000 
    003071  aa   000003 000000 
    003072  5a   000367 000000 
    003073  aa   000004 000000 
    003074  55   000435 000372 
    003075  aa   000004 000000 
    003076  55   000452 000376 
    003077  aa   000004 000000 
    003100  55   000462 000401 
    003101  aa   000004 000000 
    003102  55   000452 000404 
    003103  aa   000004 000000 
    003104  55   000462 000407 
    003105  aa   000004 000000 
    003106  55   000462 000413 
    003107  aa   000003 000000 
    003110  5a   000415 000000 
    003111  aa   000003 000000 
    003112  5a   000421 000000 
    003113  aa   000004 000000 
    003114  55   000462 000423 
    003115  aa   000004 000000 
    003116  55   000435 000430 
    003117  aa   000004 000000 
    003120  55   000462 000436 
    003121  aa   000004 000000 
    003122  55   000462 000442 
    003123  aa   000004 000000 
    003124  55   000452 000445 
    003125  aa   000004 000000 
    003126  55   000462 000453 
    003127  aa   000004 000000 
    003130  55   000462 000456 
    003131  aa   000004 000000 
    003132  55   000465 000465 
    003133  aa   000004 000000 
    003134  55   000472 000472 
    003135  aa   000004 000000 
    003136  55   000503 000500 
    003137  aa   000004 000000 
    003140  55   000506 000506 
    003141  aa   000004 000000 
    003142  55   000511 000511 
    003143  aa   000004 000000 
    003144  55   000515 000515 
    003145  aa   000004 000000 
    003146  55   000522 000520 
    003147  aa   000004 000000 
    003150  55   000530 000525 
    003151  aa   000004 000000 
    003152  55   000536 000533 
    003153  aa   000004 000000 
    003154  55   000550 000544 
    003155  aa   000003 000000 
    003156  5a   000552 000000 
    003157  aa   000001 000000 
    003160  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    003161  5a   000554 000000 
    003162  5a   000556 000000 
    003163  5a   000560 000000 
    003164  5a   000562 000000 
    003165  5a   000564 000000 
    003166  5a   000566 000000 
    003167  5a   000570 000000 
    003170  5a   000572 000000 
    003171  5a   000574 000000 
    003172  5a   000576 000000 
    003173  5a   000600 000000 
    003174  5a   000602 000000 
    003175  5a   000604 000000 
    003176  5a   000606 000000 
    003177  5a   000610 000000 
    003200  5a   000612 000000 
    003201  5a   000614 000000 
    003202  5a   000616 000000 
    003203  5a   000620 000000 
    003204  5a   000622 000000 
    003205  5a   000624 000000 
    003206  5a   000626 000000 
    003207  5a   000630 000000 
    003210  5a   000632 000000 
    003211  5a   000634 000000 
    003212  5a   000636 000000 
    003213  5a   000640 000000 
    003214  5a   000642 000000 
    003215  5a   000644 000000 
    003216  5a   000646 000000 
    003217  5a   000650 000000 
    003220  5a   000652 000000 
    003221  5a   000654 000000 
    003222  5a   000656 000000 
    003223  5a   000660 000000 
    003224  5a   000662 000000 
    003225  5a   000664 000000 
    003226  5a   000666 000000 
    003227  5a   000670 000000 
    003230  5a   000672 000000 
    003231  5a   000674 000000 
    003232  5a   000676 000000 
    003233  5a   000700 000000 
    003234  5a   000702 000000 
    003235  5a   000704 000000 
    003236  5a   000706 000000 
    003237  5a   000710 000000 
    003240  5a   000712 000000 
    003241  5a   000714 000000 
    003242  5a   000716 000000 
    003243  5a   000720 000000 
    003244  5a   000722 000000 
    003245  5a   000724 000000 
    003246  5a   000726 000000 
    003247  5a   000730 000000 
    003250  5a   000732 000000 
    003251  5a   000734 000000 
    003252  5a   000736 000000 
    003253  5a   000740 000000 
    003254  5a   000742 000000 
    003255  5a   000744 000000 
    003256  5a   000746 000000 
    003257  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   002207 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000204 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         prds|       
    000011  5a   001047 0000 00
    000012  9a   777766 0000 46         pmut|bce_and_return
    000013  5a   001046 0000 00
    000014  9a   777764 0000 46         access_audit_log_fault_|log_fault
    000015  5a   001045 0000 00
    000016  9a   777762 0000 46         access_viol|am_fault
    000017  5a   001044 0000 00
    000020  9a   777760 0000 46         ring_alarm|fault
    000021  5a   001043 0000 00
    000022  9a   777756 0000 46         seg_fault|seg_fault
    000023  5a   001042 0000 00
    000024  9a   777754 0000 46         hardware_fault|hardware_fault
    000025  5a   001041 0000 00
    000026  9a   777752 0000 46         boundfault|boundfault
    000027  5a   001040 0000 00
    000030  9a   777750 0000 46         link_snap|link_fault
    000031  5a   001037 0000 00
    000032  9a   777746 0000 46         outward_call_handler|outward_call_handler
    000033  5a   001036 0000 00
    000034  9a   777744 0000 46         stack_oob_handler|stack_oob_handler
    000035  5a   001035 0000 00
    000036  9a   777742 0000 46         fim_util|fim_v_time_init
    000037  5a   001034 0000 00
    000040  9a   777740 0000 46         fim_util|check_fault
    000041  5a   001033 0000 00
    000042  9a   777736 0000 46         pds|history_reg_data
    000043  5a   001032 0000 00
    000044  9a   777734 0000 46         fim_util|check_mct
    000045  5a   001031 0000 00
    000046  9a   777732 0000 46         fim_util|force_hist_regs
    000047  5a   001030 0000 00
    000050  9a   777730 0000 46         scs|drl_message_pointer
    000051  5a   001027 0000 00
    000052  9a   777726 0000 46         fim_util|drl_fault_trouble
    000053  5a   001026 0000 00
    000054  9a   777724 0000 46         flagbox|       
    000055  5a   001025 0000 00
    000056  9a   777722 0000 46         breakpoint_page|       
    000057  5a   001024 0000 00
    000060  9a   777720 0000 46         fim_util|copy_mc
    000061  5a   001023 0000 00
    000062  9a   777716 0000 46         fim_util|reset_mode_reg
    000063  5a   001022 0000 00
    000064  9a   777714 0000 46         pds|stack_0_ptr
    000065  5a   001021 0000 20
    000066  9a   777712 0000 46         fim_util|push_stack
    000067  5a   001020 0000 00
    000070  9a   777710 0000 46         pds|cpar_info
    000071  5a   001017 0000 00
    000072  9a   777706 0000 46         scs|processor_data
    000073  5a   001016 0000 05
    000074  9a   777704 0000 46         fim_abs_seg|       
    000075  5a   001015 0000 00
    000076  9a   777702 0000 46         dseg|       
    000077  5a   001014 0000 17
    000100  9a   777700 0000 46         pds|cpar_mem_data
    000101  5a   001013 0000 00
    000102  9a   777676 0000 46         pds|cpar_err_data
    000103  5a   001012 0000 00
    000104  9a   777674 0000 46         prds|processor_tag
    000105  5a   001011 0000 00
    000106  9a   777672 0000 46         fim_util|hist_regs
    000107  5a   001010 0000 00
    000110  9a   777670 0000 46         pds|condition_name
    000111  5a   001007 0000 00
    000112  9a   777666 0000 46         signaller|signaller
    000113  5a   001006 0000 00
    000114  9a   777664 0000 46         pds|audit_flags
    000115  5a   001005 0000 00
    000116  9a   777662 0000 46         pds|signal_data
    000117  5a   001004 0000 00
    000120  9a   777660 0000 46         pds|fim_v_temp
    000121  5a   001003 0000 00
    000122  9a   777656 0000 46         pds|fim_v_delta
    000123  5a   001002 0000 00
    000124  9a   777654 0000 46         pds|hregs_saved
    000125  5a   001001 0000 00
    000126  9a   777652 0000 46         wired_hardcore_data|cpu_a_flt_ctr_array
    000127  5a   001000 0000 00
    000130  9a   777650 0000 46         wired_hardcore_data|cpu_b_flt_ctr_array
    000131  5a   000777 0000 00
    000132  9a   777646 0000 46         wired_hardcore_data|cpu_c_flt_ctr_array
    000133  5a   000776 0000 00
    000134  9a   777644 0000 46         wired_hardcore_data|cpu_d_flt_ctr_array
    000135  5a   000775 0000 00
    000136  9a   777642 0000 46         wired_hardcore_data|cpu_e_flt_ctr_array
    000137  5a   000774 0000 00
    000140  9a   777640 0000 46         wired_hardcore_data|cpu_f_flt_ctr_array
    000141  5a   000773 0000 00
    000142  9a   777636 0000 46         wired_hardcore_data|cpu_g_flt_ctr_array
    000143  5a   000772 0000 00
    000144  9a   777634 0000 46         wired_hardcore_data|cpu_h_flt_ctr_array
    000145  5a   000771 0000 00
    000146  9a   777632 0000 46         sys_info|initialization_state
    000147  5a   000770 0000 00
    000150  9a   777630 0000 46         pds|hfp_exponent_enabled
    000151  5a   000767 0000 00
    000152  9a   777626 0000 46         pds|exp_undfl_rest
    000153  5a   000766 0000 00
    000154  9a   777624 0000 46         pds|connect_pending
    000155  5a   000765 0000 00
    000156  9a   777622 0000 46         scs|cow_ptrs
    000157  5a   000764 0000 31
    000160  9a   777620 0000 46         pds|exp_ovfl_rest
    000161  5a   000763 0000 00
    000162  9a   777616 0000 46         pds|eovfl_value
    000163  5a   000762 0000 00
    000164  9a   777614 0000 46         pds|hex_eovfl_value
    000165  5a   000761 0000 00
    000166  9a   777612 0000 46         fim_util|fault_trouble
    000167  5a   000760 0000 00
    000170  9a   777610 0000 46         pds|pl1_machine
    000171  5a   000757 0000 00
    000172  9a   777606 0000 46         prds|cache_luf_reg
    000173  5a   000756 0000 00
    000174  9a   777604 0000 46         fim_util|fim_v_time_calc
    000175  5a   000755 0000 00
    000176  9a   777602 0000 46         tc_data|wait_enable
    000177  5a   000754 0000 00
    000200  9a   777600 0000 46         wired_fim|unexp_fault
    000201  5a   000753 0000 00
    000202  9a   777576 0000 46         terminate_proc|terminate_proc
    000203  5a   000752 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   256655 656642 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000010 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000613 
    000020  aa   000000 000264 
    000021  aa   000501 000451 
    000022  aa   000577 000264 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000012 
    000066  aa   000136 000032 
    000067  aa   175453 017352 
    000070  aa   000000 117547 
    000071  aa   174416 000000 
    000072  aa   000145 000030 
    000073  aa   123154 505731 
    000074  aa   000000 112316 
    000075  aa   133412 600000 
    000076  aa   000153 000042 
    000077  aa   147777 464111 
    000100  aa   000000 115000 
    000101  aa   507463 000000 
    000102  aa   000164 000050 
    000103  aa   134571 651504 
    000104  aa   000000 113462 
    000105  aa   317531 600000 
    000106  aa   000176 000031 
    000107  aa   102456 350277 
    000110  aa   000000 110246 
    000111  aa   520732 400000 
    000112  aa   000205 000035 
    000113  aa   106701 740565 
    000114  aa   000000 110670 
    000115  aa   206245 200000 
    000116  aa   000215 000047 
    000117  aa   120264 216057 
    000120  aa   000000 112026 
    000121  aa   460155 600000 
    000122  aa   000227 000046 
    000123  aa   120264 216055 
    000124  aa   000000 112026 
    000125  aa   460155 200000 
    000126  aa   000241 000051 
    000127  aa   131653 234736 
    000130  aa   000000 113170 
    000131  aa   426111 400000 
    000132  aa   000254 000035 
    000133  aa   153072 447700 
    000134  aa   000000 115333 
    000135  aa   300226 600000 
    000136  aa   076163 160145          >spec>install>1110>fim.alm
    000137  aa   143076 151156 
    000140  aa   163164 141154 
    000141  aa   154076 061061 
    000142  aa   061060 076146 
    000143  aa   151155 056141 
    000144  aa   154155 040040 
    000145  aa   076154 144144          >ldd>include>mc.incl.alm
    000146  aa   076151 156143 
    000147  aa   154165 144145 
    000150  aa   076155 143056 
    000151  aa   151156 143154 
    000152  aa   056141 154155 
    000153  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000154  aa   076151 156143 
    000155  aa   154165 144145 
    000156  aa   076163 164141 
    000157  aa   143153 137150 
    000160  aa   145141 144145 
    000161  aa   162056 151156 
    000162  aa   143154 056141 
    000163  aa   154155 040040 
    000164  aa   076154 144144          >ldd>include>access_audit_flags.incl.alm
    000165  aa   076151 156143 
    000166  aa   154165 144145 
    000167  aa   076141 143143 
    000170  aa   145163 163137 
    000171  aa   141165 144151 
    000172  aa   164137 146154 
    000173  aa   141147 163056 
    000174  aa   151156 143154 
    000175  aa   056141 154155 
    000176  aa   076154 144144          >ldd>include>sdw.incl.alm
    000177  aa   076151 156143 
    000200  aa   154165 144145 
    000201  aa   076163 144167 
    000202  aa   056151 156143 
    000203  aa   154056 141154 
    000204  aa   155040 040040 
    000205  aa   076154 144144          >ldd>include>sdw.l68.incl.alm
    000206  aa   076151 156143 
    000207  aa   154165 144145 
    000210  aa   076163 144167 
    000211  aa   056154 066070 
    000212  aa   056151 156143 
    000213  aa   154056 141154 
    000214  aa   155040 040040 
    000215  aa   076154 144144          >ldd>include>history_regs_dps8.incl.alm
    000216  aa   076151 156143 
    000217  aa   154165 144145 
    000220  aa   076150 151163 
    000221  aa   164157 162171 
    000222  aa   137162 145147 
    000223  aa   163137 144160 
    000224  aa   163070 056151 
    000225  aa   156143 154056 
    000226  aa   141154 155040 
    000227  aa   076154 144144          >ldd>include>history_regs_l68.incl.alm
    000230  aa   076151 156143 
    000231  aa   154165 144145 
    000232  aa   076150 151163 
    000233  aa   164157 162171 
    000234  aa   137162 145147 
    000235  aa   163137 154066 
    000236  aa   070056 151156 
    000237  aa   143154 056141 
    000240  aa   154155 040040 
    000241  aa   076154 144144          >ldd>include>bce_breakpoint_page.incl.alm
    000242  aa   076151 156143 
    000243  aa   154165 144145 
    000244  aa   076142 143145 
    000245  aa   137142 162145 
    000246  aa   141153 160157 
    000247  aa   151156 164137 
    000250  aa   160141 147145 
    000251  aa   056151 156143 
    000252  aa   154056 141154 
    000253  aa   155040 040040 
    000254  aa   076154 144144          >ldd>include>flagbox.incl.alm
    000255  aa   076151 156143 
    000256  aa   154165 144145 
    000257  aa   076146 154141 
    000260  aa   147142 157170 
    000261  aa   056151 156143 
    000262  aa   154056 141154 
    000263  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1560    .._00000                 fim:         1244.
        1563    .._00001                 fim:         1245.
        1565    .._00002                 fim:         1246.
        1567    .._00003                 fim:         1247.
        1572    .._00004                 fim:         1248.
        1576    .._00005                 fim:         1249.
        1600    .._00006                 fim:         1250.
        1602    .._00007                 fim:         1251.
        1604    .._00010                 fim:         1252.
        1606    .._00011                 fim:         1253.
        1610    .._00012                 fim:         1254.
        1615    .._00013                 fim:         1255.
        1621    .._00014                 fim:         1256.
        1623    .._00015                 fim:         1257.
        1625    .._00016                 fim:         1258.
        1630    .._00017                 fim:         1259.
        1632    .._00020                 fim:         1260.
        1636    .._00021                 fim:         1261.
        1643    .._00022                 fim:         1262.
        1650    .._00023                 fim:         1263.
        1655    .._00024                 fim:         1264.
        1661    .._00025                 fim:         1265.
        1663    .._00026                 fim:         1266.
        1665    .._00027                 fim:         1267.
        1667    .._00030                 fim:         1268.
        1673    .._00031                 fim:         1269.
        1676    .._00032                 fim:         1270.
        1702    .._00033                 fim:         1271.
        1706    .._00034                 fim:         1272.
        1712    .._00035                 fim:         1273.
        1716    .._00036                 fim:         1274.
        1722    .._00037                 fim:         1275.
        1724    .._00040                 fim:         1281.
        1730    .._00041                 fim:         1282.
        1734    .._00042                 fim:         1283.
        1741    .._00043                 fim:         1284.
        1746    .._00044                 fim:         1285.
        1754    .._00045                 fim:         1286.
        1762    .._00046                 fim:         1287.
        1767    .._00047                 fim:         1288.
        1774    .._00050                 fim:         1289.
        2002    .._00051                 fim:         1290.
        2007    .._00052                 fim:         1291.
        2012    .._00053                 fim:         1292.
        2017    .._00054                 fim:         1293.
        2023    .._00055                 fim:         1294.
        2030    .._00056                 fim:         1295.
        2034    .._00057                 fim:         1296.
        2041    .._00060                 fim:         1297.
        2046    .._00061                 fim:         1298.
        2051    .._00062                 fim:         1299.
        2055    .._00063                 fim:         1300.
        2061    .._00064                 fim:         1301.
        2064    .._00065                 fim:         1302.
        2067    .._00066                 fim:         1303.
        2072    .._00067                 fim:         1304.
        2077    .._00070                 fim:         1305.
        2101    .._00071                 fim:         1306.
        2107    .._00072                 fim:         1307.
        2112    .._00073                 fim:         1308.
        2115    .._00074                 fim:         1309.
        2123    .._00075                 fim:         1310.
        2125    .._00076                 fim:         1311.
        2127    .._00077                 fim:         1312.
        2131    .._00100                 fim:         1313.
        2137    .._00101                 fim:         1314.
        2141    .._00102                 fim:         1315.
        2143    .._00103                 fim:         1316.
        2145    .._00104                 fim:         1317.
        2147    .._00105                 fim:         1318.
        2151    .._00106                 fim:         1319.
        2153    .._00107                 fim:         1320.
        2160    .._00110                 fim:         1321.
        2162    .._00111                 fim:         1322.
        2171    .._00112                 fim:         1323.
        2177    .._00113                 fim:         1324.
      400000    access_audit_flag        fim:           90,  366,  471, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
                                                      1291, 1292, 1294, 1295.
                access_audit_log_fault_  fim:          411,  497.
                access_viol              fim:         1226.
         530    access_violation         fim:          558, 1264.
           0    access_violation_entry   fim:          107,  110.
         540    acv_bit_end              fim:          564,  570.
         533    acv_bit_loop             fim:          562,  568.
         205    addmatch                 fim:          275,  280.
        1524    alrm_loc                 fim:         1311.
                am_fault                 fim:         1226.
          16    am_fault_link            fim:         1226, 1298.
           1    apuhr1.apu_pad2          history_regs_dps8:  253.
           1    apuhr1.apu_pad2_word     history_regs_dps8:  252.
           3    apuhr1.bsy_mask          history_regs_dps8:  222.
           7    apuhr1.bsy_shift         history_regs_dps8:  221.
           0    apuhr1.bsy_word          history_regs_dps8:  220.
          40    apuhr1.cache_used        history_regs_dps8:  244.
           1    apuhr1.cache_used_word   history_regs_dps8:  243.
       77777    apuhr1.esn_mask          history_regs_dps8:  195.
          25    apuhr1.esn_shift         history_regs_dps8:  194.
           0    apuhr1.esn_word          history_regs_dps8:  193.
       10000    apuhr1.fanp              history_regs_dps8:  213.
           0    apuhr1.fanp_word         history_regs_dps8:  212.
        4000    apuhr1.fap               history_regs_dps8:  215.
           0    apuhr1.fap_word          history_regs_dps8:  214.
           1    apuhr1.fdsptw            history_regs_dps8:  201.
           0    apuhr1.fdsptw_word       history_regs_dps8:  200.
          14    apuhr1.finadd_shift      history_regs_dps8:  234.
           1    apuhr1.finadd_word       history_regs_dps8:  233.
           1    apuhr1.flt               history_regs_dps8:  231.
           2    apuhr1.flthld            history_regs_dps8:  251.
           1    apuhr1.flthld_word       history_regs_dps8:  250.
           0    apuhr1.flt_word          history_regs_dps8:  230.
      100000    apuhr1.fptw              history_regs_dps8:  207.
       40000    apuhr1.fptw2             history_regs_dps8:  209.
           0    apuhr1.fptw2_word        history_regs_dps8:  208.
           0    apuhr1.fptw_word         history_regs_dps8:  206.
      200000    apuhr1.fsdwp             history_regs_dps8:  205.
           0    apuhr1.fsdwp_word        history_regs_dps8:  204.
      400000    apuhr1.mdsptw            history_regs_dps8:  203.
           0    apuhr1.mdsptw_word       history_regs_dps8:  202.
       20000    apuhr1.mptw              history_regs_dps8:  211.
           0    apuhr1.mptw_word         history_regs_dps8:  210.
          40    apuhr1.mtchptw           history_regs_dps8:  226.
           0    apuhr1.mtchptw_word      history_regs_dps8:  225.
        2000    apuhr1.mtchsdw           history_regs_dps8:  217.
           0    apuhr1.mtchsdw_word      history_regs_dps8:  216.
           2    apuhr1.piaoosb           history_regs_dps8:  199.
           0    apuhr1.piaoosb_word      history_regs_dps8:  198.
           4    apuhr1.piapgbsy          history_regs_dps8:  197.
           0    apuhr1.piapgbsy_word     history_regs_dps8:  196.
          17    apuhr1.ptwaddr_mask      history_regs_dps8:  229.
           1    apuhr1.ptwaddr_shift     history_regs_dps8:  228.
           0    apuhr1.ptwaddr_word      history_regs_dps8:  227.
          20    apuhr1.ptwerr            history_regs_dps8:  246.
           1    apuhr1.ptwerr_word       history_regs_dps8:  245.
           3    apuhr1.ptwlvl_mask       history_regs_dps8:  249.
           2    apuhr1.ptwlvl_shift      history_regs_dps8:  248.
           1    apuhr1.ptwlvl_word       history_regs_dps8:  247.
         100    apuhr1.ptwmf             history_regs_dps8:  224.
           0    apuhr1.ptwmf_word        history_regs_dps8:  223.
         400    apuhr1.sdwerr            history_regs_dps8:  239.
           1    apuhr1.sdwerr_word       history_regs_dps8:  238.
           3    apuhr1.sdwlvl_mask       history_regs_dps8:  242.
           6    apuhr1.sdwlvl_shift      history_regs_dps8:  241.
           1    apuhr1.sdwlvl_word       history_regs_dps8:  240.
        1000    apuhr1.sdwmf             history_regs_dps8:  219.
           0    apuhr1.sdwmf_word        history_regs_dps8:  218.
           7    apuhr1.trr_mask          history_regs_dps8:  237.
          11    apuhr1.trr_shift         history_regs_dps8:  236.
           1    apuhr1.trr_word          history_regs_dps8:  235.
           0    apuhr2.CA                history_regs_dps8:  258.
         200    apuhr2.inhibit_bit       history_regs_dps8:  263.
           0    apuhr2.inhibit_bit_word  history_regs_dps8:  262.
        1777    apuhr2.opcode_mask       history_regs_dps8:  261.
          10    apuhr2.opcode_shift      history_regs_dps8:  260.
           0    apuhr2.opcode_word       history_regs_dps8:  259.
         100    apuhr2.pr_flag           history_regs_dps8:  265.
           0    apuhr2.pr_flag_word      history_regs_dps8:  264.
          77    apuhr2.TAG_mask          history_regs_dps8:  268.
           0    apuhr2.TAG_shift         history_regs_dps8:  267.
           0    apuhr2.TAG_word          history_regs_dps8:  266.
           7    apuhra.apu_pad1_mask     history_regs_l68:   217.
           6    apuhra.apu_pad1_shift    history_regs_l68:   216.
           1    apuhra.apu_pad1_word     history_regs_l68:   215.
           7    apuhra.apu_pad2_mask     history_regs_l68:   222.
           2    apuhra.apu_pad2_shift    history_regs_l68:   221.
           1    apuhra.apu_pad2_word     history_regs_l68:   220.
           1    apuhra.apu_pad3          history_regs_l68:   226.
           1    apuhra.apu_pad3_word     history_regs_l68:   225.
           3    apuhra.bsy_mask          history_regs_l68:   180.
          23    apuhra.bsy_shift         history_regs_l68:   179.
           0    apuhra.bsy_word          history_regs_l68:   178.
      200000    apuhra.dfsdw             history_regs_l68:   186.
           0    apuhra.dfsdw_word        history_regs_l68:   185.
          40    apuhra.encache           fim:          281,
                                         history_regs_l68:   219.
           1    apuhra.encache_word      history_regs_l68:   218.
       77777    apuhra.esn_mask          history_regs_l68:   177.
          25    apuhra.esn_shift         history_regs_l68:   176.
           0    apuhra.esn_word          history_regs_l68:   175.
       10000    apuhra.fanp              fim:          270,
                                         history_regs_l68:   194.
           0    apuhra.fanp_word         history_regs_l68:   193.
        4000    apuhra.fap               fim:          270,
                                         history_regs_l68:   196.
           0    apuhra.fap_word          history_regs_l68:   195.
           1    apuhra.fdsptw            history_regs_l68:   182.
           0    apuhra.fdsptw_word       history_regs_l68:   181.
          14    apuhra.finadd_shift      fim:          272,
                                         history_regs_l68:   211.
           1    apuhra.finadd_word       history_regs_l68:   210.
           1    apuhra.flt               history_regs_l68:   208.
           2    apuhra.flthld            history_regs_l68:   224.
           1    apuhra.flthld_word       history_regs_l68:   223.
           0    apuhra.flt_word          history_regs_l68:   207.
      100000    apuhra.fptw              history_regs_l68:   188.
       40000    apuhra.fptw2             history_regs_l68:   190.
           0    apuhra.fptw2_word        history_regs_l68:   189.
           0    apuhra.fptw_word         history_regs_l68:   187.
      400000    apuhra.mdsptw            history_regs_l68:   184.
           0    apuhra.mdsptw_word       history_regs_l68:   183.
       20000    apuhra.mptw              history_regs_l68:   192.
           0    apuhra.mptw_word         history_regs_l68:   191.
          17    apuhra.ptwamr_mask       history_regs_l68:   206.
           1    apuhra.ptwamr_shift      history_regs_l68:   205.
           0    apuhra.ptwamr_word       history_regs_l68:   204.
          40    apuhra.ptwmf             history_regs_l68:   203.
           0    apuhra.ptwmf_word        history_regs_l68:   202.
          17    apuhra.sdwamr_mask       history_regs_l68:   201.
           6    apuhra.sdwamr_shift      history_regs_l68:   200.
           0    apuhra.sdwamr_word       history_regs_l68:   199.
        2000    apuhra.sdwmf             history_regs_l68:   198.
           0    apuhra.sdwmf_word        history_regs_l68:   197.
           7    apuhra.trr_mask          history_regs_l68:   214.
          11    apuhra.trr_shift         history_regs_l68:   213.
           1    apuhra.trr_word          history_regs_l68:   212.
          40    apuhra_size              history_regs_l68:   173.
         173    apuhrlp                  fim:          263,  269,  278.
         140    apu_hreg                 fim:           89,  269,  280.
         344    arglist                  fim:           99,  407,  410,  411,  493,  496,  497,  541,  544,  986, 1098, 1101.
                audit_flags              fim:          396,  490.
          14    audit_flags.admin_deny_mask    access_audit_flags:        26.
          60    audit_flags.admin_grant_mask   access_audit_flags:        25.
          20    audit_flags.admin_ops    access_audit_flags:        37.
           1    audit_flags.cc_10_100    access_audit_flags:        41.
           2    audit_flags.cc_1_10      access_audit_flags:        40.
           4    audit_flags.faults       fim:          395,  489,
                                         access_audit_flags:        39.
        6000    audit_flags.fsattr_deny_mask   access_audit_flags:        22.
       30000    audit_flags.fsattr_grant_mask  access_audit_flags:        21.
      140000    audit_flags.fsobj_deny_mask    access_audit_flags:        20.
      600000    audit_flags.fsobj_grant_mask   access_audit_flags:        19.
          40    audit_flags.grant_deny_shift   access_audit_flags:        17.
           2    audit_flags.grant_or_deny_shift      access_audit_flags:        16.
       30000    audit_flags.other_deny_mask    access_audit_flags:        33.
      140000    audit_flags.other_grant_mask   access_audit_flags:        32.
        7740    audit_flags.pad          access_audit_flags:        35.
          10    audit_flags.priv_ops     access_audit_flags:        38.
         300    audit_flags.rcp_deny_mask      access_audit_flags:        24.
        1400    audit_flags.rcp_grant_mask     access_audit_flags:        23.
      600000    audit_flags.special_deny_mask  access_audit_flags:        31.
           3    audit_flags.special_grant_mask       access_audit_flags:        27.
         140    au_offset                history_regs_l68:    16.
         140    au_offset1               history_regs_dps8:   13.
         100    au_offset2               history_regs_dps8:   12.
        1436    avf                      fim:          571, 1284.
        1434    bam                      fim:          816, 1283.
                bce_and_return           fim:          202.
          64    bkpt_page.bar            fim:          188,
                                         bce_breakpoint_page:       11.
          61    bkpt_page.cache_mode_reg       bce_breakpoint_page:        9.
          62    bkpt_page.dbr            fim:          187,
                                         bce_breakpoint_page:       10.
           0    bkpt_page.mc_            bce_breakpoint_page:        7.
          60    bkpt_page.mode_reg       fim:          186,
                                         bce_breakpoint_page:        8.
          65    bkpt_page.sentinel       bce_breakpoint_page:       12.
                boundfault               fim:         1230.
          26    boundfault_link          fim:         1230, 1299.
          56    breakpoint               fim:          171,  179.
                breakpoint_page          fim:          184,  216.
                cache_luf_reg            fim:          865,  870.
        1254    cache_off                fim:          227,  302,  324, 1126.
        1255    cache_to_reg_mode        fim:          300,  322, 1128.
        1114    call                     fim:          546,  985, 1102.
         466    call_audit_for_primary   fim:          473,  488.
         350    call_audit_for_signal    fim:          368,  394.
        1170    call_offset              stack_header:        80.
         342    call_ptr                 fim:           98,  537,  986, 1096.
        1156    call_signal              fim:          522,  993, 1033, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
                                                      1292, 1294, 1295, 1296, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
                                                      1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324.
        1163    call_signal.1            fim:         1036, 1041.
         324    call_signaller           fim:          372,  521, 1245, 1246, 1247, 1250, 1251, 1258, 1263, 1265, 1266, 1267,
                                                      1269, 1281, 1283, 1300, 1301, 1302, 1303, 1304, 1314.
         510    call_signaller_signal    fim:          520,  533.
                check_fault              fim:          117,  140,  240,  246,  338,  355,  432.
                check_mct                fim:          142,  235,  374,  435.
         544    check_special_oob        fim:          573,  577.
         742    ck_eis_size              fim:          669,  757.
         672    ck_eovfl                 fim:          671,  707.
         702    ck_ovfl_rest             fim:          713,  716.
        1043    ck_str_rd                fim:          673,  711,  912.
         751    ck_sz_loc                fim:          760,  767.
         756    ck_trunc                 fim:          709,  774.
        1536    com                      fim:          612, 1316.
         567    command_fault            fim:          611, 1249.
                condition_name           fim:          384, 1045.
                connect_pending          fim:          697, 1012.
                copy_mc                  fim:          185,  403,  413,  443, 1054.
                cow_ptrs                 fim:          700, 1015.
         227    cparlvlp                 fim:          299,  312.
                cpar_err_data            fim:          305,  316,  318,  319,  325.
         246    cpar_hit                 fim:          309,  315.
                cpar_info                fim:          243,  285,  331,  868.
                cpar_mem_data            fim:          296,  304.
        1526    cput_loc                 fim:         1312.
                cpu_a_flt_ctr_array      fim:          478.
                cpu_b_flt_ctr_array      fim:          479.
                cpu_c_flt_ctr_array      fim:          480.
                cpu_d_flt_ctr_array      fim:          481.
                cpu_e_flt_ctr_array      fim:          482.
                cpu_f_flt_ctr_array      fim:          483.
                cpu_g_flt_ctr_array      fim:          484.
                cpu_h_flt_ctr_array      fim:          485.
         143    csd_par                  fim:          239,  243.
         151    cstr_par                 fim:          245,  250.
           1    cuhr.cache_flush         history_regs_dps8:   83.
           1    cuhr.cache_flush_word    history_regs_dps8:   82.
          20    cuhr.cache_rd            history_regs_dps8:   75.
           1    cuhr.cache_rd_word       history_regs_dps8:   74.
          14    cuhr.ca_value_shift      history_regs_dps8:   66.
           1    cuhr.ca_value_word       history_regs_dps8:   65.
         100    cuhr.ic                  history_regs_dps8:   41.
           0    cuhr.ic_word             history_regs_dps8:   40.
         200    cuhr.inhib               history_regs_dps8:   58.
           0    cuhr.inhib_word          history_regs_dps8:   57.
          40    cuhr.ins_fetch           history_regs_dps8:   73.
           1    cuhr.ins_fetch_word      history_regs_dps8:   72.
          10    cuhr.internal            fim:          852,
                                         history_regs_dps8:   47.
           0    cuhr.internal_word       history_regs_dps8:   46.
         100    cuhr.its_flag            history_regs_dps8:   60.
           0    cuhr.its_flag_word       history_regs_dps8:   59.
           1    cuhr.master_mode         history_regs_dps8:   53.
           0    cuhr.master_mode_word    history_regs_dps8:   52.
          10    cuhr.mem_rd              history_regs_dps8:   77.
           1    cuhr.mem_rd_word         history_regs_dps8:   76.
           4    cuhr.mem_sto             history_regs_dps8:   79.
           1    cuhr.mem_sto_word        history_regs_dps8:   78.
        1777    cuhr.op_code_mask        history_regs_dps8:   56.
          10    cuhr.op_code_shift       history_regs_dps8:   55.
           0    cuhr.op_code_word        history_regs_dps8:   54.
           4    cuhr.pai                 history_regs_dps8:   49.
           0    cuhr.pai_word            history_regs_dps8:   48.
          37    cuhr.pcmd_mask           history_regs_dps8:   69.
           7    cuhr.pcmd_shift          history_regs_dps8:   68.
           1    cuhr.pcmd_word           history_regs_dps8:   67.
           2    cuhr.pfa                 history_regs_dps8:   51.
           0    cuhr.pfa_word            history_regs_dps8:   50.
      400000    cuhr.pia                 fim:          850,
                                         history_regs_dps8:   19.
           0    cuhr.pia_word            history_regs_dps8:   18.
           2    cuhr.pib                 history_regs_dps8:   81.
           1    cuhr.pib_word            history_regs_dps8:   80.
      200000    cuhr.poa                 history_regs_dps8:   21.
           0    cuhr.poa_word            history_regs_dps8:   20.
       10000    cuhr.pon                 history_regs_dps8:   29.
           0    cuhr.pon_word            history_regs_dps8:   28.
          20    cuhr.portf               history_regs_dps8:   45.
           0    cuhr.portf_word          history_regs_dps8:   44.
       20000    cuhr.pot                 history_regs_dps8:   27.
           0    cuhr.pot_word            history_regs_dps8:   26.
        4000    cuhr.raw                 history_regs_dps8:   31.
           0    cuhr.raw_word            history_regs_dps8:   30.
      100000    cuhr.riw                 history_regs_dps8:   23.
           0    cuhr.riw_word            history_regs_dps8:   22.
          40    cuhr.rpts                history_regs_dps8:   43.
           0    cuhr.rpts_word           history_regs_dps8:   42.
        1000    cuhr.rtrgo               history_regs_dps8:   35.
           0    cuhr.rtrgo_word          history_regs_dps8:   34.
        2000    cuhr.saw                 history_regs_dps8:   33.
           0    cuhr.saw_word            history_regs_dps8:   32.
       40000    cuhr.siw                 history_regs_dps8:   25.
           0    cuhr.siw_word            history_regs_dps8:   24.
          77    cuhr.tag_mask            history_regs_dps8:   63.
           0    cuhr.tag_shift           history_regs_dps8:   62.
           0    cuhr.tag_word            history_regs_dps8:   61.
         400    cuhr.xde                 history_regs_dps8:   37.
           0    cuhr.xde_word            history_regs_dps8:   36.
         200    cuhr.xdo                 history_regs_dps8:   39.
           0    cuhr.xdo_word            history_regs_dps8:   38.
         100    cuhr.xint                history_regs_dps8:   71.
           1    cuhr.xint_word           history_regs_dps8:   70.
          10    cuhra.ar                 history_regs_l68:    52.
           0    cuhra.ar_word            history_regs_l68:    51.
           1    cuhra.ca_value           history_regs_l68:    70.
          20    cuhra.cul                history_regs_l68:    86.
           1    cuhra.cul_word           history_regs_l68:    85.
         100    cuhra.cus                history_regs_l68:    82.
           1    cuhra.cus_word           history_regs_l68:    81.
           4    cuhra.dir                fim:          836,
                                         history_regs_l68:    90.
           1    cuhra.dir_word           history_regs_l68:    89.
         100    cuhra.ic                 history_regs_l68:    46.
           0    cuhra.ic_word            history_regs_l68:    45.
         200    cuhra.inhib              history_regs_l68:    63.
           0    cuhra.inhib_word         history_regs_l68:    62.
         200    cuhra.ins_fetch          history_regs_l68:    80.
           1    cuhra.ins_fetch_word     history_regs_l68:    79.
         100    cuhra.its_flag           history_regs_l68:    65.
           0    cuhra.its_flag_word      history_regs_l68:    64.
           2    cuhra.nflt               history_regs_l68:    56.
           0    cuhra.nflt_word          history_regs_l68:    55.
           1    cuhra.np                 history_regs_l68:    58.
           2    cuhra.npcb               history_regs_l68:    92.
           1    cuhra.npcb_word          history_regs_l68:    91.
           0    cuhra.np_word            history_regs_l68:    57.
           4    cuhra.nxip               history_regs_l68:    54.
           0    cuhra.nxip_word          history_regs_l68:    53.
        1777    cuhra.op_code_mask       history_regs_l68:    61.
          10    cuhra.op_code_shift      history_regs_l68:    60.
           0    cuhra.op_code_word       history_regs_l68:    59.
          10    cuhra.oul                history_regs_l68:    88.
           1    cuhra.oul_word           history_regs_l68:    87.
          40    cuhra.ous                history_regs_l68:    84.
           1    cuhra.ous_word           history_regs_l68:    83.
          37    cuhra.pcmd_mask          history_regs_l68:    73.
          15    cuhra.pcmd_shift         history_regs_l68:    72.
           1    cuhra.pcmd_word          history_regs_l68:    71.
      400000    cuhra.pia                history_regs_l68:    24.
           0    cuhra.pia_word           history_regs_l68:    23.
           1    cuhra.pib                history_regs_l68:    94.
           1    cuhra.pib_word           history_regs_l68:    93.
      200000    cuhra.poa                history_regs_l68:    26.
           0    cuhra.poa_word           history_regs_l68:    25.
       10000    cuhra.pon                history_regs_l68:    34.
           0    cuhra.pon_word           history_regs_l68:    33.
       20000    cuhra.pot                history_regs_l68:    32.
           0    cuhra.pot_word           history_regs_l68:    31.
          17    cuhra.psl_mask           history_regs_l68:    76.
          11    cuhra.psl_shift          history_regs_l68:    75.
           1    cuhra.psl_word           history_regs_l68:    74.
        4000    cuhra.raw                history_regs_l68:    36.
           0    cuhra.raw_word           history_regs_l68:    35.
      100000    cuhra.riw                history_regs_l68:    28.
           0    cuhra.riw_word           history_regs_l68:    27.
          40    cuhra.rpts               history_regs_l68:    48.
           0    cuhra.rpts_word          history_regs_l68:    47.
        2000    cuhra.saw                history_regs_l68:    38.
           0    cuhra.saw_word           history_regs_l68:    37.
       40000    cuhra.siw                history_regs_l68:    30.
           0    cuhra.siw_word           history_regs_l68:    29.
          77    cuhra.tag_mask           history_regs_l68:    68.
           0    cuhra.tag_shift          history_regs_l68:    67.
           0    cuhra.tag_word           history_regs_l68:    66.
        1000    cuhra.trgo               history_regs_l68:    40.
           0    cuhra.trgo_word          history_regs_l68:    39.
          20    cuhra.wi                 history_regs_l68:    50.
           0    cuhra.wi_word            history_regs_l68:    49.
         400    cuhra.xde                history_regs_l68:    42.
           0    cuhra.xde_word           history_regs_l68:    41.
         200    cuhra.xdo                history_regs_l68:    44.
           0    cuhra.xdo_word           history_regs_l68:    43.
         400    cuhra.xint               history_regs_l68:    78.
           1    cuhra.xint_word          history_regs_l68:    77.
          40    cuhra_size               history_regs_l68:    21.
         164    cuhrlp                   fim:          261,  267.
        1026    cu_dps8                  fim:          835,  850.
          40    cu_hreg                  fim:           88,  833,  854.
          40    cu_offset                history_regs_dps8:   11,
                                         history_regs_l68:    14.
        1275    c_256k_mask              fim:          287, 1151.
        1302    c_abs_addr_mask          fim:          288, 1157.
        1263    c_lv_inc_tab             fim:          310, 1139.
        1307    c_lv_shift               fim:          328, 1163.
        1270    c_lv_st_mask             fim:          297, 1145.
        1256    c_sdw_bounds             fim:          291, 1133.
         202    dec_apx                  fim:          271,  276.
         170    dec_cux                  fim:          265,  277,  282,  313.
      472000    dfstr_inst               fim:           87,  923.
        1206    die_die_die_             fim:          122,  810, 1068.
        1222    die_die_die_.fake_ca     fim:         1086, 1090.
        1215    die_die_die_.use_end_ptr       fim:         1076, 1081.
         716    doub_prec                fim:          726,  730.
         210    dps8_hit                 fim:          264,  283.
        2000    dp_opcode                fim:           83,  725,  746.
          55    drl_die                  fim:          169,  175.
          30    drl_entry                fim:          148,  151.
                drl_fault_trouble        fim:          175.
         305    drl_join                 fim:          159,  353.
                drl_message_pointer      fim:          161,  174.
                dseg                     fim:          292,  334.
         100    duhra.addsub             history_regs_l68:   359.
           1    duhra.addsub_word        history_regs_l68:   358.
          10    duhra.adjlen             history_regs_l68:   292.
           0    duhra.adjlen_word        history_regs_l68:   291.
      100000    duhra.anpk               history_regs_l68:   341.
           1    duhra.anpk_word          history_regs_l68:   340.
           4    duhra.anstg              history_regs_l68:   331.
           1    duhra.anstg_word         history_regs_l68:   330.
        1000    duhra.aoplg1             history_regs_l68:   317.
           1    duhra.aoplg1_word        history_regs_l68:   316.
         400    duhra.aoplg2             history_regs_l68:   319.
           1    duhra.aoplg2_word        history_regs_l68:   318.
        4000    duhra.bde                history_regs_l68:   349.
           1    duhra.bde_word           history_regs_l68:   348.
       20000    duhra.blnk               history_regs_l68:   345.
           1    duhra.blnk_word          history_regs_l68:   344.
      200000    duhra.charop             history_regs_l68:   339.
           1    duhra.charop_word        history_regs_l68:   338.
          40    duhra.dataav_du          history_regs_l68:   325.
           1    duhra.dataav_du_word     history_regs_l68:   324.
        2000    duhra.dbe                history_regs_l68:   351.
           1    duhra.dbe_word           history_regs_l68:   350.
      200000    duhra.dcldgta            history_regs_l68:   303.
           1    duhra.dcldgta_word       history_regs_l68:   302.
      100000    duhra.dcldgtb            history_regs_l68:   305.
           1    duhra.dcldgtb_word       history_regs_l68:   304.
       40000    duhra.dcldgtc            history_regs_l68:   307.
           1    duhra.dcldgtc_word       history_regs_l68:   306.
       10000    duhra.dfrst              history_regs_l68:   244.
           0    duhra.dfrst_word         history_regs_l68:   243.
       20000    duhra.dlendr             history_regs_l68:   242.
           0    duhra.dlendr_word        history_regs_l68:   241.
      400000    duhra.duidl              history_regs_l68:   301.
           1    duhra.duidl_word         history_regs_l68:   300.
        1000    duhra.dulea              history_regs_l68:   250.
           0    duhra.dulea_word         history_regs_l68:   249.
           4    duhra.durw               history_regs_l68:   264.
           0    duhra.durw_word          history_regs_l68:   263.
         400    duhra.dusea              history_regs_l68:   252.
           0    duhra.dusea_word         history_regs_l68:   251.
          17    duhra.du_pad1_mask       history_regs_l68:   286.
           6    duhra.du_pad1_shift      history_regs_l68:   285.
           0    duhra.du_pad1_word       history_regs_l68:   284.
           1    duhra.du_pad2            history_regs_l68:   298.
           0    duhra.du_pad2_word       history_regs_l68:   297.
       10000    duhra.du_pad3            history_regs_l68:   347.
           1    duhra.du_pad3_word       history_regs_l68:   346.
          17    duhra.du_pad4_mask       history_regs_l68:   366.
           0    duhra.du_pad4_shift      history_regs_l68:   365.
           1    duhra.du_pad4_word       history_regs_l68:   364.
       40000    duhra.du_wrd             history_regs_l68:   275.
           0    duhra.du_wrd_word        history_regs_l68:   274.
          10    duhra.einst              history_regs_l68:   262.
           0    duhra.einst_word         history_regs_l68:   261.
           1    duhra.endseq_du          history_regs_l68:   335.
           1    duhra.endseq_du_word     history_regs_l68:   334.
          20    duhra.eseq               history_regs_l68:   260.
           0    duhra.eseq_word          history_regs_l68:   259.
          40    duhra.exh                history_regs_l68:   258.
           0    duhra.exh_word           history_regs_l68:   257.
       40000    duhra.exmop              history_regs_l68:   343.
           1    duhra.exmop_word         history_regs_l68:   342.
          20    duhra.expon              history_regs_l68:   363.
           1    duhra.expon_word         history_regs_l68:   362.
        4000    duhra.exr                history_regs_l68:   246.
           0    duhra.exr_word           history_regs_l68:   245.
      400000    duhra.fai1               history_regs_l68:   269.
           0    duhra.fai1_word          history_regs_l68:   268.
      200000    duhra.fai2               history_regs_l68:   271.
           0    duhra.fai2_word          history_regs_l68:   270.
      100000    duhra.fai3               history_regs_l68:   273.
           0    duhra.fai3_word          history_regs_l68:   272.
         400    duhra.flt                history_regs_l68:   355.
           1    duhra.flt_word           history_regs_l68:   354.
        4000    duhra.four               history_regs_l68:   281.
           0    duhra.four_word          history_regs_l68:   280.
           2    duhra.inhibstc1          history_regs_l68:   296.
           0    duhra.inhibstc1_word     history_regs_l68:   295.
        2000    duhra.ldfrst             history_regs_l68:   248.
           0    duhra.ldfrst_word        history_regs_l68:   247.
      400000    duhra.len128             history_regs_l68:   337.
           1    duhra.len128_word        history_regs_l68:   336.
         200    duhra.lrwrg1             history_regs_l68:   321.
           1    duhra.lrwrg1_word        history_regs_l68:   320.
         100    duhra.lrwrg2             history_regs_l68:   323.
           1    duhra.lrwrg2_word        history_regs_l68:   322.
           4    duhra.mif                history_regs_l68:   294.
           0    duhra.mif_word           history_regs_l68:   293.
          40    duhra.multdiv            history_regs_l68:   361.
           1    duhra.multdiv_word       history_regs_l68:   360.
      100000    duhra.ndesc              history_regs_l68:   238.
           0    duhra.ndesc_word         history_regs_l68:   237.
       20000    duhra.nine               history_regs_l68:   277.
           0    duhra.nine_word          history_regs_l68:   276.
       10000    duhra.nopgl1             history_regs_l68:   311.
           1    duhra.nopgl1_word        history_regs_l68:   310.
        2000    duhra.nopgl2             history_regs_l68:   315.
           1    duhra.nopgl2_word        history_regs_l68:   314.
       20000    duhra.nopl1              history_regs_l68:   309.
           1    duhra.nopl1_word         history_regs_l68:   308.
        4000    duhra.nopl2              history_regs_l68:   313.
           1    duhra.nopl2_word         history_regs_l68:   312.
          10    duhra.numstg             history_regs_l68:   329.
           1    duhra.numstg_word        history_regs_l68:   328.
        2000    duhra.one                history_regs_l68:   283.
           0    duhra.one_word           history_regs_l68:   282.
           2    duhra.opav               history_regs_l68:   333.
           1    duhra.opav_word          history_regs_l68:   332.
      400000    duhra.pol                history_regs_l68:   234.
           0    duhra.pol_word           history_regs_l68:   233.
      200000    duhra.pop                history_regs_l68:   236.
           0    duhra.pop_word           history_regs_l68:   235.
           3    duhra.ptra_mask          history_regs_l68:   267.
          22    duhra.ptra_shift         history_regs_l68:   266.
           0    duhra.ptra_word          history_regs_l68:   265.
         200    duhra.redo               history_regs_l68:   254.
           0    duhra.redo_word          history_regs_l68:   253.
         200    duhra.rnd                history_regs_l68:   357.
           1    duhra.rnd_word           history_regs_l68:   356.
          20    duhra.rw1rl              history_regs_l68:   327.
           1    duhra.rw1rl_word         history_regs_l68:   326.
          40    duhra.samplint           history_regs_l68:   288.
           0    duhra.samplint_word      history_regs_l68:   287.
       40000    duhra.seladr             history_regs_l68:   240.
           0    duhra.seladr_word        history_regs_l68:   239.
          20    duhra.sfcsq              history_regs_l68:   290.
           0    duhra.sfcsq_word         history_regs_l68:   289.
        1000    duhra.shft               history_regs_l68:   353.
           1    duhra.shft_word          history_regs_l68:   352.
       10000    duhra.six                history_regs_l68:   279.
           0    duhra.six_word           history_regs_l68:   278.
         100    duhra.wcws               history_regs_l68:   256.
           0    duhra.wcws_word          history_regs_l68:   255.
          40    duhra_size               history_regs_l68:   231.
         100    du_offset                history_regs_l68:    15.
         100    du_ouhr.carry_           history_regs_dps8:  176.
           1    du_ouhr.carry__word      history_regs_dps8:  175.
          37    du_ouhr.dcode_mask       history_regs_dps8:  152.
           1    du_ouhr.dcode_pad        history_regs_dps8:  162.
           0    du_ouhr.dcode_pad_word   history_regs_dps8:  161.
           0    du_ouhr.dcode_shift      history_regs_dps8:  151.
           0    du_ouhr.dcode_word       history_regs_dps8:  150.
         400    du_ouhr.dfrst            history_regs_dps8:  143.
           0    du_ouhr.dfrst_word       history_regs_dps8:  142.
           1    du_ouhr.dtrgo            history_regs_dps8:  188.
           1    du_ouhr.dtrgo_word       history_regs_dps8:  187.
          10    du_ouhr.du_bit           history_regs_dps8:  117.
           0    du_ouhr.du_bit_word      history_regs_dps8:  116.
           4    du_ouhr.du_word          history_regs_dps8:  119.
           0    du_ouhr.du_word_word     history_regs_dps8:  118.
         200    du_ouhr.endseq           history_regs_dps8:  109.
        2000    du_ouhr.endseqf          history_regs_dps8:  103.
           0    du_ouhr.endseqf_word     history_regs_dps8:  102.
           0    du_ouhr.endseq_word      history_regs_dps8:  108.
          20    du_ouhr.eovfl_           history_regs_dps8:  180.
           1    du_ouhr.eovfl__word      history_regs_dps8:  179.
          10    du_ouhr.eufl_            history_regs_dps8:  182.
           1    du_ouhr.eufl__word       history_regs_dps8:  181.
         200    du_ouhr.exh              history_regs_dps8:  145.
           0    du_ouhr.exh_word         history_regs_dps8:  144.
      400000    du_ouhr.fanld1           history_regs_dps8:   89.
           0    du_ouhr.fanld1_word      history_regs_dps8:   88.
      200000    du_ouhr.fanld2           history_regs_dps8:   91.
           0    du_ouhr.fanld2_word      history_regs_dps8:   90.
      100000    du_ouhr.fanstr           history_regs_dps8:   93.
           0    du_ouhr.fanstr_word      history_regs_dps8:   92.
        1000    du_ouhr.fdud             history_regs_dps8:  105.
           0    du_ouhr.fdud_word        history_regs_dps8:  104.
         100    du_ouhr.fgadd            history_regs_dps8:  147.
           0    du_ouhr.fgadd_word       history_regs_dps8:  146.
        1000    du_ouhr.fgch             history_regs_dps8:  141.
           0    du_ouhr.fgch_word        history_regs_dps8:  140.
      100000    du_ouhr.fgeac            history_regs_dps8:  129.
           0    du_ouhr.fgeac_word       history_regs_dps8:  128.
       40000    du_ouhr.fgeae            history_regs_dps8:  131.
           0    du_ouhr.fgeae_word       history_regs_dps8:  130.
       20000    du_ouhr.fgeaf            history_regs_dps8:  133.
           0    du_ouhr.fgeaf_word       history_regs_dps8:  132.
       10000    du_ouhr.fgeah            history_regs_dps8:  135.
           0    du_ouhr.fgeah_word       history_regs_dps8:  134.
        4000    du_ouhr.fgldp1           history_regs_dps8:  137.
           0    du_ouhr.fgldp1_word      history_regs_dps8:  136.
         400    du_ouhr.fgstr            history_regs_dps8:  107.
           0    du_ouhr.fgstr_word       history_regs_dps8:  106.
       40000    du_ouhr.fldwrt1          history_regs_dps8:   95.
           0    du_ouhr.fldwrt1_word     history_regs_dps8:   94.
       20000    du_ouhr.fldwrt2          history_regs_dps8:   97.
           0    du_ouhr.fldwrt2_word     history_regs_dps8:   96.
       10000    du_ouhr.fnld1            history_regs_dps8:   99.
           0    du_ouhr.fnld1_word       history_regs_dps8:   98.
        4000    du_ouhr.fnld2            history_regs_dps8:  101.
           0    du_ouhr.fnld2_word       history_regs_dps8:  100.
          20    du_ouhr.four             history_regs_dps8:  115.
           0    du_ouhr.four_word        history_regs_dps8:  114.
      200000    du_ouhr.fpop             history_regs_dps8:  127.
           0    du_ouhr.fpop_word        history_regs_dps8:  126.
        2000    du_ouhr.fsweq            history_regs_dps8:  139.
           0    du_ouhr.fsweq_word       history_regs_dps8:  138.
           4    du_ouhr.gbda             history_regs_dps8:  158.
           0    du_ouhr.gbda_word        history_regs_dps8:  157.
          10    du_ouhr.gemc             history_regs_dps8:  156.
           0    du_ouhr.gemc_word        history_regs_dps8:  155.
          20    du_ouhr.gldp2            history_regs_dps8:  154.
           0    du_ouhr.gldp2_word       history_regs_dps8:  153.
           2    du_ouhr.gsp5             history_regs_dps8:  160.
           0    du_ouhr.gsp5_word        history_regs_dps8:  159.
           2    du_ouhr.hex_             history_regs_dps8:  186.
           1    du_ouhr.hex__word        history_regs_dps8:  185.
           1    du_ouhr.ict              history_regs_dps8:  164.
          40    du_ouhr.intrptd          history_regs_dps8:  149.
           0    du_ouhr.intrptd_word     history_regs_dps8:  148.
         377    du_ouhr.ir_reg_mask      history_regs_dps8:  170.
           1    du_ouhr.ir_reg_shift     history_regs_dps8:  169.
           1    du_ouhr.ir_reg_word      history_regs_dps8:  168.
         100    du_ouhr.nine             history_regs_dps8:  111.
           0    du_ouhr.nine_word        history_regs_dps8:  110.
           4    du_ouhr.oflm_            history_regs_dps8:  184.
           1    du_ouhr.oflm__word       history_regs_dps8:  183.
          40    du_ouhr.ovfl_            history_regs_dps8:  178.
           1    du_ouhr.ovfl__word       history_regs_dps8:  177.
           2    du_ouhr.ptr1             history_regs_dps8:  121.
           0    du_ouhr.ptr1_word        history_regs_dps8:  120.
           1    du_ouhr.ptr2             history_regs_dps8:  123.
           0    du_ouhr.ptr2_word        history_regs_dps8:  122.
      400000    du_ouhr.ptr3             history_regs_dps8:  125.
           0    du_ouhr.ptr3_word        history_regs_dps8:  124.
         777    du_ouhr.rs_mask          history_regs_dps8:  167.
          11    du_ouhr.rs_shift         history_regs_dps8:  166.
           1    du_ouhr.rs_word          history_regs_dps8:  165.
         200    du_ouhr.sign_            history_regs_dps8:  174.
           1    du_ouhr.sign__word       history_regs_dps8:  173.
          40    du_ouhr.six              history_regs_dps8:  113.
           0    du_ouhr.six_word         history_regs_dps8:  112.
         400    du_ouhr.zero_            history_regs_dps8:  172.
           1    du_ouhr.zero__word       history_regs_dps8:  171.
           0    du_ou_offset             history_regs_dps8:   10.
        1320    eight_angry_zeros        fim:          137, 1239.
        1174    entry_offset             stack_header:        84.
        1500    eovf                     fim:          710,  722, 1301.
                eovfl_value              fim:          727,  731.
        1502    eufl                     fim:          672,  688, 1302.
                exp_ovfl_rest            fim:          717.
                exp_undfl_rest           fim:          683.
                fault                    fim:         1227.
         456    fault_ctr_tab            fim:          362,  466,  477,  687,  721.
         413    fault_join               fim:          124,  433.
        1330    fault_table              fim:          365,  382,  417,  470,  499,  598,  688,  722,  763, 1008, 1043, 1243.
                fault_trouble            fim:          776, 1110.
         354    fcode                    fim:          100,  463,  498, 1007, 1039, 1042.
       20000    fgbx.alert               flagbox:       41.
          77    fgbx.bce_entry_mask      flagbox:       46.
           1    fgbx.bce_entry_shift     flagbox:       45.
       10000    fgbx.breakpoint          fim:          181,  205,
                                         flagbox:       42.
      200000    fgbx.call_bce            flagbox:       38.
      400000    fgbx.flags               flagbox:       31.
          40    fgbx.flags_word          flagbox:       30.
          56    fgbx.hc_dbr              flagbox:       50.
        2000    fgbx.io_reconfig         flagbox:       44.
        4000    fgbx.manual_crash        flagbox:       43.
       40000    fgbx.mess                flagbox:       40.
          60    fgbx.message             flagbox:       51.
         100    fgbx.return_to_bce_command     flagbox:       52.
          43    fgbx.rtb                 fim:          182,  207,
                                         flagbox:       35.
          44    fgbx.sentinel            flagbox:       48.
      100000    fgbx.shut                flagbox:       39.
          41    fgbx.slt_segno           flagbox:       33.
      400000    fgbx.ssenb               flagbox:       37.
          54    fgbx.sst_sdw             flagbox:       49.
           0    fgbx.toehold_used        flagbox:       28.
         140    fgbx_size                flagbox:       25.
                fim_abs_seg              fim:          256,  259.
                fim_util                 fim:          116,  117,  138,  140,  142,  143,  175,  185,  190,  200,  233,  235,
                                                       236,  240,  246,  338,  354,  355,  374,  375,  376,  401,  403,  413,
                                                       431,  432,  435,  436,  438,  441,  443,  696,  776, 1022, 1054, 1083, 1110.
                fim_v_delta              fim:          447, 1005.
                fim_v_temp               fim:          445, 1003.
                fim_v_time_calc          fim:         1022.
                fim_v_time_init          fim:          116,  138,  233,  354,  431.
         563    fixindex                 fim:          582,  587,  591,  595,  615,  619,  631,  634,  637.
         564    fixindex_1               fim:          575,  592,  597.
                flagbox                  fim:          180,  204.
        1010    fnd_crd                  fim:          262,  833.
        1430    foc                      fim:          812, 1281.
                force_hist_regs          fim:          143,  236.
      470000    fstr_inst                fim:           86,  921.
        1060    get_instruction_size     fim:          784,  943.
        1076    gis_found                fim:          956,  960.
        1072    gis_loop                 fim:          955,  958.
        1101    gis_table                fim:          953,  966.
                hardware_fault           fim:         1229.
          24    hardware_fault_link      fim:         1229, 1244, 1253, 1255, 1256, 1316.
         737    hex_doub_prec            fim:          747,  752.
                hex_eovfl_value          fim:          748,  753.
         731    hex_ovfl                 fim:          724,  745.
                hfp_exponent_enabled     fim:          664.
         140    history_registers        fim:           96,  451, 1060.
                history_reg_data         fim:          141,  234,  373,  434.
                hist_regs                fim:          375,  436.
                hregs_saved              fim:          449, 1056.
        1236    illegal_fault            fim:         1109, 1248, 1252, 1259, 1261, 1262, 1270, 1271, 1272, 1273, 1274, 1275.
         773    illegal_procedure        fim:          805, 1254.
                initialization_state     fim:          531.
         400    inst_bit27_on            fim:           84,  769,  919,  951.
        1506    ipr                      fim:          820, 1304.
        1023    l68_rd_cmd               fim:          840,  842,  845.
          30    linkage_fault_link       fim:         1231, 1268.
                link_fault               fim:         1231.
                link_snap                fim:         1231.
                log_fault                fim:          411,  497.
        1240    lp                       fim:          114,  135,  155,  231,  351,  429, 1116, 1119.
      760000    lprp_insts               fim:           81,  618.
          60    mach_cond                fim:           95,  402,  442,  991.
        1320    main                     fim:         1218, 1219, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
                                                      1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
                                                      1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1281, 1282,
                                                      1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
                                                      1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
                                                      1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
                                                      1319, 1320, 1321, 1322, 1323, 1324.
      300000    mc.cpu_type_mask         mc:            22.
           3    mc.cpu_type_shift        mc:            25.
          46    mc.cpu_type_word         mc:            21.
          50    mc.eis_info              fim:          115,  136,  156,  217,  232,  352,  430, 1025,
                                         mc:            11.
          43    mc.errcode               fim:          359,  377,  381,  416,  459,  992,
                                         mc:            17.
          46    mc.ext_fault_reg         mc:            23.
       77774    mc.ext_fault_reg_mask    mc:            24.
          45    mc.fault_reg             fim:          237,
                                         mc:            19.
          46    mc.fault_time            mc:            20.
          44    mc.fim_temp              fim:          274,  303,  307,  379,  468,  847, 1034,
                                         mc:            18.
          42    mc.ips_temp              mc:            16.
          40    mc.mask                  mc:            15.
           0    mc.prs                   fim:          219,  589,  704, 1027,
                                         mc:             8.
          20    mc.regs                  fim:          113,  134,  154,  218,  230,  350,  428,  679,  680,  682,  703,  733,
                                                       737,  738, 1026,
                                         mc:             9.
          30    mc.scu                   fim:          211,  212,  999, 1000,
                                         mc:            10.
          30    mc.scu.apu_stat_word     mc:            48.
          35    mc.scu.ca_word           fim:          624, 1089,
                                         mc:           207.
          32    mc.scu.cpu_no_word       fim:          250,
                                         mc:           138.
          35    mc.scu.cpu_tag_word      mc:           231.
          35    mc.scu.cu_stat_word      fim:          196,  659,  740,  790,
                                         mc:           211.
          32    mc.scu.delta_word        mc:           144.
          30    mc.scu.fault_cntr_word   mc:            66.
          31    mc.scu.fault_data_word   fim:          356,  460,  559,  811,
                                         mc:            74.
          34    mc.scu.ilc_word          fim:          162,  193,  194,  677,  715,  785,  786,
                                         mc:           182.
          34    mc.scu.indicators_word   fim:          660,  689,  693,  695,  741,  788,
                                         mc:           186.
          31    mc.scu.port_stat_word    fim:          613,
                                         mc:           108.
          30    mc.scu.ppr.prr_word      fim:          157,
                                         mc:            33.
          30    mc.scu.ppr.psr_word      fim:          120,  164,  808,  913,  944,
                                         mc:            38.
          30    mc.scu.ppr.p_word        mc:            43.
          33    mc.scu.tpr.tbr_word      mc:           174.
          32    mc.scu.tpr.trr_word      mc:           128.
          32    mc.scu.tpr.tsr_word      fim:          578,  625,
                                         mc:           133.
          33    mc.scu.tsr_stat_word     mc:           152.
         340    mc_ptr                   fim:           97,  405,  406,  444,  492,  543.
      400000    minus_128                fim:           82,  681.
        1560    names                    fim:         1217, 1219, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
                                                      1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
                                                      1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1281, 1282,
                                                      1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
                                                      1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
                                                      1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
                                                      1319, 1320, 1321, 1322, 1323, 1324.
        1146    no_connect               fim:         1013, 1017.
         667    no_con_pend              fim:          698,  702.
         267    no_find                  fim:          266,  332.
         437    no_hist                  fim:          450,  455.
         722    no_negate                fim:          734,  736.
         455    no_pri_audit             fim:          472,  474.
         323    no_sig_audit             fim:          367,  369.
        1152    no_v_time_meter          fim:         1020, 1023.
        1432    null                     fim:          580, 1282.
         242    nxt_lvl                  fim:          310,  320.
         416    onc_par_join             fim:          144,  241,  248,  339,  437.
          14    onc_start_shut_entry     fim:          128,  131.
        1474    oob                      fim:          572, 1299.
      777400    op_code_mask             fim:           85,  918,  949.
       10000    ouhra.an                 history_regs_l68:   149.
           1    ouhra.an_word            history_regs_l68:   148.
          20    ouhra.cmod               history_regs_l68:   110.
           0    ouhra.cmod_word          history_regs_l68:   109.
          10    ouhra.dir                history_regs_l68:   112.
           0    ouhra.dir_word           history_regs_l68:   111.
       20000    ouhra.dn                 history_regs_l68:   147.
           1    ouhra.dn_word            history_regs_l68:   146.
           3    ouhra.efad_mask          history_regs_l68:   115.
          23    ouhra.efad_shift         history_regs_l68:   114.
           0    ouhra.efad_word          history_regs_l68:   113.
         200    ouhra.frpf               history_regs_l68:   122.
           0    ouhra.frpf_word          history_regs_l68:   121.
       40000    ouhra.fstr               history_regs_l68:   145.
           1    ouhra.fstr_word          history_regs_l68:   144.
          10    ouhra.gd1                history_regs_l68:   130.
           0    ouhra.gd1_word           history_regs_l68:   129.
           4    ouhra.gd2                history_regs_l68:   132.
           0    ouhra.gd2_word           history_regs_l68:   131.
          40    ouhra.gin                history_regs_l68:   126.
           0    ouhra.gin_word           history_regs_l68:   125.
           1    ouhra.goa                history_regs_l68:   136.
           0    ouhra.goa_word           history_regs_l68:   135.
           2    ouhra.goe                history_regs_l68:   134.
           0    ouhra.goe_word           history_regs_l68:   133.
      100000    ouhra.gof                history_regs_l68:   143.
           1    ouhra.gof_word           history_regs_l68:   142.
      400000    ouhra.gom                history_regs_l68:   139.
           1    ouhra.gom_word           history_regs_l68:   138.
      200000    ouhra.gon                history_regs_l68:   141.
           1    ouhra.gon_word           history_regs_l68:   140.
          20    ouhra.gos                history_regs_l68:   128.
           0    ouhra.gos_word           history_regs_l68:   127.
           1    ouhra.ict                history_regs_l68:   168.
         400    ouhra.itw                history_regs_l68:   105.
           0    ouhra.itw_word           history_regs_l68:   104.
         777    ouhra.nopc_mask          history_regs_l68:   103.
          33    ouhra.nopc_shift         history_regs_l68:   102.
           0    ouhra.nopc_word          history_regs_l68:   101.
           7    ouhra.ntg_mask           history_regs_l68:   108.
          27    ouhra.ntg_shift          history_regs_l68:   107.
           0    ouhra.ntg_word           history_regs_l68:   106.
         400    ouhra.opbf               history_regs_l68:   120.
           0    ouhra.opbf_word          history_regs_l68:   119.
        4000    ouhra.qn                 history_regs_l68:   151.
           1    ouhra.qn_word            history_regs_l68:   150.
         777    ouhra.rp_mask            history_regs_l68:   118.
          11    ouhra.rp_shift           history_regs_l68:   117.
           0    ouhra.rp_word            history_regs_l68:   116.
         100    ouhra.srf                history_regs_l68:   124.
           0    ouhra.srf_word           history_regs_l68:   123.
        2000    ouhra.x0n                history_regs_l68:   153.
           1    ouhra.x0n_word           history_regs_l68:   152.
        1000    ouhra.x1n                history_regs_l68:   155.
           1    ouhra.x1n_word           history_regs_l68:   154.
         400    ouhra.x2n                history_regs_l68:   157.
           1    ouhra.x2n_word           history_regs_l68:   156.
         200    ouhra.x3n                history_regs_l68:   159.
           1    ouhra.x3n_word           history_regs_l68:   158.
         100    ouhra.x4n                history_regs_l68:   161.
           1    ouhra.x4n_word           history_regs_l68:   160.
          40    ouhra.x5n                history_regs_l68:   163.
           1    ouhra.x5n_word           history_regs_l68:   162.
          20    ouhra.x6n                history_regs_l68:   165.
           1    ouhra.x6n_word           history_regs_l68:   164.
          10    ouhra.x7n                history_regs_l68:   167.
           1    ouhra.x7n_word           history_regs_l68:   166.
          40    ouhra_size               history_regs_l68:    99.
                outward_call_handler     fim:         1232.
           0    ou_offset                history_regs_l68:    13.
        1476    ovfl                     fim:          758, 1300.
          32    owc_link                 fim:         1232, 1293.
          54    pad                      fim:           94.
         124    parity_entry             fim:          224,  226.
                pds                      fim:          141,  198,  234,  243,  285,  296,  304,  305,  316,  318,  319,  325,
                                                       331,  373,  384,  391,  396,  399,  412,  434,  439,  445,  447,  449,
                                                       490,  664,  683,  697,  717,  727,  731,  748,  753,  782,  868, 1003,
                                                      1005, 1012, 1045, 1053, 1055, 1056, 1069.
        1372    pf_loc                   fim:         1261.
                pl1_machine              fim:          782.
                pmut                     fim:          202.
        1512    ppf                      fim:          623, 1306.
                prds                     fim:           77,  361,  465,  686,  699,  720,  865,  870, 1014.
          10    prds_link                fim:           77.
         404    primary_fault_entry      fim:          422,  425.
                processor_data           fim:          253.
                processor_tag            fim:          361,  465,  686,  699,  720, 1014.
        1242    prs                      fim:          111,  112,  132,  133,  209,  228,  229,  426,  427,  997, 1116, 1120.
        1252    push                     fim:          199,  400,  440, 1082, 1125.
        1171    push_offset              stack_header:        81.
                push_stack               fim:          200,  401,  441, 1083.
        1522    quit_loc                 fim:         1310.
                reset_mode_reg           fim:          190,  376,  438,  696.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
                ring_alarm               fim:         1227.
          20    ring_alarm_fault_link    fim:         1227, 1297.
        1530    rqo_loc                  fim:         1313.
        1034    save_cache               fim:          247,  337,  864.
                scs                      fim:          161,  174,  253,  700, 1015.
        1244    scu                      fim:          220, 1028, 1116, 1121.
        2000    scu.apu.dsptw            mc:            57.
          10    scu.apu.fabs             mc:            64.
          20    scu.apu.fanp             mc:            63.
          40    scu.apu.fap              mc:            62.
        4000    scu.apu.pi_ap            mc:            56.
         200    scu.apu.ptw              mc:            60.
         100    scu.apu.ptw2             mc:            61.
       20000    scu.apu.ptwm             mc:            54.
       10000    scu.apu.pt_on            mc:            55.
      100000    scu.apu.sdwm             mc:            52.
        1000    scu.apu.sdwnp            mc:            58.
         400    scu.apu.sdwp             mc:            59.
       40000    scu.apu.sd_on            mc:            53.
      200000    scu.apu.xsf              mc:            51.
           0    scu.apu_stat_word        mc:            49.
          22    scu.ca_shift             mc:           209.
           5    scu.ca_word              mc:           208.
         700    scu.con_chan_mask        mc:           117.
           6    scu.con_chan_shift       mc:           118.
         700    scu.cpu_no_mask          fim:          251,
                                         mc:           141.
           2    scu.cpu_no_word          mc:           139.
           6    scu.cpu_shift            fim:          252,
                                         mc:           142.
           7    scu.cpu_tag_mask         mc:           234.
           5    scu.cpu_tag_word         mc:           232.
         100    scu.cu.if                fim:          658,  739,  789,
                                         mc:           229.
        1000    scu.cu.poa               mc:           226.
       10000    scu.cu.pon               mc:           221.
       20000    scu.cu.pot               mc:           220.
      100000    scu.cu.rd                mc:           217.
      400000    scu.cu.rf                mc:           214.
         400    scu.cu.rfi               fim:          195,  658,  739,  789,
                                         mc:           227.
       40000    scu.cu.rl                mc:           218.
      200000    scu.cu.rpt               mc:           216.
        4000    scu.cu.xde               mc:           223.
        2000    scu.cu.xdo               mc:           224.
           5    scu.cu_stat_word         mc:           212.
          77    scu.delta_mask           mc:           147.
           2    scu.delta_word           mc:           145.
          36    scu.even_inst_word       fim:          616,  768,
                                         mc:           239.
           7    scu.fault_cntr_mask      mc:            69.
           0    scu.fault_cntr_word      mc:            67.
           1    scu.fault_data_word      mc:            75.
          10    scu.fd.am_er             mc:            91.
         200    scu.fd.boc               mc:            87.
          40    scu.fd.crt               mc:            89.
      100000    scu.fd.e_off             mc:            79.
      100000    scu.fd.ia_im             fim:          817,
                                         mc:           102.
         100    scu.fd.inret             mc:            88.
      200000    scu.fd.ioc               fim:          813,
                                         mc:           101.
       20000    scu.fd.ipr               mc:           104.
      400000    scu.fd.iro               mc:            77.
      400000    scu.fd.isn               mc:           100.
       40000    scu.fd.isp               mc:           103.
       10000    scu.fd.nea               mc:           105.
        2000    scu.fd.no_ga             mc:            84.
         400    scu.fd.ocall             mc:            86.
        1000    scu.fd.ocb               mc:            85.
      200000    scu.fd.oeb               mc:            78.
      400000    scu.fd.onc_1             mc:            96.
      200000    scu.fd.onc_2             mc:            97.
        4000    scu.fd.oobb              mc:           106.
           4    scu.fd.oosb              mc:            92.
       40000    scu.fd.orb               mc:            80.
       10000    scu.fd.owb               mc:            82.
           1    scu.fd.parl              mc:            94.
           2    scu.fd.paru              mc:            93.
          20    scu.fd.ralr              mc:            90.
       20000    scu.fd.r_off             mc:            81.
        4000    scu.fd.w_off             mc:            83.
           1    scu.fi_flag_mask         mc:           123.
          76    scu.fi_num_mask          fim:          357,  461,
                                         mc:           120.
           1    scu.fi_num_shift         mc:           121.
        7000    scu.iac_mask             mc:           114.
          11    scu.iac_shift            mc:           115.
      170000    scu.ial_mask             fim:          614,
                                         mc:           111.
          14    scu.ial_shift            mc:           112.
          22    scu.ilc_shift            mc:           184.
           4    scu.ilc_word             mc:           183.
           4    scu.indicators_word      mc:           187.
          20    scu.ir.abs               mc:           202.
         200    scu.ir.bm                mc:           199.
      100000    scu.ir.carry             mc:           191.
       20000    scu.ir.eovf              fim:          694,  708,  742,
                                         mc:           193.
       10000    scu.ir.eufl              fim:          670,  690,  694,
                                         mc:           194.
          10    scu.ir.hex               fim:          662,  745,
                                         mc:           203.
          40    scu.ir.mif               fim:          759,  787,
                                         mc:           201.
      200000    scu.ir.neg               fim:          690,
                                         mc:           190.
        4000    scu.ir.oflm              fim:          315,
                                         mc:           195.
       40000    scu.ir.ovfl              fim:          668,
                                         mc:           192.
        1000    scu.ir.par               fim:          308,
                                         mc:           197.
         400    scu.ir.parm              fim:          299,  321,
                                         mc:           198.
        2000    scu.ir.tro               mc:           196.
         100    scu.ir.tru               fim:          775,
                                         mc:           200.
      400000    scu.ir.zero              fim:          691,
                                         mc:           189.
          37    scu.odd_inst_word        mc:           241.
           1    scu.port_stat_word       mc:           109.
      400000    scu.ppr.p                mc:            45.
      700000    scu.ppr.prr_mask         fim:          158,
                                         mc:            35.
          41    scu.ppr.prr_shift        mc:            36.
           0    scu.ppr.prr_word         mc:            34.
       77777    scu.ppr.psr_mask         fim:          121,  165,  809,  914,  945,
                                         mc:            40.
          22    scu.ppr.psr_shift        mc:            41.
           0    scu.ppr.psr_word         mc:            39.
           0    scu.ppr.p_word           mc:            44.
          77    scu.tpr.tbr_mask         mc:           177.
           3    scu.tpr.tbr_word         mc:           175.
      700000    scu.tpr.trr_mask         mc:           130.
          41    scu.tpr.trr_shift        mc:           131.
           2    scu.tpr.trr_word         mc:           129.
       77777    scu.tpr.tsr_mask         fim:          579,  626,
                                         mc:           135.
          22    scu.tpr.tsr_shift        mc:           136.
           2    scu.tpr.tsr_word         mc:           134.
      700000    scu.tsna.prn_mask        mc:           159.
          17    scu.tsna.prn_shift       mc:           160.
       40000    scu.tsna.prv             mc:           161.
      740000    scu.tsna_mask            mc:           158.
       34000    scu.tsnb.prn_mask        mc:           164.
          13    scu.tsnb.prn_shift       mc:           165.
        2000    scu.tsnb.prv             mc:           166.
       36000    scu.tsnb_mask            mc:           163.
        1600    scu.tsnc.prn_mask        mc:           169.
           7    scu.tsnc.prn_shift       mc:           170.
         100    scu.tsnc.prv             mc:           171.
          13    scu.tsnc_mask            mc:           168.
      777700    scu.tsr_stat_mask        mc:           155.
           6    scu.tsr_stat_shift       mc:           156.
           3    scu.tsr_stat_word        mc:           153.
          17    sdw.access_mask          sdw.l68:       42.
          21    sdw.access_shift         sdw.l68:       41.
           1    sdw.access_word          sdw.l68:       40.
          14    sdw.add_shift            sdw.l68:       18.
           0    sdw.add_word             sdw.l68:       17.
       37777    sdw.bound_mask           sdw.l68:       39.
          25    sdw.bound_shift          sdw.l68:       38.
           1    sdw.bound_word           sdw.l68:       37.
       40000    sdw.cache                sdw.l68:       56.
           1    sdw.cache_word           sdw.l68:       55.
           3    sdw.df_no_mask           sdw.l68:       35.
           0    sdw.df_no_shift          sdw.l68:       34.
           0    sdw.df_no_word           sdw.l68:       33.
       37777    sdw.entry_bound_mask     sdw.l68:       59.
           0    sdw.entry_bound_shift    sdw.l68:       58.
           1    sdw.entry_bound_word     sdw.l68:       57.
           2    sdw.execute              sdw.l68:       46.
           1    sdw.execute_word         sdw.l68:       45.
      100000    sdw.not_a_gate           sdw.l68:       54.
           1    sdw.not_a_gate_word      sdw.l68:       53.
      400000    sdw.privileged           sdw.l68:       50.
           1    sdw.privileged_word      sdw.l68:       49.
           7    sdw.r1_mask              sdw.l68:       24.
          11    sdw.r1_shift             sdw.l68:       23.
           0    sdw.r1_word              sdw.l68:       22.
           7    sdw.r2_mask              sdw.l68:       27.
           6    sdw.r2_shift             sdw.l68:       26.
           0    sdw.r2_word              sdw.l68:       25.
           7    sdw.r3_mask              sdw.l68:       30.
           3    sdw.r3_shift             sdw.l68:       29.
           0    sdw.r3_word              sdw.l68:       28.
           4    sdw.read                 fim:         1134, 1135, 1136, 1137, 1138,
                                         sdw.l68:       44.
           1    sdw.read_word            sdw.l68:       43.
         777    sdw.rings_mask           sdw.l68:       21.
           3    sdw.rings_shift          sdw.l68:       20.
           0    sdw.rings_word           sdw.l68:       19.
      200000    sdw.unpaged              fim:         1134, 1135, 1136, 1137, 1138,
                                         sdw.l68:       52.
           1    sdw.unpaged_word         sdw.l68:       51.
           4    sdw.valid                fim:          290,
                                         sdw.l68:       32.
           0    sdw.valid_word           sdw.l68:       31.
           1    sdw.write                sdw.l68:       48.
           1    sdw.write_word           sdw.l68:       47.
           2    sdw_size                 sdw.l68:       15.
                seg_fault                fim:         1228.
          22    seg_fault_link           fim:         1228, 1260.
         442    set_fault                fim:          462,  600.
         641    set_und_rfi              fim:          675,  678.
                signaller                fim:          392, 1057, 1062.
                signal_data              fim:          412, 1053.
         300    signal_entry             fim:          344,  347.
         311    signal_it                fim:          358,  765.
         745    sig_index                fim:          674,  685,  712,  719,  761,  770,  772,  783,  791,  814,  818,  821.
        1246    sig_prs                  fim:          152,  153,  348,  349, 1116, 1122.
        1250    sig_scu                  fim:          705, 1116, 1123.
        1532    size_loc                 fim:          771, 1314.
         627    sov_binary               fim:          663,  665,  667.
         616    split_overflow           fim:          657, 1257.
        1514    sppf                     fim:          636, 1307.
          73    stach_header.trace_top_ptr     stack_header:        62.
                stack_0_ptr              fim:          198,  391,  399,  439, 1055, 1069.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   fim:         1078,
                                               stack_header:        37.
          24    stack_header.stack_end_ptr     fim:          214,  415, 1010, 1073, 1079,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          34    stack_oob_handler        fim:         1233, 1305.
         520    standard                 fim:          535, 1244, 1253, 1255, 1256, 1298, 1316.
         515    standard.check_common    fim:          526,  530.
         514    standard.signaller_check_coll  fim:          528, 1260, 1268.
         512    standard.signal_check_coll     fim:          524, 1293, 1297, 1299, 1305.
        1510    stk_oob                  fim:          588, 1305.
         717    str_rest_vlu             fim:          728,  732,  750,  755.
                sys_info                 fim:          531.
                tc_data                  fim:         1093.
         355    temp                     fim:          101, 1092, 1097.
                terminate_proc           fim:         1095.
        1221    term_it                  fim:          584, 1088.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
        1504    trun                     fim:          777, 1303.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
        1546    undefp                   fim:          585, 1320.
         656    und_ovr_rest             fim:          692,  743.
                unexp_fault              fim:         1094.
          52    v_delta                  fim:           93,  448, 1004.
          50    v_temp                   fim:           92,  446, 1002.
                wait_enable              fim:         1093.
                wired_fim                fim:         1094.
                wired_hardcore_data      fim:          478,  479,  480,  481,  482,  483,  484,  485.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
