	COMPILATION LISTING OF SEGMENT segno_usage
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1008.1 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 /* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */
       13 
       14 segno_usage: proc;
       15 
       16 /*
       17*
       18*   Designed and written by R. Bratt, May 31, 1976
       19*
       20*   Last modified:
       21*   Added increment_other_ring, Keith Loepere, January 22, 1985.
       22*
       23*   This module provides an external interface for incrementing and decrementing
       24*   segment number usage counts.  This facility allows the creation and resurection
       25*   of "truely worthless objects" (segment numbers).
       26*
       27*   Note: once a usage count exceeds the declared precision it is never altered.
       28*   Also, a usage count of zero is never decremented. The appropriate usage count
       29*   is determined by the process' validation level.
       30*
       31**/
       32 
       33 /* Parameters */
       34 
       35 dcl  a_code			fixed bin (35) parameter;
       36 dcl  a_ring			fixed bin (3) parameter;
       37 dcl  a_segno			fixed bin (17) parameter;
       38 
       39 /* Variables */
       40 
       41 dcl  code				fixed bin (35);
       42 dcl  ring				fixed bin (3);
       43 
       44 /* Entries */
       45 
       46 dcl  level$get			returns (fixed bin (3));
       47 dcl  get_kstep			entry (fixed bin (17), ptr, fixed bin (35));
       48 
       49 increment: entry (a_segno, a_code);
       50 
       51 	ring = level$get ();
       52 incr:	call setup;
       53 	if kste.usage_count (ring) >= 0 then
       54 	     kste.usage_count (ring) = kste.usage_count (ring) + 1;
       55 	return;
       56 
       57 increment_other_ring: entry (a_segno, a_ring, a_code);
       58 
       59 	ring = a_ring;
       60 	go to incr;
       61 
       62 decrement: entry (a_segno, a_code);
       63 
       64 	ring = level$get ();
       65 	call setup;
       66 	if kste.usage_count (ring) > 0 then
       67 	     kste.usage_count (ring) = kste.usage_count (ring) - 1;
       68 	return;
       69 
       70 setup: proc;
       71 
       72 	call get_kstep ((a_segno), kstep, code);
       73 	if code ^= 0 then do;
       74 	     a_code = code;
       75 	     go to return_to_caller;
       76 	end;
       77 	return;
       78      end setup;
       79 
       80 return_to_caller:
       81 	return;
       82 
       83  /*  START OF:	kst.incl.pl1			  *  *  *  *  *  */
  1     2 
  1     3 /*
  1     4*Modified March 1976 by R. Bratt 
  1     5*Modified November 1984 to remove hdr, Keith Loepere. */
  1     6 
  1     7 
  1     8 /****^  HISTORY COMMENTS:
  1     9*  1) change(86-08-08,GDixon), approve(86-08-08,MCR7388),
  1    10*     audit(86-09-02,Farley), install(86-09-08,MR12.0-1150):
  1    11*     Add warning on use of kste.entryp.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 
  1    15 dcl  pds$kstp ext ptr,
  1    16     (kstp, kstep) ptr;
  1    17 
  1    18 dcl 1 kst aligned based (kstp),			/* KST header declaration */
  1    19     2 lowseg fixed bin (17),				/* lowest segment number described by kst */
  1    20     2 highseg fixed bin (17),				/* highest segment number described by kst */
  1    21     2 highest_used_segno fixed bin (17),		/* highest segment number yet used  */
  1    22     2 lvs fixed bin (8),				/* number of private LVs this process is connected to */
  1    23     2 time_of_bootload fixed bin (71),			/* bootload time during prelinking */
  1    24     2 garbage_collections fixed bin (17) unaligned,	/* KST garbage collections */
  1    25     2 entries_collected fixed bin (17) unaligned,		/* KST entries recovered by garbage collection */
  1    26     2 free_list bit (18) unaligned,			/* relative pointer to first free kste */
  1    27     2 prelinked_ring (7) bit (1) unaligned,		/* rings prelinked in process */
  1    28     2 template bit (1) unaligned,			/* this is a template kst if set */
  1    29     2 allow_256K_connect bit (1) unaligned,		/* can use 256K segments */
  1    30     2 unused_2 bit (9) unaligned,
  1    31     2 uid_hash_bucket (0 : 127) bit (18) unaligned,	/* hash buckets */
  1    32     2 kst_entry (0 refer (kst.lowseg):0 refer (kst.highseg)) aligned like kste, /* kst entries */
  1    33     2 lv (1:256) bit (36),				/* private logical volume connection list */
  1    34     2 end_of_kst bit (36);
  1    35 
  1    36 dcl 1 kste based (kstep) aligned,			/* KST entry declaration */
  1    37     2 fp bit (18) unaligned,				/* forward rel pointer */
  1    38     2 segno fixed bin (17) unaligned,			/* segment number of this kste */
  1    39     2 usage_count (0:7) fixed bin (8) unaligned,		/* outstanding initiates/ring */
  1    40     2 entryp ptr unaligned,				/* branch pointer */
  1    41 						/* See WARNING below for requirements to use entryp. */
  1    42     2 uid bit (36) aligned,				/* unique identifier */
  1    43     2 access_information unaligned,
  1    44       3 dtbm bit (36),				/* date time branch modified */
  1    45       3 extended_access bit (33),			/* extended access from the branch */
  1    46       3 access bit (3),				/* rew */
  1    47       3 ex_rb (3) bit (3),				/* ring brackets from branch */
  1    48     2 pad1 bit (3) unaligned,
  1    49     2 flags unaligned,
  1    50       3 dirsw bit (1),				/* directory switch */
  1    51       3 allow_write bit (1),				/* set if initiated with write permission */
  1    52       3 priv_init bit (1),				/* privileged initiation */
  1    53       3 tms bit (1),				/* transparent modification switch */
  1    54       3 tus bit (1),				/* transparent usage switch */
  1    55       3 tpd bit (1),				/* transparent paging device switch */
  1    56       3 audit bit (1),				/* audit switch */
  1    57       3 explicit_deact_ok bit (1),			/* set if I am willing to have a user force deactivate */
  1    58       3 pad bit (3),
  1    59     2 infcount fixed bin (12) unaligned;		/* _i_f dirsw _t_h_e_n inferior count _e_l_s_e lv index */
  1    60 
  1    61 
  1    62 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    63 /*							       */
  1    64 /* WARNING: Before using kste.entryp to get a pointer to the directory       */
  1    65 /* entry associated with the kst entry, you must first validate its value    */
  1    66 /* by calling sum$getbranch or sum$getbranch_root_my.  This call also locks  */
  1    67 /* the containing directory.  The containing directory must remain locked    */
  1    68 /* during the entire period when kste.entryp and the directory entry are     */
  1    69 /* being referenced.  Once the directory is unlocked, kste.entryp can no     */
  1    70 /* longer be used to get a pointer to the entry within the unlocked	       */
  1    71 /* directory since the dir entry could have been moved within the directory  */
  1    72 /* by another processor.					       */
  1    73 /*							       */
  1    74 /* If you only need a pointer to the directory containing the associated     */
  1    75 /* dir entry (but not to the dir entry itself), you can use:	       */
  1    76 /*    pointer (kste.entryp, 0)				       */
  1    77 /* without calling sum to lock the directory and validate entryp.  GDixon    */
  1    78 /*							       */
  1    79 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    80 
  1    81 /*  END OF:	kst.incl.pl1			  *  *  *  *  *  */
       83 
       84      end segno_usage;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0839.4  segno_usage.pl1                   >special_ldd>install>MR12.3-1114>segno_usage.pl1
83           1    09/18/86  1308.1  kst.incl.pl1                      >ldd>include>kst.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_code                                 parameter       fixed bin(35,0)          dcl 35 set ref 49 57 62 74*
a_ring                                 parameter       fixed bin(3,0)           dcl 36 ref 57 59
a_segno                                parameter       fixed bin(17,0)          dcl 37 ref 49 57 62 72
code                            000100 automatic       fixed bin(35,0)          dcl 41 set ref 72* 73 74
get_kstep                       000012 constant        entry                    external dcl 47 ref 72
kste                                   based           structure                level 1 dcl 1-36
kstep                           000102 automatic       pointer                  dcl 1-15 set ref 53 53 53 66 66 66 72*
level$get                       000010 constant        entry                    external dcl 46 ref 51 64
ring                            000101 automatic       fixed bin(3,0)           dcl 42 set ref 51* 53 53 53 59* 64* 66 66 66
usage_count               1            based           fixed bin(8,0)           array level 2 packed packed unaligned dcl 1-36 set
                                                                                  ref 53 53* 53 66 66* 66

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
kst                                    based           structure                level 1 dcl 1-18
kstp                                   automatic       pointer                  dcl 1-15
pds$kstp                               external static pointer                  dcl 1-15

NAMES DECLARED BY EXPLICIT CONTEXT.
decrement                       000101 constant        entry                    external dcl 62
incr                            000034 constant        label                    dcl 52 set ref 60
increment                       000016 constant        entry                    external dcl 49
increment_other_ring            000063 constant        entry                    external dcl 57
return_to_caller                000143 constant        label                    dcl 80 set ref 75
segno_usage                     000004 constant        entry                    external dcl 14
setup                           000144 constant        entry                    internal dcl 70 ref 52 65

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       256         272     170         266
Length       462     170        14         153      65           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
segno_usage                          90 external procedure  is an external procedure.  
setup                                   internal procedure  shares stack frame of external procedure segno_usage.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
segno_usage              000100 code                        segno_usage
                         000101 ring                        segno_usage
                         000102 kstep                       segno_usage

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_kstep                     level$get

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000003        49 000011        51 000026        52 000034        53 000035        55 000056        57 000057
     59 000073        60 000076        62 000077        64 000111        65 000120        66 000121        68 000142
     80 000143        70 000144        72 000145        73 000163        74 000165        75 000166        77 000167


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
