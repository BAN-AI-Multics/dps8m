	COMPILATION LISTING OF SEGMENT truncate_stacks
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  0938.2 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 /* format: style2 */
       14 
       15 /* Truncate stacks past their end_ptr ; called from fast_hc_ipc */
       16 /* BIM 1/82 */
       17 /* Modified March 1982 by J. Bongiovanni, not to truncate stack_0 */
       18 /* Modified May 1982 by J. Bongiovanni to check stack SDW before touching stack */
       19 /* Modified November 1982 BIM to check the PTW for the stack header as well. */
       20 
       21 truncate_stacks:
       22      procedure;
       23 
       24 
       25 /* ASSUME --- no active stack history inside val level */
       26 
       27 
       28 	declare pds$stacks		 (0:7) pointer ext;
       29 	declare pc$truncate_count	 entry (pointer, fixed bin (18), fixed bin (18));
       30 	declare lock$lock_ast	 entry;
       31 	declare lock$unlock_ast	 entry;
       32 	declare get_ptrs_$given_segno	 entry (fixed bin (18)) returns (pointer);
       33 	declare ptw_util_$get_add_type entry (ptr, bit (4) unaligned);
       34 	declare sdw_util_$dissect	 entry (ptr, ptr);
       35 
       36 	declare pageno		 fixed bin (18);
       37 	declare n_in_core		 fixed bin (18);
       38 	declare stkx		 fixed bin;
       39 
       40 	declare 1 stack_sdw_info	 aligned like sdw_info;
       41 
       42 	declare dseg$		 (0:1023) fixed bin (71) aligned ext;
       43 	declare sst$stk_pages_truncated
       44 				 fixed bin (35) ext;
       45 	declare sst$stk_pages_truncated_in_core
       46 				 fixed bin (35) ext;
       47 
       48 	declare (addr, baseno, bin, divide, null, rel, size)
       49 				 builtin;
       50 
       51 
       52 	call lock$lock_ast;
       53 
       54 	do stkx = 1 to 7;
       55 	     if pds$stacks (stkx) ^= null
       56 	     then call DO (pds$stacks (stkx), "0"b);
       57 	end;
       58 
       59 	call lock$unlock_ast;
       60 	return;
       61 
       62 DO:
       63      procedure (segp, stack_0);
       64 
       65 	declare segp		 pointer;
       66 	declare stack_0		 bit (1) aligned;
       67 	declare at		 bit (4);
       68 	declare ptp		 pointer;
       69 
       70 	call sdw_util_$dissect (addr (dseg$ (bin (baseno (segp)))), addr (stack_sdw_info));
       71 	if stack_sdw_info.flags.faulted | ^stack_sdw_info.access.read
       72 	then goto RETURN;
       73 	astep = get_ptrs_$given_segno (bin (baseno (segp), 18));
       74 
       75 	if astep = null
       76 	then go to RETURN;
       77 
       78 	ptp = addrel (astep, size (aste));
       79 	call ptw_util_$get_add_type (ptp, at);
       80 	if at ^= add_type.core
       81 	then go to RETURN;
       82 
       83 	if stack_sdw_info.size <= bin (rel (addr (segp -> stack_header.stack_end_ptr))) + 2
       84 	then goto RETURN;
       85 
       86 	pageno = divide (bin (rel (segp -> stack_header.stack_end_ptr)) + 1023, 1024, 19, 0);
       87 	if stack_0
       88 	then pageno = pageno + 1;
       89 
       90 	sst$stk_pages_truncated = sst$stk_pages_truncated + bin (aste.csl, 9) - pageno + 1;
       91 						/* pageno is 1-origin */
       92 
       93 	call pc$truncate_count (astep, pageno, n_in_core);
       94 
       95 	sst$stk_pages_truncated_in_core = sst$stk_pages_truncated_in_core + n_in_core;
       96 
       97 RETURN:
       98      end DO;
       99 
  1     1 
  1     2 	/* BEGIN INCLUDE FILE add_type.incl.pl1 */
  1     3 	/* 02/26/75 by Bernard S. Greenberg */
  1     4 
  1     5 	/* This file provides a structure for checking
  1     6*		PTW/CME address type fields in PL/I */
  1     7 
  1     8 dcl 1 add_type unaligned static internal,
  1     9 	2 core bit (4) init ("1000"b),		/* in core- S/B only in PTW */
  1    10 	2 disk bit (4) init ("0100"b),		/* Disk address */
  1    11 	2 pd   bit (4) init ("0010"b),		/* Paging Device */
  1    12 	2 reserved bit (4) init ("0001"b),		/* Reserved */
  1    13 	2 non_null bit (4) init ("1111"b);		/* Not null address */
  1    14 
  1    15 dcl 1 badd_type unaligned based,
  1    16     2 (core, disk, pd, reserved) bit (1) unaligned;
  1    17 
  1    18 	/* END INCLUDE FILE add_type.incl.pl1 */
      100 
  2     1 /*	BEGIN INCLUDE FILE ...aste.incl.pl1 ... */
  2     2 
  2     3 /* Template for an AST entry. Length = 12 words. */
  2     4 
  2     5 /* Words 0 to 7, and 11 are read by PC; they are read and modified by SC.
  2     6*   Words 8, 9 and 10 are modified by PC; they should never be modified without locking the PC lock */
  2     7 /* Modified January 1985 by Keith Loepere for multi_class. */
  2     8 
  2     9 dcl  astep ptr;
  2    10 
  2    11 dcl 1 aste based (astep) aligned,
  2    12 
  2    13     (2 fp bit (18),					/* forward  used list rel pointer */
  2    14     2 bp bit (18),					/* backward used list rel pointer */
  2    15 
  2    16     2 infl bit (18),				/* ptr to NEXT  in list of ASTE's of my brothers */
  2    17     2 infp bit (18),				/* ptr to FIRST in list of ASTE's of my children */
  2    18 
  2    19     2 strp bit (18),				/* rel pointer to process trailer */
  2    20     2 par_astep bit (18),				/* rel pointer to parent aste */
  2    21 
  2    22     2 uid bit (36),					/* segment unique id */
  2    23 
  2    24     2 msl bit (9),					/* maximum segment length in 1024 word units */
  2    25     2 pvtx fixed bin (8),				/* physical volume table index */
  2    26     2 vtocx fixed bin (17),				/* vtoc entry index */
  2    27 
  2    28     2 usedf bit (1),				/* ast entry is being used if non-zero */
  2    29     2 init bit (1),					/* used bit - insure 1 lap */
  2    30     2 gtus bit (1),					/* global transparent usage switch */
  2    31     2 gtms bit (1),					/* global transparent modified switch */
  2    32     2 hc bit (1),					/* hard core segment */
  2    33     2 hc_sdw bit (1),				/* aste with sdw for hardcore seg if non-zero */
  2    34     2 any_access_on bit (1),				/* any sdw allows access, unless write_access_on */
  2    35     2 write_access_on bit (1),			/* any sdw allows write access */
  2    36     2 inhibit_cache bit (1),				/* flag not to reset above bits */
  2    37     2 explicit_deact_ok bit (1),			/* set if user can deactivate seg */
  2    38     2 deact_error bit (1),				/* set if error occurred while deactivating */
  2    39     2 hc_part bit (1),				/* set if pages are in a hardcore partition */
  2    40     2 fm_damaged bit (1),				/* set if filemap checksum was ever bad */
  2    41     2 multi_class bit (1),				/* set if page_control should watch state changes to this segment */
  2    42     2 pad1 bit (2),					/* OO */
  2    43     2 dius bit (1),					/* dumper in use switch */
  2    44     2 nid bit (1),					/* if on prevents addtion to incremental dump map */
  2    45     2 dmpr_pad bit (1),
  2    46     2 ehs bit (1),					/* entry hold switch */
  2    47     2 nqsw bit (1),					/* no quota switch - no checking for pages of this seg */
  2    48     2 dirsw bit (1),				/* directory switch */
  2    49     2 master_dir bit (1),				/* master dir - a root for the log volume */
  2    50     2 volmap_seg bit (1),				/* volmap_seg for some volume */
  2    51     2 tqsw (0:1) bit (1),				/* terminal quota switch - (0) for non dir pages */
  2    52     2 pad_ic bit (10),				/* Used to be aste.ic */
  2    53 
  2    54     2 dtu bit (36),					/* date and time segment last used */
  2    55 
  2    56     2 dtm bit (36),					/* date and time segment last modified */
  2    57 
  2    58 
  2    59     2 quota (0:1) fixed bin (18) unsigned,		/* sec storage quota - (0) for non dir pages */
  2    60 
  2    61     2 used (0:1) fixed bin (18) unsigned,		/* sec storage used  - (0) for non dir pages */
  2    62 
  2    63     2 csl bit (9),					/* current segment length in 1024 words units */
  2    64     2 fmchanged bit (1),				/* turned on by page if file map changed */
  2    65     2 fms bit (1),					/* file modified switch */
  2    66     2 npfs bit (1),					/* no page fault switch */
  2    67     2 gtpd bit (1),					/* global transparent paging device switch */
  2    68     2 dnzp bit (1),					/* don't null out if zero page switch */
  2    69     2 per_process bit (1),				/* use master quota for this entry */
  2    70     2 ddnp bit (1),					/* don't deposit nulled pages */
  2    71     2 pad2 bit (2),
  2    72     2 records bit (9),				/* number of records used by the seg in sec storage */
  2    73     2 np bit (9),					/* number of pages in core */
  2    74 
  2    75 
  2    76     2 ht_fp bit (18),				/* hash table forward rel pointer */
  2    77     2 fmchanged1 bit (1),				/* value of "fmchanged" saved by pc$get_file_map */
  2    78     2 damaged bit (1),				/* PC declared segment unusable */
  2    79     2 pack_ovfl bit (1),				/* page fault on seg would cause pack overflow */
  2    80     2 synchronized bit (1),				/* Data Management synchronized segment */
  2    81     2 pad3 bit (6),					/* OOOOOOOOO */
  2    82     2 ptsi bit (2),					/* page table size index */
  2    83     2 marker bit (6)) unaligned;			/* marker to indicate last word of ASTE */
  2    84 
  2    85 
  2    86 dcl  asta (0 : 8000) bit (36*12 /* sst-> sst.astsize */) based aligned;
  2    87 
  2    88 
  2    89 dcl 1 aste_part aligned based (astep),
  2    90 
  2    91     2 one bit (36) unaligned,				/* fp and bp */
  2    92     2 two bit (36*11 - 8) unaligned,			/* part that has to be zeroed when ASTE is freed */
  2    93     2 three bit (8) unaligned;			/* ptsi and marker */
  2    94 
  2    95 
  2    96 dcl 1 seg_aste based (astep) aligned,			/* Overlay because quota is only for dirs */
  2    97     2 pad1 bit (8*36),
  2    98     2 usage fixed bin (35),				/* page fault count: overlays quota */
  2    99     2 pad2 bit (3*36);
  2   100 
  2   101 /*	END INCLUDE FILE ... aste.incl.pl1 */
      101 
  3     1 /*	BEGIN INCLUDE FILE ... dir_entry.incl.pl1 ...last modified August 1974 for nss */
  3     2 
  3     3 
  3     4 /* Template for an entry. Length = 38 words */
  3     5 
  3     6 dcl  ep ptr;
  3     7 
  3     8 dcl 1 entry based (ep) aligned,
  3     9 
  3    10     (2 efrp bit (18),				/* forward rel ptr to next entry */
  3    11     2 ebrp bit (18)) unaligned,			/* backward rel ptr to previous entry */
  3    12 
  3    13     2 type bit (18) unaligned,			/* type of object = dir entry  */
  3    14     2 size fixed bin (17) unaligned,			/* size of dir entry */
  3    15 
  3    16     2 uid bit (36),					/* unique id of entry */
  3    17 
  3    18     2 dtem bit (36),				/* date-time entry modified */
  3    19 
  3    20     (2 bs bit (1),					/* branch switch = 1 if branch */
  3    21     2 pad0 bit (17),
  3    22     2 nnames fixed bin (17),				/* number of names for this entry */
  3    23 
  3    24     2 name_frp bit (18),				/* rel pointer to start of name list */
  3    25     2 name_brp bit (18),				/* rel pointer to end of name list */
  3    26 
  3    27     2 author,					/* user who created branch */
  3    28       3 pers_rp bit (18),				/* name of user who created branch */
  3    29       3 proj_rp bit (18),				/* project of user who created branch */
  3    30 
  3    31       3 tag char (1),				/* tag of user who created branch */
  3    32       3 pad1 char (3),
  3    33 
  3    34     2 primary_name bit (504),				/* first name on name list */
  3    35 
  3    36     2 dtd bit (36),					/* date time dumped */
  3    37 
  3    38     2 pad2 bit (36),
  3    39 
  3    40 
  3    41 /* the declarations below are for branch only */
  3    42 
  3    43 
  3    44     2 pvid bit (36),				/* physical volume id */
  3    45 
  3    46     2 vtocx fixed bin (17),				/* vtoc entry index */
  3    47     2 pad3 bit (18),
  3    48 
  3    49     2 dirsw bit (1),				/* = 1 if this is a directory branch */
  3    50     2 oosw bit (1),					/* out of service switch  on = 1 */
  3    51     2 per_process_sw bit (1),				/* indicates segment is per process */
  3    52     2 copysw bit (1),				/* = 1 make copy of segment whenever initiated */
  3    53     2 safety_sw bit (1),				/* if 1 then entry cannot be deleted */
  3    54     2 multiple_class bit (1),				/* segment has multiple security classes */
  3    55     2 audit_flag bit (1),				/* segment must be audited for security */
  3    56     2 security_oosw bit (1),				/* security out of service switch */
  3    57     2 entrypt_sw bit (1),				/* 1 if call limiter is to be enabled */
  3    58     2 master_dir bit (1),				/* TRUE for master directory */
  3    59     2 tpd bit (1),					/* TRUE if this segment is never to go on the PD */
  3    60     2 pad4 bit (11),
  3    61     2 entrypt_bound bit (14)) unaligned,		/* call limiter */
  3    62 
  3    63     2 access_class bit (72) aligned,			/* security attributes : level and category */
  3    64 
  3    65     (2 ring_brackets (3) bit (3),			/* ring brackets on segment */
  3    66     2 ex_ring_brackets (3) bit (3),			/* extended ring brackets */
  3    67     2 acle_count fixed bin (17),			/* number of entries on ACL */
  3    68 
  3    69     2 acl_frp bit (18),				/* rel ptr to start of ACL */
  3    70     2 acl_brp bit (18),				/* rel ptr to end of ACL */
  3    71 
  3    72     2 bc_author,					/* user who last set the bit count */
  3    73       3 pers_rp bit (18),				/* name of user who set the bit count */
  3    74       3 proj_rp bit (18),				/* project of user who set the bit count */
  3    75 
  3    76       3 tag char (1),				/* tag of user who set the bit count */
  3    77       3 pad5 bit (2),
  3    78     2 bc fixed bin (24)) unaligned,			/* bit count for segs, msf indicator for dirs */
  3    79 
  3    80     2 sons_lvid bit (36),				/* logical volume id for immediat inf non dir seg */
  3    81 
  3    82     2 pad6 bit (36),
  3    83 
  3    84     2 checksum bit (36),				/* checksum from dtd */
  3    85 
  3    86     2 owner bit (36);				/* uid of containing directory */
  3    87 
  3    88 /*	END INCLUDE FILE ... dir_entry.incl.pl1 ... */
      102 
  4     1 /* BEGIN INCLUDE FILE ... sdw_info.incl.pl1 ... 12/16/80, for ADP conversion */
  4     2 /* Note: This include file has an ALM counterpart made with cif. Keep it up to date */
  4     3 
  4     4 dcl  sdw_info_ptr pointer;
  4     5 
  4     6 dcl 1 sdw_info aligned based (sdw_info_ptr),		/* Structure describing SDW contents */
  4     7     2 address fixed bin (26), 			/* Address of seg base or of page table */
  4     8     2 size fixed bin (19),				/* Max length of segment (NOT offset of last word) */
  4     9 
  4    10     2 access unaligned,				/* REWP */
  4    11       3 read bit (1) unaligned,
  4    12       3 execute bit (1) unaligned,
  4    13       3 write bit (1) unaligned,
  4    14       3 privileged bit (1) unaligned,
  4    15 
  4    16     2 pad1 bit (32) unaligned,
  4    17 
  4    18     2 rings unaligned,				/* Ring brackets */
  4    19       3 r1 bit (3) unaligned,
  4    20       3 r2 bit (3) unaligned,
  4    21       3 r3 bit (3) unaligned,
  4    22 
  4    23     2 pad2 bit (27) unaligned,
  4    24 
  4    25     2 flags aligned,
  4    26       3 paged bit (1) unaligned,			/* "1"b => Segment is paged */
  4    27       3 faulted bit (1) unaligned,			/* "1"b => SDW has fault set */
  4    28       3 cache bit (1) unaligned,			/* "1"b => Segment is encacheable */
  4    29       3 pad3 bit (33) unaligned,
  4    30 
  4    31     2 gate_entry_bound fixed bin (14);			/* Number of entrypoints in gate, or zero */
  4    32 
  4    33 /* END INCLUDE FILE ... sdw_info.incl.pl1 */
      103 
  5     1 /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  5     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  5     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  5     4 /*	Modified April 1983 by C. Hornig for tasking */
  5     5 
  5     6 /****^  HISTORY COMMENTS:
  5     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  5     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  5     9*     added the heap_header_ptr definition.
  5    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  5    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  5    12*     Modified to support control point management.  These changes were actually
  5    13*     made in February 1985 by G. Palter.
  5    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  5    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  5    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  5    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  5    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  5    19*     (ITS pair).
  5    20*                                                   END HISTORY COMMENTS */
  5    21 
  5    22 /* format: style2 */
  5    23 
  5    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  5    25 
  5    26      dcl	   1 stack_header	      based (sb) aligned,
  5    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  5    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  5    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  5    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  5    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  5    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  5    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  5    34 	     2 pad4	      bit (2) unal,
  5    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  5    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  5    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  5    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  5    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  5    40 	     2 null_ptr	      ptr,		/*  (16)  */
  5    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  5    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  5    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  5    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  5    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  5    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  5    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  5    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  5    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  5    50 	     2 return_no_pop_op_ptr
  5    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  5    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  5    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  5    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  5    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  5    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  5    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  5    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  5    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  5    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  5    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  5    62 	     2 trace,
  5    63 	       3 frames,
  5    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  5    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  5    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  5    67 	     2 pad2	      bit (36),		/*  (61) */
  5    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  5    69 
  5    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  5    71 
  5    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  5    73 						/* (551) octal */
  5    74 
  5    75 
  5    76 /*	The following constants are offsets within this transfer vector table.  */
  5    77 
  5    78      dcl	   (
  5    79 	   call_offset	      fixed bin init (271),
  5    80 	   push_offset	      fixed bin init (272),
  5    81 	   return_offset	      fixed bin init (273),
  5    82 	   return_no_pop_offset   fixed bin init (274),
  5    83 	   entry_offset	      fixed bin init (275)
  5    84 	   )		      internal static;
  5    85 
  5    86 
  5    87 
  5    88 
  5    89 
  5    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  5    91*	move the whole stack header should use this overlay.
  5    92**/
  5    93 
  5    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  5    95 
  5    96 
  5    97 
  5    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
      104 
      105 
      106      end truncate_stacks;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0826.9  truncate_stacks.pl1               >spec>install>1112>truncate_stacks.pl1
100          1    09/29/77  1502.7  add_type.incl.pl1                 >ldd>include>add_type.incl.pl1
101          2    01/30/85  1523.9  aste.incl.pl1                     >ldd>include>aste.incl.pl1
102          3    04/29/76  1100.6  dir_entry.incl.pl1                >ldd>include>dir_entry.incl.pl1
103          4    03/27/82  0430.3  sdw_info.incl.pl1                 >ldd>include>sdw_info.incl.pl1
104          5    11/07/86  1550.3  stack_header.incl.pl1             >ldd>include>stack_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
access                    2     000103 automatic       structure                level 2 packed packed unaligned dcl 40
add_type                        000000 constant        structure                level 1 packed packed unaligned dcl 1-8
addr                                                   builtin function         dcl 48 ref 70 70 70 70 83
aste                                   based           structure                level 1 dcl 2-11 ref 78
astep                           000112 automatic       pointer                  dcl 2-9 set ref 73* 75 78 78 90 93*
at                              000122 automatic       bit(4)                   packed unaligned dcl 67 set ref 79* 80
baseno                                                 builtin function         dcl 48 ref 70 70 73 73
bin                                                    builtin function         dcl 48 ref 70 70 73 73 83 86 90
core                            000000 constant        bit(4)                   initial level 2 packed packed unaligned dcl 1-8 ref
                                                                                  80
csl                      12            based           bit(9)                   level 2 packed packed unaligned dcl 2-11 ref 90
divide                                                 builtin function         dcl 48 ref 86
dseg$                           000026 external static fixed bin(71,0)          array dcl 42 set ref 70 70
faulted                   4(01) 000103 automatic       bit(1)                   level 3 packed packed unaligned dcl 40 set ref 71
flags                     4     000103 automatic       structure                level 2 dcl 40
get_ptrs_$given_segno           000020 constant        entry                    external dcl 32 ref 73
lock$lock_ast                   000014 constant        entry                    external dcl 30 ref 52
lock$unlock_ast                 000016 constant        entry                    external dcl 31 ref 59
n_in_core                       000101 automatic       fixed bin(18,0)          dcl 37 set ref 93* 95
null                                                   builtin function         dcl 48 ref 55 75
pageno                          000100 automatic       fixed bin(18,0)          dcl 36 set ref 86* 87* 87 90 93*
pc$truncate_count               000012 constant        entry                    external dcl 29 ref 93
pds$stacks                      000010 external static pointer                  array dcl 28 set ref 55 55*
ptp                             000124 automatic       pointer                  dcl 68 set ref 78* 79*
ptw_util_$get_add_type          000022 constant        entry                    external dcl 33 ref 79
read                      2     000103 automatic       bit(1)                   level 3 packed packed unaligned dcl 40 set ref 71
rel                                                    builtin function         dcl 48 ref 83 86
sdw_info                               based           structure                level 1 dcl 4-6
sdw_util_$dissect               000024 constant        entry                    external dcl 34 ref 70
segp                                   parameter       pointer                  dcl 65 ref 62 70 70 73 73 83 86
size                                                   builtin function         dcl 48 in procedure "truncate_stacks" ref 78
size                      1     000103 automatic       fixed bin(19,0)          level 2 in structure "stack_sdw_info" dcl 40
                                                                                  in procedure "truncate_stacks" set ref 83
sst$stk_pages_truncated         000030 external static fixed bin(35,0)          dcl 43 set ref 90* 90
sst$stk_pages_truncated_in_core 000032 external static fixed bin(35,0)          dcl 45 set ref 95* 95
stack_0                                parameter       bit(1)                   dcl 66 ref 62 87
stack_end_ptr            24            based           pointer                  level 2 dcl 5-26 set ref 83 86
stack_header                           based           structure                level 1 dcl 5-26
stack_sdw_info                  000103 automatic       structure                level 1 dcl 40 set ref 70 70
stkx                            000102 automatic       fixed bin(17,0)          dcl 38 set ref 54* 55 55*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
asta                                   based           bit(432)                 array dcl 2-86
aste_part                              based           structure                level 1 dcl 2-89
badd_type                              based           structure                level 1 packed packed unaligned dcl 1-15
call_offset                            internal static fixed bin(17,0)          initial dcl 5-78
entry                                  based           structure                level 1 dcl 3-8
entry_offset                           internal static fixed bin(17,0)          initial dcl 5-78
ep                                     automatic       pointer                  dcl 3-6
push_offset                            internal static fixed bin(17,0)          initial dcl 5-78
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 5-78
return_offset                          internal static fixed bin(17,0)          initial dcl 5-78
sb                                     automatic       pointer                  dcl 5-24
sdw_info_ptr                           automatic       pointer                  dcl 4-4
seg_aste                               based           structure                level 1 dcl 2-96
stack_header_overlay                   based           fixed bin(17,0)          array dcl 5-94
tv_offset                              internal static fixed bin(17,0)          initial dcl 5-72

NAMES DECLARED BY EXPLICIT CONTEXT.
DO                              000057 constant        entry                    internal dcl 62 ref 55
RETURN                          000247 constant        label                    dcl 97 ref 71 75 80 83
truncate_stacks                 000007 constant        entry                    external dcl 21

NAME DECLARED BY CONTEXT OR IMPLICATION.
addrel                                                 builtin function         ref 78

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       416         452     251         426
Length       730     251        34         242     144           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
truncate_stacks                     116 external procedure  is an external procedure.  
DO                                      internal procedure  shares stack frame of external procedure truncate_stacks.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
truncate_stacks          000100 pageno                      truncate_stacks
                         000101 n_in_core                   truncate_stacks
                         000102 stkx                        truncate_stacks
                         000103 stack_sdw_info              truncate_stacks
                         000112 astep                       truncate_stacks
                         000122 at                          DO
                         000124 ptp                         DO

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          mpfx2               ext_entry           divide_fx3

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_ptrs_$given_segno         lock$lock_ast                 lock$unlock_ast               pc$truncate_count
ptw_util_$get_add_type        sdw_util_$dissect

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dseg$                         pds$stacks                    sst$stk_pages_truncated
sst$stk_pages_truncated_in_core




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     21 000006        52 000014        54 000020        55 000025        57 000047        59 000051        60 000056
     62 000057        70 000061        71 000107        73 000115        75 000135        78 000141        79 000144
     80 000155        83 000164        86 000200        87 000207        90 000214        93 000230        95 000242
     97 000247


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
