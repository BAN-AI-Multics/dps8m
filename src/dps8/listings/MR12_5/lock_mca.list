	COMPILATION LISTING OF SEGMENT lock_mca
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1019.7 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 /****^  HISTORY COMMENTS:
       10*  1) change(86-01-09,Fawcett), approve(86-03-26,MCR7359),
       11*     audit(86-09-05,Lippard), install(86-09-16,MR12.0-1159):
       12*     Allow the MCA operator interface to be  either disabled (locked) or
       13*     enabled (unlocked). Main part of code taken from bce_lock_mca.pl1
       14*                                                   END HISTORY COMMENTS */
       15 
       16 
       17 /* format: style4,indattr,ifthenstmt,ifthen,idind35,^indcomtxt */
       18 
       19 lock_mca: proc;
       20 
       21 dcl  Me				char (10);
       22 dcl  P99				pic "99" based;
       23 dcl  V1				char (4) static options (constant) init ("1.00");
       24 dcl  MCA_LOW_NUM			fixed bin (17) static options (constant) init (0);
       25 dcl  MCA_HIGH_NUM			fixed bin (17) static options (constant) init (31);
       26 dcl  a_sci_ptr			ptr parameter;
       27 dcl  arg_count			fixed bin;
       28 dcl  arg				char (arg_len) based (arg_ptr);
       29 dcl  arg_len			fixed bin (21);
       30 dcl  arg_ptr			ptr;
       31 dcl  args_expected			fixed bin;
       32 dcl  code				fixed bin (35);
       33 dcl  entry_var			entry variable;
       34 dcl  lock_mca			bit (1);
       35 dcl  mca_number			fixed bin (35);
       36 dcl  mca_to_unlock			char (4);
       37 dcl  sci_ptr			ptr;
       38 dcl  standalone_invocation		bit (1);
       39 
       40 dcl  com_err_			entry () options (variable);
       41 dcl  cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
       42 dcl  hphcs_$ocdcm_reconfigure		entry (char (4), fixed bin, fixed bin (35));
       43 dcl  ssu_$abort_line		entry () options (variable);
       44 dcl  ssu_$print_message		entry () options (variable);
       45 dcl  ssu_$arg_count			entry (ptr, fixed bin);
       46 dcl  ssu_$arg_ptr			entry (ptr, fixed bin, ptr, fixed bin (21));
       47 dcl  ssu_$destroy_invocation		entry (ptr);
       48 dcl  ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
       49 
       50 
       51 dcl  (convert, null)		builtin;
       52 dcl  error_table_$wrong_no_of_args	fixed bin (35) ext static;
       53 dcl  error_table_$not_privileged	fixed bin (35) ext static;
       54 
       55 
       56 dcl  MAX_MCA			fixed bin (17) init (31) internal static options (constant);
       57 dcl  MIN_MCA			fixed bin (17) init (0) internal static options (constant);
       58 
       59 
       60 dcl  cleanup			condition;
       61 dcl  linkage_error			condition;
       62 
       63 	Me = "lock_mca";
       64 	lock_mca = "1"b;
       65 	standalone_invocation = "0"b;
       66 	args_expected = 0;
       67 	sci_ptr = null;
       68 	goto common_standalone;
       69 
       70 lock_mca$sc_lock_mca:
       71      entry (a_sci_ptr);
       72 
       73 	Me = "lock_mca";
       74 	standalone_invocation = "0"b;
       75 	lock_mca = "1"b;
       76 	args_expected = 0;
       77 	sci_ptr = a_sci_ptr;
       78 	goto join;
       79 
       80 lock_mca$unlock_mca:
       81      entry;
       82 
       83 	Me = "unlock_mca";
       84 	standalone_invocation = "0"b;
       85 	lock_mca = "0"b;
       86 	sci_ptr = null;
       87 	args_expected = 1;
       88 
       89 common_standalone:
       90 
       91 	on cleanup begin;
       92 	     if sci_ptr ^= null then call ssu_$destroy_invocation (sci_ptr);
       93 	end;
       94 	call ssu_$standalone_invocation (sci_ptr, Me, V1, null (), abort_entry, code);
       95 	if code ^= 0 then do;
       96 	     call com_err_ (code, Me, "Could not create ssu_ invocation.");
       97 	     goto DONE;
       98 	end;
       99 	standalone_invocation = "1"b;
      100 	on linkage_error
      101 	     call ssu_$abort_line (sci_ptr, error_table_$not_privileged, "^/Access to hphcs_ gate is required.");
      102 
      103 	entry_var = hphcs_$ocdcm_reconfigure;
      104 	revert linkage_error;
      105 
      106 	goto join;
      107 
      108 lock_mca$sc_unlock_mca:
      109      entry (a_sci_ptr);
      110 
      111 	Me = "unlock_mca";
      112 	standalone_invocation = "0"b;
      113 	lock_mca = "0"b;
      114 	args_expected = 1;
      115 	sci_ptr = a_sci_ptr;
      116 join:
      117 
      118 	call ssu_$arg_count (sci_ptr, arg_count);
      119 	if arg_count ^= args_expected then do;
      120 	     if lock_mca then call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args, "This command takes NO arguments.^/Usage: lock_mca");
      121 	     else call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args, "This command requires one argument.^/Usage: unlock_mca MCA_NUMBER");
      122 	end;
      123 
      124 	if lock_mca then do;
      125 	     call hphcs_$ocdcm_reconfigure ("", LOCK_MCA_INPUT, code);
      126 	     call ssu_$print_message (sci_ptr, code, "MCA interface^[ NOT^] locked.", (code ^= 0));
      127 	     goto DONE;
      128 	end;
      129 	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len);
      130 	mca_number = cv_dec_check_ (arg, code);
      131 	if code ^= 0 | mca_number < MCA_LOW_NUM | mca_number > MCA_HIGH_NUM then
      132 	     call ssu_$abort_line (sci_ptr, 0, "Illegal MCA number. ^[^a is not a decimal number.^] Range is ^d - ^d.", (code ^= 0), arg, MIN_MCA, MAX_MCA);
      133 
      134 	mca_to_unlock = "M_" || convert (P99, mca_number);
      135 	call hphcs_$ocdcm_reconfigure (mca_to_unlock, UNLOCK_MCA_INPUT, code);
      136 	if code = 0 then
      137 	     call ssu_$print_message (sci_ptr, code, "MCA(^a) interface unlocked.",
      138 		convert (P99, mca_number));
      139 	else call ssu_$abort_line (sci_ptr, code, "MCA(^a) interface NOT unlocked.",
      140 		convert (P99, mca_number));
      141 
      142 DONE:
      143 	if standalone_invocation then
      144 	     call ssu_$destroy_invocation (sci_ptr);
      145 	return;
      146 
      147 
      148 abort_entry:
      149      proc;
      150 
      151 	goto DONE;
      152 
      153      end abort_entry;
      154  /*  BEGIN:   sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
  1     2 
  1     3 /* format:style3,idind30 */
  1     4 
  1     5 /* Created  1984-10-24  BIM */
  1     6 /* Modified 1985-01-07, BIM: access control flags that track admin and X */
  1     7 /* Modified 1985-02-18, E. Swenson to save away abort_line procedure. */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(87-02-17,GDixon), approve(87-07-03,MCR7680),
  1    12*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  1    13*     Correct formatting problems.  Add sc_subsystem_info.flags.dont_mask_calls
  1    14*     switch.
  1    15*  2) change(87-07-03,GDixon), approve(87-07-03,MCR7680),
  1    16*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  1    17*     Removed dont_mask_calls flag.  It is no longer needed to correctly perform
  1    18*     masking on a per-request basis.
  1    19*                                                   END HISTORY COMMENTS */
  1    20 
  1    21 
  1    22 declare	sc_subsystem_info_ptr	pointer;
  1    23 declare	1 sc_subsystem_info		aligned based (sc_subsystem_info_ptr),
  1    24 	  2 restriction_flags	bit (36) aligned,	/* copied from mc atep or fabricated */
  1    25 	  2 flags			aligned,
  1    26 	    3 no_real_tty		bit (1) unaligned,	/* for sc_admin_command_ */
  1    27 	    3 print_ready		bit (1) unal,	/* on for all except the system console,	*/
  1    28 						/*  instructs sc_process_command_line_ to deal	*/
  1    29 						/*  with the prompt				*/
  1    30 	    3 the_system_console	bit (1) unal,	/* syserr messages are printed here (but console	*/
  1    31 						/*  recover doesn't try to fix this) copied here	*/
  1    32 						/*  from the mc_ate to save other looking in there*/
  1    33 	    3 printer_offed		bit (1) unal,	/* suppress logging */
  1    34 	    3 pad			bit (32) unaligned,
  1    35 	  2 source_name		char (32) unaligned,
  1    36 	  2 area_ptr		pointer,
  1    37 	  2 mc_atep		pointer,		/* needed to play with attachments */
  1    38 	  2 real_iocb		pointer,		/* for sc_signal_io_handler_ */
  1    39 	  2 hangup_entry		entry (pointer) variable,
  1    40 						/* called on io_no_permission. */
  1    41 	  2 real_execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
  1    42 	  2 real_locate_request	entry (ptr, char (*), ptr, fixed bin (35)),
  1    43 	  2 access_control_name	char (32) unaligned,
  1    44 	  2 real_invoke_request	entry,		/* since MR11 ssu_ lacks the ability to	abort a	*/
  1    45 						/*  single request, we have an invoke_request that*/
  1    46 						/*  handles a condition to unwind the request	*/
  1    47 	  2 abort_request_label	label,		/* go here (nonlocally) to unwind a single request */
  1    48 	  2 real_abort_line		entry options (variable);
  1    49 
  1    50 declare	sc_ss_area		area based (sc_subsystem_info.area_ptr);
  1    51 
  1    52 /* The following defines the user flags for the request table. */
  1    53 
  1    54 declare	sc_rf_ptr			pointer;
  1    55 declare	1 sc_request_flags		unaligned based (sc_rf_ptr),
  1    56 	  2 dont_parse_arguments	bit,		/* reply, intercom */
  1    57 	  2 obsolete		bit,		/* warn opr to not use it */
  1    58 	  2 dont_mask_calls		bit,		/* this runs without masking ev calls */
  1    59 	  2 requires_as		bit,		/* not before AS */
  1    60 	  2 requires_no_as		bit,		/* only before AS */
  1    61 	  2 complete_disks_first	bit,		/* try to mount disks */
  1    62 	  2 no_login_needed		bit,		/* sign_on */
  1    63 	  2 pad			bit (5),
  1    64 	  2 restriction_type	fixed bin (6) unsigned;
  1    65 						/* index into restriction flag string */
  1    66 
  1    67 
  1    68 /*  END OF:  sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
      154 
      155  /*  START OF:	opc_reconfig_options.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
  2     2 
  2     3 	
  2     4 /****^  HISTORY COMMENTS:
  2     5*  1) change(85-09-09,Farley), approve(85-12-03,MCR7312),
  2     6*     audit(85-11-14,Fawcett), install(86-03-21,MR12.0-1033):
  2     7*     Add Lock and unlock
  2     8*     MCA.
  2     9*  2) change(85-12-03,Farley), approve(85-12-03,MCR7306),
  2    10*     audit(85-12-03,Fawcett), install(86-03-21,MR12.0-1033):
  2    11*     Fix bugs found while doing Dipper changes.
  2    12*  3) change(85-12-03,Farley), approve(85-12-03,MCR7312),
  2    13*     audit(85-12-03,Fawcett), install(86-03-21,MR12.0-1033):
  2    14*     Add BCE MCA lock and unlock.
  2    15*                                                   END HISTORY COMMENTS */
  2    16 
  2    17 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    18 	/*										*/
  2    19 	/* Purpose:									*/
  2    20 	/*										*/
  2    21 	/* This include file contains the possible operator console reconfiguration options. These are 	*/
  2    22 	/* passed to hphcs_$ocdcm_reconfigure to effect explicit console reconfiguration.		*/
  2    23 	/*										*/
  2    24 	/* Initial Coding:		06/18/83							*/
  2    25 	/*										*/
  2    26 	/* Author:		E. A. Ranzenbach	(Ranzenbach.Multics@M)			*/
  2    27 	/* Location:		System-M.							*/
  2    28 	/* Release:		MR10.2							*/
  2    29 	/*										*/
  2    30 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    31 	/*										*/
  2    32 	/* Modifications:									*/
  2    33 	/*										*/
  2    34 	/* Date    Author			Reason						*/
  2    35 	/*										*/
  2    36 	/* 840420  E. A. Ranzenbach		Added MAKE_UNAVAILABLE option.			*/
  2    37 	/* 850205  E. A. Ranzenbach		Added SEND_MC_IO option.				*/
  2    38 	/* 850520  Paul K Farley		Added LOCK_MCA_INPUT option.				*/
  2    39 	/*				Added UNLOCK_MCA_INPUT option.			*/
  2    40 	/*										*/
  2    41 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    42 
  2    43 /* format: off */
  2    44 
  2    45      dcl	(
  2    46 	NOP			init	(0),			/* just to make sure...		*/
  2    47 	ENABLE_CONSOLE_SERVICE	init	(1),			/* allow syserr and normal I/O...	*/
  2    48 	SUSPEND_CONSOLE_SERVICE	init	(2),			/* the opposite of ENABLE...		*/
  2    49 	MAKE_BOOTLOAD_CONSOLE	init	(3),			/* make the bootload console...	*/
  2    50 	MAKE_ALTERNATE_CONSOLE	init	(4),			/* add console to alternate list...	*/
  2    51 	MAKE_IO_DEVICE		init	(5),			/* release the console to IOI...	*/
  2    52 	MAKE_INOP_DEVICE		init	(6),			/* release the console to IOI...	*/
  2    53 	RESET_CONSOLE		init	(7),			/* reset the bootload console...	*/
  2    54 	CRASH_ON_CRF		init	(8),			/* CRASH on console recovery failure... */
  2    55 	RUN_ON_CRF		init	(9),			/* RUN on console recovery failure... 	*/
  2    56 	MAKE_UNAVAILABLE		init	(10),			/* put console into the OFF state...	*/
  2    57           SEND_MC_IO		init	(11),			/* forward all I/O to the MC console... */
  2    58           LOCK_MCA_INPUT		init	(12),			/* Disable input path from console to MCA(in IMU)... */
  2    59           UNLOCK_MCA_INPUT		init	(13)			/* Enable input path from console to MCA(in IMU)... */
  2    60 	)
  2    61 				fixed bin	(17)
  2    62 				internal static	options (constant);
  2    63 
  2    64 /*  END OF:	opc_reconfig_options.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      155 
      156      end lock_mca;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0808.7  lock_mca.pl1                      >spec>install>1112>lock_mca.pl1
154          1    08/06/87  0913.5  sc_subsystem_info_.incl.pl1       >ldd>include>sc_subsystem_info_.incl.pl1
155          2    03/27/86  1120.0  opc_reconfig_options.incl.pl1     >ldd>include>opc_reconfig_options.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LOCK_MCA_INPUT                  000001 constant        fixed bin(17,0)          initial dcl 2-45 set ref 125*
MAX_MCA                         000002 constant        fixed bin(17,0)          initial dcl 56 set ref 131*
MCA_HIGH_NUM                    000002 constant        fixed bin(17,0)          initial dcl 25 ref 131
MCA_LOW_NUM                            constant        fixed bin(17,0)          initial dcl 24 ref 131
MIN_MCA                         000025 constant        fixed bin(17,0)          initial dcl 57 set ref 131*
Me                              000100 automatic       char(10)                 packed unaligned dcl 21 set ref 63* 73* 83* 94* 96*
                                                                                  111*
P99                                    based           picture(2)               packed unaligned dcl 22 ref 134 136 136 139 139
UNLOCK_MCA_INPUT                000000 constant        fixed bin(17,0)          initial dcl 2-45 set ref 135*
V1                              000003 constant        char(4)                  initial packed unaligned dcl 23 set ref 94*
a_sci_ptr                              parameter       pointer                  dcl 26 ref 70 77 108 115
arg                                    based           char                     packed unaligned dcl 28 set ref 130* 131*
arg_count                       000103 automatic       fixed bin(17,0)          dcl 27 set ref 116* 119
arg_len                         000104 automatic       fixed bin(21,0)          dcl 29 set ref 129* 130 130 131 131
arg_ptr                         000106 automatic       pointer                  dcl 30 set ref 129* 130 131
args_expected                   000110 automatic       fixed bin(17,0)          dcl 31 set ref 66* 76* 87* 114* 119
cleanup                         000126 stack reference condition                dcl 60 ref 89
code                            000111 automatic       fixed bin(35,0)          dcl 32 set ref 94* 95 96* 125* 126* 126 130* 131 131
                                                                                  135* 136 136* 139*
com_err_                        000010 constant        entry                    external dcl 40 ref 96
convert                                                builtin function         dcl 51 ref 134 136 136 139 139
cv_dec_check_                   000012 constant        entry                    external dcl 41 ref 130
entry_var                       000112 automatic       entry variable           dcl 33 set ref 103*
error_table_$not_privileged     000034 external static fixed bin(35,0)          dcl 53 set ref 100*
error_table_$wrong_no_of_args   000032 external static fixed bin(35,0)          dcl 52 set ref 120* 121*
hphcs_$ocdcm_reconfigure        000014 constant        entry                    external dcl 42 ref 103 125 135
linkage_error                   000134 stack reference condition                dcl 61 ref 100 104
lock_mca                        000116 automatic       bit(1)                   packed unaligned dcl 34 set ref 64* 75* 85* 113* 120
                                                                                  124
mca_number                      000117 automatic       fixed bin(35,0)          dcl 35 set ref 130* 131 131 134 136 136 139 139
mca_to_unlock                   000120 automatic       char(4)                  packed unaligned dcl 36 set ref 134* 135*
null                                                   builtin function         dcl 51 ref 67 86 92 94 94
sci_ptr                         000122 automatic       pointer                  dcl 37 set ref 67* 77* 86* 92 92* 94* 100* 115* 116*
                                                                                  120* 121* 126* 129* 131* 136* 139* 142*
ssu_$abort_line                 000016 constant        entry                    external dcl 43 ref 100 120 121 131 139
ssu_$arg_count                  000022 constant        entry                    external dcl 45 ref 116
ssu_$arg_ptr                    000024 constant        entry                    external dcl 46 ref 129
ssu_$destroy_invocation         000026 constant        entry                    external dcl 47 ref 92 142
ssu_$print_message              000020 constant        entry                    external dcl 44 ref 126 136
ssu_$standalone_invocation      000030 constant        entry                    external dcl 48 ref 94
standalone_invocation           000124 automatic       bit(1)                   packed unaligned dcl 38 set ref 65* 74* 84* 99* 112*
                                                                                  142

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
CRASH_ON_CRF                           internal static fixed bin(17,0)          initial dcl 2-45
ENABLE_CONSOLE_SERVICE                 internal static fixed bin(17,0)          initial dcl 2-45
MAKE_ALTERNATE_CONSOLE                 internal static fixed bin(17,0)          initial dcl 2-45
MAKE_BOOTLOAD_CONSOLE                  internal static fixed bin(17,0)          initial dcl 2-45
MAKE_INOP_DEVICE                       internal static fixed bin(17,0)          initial dcl 2-45
MAKE_IO_DEVICE                         internal static fixed bin(17,0)          initial dcl 2-45
MAKE_UNAVAILABLE                       internal static fixed bin(17,0)          initial dcl 2-45
NOP                                    internal static fixed bin(17,0)          initial dcl 2-45
RESET_CONSOLE                          internal static fixed bin(17,0)          initial dcl 2-45
RUN_ON_CRF                             internal static fixed bin(17,0)          initial dcl 2-45
SEND_MC_IO                             internal static fixed bin(17,0)          initial dcl 2-45
SUSPEND_CONSOLE_SERVICE                internal static fixed bin(17,0)          initial dcl 2-45
sc_request_flags                       based           structure                level 1 packed packed unaligned dcl 1-55
sc_rf_ptr                              automatic       pointer                  dcl 1-54
sc_ss_area                             based           area(1024)               dcl 1-50
sc_subsystem_info                      based           structure                level 1 dcl 1-23
sc_subsystem_info_ptr                  automatic       pointer                  dcl 1-22

NAMES DECLARED BY EXPLICIT CONTEXT.
DONE                            001113 constant        label                    dcl 142 ref 97 127 151
abort_entry                     001126 constant        entry                    internal dcl 148 ref 94 94
common_standalone               000261 constant        label                    dcl 89 ref 68
join                            000475 constant        label                    dcl 116 ref 78 106
lock_mca                        000177 constant        entry                    external dcl 19
lock_mca$sc_lock_mca            000221 constant        entry                    external dcl 70
lock_mca$sc_unlock_mca          000455 constant        entry                    external dcl 108
lock_mca$unlock_mca             000243 constant        entry                    external dcl 80

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1414        1452    1142        1424
Length      1710    1142        36         221     251           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
lock_mca                            178 external procedure  is an external procedure.  
on unit on line 89                   68 on unit               
on unit on line 100                  88 on unit               
abort_entry                          64 internal procedure  is assigned to an entry variable.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
lock_mca                 000100 Me                          lock_mca
                         000103 arg_count                   lock_mca
                         000104 arg_len                     lock_mca
                         000106 arg_ptr                     lock_mca
                         000110 args_expected               lock_mca
                         000111 code                        lock_mca
                         000112 entry_var                   lock_mca
                         000116 lock_mca                    lock_mca
                         000117 mca_number                  lock_mca
                         000120 mca_to_unlock               lock_mca
                         000122 sci_ptr                     lock_mca
                         000124 standalone_invocation       lock_mca

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   call_ext_out        return_mac          tra_ext_1           enable_op
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cv_dec_check_                 hphcs_$ocdcm_reconfigure      ssu_$abort_line
ssu_$arg_count                ssu_$arg_ptr                  ssu_$destroy_invocation       ssu_$print_message
ssu_$standalone_invocation

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$not_privileged   error_table_$wrong_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000176        63 000204        64 000207        65 000211        66 000212        67 000213        68 000215
     70 000216        73 000226        74 000231        75 000232        76 000234        77 000235        78 000241
     80 000242        83 000250        84 000253        85 000254        86 000255        87 000257        89 000261
     92 000275        93 000310        94 000311        95 000352        96 000354        97 000400        99 000401
    100 000403       103 000444       104 000451       106 000452       108 000453       111 000462       112 000465
    113 000466       114 000467       115 000471       116 000475       119 000506       120 000511       121 000540
    124 000564       125 000566       126 000603       127 000636       129 000637       130 000656       131 000701
    134 000761       135 000775       136 001010       139 001053       142 001113       145 001124       148 001125
    151 001133


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
