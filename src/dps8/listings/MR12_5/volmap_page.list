ASSEMBLY LISTING OF SEGMENT >spec>install>1111>volmap_page.alm                                                                                                                                      
ASSEMBLED ON:	11/11/89  0923.2 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                                     8  
                                     9  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    10  "
                                    11  "	volmap_page
                                    12  "
                                    13  "	Routines to act on single pages of a volume map
                                    14  "
                                    15  "	Entries:
                                    16  "
                                    17  "	    grap_volmap_page_unwired  - wires and reads in a volmap page
                                    18  "                                         deposits excess stock to volume map
                                    19  "
                                    20  "	    write_volmap_page_unwired - writes and unwires a volmap page
                                    21  "
                                    22  "	    start_async_read          - starts an asynchronous read cycle to
                                    23  "				  the volume map
                                    24  "
                                    25  "	    start_async_write         - starts an asynchronous write cycle to
                                    26  "				  the volume map
                                    27  "
                                    28  "	    post_io                   - posts a volume map i/o
                                    29  "
                                    30  "	    poll_io                   - polls for complete volume map i/os
                                    31  "
                                    32  "	Written February 1982 by J. Bongiovanni
                                    33  "	Modified September 1982, J. Bongiovanni, not to do read on OS page
                                    34  "
                                    35  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    36  
    000000                          37  	name	volmap_page
                        000011      38  	segdef	grab_volmap_page_unwired
                        000056      39  	segdef	write_volmap_page_unwired
                        000105      40  	segdef	start_async_read
                        000157      41  	segdef	start_async_write
                        000222      42  	segdef	post_io
                        000371      43  	segdef	poll_io
                                    44  
                        000010      45  	link	volmap_abs_seg_link,volmap_abs_seg$
                                    46  
                                    47  	even
    000000                          48  pc_wired_arg_list:
    000000  aa   000006 000004      49  	vfd	18/6,18/4,36/0
    000001  aa   000000 000000 
    000002                          50  pread_arg_list:
    000002  aa   000006 000004      51  	vfd	18/6,18/4,36/0
    000003  aa   000000 000000 
    000004                          52  pwrite_arg_list:
    000004  aa   000004 000004      53  	vfd	18/4,18/4,36/0
    000005  aa   000000 000000 
    000006                          54  notify_arg_list:
    000006  aa   000002 000004      55  	vfd	18/2,18/4,36/0
    000007  aa   000000 000000 
                                    56  
    000010  aa   000000 000001      57  one:	dec	1
                                    58  "
                                    59  	include	aste
                                   1-1  
                                   1-2  
                                   1-3       "BEGIN INCLUDE FILE aste.incl.alm
                                   1-4  
                                   1-5  
                                   1-6  	"Created 01/14/85  1523.3 est Mon by convert_include_file,
                                   1-7  	"   Version of 01/09/85  0954.4 est Wed.
                                   1-8  
                                   1-9  	"Made from >Pool>m>loe>incl>aste.incl.pl1,
                                  1-10  	"   modified 01/08/85  1115.0 est Tue
                                  1-11  
                                  1-12  "
                                  1-13  "	Structure aste
                                  1-14  "
                        000014    1-15  	equ	aste_size,12
                                  1-16  
                        000000    1-17  	equ	aste.fp,0			" UPPER
                        000000    1-18  	equ	aste.bp,0			" LOWER
                                  1-19  
                        000001    1-20  	equ	aste.infl,1		" UPPER
                        000001    1-21  	equ	aste.infp,1		" LOWER
                                  1-22  
                        000002    1-23  	equ	aste.strp,2		" UPPER
                        000002    1-24  	equ	aste.par_astep,2		" LOWER
                                  1-25  
                        000003    1-26  	equ	aste.uid,3
                                  1-27  
                        000004    1-28  	equ	aste.msl_word,4
                        000033    1-29  	equ	aste.msl_shift,27
                        000777    1-30  	bool	aste.msl_mask,000777
                        000004    1-31  	equ	aste.pvtx_word,4
                        000022    1-32  	equ	aste.pvtx_shift,18
                        000777    1-33  	bool	aste.pvtx_mask,000777
                        000004    1-34  	equ	aste.vtocx,4		" LOWER
                                  1-35  
                        000005    1-36  	equ	aste.usedf_word,5
                        400000    1-37  	bool	aste.usedf,400000		" DU
                        000005    1-38  	equ	aste.init_word,5
                        200000    1-39  	bool	aste.init,200000		" DU
                        000005    1-40  	equ	aste.gtus_word,5
                        100000    1-41  	bool	aste.gtus,100000		" DU
                        000005    1-42  	equ	aste.gtms_word,5
                        040000    1-43  	bool	aste.gtms,040000		" DU
                        000005    1-44  	equ	aste.hc_word,5
                        020000    1-45  	bool	aste.hc,020000		" DU
                        000005    1-46  	equ	aste.hc_sdw_word,5
                        010000    1-47  	bool	aste.hc_sdw,010000		" DU
                        000005    1-48  	equ	aste.any_access_on_word,5
                        004000    1-49  	bool	aste.any_access_on,004000	" DU
                        000005    1-50  	equ	aste.write_access_on_word,5
                        002000    1-51  	bool	aste.write_access_on,002000	" DU
                        000005    1-52  	equ	aste.inhibit_cache_word,5
                        001000    1-53  	bool	aste.inhibit_cache,001000	" DU
                        000005    1-54  	equ	aste.explicit_deact_ok_word,5
                        000400    1-55  	bool	aste.explicit_deact_ok,000400	" DU
                        000005    1-56  	equ	aste.deact_error_word,5
                        000200    1-57  	bool	aste.deact_error,000200	" DU
                        000005    1-58  	equ	aste.hc_part_word,5
                        000100    1-59  	bool	aste.hc_part,000100		" DU
                        000005    1-60  	equ	aste.fm_damaged_word,5
                        000040    1-61  	bool	aste.fm_damaged,000040	" DU
                        000005    1-62  	equ	aste.multi_class_word,5
                        000020    1-63  	bool	aste.multi_class,000020	" DU
                        000005    1-64  	equ	aste.dius_word,5
                        000002    1-65  	bool	aste.dius,000002		" DU
                        000005    1-66  	equ	aste.nid_word,5
                        000001    1-67  	bool	aste.nid,000001		" DU
                        000005    1-68  	equ	aste.dmpr_pad_word,5
                        400000    1-69  	bool	aste.dmpr_pad,400000	" DL
                        000005    1-70  	equ	aste.ehs_word,5
                        200000    1-71  	bool	aste.ehs,200000		" DL
                        000005    1-72  	equ	aste.nqsw_word,5
                        100000    1-73  	bool	aste.nqsw,100000		" DL
                        000005    1-74  	equ	aste.dirsw_word,5
                        040000    1-75  	bool	aste.dirsw,040000		" DL
                        000005    1-76  	equ	aste.master_dir_word,5
                        020000    1-77  	bool	aste.master_dir,020000	" DL
                        000005    1-78  	equ	aste.volmap_seg_word,5
                        010000    1-79  	bool	aste.volmap_seg,010000	" DL
                        000005    1-80  	equ	aste.tqsw_word,5
                        004000    1-81  	bool	aste.tqsw,004000		" DL
                                  1-82  
                        000006    1-83  	equ	aste.dtu,6
                        000007    1-84  	equ	aste.dtm,7
                                  1-85  
                        000010    1-86  	equ	aste.quota,8		" UPPER
                                  1-87  
                        000011    1-88  	equ	aste.used,9		" UPPER
                                  1-89  
                        000012    1-90  	equ	aste.csl_word,10
                        000033    1-91  	equ	aste.csl_shift,27
                        000777    1-92  	bool	aste.csl_mask,000777
                        000012    1-93  	equ	aste.fmchanged_word,10
                        000400    1-94  	bool	aste.fmchanged,000400	" DU
                        000012    1-95  	equ	aste.fms_word,10
                        000200    1-96  	bool	aste.fms,000200		" DU
                        000012    1-97  	equ	aste.npfs_word,10
                        000100    1-98  	bool	aste.npfs,000100		" DU
                        000012    1-99  	equ	aste.gtpd_word,10
                        000040   1-100  	bool	aste.gtpd,000040		" DU
                        000012   1-101  	equ	aste.dnzp_word,10
                        000020   1-102  	bool	aste.dnzp,000020		" DU
                        000012   1-103  	equ	aste.per_process_word,10
                        000010   1-104  	bool	aste.per_process,000010	" DU
                        000012   1-105  	equ	aste.ddnp_word,10
                        000004   1-106  	bool	aste.ddnp,000004		" DU
                        000012   1-107  	equ	aste.records_word,10
                        000011   1-108  	equ	aste.records_shift,9
                        000777   1-109  	bool	aste.records_mask,000777
                        000012   1-110  	equ	aste.np_word,10
                        000000   1-111  	equ	aste.np_shift,0
                        000777   1-112  	bool	aste.np_mask,000777
                                 1-113  
                        000013   1-114  	equ	aste.ht_fp,11		" UPPER
                        000013   1-115  	equ	aste.fmchanged1_word,11
                        400000   1-116  	bool	aste.fmchanged1,400000	" DL
                        000013   1-117  	equ	aste.damaged_word,11
                        200000   1-118  	bool	aste.damaged,200000		" DL
                        000013   1-119  	equ	aste.pack_ovfl_word,11
                        100000   1-120  	bool	aste.pack_ovfl,100000	" DL
                        000013   1-121  	equ	aste.synchronized_word,11
                        040000   1-122  	bool	aste.synchronized,040000	" DL
                        000013   1-123  	equ	aste.ptsi_word,11
                        000006   1-124  	equ	aste.ptsi_shift,6
                        000003   1-125  	bool	aste.ptsi_mask,000003
                        000013   1-126  	equ	aste.marker_word,11
                        000000   1-127  	equ	aste.marker_shift,0
                        000077   1-128  	bool	aste.marker_mask,000077
                                 1-129  
                                 1-130  "
                                 1-131  "	Structure aste_part
                                 1-132  "
                        000014   1-133  	equ	aste_part_size,12
                                 1-134  
                                 1-135  
                        000000   1-136  	equ	aste_part.one,0
                        000001   1-137  	equ	aste_part.two,1		" DOUBLE
                                 1-138  
                        000013   1-139  	equ	aste_part.three_word,11
                        000000   1-140  	equ	aste_part.three_shift,0
                        000377   1-141  	bool	aste_part.three_mask,000377
                                 1-142  
                                 1-143  "
                                 1-144  "	Structure seg_aste
                                 1-145  "
                        000014   1-146  	equ	seg_aste_size,12
                                 1-147  
                                 1-148  
                        000010   1-149  	equ	seg_aste.usage,8
                                 1-150  
                                 1-151       "END INCLUDE FILE aste.incl.alm
                                    60  "
                                    61  	include	page_info
                                   2-1  "	BEGIN INCLUDE FILE page_info.incl.alm  --  6/72
                                   2-2  "
                                   2-3  " Modified 02/22/81, W. Olin Sibert, for ADP conversion
                                   2-4  " Modified 06/23/82, E. N. Kittlitz, to move core map.
                                   2-5  "
                        000012     2-6  	equ	page_power,10		" 2**10 = size of page
                        000001     2-7  	bool	df1,000001		" directed fault 1 on page fault
                                   2-8  
                 777777 740000     2-9  	bool	address_mask,777777740000	" Mask for PTW add, add_type compares
                                  2-10  					" Use as =v36/address_mask
                                  2-11  
                        400000    2-12  	bool	ptw.nulled,400000		" flag for testing addresses
                                  2-13  
                        100000    2-14  	bool	int,100000		" Disk dim flags
                        000020    2-15  	bool	pri,000020
                        000004    2-16  	bool	no_post,000004
                                  2-17  
                        000003    2-18  	equ	sst,3			" Standard pointer and index
                        000003    2-19  	equ	pdm,sst			" register usage
                        000003    2-20  	equ	ast,sst
                        000002    2-21  	equ	ptw,2
                                  2-22  
                                  2-23  "	Various AST masks which are not
                                  2-24  "	expressible in standard notation
                                  2-25  "
                        777000    2-26  	bool	aste.csl_mask_inner,777000
                        777000    2-27  	bool	aste.records_mask_inner,777000
                                  2-28  
                        000000    2-29  	equ	fault_entry,0		" Flags indicating how we
                        000001    2-30  	equ	read_entry,1		" were entered
                        000002    2-31  	equ	write_entry,2
                        000003    2-32  	equ	pre_page_entry,3
                        000004    2-33  	equ	post_purge_entry,4
                        000005    2-34  	equ	pd_flush_entry,5
                        000006    2-35  	equ	evict_entry,6
                        000007    2-36  	equ	abs_wire_entry,7
                        000010    2-37  	equ	cleanup_entry,8
                                  2-38  
                                  2-39  " Constants for manipulating core addresses and PTWs. The core address
                                  2-40  " is a fixed bin (35) aligned, and must be moved to/from the appropriate
                                  2-41  " field in the SDW or PTW.
                                  2-42  "
                                  2-43  	iftarget	l68
                        777760          	   bool	ptw_add_mask,777760 " Page number
                        777760          	   bool	sdw_add_mask,777760 " Page number
                 000077 777777          	   bool	coreadd_mask,000077777777 " Mask for coreadd in AL
                                        
                        000014          	   equ	coreadd_to_ptw.ls,12
                        000014          	   equ	coreadd_to_sdw.ls,12
                        000014          	   equ	ptw_to_coreadd.rl,12
                        000014          	   equ	sdw_to_coreadd.rl,12
                        000002          	   equ	cmep_to_ptw.ls,2
                        000002          	   equ	cmep_to_sdw.ls,2
                        000002          	   equ	ptw_to_cmep.rl,2
                        000024          	   equ	ptw_to_cmep_lower.rl,20
                        000002          	   equ	sdw_to_cmep.rl,2
                                        "	ifend
                                  2-58  
                                  2-59  	iftarget	adp
                                        "	   bool	ptw_add_mask,177777 " Page number
                                        "	   bool	sdw_add_mask,777774 " Page number
                                        "	   bool	coreadd_mask,000377777777 " Mask for coreadd in AL
                                        "
                                        "	   equ	coreadd_to_ptw.ls,8
                                        "	   equ	coreadd_to_sdw.ls,10
                                        "	   equ	ptw_to_coreadd.rl,8
                                        "	   equ	sdw_to_coreadd.rl,10
                                        "	   equ	cmep_to_ptw.rl,2	" Must shift backwards
                                        "	   equ	cmep_to_sdw.ls,0
                                        "	   equ	ptw_to_cmep.ls,2	" Must shift backwards
                                        "	   equ	ptw_to_cmep_lower.rl,16
                                        "	   equ	sdw_to_cmep.rl,0
                                        "	ifend
                                  2-74  
                        000012    2-75  	equ	cmep_to_coreadd.rl,10	.cmep to coreadd
                        000012    2-76  	equ	coreadd_to_cmep.ls,10	coreadd to .cmep
                                  2-77  
                                  2-78  " 
                                  2-79  "
                                  2-80  " Assorted general purpose macros used in PC. These will be changed
                                  2-81  " when address types are changed for 20 bit addresses. Additionally,
                                  2-82  " for more accurate metering on the ADP, the metering macros should
                                  2-83  " modified to update the metering cells uninterruptably.
                                  2-84  "
                                  2-85  
                                  2-86  	macro	missing
                              1   2-87  	ife	&2,()
                              2   2-88  	  warn	(&1: Argument missing.)
                              3   2-89  	ifend
                              4   2-90  	&end
                                  2-91  "
                                  2-92  " staddra and staddrq store the address portion (upper 22 bits) of the A or Q
                                  2-93  " into the specified location.
                                  2-94  "
                                  2-95  	macro	staddra
                              1   2-96  	missing	staddra,&1
                              2   2-97  	era	&F1
                              3   2-98  	ana	=v36/address_mask
                              4   2-99  	ersa	&F1
                              5  2-100  	&end
                                 2-101  
                                 2-102  	macro	staddrq
                              1  2-103  	missing	staddrq,&1
                              2  2-104  	erq	&F1
                              3  2-105  	anq	=v36/address_mask
                              4  2-106  	ersq	&F1
                              5  2-107  	&end
                                 2-108  
                                 2-109  "	Macros for metering 6/23/80
                                 2-110  
                                 2-111  	macro	read_clock
                              1  2-112  	iftarget	l68
                              2  2-113  	  rccl	sys_info$clock_,*
                              3  2-114  	ifend
                              4  2-115  	iftarget adp
                              5  2-116  	  rccl	0
                              6  2-117  	ifend
                              7  2-118  	&end
                                 2-119  
                                 2-120  	macro	increment
                              1  2-121  	missing	increment,&1
                              2  2-122  	aos	&1
                              3  2-123  	&end
                                 2-124  
                                 2-125  	macro	store_clock
                              1  2-126  	missing	store_clock,&1
                              2  2-127  	read_clock
                              3  2-128  	staq	&1
                              4  2-129  	&end
                                 2-130  
                                 2-131  	macro	meter_time
                              1  2-132  	missing	meter_time,&3
                              2  2-133  	increment &3
                              3  2-134  	read_clock
                              4  2-135  	sbaq	&1
                              5  2-136  	adaq	&2
                              6  2-137  	staq	&2
                              7  2-138  	&end
                                 2-139  
                                 2-140  "	END INCLUDE FILE  page_info.incl.alm
                                    62  "
                                    63  	include	ptw
                                   3-1  " BEGIN INCLUDE FILE ... ptw.incl.alm ... 03/01/81, for ADP conversion
                                   3-2  
                                   3-3  	iftarget	l68	" Include whichever seems appropriate
                                        	 include	ptw.l68
                                   4-1  
                                   4-2  
                                   4-3       "BEGIN INCLUDE FILE ptw.l68.incl.alm
                                   4-4  
                                   4-5  
                                   4-6  	"Created 04/05/81  1616.0 est Sun by convert_include_file,
                                   4-7  	"   Version of 04/05/81  1606.8 est Sun.
                                   4-8  
                                   4-9  	"Made from >udd>Multics>hardcore_pool>new_pc>include>ptw.l68.incl.pl1,
                                  4-10  	"   modified 03/20/81  1815.9 est Fri
                                  4-11  
                                  4-12  "
                                  4-13  "	Structure core_ptw
                                  4-14  "
                        000026    4-15  	equ	core_ptw.frame_shift,22
                        037777    4-16  	bool	core_ptw.frame_mask,037777
                        000000    4-17  	equ	core_ptw.flags,0	" LOWER
                        000016    4-18  	equ	core_ptw.add_type_shift,14
                        000017    4-19  	bool	core_ptw.add_type_mask,000017
                        020000    4-20  	bool	core_ptw.first,020000	" DL
                        010000    4-21  	bool	core_ptw.er,010000	" DL
                        002000    4-22  	bool	core_ptw.unusable1,002000	" DL
                        001000    4-23  	bool	core_ptw.phu,001000	" DL
                        000400    4-24  	bool	core_ptw.phm1,000400	" DL
                        000200    4-25  	bool	core_ptw.nypd,000200	" DL
                        000100    4-26  	bool	core_ptw.phm,000100	" DL
                        000040    4-27  	bool	core_ptw.phu1,000040	" DL
                        000020    4-28  	bool	core_ptw.wired,000020	" DL
                        000010    4-29  	bool	core_ptw.os,000010	" DL
                        000004    4-30  	bool	core_ptw.valid,000004	" DL
                        000000    4-31  	equ	core_ptw.df_no_shift,0
                        000003    4-32  	bool	core_ptw.df_no_mask,000003
                                  4-33  
                                  4-34  "
                                  4-35  "	Structure ptw
                                  4-36  "
                        000000    4-37  	equ	ptw.add,0		" UPPER
                        000000    4-38  	equ	ptw.flags,0		" LOWER
                        000016    4-39  	equ	ptw.add_type_shift,14
                        000017    4-40  	bool	ptw.add_type_mask,000017
                        020000    4-41  	bool	ptw.first,020000	" DL
                        010000    4-42  	bool	ptw.er,010000		" DL
                        002000    4-43  	bool	ptw.unusable1,002000	" DL
                        001000    4-44  	bool	ptw.phu,001000		" DL
                        000400    4-45  	bool	ptw.phm1,000400		" DL
                        000200    4-46  	bool	ptw.nypd,000200		" DL
                        000100    4-47  	bool	ptw.phm,000100		" DL
                        000040    4-48  	bool	ptw.phu1,000040		" DL
                        000020    4-49  	bool	ptw.wired,000020	" DL
                        000010    4-50  	bool	ptw.os,000010		" DL
                        000004    4-51  	bool	ptw.valid,000004	" DL
                        000000    4-52  	equ	ptw.df_no_shift,0
                        000003    4-53  	bool	ptw.df_no_mask,000003
                                  4-54  
                                  4-55       "END INCLUDE FILE ptw.l68.incl.alm
                                        "	ifend
                                   3-6  
                                   3-7  	iftarget	adp
                                        "	 include	ptw.adp
                                        "	ifend
                                  3-10  
                                  3-11  " END INCLUDE FILE ... ptw.incl.alm
                                    64  "
                                    65  	include	pvte
                                   5-1  
                                   5-2  
                                   5-3       "BEGIN INCLUDE FILE pvte.incl.alm
                                   5-4  
                                   5-5  
                                   5-6  	"Created 05/29/86  1617.9 mst Thu by convert_include_file,
                                   5-7  	"   Version of 04/10/86  1622.3 mst Thu.
                                   5-8  
                                   5-9  	"Made from >dumps>old>dipper>svs5>incl>pvte.incl.pl1,
                                  5-10  	"   modified 05/29/86  1617.8 mst Thu
                                  5-11  
                                  5-12  
                                  5-13  " HISTORY COMMENTS:
                                  5-14  "  1) change(86-04-11,Fawcett), approve(86-04-11,MCR7383),
                                  5-15  "     audit(86-05-29,GDixon), install(86-07-18,MR12.0-1098):
                                  5-16  "        Add the support for subvolumes
                                  5-17  "  2) change(86-04-11,Lippard), approve(86-04-11,MCR7309),
                                  5-18  "     audit(86-05-29,GDixon), install(86-07-18,MR12.0-1098):
                                  5-19  "        Add root_lv flag to mount RLVs that do not have hardcore partitions.
                                  5-20  "  3) change(88-05-27,GWMay), approve(88-05-27,MCR7883),
                                  5-21  "     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
                                  5-22  "        Added inconsistent_dbm bit for determining the status of volume
                                  5-23  "        dumper bit maps.
                                  5-24  "                                                      END HISTORY COMMENTS
                                  5-25  
                                  5-26  
                                  5-27  "
                                  5-28  "	Structure pvt_array
                                  5-29  "
                                  5-30  
                                  5-31  "
                                  5-32  "	Structure pvte
                                  5-33  "
                        000034    5-34  	equ	pvte_size,28
                                  5-35  
                                  5-36  
                        000000    5-37  	equ	pvte.pvid,0
                        000001    5-38  	equ	pvte.lvid,1
                                  5-39  
                        000002    5-40  	equ	pvte.dmpr_in_use_word,2
                        400000    5-41  	bool	pvte.dmpr_in_use,400000	" DU
                        000002    5-42  	equ	pvte.is_sv_word,2
                        040000    5-43  	bool	pvte.is_sv,040000		" DU
                        000002    5-44  	equ	pvte.root_lv_word,2
                        020000    5-45  	bool	pvte.root_lv,020000		" DU
                        000002    5-46  	equ	pvte.removable_pack_word,2
                        010000    5-47  	bool	pvte.removable_pack,010000	" DU
                        000002    5-48  	equ	pvte.inconsistent_dbm_word,2
                        004000    5-49  	bool	pvte.inconsistent_dbm,004000	" DU
                        000002    5-50  	equ	pvte.brother_pvtx_word,2
                        000022    5-51  	equ	pvte.brother_pvtx_shift,18
                        000777    5-52  	bool	pvte.brother_pvtx_mask,000777
                        000002    5-53  	equ	pvte.skip_queue_count,2	" LOWER
                                  5-54  
                        000003    5-55  	equ	pvte.devname,3
                                  5-56  
                        000004    5-57  	equ	pvte.device_type_word,4
                        000033    5-58  	equ	pvte.device_type_shift,27
                        000777    5-59  	bool	pvte.device_type_mask,000777
                        000004    5-60  	equ	pvte.logical_area_number_word,4
                        000022    5-61  	equ	pvte.logical_area_number_shift,18
                        000777    5-62  	bool	pvte.logical_area_number_mask,000777
                        000004    5-63  	equ	pvte.used_word,4
                        400000    5-64  	bool	pvte.used,400000		" DL
                        000004    5-65  	equ	pvte.storage_system_word,4
                        200000    5-66  	bool	pvte.storage_system,200000	" DL
                        000004    5-67  	equ	pvte.permanent_word,4
                        100000    5-68  	bool	pvte.permanent,100000	" DL
                        000004    5-69  	equ	pvte.testing_word,4
                        040000    5-70  	bool	pvte.testing,040000		" DL
                        000004    5-71  	equ	pvte.being_mounted_word,4
                        020000    5-72  	bool	pvte.being_mounted,020000	" DL
                        000004    5-73  	equ	pvte.being_demounted_word,4
                        010000    5-74  	bool	pvte.being_demounted,010000	" DL
                        000004    5-75  	equ	pvte.check_read_incomplete_word,4
                        004000    5-76  	bool	pvte.check_read_incomplete,004000 " DL
                        000004    5-77  	equ	pvte.device_inoperative_word,4
                        002000    5-78  	bool	pvte.device_inoperative,002000 " DL
                        000004    5-79  	equ	pvte.rpv_word,4
                        001000    5-80  	bool	pvte.rpv,001000		" DL
                        000004    5-81  	equ	pvte.scav_check_address_word,4
                        000400    5-82  	bool	pvte.scav_check_address,000400 " DL
                        000004    5-83  	equ	pvte.deposit_to_volmap_word,4
                        000200    5-84  	bool	pvte.deposit_to_volmap,000200	" DL
                        000004    5-85  	equ	pvte.being_demounted2_word,4
                        000100    5-86  	bool	pvte.being_demounted2,000100	" DL
                        000004    5-87  	equ	pvte.pc_vacating_word,4
                        000040    5-88  	bool	pvte.pc_vacating,000040	" DL
                        000004    5-89  	equ	pvte.vacating_word,4
                        000020    5-90  	bool	pvte.vacating,000020	" DL
                        000004    5-91  	equ	pvte.hc_part_used_word,4
                        000010    5-92  	bool	pvte.hc_part_used,000010	" DL
                        000004    5-93  	equ	pvte.volmap_lock_notify_word,4
                        000004    5-94  	bool	pvte.volmap_lock_notify,000004 " DL
                        000004    5-95  	equ	pvte.volmap_idle_notify_word,4
                        000002    5-96  	bool	pvte.volmap_idle_notify,000002 " DL
                        000004    5-97  	equ	pvte.vtoc_map_lock_notify_word,4
                        000001    5-98  	bool	pvte.vtoc_map_lock_notify,000001 " DL
                                  5-99  
                        000005   5-100  	equ	pvte.n_free_vtoce,5		" UPPER
                        000005   5-101  	equ	pvte.vtoc_size,5		" LOWER
                                 5-102  
                        000006   5-103  	equ	pvte.dbmrp,6		" UPPER
                                 5-104  
                        000007   5-105  	equ	pvte.nleft,7		" UPPER
                        000007   5-106  	equ	pvte.totrec,7		" LOWER
                                 5-107  
                        000010   5-108  	equ	pvte.dim_info,8
                        000011   5-109  	equ	pvte.sv_num,9
                        000012   5-110  	equ	pvte.num_of_svs,10
                        000013   5-111  	equ	pvte.records_per_cyl,11
                        000014   5-112  	equ	pvte.record_factor,12
                        000015   5-113  	equ	pvte.sv_name,13
                                 5-114  
                        000016   5-115  	equ	pvte.curn_dmpr_vtocx,14	" UPPER
                                 5-116  
                        000017   5-117  	equ	pvte.n_vtoce,15		" LOWER
                                 5-118  
                        000020   5-119  	equ	pvte.baseadd,16		" UPPER
                                 5-120  
                        000022   5-121  	equ	pvte.volmap_seg_sdw,18	" DOUBLE
                        000024   5-122  	equ	pvte.volmap_astep,20
                                 5-123  
                        000025   5-124  	equ	pvte.volmap_offset,21	" UPPER
                        000025   5-125  	equ	pvte.vtoc_map_offset,21	" LOWER
                                 5-126  
                        000026   5-127  	equ	pvte.volmap_lock,22
                        000027   5-128  	equ	pvte.vtoc_map_lock,23
                        000030   5-129  	equ	pvte.volmap_stock_ptr,24
                        000031   5-130  	equ	pvte.vtoc_map_stock_ptr,25
                                 5-131  
                        000032   5-132  	equ	pvte.volmap_async_state,26	" UPPER
                        000032   5-133  	equ	pvte.volmap_async_page,26	" LOWER
                                 5-134  
                        000033   5-135  	equ	pvte.vol_trouble_count,27	" UPPER
                        000033   5-136  	equ	pvte.scavenger_block_rel,27	" LOWER
                                 5-137  
                        000000   5-138  	equ	VOLMAP_ASYNC_IDLE,0		" MANIFEST
                        000001   5-139  	equ	VOLMAP_ASYNC_READ,1		" MANIFEST
                        000002   5-140  	equ	VOLMAP_ASYNC_WRITE,2	" MANIFEST
                                 5-141  
                                 5-142       "END INCLUDE FILE pvte.incl.alm
                                    66  "
                                    67  	include	pxss_page_stack
                                   6-1  "
                                   6-2  "	BEGIN INCLUDE FILE  pxss_page_stack.incl.alm     July 1982
                                   6-3  "
                                   6-4  
                        000006     6-5  	equ	pxss_stack_size,6	" size of x7 save stack used by pxss
                        000015     6-6  	equ	stack_size,13	" size of x7 save stack used by page control
                                   6-7  
                                   6-8  	temp8	notify_regs
                                   6-9  	temp	save_stack(stack_size),stackp
                                  6-10  	tempd	pre_time,pre_temp(3)
                                  6-11  	tempd	arg(11),temp
                                  6-12  	tempd	stock_temp,volmap_temp,volmap_save_ptr
                                  6-13  	tempd	tmp_ev_channel,tmp_ev_message,apt_ptr,getwork_temp,delta_t
                                  6-14  	tempd	lock_volmap_temp_1,free_store_temp_1,volmap_save_sdw
                                  6-15  	temp	cmep,total_steps,temp1,temp2,volmap_temp_1,volmap_temp_2
                                  6-16  	temp	pvtx,core_add,count,entry_sw,ptp_astep,inter,devadd,errcode
                                  6-17  	temp	tmp_ring,dev_signal,before,depth,x5
                                  6-18  	temp	tmp_event,pxss_save_stack(pxss_stack_size),pxss_stackp
                                  6-19  	temp	stock_temp_1,stock_temp_2,free_store_temp,savx2_3
                                  6-20  	temp	lock_volmap_temp
                                  6-21  	temp	volmap_page_temp
                                  6-22  	tempd	free_store_start_time,post_io_start_time
                                  6-23  
                                  6-24  	temp	done_astep,volmap_page_temp_1
                                  6-25  	temp	vtocx,pageno
                                  6-26  
                                  6-27  	tempd	page_synch_temp,page_synch_time
                                  6-28  	temp	page_synch_index
                                  6-29  
                                  6-30  	temp	pc_err_type,pc_err_ptwp,pc_err_astep
                                  6-31  	tempd	pf_sdw
                                  6-32  
                                  6-33  	temp	pad(22)		" to grow compatibly
                                  6-34  "
                                  6-35  "	END INCLUDE FILE  pxss_page_stack.incl.alm
                                  6-36  "
                                    68  "
                                    69  	include	stock_seg
                                   7-1  
                                   7-2  
                                   7-3       "BEGIN INCLUDE FILE stock_seg.incl.alm
                                   7-4  
                                   7-5  
                                   7-6  	"Created 08/09/82  2006.2 edt Mon by convert_include_file,
                                   7-7  	"   Version of 12/01/81  1640.3 edt Tue.
                                   7-8  
                                   7-9  	"Made from >udd>Multics>Bongiovanni>hardcore_test_dir>scavenger_dir>stock_seg.incl.pl1,
                                  7-10  	"   modified 08/09/82  2006.2 edt Mon
                                  7-11  
                                  7-12  "
                                  7-13  "	Structure stock_seg
                                  7-14  "
                        000100    7-15  	equ	stock_seg_size,64
                                  7-16  
                                  7-17  
                        000000    7-18  	equ	stock_seg.meters,0		" LEVEL 2
                                  7-19  
                        000066    7-20  	equ	stock_seg.record_stock_entries,54
                        000067    7-21  	equ	stock_seg.vtoce_stock_entries,55
                        000070    7-22  	equ	stock_seg.record_stock_size,56
                        000071    7-23  	equ	stock_seg.vtoce_stock_size,57
                        000072    7-24  	equ	stock_seg.n_stock_entries,58
                        000074    7-25  	equ	stock_seg.record_stock_arrayp,60
                        000076    7-26  	equ	stock_seg.vtoce_stock_arrayp,62
                                  7-27  
                                  7-28  "
                                  7-29  "	Structure record_stock
                                  7-30  "
                        000000    7-31  	equ	record_stock.pvtep,0
                                  7-32  
                        000001    7-33  	equ	record_stock.n_in_stock,1	" UPPER
                        000001    7-34  	equ	record_stock.n_volmap_pages,1	" LOWER
                                  7-35  
                        000002    7-36  	equ	record_stock.n_free_in_stock,2 " UPPER
                        000002    7-37  	equ	record_stock.n_os_in_stock,2	" LOWER
                                  7-38  
                        000003    7-39  	equ	record_stock.low_threshold,3	" UPPER
                        000003    7-40  	equ	record_stock.high_threshold,3	" LOWER
                                  7-41  
                        000004    7-42  	equ	record_stock.target,4	" UPPER
                        000004    7-43  	equ	record_stock.stock_offset,4	" LOWER
                                  7-44  
                        000005    7-45  	equ	record_stock.n_words_in_stock,5 " UPPER
                        000005    7-46  	equ	record_stock.search_index,5	" LOWER
                                  7-47  
                        000006    7-48  	equ	record_stock.old_volmap_page,6 " LEVEL 2
                                  7-49  
                        000006    7-50  	equ	record_stock.last,6		" UPPER
                                  7-51  
                        000011    7-52  	equ	record_stock.volmap_page,9	" LEVEL 2
                                  7-53  
                        000011    7-54  	equ	record_stock.n_free,9	" UPPER
                        000011    7-55  	equ	record_stock.baseadd,9	" LOWER
                                  7-56  
                        000000    7-57  	equ	record_stock.stock,0	" UPPER
                                  7-58  
                                  7-59  "
                                  7-60  "	Structure vtoce_stock
                                  7-61  "
                                  7-62  
                        000000    7-63  	equ	vtoce_stock.pvtep,0
                                  7-64  
                        000001    7-65  	equ	vtoce_stock.n_in_stock,1	" UPPER
                        000001    7-66  	equ	vtoce_stock.n_free_in_stock,1	" LOWER
                                  7-67  
                        000002    7-68  	equ	vtoce_stock.target,2	" UPPER
                        000002    7-69  	equ	vtoce_stock.search_index,2	" LOWER
                                  7-70  
                        000003    7-71  	equ	vtoce_stock.stock,3		" UPPER
                                  7-72  
                                  7-73  "
                                  7-74  "	Structure rsmeters
                                  7-75  "
                        000066    7-76  	equ	rsmeters_size,54
                                  7-77  
                                  7-78  
                        000000    7-79  	equ	rsmeters.async_read_calls,0
                        000001    7-80  	equ	rsmeters.async_page_reads,1
                        000002    7-81  	equ	rsmeters.async_post_io_calls,2
                        000003    7-82  	equ	rsmeters.deposit_calls,3
                        000004    7-83  	equ	rsmeters.async_post_io_time,4	" DOUBLE
                        000006    7-84  	equ	rsmeters.deposit_time,6	" DOUBLE
                        000010    7-85  	equ	rsmeters.low_thresh_detected,8
                        000011    7-86  	equ	rsmeters.high_thresh_detected,9
                        000012    7-87  	equ	rsmeters.low_thresh_fails,10
                        000013    7-88  	equ	rsmeters.withdraw_stock_steps,11
                        000014    7-89  	equ	rsmeters.withdraw_stock_losses,12
                        000015    7-90  	equ	rsmeters.n_withdraw_attempt,13
                        000016    7-91  	equ	rsmeters.n_withdraw_range,14
                        000017    7-92  	equ	rsmeters.n_pages_withdraw_stock,15
                        000020    7-93  	equ	rsmeters.n_pages_withdraw_async,16
                        000021    7-94  	equ	rsmeters.n_v_withdraw_attempts,17
                        000022    7-95  	equ	rsmeters.withdraw_volmap_steps,18
                        000023    7-96  	equ	rsmeters.deposit_stock_steps,19
                        000024    7-97  	equ	rsmeters.deposit_stock_losses,20
                        000025    7-98  	equ	rsmeters.n_deposit_attempt,21
                        000026    7-99  	equ	rsmeters.n_pages_deposit_stock,22
                        000027   7-100  	equ	rsmeters.n_pages_deposit_volmap,23
                        000030   7-101  	equ	rsmeters.n_v_deposit_attempts,24
                        000031   7-102  	equ	rsmeters.reset_os_calls,25
                        000032   7-103  	equ	rsmeters.reset_os_losses,26
                        000033   7-104  	equ	rsmeters.withdraw_calls,27
                        000034   7-105  	equ	rsmeters.withdraw_time,28	" DOUBLE
                        000036   7-106  	equ	rsmeters.pc_deposit_time,30	" DOUBLE
                        000040   7-107  	equ	rsmeters.pc_deposit_calls,32
                        000041   7-108  	equ	rsmeters.pc_deposit_pages,33
                        000042   7-109  	equ	rsmeters.get_free_vtoce_calls,34
                        000043   7-110  	equ	rsmeters.return_free_vtoce_call,35
                        000044   7-111  	equ	rsmeters.deposit_vstock_calls,36
                        000045   7-112  	equ	rsmeters.deposit_vstock_fails,37
                        000046   7-113  	equ	rsmeters.withdraw_vstock_calls,38
                        000047   7-114  	equ	rsmeters.withdraw_vstock_fails,39
                        000050   7-115  	equ	rsmeters.deposit_vtoc_map,40
                        000051   7-116  	equ	rsmeters.withdraw_check_scav,41
                        000052   7-117  	equ	rsmeters.withdraw_conflict,42
                                 7-118  
                        000003   7-119  	equ	N_OLD_VOLMAP_PAGES,3	" MANIFEST
                        000150   7-120  	equ	DEFAULT_N_IN_RECORD_STOCK,104	" MANIFEST
                        000012   7-121  	equ	DEFAULT_N_IN_VTOCE_STOCK,10	" MANIFEST
                                 7-122  
                                 7-123       "END INCLUDE FILE stock_seg.incl.alm
                                    70  "
                                    71  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    72  "
                                    73  "	grab_volmap_page_unwired
                                    74  "
                                    75  "	call page$grab_volmap_page_unwired (pvtep, page_no, page_ptr)
                                    76  "
                                    77  "	    pvtep = pointer to PVTE (Input)
                                    78  "	    page_no = page number in volume map (Input)
                                    79  "	    page_ptr = pointer to page in volume map (Output)
                                    80  "
                                    81  "	The volume map must be locked to this process with asynchronous
                                    82  "	state of idle. volmap_abs_seg must be set to refer to this volume
                                    83  "	map.
                                    84  "
                                    85  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    86  
    000011                          87  grab_volmap_page_unwired:
    000011  aa   000300 6270 00     88  	push
    000012  aa  7 00040 2721 20
    000013  4a  4 00024 7061 20     89  	tsx6	page_fault$init_savex	" Recursive use of x7
                                    90  	
    000014  aa  0 00002 3521 20     91  	eppbp	ap|2,*			" bp -> ptr -> PVTE
    000015  aa  2 00000 3521 20     92  	eppbp	bp|0,*			" bp -> PVTE
    000016  0a   000452 7060 00     93  	tsx6	check_valid_call		" Check lock, async state, abs seg
                                    94  
    000017  aa  2 00024 7611 00     95  	lprpab	bp|pvte.volmap_astep	" ab -> ASTE for volume map
    000020  aa  6 00116 2515 00     96  	spriab	arg+8
    000021  aa  6 00116 3515 00     97  	eppab	arg+8
    000022  aa  6 00110 2515 00     98  	spriab	arg+2
    000023  aa  0 00004 3515 20     99  	eppab	ap|4,*			" Page number
    000024  aa  6 00112 2515 00    100  	spriab	arg+4
    000025  0a   000010 3514 00    101  	eppab	one			" Number of pages
    000026  aa  6 00114 2515 00    102  	spriab	arg+6
    000027  0a   000000 2370 00    103  	ldaq	pc_wired_arg_list
    000030  aa  6 00106 7571 00    104  	staq	arg
    000031  aa  6 00000 2541 00    105  	call	pc_wired$wire_wait(arg)
    000032  aa  6 00106 3501 00
    000033  4a  4 00012 3521 20
    000034  aa  6 00040 7531 00
    000035  aa  7 00036 6701 20
    000036  aa  6 00000 1731 00
    000037  aa  6 00040 0731 00
                                   106  
    000040  aa  0 00004 2351 20    107  	lda	ap|4,*			" Page number
    000041  aa   000012 7350 00    108  	als	page_power		" Offset in segment
    000042  4a  4 00026 3515 20    109  	eppab	volmap_abs_seg$0,al		" ab -> page
    000043  aa  0 00006 2515 20    110  	spriab	ap|6,*			" Return to caller
                                   111  
    000044  aa  2 00030 7631 00    112  	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
    000045  aa  3 00003 7201 00    113  	lxl0	bb|record_stock.high_threshold " Above high threshold
    000046  aa  3 00002 1001 00    114  	cmpx0	bb|record_stock.n_free_in_stock
    000047  0a   000055 6050 00    115  	tpl	grab_volmap_returns		" No
    000050  aa  3 00000 3511 00    116  	epbpab	bb|0			" ab -> base of stock_seg
    000051  aa  1 00000 3515 00    117  	eppab	ab|stock_seg.meters		" ab -> meters
    000052  aa  1 00011 0541 00    118  	aos	ab|rsmeters.high_thresh_detected
    000053  aa  0 00004 2351 20    119  	lda	ap|4,*			" Page number
    000054  4a  4 00030 7071 20    120  	tsx7	volmap$deposit_to_volmap	" Deposit excess for this page
                                   121  
    000055                         122  grab_volmap_returns:
    000055  aa  7 00042 7101 20    123  	return
                                   124  "
                                   125  
                                   126  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   127  "
                                   128  "	write_volmap_page_unwired
                                   129  "
                                   130  "	call page$write_volmap_page_unwired (pvtep, page_no)
                                   131  "
                                   132  "	    pvtep = pointer to PVTE (Input)
                                   133  "	    page_no = page number in volume map (Input)
                                   134  "
                                   135  "	The volume map must be locked to this process with asynchronous
                                   136  "	state of idle. volmap_abs_seg must be set to refer to this volume
                                   137  "	map.
                                   138  "
                                   139  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   140  
    000056                         141  write_volmap_page_unwired:
    000056  aa   000300 6270 00    142  	push
    000057  aa  7 00040 2721 20
    000060  aa  0 00002 3521 20    143  	eppbp	ap|2,*			" bp -> ptr -> PVTE
    000061  aa  2 00000 3521 20    144  	eppbp	bp|0,*			" bp -> PVTE
    000062  0a   000452 7060 00    145  	tsx6	check_valid_call		" Check lock, async state, abs-seg
                                   146  
    000063  aa  2 00024 7611 00    147  	lprpab	bp|pvte.volmap_astep	" ab -> ASTE for volmap_seg
    000064  aa  6 00116 2515 00    148  	spriab	arg+8
    000065  aa  6 00116 3515 00    149  	eppab	arg+8
    000066  aa  6 00110 2515 00    150  	spriab	arg+2
    000067  aa  0 00004 3515 20    151  	eppab	ap|4,*			" Page number
    000070  aa  6 00112 2515 00    152  	spriab	arg+4
    000071  0a   000010 3514 00    153  	eppab	one			" One page
    000072  aa  6 00114 2515 00    154  	spriab	arg+6
    000073  0a   000000 2370 00    155  	ldaq	pc_wired_arg_list
    000074  aa  6 00106 7571 00    156  	staq	arg
    000075  aa  6 00000 2541 00    157  	call	pc_wired$unwire_write_wait(arg)
    000076  aa  6 00106 3501 00
    000077  4a  4 00014 3521 20
    000100  aa  6 00040 7531 00
    000101  aa  7 00036 6701 20
    000102  aa  6 00000 1731 00
    000103  aa  6 00040 0731 00
                                   158  
    000104  aa  7 00042 7101 20    159  	return
                                   160  "
                                   161  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   162  "
                                   163  "	start_async_read
                                   164  "
                                   165  "	tsx7	volmap_page$start_async_read
                                   166  "	<return if page already in memory>
                                   167  "	<return if page not in memory>
                                   168  "
                                   169  "	On entry,
                                   170  "	    bp -> PVTE
                                   171  "	    ab -> stock_seg.meters
                                   172  "	    Areg = page number in volume map
                                   173  "	    Volume map locked to this process, async state idle
                                   174  "	    PTL locked to this process
                                   175  "
                                   176  "	On exit,
                                   177  "	    Async state is Read
                                   178  "
                                   179  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   180  
    000105                         181  start_async_read:
    000105  4a  4 00032 7061 20    182  	tsx6	page_fault$savex		" Recursive use of x7
                                   183  
                                   184  	increment	ab|rsmeters.async_read_calls
                                        	missing	increment,ab|rsmeters.async_read_calls
    000106  aa  1 00000 0541 00         	aos	ab|rsmeters.async_read_calls
                                   185  
    000107  aa  6 00224 7551 00    186  	sta	volmap_page_temp		" Page number
                                   187  
    000110  4a  4 00034 2351 20    188  	lda	pds$processid		" Check PTL
    000111  4a  4 00036 1151 20    189  	cmpa	sst$ptl
    000112  4a  4 00040 6011 20    190  	tnz	page_error$ptl_not_locked
    000113  aa  2 00026 1151 00    191  	cmpa	bp|pvte.volmap_lock		" Volmap lock held
    000114  4a  4 00042 6011 20    192  	tnz	page_error$volmap_page_invalid_call " No
    000115  aa  2 00032 2201 00    193  	ldx0	bp|pvte.volmap_async_state	" State idle
    000116  aa   000000 1000 03    194  	cmpx0	VOLMAP_ASYNC_IDLE,du
    000117  4a  4 00042 6011 20    195  	tnz	page_error$volmap_page_invalid_call  " No
    000120  aa  6 00224 2351 00    196  	lda	volmap_page_temp		" Page number
    000121  aa   777777 3750 07    197  	ana	-1,dl			" Just to be sure
    000122  aa   000001 2750 03    198  	ora	VOLMAP_ASYNC_READ,du	" New async state
    000123  aa  2 00032 7551 00    199  	sta	bp|pvte.volmap_async_state
                                   200  
    000124  aa  6 00224 2351 00    201  	lda	volmap_page_temp		" Page number
    000125  aa  2 00024 7601 00    202  	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
    000126  aa  0 00014 2361 05    203  	ldq	ap|aste_size,al		" PTW
    000127  aa   000004 3160 07    204  	canq	ptw.valid,dl		" In memory
    000130  4a  4 00044 6011 20    205  	tnz	page_fault$unsavex		" Yes
    000131  aa   000010 3160 07    206  	canq	ptw.os,dl			" I/O already in progress?
    000132  4a  4 00046 6011 20    207  	tnz	page_fault$unsavex_1	" Yes - should never happen
                                   208  
                                   209  	increment	ab|rsmeters.async_page_reads
                                        	missing	increment,ab|rsmeters.async_page_reads
    000133  aa  1 00001 0541 00         	aos	ab|rsmeters.async_page_reads
                                   210  	increment	sst$volmap_seg_page_faults
                                        	missing	increment,sst$volmap_seg_page_faults
    000134  4a  4 00050 0541 20         	aos	sst$volmap_seg_page_faults
    000135  aa  6 00116 2501 00    211  	spriap	arg+8
    000136  aa  6 00116 3501 00    212  	eppap	arg+8
    000137  aa  6 00110 2501 00    213  	spriap	arg+2
    000140  aa  6 00224 3501 00    214  	eppap	volmap_page_temp		" Page number
    000141  aa  6 00112 2501 00    215  	spriap	arg+4
    000142  aa  6 00120 3501 00    216  	eppap	arg+10
    000143  aa  6 00114 2501 00    217  	spriap	arg+6
    000144  0a   000002 2370 00    218  	ldaq	pread_arg_list
    000145  aa  6 00106 7571 00    219  	staq	arg
    000146  aa  6 00000 2541 00    220  	call	page_fault$pread(arg)
    000147  aa  6 00106 3501 00
    000150  4a  4 00016 3521 20
    000151  aa  6 00040 7531 00
    000152  aa  7 00036 6701 20
    000153  aa  6 00000 1731 00
    000154  aa  6 00040 0731 00
                                   221  
    000155  0a   000225 7070 00    222  	tsx7	post_io_pvtep		" Check for screw case
    000156  4a  4 00046 7101 20    223  	tra	page_fault$unsavex_1
                                   224  
                                   225  "
                                   226  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   227  "
                                   228  "	start_async_write
                                   229  "
                                   230  "	tsx7	page_fault$start_async_write
                                   231  "	<return if page is in memory>
                                   232  "	<return if page in not in memory>
                                   233  "
                                   234  "	On entry,
                                   235  "	    bp -> PVTE
                                   236  "	    Volmap async state is Read
                                   237  "	    PTL locked to process
                                   238  "
                                   239  "	On exit,
                                   240  "	    Volmap async state is Write
                                   241  "
                                   242  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   243  
    000157                         244  start_async_write:
    000157  4a  4 00032 7061 20    245  	tsx6	page_fault$savex		" Recursive use of x7
                                   246  
    000160  aa  6 00224 7551 00    247  	sta	volmap_page_temp		" Page number
    000161  4a  4 00034 2351 20    248  	lda	pds$processid
    000162  4a  4 00036 1151 20    249  	cmpa	sst$ptl			" PTL held
    000163  4a  4 00040 6011 20    250  	tnz	page_error$ptl_not_locked
                                   251  
    000164  aa  2 00032 2201 00    252  	ldx0	bp|pvte.volmap_async_state
    000165  aa   000001 1000 03    253  	cmpx0	VOLMAP_ASYNC_READ,du
    000166  4a  4 00052 6011 20    254  	tnz	page_error$wrong_async_state
                                   255  
    000167  aa  6 00224 2351 00    256  	lda	volmap_page_temp		" Page number
    000170  aa   777777 3750 07    257  	ana	-1,dl			" Just in case
    000171  aa   000002 2750 03    258  	ora	VOLMAP_ASYNC_WRITE,du	" New state
    000172  aa  2 00032 7551 00    259  	sta	bp|pvte.volmap_async_state
                                   260  
    000173  aa  6 00224 2351 00    261  	lda	volmap_page_temp		" Page number
    000174  aa  2 00024 7601 00    262  	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
    000175  aa  0 00014 2361 05    263  	ldq	ap|aste_size,al		" PTW
    000176  aa   000004 3160 07    264  	canq	ptw.valid,dl		" In memory
    000177  4a  4 00046 6001 20    265  	tze	page_fault$unsavex_1	" No
    000200  aa   000010 3160 07    266  	canq	ptw.os,dl			" Someone else writing it?
    000201  4a  4 00044 6011 20    267  	tnz	page_fault$unsavex		" Yes - skip call to pwrite
                                   268  
    000202  aa  6 00114 2501 00    269  	spriap	arg+6			" astep
    000203  aa  6 00114 3501 00    270  	eppap	arg+6
    000204  aa  6 00110 2501 00    271  	spriap	arg+2
    000205  aa  6 00224 3501 00    272  	eppap	volmap_page_temp		" Page number
    000206  aa  6 00112 2501 00    273  	spriap	arg+4
    000207  0a   000004 2370 00    274  	ldaq	pwrite_arg_list
    000210  aa  6 00106 7571 00    275  	staq	arg
    000211  aa  6 00000 2541 00    276  	call	page_fault$pwrite(arg)
    000212  aa  6 00106 3501 00
    000213  4a  4 00020 3521 20
    000214  aa  6 00040 7531 00
    000215  aa  7 00036 6701 20
    000216  aa  6 00000 1731 00
    000217  aa  6 00040 0731 00
                                   277  
    000220  0a   000225 7070 00    278  	tsx7	post_io_pvtep		" Check for screw case
    000221  4a  4 00044 7101 20    279  	tra	page_fault$unsavex
                                   280  "
                                   281  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   282  "
                                   283  "	post_io
                                   284  "
                                   285  "	tsx7	volmap_page$post_io
                                   286  "
                                   287  "	On entry,
                                   288  "	    Areg = pvtx
                                   289  "	    PTL locked to process
                                   290  "
                                   291  "	post_io_pvtep - internal procedure, registers already setup
                                   292  "
                                   293  "	tsx7	post_io_pvtep
                                   294  "
                                   295  "	On entry,
                                   296  "	    bp -> PVTE
                                   297  "	    PTL locked to process
                                   298  "
                                   299  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   300  
                                   301  
    000222                         302  post_io:
    000222  aa   000000 6200 00    303  	eax0	0			" Pvtx given
    000223  aa  6 00224 7551 00    304  	sta	volmap_page_temp		" pvtx
    000224  0a   000226 7100 00    305  	tra	post_io_join
                                   306  
    000225                         307  post_io_pvtep:
    000225  aa   000001 6200 00    308  	eax0	1			" Pvtep given
                                   309  
    000226                         310  post_io_join:
                                   311  	read_clock
    000226  4a  4 00054 6331 20         	  rccl	sys_info$clock_,*
                                        "	ifend
                                        "	  rccl	0
                                        "	ifend
    000227  aa  6 00230 7571 00    312  	staq	post_io_start_time		" For metering
                                   313  
    000230  aa   000000 6200 10    314  	eax0	0,x0			" Pvtep given
    000231  0a   000236 6054 00    315  	tpnz	post_got_pvtep		" Yes
    000232  aa   000034 2360 07    316  	ldq	pvte_size,dl		" Compute pvtep
    000233  aa  6 00224 4021 00    317  	mpy	volmap_page_temp		" Offset in array, one too high
    000234  4a  4 00056 3521 20    318  	eppbp	pvt$array
    000235  aa  2 77744 3521 06    319  	eppbp	bp|-pvte_size,ql		" bp -> PVTE
                                   320  
    000236                         321  post_got_pvtep:
    000236  aa  2 00032 2351 00    322  	lda	bp|pvte.volmap_async_state	" State in AU, page in AL
    000237  0a   000240 7100 01    323  	tra	post_io_state,au		" Do what's appropriate
    000240                         324  post_io_state:
    000240  aa   000000 7100 17    325  	tra	0,x7			" Idle
    000241  0a   000243 7100 00    326  	tra	post_read			" Read
    000242  0a   000271 7100 00    327  	tra	post_write		" Write
                                   328  
    000243                         329  post_read:
    000243  4a  4 00032 7061 20    330  	tsx6	page_fault$savex		" Recursive use of x7
    000244  aa  2 00024 7601 00    331  	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
    000245  aa  0 00014 2361 05    332  	ldq	ap|aste_size,al		" PTW
    000246  aa   010000 3160 07    333  	canq	ptw.er,dl			" I/O Error
    000247  0a   000252 6000 00    334  	tze	post_read_noerr		" No
    000250  0a   000427 7070 00    335  	tsx7	io_error			" Yes - handle
    000251  0a   000334 7100 00    336  	tra	post_idle			" Set state to idle and notify
    000252                         337  post_read_noerr:
    000252  aa   000004 3160 07    338  	canq	ptw.valid,dl		" In memory
    000253  0a   000257 6010 00    339  	tnz	post_read_in_mem		" Yes
    000254  aa   000010 3160 07    340  	canq	ptw.os,dl			" Did we lose the I/O?
    000255  4a  4 00044 6011 20    341  	tnz	page_fault$unsavex		" No
    000256  0a   000334 7100 00    342  	tra	post_idle			" Yes, reset it..time will cure all
                                   343  
    000257                         344  post_read_in_mem:
    000257  aa   777777 3750 07    345  	ana	-1,dl			" Page number
    000260  aa  2 00030 7631 00    346  	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
    000261  aa  3 00000 3511 00    347  	epbpab	bb|0			" ab -> base of stock seg
    000262  aa  1 00000 3515 00    348  	eppab	ab|stock_seg.meters		" ab -> meters
    000263  4a  4 00060 7071 20    349  	tsx7	volmap$withdraw_from_volmap	" Replenish stock
                                   350  
    000264  aa  2 00032 2351 00    351  	lda	bp|pvte.volmap_async_page
    000265  aa   777777 3750 07    352  	ana	-1,dl			" Page number
    000266  0a   000157 7070 00    353  	tsx7	start_async_write		" Write it back
    000267  0a   000363 7100 00    354  	tra	post_meter_exit
    000270  4a  4 00062 7101 20    355  	tra	page_error$volmap_page_async_error " Not in memory
                                   356  
    000271                         357  post_write:
    000271  4a  4 00032 7061 20    358  	tsx6	page_fault$savex		" Recursive use of x7
    000272  aa  2 00024 7601 00    359  	lprpap	bp|pvte.volmap_astep	" ap -> ASTE for volmap_seg
    000273  aa  0 00014 2361 05    360  	ldq	ap|aste_size,al		" PTW
    000274  aa   010000 3160 07    361  	canq	ptw.er,dl			" I/O Error
    000275  0a   000300 6000 00    362  	tze	post_write_noerr		" No
    000276  0a   000427 7070 00    363  	tsx7	io_error			" Yes - handle
    000277  0a   000334 7100 00    364  	tra	post_idle			" Set state to idle and notify
    000300                         365  post_write_noerr:
    000300  aa   000010 3160 07    366  	canq	ptw.os,dl			" I/O finished
    000301  4a  4 00044 6011 20    367  	tnz	page_fault$unsavex		" No
                                   368  
    000302  aa   000004 3160 07    369  	canq	ptw.valid,dl		" In memory
    000303  0a   000330 6000 00    370  	tze	post_write_not_mod		" No, write surely done
    000304  aa   000500 3160 07    371  	canq	ptw.phm+ptw.phm1,dl		" Page modified
    000305  0a   000330 6000 00    372  	tze	post_write_not_mod		" No, write completed
                                   373  
                                   374  "	Write posted but page modified. Possibly a race, although the locking
                                   375  "	strategy should prevent this. More likely, the disk went offline.
                                   376  "	In this case, the write is notified with no error by page control.
                                   377  "	We recover by re-issuing the I/O
                                   378  
    000306  aa  6 00114 2501 00    379  	spriap	arg+6			" ptr -> ASTE of volmap_seg
    000307  aa  6 00114 3501 00    380  	eppap	arg+6
    000310  aa  6 00110 2501 00    381  	spriap	arg+2
    000311  aa  2 00032 2351 00    382  	lda	bp|pvte.volmap_async_page	" Page number in lower
    000312  aa   777777 3750 07    383  	ana	-1,dl
    000313  aa  6 00116 7551 00    384  	sta	arg+8
    000314  aa  6 00116 3501 00    385  	eppap	arg+8
    000315  aa  6 00112 2501 00    386  	spriap	arg+4
    000316  0a   000004 2370 00    387  	ldaq	pwrite_arg_list
    000317  aa  6 00106 7571 00    388  	staq	arg
    000320  aa  6 00000 2541 00    389  	call	page_fault$pwrite(arg)
    000321  aa  6 00106 3501 00
    000322  4a  4 00020 3521 20
    000323  aa  6 00040 7531 00
    000324  aa  7 00036 6701 20
    000325  aa  6 00000 1731 00
    000326  aa  6 00040 0731 00
    000327  4a  4 00044 7101 20    390  	tra	page_fault$unsavex
                                   391  
    000330                         392  post_write_not_mod:
    000330  aa  2 00030 7631 00    393  	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> record stock
    000331  aa  3 00000 3511 00    394  	epbpab	bb|0			" ab -> base of stock seg
    000332  aa  1 00000 3515 00    395  	eppab	ab|stock_seg.meters		" ab -> meters
    000333  4a  4 00064 7071 20    396  	tsx7	stock$reset_os		" Write finished, OK to use addresses
                                   397  
    000334                         398  post_idle:
    000334  aa  2 00032 4501 00    399  	stz	bp|pvte.volmap_async_state	" Idle
    000335                         400  post_write_retry:
    000335  aa  2 00004 2361 00    401  	ldq	bp|pvte.volmap_idle_notify_word " Anybody waiting for idle
    000336  aa  2 00004 2351 00    402  	lda	bp|pvte.volmap_idle_notify_word
    000337  aa   000002 3150 07    403  	cana	pvte.volmap_idle_notify,dl
    000340  0a   000363 6000 00    404  	tze	post_meter_exit		" No
    000341  aa   000002 6750 07    405  	era	pvte.volmap_idle_notify,dl	" Reset notify switch
    000342  aa  2 00004 6541 00    406  	stacq	bp|pvte.volmap_idle_notify_word
    000343  0a   000335 6010 00    407  	tnz	post_write_retry		" Lost race
                                   408  
    000344  aa  2 00000 6351 00    409  	eaa	bp|0			" AU = PVTE offset
    000345  aa   000022 7710 00    410  	arl	18			" AL = PVTE offset
    000346  4a  4 00066 2751 20    411  	ora	pvt$volmap_idle_wait_constant " Areg = wait event
    000347  aa  6 00112 7551 00    412  	sta	arg+4
    000350  aa  6 00112 3501 00    413  	eppap	arg+4
    000351  aa  6 00110 2501 00    414  	spriap	arg+2
    000352  0a   000006 2370 00    415  	ldaq	notify_arg_list
    000353  aa  6 00106 7571 00    416  	staq	arg
    000354  aa  6 00000 2541 00    417  	call 	pxss$notify(arg)
    000355  aa  6 00106 3501 00
    000356  4a  4 00022 3521 20
    000357  aa  6 00040 7531 00
    000360  aa  7 00036 6701 20
    000361  aa  6 00000 1731 00
    000362  aa  6 00040 0731 00
                                   418  
    000363                         419  post_meter_exit:
                                   420  	increment	ab|rsmeters.async_post_io_calls
                                        	missing	increment,ab|rsmeters.async_post_io_calls
    000363  aa  1 00002 0541 00         	aos	ab|rsmeters.async_post_io_calls
                                   421  	read_clock
    000364  4a  4 00054 6331 20         	  rccl	sys_info$clock_,*
                                        "	ifend
                                        "	  rccl	0
                                        "	ifend
    000365  aa  6 00230 1771 00    422  	sbaq	post_io_start_time
    000366  aa  1 00004 0771 00    423  	adaq	ab|rsmeters.async_post_io_time
    000367  aa  1 00004 7571 00    424  	staq	ab|rsmeters.async_post_io_time
    000370  4a  4 00044 7101 20    425  	tra	page_fault$unsavex
                                   426  
                                   427  "
                                   428  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   429  "
                                   430  "	poll_io
                                   431  "
                                   432  "	call page$poll_volmap_io
                                   433  "
                                   434  "	Called with no locks held, wired and masked
                                   435  "
                                   436  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   437  
    000371                         438  poll_io:
    000371  aa   000300 6270 00    439  	push
    000372  aa  7 00040 2721 20
    000373  4a  4 00024 7061 20    440  	tsx6	page_fault$init_savex		" Recursive use of x7
                                   441  
    000374  4a  4 00070 7071 20    442  	tsx7	page_fault$lock_ptl			" Spin lock
                                   443  
    000375  aa   000034 2360 07    444  	ldq	pvte_size,dl			" Index to last PVTE
    000376  4a  4 00072 4021 20    445  	mpy	pvt$n_entries
    000377  aa   000000 6200 06    446  	eax0	0,ql				" x0 -> one beyond end
    000400  aa  6 00233 7401 00    447  	stx0	volmap_page_temp_1			" Save
    000401                         448  poll_loop:
    000401  aa  6 00233 2201 00    449  	ldx0	volmap_page_temp_1			" Restore PVTE index
    000402  aa   777744 6200 10    450  	eax0	-pvte_size,x0			" One fewer to go
    000403  0a   000424 6040 00    451  	tmi	poll_done
    000404  aa  6 00233 7401 00    452  	stx0	volmap_page_temp_1			" Save index to PVTE
    000405  4a  4 00056 3521 20    453  	eppbp	pvt$array
    000406  aa  2 00000 3521 10    454  	eppbp	bp|0,x0				" bp -> PVTE
    000407  aa  2 00004 2361 00    455  	ldq	bp|pvte.used_word
    000410  aa   400000 3160 07    456  	canq	pvte.used,dl			" PVTE in use
    000411  0a   000401 6000 00    457  	tze	poll_loop				" No - skip
    000412  aa  2 00032 2211 00    458  	ldx1	bp|pvte.volmap_async_state		" Asynchronous activity state
    000413  aa   000000 1010 03    459  	cmpx1	VOLMAP_ASYNC_IDLE,du		" Idle
    000414  0a   000401 6000 00    460  	tze	poll_loop				" Yes - skip
                                   461  
    000415  aa  6 00233 4411 00    462  	sxl1	volmap_page_temp_1			" Save async state
    000416  0a   000225 7070 00    463  	tsx7	post_io_pvtep			" Try to post the I/O
    000417  aa  6 00233 7211 00    464  	lxl1	volmap_page_temp_1			" Restore async state
    000420  aa  2 00032 1011 00    465  	cmpx1	bp|pvte.volmap_async_state		" Did state change?
    000421  0a   000401 6000 00    466  	tze	poll_loop				" No
    000422  4a  4 00074 7071 20    467  	tsx7	page_error$poll_state_change		" Yes - report it
    000423  0a   000401 7100 00    468  	tra	poll_loop
                                   469  
    000424                         470  poll_done:
    000424  4a  4 00076 3535 20    471  	eppbb	sst$				" Needed by unlock_ptl
    000425  4a  4 00100 7071 20    472  	tsx7	page_fault$unlock_ptl
    000426  aa  7 00042 7101 20    473  	return
                                   474  
                                   475  
                                   476  "
                                   477  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   478  "
                                   479  "	io_error - internal procedure to handle unrecoverable I/O error
                                   480  "
                                   481  "	tsx7	io_error
                                   482  "
                                   483  "	On entry,
                                   484  "	  bp -> PVTE
                                   485  "	  Areg = page number in volmap_seg
                                   486  "
                                   487  "	The strategy is to lose all free addresses on the page with the
                                   488  "	I/O error. Any OS pages are flushed from the stock, and the
                                   489  "	count of free addresses on that page is set to zero.
                                   490  "
                                   491  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   492  
    000427                         493  io_error:
    000427  4a  4 00032 7061 20    494  	tsx6	page_fault$savex		" Recursive use of x7
    000430  aa  6 00224 7551 00    495  	sta	volmap_page_temp
    000431  aa  2 00030 7631 00    496  	lprpbb	bp|pvte.volmap_stock_ptr	" bb -> Record stock
    000432  aa  3 00000 3511 00    497  	epbpab	bb|0			" ab -> base of stock_seg
    000433  aa  1 00000 3515 00    498  	eppab	ab|stock_seg.meters		" ab -> stock_seg$meters
                                   499  
    000434  4a  4 00102 7071 20    500  	tsx7	stock$flush_os		" Flush any out-of-service addresses
                                   501  	
    000435  aa  6 00224 2351 00    502  	lda	volmap_page_temp		" Page number
    000436  aa  2 00007 2201 00    503  	ldx0	bp|pvte.nleft		" Total number records left
    000437  aa  3 00011 1201 05    504  	sblx0	bb|record_stock.volmap_page,al " Minus number free this page
    000440  0a   000442 6050 00    505  	tpl	io_error_nleft_ok		" If positive
    000441  aa   000000 6200 00    506  	eax0	0
    000442                         507  io_error_nleft_ok:
    000442  aa  2 00007 7401 00    508  	stx0	bp|pvte.nleft		" Becomes new number left
    000443  aa   000000 6200 00    509  	eax0	0
    000444  aa  3 00011 7401 05    510  	stx0	bb|record_stock.volmap_page,al " Clear count of free this page
    000445  aa  2 00033 2201 00    511  	ldx0	bp|pvte.vol_trouble_count	" Increment the trouble count
    000446  aa   000001 0200 03    512  	adlx0	1,du
    000447  aa  2 00033 7401 00    513  	stx0	bp|pvte.vol_trouble_count
                                   514  
    000450  4a  4 00104 7071 20    515  	tsx7	page_error$volmap_io_error	" Tell the world
    000451  4a  4 00044 7101 20    516  	tra	page_fault$unsavex		" And return
                                   517  
                                   518  "
                                   519  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   520  "
                                   521  "	check_valid_call - internal procedure to validate that
                                   522  "	volume map is locked to this process, async state is idle,
                                   523  "	and volmap_abs_seg is setup.
                                   524  "
                                   525  "	tsx6	check_valid_call
                                   526  "
                                   527  "	On entry,
                                   528  "	    bp -> PVTE
                                   529  "
                                   530  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   531  
    000452                         532  check_valid_call:
    000452  4a  4 00010 2201 00    533  	ldx0	lp|volmap_abs_seg_link	" Segment number of volmap_abs_seg
    000453  4a  4 00010 0601 00    534  	adx0	lp|volmap_abs_seg_link	" Offset of SDW in DSEG
    000454  4a  4 00106 2371 20    535  	ldaq	dseg$0,x0			" SDW
    000455  aa  2 00022 1171 00    536  	cmpaq	bp|pvte.volmap_seg_sdw	" The right one
    000456  4a  4 00042 6011 20    537  	tnz	page_error$volmap_page_invalid_call
                                   538  
    000457  4a  4 00034 2351 20    539  	lda	pds$processid
    000460  aa  2 00026 1151 00    540  	cmpa	bp|pvte.volmap_lock		" Volmap lock held
    000461  4a  4 00042 6011 20    541  	tnz	page_error$volmap_page_invalid_call
                                   542  
    000462  aa  2 00032 2201 00    543  	ldx0	bp|pvte.volmap_async_state	" State idle
    000463  aa   000000 1000 03    544  	cmpx0	VOLMAP_ASYNC_IDLE,du
    000464  4a  4 00042 6011 20    545  	tnz	page_error$volmap_page_invalid_call
                                   546  
    000465  aa   000000 7100 16    547  	tra	0,x6
                                   548  
                                   549  
                                   550  
                                   551  
                                   552  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000466  5a   000003 000000 
    000467  5a   000076 600000 
    000470  aa   000000 000000 
    000471  55   000011 000002 
    000472  5a   000002 400003 
    000473  55   000006 000011 
    000474  aa  013 166 157 154
    000475  aa  155 141 160 137
    000476  aa  160 141 147 145
    000477  55   000016 000003 
    000500  0a   000371 400000 
    000501  55   000014 000003 
    000502  aa  007 160 157 154         poll_io
    000503  aa  154 137 151 157
    000504  55   000023 000011 
    000505  0a   000222 400000 
    000506  55   000021 000003 
    000507  aa  007 160 157 163         post_io
    000510  aa  164 137 151 157
    000511  55   000033 000016 
    000512  0a   000157 400000 
    000513  55   000026 000003 
    000514  aa  021 163 164 141         start_async_write
    000515  aa  162 164 137 141
    000516  aa  163 171 156 143
    000517  aa  137 167 162 151
    000520  aa  164 145 000 000
    000521  55   000043 000023 
    000522  0a   000105 400000 
    000523  55   000036 000003 
    000524  aa  020 163 164 141         start_async_read
    000525  aa  162 164 137 141
    000526  aa  163 171 156 143
    000527  aa  137 162 145 141
    000530  aa  144 000 000 000
    000531  55   000055 000033 
    000532  0a   000056 400000 
    000533  55   000046 000003 
    000534  aa  031 167 162 151         write_volmap_page_unwired
    000535  aa  164 145 137 166
    000536  aa  157 154 155 141
    000537  aa  160 137 160 141
    000540  aa  147 145 137 165
    000541  aa  156 167 151 162
    000542  aa  145 144 000 000
    000543  55   000067 000043 
    000544  0a   000011 400000 
    000545  55   000060 000003 
    000546  aa  030 147 162 141         grab_volmap_page_unwired
    000547  aa  142 137 166 157
    000550  aa  154 155 141 160
    000551  aa  137 160 141 147
    000552  aa  145 137 165 156
    000553  aa  167 151 162 145
    000554  aa  144 000 000 000
    000555  55   000002 000055 
    000556  6a   000000 400002 
    000557  55   000072 000003 
    000560  aa  014 163 171 155         symbol_table
    000561  aa  142 157 154 137
    000562  aa  164 141 142 154
    000563  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000564  aa   000000 000015 
    000565  aa   000000 000000 
    000566  5a   000033 000000 
    000567  5a   000043 000000 
    000570  5a   000016 000000 
    000571  5a   000055 000000 
    000572  aa   000000 000000 
    000573  5a   000067 000000 
    000574  aa   000000 000000 
    000575  aa   000000 000000 
    000576  5a   000011 000000 
    000577  5a   000023 000000 
    000600  aa   000000 000000 
    000601  aa   000000 000000 

EXTERNAL NAMES

    000602  aa  004 144 163 145         dseg
    000603  aa  147 000 000 000
    000604  aa  017 166 157 154         volmap_io_error
    000605  aa  155 141 160 137
    000606  aa  151 157 137 145
    000607  aa  162 162 157 162
    000610  aa  010 146 154 165         flush_os
    000611  aa  163 150 137 157
    000612  aa  163 000 000 000
    000613  aa  012 165 156 154         unlock_ptl
    000614  aa  157 143 153 137
    000615  aa  160 164 154 000
    000616  aa  021 160 157 154         poll_state_change
    000617  aa  154 137 163 164
    000620  aa  141 164 145 137
    000621  aa  143 150 141 156
    000622  aa  147 145 000 000
    000623  aa  011 156 137 145         n_entries
    000624  aa  156 164 162 151
    000625  aa  145 163 000 000
    000626  aa  010 154 157 143         lock_ptl
    000627  aa  153 137 160 164
    000630  aa  154 000 000 000
    000631  aa  031 166 157 154         volmap_idle_wait_constant
    000632  aa  155 141 160 137
    000633  aa  151 144 154 145
    000634  aa  137 167 141 151
    000635  aa  164 137 143 157
    000636  aa  156 163 164 141
    000637  aa  156 164 000 000
    000640  aa  010 162 145 163         reset_os
    000641  aa  145 164 137 157
    000642  aa  163 000 000 000
    000643  aa  005 163 164 157         stock
    000644  aa  143 153 000 000
    000645  aa  027 166 157 154         volmap_page_async_error
    000646  aa  155 141 160 137
    000647  aa  160 141 147 145
    000650  aa  137 141 163 171
    000651  aa  156 143 137 145
    000652  aa  162 162 157 162
    000653  aa  024 167 151 164         withdraw_from_volmap
    000654  aa  150 144 162 141
    000655  aa  167 137 146 162
    000656  aa  157 155 137 166
    000657  aa  157 154 155 141
    000660  aa  160 000 000 000
    000661  aa  005 141 162 162         array
    000662  aa  141 171 000 000
    000663  aa  003 160 166 164         pvt
    000664  aa  006 143 154 157         clock_
    000665  aa  143 153 137 000
    000666  aa  010 163 171 163         sys_info
    000667  aa  137 151 156 146
    000670  aa  157 000 000 000
    000671  aa  021 167 162 157         wrong_async_state
    000672  aa  156 147 137 141
    000673  aa  163 171 156 143
    000674  aa  137 163 164 141
    000675  aa  164 145 000 000
    000676  aa  026 166 157 154         volmap_seg_page_faults
    000677  aa  155 141 160 137
    000700  aa  163 145 147 137
    000701  aa  160 141 147 145
    000702  aa  137 146 141 165
    000703  aa  154 164 163 000
    000704  aa  011 165 156 163         unsavex_1
    000705  aa  141 166 145 170
    000706  aa  137 061 000 000
    000707  aa  007 165 156 163         unsavex
    000710  aa  141 166 145 170
    000711  aa  030 166 157 154         volmap_page_invalid_call
    000712  aa  155 141 160 137
    000713  aa  160 141 147 145
    000714  aa  137 151 156 166
    000715  aa  141 154 151 144
    000716  aa  137 143 141 154
    000717  aa  154 000 000 000
    000720  aa  016 160 164 154         ptl_not_locked
    000721  aa  137 156 157 164
    000722  aa  137 154 157 143
    000723  aa  153 145 144 000
    000724  aa  012 160 141 147         page_error
    000725  aa  145 137 145 162
    000726  aa  162 157 162 000
    000727  aa  003 160 164 154         ptl
    000730  aa  003 163 163 164         sst
    000731  aa  011 160 162 157         processid
    000732  aa  143 145 163 163
    000733  aa  151 144 000 000
    000734  aa  003 160 144 163         pds
    000735  aa  005 163 141 166         savex
    000736  aa  145 170 000 000
    000737  aa  021 144 145 160         deposit_to_volmap
    000740  aa  157 163 151 164
    000741  aa  137 164 157 137
    000742  aa  166 157 154 155
    000743  aa  141 160 000 000
    000744  aa  006 166 157 154         volmap
    000745  aa  155 141 160 000
    000746  aa  012 151 156 151         init_savex
    000747  aa  164 137 163 141
    000750  aa  166 145 170 000
    000751  aa  006 156 157 164         notify
    000752  aa  151 146 171 000
    000753  aa  004 160 170 163         pxss
    000754  aa  163 000 000 000
    000755  aa  006 160 167 162         pwrite
    000756  aa  151 164 145 000
    000757  aa  005 160 162 145         pread
    000760  aa  141 144 000 000
    000761  aa  012 160 141 147         page_fault
    000762  aa  145 137 146 141
    000763  aa  165 154 164 000
    000764  aa  021 165 156 167         unwire_write_wait
    000765  aa  151 162 145 137
    000766  aa  167 162 151 164
    000767  aa  145 137 167 141
    000770  aa  151 164 000 000
    000771  aa  011 167 151 162         wire_wait
    000772  aa  145 137 167 141
    000773  aa  151 164 000 000
    000774  aa  010 160 143 137         pc_wired
    000775  aa  167 151 162 145
    000776  aa  144 000 000 000
    000777  aa  016 166 157 154         volmap_abs_seg
    001000  aa  155 141 160 137
    001001  aa  141 142 163 137
    001002  aa  163 145 147 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001003  aa   000003 000000 
    001004  5a   000114 000000 
    001005  aa   000004 000000 
    001006  55   000236 000116 
    001007  aa   000004 000000 
    001010  55   000155 000122 
    001011  aa   000004 000000 
    001012  55   000273 000125 
    001013  aa   000003 000000 
    001014  5a   000242 000000 
    001015  aa   000004 000000 
    001016  55   000236 000130 
    001017  aa   000004 000000 
    001020  55   000175 000135 
    001021  aa   000004 000000 
    001022  55   000273 000140 
    001023  aa   000004 000000 
    001024  55   000175 000143 
    001025  aa   000004 000000 
    001026  55   000155 000152 
    001027  aa   000004 000000 
    001030  55   000236 000157 
    001031  aa   000004 000000 
    001032  55   000256 000165 
    001033  aa   000004 000000 
    001034  55   000175 000173 
    001035  aa   000004 000000 
    001036  55   000200 000176 
    001037  aa   000004 000000 
    001040  55   000236 000203 
    001041  aa   000004 000000 
    001042  55   000242 000210 
    001043  aa   000004 000000 
    001044  55   000273 000216 
    001045  aa   000004 000000 
    001046  55   000273 000221 
    001047  aa   000004 000000 
    001050  55   000236 000223 
    001051  aa   000004 000000 
    001052  55   000236 000232 
    001053  aa   000004 000000 
    001054  55   000242 000241 
    001055  aa   000004 000000 
    001056  55   000246 000243 
    001057  aa   000004 000000 
    001060  55   000273 000247 
    001061  aa   000004 000000 
    001062  55   000256 000251 
    001063  aa   000004 000000 
    001064  55   000273 000260 
    001065  aa   000004 000000 
    001066  55   000265 000263 
    001067  aa   000004 000000 
    001070  55   000273 000267 
    001071  aa   000004 000000 
    001072  55   000273 000271 
    001073  aa   000004 000000 
    001074  55   000306 000276 
    001075  aa   000004 000000 
    001076  55   000306 000303 
    001077  aa   000003 000000 
    001100  5a   000311 000000 
    001101  aa   000001 000000 
    001102  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001103  5a   000315 000000 
    001104  5a   000317 000000 
    001105  5a   000321 000000 
    001106  5a   000323 000000 
    001107  5a   000325 000000 
    001110  5a   000327 000000 
    001111  5a   000331 000000 
    001112  5a   000333 000000 
    001113  5a   000335 000000 
    001114  5a   000337 000000 
    001115  5a   000341 000000 
    001116  5a   000343 000000 
    001117  5a   000345 000000 
    001120  5a   000347 000000 
    001121  5a   000351 000000 
    001122  5a   000353 000000 
    001123  5a   000355 000000 
    001124  5a   000357 000000 
    001125  5a   000361 000000 
    001126  5a   000363 000000 
    001127  5a   000365 000000 
    001130  5a   000367 000000 
    001131  5a   000371 000000 
    001132  5a   000373 000000 
    001133  5a   000375 000000 
    001134  5a   000377 000000 
    001135  5a   000401 000000 
    001136  5a   000403 000000 
    001137  5a   000405 000000 
    001140  5a   000407 000000 
    001141  5a   000411 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000466 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000110 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         volmap_abs_seg|       
    000011  5a   000453 0000 00
    000012  9a   777766 0000 46         pc_wired|wire_wait
    000013  5a   000452 0000 00
    000014  9a   777764 0000 46         pc_wired|unwire_write_wait
    000015  5a   000451 0000 00
    000016  9a   777762 0000 46         page_fault|pread
    000017  5a   000450 0000 00
    000020  9a   777760 0000 46         page_fault|pwrite
    000021  5a   000447 0000 00
    000022  9a   777756 0000 46         pxss|notify
    000023  5a   000446 0000 00
    000024  9a   777754 0000 46         page_fault|init_savex
    000025  5a   000445 0000 00
    000026  9a   777752 0000 46         volmap_abs_seg|       
    000027  5a   000453 0000 05
    000030  9a   777750 0000 46         volmap|deposit_to_volmap
    000031  5a   000444 0000 00
    000032  9a   777746 0000 46         page_fault|savex
    000033  5a   000443 0000 00
    000034  9a   777744 0000 46         pds|processid
    000035  5a   000442 0000 00
    000036  9a   777742 0000 46         sst|ptl
    000037  5a   000441 0000 00
    000040  9a   777740 0000 46         page_error|ptl_not_locked
    000041  5a   000440 0000 00
    000042  9a   777736 0000 46         page_error|volmap_page_invalid_call
    000043  5a   000437 0000 00
    000044  9a   777734 0000 46         page_fault|unsavex
    000045  5a   000436 0000 00
    000046  9a   777732 0000 46         page_fault|unsavex_1
    000047  5a   000435 0000 00
    000050  9a   777730 0000 46         sst|volmap_seg_page_faults
    000051  5a   000434 0000 00
    000052  9a   777726 0000 46         page_error|wrong_async_state
    000053  5a   000433 0000 00
    000054  9a   777724 0000 46         sys_info|clock_
    000055  5a   000432 0000 20
    000056  9a   777722 0000 46         pvt|array
    000057  5a   000431 0000 00
    000060  9a   777720 0000 46         volmap|withdraw_from_volmap
    000061  5a   000430 0000 00
    000062  9a   777716 0000 46         page_error|volmap_page_async_error
    000063  5a   000427 0000 00
    000064  9a   777714 0000 46         stock|reset_os
    000065  5a   000426 0000 00
    000066  9a   777712 0000 46         pvt|volmap_idle_wait_constant
    000067  5a   000425 0000 00
    000070  9a   777710 0000 46         page_fault|lock_ptl
    000071  5a   000424 0000 00
    000072  9a   777706 0000 46         pvt|n_entries
    000073  5a   000423 0000 00
    000074  9a   777704 0000 46         page_error|poll_state_change
    000075  5a   000422 0000 00
    000076  9a   777702 0000 46         sst|       
    000077  5a   000421 0000 00
    000100  9a   777700 0000 46         page_fault|unlock_ptl
    000101  5a   000420 0000 00
    000102  9a   777676 0000 46         stock|flush_os
    000103  5a   000417 0000 00
    000104  9a   777674 0000 46         page_error|volmap_io_error
    000105  5a   000416 0000 00
    000106  9a   777672 0000 46         dseg|       
    000107  5a   000415 0000 10
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   241604 015540 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000360 
    000020  aa   000000 000226 
    000021  aa   000302 000264 
    000022  aa   000345 000226 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000010 
    000066  aa   000126 000042 
    000067  aa   175453 017705 
    000070  aa   000000 117547 
    000071  aa   176327 200000 
    000072  aa   000137 000032 
    000073  aa   133234 136212 
    000074  aa   000000 113324 
    000075  aa   322064 200000 
    000076  aa   000146 000037 
    000077  aa   112456 132235 
    000100  aa   000000 111250 
    000101  aa   530556 400000 
    000102  aa   000156 000031 
    000103  aa   102456 350276 
    000104  aa   000000 110246 
    000105  aa   520730 400000 
    000106  aa   000165 000035 
    000107  aa   106701 740574 
    000110  aa   000000 110670 
    000111  aa   206425 200000 
    000112  aa   000175 000032 
    000113  aa   164131 272662 
    000114  aa   000000 116416 
    000115  aa   727372 600000 
    000116  aa   000204 000045 
    000117  aa   133234 136230 
    000120  aa   000000 113324 
    000121  aa   322064 400000 
    000122  aa   000216 000037 
    000123  aa   113021 605126 
    000124  aa   000000 111303 
    000125  aa   067554 000000 
    000126  aa   076163 160145          >spec>install>1111>volmap_page.alm
    000127  aa   143076 151156 
    000130  aa   163164 141154 
    000131  aa   154076 061061 
    000132  aa   061061 076166 
    000133  aa   157154 155141 
    000134  aa   160137 160141 
    000135  aa   147145 056141 
    000136  aa   154155 040040 
    000137  aa   076154 144144          >ldd>include>aste.incl.alm
    000140  aa   076151 156143 
    000141  aa   154165 144145 
    000142  aa   076141 163164 
    000143  aa   145056 151156 
    000144  aa   143154 056141 
    000145  aa   154155 040040 
    000146  aa   076154 144144          >ldd>include>page_info.incl.alm
    000147  aa   076151 156143 
    000150  aa   154165 144145 
    000151  aa   076160 141147 
    000152  aa   145137 151156 
    000153  aa   146157 056151 
    000154  aa   156143 154056 
    000155  aa   141154 155040 
    000156  aa   076154 144144          >ldd>include>ptw.incl.alm
    000157  aa   076151 156143 
    000160  aa   154165 144145 
    000161  aa   076160 164167 
    000162  aa   056151 156143 
    000163  aa   154056 141154 
    000164  aa   155040 040040 
    000165  aa   076154 144144          >ldd>include>ptw.l68.incl.alm
    000166  aa   076151 156143 
    000167  aa   154165 144145 
    000170  aa   076160 164167 
    000171  aa   056154 066070 
    000172  aa   056151 156143 
    000173  aa   154056 141154 
    000174  aa   155040 040040 
    000175  aa   076154 144144          >ldd>include>pvte.incl.alm
    000176  aa   076151 156143 
    000177  aa   154165 144145 
    000200  aa   076160 166164 
    000201  aa   145056 151156 
    000202  aa   143154 056141 
    000203  aa   154155 040040 
    000204  aa   076154 144144          >ldd>include>pxss_page_stack.incl.alm
    000205  aa   076151 156143 
    000206  aa   154165 144145 
    000207  aa   076160 170163 
    000210  aa   163137 160141 
    000211  aa   147145 137163 
    000212  aa   164141 143153 
    000213  aa   056151 156143 
    000214  aa   154056 141154 
    000215  aa   155040 040040 
    000216  aa   076154 144144          >ldd>include>stock_seg.incl.alm
    000217  aa   076151 156143 
    000220  aa   154165 144145 
    000221  aa   076163 164157 
    000222  aa   143153 137163 
    000223  aa   145147 056151 
    000224  aa   156143 154056 
    000225  aa   141154 155040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           7    abs_wire_entry           page_info:     36.
      740000    address_mask             page_info:      9.
         150    apt_ptr                  pxss_page_stack:     13.
         106    arg                      volmap_page:   96,   97,   98,  100,  102,  104,  105,  148,  149,  150,  152,  154,
                                                       156,  157,  211,  212,  213,  215,  216,  217,  219,  220,  269,  270,
                                                       271,  273,  275,  276,  379,  380,  381,  384,  385,  386,  388,  389,
                                                       412,  413,  414,  416,  417,
                                         pxss_page_stack:     11.
                array                    volmap_page:  318,  453.
           3    ast                      page_info:     20.
        4000    aste.any_access_on       aste:          49.
           5    aste.any_access_on_word  aste:          48.
           0    aste.bp                  aste:          18.
         777    aste.csl_mask            aste:          92.
      777000    aste.csl_mask_inner      page_info:     26.
          33    aste.csl_shift           aste:          91.
          12    aste.csl_word            aste:          90.
      200000    aste.damaged             aste:         118.
          13    aste.damaged_word        aste:         117.
           4    aste.ddnp                aste:         106.
          12    aste.ddnp_word           aste:         105.
         200    aste.deact_error         aste:          57.
           5    aste.deact_error_word    aste:          56.
       40000    aste.dirsw               aste:          75.
           5    aste.dirsw_word          aste:          74.
           2    aste.dius                aste:          65.
           5    aste.dius_word           aste:          64.
      400000    aste.dmpr_pad            aste:          69.
           5    aste.dmpr_pad_word       aste:          68.
          20    aste.dnzp                aste:         102.
          12    aste.dnzp_word           aste:         101.
           7    aste.dtm                 aste:          84.
           6    aste.dtu                 aste:          83.
      200000    aste.ehs                 aste:          71.
           5    aste.ehs_word            aste:          70.
         400    aste.explicit_deact_ok   aste:          55.
           5    aste.explicit_deact_ok_word    aste:          54.
         400    aste.fmchanged           aste:          94.
      400000    aste.fmchanged1          aste:         116.
          13    aste.fmchanged1_word     aste:         115.
          12    aste.fmchanged_word      aste:          93.
         200    aste.fms                 aste:          96.
          12    aste.fms_word            aste:          95.
          40    aste.fm_damaged          aste:          61.
           5    aste.fm_damaged_word     aste:          60.
           0    aste.fp                  aste:          17.
       40000    aste.gtms                aste:          43.
           5    aste.gtms_word           aste:          42.
          40    aste.gtpd                aste:         100.
          12    aste.gtpd_word           aste:          99.
      100000    aste.gtus                aste:          41.
           5    aste.gtus_word           aste:          40.
       20000    aste.hc                  aste:          45.
         100    aste.hc_part             aste:          59.
           5    aste.hc_part_word        aste:          58.
       10000    aste.hc_sdw              aste:          47.
           5    aste.hc_sdw_word         aste:          46.
           5    aste.hc_word             aste:          44.
          13    aste.ht_fp               aste:         114.
           1    aste.infl                aste:          20.
           1    aste.infp                aste:          21.
        1000    aste.inhibit_cache       aste:          53.
           5    aste.inhibit_cache_word  aste:          52.
      200000    aste.init                aste:          39.
           5    aste.init_word           aste:          38.
          77    aste.marker_mask         aste:         128.
           0    aste.marker_shift        aste:         127.
          13    aste.marker_word         aste:         126.
       20000    aste.master_dir          aste:          77.
           5    aste.master_dir_word     aste:          76.
         777    aste.msl_mask            aste:          30.
          33    aste.msl_shift           aste:          29.
           4    aste.msl_word            aste:          28.
          20    aste.multi_class         aste:          63.
           5    aste.multi_class_word    aste:          62.
           1    aste.nid                 aste:          67.
           5    aste.nid_word            aste:          66.
         100    aste.npfs                aste:          98.
          12    aste.npfs_word           aste:          97.
         777    aste.np_mask             aste:         112.
           0    aste.np_shift            aste:         111.
          12    aste.np_word             aste:         110.
      100000    aste.nqsw                aste:          73.
           5    aste.nqsw_word           aste:          72.
      100000    aste.pack_ovfl           aste:         120.
          13    aste.pack_ovfl_word      aste:         119.
           2    aste.par_astep           aste:          24.
          10    aste.per_process         aste:         104.
          12    aste.per_process_word    aste:         103.
           3    aste.ptsi_mask           aste:         125.
           6    aste.ptsi_shift          aste:         124.
          13    aste.ptsi_word           aste:         123.
         777    aste.pvtx_mask           aste:          33.
          22    aste.pvtx_shift          aste:          32.
           4    aste.pvtx_word           aste:          31.
          10    aste.quota               aste:          86.
         777    aste.records_mask        aste:         109.
      777000    aste.records_mask_inner  page_info:     27.
          11    aste.records_shift       aste:         108.
          12    aste.records_word        aste:         107.
           2    aste.strp                aste:          23.
       40000    aste.synchronized        aste:         122.
          13    aste.synchronized_word   aste:         121.
        4000    aste.tqsw                aste:          81.
           5    aste.tqsw_word           aste:          80.
           3    aste.uid                 aste:          26.
          11    aste.used                aste:          88.
      400000    aste.usedf               aste:          37.
           5    aste.usedf_word          aste:          36.
       10000    aste.volmap_seg          aste:          79.
           5    aste.volmap_seg_word     aste:          78.
           4    aste.vtocx               aste:          34.
        2000    aste.write_access_on     aste:          51.
           5    aste.write_access_on_word      aste:          50.
           0    aste_part.one            aste:         136.
         377    aste_part.three_mask     aste:         141.
           0    aste_part.three_shift    aste:         140.
          13    aste_part.three_word     aste:         139.
           1    aste_part.two            aste:         137.
          14    aste_part_size           aste:         133.
          14    aste_size                volmap_page:  203,  263,  332,  360,
                                         aste:          15.
         204    before                   pxss_page_stack:     17.
         452    check_valid_call         volmap_page:   93,  145,  532.
          10    cleanup_entry            page_info:     37.
                clock_                   volmap_page:  311,  421.
         164    cmep                     pxss_page_stack:     15.
          12    cmep_to_coreadd.rl       page_info:     75.
           2    cmep_to_ptw.ls           page_info:     57.
           2    cmep_to_sdw.ls           page_info:     57.
      777777    coreadd_mask             page_info:     57.
          12    coreadd_to_cmep.ls       page_info:     76.
          14    coreadd_to_ptw.ls        page_info:     57.
          14    coreadd_to_sdw.ls        page_info:     57.
         173    core_add                 pxss_page_stack:     16.
          17    core_ptw.add_type_mask   ptw.l68:       19.
          16    core_ptw.add_type_shift  ptw.l68:       18.
           3    core_ptw.df_no_mask      ptw.l68:       32.
           0    core_ptw.df_no_shift     ptw.l68:       31.
       10000    core_ptw.er              ptw.l68:       21.
       20000    core_ptw.first           ptw.l68:       20.
           0    core_ptw.flags           ptw.l68:       17.
       37777    core_ptw.frame_mask      ptw.l68:       16.
          26    core_ptw.frame_shift     ptw.l68:       15.
         200    core_ptw.nypd            ptw.l68:       25.
          10    core_ptw.os              ptw.l68:       29.
         100    core_ptw.phm             ptw.l68:       26.
         400    core_ptw.phm1            ptw.l68:       24.
        1000    core_ptw.phu             ptw.l68:       23.
          40    core_ptw.phu1            ptw.l68:       27.
        2000    core_ptw.unusable1       ptw.l68:       22.
           4    core_ptw.valid           ptw.l68:       30.
          20    core_ptw.wired           ptw.l68:       28.
         174    count                    pxss_page_stack:     16.
         150    DEFAULT_N_IN_RECORD_STOCK      stock_seg:    120.
          12    DEFAULT_N_IN_VTOCE_STOCK       stock_seg:    121.
         154    delta_t                  pxss_page_stack:     13.
                deposit_to_volmap        volmap_page:  120.
         205    depth                    pxss_page_stack:     17.
         200    devadd                   pxss_page_stack:     16.
         203    dev_signal               pxss_page_stack:     17.
           1    df1                      page_info:      7.
         232    done_astep               pxss_page_stack:     24.
                dseg                     volmap_page:  535.
         175    entry_sw                 pxss_page_stack:     16.
         201    errcode                  pxss_page_stack:     16.
           6    evict_entry              page_info:     35.
           0    fault_entry              page_info:     29.
                flush_os                 volmap_page:  500.
         226    free_store_start_time    pxss_page_stack:     22.
         221    free_store_temp          pxss_page_stack:     19.
         160    free_store_temp_1        pxss_page_stack:     14.
         152    getwork_temp             pxss_page_stack:     13.
          11    grab_volmap_page_unwired       volmap_page:   38,   87.
          55    grab_volmap_returns      volmap_page:  115,  122.
                init_savex               volmap_page:   89,  440.
      100000    int                      page_info:     14.
         177    inter                    pxss_page_stack:     16.
         427    io_error                 volmap_page:  335,  363,  493.
         442    io_error_nleft_ok        volmap_page:  505,  507.
                lock_ptl                 volmap_page:  442.
         223    lock_volmap_temp         pxss_page_stack:     20.
         156    lock_volmap_temp_1       pxss_page_stack:     14.
                notify                   volmap_page:  417.
           6    notify_arg_list          volmap_page:   54,  415.
          50    notify_regs              pxss_page_stack:      8.
           4    no_post                  page_info:     16.
                n_entries                volmap_page:  445.
           3    N_OLD_VOLMAP_PAGES       stock_seg:    119.
          10    one                      volmap_page:   57,  101,  153.
         250    pad                      pxss_page_stack:     33.
         235    pageno                   pxss_page_stack:     25.
                page_error               volmap_page:  190,  192,  195,  250,  254,  355,  467,  515,  537,  541,  545.
                page_fault               volmap_page:   89,  182,  205,  207,  220,  223,  245,  265,  267,  276,  279,  330,
                                                       341,  358,  367,  389,  390,  425,  440,  442,  472,  494,  516.
          12    page_power               volmap_page:  108,
                                         page_info:      6.
         242    page_synch_index         pxss_page_stack:     28.
         236    page_synch_temp          pxss_page_stack:     27.
         240    page_synch_time          pxss_page_stack:     27.
         245    pc_err_astep             pxss_page_stack:     30.
         244    pc_err_ptwp              pxss_page_stack:     30.
         243    pc_err_type              pxss_page_stack:     30.
                pc_wired                 volmap_page:  105,  157.
           0    pc_wired_arg_list        volmap_page:   48,  103,  155.
           3    pdm                      page_info:     19.
                pds                      volmap_page:  188,  248,  539.
           5    pd_flush_entry           page_info:     34.
         246    pf_sdw                   pxss_page_stack:     31.
         424    poll_done                volmap_page:  451,  470.
         371    poll_io                  volmap_page:   43,  438.
         401    poll_loop                volmap_page:  448,  457,  460,  466,  468.
                poll_state_change        volmap_page:  467.
         236    post_got_pvtep           volmap_page:  315,  321.
         334    post_idle                volmap_page:  336,  342,  364,  398.
         222    post_io                  volmap_page:   42,  302.
         226    post_io_join             volmap_page:  305,  310.
         225    post_io_pvtep            volmap_page:  222,  278,  307,  463.
         230    post_io_start_time       volmap_page:  312,  422,
                                         pxss_page_stack:     22.
         240    post_io_state            volmap_page:  323,  324.
         363    post_meter_exit          volmap_page:  354,  404,  419.
           4    post_purge_entry         page_info:     33.
         243    post_read                volmap_page:  326,  329.
         257    post_read_in_mem         volmap_page:  339,  344.
         252    post_read_noerr          volmap_page:  334,  337.
         271    post_write               volmap_page:  327,  357.
         300    post_write_noerr         volmap_page:  362,  365.
         330    post_write_not_mod       volmap_page:  370,  372,  392.
         335    post_write_retry         volmap_page:  400,  407.
                pread                    volmap_page:  220.
           2    pread_arg_list           volmap_page:   50,  218.
           3    pre_page_entry           page_info:     32.
         100    pre_temp                 pxss_page_stack:     10.
          76    pre_time                 pxss_page_stack:     10.
          20    pri                      page_info:     15.
                processid                volmap_page:  188,  248,  539.
                ptl                      volmap_page:  189,  249.
                ptl_not_locked           volmap_page:  190,  250.
         176    ptp_astep                pxss_page_stack:     16.
           2    ptw                      page_info:     21.
           0    ptw.add                  ptw.l68:       37.
          17    ptw.add_type_mask        ptw.l68:       40.
          16    ptw.add_type_shift       ptw.l68:       39.
           3    ptw.df_no_mask           ptw.l68:       53.
           0    ptw.df_no_shift          ptw.l68:       52.
       10000    ptw.er                   volmap_page:  333,  361,
                                         ptw.l68:       42.
       20000    ptw.first                ptw.l68:       41.
           0    ptw.flags                ptw.l68:       38.
      400000    ptw.nulled               page_info:     12.
         200    ptw.nypd                 ptw.l68:       46.
          10    ptw.os                   volmap_page:  206,  266,  340,  366,
                                         ptw.l68:       50.
         100    ptw.phm                  volmap_page:  371,
                                         ptw.l68:       47.
         400    ptw.phm1                 volmap_page:  371,
                                         ptw.l68:       45.
        1000    ptw.phu                  ptw.l68:       44.
          40    ptw.phu1                 ptw.l68:       48.
        2000    ptw.unusable1            ptw.l68:       43.
           4    ptw.valid                volmap_page:  204,  264,  338,  369,
                                         ptw.l68:       51.
          20    ptw.wired                ptw.l68:       49.
      777760    ptw_add_mask             page_info:     57.
           2    ptw_to_cmep.rl           page_info:     57.
          24    ptw_to_cmep_lower.rl     page_info:     57.
          14    ptw_to_coreadd.rl        page_info:     57.
                pvt                      volmap_page:  318,  411,  445,  453.
          20    pvte.baseadd             pvte:         119.
       10000    pvte.being_demounted     pvte:          74.
         100    pvte.being_demounted2    pvte:          86.
           4    pvte.being_demounted2_word     pvte:          85.
           4    pvte.being_demounted_word      pvte:          73.
       20000    pvte.being_mounted       pvte:          72.
           4    pvte.being_mounted_word  pvte:          71.
         777    pvte.brother_pvtx_mask   pvte:          52.
          22    pvte.brother_pvtx_shift  pvte:          51.
           2    pvte.brother_pvtx_word   pvte:          50.
        4000    pvte.check_read_incomplete     pvte:          76.
           4    pvte.check_read_incomplete_word      pvte:          75.
          16    pvte.curn_dmpr_vtocx     pvte:         115.
           6    pvte.dbmrp               pvte:         103.
         200    pvte.deposit_to_volmap   pvte:          84.
           4    pvte.deposit_to_volmap_word    pvte:          83.
        2000    pvte.device_inoperative  pvte:          78.
           4    pvte.device_inoperative_word   pvte:          77.
         777    pvte.device_type_mask    pvte:          59.
          33    pvte.device_type_shift   pvte:          58.
           4    pvte.device_type_word    pvte:          57.
           3    pvte.devname             pvte:          55.
          10    pvte.dim_info            pvte:         108.
      400000    pvte.dmpr_in_use         pvte:          41.
           2    pvte.dmpr_in_use_word    pvte:          40.
          10    pvte.hc_part_used        pvte:          92.
           4    pvte.hc_part_used_word   pvte:          91.
        4000    pvte.inconsistent_dbm    pvte:          49.
           2    pvte.inconsistent_dbm_word     pvte:          48.
       40000    pvte.is_sv               pvte:          43.
           2    pvte.is_sv_word          pvte:          42.
         777    pvte.logical_area_number_mask  pvte:          62.
          22    pvte.logical_area_number_shift       pvte:          61.
           4    pvte.logical_area_number_word  pvte:          60.
           1    pvte.lvid                pvte:          38.
           7    pvte.nleft               volmap_page:  503,  508,
                                         pvte:         105.
          12    pvte.num_of_svs          pvte:         110.
           5    pvte.n_free_vtoce        pvte:         100.
          17    pvte.n_vtoce             pvte:         117.
          40    pvte.pc_vacating         pvte:          88.
           4    pvte.pc_vacating_word    pvte:          87.
      100000    pvte.permanent           pvte:          68.
           4    pvte.permanent_word      pvte:          67.
           0    pvte.pvid                pvte:          37.
          13    pvte.records_per_cyl     pvte:         111.
          14    pvte.record_factor       pvte:         112.
       10000    pvte.removable_pack      pvte:          47.
           2    pvte.removable_pack_word       pvte:          46.
       20000    pvte.root_lv             pvte:          45.
           2    pvte.root_lv_word        pvte:          44.
        1000    pvte.rpv                 pvte:          80.
           4    pvte.rpv_word            pvte:          79.
          33    pvte.scavenger_block_rel       pvte:         136.
         400    pvte.scav_check_address  pvte:          82.
           4    pvte.scav_check_address_word   pvte:          81.
           2    pvte.skip_queue_count    pvte:          53.
      200000    pvte.storage_system      pvte:          66.
           4    pvte.storage_system_word       pvte:          65.
          15    pvte.sv_name             pvte:         113.
          11    pvte.sv_num              pvte:         109.
       40000    pvte.testing             pvte:          70.
           4    pvte.testing_word        pvte:          69.
           7    pvte.totrec              pvte:         106.
      400000    pvte.used                volmap_page:  456,
                                         pvte:          64.
           4    pvte.used_word           volmap_page:  455,
                                         pvte:          63.
          20    pvte.vacating            pvte:          90.
           4    pvte.vacating_word       pvte:          89.
          24    pvte.volmap_astep        volmap_page:   95,  147,  202,  262,  331,  359,
                                         pvte:         122.
          32    pvte.volmap_async_page   volmap_page:  351,  382,
                                         pvte:         133.
          32    pvte.volmap_async_state  volmap_page:  193,  199,  252,  259,  322,  399,  458,  465,  543,
                                         pvte:         132.
           2    pvte.volmap_idle_notify  volmap_page:  403,  405,
                                         pvte:          96.
           4    pvte.volmap_idle_notify_word   volmap_page:  401,  402,  406,
                                               pvte:          95.
          26    pvte.volmap_lock         volmap_page:  191,  540,
                                         pvte:         127.
           4    pvte.volmap_lock_notify  pvte:          94.
           4    pvte.volmap_lock_notify_word   pvte:          93.
          25    pvte.volmap_offset       pvte:         124.
          22    pvte.volmap_seg_sdw      volmap_page:  536,
                                         pvte:         121.
          30    pvte.volmap_stock_ptr    volmap_page:  112,  346,  393,  496,
                                         pvte:         129.
          33    pvte.vol_trouble_count   volmap_page:  511,  513,
                                         pvte:         135.
          27    pvte.vtoc_map_lock       pvte:         128.
           1    pvte.vtoc_map_lock_notify      pvte:          98.
           4    pvte.vtoc_map_lock_notify_word       pvte:          97.
          25    pvte.vtoc_map_offset     pvte:         125.
          31    pvte.vtoc_map_stock_ptr  pvte:         130.
           5    pvte.vtoc_size           pvte:         101.
          34    pvte_size                volmap_page:  316,  319,  444,  450,
                                         pvte:          34.
         172    pvtx                     pxss_page_stack:     16.
                pwrite                   volmap_page:  276,  389.
           4    pwrite_arg_list          volmap_page:   52,  274,  387.
                pxss                     volmap_page:  417.
         210    pxss_save_stack          pxss_page_stack:     18.
         216    pxss_stackp              pxss_page_stack:     18.
           6    pxss_stack_size          pxss_page_stack:      5,   18.
           1    read_entry               page_info:     30.
          11    record_stock.baseadd     stock_seg:     55.
           3    record_stock.high_threshold    volmap_page:  113,
                                               stock_seg:     40.
           6    record_stock.last        stock_seg:     50.
           3    record_stock.low_threshold     stock_seg:     39.
          11    record_stock.n_free      stock_seg:     54.
           2    record_stock.n_free_in_stock   volmap_page:  114,
                                               stock_seg:     36.
           1    record_stock.n_in_stock  stock_seg:     33.
           2    record_stock.n_os_in_stock     stock_seg:     37.
           1    record_stock.n_volmap_pages    stock_seg:     34.
           5    record_stock.n_words_in_stock  stock_seg:     45.
           6    record_stock.old_volmap_page   stock_seg:     48.
           0    record_stock.pvtep       stock_seg:     31.
           5    record_stock.search_index      stock_seg:     46.
           0    record_stock.stock       stock_seg:     57.
           4    record_stock.stock_offset      stock_seg:     43.
           4    record_stock.target      stock_seg:     42.
          11    record_stock.volmap_page       volmap_page:  504,  510,
                                               stock_seg:     52.
                reset_os                 volmap_page:  396.
           1    rsmeters.async_page_reads      volmap_page:  209,
                                               stock_seg:     80.
           2    rsmeters.async_post_io_calls   volmap_page:  420,
                                               stock_seg:     81.
           4    rsmeters.async_post_io_time    volmap_page:  423,  424,
                                               stock_seg:     83.
           0    rsmeters.async_read_calls      volmap_page:  184,
                                               stock_seg:     79.
           3    rsmeters.deposit_calls   stock_seg:     82.
          24    rsmeters.deposit_stock_losses  stock_seg:     97.
          23    rsmeters.deposit_stock_steps   stock_seg:     96.
           6    rsmeters.deposit_time    stock_seg:     84.
          44    rsmeters.deposit_vstock_calls  stock_seg:    111.
          45    rsmeters.deposit_vstock_fails  stock_seg:    112.
          50    rsmeters.deposit_vtoc_map      stock_seg:    115.
          42    rsmeters.get_free_vtoce_calls  stock_seg:    109.
          11    rsmeters.high_thresh_detected  volmap_page:  118,
                                               stock_seg:     86.
          10    rsmeters.low_thresh_detected   stock_seg:     85.
          12    rsmeters.low_thresh_fails      stock_seg:     87.
          25    rsmeters.n_deposit_attempt     stock_seg:     98.
          26    rsmeters.n_pages_deposit_stock       stock_seg:     99.
          27    rsmeters.n_pages_deposit_volmap      stock_seg:    100.
          20    rsmeters.n_pages_withdraw_async      stock_seg:     93.
          17    rsmeters.n_pages_withdraw_stock      stock_seg:     92.
          30    rsmeters.n_v_deposit_attempts  stock_seg:    101.
          21    rsmeters.n_v_withdraw_attempts       stock_seg:     94.
          15    rsmeters.n_withdraw_attempt    stock_seg:     90.
          16    rsmeters.n_withdraw_range      stock_seg:     91.
          40    rsmeters.pc_deposit_calls      stock_seg:    107.
          41    rsmeters.pc_deposit_pages      stock_seg:    108.
          36    rsmeters.pc_deposit_time       stock_seg:    106.
          31    rsmeters.reset_os_calls  stock_seg:    102.
          32    rsmeters.reset_os_losses       stock_seg:    103.
          43    rsmeters.return_free_vtoce_call      stock_seg:    110.
          33    rsmeters.withdraw_calls  stock_seg:    104.
          51    rsmeters.withdraw_check_scav   stock_seg:    116.
          52    rsmeters.withdraw_conflict     stock_seg:    117.
          14    rsmeters.withdraw_stock_losses       stock_seg:     89.
          13    rsmeters.withdraw_stock_steps  stock_seg:     88.
          34    rsmeters.withdraw_time   stock_seg:    105.
          22    rsmeters.withdraw_volmap_steps       stock_seg:     95.
          46    rsmeters.withdraw_vstock_calls       stock_seg:    113.
          47    rsmeters.withdraw_vstock_fails       stock_seg:    114.
          66    rsmeters_size            stock_seg:     76.
                savex                    volmap_page:  182,  245,  330,  358,  494.
          60    save_stack               pxss_page_stack:      9.
         222    savx2_3                  pxss_page_stack:     19.
      777760    sdw_add_mask             page_info:     57.
           2    sdw_to_cmep.rl           page_info:     57.
          14    sdw_to_coreadd.rl        page_info:     57.
          10    seg_aste.usage           aste:         149.
          14    seg_aste_size            aste:         146.
           3    sst                      volmap_page:  189,  210,  249,  471,
                                         page_info:     18,   19,   20.
          75    stackp                   pxss_page_stack:      9.
          15    stack_size               pxss_page_stack:      6,    9.
         105    start_async_read         volmap_page:   40,  181.
         157    start_async_write        volmap_page:   41,  244,  353.
                stock                    volmap_page:  396,  500.
           0    stock_seg.meters         volmap_page:  117,  348,  395,  498,
                                         stock_seg:     18.
          72    stock_seg.n_stock_entries      stock_seg:     24.
          74    stock_seg.record_stock_arrayp  stock_seg:     25.
          66    stock_seg.record_stock_entries       stock_seg:     20.
          70    stock_seg.record_stock_size    stock_seg:     22.
          76    stock_seg.vtoce_stock_arrayp   stock_seg:     26.
          67    stock_seg.vtoce_stock_entries  stock_seg:     21.
          71    stock_seg.vtoce_stock_size     stock_seg:     23.
         100    stock_seg_size           stock_seg:     15.
         136    stock_temp               pxss_page_stack:     12.
         217    stock_temp_1             pxss_page_stack:     19.
         220    stock_temp_2             pxss_page_stack:     19.
                sys_info                 volmap_page:  311,  421.
         134    temp                     pxss_page_stack:     11.
         166    temp1                    pxss_page_stack:     15.
         167    temp2                    pxss_page_stack:     15.
         207    tmp_event                pxss_page_stack:     18.
         144    tmp_ev_channel           pxss_page_stack:     13.
         146    tmp_ev_message           pxss_page_stack:     13.
         202    tmp_ring                 pxss_page_stack:     17.
         165    total_steps              pxss_page_stack:     15.
                unlock_ptl               volmap_page:  472.
                unsavex                  volmap_page:  205,  267,  279,  341,  367,  390,  425,  516.
                unsavex_1                volmap_page:  207,  223,  265.
                unwire_write_wait        volmap_page:  157.
                volmap                   volmap_page:  120,  349.
                volmap_abs_seg           volmap_page:   45,  109.
          10    volmap_abs_seg_link      volmap_page:   45,  533,  534.
           0    VOLMAP_ASYNC_IDLE        volmap_page:  194,  459,  544,
                                         pvte:         138.
           1    VOLMAP_ASYNC_READ        volmap_page:  198,  253,
                                         pvte:         139.
           2    VOLMAP_ASYNC_WRITE       volmap_page:  258,
                                         pvte:         140.
                volmap_idle_wait_constant      volmap_page:  411.
                volmap_io_error          volmap_page:  515.
                volmap_page_async_error  volmap_page:  355.
                volmap_page_invalid_call       volmap_page:  192,  195,  537,  541,  545.
         224    volmap_page_temp         volmap_page:  186,  196,  201,  214,  247,  256,  261,  272,  304,  317,  495,  502,
                                         pxss_page_stack:     21.
         233    volmap_page_temp_1       volmap_page:  447,  449,  452,  462,  464,
                                         pxss_page_stack:     24.
         142    volmap_save_ptr          pxss_page_stack:     12.
         162    volmap_save_sdw          pxss_page_stack:     14.
                volmap_seg_page_faults   volmap_page:  210.
         140    volmap_temp              pxss_page_stack:     12.
         170    volmap_temp_1            pxss_page_stack:     15.
         171    volmap_temp_2            pxss_page_stack:     15.
           1    vtoce_stock.n_free_in_stock    stock_seg:     66.
           1    vtoce_stock.n_in_stock   stock_seg:     65.
           0    vtoce_stock.pvtep        stock_seg:     63.
           2    vtoce_stock.search_index       stock_seg:     69.
           3    vtoce_stock.stock        stock_seg:     71.
           2    vtoce_stock.target       stock_seg:     68.
         234    vtocx                    pxss_page_stack:     25.
                wire_wait                volmap_page:  105.
                withdraw_from_volmap     volmap_page:  349.
           2    write_entry              page_info:     31.
          56    write_volmap_page_unwired      volmap_page:   39,  141.
                wrong_async_state        volmap_page:  254.
         206    x5                       pxss_page_stack:     17.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
