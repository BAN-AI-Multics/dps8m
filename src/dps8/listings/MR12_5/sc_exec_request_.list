	COMPILATION LISTING OF SEGMENT sc_exec_request_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1018.0 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 /* sc_exec_request_ -- calls exec_com for the x request */
       10 /* format: style2,indcomtxt,idind30 */
       11 
       12 /**** Written 1984-11-01 BIM */
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(87-02-22,GDixon), approve(87-05-25,MCR7680),
       17*     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
       18*     Corrected coding standard violations.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 sc_exec_request_:
       22      procedure (SCI_ptr, SSI_ptr);
       23 
       24 	declare SCI_ptr		        pointer;
       25 	declare SSI_ptr		        pointer;	/* subsystem info -- unused for now */
       26 
       27 	declare cu_$make_entry_value	        entry (ptr, entry);
       28 	declare exec_com_		        entry (character (*), character (*), character (*), pointer,
       29 				        fixed binary (35));
       30 	declare pathname_		        entry (character (*), character (*)) returns (character (168));
       31 	declare sc_ipc_mask_$unmask	        entry (fixed binary);
       32 	declare sc_ipc_mask_$remask	        entry (fixed binary);
       33 	declare ssu_$arg_list_ptr	        entry (ptr, ptr);
       34 	declare ssu_$abort_line	        entry () options (variable);
       35 
       36 	declare code		        fixed bin (35);
       37 	declare sci_ptr		        pointer;
       38 	declare remask_count	        fixed bin;
       39 	declare saved_access_name	        char (32);
       40 
       41 	declare (addr, null, unspec)	        builtin;
       42 
       43 	declare cleanup		        condition;
       44 
       45 
       46 	sci_ptr = SCI_ptr;
       47 	sc_subsystem_info_ptr = SSI_ptr;
       48 	unspec (eci) = ""b;
       49 	eci.version = exec_com_info_version_1;
       50 	call ssu_$arg_list_ptr (sci_ptr, eci.arg_list_ptr);
       51 	eci.first_arg = 1;
       52 	call cu_$make_entry_value (null (), eci.execute_line);
       53 	call cu_$make_entry_value (null (), eci.eval_string);
       54 	call cu_$make_entry_value (null (), eci.ready);
       55 	call cu_$make_entry_value (null (), eci.set_ready_mode);
       56 	call cu_$make_entry_value (null (), eci.error);
       57 	code = 0;
       58 	remask_count = 0;
       59 	saved_access_name = sc_subsystem_info.access_control_name;
       60 	on cleanup
       61 	     begin;
       62 		call sc_ipc_mask_$remask (remask_count);
       63 		sc_subsystem_info.access_control_name = saved_access_name;
       64 	     end;
       65 	sc_subsystem_info.access_control_name = sc_stat_$exec_access_name;
       66 	call sc_ipc_mask_$unmask (remask_count);
       67 	call exec_com_ (pathname_ (sc_stat_$sysdir, "admin.ec"), "", "exec", addr (eci), code);
       68 	call sc_ipc_mask_$remask (remask_count);
       69 	sc_subsystem_info.access_control_name = saved_access_name;
       70 	if code ^= 0
       71 	then call ssu_$abort_line (sci_ptr, code, "admin.ec");
       72 	return;
       73 
  1     1 /*  BEGIN INCLUDE FILE ... exec_com_info.incl.pl1 */
  1     2 
  1     3 /* Information needed by exec_com_ */
  1     4 
  1     5 declare  exec_com_info_ptr		ptr;
  1     6 	
  1     7 declare  1 exec_com_info		aligned based (exec_com_info_ptr),
  1     8 	 2 version		fixed bin,
  1     9 	 2 arg_list_ptr		ptr,
  1    10 	 2 first_arg		fixed bin,
  1    11 	 2 execute_line		entry (ptr, fixed bin (21), fixed bin (35)),
  1    12 	 2 eval_string		entry (ptr, char (*), fixed bin, char (*) var, fixed bin (35)),
  1    13 	 2 ready			entry (),
  1    14            2 set_ready_mode		entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal),
  1    15 	 2 error			entry options (variable);
  1    16 
  1    17 declare  exec_com_info_version_1	fixed bin internal static init (1);
  1    18 
  1    19 /*   END INCLUDE FILE ... exec_com_info.incl.pl1 */
       74 
       75 	declare 1 eci		        aligned like exec_com_info;
       76 
  2     1 /*  BEGIN:   sc_stat_.incl.pl1			  *  *  *  *  *  */
  2     2 
  2     3 
  2     4 /****^  HISTORY COMMENTS:
  2     5*  1) change(87-02-04,GDixon), approve(87-05-25,MCR7690),
  2     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  2     7*     Add sc_stat_$vchn_requires_accept in support of DSA virtual channels.
  2     8*  2) change(87-02-04,GDixon), approve(87-05-25,MCR7680),
  2     9*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  2    10*     Reorganized by type of data to improve readability.
  2    11*                                                   END HISTORY COMMENTS */
  2    12 
  2    13 
  2    14 			      /* ACCESS NAMES		       */
  2    15 dcl (
  2    16  sc_stat_$exec_access_name,	      /* check MC access in an exec request    */
  2    17  sc_stat_$unidentified_access_name  /* check access if no one is logged in.  */
  2    18     ) char(32) ext static;
  2    19 
  2    20 		        /* PATHNAMES			       */
  2    21 dcl (
  2    22  sc_stat_$info_dir,	        /* admin info segs directory		       */
  2    23  sc_stat_$log_dir,	        /* as log segs directory		       */
  2    24  sc_stat_$mc_acs_dir,       /* message coordinator ACS segments (.mcacs) dir */
  2    25  sc_stat_$sysdir	        /* system control directory		       */
  2    26     ) char(168) ext static;
  2    27 
  2    28 		        /* OTHER CHAR STRINGS			       */
  2    29 dcl (
  2    30  sc_stat_$master_channel    /* Master TTY channel.		       */
  2    31     )  char(6) aligned ext static;
  2    32 
  2    33 			       /* LABELS			       */
  2    34 dcl (
  2    35  sc_stat_$admin_listener_exit_label, /* GO here to exit admin mode.  Set to  */
  2    36 			       /*    ssu_$null_label unless 	       */
  2    37 			       /*	   admin_listener is active.	       */
  2    38  sc_stat_$master_abort_label,	       /* GO here after fault that is not      */
  2    39 			       /*    attributable to a particular      */
  2    40 			       /*	   command.		       */
  2    41  sc_stat_$system_shutdown_label      /* GO here to shut down system	       */
  2    42     ) label variable ext static;
  2    43 
  2    44 			 /* POINTERS TO			       */
  2    45 dcl (
  2    46  sc_stat_$admin_log_iocb,	 /* IOCB for admin log		       */
  2    47  sc_stat_$admin_log_write_ptr, /* DATA for log_write_ calls on the admin log */
  2    48  sc_stat_$admin_sci_ptr,	 /* DATA ssu_ for terminal currently executing */
  2    49  sc_stat_$as_log_write_ptr,	 /* DATA for log_write_ calls on as log, used  */
  2    50 			 /*      by sys_log_.		       */
  2    51  sc_stat_$initzer_ttyp,	 /* ENT  mc_ate for initializer terminal       */
  2    52  sc_stat_$master_iocb,	 /* IOCB for "master_i/o"		       */
  2    53  sc_stat_$master_sci_ptr,	 /* DATA ssu_ (permanent) for system control   */
  2    54  sc_stat_$mc_ansp,		 /* HEAD of mc_anstbl		       */
  2    55  sc_stat_$mc_iocb,		 /* IOCB ptr for "mc_i/o"		       */
  2    56  sc_stat_$sv1_iocb,		 /* IOCB ptr for "severity1"		       */
  2    57  sc_stat_$sv2_iocb,		 /* IOCB ptr for "severity2"		       */
  2    58  sc_stat_$sv3_iocb		 /* IOCB ptr for "severity3"		       */
  2    59     ) ptr ext static;
  2    60 
  2    61 			   /* SWITCHES			       */
  2    62 dcl (
  2    63  sc_stat_$Go,		   /* TRUE after answering service is listening*/
  2    64  sc_stat_$Go_typed,		   /* TRUE immediately after 'go' is typed     */
  2    65  sc_stat_$Multics,		   /* TRUE after answering service started     */
  2    66  sc_stat_$Multics_typed,	   /* TRUE immediately after 'mult' is typed   */
  2    67  sc_stat_$Star_typed,	   /* TRUE if 'mult' and 'go' came from 'star' */
  2    68  sc_stat_$admin_listener_switch, /* TRUE if in the admin listener	       */
  2    69  sc_stat_$did_part1,	   /* TRUE if part 1 of system startup ec done */
  2    70  sc_stat_$did_part2,	   /* TRUE if part 2 of system startup ec done */
  2    71  sc_stat_$did_part3,	   /* TRUE if part 3 of system startup ec done */
  2    72  sc_stat_$mc_is_on,		   /* TRUE if message coordinator running      */
  2    73  sc_stat_$no_operator_login,	   /* TRUE if operator login not required, or  */
  2    74 			   /*	 if PNT not yet available.	       */
  2    75  sc_stat_$shutdown_typed,	   /* TRUE if 'shutdown' command in progress.  */
  2    76  sc_stat_$test_mode,	   /* TRUE if in test environment	       */
  2    77  sc_stat_$vchn_requires_accept   /* TRUE if vchn may only be used if accepted*/
  2    78 			   /*      by operator signed on system console*/
  2    79     ) bit(1) aligned ext static;
  2    80 
  2    81 
  2    82 /*  END OF:  sc_stat_.incl.pl1			  *  *  *  *  *  */
       77 
       78 
  3     1 /*  BEGIN:   sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
  3     2 
  3     3 /* format:style3,idind30 */
  3     4 
  3     5 /* Created  1984-10-24  BIM */
  3     6 /* Modified 1985-01-07, BIM: access control flags that track admin and X */
  3     7 /* Modified 1985-02-18, E. Swenson to save away abort_line procedure. */
  3     8 
  3     9 
  3    10 /****^  HISTORY COMMENTS:
  3    11*  1) change(87-02-17,GDixon), approve(87-07-03,MCR7680),
  3    12*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  3    13*     Correct formatting problems.  Add sc_subsystem_info.flags.dont_mask_calls
  3    14*     switch.
  3    15*  2) change(87-07-03,GDixon), approve(87-07-03,MCR7680),
  3    16*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  3    17*     Removed dont_mask_calls flag.  It is no longer needed to correctly perform
  3    18*     masking on a per-request basis.
  3    19*                                                   END HISTORY COMMENTS */
  3    20 
  3    21 
  3    22 declare	sc_subsystem_info_ptr	pointer;
  3    23 declare	1 sc_subsystem_info		aligned based (sc_subsystem_info_ptr),
  3    24 	  2 restriction_flags	bit (36) aligned,	/* copied from mc atep or fabricated */
  3    25 	  2 flags			aligned,
  3    26 	    3 no_real_tty		bit (1) unaligned,	/* for sc_admin_command_ */
  3    27 	    3 print_ready		bit (1) unal,	/* on for all except the system console,	*/
  3    28 						/*  instructs sc_process_command_line_ to deal	*/
  3    29 						/*  with the prompt				*/
  3    30 	    3 the_system_console	bit (1) unal,	/* syserr messages are printed here (but console	*/
  3    31 						/*  recover doesn't try to fix this) copied here	*/
  3    32 						/*  from the mc_ate to save other looking in there*/
  3    33 	    3 printer_offed		bit (1) unal,	/* suppress logging */
  3    34 	    3 pad			bit (32) unaligned,
  3    35 	  2 source_name		char (32) unaligned,
  3    36 	  2 area_ptr		pointer,
  3    37 	  2 mc_atep		pointer,		/* needed to play with attachments */
  3    38 	  2 real_iocb		pointer,		/* for sc_signal_io_handler_ */
  3    39 	  2 hangup_entry		entry (pointer) variable,
  3    40 						/* called on io_no_permission. */
  3    41 	  2 real_execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
  3    42 	  2 real_locate_request	entry (ptr, char (*), ptr, fixed bin (35)),
  3    43 	  2 access_control_name	char (32) unaligned,
  3    44 	  2 real_invoke_request	entry,		/* since MR11 ssu_ lacks the ability to	abort a	*/
  3    45 						/*  single request, we have an invoke_request that*/
  3    46 						/*  handles a condition to unwind the request	*/
  3    47 	  2 abort_request_label	label,		/* go here (nonlocally) to unwind a single request */
  3    48 	  2 real_abort_line		entry options (variable);
  3    49 
  3    50 declare	sc_ss_area		area based (sc_subsystem_info.area_ptr);
  3    51 
  3    52 /* The following defines the user flags for the request table. */
  3    53 
  3    54 declare	sc_rf_ptr			pointer;
  3    55 declare	1 sc_request_flags		unaligned based (sc_rf_ptr),
  3    56 	  2 dont_parse_arguments	bit,		/* reply, intercom */
  3    57 	  2 obsolete		bit,		/* warn opr to not use it */
  3    58 	  2 dont_mask_calls		bit,		/* this runs without masking ev calls */
  3    59 	  2 requires_as		bit,		/* not before AS */
  3    60 	  2 requires_no_as		bit,		/* only before AS */
  3    61 	  2 complete_disks_first	bit,		/* try to mount disks */
  3    62 	  2 no_login_needed		bit,		/* sign_on */
  3    63 	  2 pad			bit (5),
  3    64 	  2 restriction_type	fixed bin (6) unsigned;
  3    65 						/* index into restriction flag string */
  3    66 
  3    67 
  3    68 /*  END OF:  sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
       79 
       80      end sc_exec_request_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0806.8  sc_exec_request_.pl1              >spec>install>1112>sc_exec_request_.pl1
74           1    04/13/82  1620.2  exec_com_info.incl.pl1            >ldd>include>exec_com_info.incl.pl1
77           2    08/06/87  0913.5  sc_stat_.incl.pl1                 >ldd>include>sc_stat_.incl.pl1
79           3    08/06/87  0913.5  sc_subsystem_info_.incl.pl1       >ldd>include>sc_subsystem_info_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
SCI_ptr                                parameter       pointer                  dcl 24 ref 21 46
SSI_ptr                                parameter       pointer                  dcl 25 ref 21 47
access_control_name      34            based           char(32)                 level 2 packed packed unaligned dcl 3-23 set ref 59
                                                                                  63* 65* 69*
addr                                                   builtin function         dcl 41 ref 67 67
arg_list_ptr              2     000124 automatic       pointer                  level 2 dcl 75 set ref 50*
cleanup                         000116 stack reference condition                dcl 43 ref 60
code                            000100 automatic       fixed bin(35,0)          dcl 36 set ref 57* 67* 70 70*
cu_$make_entry_value            000010 constant        entry                    external dcl 27 ref 52 53 54 55 56
eci                             000124 automatic       structure                level 1 dcl 75 set ref 48* 67 67
error                    26     000124 automatic       entry variable           level 2 dcl 75 set ref 56*
eval_string              12     000124 automatic       entry variable           level 2 dcl 75 set ref 53*
exec_com_                       000012 constant        entry                    external dcl 28 ref 67
exec_com_info                          based           structure                level 1 dcl 1-7
exec_com_info_version_1                constant        fixed bin(17,0)          initial dcl 1-17 ref 49
execute_line              6     000124 automatic       entry variable           level 2 dcl 75 set ref 52*
first_arg                 4     000124 automatic       fixed bin(17,0)          level 2 dcl 75 set ref 51*
null                                                   builtin function         dcl 41 ref 52 52 53 53 54 54 55 55 56 56
pathname_                       000014 constant        entry                    external dcl 30 ref 67 67
ready                    16     000124 automatic       entry variable           level 2 dcl 75 set ref 54*
remask_count                    000104 automatic       fixed bin(17,0)          dcl 38 set ref 58* 62* 66* 68*
saved_access_name               000105 automatic       char(32)                 packed unaligned dcl 39 set ref 59* 63 69
sc_ipc_mask_$remask             000020 constant        entry                    external dcl 32 ref 62 68
sc_ipc_mask_$unmask             000016 constant        entry                    external dcl 31 ref 66
sc_stat_$exec_access_name       000026 external static char(32)                 packed unaligned dcl 2-15 ref 65
sc_stat_$sysdir                 000030 external static char(168)                packed unaligned dcl 2-21 set ref 67* 67*
sc_subsystem_info                      based           structure                level 1 dcl 3-23
sc_subsystem_info_ptr           000156 automatic       pointer                  dcl 3-22 set ref 47* 59 63 65 69
sci_ptr                         000102 automatic       pointer                  dcl 37 set ref 46* 50* 70*
set_ready_mode           22     000124 automatic       entry variable           level 2 dcl 75 set ref 55*
ssu_$abort_line                 000024 constant        entry                    external dcl 34 ref 70
ssu_$arg_list_ptr               000022 constant        entry                    external dcl 33 ref 50
unspec                                                 builtin function         dcl 41 set ref 48*
version                         000124 automatic       fixed bin(17,0)          level 2 dcl 75 set ref 49*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
exec_com_info_ptr                      automatic       pointer                  dcl 1-5
sc_request_flags                       based           structure                level 1 packed packed unaligned dcl 3-55
sc_rf_ptr                              automatic       pointer                  dcl 3-54
sc_ss_area                             based           area(1024)               dcl 3-50
sc_stat_$Go                            external static bit(1)                   dcl 2-62
sc_stat_$Go_typed                      external static bit(1)                   dcl 2-62
sc_stat_$Multics                       external static bit(1)                   dcl 2-62
sc_stat_$Multics_typed                 external static bit(1)                   dcl 2-62
sc_stat_$Star_typed                    external static bit(1)                   dcl 2-62
sc_stat_$admin_listener_exit_label     external static label variable           dcl 2-34
sc_stat_$admin_listener_switch         external static bit(1)                   dcl 2-62
sc_stat_$admin_log_iocb                external static pointer                  dcl 2-45
sc_stat_$admin_log_write_ptr           external static pointer                  dcl 2-45
sc_stat_$admin_sci_ptr                 external static pointer                  dcl 2-45
sc_stat_$as_log_write_ptr              external static pointer                  dcl 2-45
sc_stat_$did_part1                     external static bit(1)                   dcl 2-62
sc_stat_$did_part2                     external static bit(1)                   dcl 2-62
sc_stat_$did_part3                     external static bit(1)                   dcl 2-62
sc_stat_$info_dir                      external static char(168)                packed unaligned dcl 2-21
sc_stat_$initzer_ttyp                  external static pointer                  dcl 2-45
sc_stat_$log_dir                       external static char(168)                packed unaligned dcl 2-21
sc_stat_$master_abort_label            external static label variable           dcl 2-34
sc_stat_$master_channel                external static char(6)                  dcl 2-29
sc_stat_$master_iocb                   external static pointer                  dcl 2-45
sc_stat_$master_sci_ptr                external static pointer                  dcl 2-45
sc_stat_$mc_acs_dir                    external static char(168)                packed unaligned dcl 2-21
sc_stat_$mc_ansp                       external static pointer                  dcl 2-45
sc_stat_$mc_iocb                       external static pointer                  dcl 2-45
sc_stat_$mc_is_on                      external static bit(1)                   dcl 2-62
sc_stat_$no_operator_login             external static bit(1)                   dcl 2-62
sc_stat_$shutdown_typed                external static bit(1)                   dcl 2-62
sc_stat_$sv1_iocb                      external static pointer                  dcl 2-45
sc_stat_$sv2_iocb                      external static pointer                  dcl 2-45
sc_stat_$sv3_iocb                      external static pointer                  dcl 2-45
sc_stat_$system_shutdown_label         external static label variable           dcl 2-34
sc_stat_$test_mode                     external static bit(1)                   dcl 2-62
sc_stat_$unidentified_access_name      external static char(32)                 packed unaligned dcl 2-15
sc_stat_$vchn_requires_accept          external static bit(1)                   dcl 2-62

NAME DECLARED BY EXPLICIT CONTEXT.
sc_exec_request_                000022 constant        entry                    external dcl 21

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       476         530     337         506
Length       764     337        32         217     136           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sc_exec_request_                    200 external procedure  is an external procedure.  
on unit on line 60                   68 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sc_exec_request_         000100 code                        sc_exec_request_
                         000102 sci_ptr                     sc_exec_request_
                         000104 remask_count                sc_exec_request_
                         000105 saved_access_name           sc_exec_request_
                         000124 eci                         sc_exec_request_
                         000156 sc_subsystem_info_ptr       sc_exec_request_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          enable_op           ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$make_entry_value          exec_com_                     pathname_                     sc_ipc_mask_$remask
sc_ipc_mask_$unmask           ssu_$abort_line               ssu_$arg_list_ptr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sc_stat_$exec_access_name     sc_stat_$sysdir




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     21 000016        46 000027        47 000033        48 000036        49 000041        50 000043        51 000053
     52 000055        53 000070        54 000103        55 000116        56 000131        57 000144        58 000145
     59 000146        60 000152        62 000166        63 000175        64 000202        65 000203        66 000211
     67 000217        68 000276        69 000305        70 000311        72 000336


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
