ASSEMBLY LISTING OF SEGMENT >spec>temp>bce>40-00>net_ring1_admin_.alm            
ASSEMBLED ON:	06/04/84  1240.4 mst Mon
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  "  ******************************************************
                                     2  "  *                                                    *
                                     3  "  *                                                    *
                                     4  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                     5  "  * Technology and Honeywell Information Systems, Inc. *
                                     6  "  *                                                    *
                                     7  "  *                                                    *
                                     8  "  ******************************************************
                                     9  
                                    10  
    000000                          11            name	net_ring1_admin_
                                    12  
                                    13  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    14  "
                                    15  "      This is a gate into ring 1 to perform administrative functions for
                                    16  " the ARPA Network interface.
                                    17  "
                                    18  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    19  "
                                    20  " Originally created by D. M. Wells, October, 1976, from old net_admin_
                                    21  " Last modified by W. Olin Sibert 02/01/79 to convert from mexp to ALM.
                                    22  "
                                    23  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    24  
                                    25            include gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  
                                   1-7  " This file contains several macros used when generating gate segments.
                                   1-8  " The major macros that are defined are:
                                   1-9  "
                                  1-10  "	gate_info		general setup code for normal gates
                                  1-11  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-12  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-13  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-14  "	gate		to define a normal gate
                                  1-15  "	hgate		to define a hardcore gate
                                  1-16  "	fgate		to define a fast hardcore gate
                                  1-17  "
                                  1-18  
                                  1-19  
    000000                        1-20  	maclist	off
                                  1-21  
                                  1-22  
                                  1-23  " HGATE - define a hardcore gate entry
                                  1-24  "
                                  1-25  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-26  "
                                  1-27  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-28  " is nonzero, the number of arguments passed to gatename must be
                                  1-29  " equal to args.  When gatename is called, it will in turn call
                                  1-30  " procedure$entry.
                                  1-31  "
                                  1-32  
                                  1-33  macro	hgate
                              1   1-34  	gentry	&1,&4*2,&1.t
                              2   1-35  	tsx2	.setup
                              3   1-36  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-37  &]	ldi	=0,dl
                              5   1-38  	short_call &2$&3(ap|0)
                              6   1-39  	eppbp	lp|&1.t
                              7   1-40  	tra	.return_code
                              8   1-41  	maclist	restore
                              9   1-42  	use	linkage
                             10   1-43  	even
                             11   1-44  	maclist	on,save
                             12   1-45  &1.t:
                             13   1-46  	bss	,gate_entry_data_size
                             14   1-47  
                             15   1-48  	maclist	restore
                             16   1-49  &end
                                  1-50  
                                  1-51  
                                  1-52  " FGATE - define a fast hardcore gate
                                  1-53  "
                                  1-54  "	fgate	gatename,procedure,entry
                                  1-55  "
                                  1-56  
                                  1-57  macro	fgate
                              1   1-58  	gentry	&1,0,0
                              2   1-59  	ldi	=0,dl
                              3   1-60  	epplp	.my_lp,*
                              4   1-61  	tra	&2$&3
                              5   1-62  
                              6   1-63  	maclist	off
                              7   1-64  &end
                                  1-65  
                                  1-66  
                                  1-67  " GATE - define a normal gate entry
                                  1-68  "
                                  1-69  "	gate	gatename,procedure,entry,args
                                  1-70  "
                                  1-71  
                                  1-72  macro	gate
                              1   1-73  	gentry	&1,&4*2,0
                              2   1-74  	tsx2	.setup
                              3   1-75  	ldi	=0,dl
                              4   1-76  	short_call &2$&3(ap|0)
                              5   1-77  	return
                              6   1-78  
                              7   1-79  	maclist	restore
                              8   1-80  &end
                                  1-81  
                                  1-82  
                                  1-83  
                                  1-84  macro	gentry
                              1   1-85  	maclist	on,save
                              2   1-86  	segdef	&1
                              3   1-87  	maclist	restore
                              4   1-88  	use	transfer_vector
                              5   1-89  	maclist	on,save
                              6   1-90  &1:
                              7   1-91  	tra	&1.e
                              8   1-92  	maclist	restore
                              9   1-93  	use	main
                             10   1-94  	maclist	on,save
                             11   1-95  	zero	&2,&3
                             12   1-96  &1.e:
                             13   1-97  &end
                                  1-98  
                                  1-99  
                                 1-100  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-101  
                                 1-102  macro	hardcore_gate_info
                              1  1-103  	maclist	on,save
                              2  1-104  	name	&1
                              3  1-105  
                              4  1-106  	include	stack_header
                              5  1-107  
                              6  1-108  	include	stack_frame
                              7  1-109  	include	gate_data
                              8  1-110  
                              9  1-111  	maclist	restore
                             10  1-112  	eject
                             11  1-113  
                             12  1-114  	tempd	.temp
                             13  1-115  	tempd	.label_variable(0)
                             14  1-116  	tempd	.time1,.time2
                             15  1-117  	tempd	.unwinder_arglist(0)
                             16  1-118  	tempd	.on_unit(5)
                             17  1-119  	temp	.pf,.entryp
                             18  1-120  	tempd	.vfl_arglist(2)
                             19  1-121  	tempd	.mcptr
                             20  1-122  
                             21  1-123  	use	transfer_vector
                             22  1-124  	equ	.tv_begin,*
                             23  1-125  
                             24  1-126  	tra	.actor
                             25  1-127  
                             26  1-128  	use	tv_end
                             27  1-129  	entrybound
                             28  1-130  
                             29  1-131  	segdef	.tv_end
                             30  1-132  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-133  
                             32  1-134  	use	main
                             33  1-135  
                             34  1-136  	segdef	.my_lp
                             35  1-137  	even
                             36  1-138  .my_lp:	bss	,2
                             37  1-139  
                             38  1-140  	join	/text/transfer_vector,tv_end,main
                             39  1-141  
                             40  1-142  	use	linkage
                             41  1-143  	join	/link/linkage
                             42  1-144  
                             43  1-145  	use	main
                             44  1-146  
                             45  1-147  	maclist	restore
                             46  1-148  	eject
                             47  1-149  
                             48  1-150  .actor:	epplp	.my_lp,*
                             49  1-151  	maclist	restore
                             50  1-152  	gate_actor
                             51  1-153  
                             52  1-154  
                             53  1-155  
                             54  1-156  .setup:	push
                             55  1-157  	epplp	.my_lp,*
                             56  1-158  	sprilp	sp|stack_frame.lp_ptr
                             57  1-159  
                             58  1-160  	maclist	restore
                             59  1-161  	gcheck
                             60  1-162  
                             61  1-163  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-164  	rccl	sys_info$clock_,*	calculate times
                             63  1-165  	sbaq	pds$cpu_time
                             64  1-166  	staq	.time1
                             65  1-167  	sbaq	pds$virtual_delta
                             66  1-168  	staq	.time2
                             67  1-169  	lda	pds$page_waits
                             68  1-170  	sta	.pf
                             69  1-171  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-172  	tra	0,2
                             71  1-173  
                             72  1-174  	maclist	restore
                             73  1-175  	eject
                             74  1-176  
                             75  1-177  .return_code:
                             76  1-178  
                             77  1-179  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-180  	rccl	sys_info$clock_,*	calculate times
                             79  1-181  	sbaq	pds$cpu_time
                             80  1-182  	staq	.temp
                             81  1-183  	sbaq	.time1
                             82  1-184  	adaq	bp|gate_entry_data.cpu_time
                             83  1-185  	staq	bp|gate_entry_data.cpu_time
                             84  1-186  	ldaq	.temp
                             85  1-187  	sbaq	pds$virtual_delta
                             86  1-188  	sbaq	.time2
                             87  1-189  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-190  	staq	bp|gate_entry_data.vcpu_time
                             89  1-191  	lda	pds$page_waits
                             90  1-192  	sbla	.pf
                             91  1-193  	asa	bp|gate_entry_data.page_waits
                             92  1-194  	aos	bp|gate_entry_data.calls
                             93  1-195  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-196  
                             95  1-197  			" Poll for ring alarms
                             96  1-198  	sra	.temp	Borrow from time calc
                             97  1-199  	szn	.temp	Zero?
                             98  1-200  	tnz	.ring_alarm
                             99  1-201  .return_code_return:
                            100  1-202  	return
                            101  1-203  
                            102  1-204  .ring_alarm:		" perhaps we can handle without faults?
                            103  1-205  
                            104  1-206  	aos	bp|gate_entry_data.ring_alarms
                            105  1-207  	epp1	sp|stack_frame.prev_sp,*
                            106  1-208  	epaq	pr1|stack_frame.return_ptr,*
                            107  1-209  	ana	7,dl	" ring number to which we return
                            108  1-210  	tze	.return_code_return " don't poll if we're staying in ring 0
                            109  1-211  	stz	.temp	" return argument for ring_alarm$poll
                            110  1-212  	ldaq	.one_arg_header
                            111  1-213  	staq	.ring_alarm_arg_list
                            112  1-214  	epp1	.temp
                            113  1-215  	spri1	.ring_alarm_arg_list+2
                            114  1-216  	eppap	.ring_alarm_arg_list
                            115  1-217  	short_call ring_alarm$poll
                            116  1-218  	szn	.temp
                            117  1-219  	tze	.return_code_return
                            118  1-220  	eppsp	sp|stack_frame.prev_sp,*
                            119  1-221  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            120  1-222  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            121  1-223  	spri1	sb|stack_header.stack_end_ptr
                            122  1-224  " Leave SB as stack_0, so pxss can get to operators.
                            123  1-225  	tra	pxss$pre_empt_poll
                            124  1-226  
                            125  1-227  	tempd	.ring_alarm_arg_list(2)
                            126  1-228  	even
                            127  1-229  .one_arg_header:
                            128  1-230  	vfd	17/2,1/0,18/4
                            129  1-231  	vfd	18/0,18/0
                            130  1-232  
                            131  1-233  
                            132  1-234  	maclist	restore
                            133  1-235  	eject
                            134  1-236  	maclist	restore
                            135  1-237  &end
                                 1-238  
                                 1-239  
                                 1-240  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-241  "			put this after the last hgate macro
                                 1-242  
                                 1-243  macro	bad_dir_handler
                              1  1-244  	maclist	on,save
                              2  1-245  
                              3  1-246  	include	on_unit
                              4  1-247  
                              5  1-248  	use	transfer_vector
                              6  1-249  .handler_entry:
                              7  1-250  	tra	.handler
                              8  1-251  .handler_restart_entry:
                              9  1-252  	tra	.handler_restart_point
                             10  1-253  
                             11  1-254  	use	main
                             12  1-255  .set_dir_trap:
                             13  1-256  	stx0	.entryp		save for restart
                             14  1-257  
                             15  1-258  	mlr	(),(pr),fill(000)
                             16  1-259  	desc9a	0,0
                             17  1-260  	desc9a	.on_unit,10*4
                             18  1-261  	eppbp	.bad_dir_name
                             19  1-262  	spribp	.on_unit+on_unit.name
                             20  1-263  	eppbp	.handler_entry
                             21  1-264  	spribp	.on_unit+on_unit.body
                             22  1-265  	lxl1	.bad_dir_desc
                             23  1-266  	sxl1	.on_unit+on_unit.size
                             24  1-267  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-268  	sbla	sp|0,du		.. make rel to sp
                             26  1-269  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-270  	lda	stack_frame.condition_bit,dl
                             28  1-271  	orsa	sp|stack_frame.flag_word
                             29  1-272  	tra	0,0
                             30  1-273  
                             31  1-274  	string	bad_dir_
                             32  1-275  
                             33  1-276  
                             34  1-277  
                             35  1-278  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-279  	cana	-1,dl		check ring number in AL
                             37  1-280  	tze	*+2
                             38  1-281  	zero	0		go way kid you bother me
                             39  1-282  
                             40  1-283  	push			" ok, we like the call
                             41  1-284  	epplp	.my_lp,*
                             42  1-285  	ldx0	ap|0		get display
                             43  1-286  	eppbp	ap|2,0*
                             44  1-287  	lda	bp|stack_frame.prev_sp
                             45  1-288  	cana	=o700000,dl	from another ring?
                             46  1-289  	tze	.continue_signal	if not, back to signal_
                             47  1-290  	eppap	ap|2,*		Get mcptr
                             48  1-291  	eppap	ap|0,*		..
                             49  1-292  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-293  	spribp	.label_variable+2
                             51  1-294  	eppbp	.handler_restart_entry
                             52  1-295  	spribp	.label_variable
                             53  1-296  	eppbp	.label_variable
                             54  1-297  	spribp	.unwinder_arglist+2
                             55  1-298  	fld	=1b24,dl
                             56  1-299  	staq	.unwinder_arglist
                             57  1-300  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-301  
                             59  1-302  .continue_signal:
                             60  1-303  	lda	=o400000,du	"1"b
                             61  1-304  	sta	ap|10,*		set continue bit
                             62  1-305  	return
                             63  1-306  
                             64  1-307  .handler_restart_point:
                             65  1-308  	epaq	sp|0		check that call came from ring 0
                             66  1-309  	cana	-1,dl
                             67  1-310  	tze	*+2
                             68  1-311  	zero	1
                             69  1-312  	epplp	.my_lp,*
                             70  1-313  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-314  	ansa	sp|stack_frame.flag_word
                             72  1-315  	eppbp	.mcptr
                             73  1-316  	spribp	.vfl_arglist+2
                             74  1-317  	fld	=1b24,dl
                             75  1-318  	staq	.vfl_arglist
                             76  1-319  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-320  	ldx0	.entryp
                             78  1-321  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-322  	tra	0,0		retry the call
                             80  1-323  
                             81  1-324  	maclist	restore
                             82  1-325  	eject
                             83  1-326  	maclist	restore
                             84  1-327  &end
                                 1-328  
                                 1-329  
                                 1-330  " GATE_INFO - general info for non-hardcore gates
                                 1-331  
                                 1-332  macro	gate_info
                              1  1-333  	maclist	on,save
                              2  1-334  	use	transfer_vector
                              3  1-335  	tra	.actor
                              4  1-336  
                              5  1-337  	use	tv_end
                              6  1-338  	entrybound
                              7  1-339  
                              8  1-340  	use	main
                              9  1-341  	join	/text/transfer_vector,tv_end,main
                             10  1-342  
                             11  1-343  	maclist	restore
                             12  1-344  	eject
                             13  1-345  
                             14  1-346  .actor:	getlp
                             15  1-347  	maclist	restore
                             16  1-348  	gate_actor
                             17  1-349  
                             18  1-350  	maclist	restore
                             19  1-351  	eject
                             20  1-352  
                             21  1-353  .setup:	push
                             22  1-354  	getlp
                             23  1-355  	maclist	restore
                             24  1-356  	gcheck
                             25  1-357  	tra	0,2
                             26  1-358  
                             27  1-359  	maclist	restore
                             28  1-360  	eject
                             29  1-361  
                             30  1-362  	maclist	restore
                             31  1-363  &end
                                 1-364  
                                 1-365  
                                 1-366  " Macro to generate gate actor.
                                 1-367  
                                 1-368  macro	gate_actor
                              1  1-369  	maclist	on,save
                              2  1-370  	eppbp	ap|2,*
                              3  1-371  	lda	bp|-1		get length of string
                              4  1-372  	tze	.return_name	zero length => get name
                              5  1-373  
                              6  1-374  	adla	1,dl		include length of acc
                              7  1-375  	stz	ap|4,*
                              8  1-376  	tsx0	.search_defs
                              9  1-377  
                             10  1-378  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-379  	desc9a	bp|-1(3),al
                             12  1-380  	desc9a	bb|0,al
                             13  1-381  	tnz	.next_def
                             14  1-382  
                             15  1-383  	lda	ab|1,2		return location
                             16  1-384  	arl	18
                             17  1-385  	sta	ap|4,*
                             18  1-386  
                             19  1-387  	short_return
                             20  1-388  
                             21  1-389  .return_name:
                             22  1-390  	lxl3	ap|4,*		get location
                             23  1-391  	tsx0	.search_defs
                             24  1-392  
                             25  1-393  	cmpx3	ab|1,2		compare location
                             26  1-394  	tnz	.next_def
                             27  1-395  
                             28  1-396  	lda	bb|0		get length of name
                             29  1-397  	arl	27
                             30  1-398  	sta	bp|-1		set length of varying string
                             31  1-399  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-400  	desc9a	bb|0(1),al
                             33  1-401  	desc9a	bp|0,al
                             34  1-402  
                             35  1-403  	short_return
                             36  1-404  
                             37  1-405  .search_defs:
                             38  1-406  	eax2	0
                             39  1-407  	eppab	lp|0,*		ab -> defs
                             40  1-408  .defs_loop:
                             41  1-409  	lxl1	ab|1,2		get class and flags
                             42  1-410  	cmpx1	=o400000,du	must be class 0
                             43  1-411  	tnz	.next_def
                             44  1-412  
                             45  1-413  	ldx7	ab|2,2
                             46  1-414  	eppbb	ab|0,7		bb -> name
                             47  1-415  	tra	0,0		test definition
                             48  1-416  .next_def:
                             49  1-417  	ldx2	ab|0,2		chain to next def
                             50  1-418  	tnz	.defs_loop
                             51  1-419  
                             52  1-420  	short_return
                             53  1-421  
                             54  1-422  &end
                                 1-423  
                                 1-424  
                                 1-425  " Miscellaneous macros.
                                 1-426  
                                 1-427  macro	gcheck
                              1  1-428  	maclist	on,save
                              2  1-429  	ldx1	-2,2		get number of args expected
                              3  1-430  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-431  	cmpx1	ap|0		compare against number given
                              5  1-432  	tze	.no_gate_error	args match, call procedure
                              6  1-433  
                              7  1-434  	call	signal_$signal_(signal_arglist)
                              8  1-435  	oct	0
                              9  1-436  
                             10  1-437  	even
                             11  1-438  signal_arglist:
                             12  1-439  	zero	2,4
                             13  1-440  	zero	2,0
                             14  1-441  	arg	.gate_errorname
                             15  1-442  	arg
                             16  1-443  	arg	.gate_errordesc
                             17  1-444  	arg
                             18  1-445  
                             19  1-446  	string	gate_error
                             20  1-447  
                             21  1-448  
                             22  1-449  .no_gate_error:
                             23  1-450  &end
                                 1-451  
                                 1-452  macro	string
                              1  1-453  .&1name:
                              2  1-454  	aci	"&1"
                              3  1-455  .&1desc:
                              4  1-456  	vfd	o9/525,o27/&l1
                              5  1-457  
                              6  1-458  &end
                                 1-459  
                                 1-460  macro	eject
                              1  1-461  	maclist	on,save
                              2  1-462  
                              3  1-463  &end
                                 1-464  
                                 1-465  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-466  
                                 1-467  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    26  
                                    27            include stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                        000004     2-8  	equ	stack_header.old_lot_ptr,4		obsolete ptr to lot
                        000006     2-9  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-10  
                        000010    2-11  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-12  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-13  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-14  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-15  	equ	stack_header.cur_lot_size,11		number of words (entries) in lot
                                  2-16  
                        000014    2-17  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-18  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-19  
                        000020    2-20  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-21  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-22  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-23  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-24  
                        000030    2-25  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-26  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-27  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-28  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-29  
                        000040    2-30  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-31  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-32  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-33  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-34  
                        000050    2-35  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-36  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-37  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-38  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-39  
                        000060    2-40  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-41  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-42  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-43  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-44  	equ	stack_header.task_data_ptr,56
                                  2-45  
                        000072    2-46  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000074    2-47  	equ	stack_header.in_trace,60		trace antirecurse bit
                                  2-48  
                        000100    2-49  	equ	stack_header_end,64			length of stack header
                                  2-50  
                                  2-51  
                                  2-52  
                                  2-53  
                        000000    2-54  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-55  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-56  
                                  2-57  "	The  following constant is an offset within the  pl1  operators table.
                                  2-58  "	It  references a  transfer vector table.
                                  2-59  
                        000551    2-60  	bool	tv_offset,551
                                  2-61  
                                  2-62  
                                  2-63  "	The  following constants are offsets within this transfer vector table.
                                  2-64  
                        001170    2-65  	equ	call_offset,tv_offset+271
                        001171    2-66  	equ	push_offset,tv_offset+272
                        001172    2-67  	equ	return_offset,tv_offset+273
                        001173    2-68  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-69  	equ	entry_offset,tv_offset+275
                                  2-70  
                                  2-71  
                                  2-72  " 	END INCLUDE FILE stack_header.incl.alm
                                    28            include stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                    29  
                                    30            gate_info
                                        	use	transfer_vector
    000000  0a   000016 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000016  aa  7 00046 2721 20         .actor:	getlp
    000017  aa  0 00002 3521 20         	eppbp	ap|2,*
    000020  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000021  0a   000035 6000 00         	tze	.return_name	zero length => get name
                                        
    000022  aa   000001 0350 07         	adla	1,dl		include length of acc
    000023  aa  0 00004 4501 20         	stz	ap|4,*
    000024  0a   000050 7000 00         	tsx0	.search_defs
                                        
    000025  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000026  aa   277777 600005          	desc9a	bp|-1(3),al
    000027  aa   300000 000005          	desc9a	bb|0,al
    000030  0a   000060 6010 00         	tnz	.next_def
                                        
    000031  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000032  aa   000022 7710 00         	arl	18
    000033  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000034  aa  7 00044 7101 20         	short_return
                                        
    000035                              .return_name:
    000035  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000036  0a   000050 7000 00         	tsx0	.search_defs
                                        
    000037  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000040  0a   000060 6010 00         	tnz	.next_def
                                        
    000041  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000042  aa   000033 7710 00         	arl	27
    000043  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000044  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000045  aa   300000 200005          	desc9a	bb|0(1),al
    000046  aa   200000 000005          	desc9a	bp|0,al
                                        
    000047  aa  7 00044 7101 20         	short_return
                                        
    000050                              .search_defs:
    000050  aa   000000 6220 00         	eax2	0
    000051  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000052                              .defs_loop:
    000052  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000053  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000054  0a   000060 6010 00         	tnz	.next_def
                                        
    000055  aa  1 00002 2271 12         	ldx7	ab|2,2
    000056  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000057  aa   000000 7100 10         	tra	0,0		test definition
    000060                              .next_def:
    000060  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000061  0a   000052 6010 00         	tnz	.defs_loop
                                        
    000062  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000063  aa   000060 6270 00         .setup:	push
    000064  aa  7 00040 2721 20
    000065  aa  7 00046 2721 20         	getlp
    000066  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000067  0a   000114 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000070  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000071  0a   000114 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000072  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000073  0a   000102 3500 00
    000074  4a  4 00010 3521 20
    000075  aa  6 00040 7531 00
    000076  aa  7 00036 6701 20
    000077  aa  6 00000 1731 00
    000100  aa  6 00040 0731 00
    000101  aa   000000 000000          	oct	0
                                        
                                        	even
    000102                              signal_arglist:
    000102  aa   000002 000004          	zero	2,4
    000103  aa   000002 000000          	zero	2,0
    000104  0a   000110 0000 00         	arg	.gate_errorname
    000105  aa   000000 0000 00         	arg
    000106  0a   000113 0000 00         	arg	.gate_errordesc
    000107  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000110                              .gate_errorname:
    000110  aa  147 141 164 145         	aci	"gate_error"
    000111  aa  137 145 162 162
    000112  aa  157 162 000 000
    000113                              .gate_errordesc:
    000113  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000114                              .no_gate_error:
    000114  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    31  
                                    32  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    33                      "      Gate entries to allow maintenance of the Network
                                    34                      " host table.
                                    35                      " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    36  
                                    37            gate	add_host,nhi_update_,add_host,2
                        000001          	segdef	add_host
    000001                              add_host:
    000001  0a   000116 7100 00         	tra	add_host.e
    000115  aa   000004 000000          	zero	2*2,0
    000116                              add_host.e:
    000116  0a   000063 7020 00         	tsx2	.setup
    000117  aa   000000 6340 07         	ldi	=0,dl
    000120  4a  4 00012 3521 20         	short_call nhi_update_$add_host(ap|0)
    000121  aa  7 00036 6701 20
    000122  aa  6 00030 3701 20
    000123  aa  7 00042 7101 20         	return
                                        
                                    38            gate	add_host_name,nhi_update_,add_host_name,3
                        000002          	segdef	add_host_name
    000002                              add_host_name:
    000002  0a   000125 7100 00         	tra	add_host_name.e
    000124  aa   000006 000000          	zero	3*2,0
    000125                              add_host_name.e:
    000125  0a   000063 7020 00         	tsx2	.setup
    000126  aa   000000 6340 07         	ldi	=0,dl
    000127  4a  4 00014 3521 20         	short_call nhi_update_$add_host_name(ap|0)
    000130  aa  7 00036 6701 20
    000131  aa  6 00030 3701 20
    000132  aa  7 00042 7101 20         	return
                                        
                                    39            gate	add_property,nhi_update_,add_property,4
                        000003          	segdef	add_property
    000003                              add_property:
    000003  0a   000134 7100 00         	tra	add_property.e
    000133  aa   000010 000000          	zero	4*2,0
    000134                              add_property.e:
    000134  0a   000063 7020 00         	tsx2	.setup
    000135  aa   000000 6340 07         	ldi	=0,dl
    000136  4a  4 00016 3521 20         	short_call nhi_update_$add_property(ap|0)
    000137  aa  7 00036 6701 20
    000140  aa  6 00030 3701 20
    000141  aa  7 00042 7101 20         	return
                                        
                                    40            gate	delete_host,nhi_update_,delete_host,2
                        000004          	segdef	delete_host
    000004                              delete_host:
    000004  0a   000143 7100 00         	tra	delete_host.e
    000142  aa   000004 000000          	zero	2*2,0
    000143                              delete_host.e:
    000143  0a   000063 7020 00         	tsx2	.setup
    000144  aa   000000 6340 07         	ldi	=0,dl
    000145  4a  4 00020 3521 20         	short_call nhi_update_$delete_host(ap|0)
    000146  aa  7 00036 6701 20
    000147  aa  6 00030 3701 20
    000150  aa  7 00042 7101 20         	return
                                        
                                    41            gate	delete_host_name,nhi_update_,delete_host_name,3
                        000005          	segdef	delete_host_name
    000005                              delete_host_name:
    000005  0a   000152 7100 00         	tra	delete_host_name.e
    000151  aa   000006 000000          	zero	3*2,0
    000152                              delete_host_name.e:
    000152  0a   000063 7020 00         	tsx2	.setup
    000153  aa   000000 6340 07         	ldi	=0,dl
    000154  4a  4 00022 3521 20         	short_call nhi_update_$delete_host_name(ap|0)
    000155  aa  7 00036 6701 20
    000156  aa  6 00030 3701 20
    000157  aa  7 00042 7101 20         	return
                                        
                                    42            gate	delete_property,nhi_update_,delete_property,3
                        000006          	segdef	delete_property
    000006                              delete_property:
    000006  0a   000161 7100 00         	tra	delete_property.e
    000160  aa   000006 000000          	zero	3*2,0
    000161                              delete_property.e:
    000161  0a   000063 7020 00         	tsx2	.setup
    000162  aa   000000 6340 07         	ldi	=0,dl
    000163  4a  4 00024 3521 20         	short_call nhi_update_$delete_property(ap|0)
    000164  aa  7 00036 6701 20
    000165  aa  6 00030 3701 20
    000166  aa  7 00042 7101 20         	return
                                        
                                    43            gate	init_host_table,nhi_manager_,init_host_table,1
                        000007          	segdef	init_host_table
    000007                              init_host_table:
    000007  0a   000170 7100 00         	tra	init_host_table.e
    000167  aa   000002 000000          	zero	1*2,0
    000170                              init_host_table.e:
    000170  0a   000063 7020 00         	tsx2	.setup
    000171  aa   000000 6340 07         	ldi	=0,dl
    000172  4a  4 00026 3521 20         	short_call nhi_manager_$init_host_table(ap|0)
    000173  aa  7 00036 6701 20
    000174  aa  6 00030 3701 20
    000175  aa  7 00042 7101 20         	return
                                        
                                    44            gate	search_hash_table_service,nhi_update_,search_hash_table_service,3
                        000010          	segdef	search_hash_table_service
    000010                              search_hash_table_service:
    000010  0a   000177 7100 00         	tra	search_hash_table_service.e
    000176  aa   000006 000000          	zero	3*2,0
    000177                              search_hash_table_service.e:
    000177  0a   000063 7020 00         	tsx2	.setup
    000200  aa   000000 6340 07         	ldi	=0,dl
    000201  4a  4 00030 3521 20         	short_call nhi_update_$search_hash_table_service(ap|0)
    000202  aa  7 00036 6701 20
    000203  aa  6 00030 3701 20
    000204  aa  7 00042 7101 20         	return
                                        
                                    45            gate	set_abbrev,nhi_update_,set_abbrev,3
                        000011          	segdef	set_abbrev
    000011                              set_abbrev:
    000011  0a   000206 7100 00         	tra	set_abbrev.e
    000205  aa   000006 000000          	zero	3*2,0
    000206                              set_abbrev.e:
    000206  0a   000063 7020 00         	tsx2	.setup
    000207  aa   000000 6340 07         	ldi	=0,dl
    000210  4a  4 00032 3521 20         	short_call nhi_update_$set_abbrev(ap|0)
    000211  aa  7 00036 6701 20
    000212  aa  6 00030 3701 20
    000213  aa  7 00042 7101 20         	return
                                        
                                    46            gate	set_attribute,nhi_update_,set_attribute,4
                        000012          	segdef	set_attribute
    000012                              set_attribute:
    000012  0a   000215 7100 00         	tra	set_attribute.e
    000214  aa   000010 000000          	zero	4*2,0
    000215                              set_attribute.e:
    000215  0a   000063 7020 00         	tsx2	.setup
    000216  aa   000000 6340 07         	ldi	=0,dl
    000217  4a  4 00034 3521 20         	short_call nhi_update_$set_attribute(ap|0)
    000220  aa  7 00036 6701 20
    000221  aa  6 00030 3701 20
    000222  aa  7 00042 7101 20         	return
                                        
                                    47            gate	set_official_host_name,nhi_update_,set_official_host_name,3
                        000013          	segdef	set_official_host_name
    000013                              set_official_host_name:
    000013  0a   000224 7100 00         	tra	set_official_host_name.e
    000223  aa   000006 000000          	zero	3*2,0
    000224                              set_official_host_name.e:
    000224  0a   000063 7020 00         	tsx2	.setup
    000225  aa   000000 6340 07         	ldi	=0,dl
    000226  4a  4 00036 3521 20         	short_call nhi_update_$set_official_host_name(ap|0)
    000227  aa  7 00036 6701 20
    000230  aa  6 00030 3701 20
    000231  aa  7 00042 7101 20         	return
                                        
                                    48  
                                    49            " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    50                      "      Gate entries to allow manipulating of the Ring 1
                                    51                      " NCP Access Control Functions.
                                    52                      " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    53  
                                    54            gate      set_access_dir,ncp_r1_interface_,set_access_dir,2
                        000014          	segdef	set_access_dir
    000014                              set_access_dir:
    000014  0a   000233 7100 00         	tra	set_access_dir.e
    000232  aa   000004 000000          	zero	2*2,0
    000233                              set_access_dir.e:
    000233  0a   000063 7020 00         	tsx2	.setup
    000234  aa   000000 6340 07         	ldi	=0,dl
    000235  4a  4 00040 3521 20         	short_call ncp_r1_interface_$set_access_dir(ap|0)
    000236  aa  7 00036 6701 20
    000237  aa  6 00030 3701 20
    000240  aa  7 00042 7101 20         	return
                                        
                                    55            gate      set_socket_group_id,ncp_r1_interface_,set_socket_group_id,2
                        000015          	segdef	set_socket_group_id
    000015                              set_socket_group_id:
    000015  0a   000242 7100 00         	tra	set_socket_group_id.e
    000241  aa   000004 000000          	zero	2*2,0
    000242                              set_socket_group_id.e:
    000242  0a   000063 7020 00         	tsx2	.setup
    000243  aa   000000 6340 07         	ldi	=0,dl
    000244  4a  4 00042 3521 20         	short_call ncp_r1_interface_$set_socket_group_id(ap|0)
    000245  aa  7 00036 6701 20
    000246  aa  6 00030 3701 20
    000247  aa  7 00042 7101 20         	return
                                        
                                    56  
                                    57            end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000250  5a   000003 000000 
    000251  5a   000161 600000 
    000252  aa   000000 000000 
    000253  55   000013 000002 
    000254  5a   000002 400003 
    000255  55   000006 000013 
    000256  aa  020 156 145 164
    000257  aa  137 162 151 156
    000260  aa  147 061 137 141
    000261  aa  144 155 151 156
    000262  aa  137 000 000 000
    000263  55   000023 000003 
    000264  0a   000015 400000 
    000265  55   000016 000003 
    000266  aa  023 163 145 164         set_socket_group_id
    000267  aa  137 163 157 143
    000270  aa  153 145 164 137
    000271  aa  147 162 157 165
    000272  aa  160 137 151 144
    000273  55   000032 000013 
    000274  0a   000014 400000 
    000275  55   000026 000003 
    000276  aa  016 163 145 164         set_access_dir
    000277  aa  137 141 143 143
    000300  aa  145 163 163 137
    000301  aa  144 151 162 000
    000302  55   000043 000023 
    000303  0a   000013 400000 
    000304  55   000035 000003 
    000305  aa  026 163 145 164         set_official_host_name
    000306  aa  137 157 146 146
    000307  aa  151 143 151 141
    000310  aa  154 137 150 157
    000311  aa  163 164 137 156
    000312  aa  141 155 145 000
    000313  55   000052 000032 
    000314  0a   000012 400000 
    000315  55   000046 000003 
    000316  aa  015 163 145 164         set_attribute
    000317  aa  137 141 164 164
    000320  aa  162 151 142 165
    000321  aa  164 145 000 000
    000322  55   000060 000043 
    000323  0a   000011 400000 
    000324  55   000055 000003 
    000325  aa  012 163 145 164         set_abbrev
    000326  aa  137 141 142 142
    000327  aa  162 145 166 000
    000330  55   000072 000052 
    000331  0a   000010 400000 
    000332  55   000063 000003 
    000333  aa  031 163 145 141         search_hash_table_service
    000334  aa  162 143 150 137
    000335  aa  150 141 163 150
    000336  aa  137 164 141 142
    000337  aa  154 145 137 163
    000340  aa  145 162 166 151
    000341  aa  143 145 000 000
    000342  55   000101 000060 
    000343  0a   000007 400000 
    000344  55   000075 000003 
    000345  aa  017 151 156 151         init_host_table
    000346  aa  164 137 150 157
    000347  aa  163 164 137 164
    000350  aa  141 142 154 145
    000351  55   000110 000072 
    000352  0a   000006 400000 
    000353  55   000104 000003 
    000354  aa  017 144 145 154         delete_property
    000355  aa  145 164 145 137
    000356  aa  160 162 157 160
    000357  aa  145 162 164 171
    000360  55   000120 000101 
    000361  0a   000005 400000 
    000362  55   000113 000003 
    000363  aa  020 144 145 154         delete_host_name
    000364  aa  145 164 145 137
    000365  aa  150 157 163 164
    000366  aa  137 156 141 155
    000367  aa  145 000 000 000
    000370  55   000126 000110 
    000371  0a   000004 400000 
    000372  55   000123 000003 
    000373  aa  013 144 145 154         delete_host
    000374  aa  145 164 145 137
    000375  aa  150 157 163 164
    000376  55   000135 000120 
    000377  0a   000003 400000 
    000400  55   000131 000003 
    000401  aa  014 141 144 144         add_property
    000402  aa  137 160 162 157
    000403  aa  160 145 162 164
    000404  aa  171 000 000 000
    000405  55   000144 000126 
    000406  0a   000002 400000 
    000407  55   000140 000003 
    000410  aa  015 141 144 144         add_host_name
    000411  aa  137 150 157 163
    000412  aa  164 137 156 141
    000413  aa  155 145 000 000
    000414  55   000152 000135 
    000415  0a   000001 400000 
    000416  55   000147 000003 
    000417  aa  010 141 144 144         add_host
    000420  aa  137 150 157 163
    000421  aa  164 000 000 000
    000422  55   000002 000144 
    000423  6a   000000 400002 
    000424  55   000155 000003 
    000425  aa  014 163 171 155         symbol_table
    000426  aa  142 157 154 137
    000427  aa  164 141 142 154
    000430  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000431  aa   000000 000033 
    000432  5a   000032 000000 
    000433  aa   000000 000000 
    000434  aa   000000 000000 
    000435  5a   000013 000000 
    000436  5a   000072 000000 
    000437  5a   000060 000000 
    000440  5a   000126 000000 
    000441  5a   000135 000000 
    000442  5a   000023 000000 
    000443  5a   000043 000000 
    000444  5a   000110 000000 
    000445  5a   000101 000000 
    000446  5a   000052 000000 
    000447  5a   000144 000000 
    000450  5a   000152 000000 
    000451  5a   000120 000000 
    000452  aa   000000 000000 
    000453  aa   000000 000000 
    000454  aa   000000 000000 
    000455  aa   000000 000000 
    000456  aa   000000 000000 
    000457  aa   000000 000000 
    000460  aa   000000 000000 
    000461  aa   000000 000000 
    000462  aa   000000 000000 
    000463  aa   000000 000000 
    000464  aa   000000 000000 

EXTERNAL NAMES

    000465  aa  021 156 143 160         ncp_r1_interface_
    000466  aa  137 162 061 137
    000467  aa  151 156 164 145
    000470  aa  162 146 141 143
    000471  aa  145 137 000 000
    000472  aa  014 156 150 151         nhi_manager_
    000473  aa  137 155 141 156
    000474  aa  141 147 145 162
    000475  aa  137 000 000 000
    000476  aa  013 156 150 151         nhi_update_
    000477  aa  137 165 160 144
    000500  aa  141 164 145 137
    000501  aa  007 163 151 147         signal_
    000502  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000503  aa   000004 000000 
    000504  55   000215 000016 
    000505  aa   000004 000000 
    000506  55   000215 000026 
    000507  aa   000004 000000 
    000510  55   000226 000035 
    000511  aa   000004 000000 
    000512  55   000226 000046 
    000513  aa   000004 000000 
    000514  55   000226 000055 
    000515  aa   000004 000000 
    000516  55   000226 000063 
    000517  aa   000004 000000 
    000520  55   000222 000075 
    000521  aa   000004 000000 
    000522  55   000226 000104 
    000523  aa   000004 000000 
    000524  55   000226 000113 
    000525  aa   000004 000000 
    000526  55   000226 000123 
    000527  aa   000004 000000 
    000530  55   000226 000131 
    000531  aa   000004 000000 
    000532  55   000226 000140 
    000533  aa   000004 000000 
    000534  55   000226 000147 
    000535  aa   000004 000000 
    000536  55   000231 000231 
    000537  aa   000001 000000 
    000540  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000541  5a   000233 000000 
    000542  5a   000235 000000 
    000543  5a   000237 000000 
    000544  5a   000241 000000 
    000545  5a   000243 000000 
    000546  5a   000245 000000 
    000547  5a   000247 000000 
    000550  5a   000251 000000 
    000551  5a   000253 000000 
    000552  5a   000255 000000 
    000553  5a   000257 000000 
    000554  5a   000261 000000 
    000555  5a   000263 000000 
    000556  5a   000265 000000 
    000557  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000250 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000044 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000306 0000 00
    000012  9a   777766 0000 46         nhi_update_|add_host
    000013  5a   000305 0000 00
    000014  9a   777764 0000 46         nhi_update_|add_host_name
    000015  5a   000304 0000 00
    000016  9a   777762 0000 46         nhi_update_|add_property
    000017  5a   000303 0000 00
    000020  9a   777760 0000 46         nhi_update_|delete_host
    000021  5a   000302 0000 00
    000022  9a   777756 0000 46         nhi_update_|delete_host_name
    000023  5a   000301 0000 00
    000024  9a   777754 0000 46         nhi_update_|delete_property
    000025  5a   000300 0000 00
    000026  9a   777752 0000 46         nhi_manager_|init_host_table
    000027  5a   000277 0000 00
    000030  9a   777750 0000 46         nhi_update_|search_hash_table_service
    000031  5a   000276 0000 00
    000032  9a   777746 0000 46         nhi_update_|set_abbrev
    000033  5a   000275 0000 00
    000034  9a   777744 0000 46         nhi_update_|set_attribute
    000035  5a   000274 0000 00
    000036  9a   777742 0000 46         nhi_update_|set_official_host_name
    000037  5a   000273 0000 00
    000040  9a   777740 0000 46         ncp_r1_interface_|set_access_dir
    000041  5a   000272 0000 00
    000042  9a   777736 0000 46         ncp_r1_interface_|set_socket_group_id
    000043  5a   000271 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 112646 
    000007  aa   411623 511525 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000221 
    000020  aa   000000 000156 
    000021  aa   000000 000200 
    000022  aa   000210 000156 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000051 
    000067  aa   126434 044734 
    000070  aa   000000 112646 
    000071  aa   373341 600000 
    000072  aa   000121 000051 
    000073  aa   126415 032457 
    000074  aa   000000 112642 
    000075  aa   522202 000000 
    000076  aa   000134 000042 
    000077  aa   120345 447426 
    000100  aa   000000 112034 
    000101  aa   634146 000000 
    000102  aa   000145 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   076163 160145          >spec>temp>bce>40-00>net_ring1_admin_.alm
    000107  aa   143076 164145 
    000110  aa   155160 076142 
    000111  aa   143145 076064 
    000112  aa   060055 060060 
    000113  aa   076156 145164 
    000114  aa   137162 151156 
    000115  aa   147061 137141 
    000116  aa   144155 151156 
    000117  aa   137056 141154 
    000120  aa   155040 040040 
    000121  aa   076163 160145          >spec>temp>bce>40-00>gate_macros.incl.alm
    000122  aa   143076 164145 
    000123  aa   155160 076142 
    000124  aa   143145 076064 
    000125  aa   060055 060060 
    000126  aa   076147 141164 
    000127  aa   145137 155141 
    000130  aa   143162 157163 
    000131  aa   056151 156143 
    000132  aa   154056 141154 
    000133  aa   155040 040040 
    000134  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000135  aa   076151 156143 
    000136  aa   154165 144145 
    000137  aa   076163 164141 
    000140  aa   143153 137150 
    000141  aa   145141 144145 
    000142  aa   162056 151156 
    000143  aa   143154 056141 
    000144  aa   154155 040040 
    000145  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000146  aa   076151 156143 
    000147  aa   154165 144145 
    000150  aa   076163 164141 
    000151  aa   143153 137146 
    000152  aa   162141 155145 
    000153  aa   056151 156143 
    000154  aa   154056 141154 
    000155  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          16    .actor                   net_ring1_admin_:    30.
          52    .defs_loop               net_ring1_admin_:    30.
         113    .gate_errordesc          net_ring1_admin_:    30.
         110    .gate_errorname          net_ring1_admin_:    30.
          60    .next_def                net_ring1_admin_:    30.
         114    .no_gate_error           net_ring1_admin_:    30.
          35    .return_name             net_ring1_admin_:    30.
          50    .search_defs             net_ring1_admin_:    30.
          63    .setup                   net_ring1_admin_:    30,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
                                                              47,   54,   55.
           1    add_host                 net_ring1_admin_:    37.
         116    add_host.e               net_ring1_admin_:    37.
           2    add_host_name            net_ring1_admin_:    38.
         125    add_host_name.e          net_ring1_admin_:    38.
           3    add_property             net_ring1_admin_:    39.
         134    add_property.e           net_ring1_admin_:    39.
        1170    call_offset              stack_header:        65.
           4    delete_host              net_ring1_admin_:    40.
         143    delete_host.e            net_ring1_admin_:    40.
           5    delete_host_name         net_ring1_admin_:    41.
         152    delete_host_name.e       net_ring1_admin_:    41.
           6    delete_property          net_ring1_admin_:    42.
         161    delete_property.e        net_ring1_admin_:    42.
        1174    entry_offset             stack_header:        69.
           7    init_host_table          net_ring1_admin_:    43.
         170    init_host_table.e        net_ring1_admin_:    43.
          16    main                     net_ring1_admin_:    30,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
                                                              47,   54,   55.
                ncp_r1_interface_        net_ring1_admin_:    54,   55.
                nhi_manager_             net_ring1_admin_:    43.
                nhi_update_              net_ring1_admin_:    37,   38,   39,   40,   41,   42,   44,   45,   46,   47.
        1171    push_offset              stack_header:        66.
        1173    return_no_pop_offset     stack_header:        68.
        1172    return_offset            stack_header:        67.
          10    search_hash_table_service      net_ring1_admin_:    44.
         177    search_hash_table_service.e    net_ring1_admin_:    44.
          11    set_abbrev               net_ring1_admin_:    45.
         206    set_abbrev.e             net_ring1_admin_:    45.
          14    set_access_dir           net_ring1_admin_:    54.
         233    set_access_dir.e         net_ring1_admin_:    54.
          12    set_attribute            net_ring1_admin_:    46.
         215    set_attribute.e          net_ring1_admin_:    46.
          13    set_official_host_name   net_ring1_admin_:    47.
         224    set_official_host_name.e       net_ring1_admin_:    47.
          15    set_socket_group_id      net_ring1_admin_:    55.
         242    set_socket_group_id.e    net_ring1_admin_:    55.
                signal_                  net_ring1_admin_:    30.
         102    signal_arglist           net_ring1_admin_:    30.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        43.
          32    stack_header.bar_mode_sp       stack_header:        26.
          36    stack_header.call_op_ptr       stack_header:        28.
          10    stack_header.clr_ptr     stack_header:        11.
           6    stack_header.combined_stat_ptr       stack_header:         9.
          13    stack_header.cur_lot_size      stack_header:        15.
          64    stack_header.ect_ptr     stack_header:        42.
          46    stack_header.entry_op_ptr      stack_header:        33.
          74    stack_header.in_trace    stack_header:        47.
          52    stack_header.isot_ptr    stack_header:        36.
          26    stack_header.lot_ptr     stack_header:        23.
          12    stack_header.main_proc_invoked       stack_header:        13.
          12    stack_header.max_lot_size      stack_header:        12.
           4    stack_header.old_lot_ptr       stack_header:         8.
          20    stack_header.parent_ptr  stack_header:        20.
          34    stack_header.pl1_operators_ptr       stack_header:        27.
          40    stack_header.push_op_ptr       stack_header:        30.
          42    stack_header.return_op_ptr     stack_header:        31.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        32.
          62    stack_header.rnt_ptr     stack_header:        41.
          12    stack_header.run_unit_depth    stack_header:        14.
          54    stack_header.sct_ptr     stack_header:        37.
          30    stack_header.signal_ptr  stack_header:        25.
          22    stack_header.stack_begin_ptr   stack_header:        21.
          24    stack_header.stack_end_ptr     stack_header:        22.
          14    stack_header.system_free_ptr   stack_header:        17.
          60    stack_header.sys_link_info_ptr       stack_header:        40.
          70    stack_header.task_data_ptr     stack_header:        44.
          72    stack_header.trace_frames      stack_header:        46.
          50    stack_header.trans_op_tv_ptr   stack_header:        35.
          56    stack_header.unwinder_ptr      stack_header:        38.
          16    stack_header.user_free_ptr     stack_header:        18.
         100    stack_header_end         stack_header:        49.
           0    trace_frames.count       stack_header:        54.
           1    trace_frames.top_ptr     stack_header:        55.
           0    transfer_vector          net_ring1_admin_:    30,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
                                                              47,   54,   55.
          16    tv_end                   net_ring1_admin_:    30.
         551    tv_offset                stack_header:        60,   65,   66,   67,   68,   69.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
