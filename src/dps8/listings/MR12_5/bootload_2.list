ASSEMBLY LISTING OF SEGMENT >dumps>old>h>bootload_2.alm                  
ASSEMBLED ON:	07/02/84  1138.2 mst Mon
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1983 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
    000000                           6  	name	bootload_2
                                     7  
                                     8  " Initialize PL/1 environment for collection 1.
                                     9  " Written by C. Hornig, November 1982.
                                    10  
                                    11  " This program is transfered to at location zero by bootload_1.
                                    12  " As a special favor, PR5 -> the LOT.
                                    13  " Fixed June 1983 by KPL to set isot_ptr
                                    14  
    000000                          15  begin:
    000000  0a   000000 2130 00     16  	epaq	*			" get our segment number
    000001  aa  5 00000 7641 01     17  	lprplp	lb|0,au			" get linkage ptr
    000002  4a  4 00010 3735 20     18  	eppsb	inzr_stk0$		" find the stack segment
    000003  4a  4 00012 3535 20     19  	eppbb	prds$
                                    20  
    000004  4a  4 00014 3521 20     21  	eppbp	prds$processor_stack	" initialize the prds
    000005  aa  3 00022 2521 00     22  	spribp	bb|stack_header.stack_begin_ptr
    000006  aa  3 00024 2521 00     23  	spribp	bb|stack_header.stack_end_ptr	
                                    24  
    000007  aa  7 00023 3521 20     25  	eppbp	sb|stack_header.stack_begin_ptr+1,*
                                    26  					" get beginning offset
    000010  aa  7 00022 2521 00     27  	spribp	sb|stack_header.stack_begin_ptr " save it
    000011  aa  7 00024 2521 00     28  	spribp	sb|stack_header.stack_end_ptr
                                    29  
    000012  4a  4 00016 3521 20     30  	eppbp	lot$			" set the lot ptrs
    000013  aa  3 00026 2521 00     31  	spribp	bb|stack_header.lot_ptr
    000014  aa  7 00026 2521 00     32  	spribp	sb|stack_header.lot_ptr
    000015  aa  3 00052 2521 00     33  	spribp	bb|stack_header.isot_ptr	" and isot as a favor
    000016  aa  7 00052 2521 00     34  	spribp	sb|stack_header.isot_ptr
                                    35  
    000017  0a   000052 3520 20     36  	eppbp	=its(-2,2),*		" signal ptr terminates process
    000020  aa  3 00030 2521 00     37  	spribp	bb|stack_header.signal_ptr
    000021  aa  7 00030 2521 00     38  	spribp	sb|stack_header.signal_ptr
                                    39  
    000022  4a  4 00020 3521 20     40  	eppbp	pl1_operators_$operator_table  Get a ptr to  PL/I operators table.
    000023  aa  7 00034 2521 00     41  	spribp	sb|stack_header.pl1_operators_ptr Store in  inzr_stk0
    000024  aa  3 00034 2521 00     42  	spribp	bb|stack_header.pl1_operators_ptr Store in  prds.
                                    43  
    000025  4a  4 00022 3521 20     44  	eppbp	pl1_operators_$operator_table+call_offset,*
    000026  aa  7 00036 2521 00     45  	spribp	sb|stack_header.call_op_ptr
    000027  aa  3 00036 2521 00     46  	spribp	bb|stack_header.call_op_ptr
                                    47  
    000030  4a  4 00024 3521 20     48  	eppbp	pl1_operators_$operator_table+push_offset,*
    000031  aa  7 00040 2521 00     49  	spribp	sb|stack_header.push_op_ptr
    000032  aa  3 00040 2521 00     50  	spribp	bb|stack_header.push_op_ptr
                                    51  
    000033  4a  4 00026 3521 20     52  	eppbp	pl1_operators_$operator_table+return_offset,*
    000034  aa  7 00042 2521 00     53  	spribp	sb|stack_header.return_op_ptr
    000035  aa  3 00042 2521 00     54  	spribp	bb|stack_header.return_op_ptr
                                    55  
    000036  4a  4 00030 3521 20     56  	eppbp	pl1_operators_$operator_table+return_no_pop_offset,*
    000037  aa  7 00044 2521 00     57  	spribp	sb|stack_header.ret_no_pop_op_ptr
    000040  aa  3 00044 2521 00     58  	spribp	bb|stack_header.ret_no_pop_op_ptr
                                    59  
    000041  4a  4 00032 3521 20     60  	eppbp	pl1_operators_$operator_table+entry_offset,*
    000042  aa  7 00046 2521 00     61  	spribp	sb|stack_header.entry_op_ptr
    000043  aa  3 00046 2521 00     62  	spribp	bb|stack_header.entry_op_ptr
                                    63  
    000044  0a   000050 3500 00     64  	eppap	no_args			" no arguments
    000045  0a   000054 3720 20     65  	eppsp	=its(-1,1),*		" null stack pointer
    000046  4a  4 00034 7101 20     66  	tra	initializer$initializer	" call PL/1
                                    67  
    000047  aa   000000 0110 03     68  	even
    000050  aa   000000 000004      69  no_args:	zero	0,4
    000051  aa   000000 000000      70  	zero	0,0
                                    71  " 
                                    72  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                        000004     1-8  	equ	stack_header.old_lot_ptr,4		obsolete ptr to lot
                        000006     1-9  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-10  
                        000010    1-11  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-12  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-13  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-14  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-15  	equ	stack_header.cur_lot_size,11		number of words (entries) in lot
                                  1-16  
                        000014    1-17  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-18  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-19  
                        000020    1-20  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-21  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-22  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-23  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-24  
                        000030    1-25  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-26  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-27  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-28  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-29  
                        000040    1-30  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-31  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-32  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-33  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-34  
                        000050    1-35  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-36  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-37  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-38  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-39  
                        000060    1-40  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-41  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-42  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-43  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-44  	equ	stack_header.task_data_ptr,56
                                  1-45  
                        000072    1-46  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000074    1-47  	equ	stack_header.in_trace,60		trace antirecurse bit
                                  1-48  
                        000100    1-49  	equ	stack_header_end,64			length of stack header
                                  1-50  
                                  1-51  
                                  1-52  
                                  1-53  
                        000000    1-54  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-55  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-56  
                                  1-57  "	The  following constant is an offset within the  pl1  operators table.
                                  1-58  "	It  references a  transfer vector table.
                                  1-59  
                        000551    1-60  	bool	tv_offset,551
                                  1-61  
                                  1-62  
                                  1-63  "	The  following constants are offsets within this transfer vector table.
                                  1-64  
                        001170    1-65  	equ	call_offset,tv_offset+271
                        001171    1-66  	equ	push_offset,tv_offset+272
                        001172    1-67  	equ	return_offset,tv_offset+273
                        001173    1-68  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-69  	equ	entry_offset,tv_offset+275
                                  1-70  
                                  1-71  
                                  1-72  " 	END INCLUDE FILE stack_header.incl.alm
                                    73  
                                    74  	end	bootload_2
LITERALS
     
    000052  aa   077776 000043 
    000053  aa   000002 000000 
    000054  aa   077777 000043 
    000055  aa   000001 000000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000056  5a   000003 000000 
    000057  5a   000020 600000 
    000060  aa   000000 000000 
    000061  55   000011 000002 
    000062  5a   000002 400003 
    000063  55   000006 000011 
    000064  aa  012 142 157 157
    000065  aa  164 154 157 141
    000066  aa  144 137 062 000
    000067  55   000002 000003 
    000070  6a   000000 400002 
    000071  55   000014 000003 
    000072  aa  014 163 171 155         symbol_table
    000073  aa  142 157 154 137
    000074  aa  164 141 142 154
    000075  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000076  aa   000000 000015 
    000077  aa   000000 000000 
    000100  aa   000000 000000 
    000101  aa   000000 000000 
    000102  aa   000000 000000 
    000103  aa   000000 000000 
    000104  aa   000000 000000 
    000105  5a   000011 000000 
    000106  aa   000000 000000 
    000107  aa   000000 000000 
    000110  aa   000000 000000 
    000111  aa   000000 000000 
    000112  aa   000000 000000 
    000113  aa   000000 000000 

EXTERNAL NAMES

    000114  aa  013 151 156 151         initializer
    000115  aa  164 151 141 154
    000116  aa  151 172 145 162
    000117  aa  016 157 160 145         operator_table
    000120  aa  162 141 164 157
    000121  aa  162 137 164 141
    000122  aa  142 154 145 000
    000123  aa  016 160 154 061         pl1_operators_
    000124  aa  137 157 160 145
    000125  aa  162 141 164 157
    000126  aa  162 163 137 000
    000127  aa  003 154 157 164         lot
    000130  aa  017 160 162 157         processor_stack
    000131  aa  143 145 163 163
    000132  aa  157 162 137 163
    000133  aa  164 141 143 153
    000134  aa  004 160 162 144         prds
    000135  aa  163 000 000 000
    000136  aa  011 151 156 172         inzr_stk0
    000137  aa  162 137 163 164
    000140  aa  153 060 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000141  aa   000004 000000 
    000142  55   000036 000036 
    000143  aa   000004 000000 
    000144  55   000045 000041 
    000145  aa   000003 000000 
    000146  5a   000051 000000 
    000147  aa   000004 000000 
    000150  55   000056 000052 
    000151  aa   000003 000000 
    000152  5a   000056 000000 
    000153  aa   000003 000000 
    000154  5a   000060 000000 
    000155  aa   000001 000000 
    000156  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000157  5a   000063 000000 
    000160  5a   000065 001174 
    000161  5a   000065 001173 
    000162  5a   000065 001172 
    000163  5a   000065 001171 
    000164  5a   000065 001170 
    000165  5a   000065 000000 
    000166  5a   000067 000000 
    000167  5a   000071 000000 
    000170  5a   000073 000000 
    000171  5a   000075 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000056 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000036 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         inzr_stk0|       
    000011  5a   000113 0000 00
    000012  9a   777766 0000 46         prds|       
    000013  5a   000112 0000 00
    000014  9a   777764 0000 46         prds|processor_stack
    000015  5a   000111 0000 00
    000016  9a   777762 0000 46         lot|       
    000017  5a   000110 0000 00
    000020  9a   777760 0000 46         pl1_operators_|operator_table
    000021  5a   000107 0000 00
    000022  9a   777756 0000 46         pl1_operators_|operator_table
    000023  5a   000106 0000 20
    000024  9a   777754 0000 46         pl1_operators_|operator_table
    000025  5a   000105 0000 20
    000026  9a   777752 0000 46         pl1_operators_|operator_table
    000027  5a   000104 0000 20
    000030  9a   777750 0000 46         pl1_operators_|operator_table
    000031  5a   000103 0000 20
    000032  9a   777746 0000 46         pl1_operators_|operator_table
    000033  5a   000102 0000 20
    000034  9a   777744 0000 46         initializer|initializer
    000035  5a   000101 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 112711 
    000007  aa   526326 741004 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000143 
    000020  aa   000000 000116 
    000021  aa   000000 000125 
    000022  aa   000134 000116 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000033 
    000067  aa   127065 643076 
    000070  aa   000000 112711 
    000071  aa   513650 600000 
    000072  aa   000105 000042 
    000073  aa   120345 447426 
    000074  aa   000000 112034 
    000075  aa   634146 000000 
    000076  aa   076144 165155          >dumps>old>h>bootload_2.alm
    000077  aa   160163 076157 
    000100  aa   154144 076150 
    000101  aa   076142 157157 
    000102  aa   164154 157141 
    000103  aa   144137 062056 
    000104  aa   141154 155040 
    000105  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000106  aa   076151 156143 
    000107  aa   154165 144145 
    000110  aa   076163 164141 
    000111  aa   143153 137150 
    000112  aa   145141 144145 
    000113  aa   162056 151156 
    000114  aa   143154 056141 
    000115  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           0    begin                    bootload_2:    15.
        1170    call_offset              bootload_2:    44,
                                         stack_header:        65.
        1174    entry_offset             bootload_2:    60,
                                         stack_header:        69.
                initializer              bootload_2:    66.
                inzr_stk0                bootload_2:    18.
                lot                      bootload_2:    30.
          50    no_args                  bootload_2:    64,   69.
                operator_table           bootload_2:    40,   44,   48,   52,   56,   60.
                pl1_operators_           bootload_2:    40,   44,   48,   52,   56,   60.
                prds                     bootload_2:    19,   21.
                processor_stack          bootload_2:    21.
        1171    push_offset              bootload_2:    48,
                                         stack_header:        66.
        1173    return_no_pop_offset     bootload_2:    56,
                                         stack_header:        68.
        1172    return_offset            bootload_2:    52,
                                         stack_header:        67.
          66    stack_header.assign_linkage_ptr      stack_header:        43.
          32    stack_header.bar_mode_sp       stack_header:        26.
          36    stack_header.call_op_ptr       bootload_2:    45,   46,
                                               stack_header:        28.
          10    stack_header.clr_ptr     stack_header:        11.
           6    stack_header.combined_stat_ptr       stack_header:         9.
          13    stack_header.cur_lot_size      stack_header:        15.
          64    stack_header.ect_ptr     stack_header:        42.
          46    stack_header.entry_op_ptr      bootload_2:    61,   62,
                                               stack_header:        33.
          74    stack_header.in_trace    stack_header:        47.
          52    stack_header.isot_ptr    bootload_2:    33,   34,
                                         stack_header:        36.
          26    stack_header.lot_ptr     bootload_2:    31,   32,
                                         stack_header:        23.
          12    stack_header.main_proc_invoked       stack_header:        13.
          12    stack_header.max_lot_size      stack_header:        12.
           4    stack_header.old_lot_ptr       stack_header:         8.
          20    stack_header.parent_ptr  stack_header:        20.
          34    stack_header.pl1_operators_ptr       bootload_2:    41,   42,
                                                     stack_header:        27.
          40    stack_header.push_op_ptr       bootload_2:    49,   50,
                                               stack_header:        30.
          42    stack_header.return_op_ptr     bootload_2:    53,   54,
                                               stack_header:        31.
          44    stack_header.ret_no_pop_op_ptr       bootload_2:    57,   58,
                                                     stack_header:        32.
          62    stack_header.rnt_ptr     stack_header:        41.
          12    stack_header.run_unit_depth    stack_header:        14.
          54    stack_header.sct_ptr     stack_header:        37.
          30    stack_header.signal_ptr  bootload_2:    37,   38,
                                         stack_header:        25.
          22    stack_header.stack_begin_ptr   bootload_2:    22,   25,   27,
                                               stack_header:        21.
          24    stack_header.stack_end_ptr     bootload_2:    23,   28,
                                               stack_header:        22.
          14    stack_header.system_free_ptr   stack_header:        17.
          60    stack_header.sys_link_info_ptr       stack_header:        40.
          70    stack_header.task_data_ptr     stack_header:        44.
          72    stack_header.trace_frames      stack_header:        46.
          50    stack_header.trans_op_tv_ptr   stack_header:        35.
          56    stack_header.unwinder_ptr      stack_header:        38.
          16    stack_header.user_free_ptr     stack_header:        18.
         100    stack_header_end         stack_header:        49.
           0    trace_frames.count       stack_header:        54.
           1    trace_frames.top_ptr     stack_header:        55.
         551    tv_offset                stack_header:        60,   65,   66,   67,   68,   69.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
