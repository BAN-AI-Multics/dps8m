ASSEMBLY LISTING OF SEGMENT >spec>install>1115>rcp_.alm                                                                                                                                             
ASSEMBLED ON:	11/11/89  0921.3 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    12  
                                    13  
                                    14  	gate_info	rcp_
                                        	use	transfer_vector
    000000  0a   000024 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000024  aa  7 00046 2721 20         .actor:	getlp
    000025  aa  0 00002 3521 20         	eppbp	ap|2,*
    000026  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000027  0a   000043 6000 00         	tze	.return_name	zero length => get name
                                        
    000030  aa   000001 0350 07         	adla	1,dl		include length of acc
    000031  aa  0 00004 4501 20         	stz	ap|4,*
    000032  0a   000056 7000 00         	tsx0	.search_defs
                                        
    000033  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000034  aa   277777 600005          	desc9a	bp|-1(3),al
    000035  aa   300000 000005          	desc9a	bb|0,al
    000036  0a   000066 6010 00         	tnz	.next_def
                                        
    000037  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000040  aa   000022 7710 00         	arl	18
    000041  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000042  aa  7 00044 7101 20         	short_return
                                        
    000043                              .return_name:
    000043  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000044  0a   000056 7000 00         	tsx0	.search_defs
                                        
    000045  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000046  0a   000066 6010 00         	tnz	.next_def
                                        
    000047  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000050  aa   000033 7710 00         	arl	27
    000051  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000052  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000053  aa   300000 200005          	desc9a	bb|0(1),al
    000054  aa   200000 000005          	desc9a	bp|0,al
                                        
    000055  aa  7 00044 7101 20         	short_return
                                        
    000056                              .search_defs:
    000056  aa   000000 6220 00         	eax2	0
    000057  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000060                              .defs_loop:
    000060  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000061  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000062  0a   000066 6010 00         	tnz	.next_def
                                        
    000063  aa  1 00002 2271 12         	ldx7	ab|2,2
    000064  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000065  aa   000000 7100 10         	tra	0,0		test definition
    000066                              .next_def:
    000066  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000067  0a   000060 6010 00         	tnz	.defs_loop
                                        
    000070  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000071  aa   000060 6270 00         .setup:	push
    000072  aa  7 00040 2721 20
    000073  aa  7 00046 2721 20         	getlp
    000074  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000075  0a   000122 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000076  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000077  0a   000122 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000100  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000101  0a   000110 3500 00
    000102  4a  4 00010 3521 20
    000103  aa  6 00040 7531 00
    000104  aa  7 00036 6701 20
    000105  aa  6 00000 1731 00
    000106  aa  6 00040 0731 00
    000107  aa   000000 000000          	oct	0
                                        
                                        	even
    000110                              signal_arglist:
    000110  aa   000002 000004          	zero	2,4
    000111  aa   000002 000000          	zero	2,0
    000112  0a   000116 0000 00         	arg	.gate_errorname
    000113  aa   000000 0000 00         	arg
    000114  0a   000121 0000 00         	arg	.gate_errordesc
    000115  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000116                              .gate_errorname:
    000116  aa  147 141 164 145         	aci	"gate_error"
    000117  aa  137 145 162 162
    000120  aa  157 162 000 000
    000121                              .gate_errordesc:
    000121  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000122                              .no_gate_error:
    000122  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    15  
                                    16  	gate	acquire,rcprm_find_resource_,acquire,3
                        000001          	segdef	acquire
    000001                              acquire:
    000001  0a   000124 7100 00         	tra	acquire.e
    000123  aa   000006 000000          	zero	3*2,0
    000124                              acquire.e:
    000124  0a   000071 7020 00         	tsx2	.setup
    000125  aa   000000 6340 07         	ldi	=0,dl
    000126  4a  4 00012 3521 20         	short_call rcprm_find_resource_$acquire(ap|0)
    000127  aa  7 00036 6701 20
    000130  aa  6 00030 3701 20
    000131  aa  7 00042 7101 20         	return
                                        
                                    17  	gate	assign_device,rcp_assign_device_,rcp_assign_device_,6
                        000002          	segdef	assign_device
    000002                              assign_device:
    000002  0a   000133 7100 00         	tra	assign_device.e
    000132  aa   000014 000000          	zero	6*2,0
    000133                              assign_device.e:
    000133  0a   000071 7020 00         	tsx2	.setup
    000134  aa   000000 6340 07         	ldi	=0,dl
    000135  4a  4 00014 3521 20         	short_call rcp_assign_device_$rcp_assign_device_(ap|0)
    000136  aa  7 00036 6701 20
    000137  aa  6 00030 3701 20
    000140  aa  7 00042 7101 20         	return
                                        
                                    18  	gate	attach,rcp_attach_,attach,6
                        000003          	segdef	attach
    000003                              attach:
    000003  0a   000142 7100 00         	tra	attach.e
    000141  aa   000014 000000          	zero	6*2,0
    000142                              attach.e:
    000142  0a   000071 7020 00         	tsx2	.setup
    000143  aa   000000 6340 07         	ldi	=0,dl
    000144  4a  4 00016 3521 20         	short_call rcp_attach_$attach(ap|0)
    000145  aa  7 00036 6701 20
    000146  aa  6 00030 3701 20
    000147  aa  7 00042 7101 20         	return
                                        
                                    19  	gate	attach_lv,rcp_attach_lv_,rcp_attach_lv_,4
                        000004          	segdef	attach_lv
    000004                              attach_lv:
    000004  0a   000151 7100 00         	tra	attach_lv.e
    000150  aa   000010 000000          	zero	4*2,0
    000151                              attach_lv.e:
    000151  0a   000071 7020 00         	tsx2	.setup
    000152  aa   000000 6340 07         	ldi	=0,dl
    000153  4a  4 00020 3521 20         	short_call rcp_attach_lv_$rcp_attach_lv_(ap|0)
    000154  aa  7 00036 6701 20
    000155  aa  6 00030 3701 20
    000156  aa  7 00042 7101 20         	return
                                        
                                    20  	gate	check_assign,rcp_check_assign_,rcp_check_assign_,5
                        000005          	segdef	check_assign
    000005                              check_assign:
    000005  0a   000160 7100 00         	tra	check_assign.e
    000157  aa   000012 000000          	zero	5*2,0
    000160                              check_assign.e:
    000160  0a   000071 7020 00         	tsx2	.setup
    000161  aa   000000 6340 07         	ldi	=0,dl
    000162  4a  4 00022 3521 20         	short_call rcp_check_assign_$rcp_check_assign_(ap|0)
    000163  aa  7 00036 6701 20
    000164  aa  6 00030 3701 20
    000165  aa  7 00042 7101 20         	return
                                        
                                    21  	gate	check_attach,rcp_check_attach_,rcp_check_attach_,8
                        000006          	segdef	check_attach
    000006                              check_attach:
    000006  0a   000167 7100 00         	tra	check_attach.e
    000166  aa   000020 000000          	zero	8*2,0
    000167                              check_attach.e:
    000167  0a   000071 7020 00         	tsx2	.setup
    000170  aa   000000 6340 07         	ldi	=0,dl
    000171  4a  4 00024 3521 20         	short_call rcp_check_attach_$rcp_check_attach_(ap|0)
    000172  aa  7 00036 6701 20
    000173  aa  6 00030 3701 20
    000174  aa  7 00042 7101 20         	return
                                        
                                    22  	gate	check_attach_lv,rcp_check_attach_lv_,rcp_check_attach_lv_,4
                        000007          	segdef	check_attach_lv
    000007                              check_attach_lv:
    000007  0a   000176 7100 00         	tra	check_attach_lv.e
    000175  aa   000010 000000          	zero	4*2,0
    000176                              check_attach_lv.e:
    000176  0a   000071 7020 00         	tsx2	.setup
    000177  aa   000000 6340 07         	ldi	=0,dl
    000200  4a  4 00026 3521 20         	short_call rcp_check_attach_lv_$rcp_check_attach_lv_(ap|0)
    000201  aa  7 00036 6701 20
    000202  aa  6 00030 3701 20
    000203  aa  7 00042 7101 20         	return
                                        
                                    23  	gate	copy_list,rcp_copy_,list,3
                        000010          	segdef	copy_list
    000010                              copy_list:
    000010  0a   000205 7100 00         	tra	copy_list.e
    000204  aa   000006 000000          	zero	3*2,0
    000205                              copy_list.e:
    000205  0a   000071 7020 00         	tsx2	.setup
    000206  aa   000000 6340 07         	ldi	=0,dl
    000207  4a  4 00030 3521 20         	short_call rcp_copy_$list(ap|0)
    000210  aa  7 00036 6701 20
    000211  aa  6 00030 3701 20
    000212  aa  7 00042 7101 20         	return
                                        
                                    24  	gate	detach,rcp_detach_,detach,5
                        000011          	segdef	detach
    000011                              detach:
    000011  0a   000214 7100 00         	tra	detach.e
    000213  aa   000012 000000          	zero	5*2,0
    000214                              detach.e:
    000214  0a   000071 7020 00         	tsx2	.setup
    000215  aa   000000 6340 07         	ldi	=0,dl
    000216  4a  4 00032 3521 20         	short_call rcp_detach_$detach(ap|0)
    000217  aa  7 00036 6701 20
    000220  aa  6 00030 3701 20
    000221  aa  7 00042 7101 20         	return
                                        
                                    25  	gate	detach_lv,rcp_detach_lv_,rcp_detach_lv_,2
                        000012          	segdef	detach_lv
    000012                              detach_lv:
    000012  0a   000223 7100 00         	tra	detach_lv.e
    000222  aa   000004 000000          	zero	2*2,0
    000223                              detach_lv.e:
    000223  0a   000071 7020 00         	tsx2	.setup
    000224  aa   000000 6340 07         	ldi	=0,dl
    000225  4a  4 00034 3521 20         	short_call rcp_detach_lv_$rcp_detach_lv_(ap|0)
    000226  aa  7 00036 6701 20
    000227  aa  6 00030 3701 20
    000230  aa  7 00042 7101 20         	return
                                        
                                    26  	gate	get_status,rcprm_find_resource_,status,3
                        000013          	segdef	get_status
    000013                              get_status:
    000013  0a   000232 7100 00         	tra	get_status.e
    000231  aa   000006 000000          	zero	3*2,0
    000232                              get_status.e:
    000232  0a   000071 7020 00         	tsx2	.setup
    000233  aa   000000 6340 07         	ldi	=0,dl
    000234  4a  4 00036 3521 20         	short_call rcprm_find_resource_$status(ap|0)
    000235  aa  7 00036 6701 20
    000236  aa  6 00030 3701 20
    000237  aa  7 00042 7101 20         	return
                                        
                                    27  	gate	list_resources,rcprm_list_resource_,rcprm_list_resource_,7
                        000014          	segdef	list_resources
    000014                              list_resources:
    000014  0a   000241 7100 00         	tra	list_resources.e
    000240  aa   000016 000000          	zero	7*2,0
    000241                              list_resources.e:
    000241  0a   000071 7020 00         	tsx2	.setup
    000242  aa   000000 6340 07         	ldi	=0,dl
    000243  4a  4 00040 3521 20         	short_call rcprm_list_resource_$rcprm_list_resource_(ap|0)
    000244  aa  7 00036 6701 20
    000245  aa  6 00030 3701 20
    000246  aa  7 00042 7101 20         	return
                                        
                                    28  	gate	promote,rcp_promote_,rcp_promote_,3
                        000015          	segdef	promote
    000015                              promote:
    000015  0a   000250 7100 00         	tra	promote.e
    000247  aa   000006 000000          	zero	3*2,0
    000250                              promote.e:
    000250  0a   000071 7020 00         	tsx2	.setup
    000251  aa   000000 6340 07         	ldi	=0,dl
    000252  4a  4 00042 3521 20         	short_call rcp_promote_$rcp_promote_(ap|0)
    000253  aa  7 00036 6701 20
    000254  aa  6 00030 3701 20
    000255  aa  7 00042 7101 20         	return
                                        
                                    29  	gate	release,rcprm_find_resource_,release,3
                        000016          	segdef	release
    000016                              release:
    000016  0a   000257 7100 00         	tra	release.e
    000256  aa   000006 000000          	zero	3*2,0
    000257                              release.e:
    000257  0a   000071 7020 00         	tsx2	.setup
    000260  aa   000000 6340 07         	ldi	=0,dl
    000261  4a  4 00044 3521 20         	short_call rcprm_find_resource_$release(ap|0)
    000262  aa  7 00036 6701 20
    000263  aa  6 00030 3701 20
    000264  aa  7 00042 7101 20         	return
                                        
                                    30  	gate	set_status,rcprm_find_resource_,set,3
                        000017          	segdef	set_status
    000017                              set_status:
    000017  0a   000266 7100 00         	tra	set_status.e
    000265  aa   000006 000000          	zero	3*2,0
    000266                              set_status.e:
    000266  0a   000071 7020 00         	tsx2	.setup
    000267  aa   000000 6340 07         	ldi	=0,dl
    000270  4a  4 00046 3521 20         	short_call rcprm_find_resource_$set(ap|0)
    000271  aa  7 00036 6701 20
    000272  aa  6 00030 3701 20
    000273  aa  7 00042 7101 20         	return
                                        
                                    31  	gate	unassign,rcp_unassign_,unassign,4
                        000020          	segdef	unassign
    000020                              unassign:
    000020  0a   000275 7100 00         	tra	unassign.e
    000274  aa   000010 000000          	zero	4*2,0
    000275                              unassign.e:
    000275  0a   000071 7020 00         	tsx2	.setup
    000276  aa   000000 6340 07         	ldi	=0,dl
    000277  4a  4 00050 3521 20         	short_call rcp_unassign_$unassign(ap|0)
    000300  aa  7 00036 6701 20
    000301  aa  6 00030 3701 20
    000302  aa  7 00042 7101 20         	return
                                        
                                    32  	gate	unassign_device,rcp_unassign_,unassign_device,4
                        000021          	segdef	unassign_device
    000021                              unassign_device:
    000021  0a   000304 7100 00         	tra	unassign_device.e
    000303  aa   000010 000000          	zero	4*2,0
    000304                              unassign_device.e:
    000304  0a   000071 7020 00         	tsx2	.setup
    000305  aa   000000 6340 07         	ldi	=0,dl
    000306  4a  4 00052 3521 20         	short_call rcp_unassign_$unassign_device(ap|0)
    000307  aa  7 00036 6701 20
    000310  aa  6 00030 3701 20
    000311  aa  7 00042 7101 20         	return
                                        
                                    33  	gate	reserve,rcp_reserve_,rcp_reserve_,3
                        000022          	segdef	reserve
    000022                              reserve:
    000022  0a   000313 7100 00         	tra	reserve.e
    000312  aa   000006 000000          	zero	3*2,0
    000313                              reserve.e:
    000313  0a   000071 7020 00         	tsx2	.setup
    000314  aa   000000 6340 07         	ldi	=0,dl
    000315  4a  4 00054 3521 20         	short_call rcp_reserve_$rcp_reserve_(ap|0)
    000316  aa  7 00036 6701 20
    000317  aa  6 00030 3701 20
    000320  aa  7 00042 7101 20         	return
                                        
                                    34  	gate	cancel_id_string,rcp_cancel_id_,string,2
                        000023          	segdef	cancel_id_string
    000023                              cancel_id_string:
    000023  0a   000322 7100 00         	tra	cancel_id_string.e
    000321  aa   000004 000000          	zero	2*2,0
    000322                              cancel_id_string.e:
    000322  0a   000071 7020 00         	tsx2	.setup
    000323  aa   000000 6340 07         	ldi	=0,dl
    000324  4a  4 00056 3521 20         	short_call rcp_cancel_id_$string(ap|0)
    000325  aa  7 00036 6701 20
    000326  aa  6 00030 3701 20
    000327  aa  7 00042 7101 20         	return
                                        
                                    35  
                                    36  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000330  5a   000003 000000 
    000331  5a   000203 600000 
    000332  aa   000000 000000 
    000333  55   000010 000002 
    000334  5a   000002 400003 
    000335  55   000006 000010 
    000336  aa  004 162 143 160
    000337  aa  137 000 000 000
    000340  55   000020 000003 
    000341  0a   000023 400000 
    000342  55   000013 000003 
    000343  aa  020 143 141 156         cancel_id_string
    000344  aa  143 145 154 137
    000345  aa  151 144 137 163
    000346  aa  164 162 151 156
    000347  aa  147 000 000 000
    000350  55   000025 000010 
    000351  0a   000022 400000 
    000352  55   000023 000003 
    000353  aa  007 162 145 163         reserve
    000354  aa  145 162 166 145
    000355  55   000034 000020 
    000356  0a   000021 400000 
    000357  55   000030 000003 
    000360  aa  017 165 156 141         unassign_device
    000361  aa  163 163 151 147
    000362  aa  156 137 144 145
    000363  aa  166 151 143 145
    000364  55   000042 000025 
    000365  0a   000020 400000 
    000366  55   000037 000003 
    000367  aa  010 165 156 141         unassign
    000370  aa  163 163 151 147
    000371  aa  156 000 000 000
    000372  55   000050 000034 
    000373  0a   000017 400000 
    000374  55   000045 000003 
    000375  aa  012 163 145 164         set_status
    000376  aa  137 163 164 141
    000377  aa  164 165 163 000
    000400  55   000055 000042 
    000401  0a   000016 400000 
    000402  55   000053 000003 
    000403  aa  007 162 145 154         release
    000404  aa  145 141 163 145
    000405  55   000062 000050 
    000406  0a   000015 400000 
    000407  55   000060 000003 
    000410  aa  007 160 162 157         promote
    000411  aa  155 157 164 145
    000412  55   000071 000055 
    000413  0a   000014 400000 
    000414  55   000065 000003 
    000415  aa  016 154 151 163         list_resources
    000416  aa  164 137 162 145
    000417  aa  163 157 165 162
    000420  aa  143 145 163 000
    000421  55   000077 000062 
    000422  0a   000013 400000 
    000423  55   000074 000003 
    000424  aa  012 147 145 164         get_status
    000425  aa  137 163 164 141
    000426  aa  164 165 163 000
    000427  55   000105 000071 
    000430  0a   000012 400000 
    000431  55   000102 000003 
    000432  aa  011 144 145 164         detach_lv
    000433  aa  141 143 150 137
    000434  aa  154 166 000 000
    000435  55   000112 000077 
    000436  0a   000011 400000 
    000437  55   000110 000003 
    000440  aa  006 144 145 164         detach
    000441  aa  141 143 150 000
    000442  55   000120 000105 
    000443  0a   000010 400000 
    000444  55   000115 000003 
    000445  aa  011 143 157 160         copy_list
    000446  aa  171 137 154 151
    000447  aa  163 164 000 000
    000450  55   000127 000112 
    000451  0a   000007 400000 
    000452  55   000123 000003 
    000453  aa  017 143 150 145         check_attach_lv
    000454  aa  143 153 137 141
    000455  aa  164 164 141 143
    000456  aa  150 137 154 166
    000457  55   000136 000120 
    000460  0a   000006 400000 
    000461  55   000132 000003 
    000462  aa  014 143 150 145         check_attach
    000463  aa  143 153 137 141
    000464  aa  164 164 141 143
    000465  aa  150 000 000 000
    000466  55   000145 000127 
    000467  0a   000005 400000 
    000470  55   000141 000003 
    000471  aa  014 143 150 145         check_assign
    000472  aa  143 153 137 141
    000473  aa  163 163 151 147
    000474  aa  156 000 000 000
    000475  55   000153 000136 
    000476  0a   000004 400000 
    000477  55   000150 000003 
    000500  aa  011 141 164 164         attach_lv
    000501  aa  141 143 150 137
    000502  aa  154 166 000 000
    000503  55   000160 000145 
    000504  0a   000003 400000 
    000505  55   000156 000003 
    000506  aa  006 141 164 164         attach
    000507  aa  141 143 150 000
    000510  55   000167 000153 
    000511  0a   000002 400000 
    000512  55   000163 000003 
    000513  aa  015 141 163 163         assign_device
    000514  aa  151 147 156 137
    000515  aa  144 145 166 151
    000516  aa  143 145 000 000
    000517  55   000174 000160 
    000520  0a   000001 400000 
    000521  55   000172 000003 
    000522  aa  007 141 143 161         acquire
    000523  aa  165 151 162 145
    000524  55   000002 000167 
    000525  6a   000000 400002 
    000526  55   000177 000003 
    000527  aa  014 163 171 155         symbol_table
    000530  aa  142 157 154 137
    000531  aa  164 141 142 154
    000532  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000533  aa   000000 000033 
    000534  5a   000071 000000 
    000535  5a   000105 000000 
    000536  5a   000120 000000 
    000537  5a   000127 000000 
    000540  5a   000136 000000 
    000541  5a   000160 000000 
    000542  5a   000050 000000 
    000543  5a   000145 000000 
    000544  5a   000025 000000 
    000545  aa   000000 000000 
    000546  5a   000112 000000 
    000547  5a   000153 000000 
    000550  5a   000042 000000 
    000551  5a   000020 000000 
    000552  5a   000174 000000 
    000553  5a   000010 000000 
    000554  5a   000034 000000 
    000555  aa   000000 000000 
    000556  aa   000000 000000 
    000557  aa   000000 000000 
    000560  aa   000000 000000 
    000561  5a   000055 000000 
    000562  aa   000000 000000 
    000563  5a   000062 000000 
    000564  5a   000167 000000 
    000565  5a   000077 000000 
    000566  aa   000000 000000 

EXTERNAL NAMES

    000567  aa  006 163 164 162         string
    000570  aa  151 156 147 000
    000571  aa  016 162 143 160         rcp_cancel_id_
    000572  aa  137 143 141 156
    000573  aa  143 145 154 137
    000574  aa  151 144 137 000
    000575  aa  014 162 143 160         rcp_reserve_
    000576  aa  137 162 145 163
    000577  aa  145 162 166 145
    000600  aa  137 000 000 000
    000601  aa  015 162 143 160         rcp_unassign_
    000602  aa  137 165 156 141
    000603  aa  163 163 151 147
    000604  aa  156 137 000 000
    000605  aa  003 163 145 164         set
    000606  aa  014 162 143 160         rcp_promote_
    000607  aa  137 160 162 157
    000610  aa  155 157 164 145
    000611  aa  137 000 000 000
    000612  aa  024 162 143 160         rcprm_list_resource_
    000613  aa  162 155 137 154
    000614  aa  151 163 164 137
    000615  aa  162 145 163 157
    000616  aa  165 162 143 145
    000617  aa  137 000 000 000
    000620  aa  006 163 164 141         status
    000621  aa  164 165 163 000
    000622  aa  016 162 143 160         rcp_detach_lv_
    000623  aa  137 144 145 164
    000624  aa  141 143 150 137
    000625  aa  154 166 137 000
    000626  aa  013 162 143 160         rcp_detach_
    000627  aa  137 144 145 164
    000630  aa  141 143 150 137
    000631  aa  004 154 151 163         list
    000632  aa  164 000 000 000
    000633  aa  011 162 143 160         rcp_copy_
    000634  aa  137 143 157 160
    000635  aa  171 137 000 000
    000636  aa  024 162 143 160         rcp_check_attach_lv_
    000637  aa  137 143 150 145
    000640  aa  143 153 137 141
    000641  aa  164 164 141 143
    000642  aa  150 137 154 166
    000643  aa  137 000 000 000
    000644  aa  021 162 143 160         rcp_check_attach_
    000645  aa  137 143 150 145
    000646  aa  143 153 137 141
    000647  aa  164 164 141 143
    000650  aa  150 137 000 000
    000651  aa  021 162 143 160         rcp_check_assign_
    000652  aa  137 143 150 145
    000653  aa  143 153 137 141
    000654  aa  163 163 151 147
    000655  aa  156 137 000 000
    000656  aa  016 162 143 160         rcp_attach_lv_
    000657  aa  137 141 164 164
    000660  aa  141 143 150 137
    000661  aa  154 166 137 000
    000662  aa  013 162 143 160         rcp_attach_
    000663  aa  137 141 164 164
    000664  aa  141 143 150 137
    000665  aa  022 162 143 160         rcp_assign_device_
    000666  aa  137 141 163 163
    000667  aa  151 147 156 137
    000670  aa  144 145 166 151
    000671  aa  143 145 137 000
    000672  aa  024 162 143 160         rcprm_find_resource_
    000673  aa  162 155 137 146
    000674  aa  151 156 144 137
    000675  aa  162 145 163 157
    000676  aa  165 162 143 145
    000677  aa  137 000 000 000
    000700  aa  007 163 151 147         signal_
    000701  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000702  aa   000004 000000 
    000703  55   000241 000237 
    000704  aa   000004 000000 
    000705  55   000245 000245 
    000706  aa   000004 000000 
    000707  55   000251 000030 
    000710  aa   000004 000000 
    000711  55   000251 000037 
    000712  aa   000004 000000 
    000713  55   000342 000255 
    000714  aa   000004 000000 
    000715  55   000342 000053 
    000716  aa   000004 000000 
    000717  55   000256 000256 
    000720  aa   000004 000000 
    000721  55   000262 000262 
    000722  aa   000004 000000 
    000723  55   000342 000270 
    000724  aa   000004 000000 
    000725  55   000272 000272 
    000726  aa   000004 000000 
    000727  55   000276 000110 
    000730  aa   000004 000000 
    000731  55   000303 000301 
    000732  aa   000004 000000 
    000733  55   000306 000306 
    000734  aa   000004 000000 
    000735  55   000314 000314 
    000736  aa   000004 000000 
    000737  55   000321 000321 
    000740  aa   000004 000000 
    000741  55   000326 000326 
    000742  aa   000004 000000 
    000743  55   000332 000156 
    000744  aa   000004 000000 
    000745  55   000335 000335 
    000746  aa   000004 000000 
    000747  55   000342 000172 
    000750  aa   000004 000000 
    000751  55   000350 000350 
    000752  aa   000001 000000 
    000753  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000754  5a   000352 000000 
    000755  5a   000354 000000 
    000756  5a   000356 000000 
    000757  5a   000360 000000 
    000760  5a   000362 000000 
    000761  5a   000364 000000 
    000762  5a   000366 000000 
    000763  5a   000370 000000 
    000764  5a   000372 000000 
    000765  5a   000374 000000 
    000766  5a   000376 000000 
    000767  5a   000400 000000 
    000770  5a   000402 000000 
    000771  5a   000404 000000 
    000772  5a   000406 000000 
    000773  5a   000410 000000 
    000774  5a   000412 000000 
    000775  5a   000414 000000 
    000776  5a   000416 000000 
    000777  5a   000420 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000330 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000060 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000447 0000 00
    000012  9a   777766 0000 46         rcprm_find_resource_|acquire
    000013  5a   000446 0000 00
    000014  9a   777764 0000 46         rcp_assign_device_|rcp_assign_device_
    000015  5a   000445 0000 00
    000016  9a   777762 0000 46         rcp_attach_|attach
    000017  5a   000444 0000 00
    000020  9a   777760 0000 46         rcp_attach_lv_|rcp_attach_lv_
    000021  5a   000443 0000 00
    000022  9a   777756 0000 46         rcp_check_assign_|rcp_check_assign_
    000023  5a   000442 0000 00
    000024  9a   777754 0000 46         rcp_check_attach_|rcp_check_attach_
    000025  5a   000441 0000 00
    000026  9a   777752 0000 46         rcp_check_attach_lv_|rcp_check_attach_lv_
    000027  5a   000440 0000 00
    000030  9a   777750 0000 46         rcp_copy_|list
    000031  5a   000437 0000 00
    000032  9a   777746 0000 46         rcp_detach_|detach
    000033  5a   000436 0000 00
    000034  9a   777744 0000 46         rcp_detach_lv_|rcp_detach_lv_
    000035  5a   000435 0000 00
    000036  9a   777742 0000 46         rcprm_find_resource_|status
    000037  5a   000434 0000 00
    000040  9a   777740 0000 46         rcprm_list_resource_|rcprm_list_resource_
    000041  5a   000433 0000 00
    000042  9a   777736 0000 46         rcp_promote_|rcp_promote_
    000043  5a   000432 0000 00
    000044  9a   777734 0000 46         rcprm_find_resource_|release
    000045  5a   000431 0000 00
    000046  9a   777732 0000 46         rcprm_find_resource_|set
    000047  5a   000430 0000 00
    000050  9a   777730 0000 46         rcp_unassign_|unassign
    000051  5a   000427 0000 00
    000052  9a   777726 0000 46         rcp_unassign_|unassign_device
    000053  5a   000426 0000 00
    000054  9a   777724 0000 46         rcp_reserve_|rcp_reserve_
    000055  5a   000425 0000 00
    000056  9a   777722 0000 46         rcp_cancel_id_|string
    000057  5a   000424 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   240707 130046 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000235 
    000020  aa   000000 000116 
    000021  aa   000156 000144 
    000022  aa   000226 000116 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000033 
    000067  aa   175453 030317 
    000070  aa   000000 117547 
    000071  aa   227255 000000 
    000072  aa   000105 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   076163 160145          >spec>install>1115>rcp_.alm
    000077  aa   143076 151156 
    000100  aa   163164 141154 
    000101  aa   154076 061061 
    000102  aa   061065 076162 
    000103  aa   143160 137056 
    000104  aa   141154 155040 
    000105  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000106  aa   076151 156143 
    000107  aa   154165 144145 
    000110  aa   076147 141164 
    000111  aa   145137 155141 
    000112  aa   143162 157163 
    000113  aa   056151 156143 
    000114  aa   154056 141154 
    000115  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          24    .actor                   rcp_:          14.
          60    .defs_loop               rcp_:          14.
         121    .gate_errordesc          rcp_:          14.
         116    .gate_errorname          rcp_:          14.
          66    .next_def                rcp_:          14.
         122    .no_gate_error           rcp_:          14.
          43    .return_name             rcp_:          14.
          56    .search_defs             rcp_:          14.
          71    .setup                   rcp_:          14,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
                                                        27,   28,   29,   30,   31,   32,   33,   34.
           1    acquire                  rcp_:          16.
         124    acquire.e                rcp_:          16.
           2    assign_device            rcp_:          17.
         133    assign_device.e          rcp_:          17.
           3    attach                   rcp_:          18.
         142    attach.e                 rcp_:          18.
           4    attach_lv                rcp_:          19.
         151    attach_lv.e              rcp_:          19.
          23    cancel_id_string         rcp_:          34.
         322    cancel_id_string.e       rcp_:          34.
           5    check_assign             rcp_:          20.
         160    check_assign.e           rcp_:          20.
           6    check_attach             rcp_:          21.
         167    check_attach.e           rcp_:          21.
           7    check_attach_lv          rcp_:          22.
         176    check_attach_lv.e        rcp_:          22.
          10    copy_list                rcp_:          23.
         205    copy_list.e              rcp_:          23.
          11    detach                   rcp_:          24.
         214    detach.e                 rcp_:          24.
          12    detach_lv                rcp_:          25.
         223    detach_lv.e              rcp_:          25.
          13    get_status               rcp_:          26.
         232    get_status.e             rcp_:          26.
                list                     rcp_:          23.
          14    list_resources           rcp_:          27.
         241    list_resources.e         rcp_:          27.
          24    main                     rcp_:          14,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
                                                        27,   28,   29,   30,   31,   32,   33,   34.
          15    promote                  rcp_:          28.
         250    promote.e                rcp_:          28.
                rcprm_find_resource_     rcp_:          16,   26,   29,   30.
                rcprm_list_resource_     rcp_:          27.
                rcp_assign_device_       rcp_:          17.
                rcp_attach_              rcp_:          18.
                rcp_attach_lv_           rcp_:          19.
                rcp_cancel_id_           rcp_:          34.
                rcp_check_assign_        rcp_:          20.
                rcp_check_attach_        rcp_:          21.
                rcp_check_attach_lv_     rcp_:          22.
                rcp_copy_                rcp_:          23.
                rcp_detach_              rcp_:          24.
                rcp_detach_lv_           rcp_:          25.
                rcp_promote_             rcp_:          28.
                rcp_reserve_             rcp_:          33.
                rcp_unassign_            rcp_:          31,   32.
          16    release                  rcp_:          29.
         257    release.e                rcp_:          29.
          22    reserve                  rcp_:          33.
         313    reserve.e                rcp_:          33.
                set                      rcp_:          30.
          17    set_status               rcp_:          30.
         266    set_status.e             rcp_:          30.
                signal_                  rcp_:          14.
         110    signal_arglist           rcp_:          14.
                status                   rcp_:          26.
                string                   rcp_:          34.
           0    transfer_vector          rcp_:          14,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
                                                        27,   28,   29,   30,   31,   32,   33,   34.
          24    tv_end                   rcp_:          14.
          20    unassign                 rcp_:          31.
         275    unassign.e               rcp_:          31.
          21    unassign_device          rcp_:          32.
         304    unassign_device.e        rcp_:          32.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
