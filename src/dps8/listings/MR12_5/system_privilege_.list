ASSEMBLY LISTING OF SEGMENT >spec>install>1115>system_privilege_.alm                                                                                                                                
ASSEMBLED ON:	11/11/89  0919.5 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " HISTORY COMMENTS:
                                    13  "  1) change(86-03-17,EJSharpe), approve(86-03-17,MCR7364),
                                    14  "     audit(86-03-17,Margolin), install(86-04-23,MR12.0-1044):
                                    15  "     Added set_process_audit_flags (from access_audit_gate_)
                                    16  "  2) change(88-05-11,Lippard), approve(88-05-02,MCR7881),
                                    17  "     audit(88-06-16,Fawcett), install(88-08-02,MR12.2-1074):
                                    18  "     Added set_entry_audit_switch.
                                    19  "                                                      END HISTORY COMMENTS
                                    20  
                                    21  
                                    22  " Modified 84-12-05 by EJ Sharpe - changed for new sys_seg_priv entry to reclassify
                                    23  "				also removed get_audit_flags entry (now
                                    24  "				available in access_audit_gate_)
                                    25  "
                                    26  include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    27  
                                    28  hardcore_gate_info	system_privilege_
    000000                              	name	system_privilege_
                                        
                                        	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                        
                                        	include	stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                        	include	gate_data
                                   4-1  
                                   4-2  
                                   4-3       "BEGIN INCLUDE FILE gate_data.incl.alm
                                   4-4  
                                   4-5  
                                   4-6  	"Created 11/07/83  0737.6 est Mon by convert_include_file,
                                   4-7  	"   Version of 11/07/82  1445.1 est Sun.
                                   4-8  
                                   4-9  	"Made from >user_dir_dir>Multics>Margulies>h>gate_data.incl.pl1,
                                  4-10  	"   modified 11/07/83  0737.5 est Mon
                                  4-11  
                                  4-12  "
                                  4-13  "	Structure gate_table
                                  4-14  "
                        000003    4-15  	equ	gate_table_size,3
                                  4-16  
                                  4-17  
                        000000    4-18  	equ	gate_table.entryp,0
                        000001    4-19  	equ	gate_table.entryl,1
                        000002    4-20  	equ	gate_table.datap,2
                                  4-21  
                                  4-22  "
                                  4-23  "	Structure gate_entry_data
                                  4-24  "
                        000010    4-25  	equ	gate_entry_data_size,8
                                  4-26  
                        000000    4-27  	equ	gate_entry_data.cpu_time,0	" DOUBLE
                        000002    4-28  	equ	gate_entry_data.vcpu_time,2	" DOUBLE
                        000004    4-29  	equ	gate_entry_data.page_waits,4
                        000005    4-30  	equ	gate_entry_data.calls,5
                        000006    4-31  	equ	gate_entry_data.ring_alarms,6
                                  4-32  
                                  4-33       "END INCLUDE FILE gate_data.incl.alm
                                        
                                        
                                        
                                        	tempd	.temp
                                        	tempd	.label_variable(0)
                                        	tempd	.time1,.time2
                                        	tempd	.unwinder_arglist(0)
                                        	tempd	.on_unit(5)
                                        	temp	.pf,.entryp
                                        	tempd	.vfl_arglist(2)
                                        	tempd	.mcptr
                                        
                                        	use	transfer_vector
                        000000          	equ	.tv_begin,*
                                        
    000000  0a   000036 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                        000032          	segdef	.tv_end
    000032  aa   000640 000000          .tv_end:	vfd	14/(*-.tv_begin)
                                        
                                        	use	main
                                        
                        000034          	segdef	.my_lp
                                        	even
    000034                              .my_lp:	bss	,2
                                        
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        	use	linkage
                                        	join	/link/linkage
                                        
                                        	use	main
                                        
                                        
                                        
    000036  0a   000034 3700 20         .actor:	epplp	.my_lp,*
    000037  aa  0 00002 3521 20         	eppbp	ap|2,*
    000040  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000041  0a   000055 6000 00         	tze	.return_name	zero length => get name
                                        
    000042  aa   000001 0350 07         	adla	1,dl		include length of acc
    000043  aa  0 00004 4501 20         	stz	ap|4,*
    000044  0a   000070 7000 00         	tsx0	.search_defs
                                        
    000045  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000046  aa   277777 600005          	desc9a	bp|-1(3),al
    000047  aa   300000 000005          	desc9a	bb|0,al
    000050  0a   000100 6010 00         	tnz	.next_def
                                        
    000051  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000052  aa   000022 7710 00         	arl	18
    000053  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000054  aa  7 00044 7101 20         	short_return
                                        
    000055                              .return_name:
    000055  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000056  0a   000070 7000 00         	tsx0	.search_defs
                                        
    000057  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000060  0a   000100 6010 00         	tnz	.next_def
                                        
    000061  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000062  aa   000033 7710 00         	arl	27
    000063  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000064  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000065  aa   300000 200005          	desc9a	bb|0(1),al
    000066  aa   200000 000005          	desc9a	bp|0,al
                                        
    000067  aa  7 00044 7101 20         	short_return
                                        
    000070                              .search_defs:
    000070  aa   000000 6220 00         	eax2	0
    000071  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000072                              .defs_loop:
    000072  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000073  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000074  0a   000100 6010 00         	tnz	.next_def
                                        
    000075  aa  1 00002 2271 12         	ldx7	ab|2,2
    000076  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000077  aa   000000 7100 10         	tra	0,0		test definition
    000100                              .next_def:
    000100  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000101  0a   000072 6010 00         	tnz	.defs_loop
                                        
    000102  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000103  aa   000120 6270 00         .setup:	push
    000104  aa  7 00040 2721 20
    000105  0a   000034 3700 20         	epplp	.my_lp,*
    000106  aa  6 00030 6501 00         	sprilp	sp|stack_frame.lp_ptr
                                        
    000107  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000110  0a   000136 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000111  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000112  0a   000136 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000113  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000114  0a   000124 3500 00
    000115  4a  4 00300 3521 20
    000116  aa  6 00040 7531 00
    000117  aa  7 00036 6701 20
    000120  aa  6 00000 1731 00
    000121  aa  6 00040 0731 00
    000122  aa   000000 000000          	oct	0
                                        
    000123  aa   000000 0110 03         	even
    000124                              signal_arglist:
    000124  aa   000002 000004          	zero	2,4
    000125  aa   000002 000000          	zero	2,0
    000126  0a   000132 0000 00         	arg	.gate_errorname
    000127  aa   000000 0000 00         	arg
    000130  0a   000135 0000 00         	arg	.gate_errordesc
    000131  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000132                              .gate_errorname:
    000132  aa  147 141 164 145         	aci	"gate_error"
    000133  aa  137 145 162 162
    000134  aa  157 162 000 000
    000135                              .gate_errordesc:
    000135  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000136                              .no_gate_error:
                                        
    000136                              	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000136  4a  4 00304 6333 20         	rccl	sys_info$clock_,*	calculate times
    000137  4a  4 00306 1773 20         	sbaq	pds$cpu_time
    000140  aa  6 00052 7573 00         	staq	.time1
    000141  4a  4 00310 1773 20         	sbaq	pds$virtual_delta
    000142  aa  6 00054 7573 00         	staq	.time2
    000143  4a  4 00312 2353 20         	lda	pds$page_waits
    000144  aa  6 00070 7553 00         	sta	.pf
    000145                              	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
    000145  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
    000146                              .return_code:
                                        
    000146                              	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
    000146  4a  4 00304 6333 20         	rccl	sys_info$clock_,*	calculate times
    000147  4a  4 00306 1773 20         	sbaq	pds$cpu_time
    000150  aa  6 00050 7573 00         	staq	.temp
    000151  aa  6 00052 1773 00         	sbaq	.time1
    000152  aa  2 00000 0773 00         	adaq	bp|gate_entry_data.cpu_time
    000153  aa  2 00000 7573 00         	staq	bp|gate_entry_data.cpu_time
    000154  aa  6 00050 2373 00         	ldaq	.temp
    000155  4a  4 00310 1773 20         	sbaq	pds$virtual_delta
    000156  aa  6 00054 1773 00         	sbaq	.time2
    000157  aa  2 00002 0773 00         	adaq	bp|gate_entry_data.vcpu_time
    000160  aa  2 00002 7573 00         	staq	bp|gate_entry_data.vcpu_time
    000161  4a  4 00312 2353 20         	lda	pds$page_waits
    000162  aa  6 00070 1353 00         	sbla	.pf
    000163  aa  2 00004 0553 00         	asa	bp|gate_entry_data.page_waits
    000164  aa  2 00005 0543 00         	aos	bp|gate_entry_data.calls
    000165                              	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                                        
                                        			" Poll for ring alarms
    000165  aa  6 00050 7545 00         	sra	.temp	Borrow from time calc
    000166  aa  6 00050 2341 00         	szn	.temp	Zero?
    000167  0a   000175 6000 00         	tze	.return_code_return
                                        
    000170  aa  6 00020 3515 20         	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
    000171  aa  1 00024 2131 20         	epaq	pr1|stack_frame.return_ptr,*
    000172  aa   000007 3750 07         	ana	7,dl	" ring number to which we return
    000173  aa  6 00050 1151 00         	cmpa	.temp
    000174  0a   000176 6050 00         	tpl	.ring_alarm	" ring alarm will occur
                                        
    000175                              .return_code_return:
    000175  aa  7 00042 7101 20         	return
                                        
    000176                              .ring_alarm:		" perhaps we can handle without faults?
                                        
    000176  aa  2 00006 0541 00         	aos	bp|gate_entry_data.ring_alarms
    000177  aa  6 00050 4501 00         	stz	.temp	" return argument for ring_alarm$poll
    000200  0a   000220 2370 00         	ldaq	.one_arg_header
    000201  aa  6 00100 7571 00         	staq	.ring_alarm_arg_list
    000202  aa  6 00050 3515 00         	epp1	.temp
    000203  aa  6 00102 2515 00         	spri1	.ring_alarm_arg_list+2
    000204  aa  6 00100 3501 00         	eppap	.ring_alarm_arg_list
    000205  4a  4 00314 3521 20         	short_call ring_alarm$poll
    000206  aa  7 00036 6701 20
    000207  aa  6 00030 3701 20
    000210  aa  6 00050 2341 00         	szn	.temp
    000211  0a   000175 6000 00         	tze	.return_code_return
    000212  aa  6 00020 3721 20         	eppsp	sp|stack_frame.prev_sp,*
    000213  4a  4 00316 6521 20         	sprisp	pds$pre_empt_poll_return          " short-return from here
    000214  aa  7 00022 3515 20         	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
    000215  aa  7 00024 2515 00         	spri1	sb|stack_header.stack_end_ptr
                                        " Leave SB as stack_0, so pxss can get to operators.
    000216  4a  4 00320 7101 20         	tra	pxss$pre_empt_poll
                                        
                                        	tempd	.ring_alarm_arg_list(2)
    000217  aa   000000 0110 03         	even
    000220                              .one_arg_header:
    000220  aa   000004 000004          	vfd	17/2,1/0,18/4
    000221  aa   000000 000000          	vfd	18/0,18/0
                                        
                                        
                                        
                                    29  
                                    30  hgate	aim_check_soos,access_class_check,aim_check_soos,3,bad_dir_trap
                        000001          	segdef	aim_check_soos
    000001                              aim_check_soos:
    000001  0a   000223 7100 00         	tra	aim_check_soos.e
    000222  a8   000006 000010          	zero	3*2,aim_check_soos.t
    000223                              aim_check_soos.e:
    000223  0a   000103 7020 00         	tsx2	.setup
    000224  0a   000521 7000 00         	tsx0	.set_dir_trap
    000225  aa   000000 6340 07         	ldi	=0,dl
    000226  4a  4 00322 3521 20         	short_call access_class_check$aim_check_soos(ap|0)
    000227  aa  7 00036 6701 20
    000230  aa  6 00030 3701 20
    000231  9a  4 00010 3521 00         	eppbp	lp|aim_check_soos.t
    000232  0a   000146 7100 00         	tra	.return_code
    000010                              aim_check_soos.t:
    000010                              	bss	,gate_entry_data_size
                                        
                                    31  hgate	check_mode_reset,access_class_check,access_class_check,3,bad_dir_trap
                        000002          	segdef	check_mode_reset
    000002                              check_mode_reset:
    000002  0a   000234 7100 00         	tra	check_mode_reset.e
    000233  a8   000006 000020          	zero	3*2,check_mode_reset.t
    000234                              check_mode_reset.e:
    000234  0a   000103 7020 00         	tsx2	.setup
    000235  0a   000521 7000 00         	tsx0	.set_dir_trap
    000236  aa   000000 6340 07         	ldi	=0,dl
    000237  4a  4 00324 3521 20         	short_call access_class_check$access_class_check(ap|0)
    000240  aa  7 00036 6701 20
    000241  aa  6 00030 3701 20
    000242  9a  4 00020 3521 00         	eppbp	lp|check_mode_reset.t
    000243  0a   000146 7100 00         	tra	.return_code
    000020                              check_mode_reset.t:
    000020                              	bss	,gate_entry_data_size
                                        
                                    32  hgate	comm_priv_off,set_privileges,comm_priv_off,1
                        000003          	segdef	comm_priv_off
    000003                              comm_priv_off:
    000003  0a   000245 7100 00         	tra	comm_priv_off.e
    000244  a8   000002 000030          	zero	1*2,comm_priv_off.t
    000245                              comm_priv_off.e:
    000245  0a   000103 7020 00         	tsx2	.setup
    000246  aa   000000 6340 07         	ldi	=0,dl
    000247  4a  4 00326 3521 20         	short_call set_privileges$comm_priv_off(ap|0)
    000250  aa  7 00036 6701 20
    000251  aa  6 00030 3701 20
    000252  9a  4 00030 3521 00         	eppbp	lp|comm_priv_off.t
    000253  0a   000146 7100 00         	tra	.return_code
    000030                              comm_priv_off.t:
    000030                              	bss	,gate_entry_data_size
                                        
                                    33  hgate	comm_priv_on,set_privileges,comm_priv_on,1
                        000004          	segdef	comm_priv_on
    000004                              comm_priv_on:
    000004  0a   000255 7100 00         	tra	comm_priv_on.e
    000254  a8   000002 000040          	zero	1*2,comm_priv_on.t
    000255                              comm_priv_on.e:
    000255  0a   000103 7020 00         	tsx2	.setup
    000256  aa   000000 6340 07         	ldi	=0,dl
    000257  4a  4 00330 3521 20         	short_call set_privileges$comm_priv_on(ap|0)
    000260  aa  7 00036 6701 20
    000261  aa  6 00030 3701 20
    000262  9a  4 00040 3521 00         	eppbp	lp|comm_priv_on.t
    000263  0a   000146 7100 00         	tra	.return_code
    000040                              comm_priv_on.t:
    000040                              	bss	,gate_entry_data_size
                                        
                                    34  hgate	dir_priv_off,set_privileges,dir_priv_off,1
                        000005          	segdef	dir_priv_off
    000005                              dir_priv_off:
    000005  0a   000265 7100 00         	tra	dir_priv_off.e
    000264  a8   000002 000050          	zero	1*2,dir_priv_off.t
    000265                              dir_priv_off.e:
    000265  0a   000103 7020 00         	tsx2	.setup
    000266  aa   000000 6340 07         	ldi	=0,dl
    000267  4a  4 00332 3521 20         	short_call set_privileges$dir_priv_off(ap|0)
    000270  aa  7 00036 6701 20
    000271  aa  6 00030 3701 20
    000272  9a  4 00050 3521 00         	eppbp	lp|dir_priv_off.t
    000273  0a   000146 7100 00         	tra	.return_code
    000050                              dir_priv_off.t:
    000050                              	bss	,gate_entry_data_size
                                        
                                    35  hgate	dir_priv_on,set_privileges,dir_priv_on,1
                        000006          	segdef	dir_priv_on
    000006                              dir_priv_on:
    000006  0a   000275 7100 00         	tra	dir_priv_on.e
    000274  a8   000002 000060          	zero	1*2,dir_priv_on.t
    000275                              dir_priv_on.e:
    000275  0a   000103 7020 00         	tsx2	.setup
    000276  aa   000000 6340 07         	ldi	=0,dl
    000277  4a  4 00334 3521 20         	short_call set_privileges$dir_priv_on(ap|0)
    000300  aa  7 00036 6701 20
    000301  aa  6 00030 3701 20
    000302  9a  4 00060 3521 00         	eppbp	lp|dir_priv_on.t
    000303  0a   000146 7100 00         	tra	.return_code
    000060                              dir_priv_on.t:
    000060                              	bss	,gate_entry_data_size
                                        
                                    36  hgate	initiate,initiate,priv_init,7,bad_dir_trap
                        000007          	segdef	initiate
    000007                              initiate:
    000007  0a   000305 7100 00         	tra	initiate.e
    000304  a8   000016 000070          	zero	7*2,initiate.t
    000305                              initiate.e:
    000305  0a   000103 7020 00         	tsx2	.setup
    000306  0a   000521 7000 00         	tsx0	.set_dir_trap
    000307  aa   000000 6340 07         	ldi	=0,dl
    000310  4a  4 00336 3521 20         	short_call initiate$priv_init(ap|0)
    000311  aa  7 00036 6701 20
    000312  aa  6 00030 3701 20
    000313  9a  4 00070 3521 00         	eppbp	lp|initiate.t
    000314  0a   000146 7100 00         	tra	.return_code
    000070                              initiate.t:
    000070                              	bss	,gate_entry_data_size
                                        
                                    37  hgate	initiate_count,initiate,priv_init_count,7,bad_dir_trap
                        000010          	segdef	initiate_count
    000010                              initiate_count:
    000010  0a   000316 7100 00         	tra	initiate_count.e
    000315  a8   000016 000100          	zero	7*2,initiate_count.t
    000316                              initiate_count.e:
    000316  0a   000103 7020 00         	tsx2	.setup
    000317  0a   000521 7000 00         	tsx0	.set_dir_trap
    000320  aa   000000 6340 07         	ldi	=0,dl
    000321  4a  4 00340 3521 20         	short_call initiate$priv_init_count(ap|0)
    000322  aa  7 00036 6701 20
    000323  aa  6 00030 3701 20
    000324  9a  4 00100 3521 00         	eppbp	lp|initiate_count.t
    000325  0a   000146 7100 00         	tra	.return_code
    000100                              initiate_count.t:
    000100                              	bss	,gate_entry_data_size
                                        
                                    38  hgate	ipc_priv_off,set_privileges,ipc_priv_off,1
                        000011          	segdef	ipc_priv_off
    000011                              ipc_priv_off:
    000011  0a   000327 7100 00         	tra	ipc_priv_off.e
    000326  a8   000002 000110          	zero	1*2,ipc_priv_off.t
    000327                              ipc_priv_off.e:
    000327  0a   000103 7020 00         	tsx2	.setup
    000330  aa   000000 6340 07         	ldi	=0,dl
    000331  4a  4 00342 3521 20         	short_call set_privileges$ipc_priv_off(ap|0)
    000332  aa  7 00036 6701 20
    000333  aa  6 00030 3701 20
    000334  9a  4 00110 3521 00         	eppbp	lp|ipc_priv_off.t
    000335  0a   000146 7100 00         	tra	.return_code
    000110                              ipc_priv_off.t:
    000110                              	bss	,gate_entry_data_size
                                        
                                    39  hgate	ipc_priv_on,set_privileges,ipc_priv_on,1
                        000012          	segdef	ipc_priv_on
    000012                              ipc_priv_on:
    000012  0a   000337 7100 00         	tra	ipc_priv_on.e
    000336  a8   000002 000120          	zero	1*2,ipc_priv_on.t
    000337                              ipc_priv_on.e:
    000337  0a   000103 7020 00         	tsx2	.setup
    000340  aa   000000 6340 07         	ldi	=0,dl
    000341  4a  4 00344 3521 20         	short_call set_privileges$ipc_priv_on(ap|0)
    000342  aa  7 00036 6701 20
    000343  aa  6 00030 3701 20
    000344  9a  4 00120 3521 00         	eppbp	lp|ipc_priv_on.t
    000345  0a   000146 7100 00         	tra	.return_code
    000120                              ipc_priv_on.t:
    000120                              	bss	,gate_entry_data_size
                                        
                                    40  hgate	rcp_priv_off,set_privileges,rcp_priv_off,1
                        000013          	segdef	rcp_priv_off
    000013                              rcp_priv_off:
    000013  0a   000347 7100 00         	tra	rcp_priv_off.e
    000346  a8   000002 000130          	zero	1*2,rcp_priv_off.t
    000347                              rcp_priv_off.e:
    000347  0a   000103 7020 00         	tsx2	.setup
    000350  aa   000000 6340 07         	ldi	=0,dl
    000351  4a  4 00346 3521 20         	short_call set_privileges$rcp_priv_off(ap|0)
    000352  aa  7 00036 6701 20
    000353  aa  6 00030 3701 20
    000354  9a  4 00130 3521 00         	eppbp	lp|rcp_priv_off.t
    000355  0a   000146 7100 00         	tra	.return_code
    000130                              rcp_priv_off.t:
    000130                              	bss	,gate_entry_data_size
                                        
                                    41  hgate	rcp_priv_on,set_privileges,rcp_priv_on,1
                        000014          	segdef	rcp_priv_on
    000014                              rcp_priv_on:
    000014  0a   000357 7100 00         	tra	rcp_priv_on.e
    000356  a8   000002 000140          	zero	1*2,rcp_priv_on.t
    000357                              rcp_priv_on.e:
    000357  0a   000103 7020 00         	tsx2	.setup
    000360  aa   000000 6340 07         	ldi	=0,dl
    000361  4a  4 00350 3521 20         	short_call set_privileges$rcp_priv_on(ap|0)
    000362  aa  7 00036 6701 20
    000363  aa  6 00030 3701 20
    000364  9a  4 00140 3521 00         	eppbp	lp|rcp_priv_on.t
    000365  0a   000146 7100 00         	tra	.return_code
    000140                              rcp_priv_on.t:
    000140                              	bss	,gate_entry_data_size
                                        
                                    42  hgate	reclassify_branch,reclassify,branch,4,bad_dir_trap
                        000015          	segdef	reclassify_branch
    000015                              reclassify_branch:
    000015  0a   000367 7100 00         	tra	reclassify_branch.e
    000366  a8   000010 000150          	zero	4*2,reclassify_branch.t
    000367                              reclassify_branch.e:
    000367  0a   000103 7020 00         	tsx2	.setup
    000370  0a   000521 7000 00         	tsx0	.set_dir_trap
    000371  aa   000000 6340 07         	ldi	=0,dl
    000372  4a  4 00352 3521 20         	short_call reclassify$branch(ap|0)
    000373  aa  7 00036 6701 20
    000374  aa  6 00030 3701 20
    000375  9a  4 00150 3521 00         	eppbp	lp|reclassify_branch.t
    000376  0a   000146 7100 00         	tra	.return_code
    000150                              reclassify_branch.t:
    000150                              	bss	,gate_entry_data_size
                                        
                                    43  hgate	reclassify_node,reclassify,node,4,bad_dir_trap
                        000016          	segdef	reclassify_node
    000016                              reclassify_node:
    000016  0a   000400 7100 00         	tra	reclassify_node.e
    000377  a8   000010 000160          	zero	4*2,reclassify_node.t
    000400                              reclassify_node.e:
    000400  0a   000103 7020 00         	tsx2	.setup
    000401  0a   000521 7000 00         	tsx0	.set_dir_trap
    000402  aa   000000 6340 07         	ldi	=0,dl
    000403  4a  4 00354 3521 20         	short_call reclassify$node(ap|0)
    000404  aa  7 00036 6701 20
    000405  aa  6 00030 3701 20
    000406  9a  4 00160 3521 00         	eppbp	lp|reclassify_node.t
    000407  0a   000146 7100 00         	tra	.return_code
    000160                              reclassify_node.t:
    000160                              	bss	,gate_entry_data_size
                                        
                                    44  hgate	reclassify_sys_seg,reclassify,sys_seg_priv,4,bad_dir_trap
                        000017          	segdef	reclassify_sys_seg
    000017                              reclassify_sys_seg:
    000017  0a   000411 7100 00         	tra	reclassify_sys_seg.e
    000410  a8   000010 000170          	zero	4*2,reclassify_sys_seg.t
    000411                              reclassify_sys_seg.e:
    000411  0a   000103 7020 00         	tsx2	.setup
    000412  0a   000521 7000 00         	tsx0	.set_dir_trap
    000413  aa   000000 6340 07         	ldi	=0,dl
    000414  4a  4 00356 3521 20         	short_call reclassify$sys_seg_priv(ap|0)
    000415  aa  7 00036 6701 20
    000416  aa  6 00030 3701 20
    000417  9a  4 00170 3521 00         	eppbp	lp|reclassify_sys_seg.t
    000420  0a   000146 7100 00         	tra	.return_code
    000170                              reclassify_sys_seg.t:
    000170                              	bss	,gate_entry_data_size
                                        
                                    45  hgate	ring1_priv_off,set_privileges,ring1_priv_off,1
                        000020          	segdef	ring1_priv_off
    000020                              ring1_priv_off:
    000020  0a   000422 7100 00         	tra	ring1_priv_off.e
    000421  a8   000002 000200          	zero	1*2,ring1_priv_off.t
    000422                              ring1_priv_off.e:
    000422  0a   000103 7020 00         	tsx2	.setup
    000423  aa   000000 6340 07         	ldi	=0,dl
    000424  4a  4 00360 3521 20         	short_call set_privileges$ring1_priv_off(ap|0)
    000425  aa  7 00036 6701 20
    000426  aa  6 00030 3701 20
    000427  9a  4 00200 3521 00         	eppbp	lp|ring1_priv_off.t
    000430  0a   000146 7100 00         	tra	.return_code
    000200                              ring1_priv_off.t:
    000200                              	bss	,gate_entry_data_size
                                        
                                    46  hgate	ring1_priv_on,set_privileges,ring1_priv_on,1
                        000021          	segdef	ring1_priv_on
    000021                              ring1_priv_on:
    000021  0a   000432 7100 00         	tra	ring1_priv_on.e
    000431  a8   000002 000210          	zero	1*2,ring1_priv_on.t
    000432                              ring1_priv_on.e:
    000432  0a   000103 7020 00         	tsx2	.setup
    000433  aa   000000 6340 07         	ldi	=0,dl
    000434  4a  4 00362 3521 20         	short_call set_privileges$ring1_priv_on(ap|0)
    000435  aa  7 00036 6701 20
    000436  aa  6 00030 3701 20
    000437  9a  4 00210 3521 00         	eppbp	lp|ring1_priv_on.t
    000440  0a   000146 7100 00         	tra	.return_code
    000210                              ring1_priv_on.t:
    000210                              	bss	,gate_entry_data_size
                                        
                                    47  hgate	seg_priv_off,set_privileges,seg_priv_off,1
                        000022          	segdef	seg_priv_off
    000022                              seg_priv_off:
    000022  0a   000442 7100 00         	tra	seg_priv_off.e
    000441  a8   000002 000220          	zero	1*2,seg_priv_off.t
    000442                              seg_priv_off.e:
    000442  0a   000103 7020 00         	tsx2	.setup
    000443  aa   000000 6340 07         	ldi	=0,dl
    000444  4a  4 00364 3521 20         	short_call set_privileges$seg_priv_off(ap|0)
    000445  aa  7 00036 6701 20
    000446  aa  6 00030 3701 20
    000447  9a  4 00220 3521 00         	eppbp	lp|seg_priv_off.t
    000450  0a   000146 7100 00         	tra	.return_code
    000220                              seg_priv_off.t:
    000220                              	bss	,gate_entry_data_size
                                        
                                    48  hgate	seg_priv_on,set_privileges,seg_priv_on,1
                        000023          	segdef	seg_priv_on
    000023                              seg_priv_on:
    000023  0a   000452 7100 00         	tra	seg_priv_on.e
    000451  a8   000002 000230          	zero	1*2,seg_priv_on.t
    000452                              seg_priv_on.e:
    000452  0a   000103 7020 00         	tsx2	.setup
    000453  aa   000000 6340 07         	ldi	=0,dl
    000454  4a  4 00366 3521 20         	short_call set_privileges$seg_priv_on(ap|0)
    000455  aa  7 00036 6701 20
    000456  aa  6 00030 3701 20
    000457  9a  4 00230 3521 00         	eppbp	lp|seg_priv_on.t
    000460  0a   000146 7100 00         	tra	.return_code
    000230                              seg_priv_on.t:
    000230                              	bss	,gate_entry_data_size
                                        
                                    49  hgate	set_entry_audit_switch,set,audit_flag_path,4
                        000024          	segdef	set_entry_audit_switch
    000024                              set_entry_audit_switch:
    000024  0a   000462 7100 00         	tra	set_entry_audit_switch.e
    000461  a8   000010 000240          	zero	4*2,set_entry_audit_switch.t
    000462                              set_entry_audit_switch.e:
    000462  0a   000103 7020 00         	tsx2	.setup
    000463  aa   000000 6340 07         	ldi	=0,dl
    000464  4a  4 00370 3521 20         	short_call set$audit_flag_path(ap|0)
    000465  aa  7 00036 6701 20
    000466  aa  6 00030 3701 20
    000467  9a  4 00240 3521 00         	eppbp	lp|set_entry_audit_switch.t
    000470  0a   000146 7100 00         	tra	.return_code
    000240                              set_entry_audit_switch.t:
    000240                              	bss	,gate_entry_data_size
                                        
                                    50  hgate	set_process_audit_flags,access_audit_util_,set_audit_flags,1
                        000025          	segdef	set_process_audit_flags
    000025                              set_process_audit_flags:
    000025  0a   000472 7100 00         	tra	set_process_audit_flags.e
    000471  a8   000002 000250          	zero	1*2,set_process_audit_flags.t
    000472                              set_process_audit_flags.e:
    000472  0a   000103 7020 00         	tsx2	.setup
    000473  aa   000000 6340 07         	ldi	=0,dl
    000474  4a  4 00372 3521 20         	short_call access_audit_util_$set_audit_flags(ap|0)
    000475  aa  7 00036 6701 20
    000476  aa  6 00030 3701 20
    000477  9a  4 00250 3521 00         	eppbp	lp|set_process_audit_flags.t
    000500  0a   000146 7100 00         	tra	.return_code
    000250                              set_process_audit_flags.t:
    000250                              	bss	,gate_entry_data_size
                                        
                                    51  hgate	soos_priv_off,set_privileges,soos_priv_off,1
                        000026          	segdef	soos_priv_off
    000026                              soos_priv_off:
    000026  0a   000502 7100 00         	tra	soos_priv_off.e
    000501  a8   000002 000260          	zero	1*2,soos_priv_off.t
    000502                              soos_priv_off.e:
    000502  0a   000103 7020 00         	tsx2	.setup
    000503  aa   000000 6340 07         	ldi	=0,dl
    000504  4a  4 00374 3521 20         	short_call set_privileges$soos_priv_off(ap|0)
    000505  aa  7 00036 6701 20
    000506  aa  6 00030 3701 20
    000507  9a  4 00260 3521 00         	eppbp	lp|soos_priv_off.t
    000510  0a   000146 7100 00         	tra	.return_code
    000260                              soos_priv_off.t:
    000260                              	bss	,gate_entry_data_size
                                        
                                    52  hgate	soos_priv_on,set_privileges,soos_priv_on,1
                        000027          	segdef	soos_priv_on
    000027                              soos_priv_on:
    000027  0a   000512 7100 00         	tra	soos_priv_on.e
    000511  a8   000002 000270          	zero	1*2,soos_priv_on.t
    000512                              soos_priv_on.e:
    000512  0a   000103 7020 00         	tsx2	.setup
    000513  aa   000000 6340 07         	ldi	=0,dl
    000514  4a  4 00376 3521 20         	short_call set_privileges$soos_priv_on(ap|0)
    000515  aa  7 00036 6701 20
    000516  aa  6 00030 3701 20
    000517  9a  4 00270 3521 00         	eppbp	lp|soos_priv_on.t
    000520  0a   000146 7100 00         	tra	.return_code
    000270                              soos_priv_on.t:
    000270                              	bss	,gate_entry_data_size
                                        
                                    53  
                                    54  bad_dir_handler
                                        
                                        	include	on_unit
                                   5-1  "
                                   5-2  "	BEGIN INCLUDE FILE --- on_unit.incl.alm	5/75 RAB
                                   5-3  "
                        000000     5-4  	equ	on_unit.name,0
                        000002     5-5  	equ	on_unit.body,2
                        000004     5-6  	equ	on_unit.size,4
                        000005     5-7  	equ	on_unit.next,5	upper	offset relative to stack FRAME
                        000005     5-8  	equ	on_unit.flags,5	lower
                        000006     5-9  	equ	on_unit.file,6
                        000010    5-10  	equ	on_unit.file_copy,8
                                  5-11  "
                                  5-12  "	END INCLUDE FILE --- on_unit.incl.alm
                                  5-13  "
                                        
                                        	use	transfer_vector
    000030                              .handler_entry:
    000030  0a   000544 7100 00         	tra	.handler
    000031                              .handler_restart_entry:
    000031  0a   000604 7100 00         	tra	.handler_restart_point
                                        
                                        	use	main
    000521                              .set_dir_trap:
    000521  aa  6 00071 7401 00         	stx0	.entryp		save for restart
                                        
    000522  aa   000100 1004 00         	mlr	(),(pr),fill(000)
    000523  aa   000000 000000          	desc9a	0,0
    000524  aa   600056 000050          	desc9a	.on_unit,10*4
    000525  0a   000541 3520 00         	eppbp	.bad_dir_name
    000526  aa  6 00056 2521 00         	spribp	.on_unit+on_unit.name
    000527  0a   000030 3520 00         	eppbp	.handler_entry
    000530  aa  6 00060 2521 00         	spribp	.on_unit+on_unit.body
    000531  0a   000543 7210 00         	lxl1	.bad_dir_desc
    000532  aa  6 00062 4411 00         	sxl1	.on_unit+on_unit.size
    000533  aa  6 00056 6351 00         	eaa	.on_unit		set up on-unit for bad_dir_
    000534  aa  6 00000 1351 03         	sbla	sp|0,du		.. make rel to sp
    000535  aa  6 00036 7551 00         	sta	sp|stack_frame.on_unit_rel_ptrs
    000536  aa   000100 2350 07         	lda	stack_frame.condition_bit,dl
    000537  aa  6 00020 2551 00         	orsa	sp|stack_frame.flag_word
    000540  aa   000000 7100 10         	tra	0,0
                                        
                                        	string	bad_dir_
    000541                              .bad_dir_name:
    000541  aa  142 141 144 137         	aci	"bad_dir_"
    000542  aa  144 151 162 137
    000543                              .bad_dir_desc:
    000543  aa   525000 000010          	vfd	o9/525,o27/8
                                        
                                        
                                        
                                        
    000544  aa  6 00000 2131 00         .handler:	epaq	sp|0		verify that call came from ring 0
    000545  aa   777777 3150 07         	cana	-1,dl		check ring number in AL
    000546  0a   000550 6000 00         	tze	*+2
    000547  aa   000000 000000          	zero	0		go way kid you bother me
                                        
    000550  aa   000120 6270 00         	push			" ok, we like the call
    000551  aa  7 00040 2721 20
    000552  0a   000034 3700 20         	epplp	.my_lp,*
    000553  aa  0 00000 2201 00         	ldx0	ap|0		get display
    000554  aa  0 00002 3521 30         	eppbp	ap|2,0*
    000555  aa  2 00020 2351 00         	lda	bp|stack_frame.prev_sp
    000556  aa   700000 3150 07         	cana	=o700000,dl	from another ring?
    000557  0a   000601 6000 00         	tze	.continue_signal	if not, back to signal_
    000560  aa  0 00002 3501 20         	eppap	ap|2,*		Get mcptr
    000561  aa  0 00000 3501 20         	eppap	ap|0,*		..
    000562  aa  2 00076 2501 00         	spriap	bp|.mcptr		.. save in gate frame
    000563  aa  6 00054 2521 00         	spribp	.label_variable+2
    000564  0a   000031 3520 00         	eppbp	.handler_restart_entry
    000565  aa  6 00052 2521 00         	spribp	.label_variable
    000566  aa  6 00052 3521 00         	eppbp	.label_variable
    000567  aa  6 00060 2521 00         	spribp	.unwinder_arglist+2
    000570  aa   004000 4310 07         	fld	=1b24,dl
    000571  aa  6 00056 7571 00         	staq	.unwinder_arglist
    000572  aa  6 00000 2541 00         	call	unwinder_$unwinder_(.unwinder_arglist)
    000573  aa  6 00056 3501 00
    000574  4a  4 00302 3521 20
    000575  aa  6 00040 7531 00
    000576  aa  7 00036 6701 20
    000577  aa  6 00000 1731 00
    000600  aa  6 00040 0731 00
                                        
    000601                              .continue_signal:
    000601  aa   400000 2350 03         	lda	=o400000,du	"1"b
    000602  aa  0 00012 7551 20         	sta	ap|10,*		set continue bit
    000603  aa  7 00042 7101 20         	return
                                        
    000604                              .handler_restart_point:
    000604  aa  6 00000 2131 00         	epaq	sp|0		check that call came from ring 0
    000605  aa   777777 3150 07         	cana	-1,dl
    000606  0a   000610 6000 00         	tze	*+2
    000607  aa   000001 000000          	zero	1
    000610  0a   000034 3700 20         	epplp	.my_lp,*
    000611  aa   000101 3350 07         	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
    000612  aa  6 00020 3551 00         	ansa	sp|stack_frame.flag_word
    000613  aa  6 00076 3521 00         	eppbp	.mcptr
    000614  aa  6 00074 2521 00         	spribp	.vfl_arglist+2
    000615  aa   004000 4310 07         	fld	=1b24,dl
    000616  aa  6 00072 7571 00         	staq	.vfl_arglist
    000617  4a  4 00400 3521 20         	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
    000620  aa  7 00036 6701 20
    000621  aa  6 00030 3701 20
    000622  aa  6 00071 2201 00         	ldx0	.entryp
    000623  aa  6 00032 3501 20         	eppap	sp|stack_frame.arg_ptr,*
    000624  aa   000000 7100 10         	tra	0,0		retry the call
                                        
                                        
                                    55  
                                    56  end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000626  5a   000003 000000 
    000627  5a   000277 600000 
    000630  aa   000000 000000 
    000631  55   000013 000002 
    000632  5a   000002 400003 
    000633  55   000006 000013 
    000634  aa  021 163 171 163
    000635  aa  164 145 155 137
    000636  aa  160 162 151 166
    000637  aa  151 154 145 147
    000640  aa  145 137 000 000
    000641  55   000022 000003 
    000642  0a   000027 400000 
    000643  55   000016 000003 
    000644  aa  014 163 157 157         soos_priv_on
    000645  aa  163 137 160 162
    000646  aa  151 166 137 157
    000647  aa  156 000 000 000
    000650  55   000031 000013 
    000651  0a   000026 400000 
    000652  55   000025 000003 
    000653  aa  015 163 157 157         soos_priv_off
    000654  aa  163 137 160 162
    000655  aa  151 166 137 157
    000656  aa  146 146 000 000
    000657  55   000042 000022 
    000660  0a   000025 400000 
    000661  55   000034 000003 
    000662  aa  027 163 145 164         set_process_audit_flags
    000663  aa  137 160 162 157
    000664  aa  143 145 163 163
    000665  aa  137 141 165 144
    000666  aa  151 164 137 146
    000667  aa  154 141 147 163
    000670  55   000053 000031 
    000671  0a   000024 400000 
    000672  55   000045 000003 
    000673  aa  026 163 145 164         set_entry_audit_switch
    000674  aa  137 145 156 164
    000675  aa  162 171 137 141
    000676  aa  165 144 151 164
    000677  aa  137 163 167 151
    000700  aa  164 143 150 000
    000701  55   000061 000042 
    000702  0a   000023 400000 
    000703  55   000056 000003 
    000704  aa  013 163 145 147         seg_priv_on
    000705  aa  137 160 162 151
    000706  aa  166 137 157 156
    000707  55   000070 000053 
    000710  0a   000022 400000 
    000711  55   000064 000003 
    000712  aa  014 163 145 147         seg_priv_off
    000713  aa  137 160 162 151
    000714  aa  166 137 157 146
    000715  aa  146 000 000 000
    000716  55   000077 000061 
    000717  0a   000021 400000 
    000720  55   000073 000003 
    000721  aa  015 162 151 156         ring1_priv_on
    000722  aa  147 061 137 160
    000723  aa  162 151 166 137
    000724  aa  157 156 000 000
    000725  55   000106 000070 
    000726  0a   000020 400000 
    000727  55   000102 000003 
    000730  aa  016 162 151 156         ring1_priv_off
    000731  aa  147 061 137 160
    000732  aa  162 151 166 137
    000733  aa  157 146 146 000
    000734  55   000116 000077 
    000735  0a   000017 400000 
    000736  55   000111 000003 
    000737  aa  022 162 145 143         reclassify_sys_seg
    000740  aa  154 141 163 163
    000741  aa  151 146 171 137
    000742  aa  163 171 163 137
    000743  aa  163 145 147 000
    000744  55   000125 000106 
    000745  0a   000016 400000 
    000746  55   000121 000003 
    000747  aa  017 162 145 143         reclassify_node
    000750  aa  154 141 163 163
    000751  aa  151 146 171 137
    000752  aa  156 157 144 145
    000753  55   000135 000116 
    000754  0a   000015 400000 
    000755  55   000130 000003 
    000756  aa  021 162 145 143         reclassify_branch
    000757  aa  154 141 163 163
    000760  aa  151 146 171 137
    000761  aa  142 162 141 156
    000762  aa  143 150 000 000
    000763  55   000143 000125 
    000764  0a   000014 400000 
    000765  55   000140 000003 
    000766  aa  013 162 143 160         rcp_priv_on
    000767  aa  137 160 162 151
    000770  aa  166 137 157 156
    000771  55   000152 000135 
    000772  0a   000013 400000 
    000773  55   000146 000003 
    000774  aa  014 162 143 160         rcp_priv_off
    000775  aa  137 160 162 151
    000776  aa  166 137 157 146
    000777  aa  146 000 000 000
    001000  55   000160 000143 
    001001  0a   000012 400000 
    001002  55   000155 000003 
    001003  aa  013 151 160 143         ipc_priv_on
    001004  aa  137 160 162 151
    001005  aa  166 137 157 156
    001006  55   000167 000152 
    001007  0a   000011 400000 
    001010  55   000163 000003 
    001011  aa  014 151 160 143         ipc_priv_off
    001012  aa  137 160 162 151
    001013  aa  166 137 157 146
    001014  aa  146 000 000 000
    001015  55   000176 000160 
    001016  0a   000010 400000 
    001017  55   000172 000003 
    001020  aa  016 151 156 151         initiate_count
    001021  aa  164 151 141 164
    001022  aa  145 137 143 157
    001023  aa  165 156 164 000
    001024  55   000204 000167 
    001025  0a   000007 400000 
    001026  55   000201 000003 
    001027  aa  010 151 156 151         initiate
    001030  aa  164 151 141 164
    001031  aa  145 000 000 000
    001032  55   000212 000176 
    001033  0a   000006 400000 
    001034  55   000207 000003 
    001035  aa  013 144 151 162         dir_priv_on
    001036  aa  137 160 162 151
    001037  aa  166 137 157 156
    001040  55   000221 000204 
    001041  0a   000005 400000 
    001042  55   000215 000003 
    001043  aa  014 144 151 162         dir_priv_off
    001044  aa  137 160 162 151
    001045  aa  166 137 157 146
    001046  aa  146 000 000 000
    001047  55   000230 000212 
    001050  0a   000004 400000 
    001051  55   000224 000003 
    001052  aa  014 143 157 155         comm_priv_on
    001053  aa  155 137 160 162
    001054  aa  151 166 137 157
    001055  aa  156 000 000 000
    001056  55   000237 000221 
    001057  0a   000003 400000 
    001060  55   000233 000003 
    001061  aa  015 143 157 155         comm_priv_off
    001062  aa  155 137 160 162
    001063  aa  151 166 137 157
    001064  aa  146 146 000 000
    001065  55   000247 000230 
    001066  0a   000002 400000 
    001067  55   000242 000003 
    001070  aa  020 143 150 145         check_mode_reset
    001071  aa  143 153 137 155
    001072  aa  157 144 145 137
    001073  aa  162 145 163 145
    001074  aa  164 000 000 000
    001075  55   000256 000237 
    001076  0a   000001 400000 
    001077  55   000252 000003 
    001100  aa  016 141 151 155         aim_check_soos
    001101  aa  137 143 150 145
    001102  aa  143 153 137 163
    001103  aa  157 157 163 000
    001104  55   000263 000247 
    001105  0a   000034 400000 
    001106  55   000261 000003 
    001107  aa  006 056 155 171         .my_lp
    001110  aa  137 154 160 000
    001111  55   000270 000256 
    001112  0a   000032 400000 
    001113  55   000266 000003 
    001114  aa  007 056 164 166         .tv_end
    001115  aa  137 145 156 144
    001116  55   000002 000263 
    001117  6a   000000 400002 
    001120  55   000273 000003 
    001121  aa  014 163 171 155         symbol_table
    001122  aa  142 157 154 137
    001123  aa  164 141 142 154
    001124  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001125  aa   000000 000065 
    001126  5a   000167 000000 
    001127  aa   000000 000000 
    001130  5a   000031 000000 
    001131  aa   000000 000000 
    001132  5a   000042 000000 
    001133  5a   000230 000000 
    001134  5a   000221 000000 
    001135  aa   000000 000000 
    001136  aa   000000 000000 
    001137  aa   000000 000000 
    001140  5a   000237 000000 
    001141  5a   000061 000000 
    001142  5a   000176 000000 
    001143  5a   000053 000000 
    001144  5a   000160 000000 
    001145  5a   000256 000000 
    001146  5a   000152 000000 
    001147  aa   000000 000000 
    001150  aa   000000 000000 
    001151  5a   000212 000000 
    001152  aa   000000 000000 
    001153  5a   000204 000000 
    001154  aa   000000 000000 
    001155  aa   000000 000000 
    001156  aa   000000 000000 
    001157  aa   000000 000000 
    001160  aa   000000 000000 
    001161  aa   000000 000000 
    001162  5a   000270 000000 
    001163  aa   000000 000000 
    001164  aa   000000 000000 
    001165  aa   000000 000000 
    001166  aa   000000 000000 
    001167  aa   000000 000000 
    001170  aa   000000 000000 
    001171  aa   000000 000000 
    001172  aa   000000 000000 
    001173  aa   000000 000000 
    001174  aa   000000 000000 
    001175  aa   000000 000000 
    001176  aa   000000 000000 
    001177  5a   000263 000000 
    001200  5a   000077 000000 
    001201  5a   000106 000000 
    001202  5a   000070 000000 
    001203  5a   000125 000000 
    001204  5a   000247 000000 
    001205  aa   000000 000000 
    001206  5a   000116 000000 
    001207  5a   000022 000000 
    001210  5a   000143 000000 
    001211  5a   000013 000000 
    001212  5a   000135 000000 

EXTERNAL NAMES

    001213  aa  023 166 145 162         verify_lock_bad_dir
    001214  aa  151 146 171 137
    001215  aa  154 157 143 153
    001216  aa  137 142 141 144
    001217  aa  137 144 151 162
    001220  aa  013 166 145 162         verify_lock
    001221  aa  151 146 171 137
    001222  aa  154 157 143 153
    001223  aa  017 163 145 164         set_audit_flags
    001224  aa  137 141 165 144
    001225  aa  151 164 137 146
    001226  aa  154 141 147 163
    001227  aa  022 141 143 143         access_audit_util_
    001230  aa  145 163 163 137
    001231  aa  141 165 144 151
    001232  aa  164 137 165 164
    001233  aa  151 154 137 000
    001234  aa  017 141 165 144         audit_flag_path
    001235  aa  151 164 137 146
    001236  aa  154 141 147 137
    001237  aa  160 141 164 150
    001240  aa  003 163 145 164         set
    001241  aa  014 163 171 163         sys_seg_priv
    001242  aa  137 163 145 147
    001243  aa  137 160 162 151
    001244  aa  166 000 000 000
    001245  aa  004 156 157 144         node
    001246  aa  145 000 000 000
    001247  aa  006 142 162 141         branch
    001250  aa  156 143 150 000
    001251  aa  012 162 145 143         reclassify
    001252  aa  154 141 163 163
    001253  aa  151 146 171 000
    001254  aa  017 160 162 151         priv_init_count
    001255  aa  166 137 151 156
    001256  aa  151 164 137 143
    001257  aa  157 165 156 164
    001260  aa  011 160 162 151         priv_init
    001261  aa  166 137 151 156
    001262  aa  151 164 000 000
    001263  aa  016 163 145 164         set_privileges
    001264  aa  137 160 162 151
    001265  aa  166 151 154 145
    001266  aa  147 145 163 000
    001267  aa  022 141 143 143         access_class_check
    001270  aa  145 163 163 137
    001271  aa  143 154 141 163
    001272  aa  163 137 143 150
    001273  aa  145 143 153 000
    001274  aa  015 160 162 145         pre_empt_poll
    001275  aa  137 145 155 160
    001276  aa  164 137 160 157
    001277  aa  154 154 000 000
    001300  aa  004 160 170 163         pxss
    001301  aa  163 000 000 000
    001302  aa  024 160 162 145         pre_empt_poll_return
    001303  aa  137 145 155 160
    001304  aa  164 137 160 157
    001305  aa  154 154 137 162
    001306  aa  145 164 165 162
    001307  aa  156 000 000 000
    001310  aa  004 160 157 154         poll
    001311  aa  154 000 000 000
    001312  aa  012 162 151 156         ring_alarm
    001313  aa  147 137 141 154
    001314  aa  141 162 155 000
    001315  aa  012 160 141 147         page_waits
    001316  aa  145 137 167 141
    001317  aa  151 164 163 000
    001320  aa  015 166 151 162         virtual_delta
    001321  aa  164 165 141 154
    001322  aa  137 144 145 154
    001323  aa  164 141 000 000
    001324  aa  010 143 160 165         cpu_time
    001325  aa  137 164 151 155
    001326  aa  145 000 000 000
    001327  aa  003 160 144 163         pds
    001330  aa  006 143 154 157         clock_
    001331  aa  143 153 137 000
    001332  aa  010 163 171 163         sys_info
    001333  aa  137 151 156 146
    001334  aa  157 000 000 000
    001335  aa  011 165 156 167         unwinder_
    001336  aa  151 156 144 145
    001337  aa  162 137 000 000
    001340  aa  007 163 151 147         signal_
    001341  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001342  aa   000004 000000 
    001343  55   000372 000365 
    001344  aa   000004 000000 
    001345  55   000435 000016 
    001346  aa   000004 000000 
    001347  55   000435 000025 
    001350  aa   000004 000000 
    001351  55   000401 000375 
    001352  aa   000004 000000 
    001353  55   000412 000406 
    001354  aa   000004 000000 
    001355  55   000435 000056 
    001356  aa   000004 000000 
    001357  55   000435 000064 
    001360  aa   000004 000000 
    001361  55   000435 000073 
    001362  aa   000004 000000 
    001363  55   000435 000102 
    001364  aa   000004 000000 
    001365  55   000423 000413 
    001366  aa   000004 000000 
    001367  55   000423 000417 
    001370  aa   000004 000000 
    001371  55   000423 000421 
    001372  aa   000004 000000 
    001373  55   000435 000140 
    001374  aa   000004 000000 
    001375  55   000435 000146 
    001376  aa   000004 000000 
    001377  55   000435 000155 
    001400  aa   000004 000000 
    001401  55   000435 000163 
    001402  aa   000004 000000 
    001403  55   000201 000426 
    001404  aa   000004 000000 
    001405  55   000201 000432 
    001406  aa   000004 000000 
    001407  55   000435 000207 
    001410  aa   000004 000000 
    001411  55   000435 000215 
    001412  aa   000004 000000 
    001413  55   000435 000224 
    001414  aa   000004 000000 
    001415  55   000435 000233 
    001416  aa   000004 000000 
    001417  55   000441 000441 
    001420  aa   000004 000000 
    001421  55   000441 000252 
    001422  aa   000004 000000 
    001423  55   000452 000446 
    001424  aa   000004 000000 
    001425  55   000501 000454 
    001426  aa   000004 000000 
    001427  55   000464 000462 
    001430  aa   000004 000000 
    001431  55   000501 000467 
    001432  aa   000004 000000 
    001433  55   000501 000472 
    001434  aa   000004 000000 
    001435  55   000501 000476 
    001436  aa   000004 000000 
    001437  55   000504 000502 
    001440  aa   000004 000000 
    001441  55   000507 000507 
    001442  aa   000004 000000 
    001443  55   000512 000512 
    001444  aa   000001 000000 
    001445  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001446  5a   000514 000000 
    001447  5a   000516 000000 
    001450  5a   000520 000000 
    001451  5a   000522 000000 
    001452  5a   000524 000000 
    001453  5a   000526 000000 
    001454  5a   000530 000000 
    001455  5a   000532 000000 
    001456  5a   000534 000000 
    001457  5a   000536 000000 
    001460  5a   000540 000000 
    001461  5a   000542 000000 
    001462  5a   000544 000000 
    001463  5a   000546 000000 
    001464  5a   000550 000000 
    001465  5a   000552 000000 
    001466  5a   000554 000000 
    001467  5a   000556 000000 
    001470  5a   000560 000000 
    001471  5a   000562 000000 
    001472  5a   000564 000000 
    001473  5a   000566 000000 
    001474  5a   000570 000000 
    001475  5a   000572 000000 
    001476  5a   000574 000000 
    001477  5a   000576 000000 
    001500  5a   000600 000000 
    001501  5a   000602 000000 
    001502  5a   000604 000000 
    001503  5a   000606 000000 
    001504  5a   000610 000000 
    001505  5a   000612 000000 
    001506  5a   000614 000000 
    001507  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000626 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000300 000402 
    000007  a2   000000 000270 
    000300  9a   777500 0000 46         signal_|signal_
    000301  5a   000660 0000 00
    000302  9a   777476 0000 46         unwinder_|unwinder_
    000303  5a   000657 0000 00
    000304  9a   777474 0000 46         sys_info|clock_
    000305  5a   000656 0000 20
    000306  9a   777472 0000 46         pds|cpu_time
    000307  5a   000655 0000 00
    000310  9a   777470 0000 46         pds|virtual_delta
    000311  5a   000654 0000 00
    000312  9a   777466 0000 46         pds|page_waits
    000313  5a   000653 0000 00
    000314  9a   777464 0000 46         ring_alarm|poll
    000315  5a   000652 0000 00
    000316  9a   777462 0000 46         pds|pre_empt_poll_return
    000317  5a   000651 0000 00
    000320  9a   777460 0000 46         pxss|pre_empt_poll
    000321  5a   000650 0000 00
    000322  9a   777456 0000 46         access_class_check|aim_check_soos
    000323  5a   000647 0000 00
    000324  9a   777454 0000 46         access_class_check|access_class_check
    000325  5a   000646 0000 00
    000326  9a   777452 0000 46         set_privileges|comm_priv_off
    000327  5a   000645 0000 00
    000330  9a   777450 0000 46         set_privileges|comm_priv_on
    000331  5a   000644 0000 00
    000332  9a   777446 0000 46         set_privileges|dir_priv_off
    000333  5a   000643 0000 00
    000334  9a   777444 0000 46         set_privileges|dir_priv_on
    000335  5a   000642 0000 00
    000336  9a   777442 0000 46         initiate|priv_init
    000337  5a   000641 0000 00
    000340  9a   777440 0000 46         initiate|priv_init_count
    000341  5a   000640 0000 00
    000342  9a   777436 0000 46         set_privileges|ipc_priv_off
    000343  5a   000637 0000 00
    000344  9a   777434 0000 46         set_privileges|ipc_priv_on
    000345  5a   000636 0000 00
    000346  9a   777432 0000 46         set_privileges|rcp_priv_off
    000347  5a   000635 0000 00
    000350  9a   777430 0000 46         set_privileges|rcp_priv_on
    000351  5a   000634 0000 00
    000352  9a   777426 0000 46         reclassify|branch
    000353  5a   000633 0000 00
    000354  9a   777424 0000 46         reclassify|node
    000355  5a   000632 0000 00
    000356  9a   777422 0000 46         reclassify|sys_seg_priv
    000357  5a   000631 0000 00
    000360  9a   777420 0000 46         set_privileges|ring1_priv_off
    000361  5a   000630 0000 00
    000362  9a   777416 0000 46         set_privileges|ring1_priv_on
    000363  5a   000627 0000 00
    000364  9a   777414 0000 46         set_privileges|seg_priv_off
    000365  5a   000626 0000 00
    000366  9a   777412 0000 46         set_privileges|seg_priv_on
    000367  5a   000625 0000 00
    000370  9a   777410 0000 46         set|audit_flag_path
    000371  5a   000624 0000 00
    000372  9a   777406 0000 46         access_audit_util_|set_audit_flags
    000373  5a   000623 0000 00
    000374  9a   777404 0000 46         set_privileges|soos_priv_off
    000375  5a   000622 0000 00
    000376  9a   777402 0000 46         set_privileges|soos_priv_on
    000377  5a   000621 0000 00
    000400  9a   777400 0000 46         verify_lock|verify_lock_bad_dir
    000401  5a   000620 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   240062 424333 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000414 
    000020  aa   000000 000203 
    000021  aa   000312 000261 
    000022  aa   000402 000203 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000006 
    000066  aa   000116 000050 
    000067  aa   175453 030640 
    000070  aa   000000 117547 
    000071  aa   227504 200000 
    000072  aa   000130 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   000141 000042 
    000077  aa   147777 464111 
    000100  aa   000000 115000 
    000101  aa   507463 000000 
    000102  aa   000152 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   000163 000037 
    000107  aa   127236 043523 
    000110  aa   000000 112724 
    000111  aa   701744 400000 
    000112  aa   000173 000035 
    000113  aa   043243 130223 
    000114  aa   000000 102727 
    000115  aa   712743 600000 
    000116  aa   076163 160145          >spec>install>1115>system_privilege_.alm
    000117  aa   143076 151156 
    000120  aa   163164 141154 
    000121  aa   154076 061061 
    000122  aa   061065 076163 
    000123  aa   171163 164145 
    000124  aa   155137 160162 
    000125  aa   151166 151154 
    000126  aa   145147 145137 
    000127  aa   056141 154155 
    000130  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000131  aa   076151 156143 
    000132  aa   154165 144145 
    000133  aa   076147 141164 
    000134  aa   145137 155141 
    000135  aa   143162 157163 
    000136  aa   056151 156143 
    000137  aa   154056 141154 
    000140  aa   155040 040040 
    000141  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000142  aa   076151 156143 
    000143  aa   154165 144145 
    000144  aa   076163 164141 
    000145  aa   143153 137150 
    000146  aa   145141 144145 
    000147  aa   162056 151156 
    000150  aa   143154 056141 
    000151  aa   154155 040040 
    000152  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000153  aa   076151 156143 
    000154  aa   154165 144145 
    000155  aa   076163 164141 
    000156  aa   143153 137146 
    000157  aa   162141 155145 
    000160  aa   056151 156143 
    000161  aa   154056 141154 
    000162  aa   155040 040040 
    000163  aa   076154 144144          >ldd>include>gate_data.incl.alm
    000164  aa   076151 156143 
    000165  aa   154165 144145 
    000166  aa   076147 141164 
    000167  aa   145137 144141 
    000170  aa   164141 056151 
    000171  aa   156143 154056 
    000172  aa   141154 155040 
    000173  aa   076154 144144          >ldd>include>on_unit.incl.alm
    000174  aa   076151 156143 
    000175  aa   154165 144145 
    000176  aa   076157 156137 
    000177  aa   165156 151164 
    000200  aa   056151 156143 
    000201  aa   154056 141154 
    000202  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          36    .actor                   system_privilege_:   28.
         543    .bad_dir_desc            system_privilege_:   54.
         541    .bad_dir_name            system_privilege_:   54.
         601    .continue_signal         system_privilege_:   54.
          72    .defs_loop               system_privilege_:   28.
          71    .entryp                  system_privilege_:   28,   54.
         135    .gate_errordesc          system_privilege_:   28.
         132    .gate_errorname          system_privilege_:   28.
         544    .handler                 system_privilege_:   54.
          30    .handler_entry           system_privilege_:   54.
          31    .handler_restart_entry   system_privilege_:   54.
         604    .handler_restart_point   system_privilege_:   54.
          52    .label_variable          system_privilege_:   28,   54.
          76    .mcptr                   system_privilege_:   28,   54.
          34    .my_lp                   system_privilege_:   28,   54.
         100    .next_def                system_privilege_:   28.
         136    .no_gate_error           system_privilege_:   28.
         220    .one_arg_header          system_privilege_:   28.
          56    .on_unit                 system_privilege_:   28,   54.
          70    .pf                      system_privilege_:   28.
         146    .return_code             system_privilege_:   28,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
                                                              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
                                                              51,   52.
         175    .return_code_return      system_privilege_:   28.
          55    .return_name             system_privilege_:   28.
         176    .ring_alarm              system_privilege_:   28.
         100    .ring_alarm_arg_list     system_privilege_:   28.
          70    .search_defs             system_privilege_:   28.
         103    .setup                   system_privilege_:   28,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
                                                              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
                                                              51,   52.
         521    .set_dir_trap            system_privilege_:   30,   31,   36,   37,   42,   43,   44,   54.
          50    .temp                    system_privilege_:   28.
          52    .time1                   system_privilege_:   28.
          54    .time2                   system_privilege_:   28.
           0    .tv_begin                system_privilege_:   28.
          32    .tv_end                  system_privilege_:   28.
          56    .unwinder_arglist        system_privilege_:   28,   54.
          72    .vfl_arglist             system_privilege_:   28,   54.
                access_audit_util_       system_privilege_:   50.
                access_class_check       system_privilege_:   30,   31.
           1    aim_check_soos           system_privilege_:   30.
         223    aim_check_soos.e         system_privilege_:   30.
          10    aim_check_soos.t         system_privilege_:   30.
                audit_flag_path          system_privilege_:   49.
                branch                   system_privilege_:   42.
        1170    call_offset              stack_header:        80.
           2    check_mode_reset         system_privilege_:   31.
         234    check_mode_reset.e       system_privilege_:   31.
          20    check_mode_reset.t       system_privilege_:   31.
                clock_                   system_privilege_:   28.
           3    comm_priv_off            system_privilege_:   32.
         245    comm_priv_off.e          system_privilege_:   32.
          30    comm_priv_off.t          system_privilege_:   32.
           4    comm_priv_on             system_privilege_:   33.
         255    comm_priv_on.e           system_privilege_:   33.
          40    comm_priv_on.t           system_privilege_:   33.
                cpu_time                 system_privilege_:   28.
           5    dir_priv_off             system_privilege_:   34.
         265    dir_priv_off.e           system_privilege_:   34.
          50    dir_priv_off.t           system_privilege_:   34.
           6    dir_priv_on              system_privilege_:   35.
         275    dir_priv_on.e            system_privilege_:   35.
          60    dir_priv_on.t            system_privilege_:   35.
        1174    entry_offset             stack_header:        84.
           5    gate_entry_data.calls    system_privilege_:   28,
                                         gate_data:     30.
           0    gate_entry_data.cpu_time       system_privilege_:   28,
                                               gate_data:     27.
           4    gate_entry_data.page_waits     system_privilege_:   28,
                                               gate_data:     29.
           6    gate_entry_data.ring_alarms    system_privilege_:   28,
                                               gate_data:     31.
           2    gate_entry_data.vcpu_time      system_privilege_:   28,
                                               gate_data:     28.
          10    gate_entry_data_size     system_privilege_:   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
                                                              41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
                                                              52,
                                         gate_data:     25.
           2    gate_table.datap         gate_data:     20.
           1    gate_table.entryl        gate_data:     19.
           0    gate_table.entryp        gate_data:     18.
           3    gate_table_size          gate_data:     15.
           7    initiate                 system_privilege_:   36,   37.
         305    initiate.e               system_privilege_:   36.
          70    initiate.t               system_privilege_:   36.
          10    initiate_count           system_privilege_:   37.
         316    initiate_count.e         system_privilege_:   37.
         100    initiate_count.t         system_privilege_:   37.
          11    ipc_priv_off             system_privilege_:   38.
         327    ipc_priv_off.e           system_privilege_:   38.
         110    ipc_priv_off.t           system_privilege_:   38.
          12    ipc_priv_on              system_privilege_:   39.
         337    ipc_priv_on.e            system_privilege_:   39.
         120    ipc_priv_on.t            system_privilege_:   39.
          10    linkage                  system_privilege_:   28,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
                                                              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
                                                              51,   52.
          34    main                     system_privilege_:   28,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
                                                              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
                                                              51,   52,   54.
                node                     system_privilege_:   43.
           2    on_unit.body             system_privilege_:   54,
                                         on_unit:        5.
           6    on_unit.file             on_unit:        9.
          10    on_unit.file_copy        on_unit:       10.
           5    on_unit.flags            on_unit:        8.
           0    on_unit.name             system_privilege_:   54,
                                         on_unit:        4.
           5    on_unit.next             on_unit:        7.
           4    on_unit.size             system_privilege_:   54,
                                         on_unit:        6.
                page_waits               system_privilege_:   28.
                pds                      system_privilege_:   28.
                poll                     system_privilege_:   28.
                pre_empt_poll            system_privilege_:   28.
                pre_empt_poll_return     system_privilege_:   28.
                priv_init                system_privilege_:   36.
                priv_init_count          system_privilege_:   37.
        1171    push_offset              stack_header:        81.
                pxss                     system_privilege_:   28.
          13    rcp_priv_off             system_privilege_:   40.
         347    rcp_priv_off.e           system_privilege_:   40.
         130    rcp_priv_off.t           system_privilege_:   40.
          14    rcp_priv_on              system_privilege_:   41.
         357    rcp_priv_on.e            system_privilege_:   41.
         140    rcp_priv_on.t            system_privilege_:   41.
                reclassify               system_privilege_:   42,   43,   44.
          15    reclassify_branch        system_privilege_:   42.
         367    reclassify_branch.e      system_privilege_:   42.
         150    reclassify_branch.t      system_privilege_:   42.
          16    reclassify_node          system_privilege_:   43.
         400    reclassify_node.e        system_privilege_:   43.
         160    reclassify_node.t        system_privilege_:   43.
          17    reclassify_sys_seg       system_privilege_:   44.
         411    reclassify_sys_seg.e     system_privilege_:   44.
         170    reclassify_sys_seg.t     system_privilege_:   44.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          20    ring1_priv_off           system_privilege_:   45.
         422    ring1_priv_off.e         system_privilege_:   45.
         200    ring1_priv_off.t         system_privilege_:   45.
          21    ring1_priv_on            system_privilege_:   46.
         432    ring1_priv_on.e          system_privilege_:   46.
         210    ring1_priv_on.t          system_privilege_:   46.
                ring_alarm               system_privilege_:   28.
          22    seg_priv_off             system_privilege_:   47.
         442    seg_priv_off.e           system_privilege_:   47.
         220    seg_priv_off.t           system_privilege_:   47.
          23    seg_priv_on              system_privilege_:   48.
         452    seg_priv_on.e            system_privilege_:   48.
         230    seg_priv_on.t            system_privilege_:   48.
                set                      system_privilege_:   49.
                set_audit_flags          system_privilege_:   50.
          24    set_entry_audit_switch   system_privilege_:   49.
         462    set_entry_audit_switch.e       system_privilege_:   49.
         240    set_entry_audit_switch.t       system_privilege_:   49.
                set_privileges           system_privilege_:   32,   33,   34,   35,   38,   39,   40,   41,   45,   46,   47,
                                                              48,   51,   52.
          25    set_process_audit_flags  system_privilege_:   50.
         472    set_process_audit_flags.e      system_privilege_:   50.
         250    set_process_audit_flags.t      system_privilege_:   50.
                signal_                  system_privilege_:   28.
         124    signal_arglist           system_privilege_:   28.
          26    soos_priv_off            system_privilege_:   51.
         502    soos_priv_off.e          system_privilege_:   51.
         260    soos_priv_off.t          system_privilege_:   51.
          27    soos_priv_on             system_privilege_:   52.
         512    soos_priv_on.e           system_privilege_:   52.
         270    soos_priv_on.t           system_privilege_:   52.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      system_privilege_:   54,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      system_privilege_:   54,
                                               stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    system_privilege_:   54,
                                         stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       system_privilege_:   28,
                                         stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   system_privilege_:   54,
                                               stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      system_privilege_:   28,   54,
                                         stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   system_privilege_:   28,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   system_privilege_:   28,
                                               stack_header:        37.
          24    stack_header.stack_end_ptr     system_privilege_:   28,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
                sys_info                 system_privilege_:   28.
                sys_seg_priv             system_privilege_:   44.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          system_privilege_:   28,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
                                                              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
                                                              51,   52,   54.
          32    tv_end                   system_privilege_:   28.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
                unwinder_                system_privilege_:   54.
                verify_lock              system_privilege_:   54.
                verify_lock_bad_dir      system_privilege_:   54.
                virtual_delta            system_privilege_:   28.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
