	COMPILATION LISTING OF SEGMENT bootload_fs_cmds_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 11/11/89  1021.5 mst Sat
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 bootload_fs_cmds_: proc; return;
        9 
       10 /* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */
       11 
       12 /* Bootload multics commands to directly operate on bootload fs objects. 
       13*Initially coded March 1983 by Keith Loepere 
       14*Modified August 1983 by Keith Loepere for new bce switches */
  1     1 /* Begin include file bce_subsystem_info_.incl.pl1 BIM 11/82 */
  1     2 
  1     3 /* format: style3 */
  1     4 
  1     5 /* Deleted unused items, Keith Loepere, 5/84 */
  1     6 
  1     7 
  1     8 /****^  HISTORY COMMENTS:
  1     9*  1) change(86-04-22,Farley), approve(86-07-18,MCR7439),
  1    10*     audit(86-10-08,Fawcett), install(86-10-20,MR12.0-1189):
  1    11*     Added request_handling_opr_aborts flag for save/restore.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 declare	ss_info_ptr	pointer;
  1    15 declare	1 ss_info		aligned based (ss_info_ptr),
  1    16 	  2 request_table_ptr
  1    17 			pointer,
  1    18 	  2 abort_label	label,
  1    19 	  2 name		char (32) unaligned,
  1    20 	  2 arg_list_ptr	pointer,
  1    21 	  2 info_ptr	pointer,
  1    22 	  2 flags           aligned,
  1    23 	    3 forbid_semicolons bit (1) unaligned,
  1    24 	    3 request_handling_opr_aborts bit (1) unaligned;
  1    25 
  1    26 /* End include file bce_subsystem_info_ */
       15 
  2     1 /*  START OF:	bootload_fs_list.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2     2 /*  BIM  Nobember 80 */
  2     3 
  2     4 declare bootload_fs_list_ptr pointer;
  2     5 
  2     6 declare 1 bootload_fs_list aligned based (bootload_fs_list_ptr),
  2     7         2 n_files fixed bin,
  2     8         2 files (bootload_fs_list_n_files refer (n_files)) aligned,
  2     9 	3 name char (32) unal,
  2    10 	3 length fixed bin (21);
  2    11 
  2    12 declare bootload_fs_list_n_files fixed bin;
  2    13 
  2    14 /*  END OF:	bootload_fs_list.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       17 dcl  active		        bit (1) aligned;	/* called as an active function */
       18 dcl  active_fnc_err_	        entry options (variable);
       19 dcl  arg			        char (arg_len) based (arg_ptr);
       20 dcl  arg2			        char (arg_len2) based (arg_ptr2);
       21 dcl  arg_count		        fixed bin;
       22 dcl  arg_len		        fixed bin (21);
       23 dcl  arg_len2		        fixed bin (21);
       24 dcl  arg_ptr		        ptr;
       25 dcl  arg_ptr2		        ptr;
       26 dcl  bce_data$put_chars	        entry (ptr, ptr, fixed bin, fixed bin (35)) ext variable;
       27 dcl  bce_query$yes_no	        entry options (variable);
       28 dcl  bootload_file_partition$	        external;
       29 dcl  bootload_fs_$get_ptr	        entry (char (*), ptr, fixed bin (21), fixed bin (35));
       30 dcl  bootload_fs_$delete	        entry (char (*), fixed bin (35));
       31 dcl  bootload_fs_$init	        entry (bit (1) aligned, fixed bin (19), fixed bin (35));
       32 dcl  bootload_fs_$list	        entry (area (*), ptr, fixed bin (35));
       33 dcl  bootload_fs_$rename	        entry (char (*), char (*), fixed bin (35));
       34 dcl  check_star_name_$entry	        entry (char (*), fixed bin (35));
       35 dcl  code			        fixed bin (35);
       36 dcl  com_err_		        entry options (variable);
       37 dcl  cu_$af_return_arg_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
       38 dcl  cu_$arg_count_rel	        entry (fixed bin, ptr, fixed bin (35));
       39 dcl  cu_$arg_ptr_rel	        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
       40 dcl  dseg$		        (0:511) bit (72) aligned external;
       41 dcl  error		        entry options (variable) variable; /* who prints our error */
       42 dcl  error_table_$bad_arg	        fixed bin (35) ext static;
       43 dcl  error_table_$bad_equal_name      fixed bin (35) ext static;
       44 dcl  error_table_$badstar	        fixed bin (35) ext static;
       45 dcl  error_table_$noentry	        fixed bin (35) ext static;
       46 dcl  error_table_$not_act_fnc	        fixed bin (35) ext static;
       47 dcl  file			        char (file_len) based (file_ptr); /* to be printed */
       48 dcl  file_found		        bit (1) aligned;	/* a file matched the current star name */
       49 dcl  file_len		        fixed bin (21);
       50 dcl  file_num		        fixed bin;		/* loop index */
       51 dcl  file_ptr		        ptr;
       52 dcl  get_equal_name_	        entry (char (*), char (*), char (32), fixed bin (35));
       53 dcl  get_equal_name_$check_equal_name_ entry (char (*), fixed bin (35));
       54 dcl  i			        fixed bin;		/* loop index */
       55 dcl  ioa_			        entry options (variable);
       56 dcl  length		        builtin;
       57 dcl  match_star_name_	        entry (char (*), char (*), fixed bin (35));
       58 dcl  me			        char (12);
       59 dcl  my_area		        area (2048);	/* for listing files */
       60 dcl  new_name		        char (32);		/* for renaming */
       61 dcl  request_abort_		        condition;		/* abort command line */
       62 dcl  result		        char (result_len) based (result_ptr) var; /* active function result */
       63 dcl  result_len		        fixed bin (21);
       64 dcl  result_ptr		        ptr;
       65 dcl  sdw_util_$get_size	        entry (ptr, fixed bin (19));
       66 dcl  seg_size		        fixed bin (19);	/* of initted partition */
       67 dcl  yes_no		        bit (1);
       68 
       69 init: entry (ss_info_ptr);
       70 
       71 	me = "init_files";
       72 	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
       73 	if code ^= 0 then do;
       74 	     call com_err_ (code, me);
       75 	     signal request_abort_;
       76 	end;
       77 	if arg_count = 0 then do;
       78 	     call bce_query$yes_no (yes_no, "Do you really want to initialize the bootload file system? ");
       79 	     if ^yes_no then go to TERMINATE;
       80 	end;
       81 	else if arg_count > 1 then do;
       82 	     call com_err_ (0, me, "Usage is: ^a {-force | -fc}", me);
       83 	     go to TERMINATE;
       84 	end;
       85 	else do;
       86 	     call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
       87 	     if ^(arg = "-force" | arg = "-fc") then do;
       88 		call com_err_ (error_table_$bad_arg, me, "^a", arg);
       89 		go to TERMINATE;
       90 	     end;
       91 	end;
       92 
       93 	call sdw_util_$get_size (addr (dseg$ (segno (addr (bootload_file_partition$)))), seg_size);
       94 	call bootload_fs_$init ("1"b, seg_size, code);
       95 	if code ^= 0 then do;
       96 	     call com_err_ (code, me);
       97 	     go to TERMINATE;
       98 	end;
       99 	return;
      100 
      101 print: entry (ss_info_ptr);
      102 
      103 	me = "print";
      104 	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
      105 	if code ^= 0 then do;
      106 	     call com_err_ (code, me);
      107 	     signal request_abort_;
      108 	end;
      109 	if arg_count ^= 1 then do;
      110 	     call com_err_ (0, me, "Usage is: ^a <file_name>.", me);
      111 	     go to TERMINATE;
      112 	end;
      113 	call cu_$arg_ptr_rel (1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      114 	call bootload_fs_$get_ptr (arg, file_ptr, file_len, code);
      115 	if code ^= 0 then do;
      116 	     call com_err_ (code, me, "^a", arg);
      117 	     go to TERMINATE;
      118 	end;
      119 	call bce_data$put_chars (addr (bce_data$put_chars), file_ptr, (file_len), code);
      120 	return;
      121 
      122 list: entry (ss_info_ptr);
      123 
      124 	me = "list";
      125 	call cu_$af_return_arg_rel (arg_count, result_ptr, result_len, code, ss_info.arg_list_ptr);
      126 	if code = error_table_$not_act_fnc then do;
      127 	     active = "0"b;
      128 	     error = com_err_;
      129 	     call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
      130 	end;
      131 	else do;
      132 	     active = "1"b;
      133 	     error = active_fnc_err_;
      134 	     result = "";
      135 	end;
      136 	if code ^= 0 then do;
      137 	     call error (code, me);
      138 	     signal request_abort_;
      139 	end;
      140 	if active & arg_count < 1 then do;
      141 	     call error (0, me, "Usage: [^a <star_names>]", me);
      142 	     go to TERMINATE;
      143 	end;
      144 	do i = 1 to arg_count;			/* validate starnames */
      145 	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      146 	     call check_star_name_$entry (arg, code);
      147 	     if code = error_table_$badstar then do;
      148 		call com_err_ (code, me, "^a", arg);
      149 		go to TERMINATE;
      150 	     end;
      151 	end;
      152 	call bootload_fs_$list (my_area, bootload_fs_list_ptr, code);
      153 	if code ^= 0 then do;
      154 	     if code = error_table_$noentry then do;
      155 		if active then result = "";
      156 		else call ioa_ ("No files.");
      157 		return;
      158 	     end;
      159 	     else do;
      160 		call error (code, me);
      161 		go to TERMINATE;
      162 	     end;
      163 	end;
      164 	if ^ active then call ioa_ ("Length^-File Name^/");
      165 	file_found = "0"b;
      166 	do i = min (1, arg_count) to arg_count;		/* zero pass => ** for 0 args */
      167 	     if i > 0 then call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      168 	     do file_num = 1 to bootload_fs_list.n_files; /* match all unmatched file names against current star name */
      169 		if i > 0 & (bootload_fs_list.files (file_num).name ^= "") then call match_star_name_ (bootload_fs_list.files (file_num).name, arg, code);
      170 		else code = 0;
      171 		if code = 0 then do;
      172 		     if active then result = result || bootload_fs_list.files (file_num).name || " ";
      173 		     else do;
      174 			call ioa_ ("^6d^-^a", bootload_fs_list.files (file_num).length,
      175 			     bootload_fs_list.files (file_num).name);
      176 		     end;
      177 		     bootload_fs_list.files (file_num).name = ""; /* don't list again */
      178 		     file_found = "1"b;
      179 		end;
      180 	     end;
      181 	end;
      182 	if active & file_found then result = substr (result, 1, length (result) - 1); /* extraneous trailing blank */
      183 	if ^active & ^file_found then call ioa_ ("No such file(s).");
      184 	return;
      185 
      186 delete: entry (ss_info_ptr);
      187 
      188 	me = "delete";
      189 	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
      190 	if code ^= 0 then do;
      191 	     call com_err_ (code, me);
      192 	     signal request_abort_;
      193 	end;
      194 	if arg_count = 0 then do;
      195 	     call com_err_ (0, me, "Usage is: ^a <star names>", me);
      196 	     go to TERMINATE;
      197 	end;
      198 	do i = 1 to arg_count;
      199 	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      200 	     call check_star_name_$entry (arg, code);
      201 	     if code = error_table_$badstar then do;
      202 		call com_err_ (code, me, "^a", arg);
      203 		go to TERMINATE;
      204 	     end;
      205 	end;
      206 	call bootload_fs_$list (my_area, bootload_fs_list_ptr, code);
      207 	if code ^= 0 then do;
      208 	     if code = error_table_$noentry then call ioa_ ("No files.");
      209 	     else call com_err_ (code, me, "Getting file list.");
      210 	     go to TERMINATE;
      211 	end;
      212 	do i = 1 to arg_count;
      213 	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      214 	     file_found = "0"b;
      215 	     do file_num = 1 to bootload_fs_list.n_files;
      216 		if bootload_fs_list.files (file_num).name ^= "" then call match_star_name_ (bootload_fs_list.files (file_num).name, arg, code);
      217 		if code = 0 then do;
      218 		     call bootload_fs_$delete (bootload_fs_list.files (file_num).name, code);
      219 		     if code ^= 0 then call com_err_ (code, me, "^a", bootload_fs_list.files (file_num).name);
      220 		     bootload_fs_list.files (file_num).name = ""; /* don't delete again */
      221 		     file_found = "1"b;
      222 		end;
      223 	     end;
      224 	     if ^file_found then call com_err_ (0, me, "File(s) not found. ^a", arg);
      225 	end;
      226 	return;
      227 
      228 rename: entry (ss_info_ptr);
      229 
      230 	me = "rename";
      231 	call cu_$arg_count_rel (arg_count, ss_info.arg_list_ptr, code);
      232 	if code ^= 0 then do;
      233 	     call com_err_ (code, me);
      234 	     signal request_abort_;
      235 	end;
      236 	if arg_count = 0 | mod (arg_count, 2) ^= 0 then do;
      237 	     call com_err_ (0, me, "Usage is: ^a <old_file_name> <new_file_name> {<old_file_name> <new_file_name> ...}", me);
      238 	     go to TERMINATE;
      239 	end;
      240 	do i = 2 to arg_count by 2;
      241 	     call cu_$arg_ptr_rel (i - 1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      242 	     call check_star_name_$entry (arg, code);
      243 	     if code = error_table_$badstar then do;
      244 		call com_err_ (code, me, "^a", arg);
      245 		go to TERMINATE;
      246 	     end;
      247 	     call cu_$arg_ptr_rel (i, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      248 	     call get_equal_name_$check_equal_name_ (arg, code);
      249 	     if code = error_table_$bad_equal_name then do;
      250 		call com_err_ (code, me, "^a", arg);
      251 		go to TERMINATE;
      252 	     end;
      253 	end;
      254 	call bootload_fs_$list (my_area, bootload_fs_list_ptr, code);
      255 	if code ^= 0 then do;
      256 	     if code = error_table_$noentry then call ioa_ ("No files.");
      257 	     else call com_err_ (code, me, "Getting file list.");
      258 	     go to TERMINATE;
      259 	end;
      260 	do i = 2 to arg_count by 2;
      261 	     call cu_$arg_ptr_rel (i - 1, arg_ptr, arg_len, code, ss_info.arg_list_ptr);
      262 	     call cu_$arg_ptr_rel (i, arg_ptr2, arg_len2, code, ss_info.arg_list_ptr);
      263 	     file_found = "0"b;
      264 	     do file_num = 1 to bootload_fs_list.n_files;
      265 		if bootload_fs_list.files (file_num).name ^= "" then call match_star_name_ (bootload_fs_list.files (file_num).name, arg, code);
      266 		if code = 0 then do;
      267 		     call get_equal_name_ (bootload_fs_list.files (file_num).name, arg2, new_name, code);
      268 		     if code ^= 0 then go to rename_error;
      269 		     call bootload_fs_$rename (bootload_fs_list.files (file_num).name, new_name, code);
      270 		     if code ^= 0 then 
      271 rename_error:		call com_err_ (code, me, "^a to ^a", bootload_fs_list.files (file_num).name, new_name);
      272 		     bootload_fs_list.files (file_num).name = ""; /* don't rename again */
      273 		     file_found = "1"b;
      274 		end;
      275 	     end;
      276 	     if ^file_found then call com_err_ (0, me, "File(s) not found. ^a", arg);
      277 	end;
      278 	return;
      279 
      280 TERMINATE:
      281 	return;
      282      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/89  0826.3  bootload_fs_cmds_.pl1             >special_ldd>install>MR12.3-1114>bootload_fs_cmds_.pl1
15           1    10/21/86  1251.6  bce_subsystem_info_.incl.pl1      >ldd>include>bce_subsystem_info_.incl.pl1
16           2    07/11/84  0937.3  bootload_fs_list.incl.pl1         >ldd>include>bootload_fs_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
active                          000102 automatic       bit(1)                   dcl 17 set ref 127* 132* 140 155 164 172 182 183
active_fnc_err_                 000010 constant        entry                    external dcl 18 ref 133
arg                                    based           char                     packed unaligned dcl 19 set ref 87 87 88* 114* 116*
                                                                                  146* 148* 169* 200* 202* 216* 224* 242* 244* 248*
                                                                                  250* 265* 276*
arg2                                   based           char                     packed unaligned dcl 20 set ref 267*
arg_count                       000103 automatic       fixed bin(17,0)          dcl 21 set ref 72* 77 81 104* 109 125* 129* 140 144
                                                                                  166 166 189* 194 198 212 231* 236 236 240 260
arg_len                         000104 automatic       fixed bin(21,0)          dcl 22 set ref 86* 87 87 88 88 113* 114 114 116 116
                                                                                  145* 146 146 148 148 167* 169 169 199* 200 200 202
                                                                                  202 213* 216 216 224 224 241* 242 242 244 244 247*
                                                                                  248 248 250 250 261* 265 265 276 276
arg_len2                        000105 automatic       fixed bin(21,0)          dcl 23 set ref 262* 267 267
arg_list_ptr             16            based           pointer                  level 2 dcl 1-15 set ref 72* 86* 104* 113* 125* 129*
                                                                                  145* 167* 189* 199* 213* 231* 241* 247* 261* 262*
arg_ptr                         000106 automatic       pointer                  dcl 24 set ref 86* 87 87 88 113* 114 116 145* 146
                                                                                  148 167* 169 199* 200 202 213* 216 224 241* 242
                                                                                  244 247* 248 250 261* 265 276
arg_ptr2                        000110 automatic       pointer                  dcl 25 set ref 262* 267
bce_data$put_chars              000012 external static entry variable           dcl 26 set ref 119 119 119
bce_query$yes_no                000014 constant        entry                    external dcl 27 ref 78
bootload_file_partition$        000016 external static fixed bin(17,0)          dcl 28 set ref 93 93
bootload_fs_$delete             000022 constant        entry                    external dcl 30 ref 218
bootload_fs_$get_ptr            000020 constant        entry                    external dcl 29 ref 114
bootload_fs_$init               000024 constant        entry                    external dcl 31 ref 94
bootload_fs_$list               000026 constant        entry                    external dcl 32 ref 152 206 254
bootload_fs_$rename             000030 constant        entry                    external dcl 33 ref 269
bootload_fs_list                       based           structure                level 1 dcl 2-6
bootload_fs_list_ptr            000100 automatic       pointer                  dcl 2-4 set ref 152* 168 169 169 172 174 174 177
                                                                                  206* 215 216 216 218 219 220 254* 264 265 265 267
                                                                                  269 270 272
check_star_name_$entry          000032 constant        entry                    external dcl 34 ref 146 200 242
code                            000112 automatic       fixed bin(35,0)          dcl 35 set ref 72* 73 74* 86* 94* 95 96* 104* 105
                                                                                  106* 113* 114* 115 116* 119* 125* 126 129* 136
                                                                                  137* 145* 146* 147 148* 152* 153 154 160* 167*
                                                                                  169* 170* 171 189* 190 191* 199* 200* 201 202*
                                                                                  206* 207 208 209* 213* 216* 217 218* 219 219* 231*
                                                                                  232 233* 241* 242* 243 244* 247* 248* 249 250*
                                                                                  254* 255 256 257* 261* 262* 265* 266 267* 268 269*
                                                                                  270 270*
com_err_                        000034 constant        entry                    external dcl 36 ref 74 82 88 96 106 110 116 128 148
                                                                                  191 195 202 209 219 224 233 237 244 250 257 270
                                                                                  276
cu_$af_return_arg_rel           000036 constant        entry                    external dcl 37 ref 125
cu_$arg_count_rel               000040 constant        entry                    external dcl 38 ref 72 104 129 189 231
cu_$arg_ptr_rel                 000042 constant        entry                    external dcl 39 ref 86 113 145 167 199 213 241 247
                                                                                  261 262
dseg$                           000044 external static bit(72)                  array dcl 40 set ref 93 93
error                           000114 automatic       entry variable           dcl 41 set ref 128* 133* 137 141 160
error_table_$bad_arg            000046 external static fixed bin(35,0)          dcl 42 set ref 88*
error_table_$bad_equal_name     000050 external static fixed bin(35,0)          dcl 43 ref 249
error_table_$badstar            000052 external static fixed bin(35,0)          dcl 44 ref 147 201 243
error_table_$noentry            000054 external static fixed bin(35,0)          dcl 45 ref 154 208 256
error_table_$not_act_fnc        000056 external static fixed bin(35,0)          dcl 46 ref 126
file_found                      000120 automatic       bit(1)                   dcl 48 set ref 165* 178* 182 183 214* 221* 224 263*
                                                                                  273* 276
file_len                        000121 automatic       fixed bin(21,0)          dcl 49 set ref 114* 119
file_num                        000122 automatic       fixed bin(17,0)          dcl 50 set ref 168* 169 169 172 174 174 177* 215*
                                                                                  216 216 218 219 220* 264* 265 265 267 269 270 272*
file_ptr                        000124 automatic       pointer                  dcl 51 set ref 114* 119*
files                     1            based           structure                array level 2 dcl 2-6
get_equal_name_                 000060 constant        entry                    external dcl 52 ref 267
get_equal_name_$check_equal_name_
                                000062 constant        entry                    external dcl 53 ref 248
i                               000126 automatic       fixed bin(17,0)          dcl 54 set ref 144* 145* 166* 167 167* 169* 198*
                                                                                  199* 212* 213* 240* 241 247* 260* 261 262*
ioa_                            000064 constant        entry                    external dcl 55 ref 156 164 174 183 208 256
length                   11            based           fixed bin(21,0)          array level 3 in structure "bootload_fs_list"
                                                                                  dcl 2-6 in procedure "bootload_fs_cmds_" set ref
                                                                                  174*
length                                                 builtin function         dcl 56 in procedure "bootload_fs_cmds_" ref 182
match_star_name_                000066 constant        entry                    external dcl 57 ref 169 216 265
me                              000127 automatic       char(12)                 packed unaligned dcl 58 set ref 71* 74* 82* 82* 88*
                                                                                  96* 103* 106* 110* 110* 116* 124* 137* 141* 141*
                                                                                  148* 160* 188* 191* 195* 195* 202* 209* 219* 224*
                                                                                  230* 233* 237* 237* 244* 250* 257* 270* 276*
my_area                         000132 automatic       area(2048)               dcl 59 set ref 59* 152* 206* 254*
n_files                                based           fixed bin(17,0)          level 2 dcl 2-6 ref 168 215 264
name                      1            based           char(32)                 array level 3 packed packed unaligned dcl 2-6 set
                                                                                  ref 169 169* 172 174* 177* 216 216* 218* 219* 220*
                                                                                  265 265* 267* 269* 270* 272*
new_name                        004132 automatic       char(32)                 packed unaligned dcl 60 set ref 267* 269* 270*
request_abort_                  004142 stack reference condition                dcl 61 ref 75 107 138 192 234
result                                 based           varying char             dcl 62 set ref 134* 155* 172* 172 182* 182 182
result_len                      004150 automatic       fixed bin(21,0)          dcl 63 set ref 125* 134 155 172 182
result_ptr                      004152 automatic       pointer                  dcl 64 set ref 125* 134 155 172 172 182 182 182
sdw_util_$get_size              000070 constant        entry                    external dcl 65 ref 93
seg_size                        004154 automatic       fixed bin(19,0)          dcl 66 set ref 93* 94*
ss_info                                based           structure                level 1 dcl 1-15
ss_info_ptr                            parameter       pointer                  dcl 1-14 ref 69 72 86 101 104 113 122 125 129 145
                                                                                  167 186 189 199 213 228 231 241 247 261 262
yes_no                          004155 automatic       bit(1)                   packed unaligned dcl 67 set ref 78* 79

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
bootload_fs_list_n_files               automatic       fixed bin(17,0)          dcl 2-12
file                                   based           char                     packed unaligned dcl 47

NAMES DECLARED BY EXPLICIT CONTEXT.
TERMINATE                       003356 constant        label                    dcl 280 ref 79 83 89 97 111 117 142 149 161 196 203
                                                                                  210 238 245 251 258
bootload_fs_cmds_               000210 constant        entry                    external dcl 8
delete                          001637 constant        entry                    external dcl 186
init                            000222 constant        entry                    external dcl 69
list                            000770 constant        entry                    external dcl 122
print                           000526 constant        entry                    external dcl 101
rename                          002407 constant        entry                    external dcl 228
rename_error                    003240 constant        label                    dcl 270 ref 268

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 93 93 93 93 119 119
empty                                                  builtin function         ref 59
min                                                    builtin function         ref 166
mod                                                    builtin function         ref 236
segno                                                  builtin function         ref 93 93
substr                                                 builtin function         ref 182

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3712        4004    3364        3722
Length      4316    3364        72         276     325           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
bootload_fs_cmds_                  2290 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
bootload_fs_cmds_        000100 bootload_fs_list_ptr        bootload_fs_cmds_
                         000102 active                      bootload_fs_cmds_
                         000103 arg_count                   bootload_fs_cmds_
                         000104 arg_len                     bootload_fs_cmds_
                         000105 arg_len2                    bootload_fs_cmds_
                         000106 arg_ptr                     bootload_fs_cmds_
                         000110 arg_ptr2                    bootload_fs_cmds_
                         000112 code                        bootload_fs_cmds_
                         000114 error                       bootload_fs_cmds_
                         000120 file_found                  bootload_fs_cmds_
                         000121 file_len                    bootload_fs_cmds_
                         000122 file_num                    bootload_fs_cmds_
                         000124 file_ptr                    bootload_fs_cmds_
                         000126 i                           bootload_fs_cmds_
                         000127 me                          bootload_fs_cmds_
                         000132 my_area                     bootload_fs_cmds_
                         004132 new_name                    bootload_fs_cmds_
                         004150 result_len                  bootload_fs_cmds_
                         004152 result_ptr                  bootload_fs_cmds_
                         004154 seg_size                    bootload_fs_cmds_
                         004155 yes_no                      bootload_fs_cmds_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     cat_realloc_chars   call_ent_var_desc   call_ent_var        call_ext_out_desc   call_ext_out
return_mac          mdfx1               signal_op           shorten_stack       ext_entry           op_empty_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               bce_query$yes_no              bootload_fs_$delete           bootload_fs_$get_ptr
bootload_fs_$init             bootload_fs_$list             bootload_fs_$rename           check_star_name_$entry
com_err_                      cu_$af_return_arg_rel         cu_$arg_count_rel             cu_$arg_ptr_rel
get_equal_name_               get_equal_name_$check_equal_name_                           ioa_
match_star_name_              sdw_util_$get_size

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
bce_data$put_chars            bootload_file_partition$      dseg$                         error_table_$bad_arg
error_table_$bad_equal_name   error_table_$badstar          error_table_$noentry          error_table_$not_act_fnc




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     59 000202         8 000207         8 000216        69 000217        71 000230        72 000233        73 000251
     74 000253        75 000270        77 000273        78 000275        79 000315        80 000320        81 000321
     82 000323        83 000353        86 000354        87 000400        88 000412        89 000444        93 000445
     94 000466        95 000503        96 000505        97 000522        99 000523       101 000524       103 000534
    104 000537       105 000555       106 000557       107 000574       109 000577       110 000602       111 000632
    113 000633       114 000657       115 000707       116 000711       117 000743       119 000744       120 000765
    122 000766       124 000776       125 001001       126 001023       127 001027       128 001030       129 001034
    130 001051       132 001052       133 001054       134 001060       136 001061       137 001063       138 001077
    140 001102       141 001107       142 001141       144 001142       145 001151       146 001173       147 001213
    148 001217       149 001250       151 001251       152 001253       153 001274       154 001276       155 001301
    156 001305       157 001321       160 001322       161 001336       164 001337       165 001355       166 001356
    167 001367       168 001413       169 001423       170 001466       171 001467       172 001471       173 001533
    174 001534       177 001565       178 001573       180 001575       181 001577       182 001601       183 001613
    184 001634       186 001635       188 001645       189 001650       190 001666       191 001670       192 001705
    194 001710       195 001712       196 001742       198 001743       199 001751       200 001773       201 002013
    202 002017       203 002050       205 002051       206 002053       207 002074       208 002076       209 002116
    210 002144       212 002145       213 002155       214 002177       215 002200       216 002207       217 002247
    218 002251       219 002272       220 002327       221 002335       223 002337       224 002341       225 002402
    226 002404       228 002405       230 002415       231 002420       232 002436       233 002440       234 002455
    236 002460       237 002465       238 002515       240 002516       241 002525       242 002551       243 002571
    244 002575       245 002626       247 002627       248 002650       249 002670       250 002674       251 002725
    253 002726       254 002731       255 002752       256 002754       257 002774       258 003022       260 003023
    261 003033       262 003057       263 003101       264 003102       265 003111       266 003151       267 003153
    268 003207       269 003211       270 003236       272 003277       273 003305       275 003307       276 003311
    277 003352       278 003355       280 003356


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
