ASSEMBLY LISTING OF SEGMENT >spec>temp>bce>40-00>net_ring1_user_.alm             
ASSEMBLED ON:	06/04/84  1240.5 mst Mon
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  "  ******************************************************
                                     2  "  *                                                    *
                                     3  "  *                                                    *
                                     4  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                     5  "  * Technology and Honeywell Information Systems, Inc. *
                                     6  "  *                                                    *
                                     7  "  *                                                    *
                                     8  "  ******************************************************
                                     9  
                                    10  
    000000                          11            name	net_ring1_user_
                                    12  
                                    13  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    14  "
                                    15  "      This is a gate into ring 1 to perform normal functions for users.
                                    16  " The ring 1 environment allows more access to the Hardcore Network programs
                                    17  " and the ring 1 programs are responsible for enforcing some form of access
                                    18  " control over these special privileges.
                                    19  "
                                    20  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    21  "
                                    22  " Originally created by D. M. Wells, October, 1976.
                                    23  " Last modified by W. Olin Sibert, 02/01/79 to convert from mexp to ALM.
                                    24  "
                                    25  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    26  
                                    27            include gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  
                                   1-7  " This file contains several macros used when generating gate segments.
                                   1-8  " The major macros that are defined are:
                                   1-9  "
                                  1-10  "	gate_info		general setup code for normal gates
                                  1-11  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-12  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-13  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-14  "	gate		to define a normal gate
                                  1-15  "	hgate		to define a hardcore gate
                                  1-16  "	fgate		to define a fast hardcore gate
                                  1-17  "
                                  1-18  
                                  1-19  
    000000                        1-20  	maclist	off
                                  1-21  
                                  1-22  
                                  1-23  " HGATE - define a hardcore gate entry
                                  1-24  "
                                  1-25  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-26  "
                                  1-27  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-28  " is nonzero, the number of arguments passed to gatename must be
                                  1-29  " equal to args.  When gatename is called, it will in turn call
                                  1-30  " procedure$entry.
                                  1-31  "
                                  1-32  
                                  1-33  macro	hgate
                              1   1-34  	gentry	&1,&4*2,&1.t
                              2   1-35  	tsx2	.setup
                              3   1-36  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-37  &]	ldi	=0,dl
                              5   1-38  	short_call &2$&3(ap|0)
                              6   1-39  	eppbp	lp|&1.t
                              7   1-40  	tra	.return_code
                              8   1-41  	maclist	restore
                              9   1-42  	use	linkage
                             10   1-43  	even
                             11   1-44  	maclist	on,save
                             12   1-45  &1.t:
                             13   1-46  	bss	,gate_entry_data_size
                             14   1-47  
                             15   1-48  	maclist	restore
                             16   1-49  &end
                                  1-50  
                                  1-51  
                                  1-52  " FGATE - define a fast hardcore gate
                                  1-53  "
                                  1-54  "	fgate	gatename,procedure,entry
                                  1-55  "
                                  1-56  
                                  1-57  macro	fgate
                              1   1-58  	gentry	&1,0,0
                              2   1-59  	ldi	=0,dl
                              3   1-60  	epplp	.my_lp,*
                              4   1-61  	tra	&2$&3
                              5   1-62  
                              6   1-63  	maclist	off
                              7   1-64  &end
                                  1-65  
                                  1-66  
                                  1-67  " GATE - define a normal gate entry
                                  1-68  "
                                  1-69  "	gate	gatename,procedure,entry,args
                                  1-70  "
                                  1-71  
                                  1-72  macro	gate
                              1   1-73  	gentry	&1,&4*2,0
                              2   1-74  	tsx2	.setup
                              3   1-75  	ldi	=0,dl
                              4   1-76  	short_call &2$&3(ap|0)
                              5   1-77  	return
                              6   1-78  
                              7   1-79  	maclist	restore
                              8   1-80  &end
                                  1-81  
                                  1-82  
                                  1-83  
                                  1-84  macro	gentry
                              1   1-85  	maclist	on,save
                              2   1-86  	segdef	&1
                              3   1-87  	maclist	restore
                              4   1-88  	use	transfer_vector
                              5   1-89  	maclist	on,save
                              6   1-90  &1:
                              7   1-91  	tra	&1.e
                              8   1-92  	maclist	restore
                              9   1-93  	use	main
                             10   1-94  	maclist	on,save
                             11   1-95  	zero	&2,&3
                             12   1-96  &1.e:
                             13   1-97  &end
                                  1-98  
                                  1-99  
                                 1-100  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-101  
                                 1-102  macro	hardcore_gate_info
                              1  1-103  	maclist	on,save
                              2  1-104  	name	&1
                              3  1-105  
                              4  1-106  	include	stack_header
                              5  1-107  
                              6  1-108  	include	stack_frame
                              7  1-109  	include	gate_data
                              8  1-110  
                              9  1-111  	maclist	restore
                             10  1-112  	eject
                             11  1-113  
                             12  1-114  	tempd	.temp
                             13  1-115  	tempd	.label_variable(0)
                             14  1-116  	tempd	.time1,.time2
                             15  1-117  	tempd	.unwinder_arglist(0)
                             16  1-118  	tempd	.on_unit(5)
                             17  1-119  	temp	.pf,.entryp
                             18  1-120  	tempd	.vfl_arglist(2)
                             19  1-121  	tempd	.mcptr
                             20  1-122  
                             21  1-123  	use	transfer_vector
                             22  1-124  	equ	.tv_begin,*
                             23  1-125  
                             24  1-126  	tra	.actor
                             25  1-127  
                             26  1-128  	use	tv_end
                             27  1-129  	entrybound
                             28  1-130  
                             29  1-131  	segdef	.tv_end
                             30  1-132  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-133  
                             32  1-134  	use	main
                             33  1-135  
                             34  1-136  	segdef	.my_lp
                             35  1-137  	even
                             36  1-138  .my_lp:	bss	,2
                             37  1-139  
                             38  1-140  	join	/text/transfer_vector,tv_end,main
                             39  1-141  
                             40  1-142  	use	linkage
                             41  1-143  	join	/link/linkage
                             42  1-144  
                             43  1-145  	use	main
                             44  1-146  
                             45  1-147  	maclist	restore
                             46  1-148  	eject
                             47  1-149  
                             48  1-150  .actor:	epplp	.my_lp,*
                             49  1-151  	maclist	restore
                             50  1-152  	gate_actor
                             51  1-153  
                             52  1-154  
                             53  1-155  
                             54  1-156  .setup:	push
                             55  1-157  	epplp	.my_lp,*
                             56  1-158  	sprilp	sp|stack_frame.lp_ptr
                             57  1-159  
                             58  1-160  	maclist	restore
                             59  1-161  	gcheck
                             60  1-162  
                             61  1-163  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-164  	rccl	sys_info$clock_,*	calculate times
                             63  1-165  	sbaq	pds$cpu_time
                             64  1-166  	staq	.time1
                             65  1-167  	sbaq	pds$virtual_delta
                             66  1-168  	staq	.time2
                             67  1-169  	lda	pds$page_waits
                             68  1-170  	sta	.pf
                             69  1-171  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-172  	tra	0,2
                             71  1-173  
                             72  1-174  	maclist	restore
                             73  1-175  	eject
                             74  1-176  
                             75  1-177  .return_code:
                             76  1-178  
                             77  1-179  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-180  	rccl	sys_info$clock_,*	calculate times
                             79  1-181  	sbaq	pds$cpu_time
                             80  1-182  	staq	.temp
                             81  1-183  	sbaq	.time1
                             82  1-184  	adaq	bp|gate_entry_data.cpu_time
                             83  1-185  	staq	bp|gate_entry_data.cpu_time
                             84  1-186  	ldaq	.temp
                             85  1-187  	sbaq	pds$virtual_delta
                             86  1-188  	sbaq	.time2
                             87  1-189  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-190  	staq	bp|gate_entry_data.vcpu_time
                             89  1-191  	lda	pds$page_waits
                             90  1-192  	sbla	.pf
                             91  1-193  	asa	bp|gate_entry_data.page_waits
                             92  1-194  	aos	bp|gate_entry_data.calls
                             93  1-195  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-196  
                             95  1-197  			" Poll for ring alarms
                             96  1-198  	sra	.temp	Borrow from time calc
                             97  1-199  	szn	.temp	Zero?
                             98  1-200  	tnz	.ring_alarm
                             99  1-201  .return_code_return:
                            100  1-202  	return
                            101  1-203  
                            102  1-204  .ring_alarm:		" perhaps we can handle without faults?
                            103  1-205  
                            104  1-206  	aos	bp|gate_entry_data.ring_alarms
                            105  1-207  	epp1	sp|stack_frame.prev_sp,*
                            106  1-208  	epaq	pr1|stack_frame.return_ptr,*
                            107  1-209  	ana	7,dl	" ring number to which we return
                            108  1-210  	tze	.return_code_return " don't poll if we're staying in ring 0
                            109  1-211  	stz	.temp	" return argument for ring_alarm$poll
                            110  1-212  	ldaq	.one_arg_header
                            111  1-213  	staq	.ring_alarm_arg_list
                            112  1-214  	epp1	.temp
                            113  1-215  	spri1	.ring_alarm_arg_list+2
                            114  1-216  	eppap	.ring_alarm_arg_list
                            115  1-217  	short_call ring_alarm$poll
                            116  1-218  	szn	.temp
                            117  1-219  	tze	.return_code_return
                            118  1-220  	eppsp	sp|stack_frame.prev_sp,*
                            119  1-221  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            120  1-222  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            121  1-223  	spri1	sb|stack_header.stack_end_ptr
                            122  1-224  " Leave SB as stack_0, so pxss can get to operators.
                            123  1-225  	tra	pxss$pre_empt_poll
                            124  1-226  
                            125  1-227  	tempd	.ring_alarm_arg_list(2)
                            126  1-228  	even
                            127  1-229  .one_arg_header:
                            128  1-230  	vfd	17/2,1/0,18/4
                            129  1-231  	vfd	18/0,18/0
                            130  1-232  
                            131  1-233  
                            132  1-234  	maclist	restore
                            133  1-235  	eject
                            134  1-236  	maclist	restore
                            135  1-237  &end
                                 1-238  
                                 1-239  
                                 1-240  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-241  "			put this after the last hgate macro
                                 1-242  
                                 1-243  macro	bad_dir_handler
                              1  1-244  	maclist	on,save
                              2  1-245  
                              3  1-246  	include	on_unit
                              4  1-247  
                              5  1-248  	use	transfer_vector
                              6  1-249  .handler_entry:
                              7  1-250  	tra	.handler
                              8  1-251  .handler_restart_entry:
                              9  1-252  	tra	.handler_restart_point
                             10  1-253  
                             11  1-254  	use	main
                             12  1-255  .set_dir_trap:
                             13  1-256  	stx0	.entryp		save for restart
                             14  1-257  
                             15  1-258  	mlr	(),(pr),fill(000)
                             16  1-259  	desc9a	0,0
                             17  1-260  	desc9a	.on_unit,10*4
                             18  1-261  	eppbp	.bad_dir_name
                             19  1-262  	spribp	.on_unit+on_unit.name
                             20  1-263  	eppbp	.handler_entry
                             21  1-264  	spribp	.on_unit+on_unit.body
                             22  1-265  	lxl1	.bad_dir_desc
                             23  1-266  	sxl1	.on_unit+on_unit.size
                             24  1-267  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-268  	sbla	sp|0,du		.. make rel to sp
                             26  1-269  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-270  	lda	stack_frame.condition_bit,dl
                             28  1-271  	orsa	sp|stack_frame.flag_word
                             29  1-272  	tra	0,0
                             30  1-273  
                             31  1-274  	string	bad_dir_
                             32  1-275  
                             33  1-276  
                             34  1-277  
                             35  1-278  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-279  	cana	-1,dl		check ring number in AL
                             37  1-280  	tze	*+2
                             38  1-281  	zero	0		go way kid you bother me
                             39  1-282  
                             40  1-283  	push			" ok, we like the call
                             41  1-284  	epplp	.my_lp,*
                             42  1-285  	ldx0	ap|0		get display
                             43  1-286  	eppbp	ap|2,0*
                             44  1-287  	lda	bp|stack_frame.prev_sp
                             45  1-288  	cana	=o700000,dl	from another ring?
                             46  1-289  	tze	.continue_signal	if not, back to signal_
                             47  1-290  	eppap	ap|2,*		Get mcptr
                             48  1-291  	eppap	ap|0,*		..
                             49  1-292  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-293  	spribp	.label_variable+2
                             51  1-294  	eppbp	.handler_restart_entry
                             52  1-295  	spribp	.label_variable
                             53  1-296  	eppbp	.label_variable
                             54  1-297  	spribp	.unwinder_arglist+2
                             55  1-298  	fld	=1b24,dl
                             56  1-299  	staq	.unwinder_arglist
                             57  1-300  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-301  
                             59  1-302  .continue_signal:
                             60  1-303  	lda	=o400000,du	"1"b
                             61  1-304  	sta	ap|10,*		set continue bit
                             62  1-305  	return
                             63  1-306  
                             64  1-307  .handler_restart_point:
                             65  1-308  	epaq	sp|0		check that call came from ring 0
                             66  1-309  	cana	-1,dl
                             67  1-310  	tze	*+2
                             68  1-311  	zero	1
                             69  1-312  	epplp	.my_lp,*
                             70  1-313  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-314  	ansa	sp|stack_frame.flag_word
                             72  1-315  	eppbp	.mcptr
                             73  1-316  	spribp	.vfl_arglist+2
                             74  1-317  	fld	=1b24,dl
                             75  1-318  	staq	.vfl_arglist
                             76  1-319  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-320  	ldx0	.entryp
                             78  1-321  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-322  	tra	0,0		retry the call
                             80  1-323  
                             81  1-324  	maclist	restore
                             82  1-325  	eject
                             83  1-326  	maclist	restore
                             84  1-327  &end
                                 1-328  
                                 1-329  
                                 1-330  " GATE_INFO - general info for non-hardcore gates
                                 1-331  
                                 1-332  macro	gate_info
                              1  1-333  	maclist	on,save
                              2  1-334  	use	transfer_vector
                              3  1-335  	tra	.actor
                              4  1-336  
                              5  1-337  	use	tv_end
                              6  1-338  	entrybound
                              7  1-339  
                              8  1-340  	use	main
                              9  1-341  	join	/text/transfer_vector,tv_end,main
                             10  1-342  
                             11  1-343  	maclist	restore
                             12  1-344  	eject
                             13  1-345  
                             14  1-346  .actor:	getlp
                             15  1-347  	maclist	restore
                             16  1-348  	gate_actor
                             17  1-349  
                             18  1-350  	maclist	restore
                             19  1-351  	eject
                             20  1-352  
                             21  1-353  .setup:	push
                             22  1-354  	getlp
                             23  1-355  	maclist	restore
                             24  1-356  	gcheck
                             25  1-357  	tra	0,2
                             26  1-358  
                             27  1-359  	maclist	restore
                             28  1-360  	eject
                             29  1-361  
                             30  1-362  	maclist	restore
                             31  1-363  &end
                                 1-364  
                                 1-365  
                                 1-366  " Macro to generate gate actor.
                                 1-367  
                                 1-368  macro	gate_actor
                              1  1-369  	maclist	on,save
                              2  1-370  	eppbp	ap|2,*
                              3  1-371  	lda	bp|-1		get length of string
                              4  1-372  	tze	.return_name	zero length => get name
                              5  1-373  
                              6  1-374  	adla	1,dl		include length of acc
                              7  1-375  	stz	ap|4,*
                              8  1-376  	tsx0	.search_defs
                              9  1-377  
                             10  1-378  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-379  	desc9a	bp|-1(3),al
                             12  1-380  	desc9a	bb|0,al
                             13  1-381  	tnz	.next_def
                             14  1-382  
                             15  1-383  	lda	ab|1,2		return location
                             16  1-384  	arl	18
                             17  1-385  	sta	ap|4,*
                             18  1-386  
                             19  1-387  	short_return
                             20  1-388  
                             21  1-389  .return_name:
                             22  1-390  	lxl3	ap|4,*		get location
                             23  1-391  	tsx0	.search_defs
                             24  1-392  
                             25  1-393  	cmpx3	ab|1,2		compare location
                             26  1-394  	tnz	.next_def
                             27  1-395  
                             28  1-396  	lda	bb|0		get length of name
                             29  1-397  	arl	27
                             30  1-398  	sta	bp|-1		set length of varying string
                             31  1-399  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-400  	desc9a	bb|0(1),al
                             33  1-401  	desc9a	bp|0,al
                             34  1-402  
                             35  1-403  	short_return
                             36  1-404  
                             37  1-405  .search_defs:
                             38  1-406  	eax2	0
                             39  1-407  	eppab	lp|0,*		ab -> defs
                             40  1-408  .defs_loop:
                             41  1-409  	lxl1	ab|1,2		get class and flags
                             42  1-410  	cmpx1	=o400000,du	must be class 0
                             43  1-411  	tnz	.next_def
                             44  1-412  
                             45  1-413  	ldx7	ab|2,2
                             46  1-414  	eppbb	ab|0,7		bb -> name
                             47  1-415  	tra	0,0		test definition
                             48  1-416  .next_def:
                             49  1-417  	ldx2	ab|0,2		chain to next def
                             50  1-418  	tnz	.defs_loop
                             51  1-419  
                             52  1-420  	short_return
                             53  1-421  
                             54  1-422  &end
                                 1-423  
                                 1-424  
                                 1-425  " Miscellaneous macros.
                                 1-426  
                                 1-427  macro	gcheck
                              1  1-428  	maclist	on,save
                              2  1-429  	ldx1	-2,2		get number of args expected
                              3  1-430  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-431  	cmpx1	ap|0		compare against number given
                              5  1-432  	tze	.no_gate_error	args match, call procedure
                              6  1-433  
                              7  1-434  	call	signal_$signal_(signal_arglist)
                              8  1-435  	oct	0
                              9  1-436  
                             10  1-437  	even
                             11  1-438  signal_arglist:
                             12  1-439  	zero	2,4
                             13  1-440  	zero	2,0
                             14  1-441  	arg	.gate_errorname
                             15  1-442  	arg
                             16  1-443  	arg	.gate_errordesc
                             17  1-444  	arg
                             18  1-445  
                             19  1-446  	string	gate_error
                             20  1-447  
                             21  1-448  
                             22  1-449  .no_gate_error:
                             23  1-450  &end
                                 1-451  
                                 1-452  macro	string
                              1  1-453  .&1name:
                              2  1-454  	aci	"&1"
                              3  1-455  .&1desc:
                              4  1-456  	vfd	o9/525,o27/&l1
                              5  1-457  
                              6  1-458  &end
                                 1-459  
                                 1-460  macro	eject
                              1  1-461  	maclist	on,save
                              2  1-462  
                              3  1-463  &end
                                 1-464  
                                 1-465  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-466  
                                 1-467  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    28  
                                    29            include stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                        000004     2-8  	equ	stack_header.old_lot_ptr,4		obsolete ptr to lot
                        000006     2-9  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-10  
                        000010    2-11  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-12  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-13  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-14  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-15  	equ	stack_header.cur_lot_size,11		number of words (entries) in lot
                                  2-16  
                        000014    2-17  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-18  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-19  
                        000020    2-20  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-21  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-22  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-23  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-24  
                        000030    2-25  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-26  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-27  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-28  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-29  
                        000040    2-30  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-31  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-32  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-33  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-34  
                        000050    2-35  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-36  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-37  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-38  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-39  
                        000060    2-40  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-41  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-42  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-43  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-44  	equ	stack_header.task_data_ptr,56
                                  2-45  
                        000072    2-46  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000074    2-47  	equ	stack_header.in_trace,60		trace antirecurse bit
                                  2-48  
                        000100    2-49  	equ	stack_header_end,64			length of stack header
                                  2-50  
                                  2-51  
                                  2-52  
                                  2-53  
                        000000    2-54  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-55  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-56  
                                  2-57  "	The  following constant is an offset within the  pl1  operators table.
                                  2-58  "	It  references a  transfer vector table.
                                  2-59  
                        000551    2-60  	bool	tv_offset,551
                                  2-61  
                                  2-62  
                                  2-63  "	The  following constants are offsets within this transfer vector table.
                                  2-64  
                        001170    2-65  	equ	call_offset,tv_offset+271
                        001171    2-66  	equ	push_offset,tv_offset+272
                        001172    2-67  	equ	return_offset,tv_offset+273
                        001173    2-68  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-69  	equ	entry_offset,tv_offset+275
                                  2-70  
                                  2-71  
                                  2-72  " 	END INCLUDE FILE stack_header.incl.alm
                                    30            include stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                    31  
                                    32            gate_info
                                        	use	transfer_vector
    000000  0a   000016 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000016  aa  7 00046 2721 20         .actor:	getlp
    000017  aa  0 00002 3521 20         	eppbp	ap|2,*
    000020  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000021  0a   000035 6000 00         	tze	.return_name	zero length => get name
                                        
    000022  aa   000001 0350 07         	adla	1,dl		include length of acc
    000023  aa  0 00004 4501 20         	stz	ap|4,*
    000024  0a   000050 7000 00         	tsx0	.search_defs
                                        
    000025  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000026  aa   277777 600005          	desc9a	bp|-1(3),al
    000027  aa   300000 000005          	desc9a	bb|0,al
    000030  0a   000060 6010 00         	tnz	.next_def
                                        
    000031  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000032  aa   000022 7710 00         	arl	18
    000033  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000034  aa  7 00044 7101 20         	short_return
                                        
    000035                              .return_name:
    000035  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000036  0a   000050 7000 00         	tsx0	.search_defs
                                        
    000037  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000040  0a   000060 6010 00         	tnz	.next_def
                                        
    000041  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000042  aa   000033 7710 00         	arl	27
    000043  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000044  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000045  aa   300000 200005          	desc9a	bb|0(1),al
    000046  aa   200000 000005          	desc9a	bp|0,al
                                        
    000047  aa  7 00044 7101 20         	short_return
                                        
    000050                              .search_defs:
    000050  aa   000000 6220 00         	eax2	0
    000051  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000052                              .defs_loop:
    000052  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000053  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000054  0a   000060 6010 00         	tnz	.next_def
                                        
    000055  aa  1 00002 2271 12         	ldx7	ab|2,2
    000056  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000057  aa   000000 7100 10         	tra	0,0		test definition
    000060                              .next_def:
    000060  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000061  0a   000052 6010 00         	tnz	.defs_loop
                                        
    000062  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000063  aa   000060 6270 00         .setup:	push
    000064  aa  7 00040 2721 20
    000065  aa  7 00046 2721 20         	getlp
    000066  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000067  0a   000114 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000070  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000071  0a   000114 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000072  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000073  0a   000102 3500 00
    000074  4a  4 00010 3521 20
    000075  aa  6 00040 7531 00
    000076  aa  7 00036 6701 20
    000077  aa  6 00000 1731 00
    000100  aa  6 00040 0731 00
    000101  aa   000000 000000          	oct	0
                                        
                                        	even
    000102                              signal_arglist:
    000102  aa   000002 000004          	zero	2,4
    000103  aa   000002 000000          	zero	2,0
    000104  0a   000110 0000 00         	arg	.gate_errorname
    000105  aa   000000 0000 00         	arg
    000106  0a   000113 0000 00         	arg	.gate_errordesc
    000107  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000110                              .gate_errorname:
    000110  aa  147 141 164 145         	aci	"gate_error"
    000111  aa  137 145 162 162
    000112  aa  157 162 000 000
    000113                              .gate_errordesc:
    000113  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000114                              .no_gate_error:
    000114  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    33  
                                    34  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    35                      "      Gate entries to allow users to attach and detach
                                    36                      " Network sockets.  Normally, a user is only allowed to
                                    37                      " control sockets within his/her socket-group space, but if
                                    38                      " the user has access to certain "xx.acs" segments, then
                                    39                      " he/she is allowed to use other sockets.  Also, the
                                    40                      " ability to initiate connections to other hosts is
                                    41                      " controlled by the ring 1 environment.
                                    42                      " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    43  
                                    44            gate      accept_passoff,ncp_r1_interface_,accept_passoff,5
                        000001          	segdef	accept_passoff
    000001                              accept_passoff:
    000001  0a   000116 7100 00         	tra	accept_passoff.e
    000115  aa   000012 000000          	zero	5*2,0
    000116                              accept_passoff.e:
    000116  0a   000063 7020 00         	tsx2	.setup
    000117  aa   000000 6340 07         	ldi	=0,dl
    000120  4a  4 00012 3521 20         	short_call ncp_r1_interface_$accept_passoff(ap|0)
    000121  aa  7 00036 6701 20
    000122  aa  6 00030 3701 20
    000123  aa  7 00042 7101 20         	return
                                        
                                    45            gate      attach_priv_socket,ncp_r1_interface_,attach_priv_socket,5
                        000002          	segdef	attach_priv_socket
    000002                              attach_priv_socket:
    000002  0a   000125 7100 00         	tra	attach_priv_socket.e
    000124  aa   000012 000000          	zero	5*2,0
    000125                              attach_priv_socket.e:
    000125  0a   000063 7020 00         	tsx2	.setup
    000126  aa   000000 6340 07         	ldi	=0,dl
    000127  4a  4 00014 3521 20         	short_call ncp_r1_interface_$attach_priv_socket(ap|0)
    000130  aa  7 00036 6701 20
    000131  aa  6 00030 3701 20
    000132  aa  7 00042 7101 20         	return
                                        
                                    46            gate      attach_socket,ncp_r1_interface_,attach_socket,4
                        000003          	segdef	attach_socket
    000003                              attach_socket:
    000003  0a   000134 7100 00         	tra	attach_socket.e
    000133  aa   000010 000000          	zero	4*2,0
    000134                              attach_socket.e:
    000134  0a   000063 7020 00         	tsx2	.setup
    000135  aa   000000 6340 07         	ldi	=0,dl
    000136  4a  4 00016 3521 20         	short_call ncp_r1_interface_$attach_socket(ap|0)
    000137  aa  7 00036 6701 20
    000140  aa  6 00030 3701 20
    000141  aa  7 00042 7101 20         	return
                                        
                                    47            gate      detach_socket,ncp_r1_interface_,detach_socket,2
                        000004          	segdef	detach_socket
    000004                              detach_socket:
    000004  0a   000143 7100 00         	tra	detach_socket.e
    000142  aa   000004 000000          	zero	2*2,0
    000143                              detach_socket.e:
    000143  0a   000063 7020 00         	tsx2	.setup
    000144  aa   000000 6340 07         	ldi	=0,dl
    000145  4a  4 00020 3521 20         	short_call ncp_r1_interface_$detach_socket(ap|0)
    000146  aa  7 00036 6701 20
    000147  aa  6 00030 3701 20
    000150  aa  7 00042 7101 20         	return
                                        
                                    48            gate      get_access_dir,ncp_r1_interface_,get_access_dir,2
                        000005          	segdef	get_access_dir
    000005                              get_access_dir:
    000005  0a   000152 7100 00         	tra	get_access_dir.e
    000151  aa   000004 000000          	zero	2*2,0
    000152                              get_access_dir.e:
    000152  0a   000063 7020 00         	tsx2	.setup
    000153  aa   000000 6340 07         	ldi	=0,dl
    000154  4a  4 00022 3521 20         	short_call ncp_r1_interface_$get_access_dir(ap|0)
    000155  aa  7 00036 6701 20
    000156  aa  6 00030 3701 20
    000157  aa  7 00042 7101 20         	return
                                        
                                    49            gate      get_socket_group_id,ncp_r1_interface_,get_socket_group_id,2
                        000006          	segdef	get_socket_group_id
    000006                              get_socket_group_id:
    000006  0a   000161 7100 00         	tra	get_socket_group_id.e
    000160  aa   000004 000000          	zero	2*2,0
    000161                              get_socket_group_id.e:
    000161  0a   000063 7020 00         	tsx2	.setup
    000162  aa   000000 6340 07         	ldi	=0,dl
    000163  4a  4 00024 3521 20         	short_call ncp_r1_interface_$get_socket_group_id(ap|0)
    000164  aa  7 00036 6701 20
    000165  aa  6 00030 3701 20
    000166  aa  7 00042 7101 20         	return
                                        
                                    50            gate      initiate_connection,ncp_r1_interface_,initiate_connection,5
                        000007          	segdef	initiate_connection
    000007                              initiate_connection:
    000007  0a   000170 7100 00         	tra	initiate_connection.e
    000167  aa   000012 000000          	zero	5*2,0
    000170                              initiate_connection.e:
    000170  0a   000063 7020 00         	tsx2	.setup
    000171  aa   000000 6340 07         	ldi	=0,dl
    000172  4a  4 00026 3521 20         	short_call ncp_r1_interface_$initiate_connection(ap|0)
    000173  aa  7 00036 6701 20
    000174  aa  6 00030 3701 20
    000175  aa  7 00042 7101 20         	return
                                        
                                    51            gate      passoff_socket,ncp_r1_interface_,passoff_socket,4
                        000010          	segdef	passoff_socket
    000010                              passoff_socket:
    000010  0a   000177 7100 00         	tra	passoff_socket.e
    000176  aa   000010 000000          	zero	4*2,0
    000177                              passoff_socket.e:
    000177  0a   000063 7020 00         	tsx2	.setup
    000200  aa   000000 6340 07         	ldi	=0,dl
    000201  4a  4 00030 3521 20         	short_call ncp_r1_interface_$passoff_socket(ap|0)
    000202  aa  7 00036 6701 20
    000203  aa  6 00030 3701 20
    000204  aa  7 00042 7101 20         	return
                                        
                                    52  
                                    53            " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    54                      " Gate entries for getting information about the global
                                    55                      " state of the NCP.
                                    56                      " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    57  
                                    58            gate      add_global_ev_chn,ncp_r1_interface_,r1_add_global_ev_chn,2
                        000011          	segdef	add_global_ev_chn
    000011                              add_global_ev_chn:
    000011  0a   000206 7100 00         	tra	add_global_ev_chn.e
    000205  aa   000004 000000          	zero	2*2,0
    000206                              add_global_ev_chn.e:
    000206  0a   000063 7020 00         	tsx2	.setup
    000207  aa   000000 6340 07         	ldi	=0,dl
    000210  4a  4 00032 3521 20         	short_call ncp_r1_interface_$r1_add_global_ev_chn(ap|0)
    000211  aa  7 00036 6701 20
    000212  aa  6 00030 3701 20
    000213  aa  7 00042 7101 20         	return
                                        
                                    59            gate      check_ncp_global_state,ncp_r1_interface_,r1_check_ncp_global_state,0
                        000012          	segdef	check_ncp_global_state
    000012                              check_ncp_global_state:
    000012  0a   000215 7100 00         	tra	check_ncp_global_state.e
    000214  aa   000000 000000          	zero	0*2,0
    000215                              check_ncp_global_state.e:
    000215  0a   000063 7020 00         	tsx2	.setup
    000216  aa   000000 6340 07         	ldi	=0,dl
    000217  4a  4 00034 3521 20         	short_call ncp_r1_interface_$r1_check_ncp_global_state(ap|0)
    000220  aa  7 00036 6701 20
    000221  aa  6 00030 3701 20
    000222  aa  7 00042 7101 20         	return
                                        
                                    60            gate      remove_global_ev_chn,ncp_r1_interface_,r1_remove_global_ev_chn,2
                        000013          	segdef	remove_global_ev_chn
    000013                              remove_global_ev_chn:
    000013  0a   000224 7100 00         	tra	remove_global_ev_chn.e
    000223  aa   000004 000000          	zero	2*2,0
    000224                              remove_global_ev_chn.e:
    000224  0a   000063 7020 00         	tsx2	.setup
    000225  aa   000000 6340 07         	ldi	=0,dl
    000226  4a  4 00036 3521 20         	short_call ncp_r1_interface_$r1_remove_global_ev_chn(ap|0)
    000227  aa  7 00036 6701 20
    000230  aa  6 00030 3701 20
    000231  aa  7 00042 7101 20         	return
                                        
                                    61            gate      set_global_notify_channel,ncp_r1_interface_,r1_set_global_notify_channel,2
                        000014          	segdef	set_global_notify_channel
    000014                              set_global_notify_channel:
    000014  0a   000233 7100 00         	tra	set_global_notify_channel.e
    000232  aa   000004 000000          	zero	2*2,0
    000233                              set_global_notify_channel.e:
    000233  0a   000063 7020 00         	tsx2	.setup
    000234  aa   000000 6340 07         	ldi	=0,dl
    000235  4a  4 00040 3521 20         	short_call ncp_r1_interface_$r1_set_global_notify_channel(ap|0)
    000236  aa  7 00036 6701 20
    000237  aa  6 00030 3701 20
    000240  aa  7 00042 7101 20         	return
                                        
                                    62  
                                    63            end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000242  5a   000003 000000 
    000243  5a   000160 600000 
    000244  aa   000000 000000 
    000245  55   000012 000002 
    000246  5a   000002 400003 
    000247  55   000006 000012 
    000250  aa  017 156 145 164
    000251  aa  137 162 151 156
    000252  aa  147 061 137 165
    000253  aa  163 145 162 137
    000254  55   000024 000003 
    000255  0a   000014 400000 
    000256  55   000015 000003 
    000257  aa  031 163 145 164         set_global_notify_channel
    000260  aa  137 147 154 157
    000261  aa  142 141 154 137
    000262  aa  156 157 164 151
    000263  aa  146 171 137 143
    000264  aa  150 141 156 156
    000265  aa  145 154 000 000
    000266  55   000035 000012 
    000267  0a   000013 400000 
    000270  55   000027 000003 
    000271  aa  024 162 145 155         remove_global_ev_chn
    000272  aa  157 166 145 137
    000273  aa  147 154 157 142
    000274  aa  141 154 137 145
    000275  aa  166 137 143 150
    000276  aa  156 000 000 000
    000277  55   000046 000024 
    000300  0a   000012 400000 
    000301  55   000040 000003 
    000302  aa  026 143 150 145         check_ncp_global_state
    000303  aa  143 153 137 156
    000304  aa  143 160 137 147
    000305  aa  154 157 142 141
    000306  aa  154 137 163 164
    000307  aa  141 164 145 000
    000310  55   000056 000035 
    000311  0a   000011 400000 
    000312  55   000051 000003 
    000313  aa  021 141 144 144         add_global_ev_chn
    000314  aa  137 147 154 157
    000315  aa  142 141 154 137
    000316  aa  145 166 137 143
    000317  aa  150 156 000 000
    000320  55   000065 000046 
    000321  0a   000010 400000 
    000322  55   000061 000003 
    000323  aa  016 160 141 163         passoff_socket
    000324  aa  163 157 146 146
    000325  aa  137 163 157 143
    000326  aa  153 145 164 000
    000327  55   000075 000056 
    000330  0a   000007 400000 
    000331  55   000070 000003 
    000332  aa  023 151 156 151         initiate_connection
    000333  aa  164 151 141 164
    000334  aa  145 137 143 157
    000335  aa  156 156 145 143
    000336  aa  164 151 157 156
    000337  55   000105 000065 
    000340  0a   000006 400000 
    000341  55   000100 000003 
    000342  aa  023 147 145 164         get_socket_group_id
    000343  aa  137 163 157 143
    000344  aa  153 145 164 137
    000345  aa  147 162 157 165
    000346  aa  160 137 151 144
    000347  55   000114 000075 
    000350  0a   000005 400000 
    000351  55   000110 000003 
    000352  aa  016 147 145 164         get_access_dir
    000353  aa  137 141 143 143
    000354  aa  145 163 163 137
    000355  aa  144 151 162 000
    000356  55   000123 000105 
    000357  0a   000004 400000 
    000360  55   000117 000003 
    000361  aa  015 144 145 164         detach_socket
    000362  aa  141 143 150 137
    000363  aa  163 157 143 153
    000364  aa  145 164 000 000
    000365  55   000132 000114 
    000366  0a   000003 400000 
    000367  55   000126 000003 
    000370  aa  015 141 164 164         attach_socket
    000371  aa  141 143 150 137
    000372  aa  163 157 143 153
    000373  aa  145 164 000 000
    000374  55   000142 000123 
    000375  0a   000002 400000 
    000376  55   000135 000003 
    000377  aa  022 141 164 164         attach_priv_socket
    000400  aa  141 143 150 137
    000401  aa  160 162 151 166
    000402  aa  137 163 157 143
    000403  aa  153 145 164 000
    000404  55   000151 000132 
    000405  0a   000001 400000 
    000406  55   000145 000003 
    000407  aa  016 141 143 143         accept_passoff
    000410  aa  145 160 164 137
    000411  aa  160 141 163 163
    000412  aa  157 146 146 000
    000413  55   000002 000142 
    000414  6a   000000 400002 
    000415  55   000154 000003 
    000416  aa  014 163 171 155         symbol_table
    000417  aa  142 157 154 137
    000420  aa  164 141 142 154
    000421  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000422  aa   000000 000033 
    000423  5a   000065 000000 
    000424  aa   000000 000000 
    000425  5a   000142 000000 
    000426  5a   000123 000000 
    000427  aa   000000 000000 
    000430  aa   000000 000000 
    000431  aa   000000 000000 
    000432  aa   000000 000000 
    000433  5a   000056 000000 
    000434  aa   000000 000000 
    000435  5a   000151 000000 
    000436  aa   000000 000000 
    000437  aa   000000 000000 
    000440  aa   000000 000000 
    000441  aa   000000 000000 
    000442  aa   000000 000000 
    000443  aa   000000 000000 
    000444  aa   000000 000000 
    000445  5a   000075 000000 
    000446  aa   000000 000000 
    000447  5a   000035 000000 
    000450  5a   000024 000000 
    000451  5a   000114 000000 
    000452  5a   000105 000000 
    000453  5a   000012 000000 
    000454  5a   000132 000000 
    000455  5a   000046 000000 

EXTERNAL NAMES

    000456  aa  034 162 061 137         r1_set_global_notify_channel
    000457  aa  163 145 164 137
    000460  aa  147 154 157 142
    000461  aa  141 154 137 156
    000462  aa  157 164 151 146
    000463  aa  171 137 143 150
    000464  aa  141 156 156 145
    000465  aa  154 000 000 000
    000466  aa  027 162 061 137         r1_remove_global_ev_chn
    000467  aa  162 145 155 157
    000470  aa  166 145 137 147
    000471  aa  154 157 142 141
    000472  aa  154 137 145 166
    000473  aa  137 143 150 156
    000474  aa  031 162 061 137         r1_check_ncp_global_state
    000475  aa  143 150 145 143
    000476  aa  153 137 156 143
    000477  aa  160 137 147 154
    000500  aa  157 142 141 154
    000501  aa  137 163 164 141
    000502  aa  164 145 000 000
    000503  aa  024 162 061 137         r1_add_global_ev_chn
    000504  aa  141 144 144 137
    000505  aa  147 154 157 142
    000506  aa  141 154 137 145
    000507  aa  166 137 143 150
    000510  aa  156 000 000 000
    000511  aa  021 156 143 160         ncp_r1_interface_
    000512  aa  137 162 061 137
    000513  aa  151 156 164 145
    000514  aa  162 146 141 143
    000515  aa  145 137 000 000
    000516  aa  007 163 151 147         signal_
    000517  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000520  aa   000004 000000 
    000521  55   000247 000214 
    000522  aa   000004 000000 
    000523  55   000247 000224 
    000524  aa   000004 000000 
    000525  55   000247 000232 
    000526  aa   000004 000000 
    000527  55   000247 000241 
    000530  aa   000004 000000 
    000531  55   000247 000061 
    000532  aa   000004 000000 
    000533  55   000247 000070 
    000534  aa   000004 000000 
    000535  55   000247 000100 
    000536  aa   000004 000000 
    000537  55   000247 000110 
    000540  aa   000004 000000 
    000541  55   000247 000117 
    000542  aa   000004 000000 
    000543  55   000247 000126 
    000544  aa   000004 000000 
    000545  55   000247 000135 
    000546  aa   000004 000000 
    000547  55   000247 000145 
    000550  aa   000004 000000 
    000551  55   000254 000254 
    000552  aa   000001 000000 
    000553  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000554  5a   000256 000000 
    000555  5a   000260 000000 
    000556  5a   000262 000000 
    000557  5a   000264 000000 
    000560  5a   000266 000000 
    000561  5a   000270 000000 
    000562  5a   000272 000000 
    000563  5a   000274 000000 
    000564  5a   000276 000000 
    000565  5a   000300 000000 
    000566  5a   000302 000000 
    000567  5a   000304 000000 
    000570  5a   000306 000000 
    000571  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000242 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000042 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000326 0000 00
    000012  9a   777766 0000 46         ncp_r1_interface_|accept_passoff
    000013  5a   000325 0000 00
    000014  9a   777764 0000 46         ncp_r1_interface_|attach_priv_socket
    000015  5a   000324 0000 00
    000016  9a   777762 0000 46         ncp_r1_interface_|attach_socket
    000017  5a   000323 0000 00
    000020  9a   777760 0000 46         ncp_r1_interface_|detach_socket
    000021  5a   000322 0000 00
    000022  9a   777756 0000 46         ncp_r1_interface_|get_access_dir
    000023  5a   000321 0000 00
    000024  9a   777754 0000 46         ncp_r1_interface_|get_socket_group_id
    000025  5a   000320 0000 00
    000026  9a   777752 0000 46         ncp_r1_interface_|initiate_connection
    000027  5a   000317 0000 00
    000030  9a   777750 0000 46         ncp_r1_interface_|passoff_socket
    000031  5a   000316 0000 00
    000032  9a   777746 0000 46         ncp_r1_interface_|r1_add_global_ev_chn
    000033  5a   000315 0000 00
    000034  9a   777744 0000 46         ncp_r1_interface_|r1_check_ncp_global_state
    000035  5a   000314 0000 00
    000036  9a   777742 0000 46         ncp_r1_interface_|r1_remove_global_ev_chn
    000037  5a   000313 0000 00
    000040  9a   777740 0000 46         ncp_r1_interface_|r1_set_global_notify_channel
    000041  5a   000312 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 112646 
    000007  aa   411647 445024 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000217 
    000020  aa   000000 000155 
    000021  aa   000000 000176 
    000022  aa   000206 000155 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000050 
    000067  aa   126434 044736 
    000070  aa   000000 112646 
    000071  aa   373342 200000 
    000072  aa   000120 000051 
    000073  aa   126415 032457 
    000074  aa   000000 112642 
    000075  aa   522202 000000 
    000076  aa   000133 000042 
    000077  aa   120345 447426 
    000100  aa   000000 112034 
    000101  aa   634146 000000 
    000102  aa   000144 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   076163 160145          >spec>temp>bce>40-00>net_ring1_user_.alm
    000107  aa   143076 164145 
    000110  aa   155160 076142 
    000111  aa   143145 076064 
    000112  aa   060055 060060 
    000113  aa   076156 145164 
    000114  aa   137162 151156 
    000115  aa   147061 137165 
    000116  aa   163145 162137 
    000117  aa   056141 154155 
    000120  aa   076163 160145          >spec>temp>bce>40-00>gate_macros.incl.alm
    000121  aa   143076 164145 
    000122  aa   155160 076142 
    000123  aa   143145 076064 
    000124  aa   060055 060060 
    000125  aa   076147 141164 
    000126  aa   145137 155141 
    000127  aa   143162 157163 
    000130  aa   056151 156143 
    000131  aa   154056 141154 
    000132  aa   155040 040040 
    000133  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000134  aa   076151 156143 
    000135  aa   154165 144145 
    000136  aa   076163 164141 
    000137  aa   143153 137150 
    000140  aa   145141 144145 
    000141  aa   162056 151156 
    000142  aa   143154 056141 
    000143  aa   154155 040040 
    000144  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000145  aa   076151 156143 
    000146  aa   154165 144145 
    000147  aa   076163 164141 
    000150  aa   143153 137146 
    000151  aa   162141 155145 
    000152  aa   056151 156143 
    000153  aa   154056 141154 
    000154  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          16    .actor                   net_ring1_user_:     32.
          52    .defs_loop               net_ring1_user_:     32.
         113    .gate_errordesc          net_ring1_user_:     32.
         110    .gate_errorname          net_ring1_user_:     32.
          60    .next_def                net_ring1_user_:     32.
         114    .no_gate_error           net_ring1_user_:     32.
          35    .return_name             net_ring1_user_:     32.
          50    .search_defs             net_ring1_user_:     32.
          63    .setup                   net_ring1_user_:     32,   44,   45,   46,   47,   48,   49,   50,   51,   58,   59,
                                                              60,   61.
           1    accept_passoff           net_ring1_user_:     44.
         116    accept_passoff.e         net_ring1_user_:     44.
          11    add_global_ev_chn        net_ring1_user_:     58.
         206    add_global_ev_chn.e      net_ring1_user_:     58.
           2    attach_priv_socket       net_ring1_user_:     45.
         125    attach_priv_socket.e     net_ring1_user_:     45.
           3    attach_socket            net_ring1_user_:     46.
         134    attach_socket.e          net_ring1_user_:     46.
        1170    call_offset              stack_header:        65.
          12    check_ncp_global_state   net_ring1_user_:     59.
         215    check_ncp_global_state.e       net_ring1_user_:     59.
           4    detach_socket            net_ring1_user_:     47.
         143    detach_socket.e          net_ring1_user_:     47.
        1174    entry_offset             stack_header:        69.
           5    get_access_dir           net_ring1_user_:     48.
         152    get_access_dir.e         net_ring1_user_:     48.
           6    get_socket_group_id      net_ring1_user_:     49.
         161    get_socket_group_id.e    net_ring1_user_:     49.
           7    initiate_connection      net_ring1_user_:     50.
         170    initiate_connection.e    net_ring1_user_:     50.
          16    main                     net_ring1_user_:     32,   44,   45,   46,   47,   48,   49,   50,   51,   58,   59,
                                                              60,   61.
                ncp_r1_interface_        net_ring1_user_:     44,   45,   46,   47,   48,   49,   50,   51,   58,   59,   60,   61.
          10    passoff_socket           net_ring1_user_:     51.
         177    passoff_socket.e         net_ring1_user_:     51.
        1171    push_offset              stack_header:        66.
                r1_add_global_ev_chn     net_ring1_user_:     58.
                r1_check_ncp_global_state      net_ring1_user_:     59.
                r1_remove_global_ev_chn  net_ring1_user_:     60.
                r1_set_global_notify_channel   net_ring1_user_:     61.
          13    remove_global_ev_chn     net_ring1_user_:     60.
         224    remove_global_ev_chn.e   net_ring1_user_:     60.
        1173    return_no_pop_offset     stack_header:        68.
        1172    return_offset            stack_header:        67.
          14    set_global_notify_channel      net_ring1_user_:     61.
         233    set_global_notify_channel.e    net_ring1_user_:     61.
                signal_                  net_ring1_user_:     32.
         102    signal_arglist           net_ring1_user_:     32.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        43.
          32    stack_header.bar_mode_sp       stack_header:        26.
          36    stack_header.call_op_ptr       stack_header:        28.
          10    stack_header.clr_ptr     stack_header:        11.
           6    stack_header.combined_stat_ptr       stack_header:         9.
          13    stack_header.cur_lot_size      stack_header:        15.
          64    stack_header.ect_ptr     stack_header:        42.
          46    stack_header.entry_op_ptr      stack_header:        33.
          74    stack_header.in_trace    stack_header:        47.
          52    stack_header.isot_ptr    stack_header:        36.
          26    stack_header.lot_ptr     stack_header:        23.
          12    stack_header.main_proc_invoked       stack_header:        13.
          12    stack_header.max_lot_size      stack_header:        12.
           4    stack_header.old_lot_ptr       stack_header:         8.
          20    stack_header.parent_ptr  stack_header:        20.
          34    stack_header.pl1_operators_ptr       stack_header:        27.
          40    stack_header.push_op_ptr       stack_header:        30.
          42    stack_header.return_op_ptr     stack_header:        31.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        32.
          62    stack_header.rnt_ptr     stack_header:        41.
          12    stack_header.run_unit_depth    stack_header:        14.
          54    stack_header.sct_ptr     stack_header:        37.
          30    stack_header.signal_ptr  stack_header:        25.
          22    stack_header.stack_begin_ptr   stack_header:        21.
          24    stack_header.stack_end_ptr     stack_header:        22.
          14    stack_header.system_free_ptr   stack_header:        17.
          60    stack_header.sys_link_info_ptr       stack_header:        40.
          70    stack_header.task_data_ptr     stack_header:        44.
          72    stack_header.trace_frames      stack_header:        46.
          50    stack_header.trans_op_tv_ptr   stack_header:        35.
          56    stack_header.unwinder_ptr      stack_header:        38.
          16    stack_header.user_free_ptr     stack_header:        18.
         100    stack_header_end         stack_header:        49.
           0    trace_frames.count       stack_header:        54.
           1    trace_frames.top_ptr     stack_header:        55.
           0    transfer_vector          net_ring1_user_:     32,   44,   45,   46,   47,   48,   49,   50,   51,   58,   59,
                                                              60,   61.
          15    tv_end                   net_ring1_user_:     32.
         551    tv_offset                stack_header:        60,   65,   66,   67,   68,   69.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
