ASSEMBLY LISTING OF SEGMENT >spec>install>1110>char_bit_offset_fcns_.alm                                                                                                                            
ASSEMBLED ON:	11/11/89  0946.6 mst Sat
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    13  "
                                    14  " Subroutines to manipulate the word and bit numbers of an ITS pointer as
                                    15  " either a character or bit offset from the base of the segment referenced
                                    16  " by the ITS pointer
                                    17  "
                                    18  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    19  
                                    20  " Created: September 1980 by G. Palter
                                    21  
                                    22  
    000000                          23  	name	char_bit_offset_fcns_
                                    24  
                        000046      25  	segdef	char_offset_		" return character offset of pointer
                        000055      26  	segdef	add_char_offset_		" increment the character offset
                        000063      27  	segdef	set_char_offset_		" set the character offset
                                    28  
                        000071      29  	segdef	bit_offset_
                        000105      30  	segdef	add_bit_offset_		" as above but for bit offsets
                        000113      31  	segdef	set_bit_offset_
                                    32  
                                    33  
                                    34  " Constants
                                    35  
                                    36  	even
    000000                          37  word_bit_mask:				" mask to obtain word and bit offsets
    000000  aa   000000 000000      38  	vfd	36/0			" nothing usefull in the A
    000001  aa   777777 077000      39  	vfd	18/-1,3/0,6/-1,9/0
                                    40  
                                    41  
    000002                          42  bit_to_char_offset:				" converts bit offset to character offset
    000002  aa   000000 000000      43  	vfd	36/0,36/0,36/0,36/0,36/0,36/0,36/0,36/0,36/0
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  aa   000000 000000 
    000007  aa   000000 000000 
    000010  aa   000000 000000 
    000011  aa   000000 000000 
    000012  aa   000000 000000 
    000013  aa   000000 000001      44  	vfd	36/1,36/1,36/1,36/1,36/1,36/1,36/1,36/1,36/1
    000014  aa   000000 000001 
    000015  aa   000000 000001 
    000016  aa   000000 000001 
    000017  aa   000000 000001 
    000020  aa   000000 000001 
    000021  aa   000000 000001 
    000022  aa   000000 000001 
    000023  aa   000000 000001 
    000024  aa   000000 000002      45  	vfd	36/2,36/2,36/2,36/2,36/2,36/2,36/2,36/2,36/2
    000025  aa   000000 000002 
    000026  aa   000000 000002 
    000027  aa   000000 000002 
    000030  aa   000000 000002 
    000031  aa   000000 000002 
    000032  aa   000000 000002 
    000033  aa   000000 000002 
    000034  aa   000000 000002 
    000035  aa   000000 000003      46  	vfd	36/3,36/3,36/3,36/3,36/3,36/3,36/3,36/3,36/3
    000036  aa   000000 000003 
    000037  aa   000000 000003 
    000040  aa   000000 000003 
    000041  aa   000000 000003 
    000042  aa   000000 000003 
    000043  aa   000000 000003 
    000044  aa   000000 000003 
    000045  aa   000000 000003 
                                    47  
                                    48  " 
                                    49  
                                    50  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    51  "
                                    52  " char_offset_: Returns the character offset relative to the base of the
                                    53  "	      segment of the character addressed by the given pointer
                                    54  "
                                    55  "    dcl  char_offset_ entry (pointer) returns (fixed binary (21)) reducible;
                                    56  "    character_offset = char_offset_ (pointer_value);
                                    57  "
                                    58  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    59  
    000046                          60  char_offset_:
    000046  aa  0 00002 2371 20     61  	ldaq	pr0|2,*			" pickup the pointer
    000047  0a   000000 3770 00     62  	anaq	word_bit_mask		" clear unwanted bits from pointer
    000050  aa   000024 7770 00     63  	llr	18+2			" puts character offset into A
    000051  aa   000035 7720 00     64  	qrl	9+18+2			" puts bit offset into QL
    000052  0a   000002 0750 06     65  	ada	bit_to_char_offset,ql	" add in converted bit offset
    000053  aa  0 00004 7551 20     66  	sta	pr0|4,*			" and return it
    000054  aa  7 00044 7101 20     67  	short_return
                                    68  
                                    69  
                                    70  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    71  "
                                    72  " add_char_offset_: Constructs a pointer to a character relative to the
                                    73  "		character referenced by the input pointer;" the
                                    74  "		displacement to the new character may be positive/negative
                                    75  "
                                    76  "    dcl  add_char_offset_ entry (pointer, fixed binary (21)) returns (pointer)
                                    77  "		       reducible;
                                    78  "    new_pointer_value = add_char_offset_ (pointer_value, char_displacement);
                                    79  "
                                    80  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    81  
    000055                          82  add_char_offset_:
    000055  aa  0 00002 3535 20     83  	epp3	pr0|2,*			" pick up pointer
    000056  aa  3 00000 3535 20     84  	epp3	pr3|0,*
    000057  aa  0 00004 2351 20     85  	lda	pr0|4,*			" get character displacement
    000060  aa  3 00000 5005 05     86  	a9bd	pr3|0,al			" ZAP!
    000061  aa  0 00006 2535 20     87  	spri3	pr0|6,*			" set output pointer
    000062  aa  7 00044 7101 20     88  	short_return
                                    89  
                                    90  
                                    91  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    92  "
                                    93  " set_char_offset_: Constructs a pointer to a character in the segment
                                    94  "		referenced by the input pointer
                                    95  "
                                    96  "    dcl  set_char_offset_ entry (pointer, fixed binary (21)) returns (pointer)
                                    97  "		       reducible;
                                    98  "    new_pointer_value = set_char_offset_ (pointer_value, character_offset);
                                    99  "
                                   100  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   101  
    000063                         102  set_char_offset_:
    000063  aa  0 00002 3535 20    103  	epp3	pr0|2,*			" get pointer to segment ...
    000064  aa  3 00000 3531 20    104  	epbp3	pr3|0,*			" ... base of input pointer
    000065  aa  0 00004 2351 20    105  	lda	pr0|4,*			" get new character offset
    000066  aa  3 00000 5005 05    106  	a9bd	pr3|0,al			" ZAP!
    000067  aa  0 00006 2535 20    107  	spri3	pr0|6,*			" store into output value
    000070  aa  7 00044 7101 20    108  	short_return
                                   109  
                                   110  " 
                                   111  
                                   112  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   113  "
                                   114  " bit_offset_: Returns the bit offset relative to the base of the segment of
                                   115  "	     the bit addressed by the given pointer
                                   116  "
                                   117  "    dcl  bit_offset entry (pointer) returns (fixed binary (24)) reducible;
                                   118  "    bit_offset = bit_offset_ (pointer_value);
                                   119  "
                                   120  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   121  
    000071                         122  bit_offset_:
    000071  aa  0 00002 2371 20    123  	ldaq	pr0|2,*			" pickup the pointer
    000072  0a   000000 3770 00    124  	anaq	word_bit_mask		" mask out the useless bits
    000073  aa   000022 7770 00    125  	llr	18			" puts word offset into A
    000074  aa   000000 6200 05    126  	eax0	0,al			" copy word offset
    000075  aa   000005 7750 00    127  	alr	5			" 32 * word offset into A
    000076  aa   000033 7720 00    128  	qrl	9+18			" puts bit offset into QL
    000077  aa  0 00004 7561 20    129  	stq	pr0|4,*			" save it here
    000100  aa   000000 6360 10    130  	eaq	0,x0			" get back the word offset
    000101  aa   000020 7720 00    131  	qrl	18-2			" 4 * word offset into Q
    000102  aa  0 00004 0561 20    132  	asq	pr0|4,*			" add to bit offset in word
    000103  aa  0 00004 0551 20    133  	asa	pr0|4,*			" add 32 * word offset to get 36*WO + BO
    000104  aa  7 00044 7101 20    134  	short_return
                                   135  
                                   136  
                                   137  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   138  "
                                   139  " add_bit_offset_: Constructs a pointer to a bit relative to the bit referenced
                                   140  "	         by the input pointer;" the displacement to the new bit may
                                   141  "	         be positive or negative
                                   142  "
                                   143  "    dcl  add_bit_offset_ entry (pointer, fixed binary (24)) returns (pointer)
                                   144  "		      reducible;
                                   145  "    new_pointer_value = add_bit_offset_ (pointer_value, bit_displacement);
                                   146  "
                                   147  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   148  
    000105                         149  add_bit_offset_:
    000105  aa  0 00002 3535 20    150  	epp3	pr0|2,*			" pick up pointer
    000106  aa  3 00000 3535 20    151  	epp3	pr3|0,*
    000107  aa  0 00004 2351 20    152  	lda	pr0|4,*			" get bit displacement
    000110  aa  3 00000 5035 05    153  	abd	pr3|0,al			" ZAP!
    000111  aa  0 00006 2535 20    154  	spri3	pr0|6,*			" set output pointer
    000112  aa  7 00044 7101 20    155  	short_return
                                   156  
                                   157  
                                   158  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   159  "
                                   160  " set_bit_offset_: Constructs a pointer to a bit in the segment referenced by
                                   161  "	         the input pointer
                                   162  "
                                   163  "    dcl  set_bit_offset_ entry (pointer, fixed binary (24)) returns (pointer)
                                   164  "		      reducible;
                                   165  "    new_pointer_value = set_bit_offset_ (pointer_value, bit_offset);
                                   166  "
                                   167  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   168  
    000113                         169  set_bit_offset_:
    000113  aa  0 00002 3535 20    170  	epp3	pr0|2,*			" get pointer to segment ...
    000114  aa  3 00000 3531 20    171  	epbp3	pr3|0,*			" ... base of input pointer
    000115  aa  0 00004 2351 20    172  	lda	pr0|4,*			" get new bit offset
    000116  aa  3 00000 5035 05    173  	abd	pr3|0,al			" ZAP!
    000117  aa  0 00006 2535 20    174  	spri3	pr0|6,*			" store into output value
    000120  aa  7 00044 7101 20    175  	short_return
                                   176  
                                   177  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000122  5a   000003 000000 
    000123  5a   000076 600000 
    000124  aa   000000 000000 
    000125  55   000014 000002 
    000126  5a   000002 400003 
    000127  55   000006 000014 
    000130  aa  025 143 150 141
    000131  aa  162 137 142 151
    000132  aa  164 137 157 146
    000133  aa  146 163 145 164
    000134  aa  137 146 143 156
    000135  aa  163 137 000 000
    000136  55   000023 000003 
    000137  0a   000113 400000 
    000140  55   000017 000003 
    000141  aa  017 163 145 164         set_bit_offset_
    000142  aa  137 142 151 164
    000143  aa  137 157 146 146
    000144  aa  163 145 164 137
    000145  55   000032 000014 
    000146  0a   000105 400000 
    000147  55   000026 000003 
    000150  aa  017 141 144 144         add_bit_offset_
    000151  aa  137 142 151 164
    000152  aa  137 157 146 146
    000153  aa  163 145 164 137
    000154  55   000040 000023 
    000155  0a   000071 400000 
    000156  55   000035 000003 
    000157  aa  013 142 151 164         bit_offset_
    000160  aa  137 157 146 146
    000161  aa  163 145 164 137
    000162  55   000050 000032 
    000163  0a   000063 400000 
    000164  55   000043 000003 
    000165  aa  020 163 145 164         set_char_offset_
    000166  aa  137 143 150 141
    000167  aa  162 137 157 146
    000170  aa  146 163 145 164
    000171  aa  137 000 000 000
    000172  55   000060 000040 
    000173  0a   000055 400000 
    000174  55   000053 000003 
    000175  aa  020 141 144 144         add_char_offset_
    000176  aa  137 143 150 141
    000177  aa  162 137 157 146
    000200  aa  146 163 145 164
    000201  aa  137 000 000 000
    000202  55   000067 000050 
    000203  0a   000046 400000 
    000204  55   000063 000003 
    000205  aa  014 143 150 141         char_offset_
    000206  aa  162 137 157 146
    000207  aa  146 163 145 164
    000210  aa  137 000 000 000
    000211  55   000002 000060 
    000212  6a   000000 400002 
    000213  55   000072 000003 
    000214  aa  014 163 171 155         symbol_table
    000215  aa  142 157 154 137
    000216  aa  164 141 142 154
    000217  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000220  aa   000000 000015 
    000221  aa   000000 000000 
    000222  aa   000000 000000 
    000223  5a   000014 000000 
    000224  5a   000060 000000 
    000225  aa   000000 000000 
    000226  aa   000000 000000 
    000227  5a   000067 000000 
    000230  5a   000032 000000 
    000231  5a   000050 000000 
    000232  aa   000000 000000 
    000233  5a   000040 000000 
    000234  aa   000000 000000 
    000235  5a   000023 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000236  aa   000001 000000 
    000237  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000122 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117547 
    000007  aa   254156 676337 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000141 
    000020  aa   000000 000105 
    000021  aa   000117 000114 
    000022  aa   000133 000105 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000054 
    000067  aa   175453 017772 
    000070  aa   000000 117547 
    000071  aa   176663 600000 
    000072  aa   076163 160145          >spec>install>1110>char_bit_offset_fcns_.alm
    000073  aa   143076 151156 
    000074  aa   163164 141154 
    000075  aa   154076 061061 
    000076  aa   061060 076143 
    000077  aa   150141 162137 
    000100  aa   142151 164137 
    000101  aa   157146 146163 
    000102  aa   145164 137146 
    000103  aa   143156 163137 
    000104  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         105    add_bit_offset_          char_bit_offset_fcns_:     30,  149.
          55    add_char_offset_         char_bit_offset_fcns_:     26,   82.
          71    bit_offset_              char_bit_offset_fcns_:     29,  122.
           2    bit_to_char_offset       char_bit_offset_fcns_:     42,   65.
          46    char_offset_             char_bit_offset_fcns_:     25,   60.
         113    set_bit_offset_          char_bit_offset_fcns_:     31,  169.
          63    set_char_offset_         char_bit_offset_fcns_:     27,  102.
           0    word_bit_mask            char_bit_offset_fcns_:     37,   62,  124.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
