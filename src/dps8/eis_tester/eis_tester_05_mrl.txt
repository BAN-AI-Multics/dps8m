

/*		mrl1
*
*	Just a simple test.  Move one 9 bit character to another.  */

inst	mrl	-nt  "Move 1 (9) bit char";

desc 1	-ns  1;		data 1	"a";

desc 2	-ns  1;		data 2	"a";

page	-all;

/*		mrl2
*
*	Move two characters that cross a page boundary.  Note, we need  AR
*	modification in order to set a data offset that is not a multiple
*	of the word size.  By doing this we will move the data fields to
*	segments  etd1 and etd2.
*/

inst	mrl	-nt  "2 chars X page bound"
	-mf1  ar
	-mf2  ar;

desc 1	-ns 2;		desc 2	-ns 2;

data 1	"ab"	-do -1;

data 2	"ab"	-do -1;

page	-all;

/*		mrl3
*
*	This test will move 20 characters.  The characters will start in the middle
*	of a word.  The last two characters moved will cross a page boundary.
*	The instruction word will be moved so that its descriptors cross a
*	page boundary.
*/

inst	mrl	-nt  "20 char X page bound (-io 1)"	-io 1;

desc 1	-cn 2	/* Effective address will point to a word boundary.
		*  We will start the string at character 2.  Note, when
		*  we set up the data we have to enter the two characters
		*  that we are not using.  */
	-ns 20;

desc 2	-cn 2	-ns 20;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000000  (5) "abcd" ;	/* Skipped data in a result field
					*  must be zeros since this is what
					*  et  initializes the test area
					*  to be.  */

page	-all;

/*		mrl4
*
*	This test is the same as  mrl3  except that the descriptors will be
*	referenced via indirect words.  These indirect words will use no
*	modification so the descriptors and the data will still be in
*	segment  etx.  Also we will move the instruction word back
*	so that the second descriptor is on the 2nd page.
*/

inst	mrl	-nt  "Same as prev - ind desc"	-io 2
	-mf1  id		-mf2  id;

desc 1	-ns 20	-cn 2;		/* Note the order of the terms. */

desc 2	-cn 2	-ns 20;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page	-all;

/*		mrl5
*
/*	This test is the same as  mrl4  except that the indirect words will
*	use  index register modification.
*/

inst	mrl	-nt  "Same as prev - use indexes"	-io 2
	-mf2  idr		-mf1  idr;	/* Note order of mf terms. */

desc 1	-cn 2	-ns 20;

desc 2	-cn 2	-ns 20;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page	-all;

/*		mrl6
*
/*	This test is the same as  mrl4  except that the indirect words will
*	use  AR modification.  This will force  ET to place the descriptors and
*	the data fields in segments  eti1 and eti2.
*/

inst	mrl	-nt  "Ind with AR mod"	-io 2
	-mf2  ida		-mf1  ida;

desc 1	-cn 2	-ns 20;

desc 2	-cn 2	-ns 20;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page	-all;

/*		mrl7
*
*	This test is the same as the test  mrl3  except that the descriptors
*	will use  REG  and  RL  modification.
*/

inst	mrl	-nt  "Ind with REG 7. RL mod"		-io 1
	-mf2  reg  rl  20
	-mf1  rl  20   reg;

desc 1	-cn 2;

desc 2	-cn 2;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page	-all;

/*		mrl8
*
*	This test is the same as the test  mrl3  except that the descriptors
*	will use  AR, REG  and  RL  modification.
*/

inst	mrl	-nt  "Desc use AR,REG,& RL mod"	-io 1
	-mf1  reg  ar  rl  20
	-mf2  rl  20   ar  reg;

desc 1	-cn 2;

desc 2	-cn 2;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page	-all;

/*		mrl9
*
*	This test is the same as the test  mrl3  except that the descriptors
*	will use  AR, REG  and  RL  modification  AND  we will use indirect descriptors.
*	We will not have any modification in the indirect words so the descriptors
*	will still be in segment  etx.
*/

inst	mrl	-nt  "Same as prev - use ind"		-io 1
	-mf1	rl  20
		ar	/* This puts the data in  etd1. */
		reg	/* Use index register 1.. */
		id 	/* This adds indirect descriptors.  */

	-mf2	id
		rl  20
		reg
		ar;

desc 1	-cn 2;

desc 2	-cn 2;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page	-all;

/*		mrl10
*
*	This test is the same as the test  mrl3  except that the descriptors
*	will use  AR, REG  and  RL  modification  AND  we will use indirect descriptors.
*	The indirect words will use both reg and ar modification.
*/

inst	mrl	-nt  "Desc: AR,RL,REG  Ind: AR,REG"	-io 1
	-mf1	rl  20
		ar	/* This puts the data in  etd1. */
		reg	/* Use index register 1.. */
		idb 	/* This adds indirect descriptors.  Descriptors will go in
			*  segments  eti1 and eti2.  */

	-mf2	idb
		rl  20
		reg
		ar;

desc 1	-cn 2;

desc 2	-cn 2;

data 1	-do  -20 	"  "  (5) "abcd" ;

data 2	-do  -20  000 000  (5) "abcd" ;

page 	-all;

/*		mrl11
*
*	This test will move  6  6 bit characters.  Both strings will have  3 characters
*	on each side of the page boundary.  The descriptor 2 data will be offset 4
*	9 bit characters but will specify a  "cn" field of 3 so the effective starting
*	address will be the same as descriptor 1.   All possible modification will be
*	used.  Descriptor 1 will also use  RL  modification.
*/

inst	mrl	-nt  "6 bit chars X pg bound"

	-mf1	rl  6	idb	ar  reg

	-mf2	reg   ar   idb;


desc 1	-ta  6;

desc 2	-cn 3	-ta 6	-ns  6;


data 1	-do  -2  	212223242526;

data 2	-do  -4	
	(2) 000		/* We must fill in the unused 3 six bit characters. */
	212223242526;	/* The actual data result field. */


page	-all;

/*		mrl12
*
*	This test will move 3  4 bit characters.  Below is a description of what is
*	going on.  EA is the effective address of the descriptor.
*
*	string 1	                  EA  1  |  2  3
*		---------------------------------------------------
*	char addr  0  1  2  3  4  5  6  7  |  0  1  2  3  4  5  6  7
*		---------------------------------------------------
*	string 2  EA                 1  2  |  3
*
*	All possible modification will be used.  Descriptor 2 will use  RL  mod.
*/

inst	mrl	-nt  "4 bit chars"

	-mf1	idb	ar  reg

	-mf2	reg   ar   idb	rl  3;


desc 1	-ta  4	-cn 1	-ns  3;

desc 2	-cn 6	-ta 4;


data 1	011  253	-do -1;

data 2	-do  -4	000000000 232  26;


page	-all;

/*		mrl13
*
*	This test will move  6  9 bit characters into  6  6 bit characters.
*	Both strings will be split in the middle across a page boundary.
*/

inst	mrl	-nt "9 bit chars into 6 bit chars"
	-mf1  ar reg idr
	-mf2  reg ar idb;

data 1	-do -3  " te"  "st ";

data 2	-do -2	406445 636440;


desc 1	-ns 6;

desc 2	-ns 6	-ta 6;


page 	-all;

/*		mrl14
*
*	This test will test the fill character function.
*	Also the  truncation bit will be turned ON but we will specify that
*	we do not expect a truncation fault.
*/

inst	mrl	-nt  "Use fill char"	-io 3

	-fc*	-tbn

	-mf1  idr  ar   rl 4
	-mf2  ida  reg  rl 8;

/*	No  desc  statements are needed because all the defaults are correct.  */

data 1	"abcd"	-do -2;	/* Split the 4 characters across a page boundary. */

data 2    "****" "abcd"
	-do -4;		/* The fill characters go on a different page.  */


page	-all;

/*		mrl15
*
*	This is the same test as  mrl14  except the  fill characters will start on
*	one page and end on the next page.
*	we do not expect a truncation fault.
*/

inst	mrl	-nt  "Fill X pg bound"	-io 1

	-fc*	-tbn

	-mf1  idr  ar   rl 4
	-mf2  ida  reg ar   rl 8;

/*	No  desc  statements are needed because all the defaults are correct.  */

data 1	"abcd"	-do -2;	/* Split the 4 characters across a page boundary. */

data 2    "**" "**abcd"
	-do -2;		/* The fill characters are split across a  page boundary.  */


page	-all;

/*		mrl16
*
*	This test is designed to test truncation.  We will expect the truncation
*	indicator to be  ON.  The truncation bit will be left OFF and so we will not
*	expect a truncation fault.
*/


inst	mrl	-nt  "Trunc Ind ON"
	-mf2 ar	-io 2	-ir tn;

desc 1	-ns 8;		desc 2	-ns 4;


data 1	-do  -4	"abcd"  "1234";

data 2	-do  -2	"1234";


page	-all;

/*		mrl17
*
*	This test is designed to test truncation.  We will expect the truncation
*	indicator to be  ON.  This test is the same as  mrl16 except that the
*	truncation bit in the instruction word will be set  ON.  This should
*	cause a truncation fault.  We should be ready for it.
*/


inst	mrl	-nt  "Take trunc fault"	-tby
	-mf2 ar	-io 2	-ir tn;

desc 1	-ns 8;		desc 2	-ns 4;


data 1	-do  -4	"abcd"  "1234";

data 2	-do  -2	"1234";


page	-all;

/*		mrl18
*
*	This test will try to move  over a page of data.  We will move  1088 words
*	containing the characters  "cisl".
*/


inst	mrl	-nt  "Move over 1 page"	-io 1
	-mf1  rl  4352	idb ar reg
	-mf2  rl  4352	idbar reg;

data 1 	-do  -128	  (1088) "cisl";

data 2	-do  -128	  (1088) "cisl";

page	-all;


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































