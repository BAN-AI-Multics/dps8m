

/*		scdr1
*
*	Same as test for  scd.
*	We will split both string 1 and  string 2 across page
*	boundaries.  We will use all mods and  use  a  cn
*	field in descriptors  1 & 2.
*/

inst	scdr	-nt  "Same as scd test"	-io 3
	-mf1	idb ar reg  rl 8
	-mf2	idb ar reg
	-mf3	ar reg;


desc 1	-cn 1;
desc 2	-cn 3;

data 1	-do -5
	" "		/* Character skipped by  cn  field. */
	"123*"  "$678";

data 2	-do -4	"   " "*"  "$";

data 3	000 000 000 003;


page	-all;
/*                  scdr2
*

*         simple test which takes no more than the minimum
*         number of page faults.  assures the instruction is
*         working correctly.
*
*/

inst      scdr    -nt "simple test 9bit";

desc 1    -ns 8;     /* 9 bit char */

data 1    "abcd1234";

data 2    "cd";

data 3    000 000 000 004;

page      -all;




/*                  scdr3

*         this test mixes the page faults among descriptors
*         and splits data across a page boundary with a
*         match on the first try.
*
*/


inst      scdr    -nt "d1 split match first time 9b"
          -mf1      idb ar
          -mf2      ar reg
          -mf3      ar;       /* note the data word indirection */

desc 1    -ns 8;

data 1    -do -1  "a" "bcd1234";

data 2    "ab";

data 3    000 000 000 006;


page      -all;




/*                  scdr4

*         same as previous test but both strings
*         are split across page boundaries. data
*         word is also accessed directly.
*
*/


inst      scdr       -io 2   -nt "d1,2 split 9bit"
          -mf1      idb ar reg
          -mf2      idb ar reg;

desc 1    -ns 8;

data 1    -do -4    "abcd" "1234";

data 2    -do -1    "d" "1";

data 3    000 000 000 003;


page      -all;




/*                  scdr5

*         this test takes all the page faults
*         possible with the descriptors, and
*         tests the -cn and -rl option.
*
*/


inst      scdr       -io 2    -nt "max page fault 9bit"
          -mf1      idb ar reg rl 8
          -mf2      idb ar reg
          -mf3       ar reg;
          /* that's all pssible indirections */

desc 2          -cn 2;



data 1     -do -4   "abcd" "1234";

data 2     -do -2   "  " "12";

data 3     000 000 000 002;

page          -all;




/*                  scdr6

*         salient feature of this test is
*         that there is no match on the search.
*         both data strings cross page boundaries.
*
*/


inst      scdr       -io 2    -nt "no match 9bit"
          -ir  tr
          /* mf1 is direct */
          -mf2      idb ar reg;


desc 1    -ns 8;


data 1    -do -4 "abcd" "1234";

data 2    -do -1   "5" "6";

data 3    000 000 000 007;

page      -all;




/*                  scdr7

*         all possible indirection for descriptors
*         taken with the cn option for both tested.
*         strings both split across page.
*
*/

inst      scdr       -io 3    -nt "d1,2 split 9bit"
          -mf1      idb ar reg rl 5
          -mf2      idb ar reg;

desc 1    -cn 3;

desc 2    -cn 1;

data 1    -do -3    "***" "abcde";

data 2    -do -3    "*bc" "*";

data 3    000 000 000 002;

page      -all;



/*                  scdr8

*the next three tests all use the same basic


*         data but vary the type of indirection and thus
*        the type of page faults that will be taken.
*
*/

inst      scdr       -io 1     -nt "desc mod d1,2 split 9b"
          -mf1      ar
          -mf2      idb ar reg
          -mf3      ar reg;

desc 1    -ns 5     -cn 3;

desc 2     -cn 1;

data 1     -do -3"***" "abcde";

data 2     -do -3   "*bc" "*";

data 3     000 000 000 002;

page       -all;



/*                  scdr9

*         swap desc1 and desc2 mod
*
*/

inst      scdr       -io 1     -nt "desc mod d1,2 split 9b"
          -mf1      idb ar reg rl 8
          -mf2      ar
          -mf3      ar reg;

desc 1    -cn 3;

desc 2     -cn 1;

data 1    -do -3    "***" "abcde";

data 2    -do -3    "*bc" "*";

data 3    000 000 000 005;

page      -all;



/*                  scdr10

*         mf3 is direct :  other two indirect
*
*/

inst      scdr       -io 1    -nt "mf1 direct others ind 9bit"
          -mf1      idb ar reg rl 8
          -mf2      idb ar reg;
          /* mf3 is direct */

desc 1    -cn 3;

desc 2    -cn 1;

data 1    -do -3    "***" "abcde";

data 2    -do -3    "*bc" "*";

data 3    000 000 000 005;


page      -all;




/*                  scdr11

*         the data for the next two tests spans three pages.
*         this test uses all direct mod for descriptors.
*
*/

inst      scdr      -io 1   -nt "d1 spans 3 pp 9bit"

          -mf1         rl 4352;

data 1    -do -128   "bc"   (2175) "ab" ;

data 2    "bc";

data 3    000 000 010376;

page      -all;



/*                   scdr12

*         same data as previous test but using
*         maximum indirection on the desc.
*
*/


inst      scdr       -io 2    -nt "d1 spans 3pp max desc mod 9b"
          -mf1      idb ar reg rl 4352
          -mf2      idb ar reg
          -mf3       reg ar;

          /* no desc statements are needed */

data 1    -do -128  "bc"   (2175) "ab" ;

data 2    "bc";

data 3    000 000 010 376;

page      -all;


/*                  scdr13

*         the next two tests move the two char data 2 string
*         across a page boundary using the large data field of
*         the previous two tests as data 1.
*
*/

inst     scdr       -io 3    -nt "3 page d1, d2 split 9b"
          -mf1      idb ar reg rl 4352
          -mf2      idb ar reg
          -mf3       ar reg;

          /* desc statements not needed */



data 1    -do -128  (2175) "ab" "bc";

data 2    -do -1    "b" "c";

data 3    000 000 000 000;

page      -all;


/*                  scdr14

*         data 2 fully contained on page 0
*
*/

inst      scdr       -io 2     -nt "3 page d1, d2 split 9b"
          -mf1      idb ar reg rl 4352
          -mf2      idb ar reg
          -mf3       ar reg;


data 1    -do -128  "bc"  (2175) "ab" ;

data 2    -do -2"bc";

data 3    000 000 010376;

page      -all;



/*                  scdr15

*         this starts the 6 bit char tests.

*         nothing fancy--indirect mod on desc 1 & 2
*
*/


inst      scdr   -nt "desc 1,2 mod 6bit"
          -mf1      idb ar reg rl 6
          -mf2      idb ar reg
          /* desc3 is direct */;

desc 1    -ta 6 /* six bit char */;

data 1    202122232425;

data 2    2425;

data 3    000 000 000 000;

page      -all;


/*                  scdr16

*         same data but first string offseet by
*         3 char. full indirect mod on desc.
*
*/


inst       scdr       -io 2    -nt "mod d1 split 6b; FCOs PHAFPG179 & 181 required on L68 CPU"
           -mf1      idb ar reg
           -mf2      idb ar reg
           -mf3       ar reg;

desc 1     -ns 6 -ta 6;


data 1     -do -2   212223 242526;

data 2     2425;

data 3     000 000 000 001;

page       -all;



/*                  scdr17

*this test offsets the second data string.
*
*/

inst      scdr       -io 1    -nt "full desc mod d2 offset 6b"

          -mf1      idb ar reg rl 6
          -mf2      ar reg
          -mf3      reg
          /* note the variety of indirection */;

desc 1     -ta 6;

data 1    212223242526;

data 2    -do -2    242500;

data 3    000 000 000 001;

page      -all;



/*                  scdr18

*         this test specifically exercises the -cn option
*         along with multiple indirection.
*
*/

inst      scdr       -io 3   -nt "cn on d2 6bit; FCOs PHAFPG179 & 181 required on L68 CPU"
          -mf1      idb ar reg rl 6
          -mf2      idb ar reg
          -mf3       ar reg;


desc 1    -ta 6     -cn 3;

desc 2     -cn 3;

data 1    -do -4    000000202122 232425000000;

data 2    -do -2    000000 212200;

data 3    000 000 000 003;

page      -all;



/*                  scdr19

*         data 1 covers three pages.  match
*         is on the last pair of characters.
*
*/

inst      scdr   -nt "no off d1 spans 3pp 6b"
          -mf1       idb ar reg rl 7680
          -mf2      idb ar reg
          -mf3       ar reg;

desc 1     -ta 6;


data 1    -do -128(1087) 202124252627 202122242223;

data 2    2223;

data 3    000000002200 000;

page      -all;



/*                  scdr20

*the final series of tests are with 4 bit data
*         this is just a simple test of two char per string
*         crossing no page pound.
*
*/

inst      scdr   -nt "d1.2 2 char 4bit"
          -mf1      idb ar reg
          -mf2      idb ar reg
          /*   mf3 is direct */;

desc 1    -ta 4     -ns 2;

data 1    232 000 000 000 /* "1001" "1010" */;

data 2    232 000 000 000;

data 3    000 000 000 000;

page      -all;


/*                  scdr21

*         split the second string across page bound.
*         test -cn option for data 2.
*
*/

inst      scdr       -io 2   -nt "cn,offset for d2 4bit"
          -mf1      idb ar reg rl 2
          -mf2      idb ar reg
          -mf3       ar reg;


desc 1    -ta 4;

desc 2    -cn 1;

data 1    232 000 000 000;


data 2    -do -1    011 240 /* "1001" "1010" */;

data 3    000 000 000 000;

page      -all;


/*                  scdr22

*         this test splits both strings and tests
*         the cn option for both strings
*
*/

inst      scdr       -io 2    -nt "d1,2 offset 4bit; FCOs PHAFPG179 & 181 required on L68 CPU"
          -mf1      idb ar reg
          -mf2      idb ar reg
          -mf3       ar reg;

desc 1    -ta 4     -ns 2          -cn 2;

desc 2    -cn 1;

data 1    -do -2    000 232 000;

data 2    -do -1     011 24;

data 3     000 000 000 000;

page       -all;



/*                scdr23

*         this test will force data to cover all
*         three pages with the first data string.
*

*/

inst      scdr       -io 3   -nt "d1 covers 3 pp 4bit"
          -mf1      ar rl 10240
          -mf2      reg
          -mf3      ar;

desc 1    -ta 4     ;

data 1    -do -128  (4350) 232 236;

data 2    236;

data 3    000 000 003 002;

page        -all;

