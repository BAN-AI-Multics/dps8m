Windows Setup - Build Multics Assembler and Simulator under Windows

This set of instructions is a minimalist approach to getting the Multics assembler
and simulator downloaded and running on a Windows system.  All of the steps outlined
below have been run successfully on both a 32-bit WinXP system and a 64-bit Win7
system.

*** NOTE ***
While the build steps outlined below work on either 32-bit or 64-bit systems, the
build is cross-compiling from 32- to 64-bit so the resulting excutibles ONLY run
on 64-bit systems.

There's probably a way to get the required 128-bit integer support on a 32-bit
system, but I haven't found it yet.



1. Establish Directory Hierarchy

   E:\Multics
             \Simulator
                       \build
             \Tools

   Any drive (or pathname, for that matter) should work for the base of the build
   hierarchy.  Just adjust the instructions (and batch files) below appropriately.

2. Download Subversion for Windows (SVN)

   http://www.sourceforge.net/projects/win32svn

   Download and run the installer; install into:
        E:\Multics\Tools\Subversion

3. Download DPS-8M Assembler/Simulator Sources

   In a command processor window in E:\Multics\Simulator, run the command:
      E:\Multics\Tools\Subversion\bin\svn checkout http://svn.code.sf.net/p/dps8m/code-0

4. Download TDM-GCC 64 bit Edition Build Tools

   http://tdm-gcc.tdragon.net/download

   Select the "Bundle Installer" "tdm64-gcc-N.N.N-N" version (on the right side)
   
   Run the installer
      - Select the "MinGW-w64..." edition
      - Install into "E:\Multics\Tools\MinGW64"
      - (Select an appropriate download source)
      - Uncheck "Start Menu items" and "Add to PATH" (unless you want them)
   
5. Add a "make_as8.bat" file

   Here's a batch file which will build the assembler.  Add this as:
        E:\Multics\Simulator\build\make_as8.bat   
   
================================================================================

setlocal
set SRC_ROOT=E:\Multics\simulator\code-0\src
set AS8_SRC=%SRC_ROOT%\as8\src
set DPS8_SRC=%SRC_ROOT%\dps8
set SIMHV39-0_SRC=%SRC_ROOT%\simhv39-0
set GCC_DIR=E:\Multics\Tools\MinGW64\bin
set SRC_FILES= ^
%AS8_SRC%\as.c ^
%AS8_SRC%\main.c ^
%AS8_SRC%\asUtils.c ^
%AS8_SRC%\ExprEval.c ^
%AS8_SRC%\pseudoOps.c ^
%DPS8_SRC%\dps8_opcodetable.c
set PATH=%GCC_DIR%;%PATH%
gcc -m64 -std=c99 -Dindex=strchr -Drindex=strrchr -I %DPS8_SRC% -I %SIMHV39-0_SRC% %SRC_FILES% -o as8.exe

================================================================================

6. Run the batch file (above) to create the DPS-8M Assembler

   Run the batch file from a command window in the directory:
        E:\Multics\Simulator\build
   
   Note that this creates an "as8.exe" - a 64 bit executible...as8.exe will NOT work
   on a 32 bit system.  There must be a better way to define the 128 bit data items
   so they'll work on a 32 bit system, but I didn't find it lying around and didn't
   feel like figuring out where it might be or, heaven forbid, implementing my own.
  
7.  Add a "make_dps8.bat" file

   Here's a batch file which will build the simulator itself.  Add this as:
        E:\Multics\Simulator\build\make_dps8.bat
   
================================================================================

setlocal
set SRC_ROOT=E:\Multics\simulator\code-0\src
set DPS8_SRC=%SRC_ROOT%\dps8
set SIMHV39-0_SRC=%SRC_ROOT%\simhv39-0
set GCC_DIR=E:\Multics\Tools\MinGW64\bin
set PATH=%GCC_DIR%;%PATH%

set SOURCE_FILES= ^
%DPS8_SRC%\dps8_addrmods.c ^
%DPS8_SRC%\dps8_append.c ^
%DPS8_SRC%\dps8_bar.c ^
%DPS8_SRC%\dps8_cpu.c ^
%DPS8_SRC%\dps8_ins.c ^
%DPS8_SRC%\dps8_iom.c ^
%DPS8_SRC%\dps8_loader.c ^
%DPS8_SRC%\dps8_lp.c ^
%DPS8_SRC%\dps8_mt.c ^
%DPS8_SRC%\dps8_opcodetable.c ^
%DPS8_SRC%\dps8_stddev.c ^
%DPS8_SRC%\dps8_sys.c ^
%DPS8_SRC%\dps8_utils.c ^
%SIMHV39-0_SRC%\scp.c ^
%SIMHV39-0_SRC%\sim_console.c ^
%SIMHV39-0_SRC%\sim_ether.c ^
%SIMHV39-0_SRC%\sim_fio.c ^
%SIMHV39-0_SRC%\sim_sock.c ^
%SIMHV39-0_SRC%\sim_tape.c ^
%SIMHV39-0_SRC%\sim_timer.c ^
%SIMHV39-0_SRC%\sim_tmxr.c 

%GCC_DIR%\gcc -m64 -std=c99 -I %DPS8_SRC% -I %SIMHV39-0_SRC% %SOURCE_FILES% -l WS2_32 -l WinMM -o dps8.exe 

================================================================================

   Note the references "-l WS2_32 -l WinMM" cause the gcc linker to use a couple
   of Windows DLLs to resolve links.  The linker gets the appropriate linkage info
   from its "libXXXX.a" library files, using either the 32- or 64-bit versions as
   appropriate (64-bit, in this case).

8. Run the batch file (above) to create the DPS-8M Assembler

   Run the batch file from a command window in the directory:
        E:\Multics\Simulator\build
   
   Note that this creates a "dps8.exe" - a 64 bit executible...dps8.exe will NOT work
   on a 32 bit system.  There must be a better way to define the 128 bit data items
   so they'll work on a 32 bit system, but I didn't find it lying around and didn't
   feel like figuring out where it might be or, heaven forbid, implementing my own.

