

"""
""" Segment 1
"""

	macro	msg
	absa	#1
	emcall	21
	endm

	equ	MBZ, 0

main:
	msg	msg_main_entry

" Run the tests with out faulting

	msg	msg_without

	lda	=0,dl
	sta	mme_enable
	tsx2	run_tests

" Run the tests with faulting

	msg	msg_with

	lda	=1,dl
	sta	mme_enable
	tsx2	run_tests

	msg	msg_done
	emcall	18

	macro	unmap_memory
	lda	mme_enable
	mme
	endm

run_tests:

" Test 1: simple direct R,n

	msg	msg_test1
	bool	t1_data,123001001

	lda	=0,dl

	unmap_memory
	lda	t1_a1

	cmpa	t1_a1
	tze	t1_pass
	dis	*
t1_pass:
	msg	msg_test_ok

" Test 2: simple indirect

	msg	msg_test2

	bool	t2_data,234002001

	lda	=0,dl

	unmap_memory
	lda	t2_p1,*	"t2_p1 -> t2_a1

	cmpa	t2_a1
	tze	t2_pass
	dis	*
t2_pass:
	msg	msg_test_ok


" Test 3: double indirect

	msg	msg_test3

	bool	t3_data,345003001

	lda	=0,dl

	unmap_memory
	lda	t3_p1,*	"t3_p1 -> t3_p2 -> t3_a1

	cmpa	t3_a1
	tze	t3_pass
	dis	*
t3_pass:
	msg	msg_test_ok

" Test 4: simple indirect with indexing

	msg	msg_test4

	bool	t4_data,456004001

	lda	=0,dl
	ldx3	=1,du

	unmap_memory
	lda	t4_p1,3* " t4_p1[1] -> t4_a1

	cmpa	t4_a1
	tze	t4_pass
	dis	*
t4_pass:
	msg	msg_test_ok

" Test 5: indirect with ITS

	msg	msg_test5

	bool	t5_data,567005001

	lda	=0,dl

	unmap_memory
	lda	t5_p1,*	"t5_p1 -> seg2:t5_a1

	cmpa	t5_a1
	tze	t5_pass
	dis	*
t5_pass:
	msg	msg_test_ok

" Test 6: indirect with ITS indirect

	msg	msg_test6

	bool	t6_data,670006001

	lda	=0,dl

	unmap_memory
	lda	t6_p1,*	"t6_p1 -> seg2:t6_p2 -> t6_a1

	cmpa	t6_a1
	tze	t6_pass
	dis	*

t6_pass:
	msg	msg_test_ok

" Test 7: subtract delta

	msg	msg_test7

	bool	t7_data,701007001

	" Initialize the indirect word

	lda	t7_p1_init
	sta	t7_p1

	lda	=0,dl

	unmap_memory
	lda	t7_p1, sd	"t7_p1[-1] -> t7_a1

	cmpa	t7_a1-1
	tze	t7_pass
	dis	*

t7_pass:
	msg	msg_test_ok

" Test 8: sequence character reverse, no addr change

	msg	msg_test8

	bool	t8_data,10

	" Initialize the indirect word

	lda	t8_p1_init
	sta	t8_p1

	lda	=0,dl

	unmap_memory
	lda	t8_p1, scr	"t8_p1[-1] -> t8_a1

	cmpa	t8_data, dl
	tze	t8_pass
	dis	*

t8_pass:
	msg	msg_test_ok


" Test 9: sequence character reverse, addr change

	msg	msg_test9

	bool	t9_data,10

	" Initialize the indirect word

	lda	t9_p1_init
	sta	t9_p1

	lda	=0,dl

	unmap_memory
	lda	t9_p1, scr	"t9_p1[-1] -> t9_a1

	cmpa	t9_data, dl
	tze	t9_pass
	dis	*

t9_pass:
	msg	msg_test_ok

" Test 10: character indirect

	msg	msg_test10

	bool	t10_data,11

	" Initialize the indirect word

	lda	t10_p1_init
	sta	t10_p1

	lda	=0,dl

	unmap_memory
	lda	t10_p1, ci	"t10_p1 -> t10_a1

	cmpa	t10_data, dl
	tze	t10_pass
	dis	*

t10_pass:
	msg	msg_test_ok

" Test 11: indirect

	msg	msg_test11

	bool	t11_data,012012001

	lda	=0,dl

	unmap_memory
	lda	t11_p1, i	"t11_p1 -> t11_a1

	cmpa	t11_a1
	tze	t11_pass
	dis	*

t11_pass:
	msg	msg_test_ok

" Test 12: sequence character, no addr change

	msg	msg_test12

	bool	t12_data,12

	" Initialize the indirect word

	lda	t12_p1_init
	sta	t12_p1

	lda	=0,dl

	unmap_memory
	lda	t12_p1, sc	"t12_p1 -> t12_a1

	cmpa	t12_data, dl
	tze	t12_pass
	dis	*

t12_pass:
	msg	msg_test_ok

" Test 13: sequence character, addr change

	msg	msg_test13

	bool	t13_data,13
	bool	t13_data2,14

	" Initialize the indirect word

	lda	t13_p1_init
	sta	t13_p1

	lda	=0,dl

	unmap_memory
	lda	t13_p1, sc	"t13_p1[0] -> t13_a1

	cmpa	t13_data, dl
	tze	t13_pass1
	dis	*

t13_pass1:

	unmap_memory
	lda	t13_p1, sc	"t13_p1[1] -> t13_a1

	cmpa	t13_data2, dl
	tze	t13_pass
	dis	*

t13_pass:
	msg	msg_test_ok

"
" done with tests
"

	tra	0,2

t7_p1_init:
	vfd	18/t7_a1, 12/0, 6/1	" initial tally 0, delta 1

	equ	TB6, 0
	equ	TB9, 1
	
t8_p1_init:
	" initial tally 0, 9-bit chars, start at character 3
	vfd	18/t8_a1, 12/0, 1/TB9, 2/MBZ, 3/3

t9_p1_init:
	" initial tally 0, 9-bit chars, start at character 0
	vfd	18/t9_a1, 12/0, 1/TB9, 2/MBZ, 3/0

t10_p1_init:
	" initial tally 0, 9-bit chars, character 3
	vfd	18/t10_a1, 12/0, 1/TB9, 2/MBZ, 3/3

t12_p1_init:
	" initial tally 0, 9-bit chars, start at character 3
	vfd	18/t12_a1, 12/0, 1/TB9, 2/MBZ, 3/3

t13_p1_init:
	" initial tally 0, 9-bit chars, start at character 3
	vfd	18/t13_a1, 12/0, 1/TB9, 2/MBZ, 3/3

mme_enable:
	oct	0

msg_test1:
	aci	'Test 1 R,n ...\n\0\0'
	oct	0

msg_test_ok:
	aci	'... ok\n\0\0'
	oct	0

msg_test2:
	aci	'Test 2 R,* ...\n\0\0'
	oct	0

msg_test3:
	aci	'Test 3 R,*,* ...\n\0\0'
	oct	0

msg_test4:
	aci	'Test 4 R,3* ...\n\0\0'
	oct	0

msg_test5:
	aci	'Test 5 R,*seg ...\n\0\0'
	oct	0

msg_test6:
	aci	'Test 6 R,*seg, * ...\n\0\0'
	oct	0

msg_test7:
	aci	'Test 7 R,sd ...\n\0\0'
	oct	0

msg_test8:
	aci	'Test 8 R,scr ...\n\0\0'
	oct	0

msg_test9:
	aci	'Test 9 R,scr w/addr change ...\n\0\0'
	oct	0

msg_test10:
	aci	'Test 10 R,ci ...\n\0\0'
	oct	0

msg_test11:
	aci	'Test 11 R,i ...\n\0\0'
	oct	0

msg_test12:
	aci	'Test 12 R,sc ...\n\0\0'
	oct	0

msg_test13:
	aci	'Test 13 R,sc w/addr change ...\n\0\0'
	oct	0

msg_main_entry:
	aci	'Fault test main\n\0\0'
	oct	0
msg_dbg_mme_back:
	aci	'back from mme\n\0\0'
	oct	0
msg_done:
	aci	'Fault test done\n\0\0'
	oct	0
msg_without:
	aci	'Running tests without page faulting\n\0\0'
	oct	0
msg_with:
	aci	'Running tests with page faulting\n\0\0'
	oct	0

" Page 1: indirect words

	org	1*1024

" Test 2

t2_p1:	arg	t2_a1

" Test 3

t3_p1:	arg	t3_p2,*

" Test 4

t4_p1:	dec	-1
	arg	t4_a1

" Test 5

	even
t5_p1:	its	2,1024	" t5_a1 is at offset 1024 in seg 2.

" Test 6

	even
t6_p1:	its	2,0,*	" t6_p2 is at offset 0 in seg 2.

" Test 7

t7_p1:	oct	0	" Initialized to t7_p1_init in test

" Test 8

t8_p1:	oct	0	" Initialized to t8_p1_init in test

" Test 9

t9_p1:	oct	0	" Initialized to t9_p1_init in test

" Test 10

t10_p1:	oct	0	" Initialized to t10_p1_init in test

" Test 11

t11_p1:	vfd	18/t11_a1, 18/0

" Test 12

t12_p1:	oct	0	" Initialized to t12_p1_init in test

" Test 13

t13_p1:	oct	0	" Initialized to t13_p1_init in test

"
" Page 2: double indirect words
"

	org	2*1024

" Test 3

t3_p2:	arg	t3_a1

"
" Page 3: data
"

	org	3*1024

" Test 1

t1_a1:	dec	t1_data

" Test 2

t2_a1:	dec	t2_data

" Test 3

t3_a1:	dec	t3_data

" Test 4

t4_a1:	dec	t4_data

" Test 5

t5_a1:	dec	t5_data	" This is not actually the data read by test 5 -- it
			" is over on seg 2.

" Test 6

t6_a1:	dec	t6_data	" This is not actually the data read by test 6 -- it
			" is over on seg 2.

" Test 7

	dec	t7_data
t7_a1:	oct	0	" subtract delta will back up one word to the data

" Test 8

t8_a1:	vfd	9/-1, 9/-1, 9/t8_data, 9/-1

" Test 9
	
	vfd	9/-1, 9/-1, 9/-1, 9/t9_data
t9_a1:	vfd	9/-1, 9/-1, 9/-1, 9/-1

" Test 10

t10_a1:	vfd	9/-1, 9/-1, 9/-1, 9/t10_data

" Test 11

t11_a1:	dec	t11_data

" Test 12

t12_a1:	vfd	9/-1, 9/-1, 9/-1, 9/t12_data

" Test 13

t13_a1:	vfd	9/-1, 9/-1, 9/-1, 9/t13_data
       	vfd	9/t13_data2, 9/-1, 9/-1, 9/-1


