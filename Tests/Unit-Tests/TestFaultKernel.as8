"
" Access an unmapped segment page; fault; map the page; return from fault, 
" restarting the faulted instruction.
"
" Virtual Memory layout
"
"     segment
"       (0)      absolute mode code
"        1       executable code and data
"        2       its/itp data
"
	equ	seg1,1
	equ	seg2,2

"     segment 1 pages
"
"       0   code
"       1   data
"       2   data
"       3   data

"     segment 2 pages
"
"       0   data
"       1   data

	equ	n_seg1_pgs,4
	equ	n_seg2_pgs,2

	equ	pgsz,1024	" pages are 1024 words long
	equ	program_start,100*pgsz
	equ	seg1_start,200*pgsz
	equ	seg2_start,300*pgsz

	macro	msg
	eaa	#1
	emcall	16
	endm

	macro	dmsg
	"eaa	#1
	"emcall	16
	endm

"""
""" Entry point
"""

	org	0
	tra	start


	equ	fault_base,64
	equ	fault_mme,fault_base+2*2
	equ	fault_dpf3,fault_base+2*19
"""
""" MME handler
"""

	org	fault_mme
	scu	mme_scu
	tra	mme_handler

"""
""" directed page fault handler
"""

	org	fault_dpf3
	scu	dpf3_scu
	tra	dpf3_handler


	org	program_start

ldbr_data:

"""
""" DSBR format for the LDBR instruction:
"""

"        pos len
"  ADDR    0  24  If U = 1, the memory address of the origin of the descriptor
"                 segment; if U = 0, the memory address of the descriptor
"                 segment page table
" 
"  BOUND  37  14  The 14 most significant bits of the highest Y-block16 
"                 address of the descriptor segment that can be addressed 
"                 without causing an fault.

"  U      55   1  U = 0: descriptor segment is paged; 1: unpaged.
"  STACK  60  12  Used by CALL6; the upper 12 bits of the 15 bit stack base
"                 segment number.
"

" U bit
	equ	paged,0
	equ	unpaged,1

" F bit
	equ	nonresident,0
	equ	resident,1

        equ	dsbr_bound,0	" All of our segments will fit in a single
				" Y16 (2 words/segment; this allows 8)

	vfd	24/descr_seg_page_table,12/0
	vfd	1/0,14/dsbr_bound,4/0,1/paged,4/0,12/0

"""
""" Descriptor Segment Page Table.
"""


descr_seg_page_table:

" A table of PTWs; each PTW points to a table of 1024 SDWs; the first PTW is
" used for segment numbers 0-1023, the second for 1024-2047, and so on
"
" In this table, each PTW takes up 2 words; the second word is unused.
" (If the DSPT is unpaged, it is an array of SDWs, which are two words.)

" PTW format:
"    ADDR  x x x x x x 0 0 U 0 0 M x x x F FC
"    x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x 
"
"        pos len
"  ADDR:   0  18  modulo 64 absolute main memory address of page
"     U   26   1  page has been used
"     M   29   1  page has been modfied
"     F   33   1  0: page not in memory; 1: page in memory
"     FC  34   2  direct fault number
   
	bool	fbit,4
	bool	fmask,777777777773

" This test uses 2 fault codes

	equ	FC0,0
	equ	FC3,3

" The following vfd allocate 24 bits for the addr to hand-wave away the 
" divide by 64.

	macro	PTW "ADDR,F,FC
	vfd	24/#1, 2/0, 1/0, 2/0, 1/0, 3/0, 1/#2, 2/#3
	endm

" segments 0-1023

	"vfd	24/seg_0_descr_seg_page_table,2/0,1/0,2/0,1/0,3/0,1/resident,2/0
	PTW	seg_0_descr_seg_page_table,resident,FC0
	vfd	36/0

"""
""" SDW format
"""

" even word
"        pos len
" ADDR     0  24   U=1: address of the unpaged segment; 0 address of the 
"                  segment page table
" R1      24   3
" R2      27   3
" R3      30   3
" F       33   1    0: page is non-resident, 1: resident
" FC      34   2

" odd word
"        pos len
" BOUND    1  14   14 high-order bits of the largest 18-bit modulo 16 
"                  offset that may without causing a descriptor 
"                  violation, out of segment bounds, fault.
"                  [Each page is 1024 words, which is 10 bits;
"                  ignore the low 4 bits (i.e. modulo 16) leaves
"                  6 bits (64); ergo bound is 64 * number of pages
"                  (assuming segment round up to page boundary, which
"                  is easiest for this test.
"
" R       15   1
" E       16   1
" W       17   1
" P       18   1
" U       19   1   0: segment is paged; 1: unpaged
" G       20   1
" C       21   1
" ER      22  14

	equ	R_y,1
	equ	E_y,1
	equ	W_y,1
	equ	P_y,1
	equ	R_n,0
	equ	E_n,0
	equ	W_n,0
	equ	P_n,0

	macro	SDW "ADDR,F,FC,BOUND,R,E,W,P,U
	vfd	24/#1, 3/0, 3/0, 3/0, 1/#2, 2/#3
	vfd	1/0, 14/#4, 1/#5, 1/#6, 1/#7, 1/#8, 1/#9, 1/0, 1/1, 14/0
	endm

	sixtyfour

"""
""" Descriptor segment page for segments 0-1023
"""

seg_0_descr_seg_page_table:

" segment 0 (non-existant)
	SDW	-1, nonresident, FC0, 0, R_n, E_n, W_n, P_n, paged


" segment 1; code and data R/E/W
	equ	seg1_bound,n_seg1_pgs*64
	SDW	seg_1_page_table, resident, FC0, seg1_bound, R_y, E_y, W_y, P_n, paged

" segment 2; data R/W
	equ	seg2_bound,n_seg2_pgs*64
	SDW	seg_2_page_table, resident, FC0, seg2_bound, R_y, E_n, W_y, P_n, paged


" 1024 segment, 3 segs used, 2 words/seg
"   (1024 - 3) * 2
        bss	2042

seg_1_page_table:

s1p0:	PTW	seg1_start+0*1024, resident, FC3
s1p1:	PTW	seg1_start+1*1024, resident, FC3
s1p2:	PTW	seg1_start+2*1024, resident, FC3
s1p3:	PTW	seg1_start+3*1024, resident, FC3

seg_2_page_table:

s2p0:	PTW	seg2_start+0*1024, resident, FC3
s2p1:	PTW	seg2_start+1*1024, resident, FC3


"""
""" Abs mode code
"""

	sixtyfour
start:	
	msg	msg_start_entry

	ldbr	ldbr_data

	lprp0	entry_ptr
	tra	0|0

"""
""" MME handler
"""

mme_handler:
	sreg	mme_sreg
	sta	mme_arg

	dmsg	msg_mme_entry

" A == 0: Mark pages resident
" A != 0: Mark pages non-resident

	szn	mme_arg
	tnz	mark_non

" Set the F bit in the page table entrys

	lda	f_bit
	orsa	s1p0
	orsa	s1p1
	orsa	s1p2
	orsa	s1p3
	orsa	s2p0
	orsa	s2p1
	tra	mark_done

mark_non:

" Clear the F bit in the page table entrys

	lda	f_mask
	ansa	s1p0
	ansa	s1p1
	ansa	s1p2
	ansa	s1p3
	ansa	s2p0
	ansa	s2p1

mark_done:

" Reset the caches

	cams
	camp

" And return

	lreg	mme_sreg
	rcu	mme_scu

mme_arg:
	dec	0

	eight
mme_sreg:
	bss	8

"""
""" page fault handler
"""

dpf3_handler:
	sreg	dpf3_sreg

	dmsg	msg_dpf3_entry

" Test the FIF bit

	lda	fif_mask
	ana	dpf3_scu_5
	tze	operand_fetch

" Fault during instruction fetch

	dmsg	msg_fetch

" Print fault address for debugging

	" Get the segno
	"msg	msg_segno
	msg	msg_obracket
	lda	dpf3_scu_2
	arl	18
	ana	mask15
	emcall	5	" putdec
	" Get the IC
	"msg	msg_ic
	msg	msg_colon
	lda	dpf3_scu_4
	arl	18
	ana	mask18
	emcall	3	" putoct
	"emcall	8	" nl
	msg	msg_cbracket

	" Lookup the segment in the descr_seg_page_table (assume segno < 1024)

	eax0	seg_0_descr_seg_page_table

	" Compute table[2*segno]

	adx0	dpf3_scu_2
	adx0	dpf3_scu_2

	" Get the first word of the SDW

	lda	0,x0

	" Get the address of segment page table

	arl	12
	sta	spt_addr

	" Get the IC

	lda	dpf3_scu_4
	arl	18
	ana	mask18

	" Divide by 1024

	arl	10

	" Compute page_table[offset/1024]

	ada	spt_addr
	als	18	" move to high half
	sta	spte_addr

	" Set the resident bit for the page
	lda	f_bit
	orsa	spte_addr,*

	" Reset the caches

	cams
	camp

	" And done...
	tra	dpf3_done


" Fault during operand fetch

operand_fetch:
	"msg	msg_operand_fetch

" Print fault address for debugging

	" Get the segno
	"msg	msg_segno
	msg	msg_oparen
	lda	dpf3_scu_2
	arl	18
	ana	mask15
	emcall	5	" putdec
	" Get the CA
	"msg	msg_ca
	msg	msg_colon
	lda	dpf3_scu_5
	arl	18
	ana	mask18
	emcall	3	" putoct
	"emcall	8	" nl
	msg	msg_cparen

	" Lookup the segment in the descr_seg_page_table (assume segno < 1024)

	eax0	seg_0_descr_seg_page_table

	" Compute table[2*segno]

	adx0	dpf3_scu_2
	adx0	dpf3_scu_2

	" Get the first word of the SDW

	lda	0,x0

	" Get the address of segment page table

	arl	12
	sta	spt_addr

	" Get the CA

	lda	dpf3_scu_5
	arl	18
	ana	mask18

	" Divide by 1024

	arl	10

	" Compute page_table[offset/1024]

	ada	spt_addr
	als	18	" move to high half
	sta	spte_addr

	" Set the resident bit for the page
	lda	f_bit
	orsa	spte_addr,*

	" Reset the caches

	cams
	camp

	" And done...
	tra	dpf3_done

	dis	*

dpf3_done:
	lreg	dpf3_sreg
	rcu	dpf3_scu

spt_addr:
	bss	1

spte_addr:
	bss	1

f_mask:	oct	fmask
f_bit:	oct	fbit
fif_mask:
	oct	100
mask15:
	oct	77777
mask18:
	oct	777777

	eight
mme_scu:
	bss	8

	eight
dpf3_sreg:
	bss	8

	eight
dpf3_scu:
	oct	0
	oct	0
dpf3_scu_2:
	oct	0
	oct	0
dpf3_scu_4:
	oct	0
dpf3_scu_5:
	oct	0
	oct	0
	oct	0

entry_ptr:
	vfd	6/0,12/seg1,18/0

msg_obracket:
	aci	'['
	oct	0

msg_cbracket:
	aci	']'
	oct	0

msg_oparen:
	aci	'('
	oct	0

msg_cparen:
	aci	')'
	oct	0

msg_colon:
	aci	':'
	oct	0

msg_start_entry:
	aci	'Fault test entry\n\0'

msg_mme_entry:
	aci	'MME entry\n\0'

msg_dpf3_entry:
	aci	'DPF3 entry\n\0'

msg_fetch:
	aci	'DPF3 instruction fetch\n\0'

msg_operand_fetch:
	aci	'DPF3 operand fetch\n\0'

msg_segno:
	aci	'segno: \0'

msg_ca:
	aci	' CA: \0'

msg_ic:
	aci	' IC: \0'

