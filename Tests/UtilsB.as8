"
" some more utility routines for use in the FXE environment ...
"

    name        UtilsB
    segdef      getChar, putChar
    "entry       getCharAB
    
  	segref      UtilsA, ioa

    
"
" return in A the character given by arg1[arg2]
"

            even
saveRA:      bss     ,2
            eight
saveX:      bss     ,8
saveIR:     bss     ,1

arg1:       bss     ,1
arg2:       bss     ,1
arg3:       bss     ,1

temp1:      bss     ,1
temp2:      bss     ,1

            even
LAQ:
LA:         bss     ,1
LQ:         bss     ,1

            sixteen
savePR:     bss     ,16

"
" get 8/9-bit character of string
"
" Usage:
"   tsp2     UtilsB$getChar
"   dec      packedPointeerToACC string
"   arg      char #
"
" returns char in A
"
"

getChar:  "push
        sti     saveIR      " save IR
        sreg    saveX       " save index registers
        spri    savePR      " save PRs

        epp3    pr2|2       " add 2 words for arguments
        spri3   saveRA      " save for return to caller

        lda     pr2|0       " pick up pointer to string - arg1
        sta     arg1

        lda     pr2|1       " pick up index - arg2
        sta     arg2

        lprp3   arg1        " string address => pr3

        " determine how many words we need to skip for index arg2
        ldq     arg2        " pick up index - arg2
        qrl     18          " move upper 18-bit to lower 18-bits
        div     =4,dl       " how many words to skip => Q, char pos in A
        stq     LQ          " words to skip => Q
        sta     LA          " char pos => A
        
        lda     =3,dl
        ssa     LA          " 3 - LA => LA

        lxl2    LQ          " words to skip in x2
        lda     pr3|0,x2    " src wrd => A

        " src word is in A. Shift right until desired char in in 8..0
        ldq     LA          " pos => Q
        eax2    0,ql        " Ql => x2
        
loop:   tze     done
        arl     9           " 9-bits/byte
        eax2    -1,x2       " x2 -= 1
        tra     loop

done:   ana     =0777,dl    " mask off all but lower 9-bits
        sta     saveX+4     " save A in register save area

        lpri    savePR
        lreg    saveX       " restore regsiters

        rtcd    saveRA

        "return

"
" put 8/9-bit character to string
"
" Usage:
"   tsp2     UtilsB$putChar
"   dec      packedPointeerToACC string
"   arg      char #
"   dec      char_to_write
"
" returns nothing
"
"

putChar:  "push
        sti     saveIR      " save IR
        sreg    saveX       " save index registers
        spri    savePR      " save PRs

        epp3    pr2|3       " add 3 words for arguments
        spri3   saveRA      " save for return to caller

        lda     pr2|0       " pick up pointer to string - arg1
        sta     arg1

        lda     pr2|1       " pick up index - arg2
        sta     arg2

        lda     pr2|2       " pick up char to put (in A18-35) - arg3
        sta     arg3

        lprp3   arg1        " string address => pr3

        " determine how many words we need to skip for index arg2
        ldq     arg2        " pick up index - arg2
        qrl     18          " move upper 18-bit to lower 18-bits
        div     =4,dl       " how many words to skip => Q, char pos in A
        stq     LQ          " words to skip => LQ
        sta     LA          " char pos => LA
        
        lda     =3,dl
        ssa     LA          " 3 - LA => LA

        lxl2    LQ          " words to skip in x2
        lda     pr3|0,x2    " src wrd => A
        sta     temp1       "         => temp1

        "
        " duplicate src char 3 times since we're going to store it with stbq ... somewhere
        "
        lda     arg3        " get char
        sta     temp2       " save in temp2 (1x)
        als     9           " scoot it over 9-bits
        orsa    temp2       " or it into temp2 (2x)
        als     9           " scoot it over 9-bits
        orsa    temp2       " or it into temp2 (3x)
        als     9           " scoot it over 9-bits
        orsa    temp2       " or it into temp2 (4x)
        ldq     temp2       " put repeated chars into Q

"        lda     arg3
"        sta     temp2
"        eax3    3
"lp1:    als     9           " scoot it over 9-bits
"        orsa    temp2       " or it into temp2 (2x)
"        eax3    -1,x3
"        tnz     lp1
"        ldq     temp2       " put repeated chars into Q

        lda     LA          " get adjusted char posn to put
$1:     xec     $3,al    " eXECute appropriate stbq instruction

        lda     temp1
$2:     sta     pr3|0,x2    " write back modified word out

        lpri    savePR
        lreg    saveX       " restore regsiters

        rtcd    saveRA

        "return
$3:     stbq    temp1, 040  " store byte 0 (bits 8-0)
        stbq    temp1, 020  " store byte 1 (bits 9-17)
        stbq    temp1, 010  " store byte 2 (bits 18-26)
        stbq    temp1, 004  " store byte 3 (bits 27-35)

