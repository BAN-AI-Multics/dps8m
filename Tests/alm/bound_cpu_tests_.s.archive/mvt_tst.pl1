/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

mvt_tst: proc;

dcl (init_temp, asc_mas, bcd_mas, ftn_mas, ntf_mas, eas_mas, aes_mas)
     bit (1) unaligned int static init ("0"b);
dcl (tptrs (9), asp, bcdp, esp, ebp, ftnp, ntfp, wkp1, wkp2, wkp3) int static ptr;
dcl  code fixed bin (35);
dcl (i, j, k, m) fixed bin;
dcl (divide, fixed, addr, hbound, bit, string, null) builtin;
dcl (ascln, bcdln, aesln, easln, ftnln, ntfln) fixed bin (24) int static;
dcl (cln, bln) fixed bin (24);
dcl  char_temp char (cln) aligned based;
dcl  bit_temp bit (bln) aligned based;
dcl  ae_temp char (aesln/9) based (esp);
dcl  ea_temp char (easln/9) based (ebp);
dcl  tp ptr;
dcl  cleanup condition;
dcl  NL char (1) int static init ("
");

dcl (ioa_, com_err_) entry options (variable);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  translate_strings_$nine_to_six entry (char (*) aligned, bit (*) aligned, ptr);
dcl  translate_strings_$six_to_nine entry (bit (*) aligned, char (*) aligned, ptr);
dcl  translate_strings_$nine_to_four_ entry (char (*) aligned, bit (*) aligned, ptr);
dcl  translate_strings_$four_to_nine_ entry (bit (*) aligned, char (*) aligned, ptr);
dcl  ebcdic_to_ascii_ entry (char (*), char (*));
dcl  ascii_to_ebcdic_ entry (char (*), char (*));

dcl  ascii_to_ebcdic_$ae_table (0 : 127) bit (9) unaligned ext static;

dcl  ascii_to_bcd_table (0:127) bit (9) unaligned static initial
    ((10) (9) "0"b, "000001100"b, (21) (9) "0"b,
     "000010000"b, "000111111"b, "000111110"b, "000001011"b, "000101011"b, "000111100"b, "000011010"b, "000101111"b,
     "000011101"b, "000101101"b, "000101100"b, "000110000"b, "000111011"b, "000101010"b, "000011011"b, "000110001"b,
     "000000000"b, "000000001"b, "000000010"b, "000000011"b, "000000100"b, "000000101"b, "000000110"b, "000000111"b,
     "000001000"b, "000001001"b, "000001101"b, "000101110"b, "000011110"b, "000111101"b, "000001110"b, "000001111"b,
     "000001100"b, "000010001"b, "000010010"b, "000010011"b, "000010100"b, "000010101"b, "000010110"b, "000010111"b,
     "000011000"b, "000011001"b, "000100001"b, "000100010"b, "000100011"b, "000100100"b, "000100101"b, "000100110"b,
     "000100111"b, "000101000"b, "000101001"b, "000110010"b, "000110011"b, "000110100"b, "000110101"b, "000110110"b,
     "000110111"b, "000111000"b, "000111001"b, "000001010"b, "000011111"b, "000011100"b, "000100000"b, "000111010"b,
     "000011111"b, "000010001"b, "000010010"b, "000010011"b, "000010100"b, "000010101"b, "000010110"b, "000010111"b,
     "000011000"b, "000011001"b, "000100001"b, "000100010"b, "000100011"b, "000100100"b, "000100101"b, "000100110"b,
     "000100111"b, "000101000"b, "000101001"b, "000110010"b, "000110011"b, "000110100"b, "000110101"b, "000110110"b,
     "000110111"b, "000111000"b, "000111001"b, "000001010"b, "000111111"b, "000011100"b, "000000000"b, "000000000"b);

dcl  bcd_to_ascii_table (0:63) bit (9) unaligned static initial
    ("000110000"b, "000110001"b, "000110010"b, "000110011"b, "000110100"b, "000110101"b, "000110110"b, "000110111"b,
     "000111000"b, "000111001"b, "001011011"b, "000100011"b, "000001010"b, "000111010"b, "000111110"b, "000111111"b,
     "000100000"b, "001000001"b, "001000010"b, "001000011"b, "001000100"b, "001000101"b, "001000110"b, "001000111"b,
     "001001000"b, "001001001"b, "000100110"b, "000101110"b, "001011101"b, "000101000"b, "000111100"b, "001011100"b,
     "001011110"b, "001001010"b, "001001011"b, "001001100"b, "001001101"b, "001001110"b, "001001111"b, "001010000"b,
     "001010001"b, "001010010"b, "000101101"b, "000100100"b, "000101010"b, "000101001"b, "000111011"b, "000100111"b,
     "000101011"b, "000101111"b, "001010011"b, "001010100"b, "001010101"b, "001010110"b, "001010111"b, "001011000"b,
     "001011001"b, "001011010"b, "001011111"b, "000101100"b, "000100101"b, "000111101"b, "000100010"b, "000100001"b);

dcl  nine_to_four_table (0:15) bit (9) unaligned static init
    ("000000000"b, "000000001"b, "000000010"b, "000000011"b, "000000100"b, "000000101"b, "000000110"b, "000000111"b,
     "000001000"b, "000001001"b, "000001010"b, "000001011"b, "000001100"b, "000001101"b, "000001110"b, "000001111"b);

/*  */
mvt_tst_ascii_to_bcd: entry;				/* test nine to six conversion with MVT instruction */

	if ^init_temp then
	     call init_temp_segs;			/* make our temp segs */
	if ^asc_mas then
	     call init_asc_mas;			/* fill in ascii master seg */
	if ^bcd_mas then
	     call cv_bcd;				/* go do non eis conversion for bcdmaster */

/* now do eis (MVT) conversion on 3 segments */

	cln = divide (ascln, 9, 17, 0);
	bln = bcdln;
	do tp = wkp1, wkp2, wkp3;
	     call translate_strings_$nine_to_six (asp -> char_temp, tp -> bit_temp, addr (ascii_to_bcd_table));
	end;

/* now compare the 3 segments to bcd master seg */

	call compare (bcdp, bcdln);
	return;					/* that's it folks */

mvt_tst_bcd_to_ascii: entry;				/* test six to nine conversion with MVT instruction */

	if ^init_temp then
	     call init_temp_segs;			/* make our temp segs */
	if ^asc_mas then
	     call init_asc_mas;			/* fill in ascii master seg */
	if ^bcd_mas then
	     call cv_bcd;				/* go do non eis conversion for bcdmaster */

/* now do eis (MVT) conversion on 3 segments */

	cln = divide (ascln, 9, 17, 0);
	bln = bcdln;
	do tp = wkp1, wkp2, wkp3;
	     call translate_strings_$six_to_nine (bcdp -> bit_temp, tp -> char_temp, addr (bcd_to_ascii_table));
	end;

/* mow compare the 3 segments to the ascii master seg */

	call compare (asp, ascln);
	return;

mvt_tst_ascii_to_ebcdic: entry;				/* test nine to nine conversion with MVT instruction */

	if ^init_temp then
	     call init_temp_segs;			/* make our temp segs */
	if ^aes_mas then
	     call init_aes_mas;			/*  fill in our ascii to ebcdic master seg */
	if ^eas_mas then
	     call cv_asc_to_ebc;			/* go do non eis conversion on ascii seg */

/* now do eis (MVT) conversion on 3 segments */

	do tp = wkp1, wkp2, wkp3;
	     call ascii_to_ebcdic_ (ae_temp, tp -> ea_temp);
	end;

/* Now compare the 3 segments to the ebcdic master */
	call compare (ebp, easln);
	return;

mvt_tst_ebcdic_to_ascii: entry;				/* test nine to nine conversion with the MVT instruction */

	if ^init_temp then
	     call init_temp_segs;			/* make our temp segs */
	if ^aes_mas then
	     call init_aes_mas;			/*  fill in our ascii to ebcdic master seg */
	if ^eas_mas then
	     call cv_asc_to_ebc;			/* go do non eis conversion on ascii seg */

/* now do eis (MVT) conversion on 3 segments */

	do tp = wkp1, wkp2, wkp3;
	     call ebcdic_to_ascii_ (ea_temp, tp -> ae_temp);
	end;

/* Now compare the 3 segments to the ascii master */

	call compare (esp, aesln);
	return;

mvt_tst_nine_to_four: entry;				/* test nine to four conversion with the MVT instruction */

	if ^init_temp then
	     call init_temp_segs;			/* make our temp segs */
	if ^ntf_mas then
	     call init_ntf_mas;			/* Fill in our four to nine master seg */
	if ^ftn_mas then
	     call cv_ntf;				/* go do non eis conversion for four to nine master */

/* now do eis (MVT) conversion on 3 segments */

	cln = divide (ntfln, 9, 17, 0);
	bln = ftnln;
	do tp = wkp1, wkp2, wkp3;
	     call translate_strings_$nine_to_four_ (ntfp -> char_temp, tp -> bit_temp, addr (nine_to_four_table));
	end;

/* Now compare the 3 segments to the four to nine master */

	call compare (ftnp, ftnln);
	return;

mvt_tst_four_to_nine: entry;				/* test four to nine conversion with the MVT instruction */

	if ^init_temp then
	     call init_temp_segs;			/* make our temp segs */
	if ^ntf_mas then
	     call init_ntf_mas;			/* Fill in our four to nine master seg */
	if ^ftn_mas then
	     call cv_ntf;				/* go do non eis conversion for four to nine master */

/* now do eis (MVT) conversion on 3 segments */

	cln = divide (ntfln, 9, 17, 0);
	bln = ftnln;
	do tp = wkp1, wkp2, wkp3;
	     call translate_strings_$four_to_nine_ (ftnp -> bit_temp, tp -> char_temp, addr (nine_to_four_table));
	end;

/* Now compare the 3 segments with the nine to four master */

	call compare (ntfp, ntfln);
	return;

mvt_tst_release_t_segs: entry;				/* entry to release temp segs */
	do i = 1 to hbound (tptrs, 1);		/* delete temp segments */
	     call hcs_$delentry_seg (tptrs (i), code);
	     tptrs (i) = null;
	end;
	asp, bcdp, esp, ebp, ftnp, ntfp, wkp1, wkp2, wkp3 = null;
	init_temp, asc_mas, bcd_mas, ftn_mas, ntf_mas, eas_mas, aes_mas = "0"b;
	return;

/*  */
init_temp_segs: proc;				/* porcedure to make all our temp segs */

	     call get_temp_segments_ ("mvt_st", tptrs, code);
	     if code ^= 0 then do;
		call com_err_ ("mvt_tst", code, " creating temp segs ");
		return;
	     end;

	     asp = tptrs (1);			/* set up segment pointers */
	     bcdp = tptrs (2);
	     esp = tptrs (3);
	     ebp = tptrs (4);
	     ftnp = tptrs (5);
	     ntfp = tptrs (6);
	     wkp1 = tptrs (7);
	     wkp2 = tptrs (8);
	     wkp3 = tptrs (9);
	     init_temp = "1"b;			/* set switch */
	end init_temp_segs;

/*  */
compare:	proc (mptr, mln);				/* procedure to compare temp segments to master segments */
dcl  mptr ptr;
dcl  mln fixed bin (24);
dcl (i, j, k, ln) fixed bin;
dcl  tempp ptr;
dcl  mas_seg (0 : ln) bit (36) based (mptr);
dcl  temp_seg (0 : ln) bit (36) based (tempp);
dcl  esw bit (1);

	     ln = divide (mln, 36, 17, 0) -1;		/* ln = word count - 1 */
	     k = 0;
	     do tempp = wkp1, wkp2, wkp3;
		k = k + 1;
		j = 0;
		esw = "0"b;
		do i = 0 to ln;			/* compare the segments */
		     if temp_seg (i) ^= mas_seg (i) then do;
			if ^esw then do;
			     esw = "1"b;
			     call ioa_ (" Discrepencies exist in the number ^d converted segment", k);
			     call ioa_ ("^4xoffset^4xcontents^4xoffset^4xcontents");
			end;
			j = j + 1;
			if j < 10 then
			     call ioa_ ("^4x^6o^2x^w^2x^6o^2x^w", i, mas_seg (i), i, temp_seg (i));
		     end;
		end;
		if j ^= 0 then
		     call ioa_ ("Total of ^d discrepencies found", j);
	     end;
	end compare;

/*  */
init_asc_mas: proc;					/* procedure to initilize ascii master data seg */

dcl  asc_dta char (79) int static init
    ("THIS IS A SEVENTY-NINE-CHARACTER FIELD FULL OF RANDOM TEST DATA. LINE X OF 10.");
dcl  asctemp (333) char (80) based (asp);

	     do i = 1 to hbound (asctemp, 1);
		asctemp (i) = asc_dta || NL;
	     end;
	     ascln = hbound (asctemp, 1) * 80 * 9;
	     asc_mas = "1"b;			/* set flag  so we don't init this seg again */
	end init_asc_mas;

init_aes_mas: proc;					/* proc to init_ascii_to ebcdic master */

dcl  aes_dta char (230) int static init
    ("this is a test of ascii to ebcdic and ebcdic to ascii conversion.
lower case keyboard: |{1234567890-_}~qwertyuiop`:;lkjhgfdsazxcvbnm,./
UPPER CASE KEYBOARD: \[! #$%&'() =_]^@POIUYTREWQASDFGHJKL+*?><MNBVCXZ

9_");
dcl  aestemp (130) char (230) based (esp);

	     do i = 1 to hbound (aestemp, 1);
		aestemp (i) = aes_dta || NL;
	     end;
	     aesln = hbound (aestemp, 1) * 230 * 9;
	     aes_mas = "1"b;
	end init_aes_mas;


init_ntf_mas: proc;					/* proc to init nine to four master */

dcl 1 ntf_temp (1800) based (ntfp) aligned,
    2 ntf_char (0:15) unaligned,
      3 ntf_fb fixed bin (8);

	     do i = 1 to divide (hbound (ntf_temp, 1), 16, 17, 0);
		do j = 0 to 15;
		     m = j;
		     do k = 0 to 15;
			ntf_temp (i).ntf_char (k).ntf_fb = m;
			m = m + 1;
			if m > 15 then m = 0;
		     end;
		end;
	     end;
	     ntfln = hbound (ntf_temp, 1) * 16 * 9;
	     ntf_mas = "1"b;
	end init_ntf_mas;

/*  */
convert:	proc;					/* procedure to do non EIS conversion */

dcl  six_seg (sln) bit (6) based unaligned;
dcl  nine_seg (nln) bit (9) based unaligned;
dcl 1 cvfour aligned,
    2 pad bit (1) init ("0"b) unaligned,
    2 chr1 bit (4) unaligned,
    2 chr2 bit (4) unaligned;
dcl (inptr, otptr) ptr;
dcl (sln, nln) fixed bin (24);

cv_bcd:	     entry;				/* convert ascii to bcd */
	     inptr = asp;
	     otptr = bcdp;
	     nln = divide (ascln, 9, 17, 0);
	     sln = 262000;
	     do i = 1 to nln;			/* convert ascii char */
		otptr -> six_seg (i) = bit (fixed (ascii_to_bcd_table (fixed (inptr -> nine_seg (i), 9)), 6));
	     end;
	     bcdln = i * 6;				/* set up bcd seg length */
	     bcd_mas = "1"b;
	     return;

cv_asc_to_ebc: entry;				/* convert ascii to ebcdic */
	     inptr = esp;
	     otptr = ebp;
	     nln = divide (aesln, 9, 17, 0);
	     do i = 1 to nln;			/* convert ascii to ebcdic */
		otptr -> nine_seg (i) = bit (fixed (ascii_to_ebcdic_$ae_table (fixed (inptr -> nine_seg (i), 9)), 9));
	     end;
	     easln = i * 9;				/* set up ebcdic seg length */
	     eas_mas = "1"b;
	     return;

cv_ntf:	     entry;				/* convert 9 bit to 4 bit (packed decimal */
	     inptr = ntfp;
	     otptr = ftnp;
	     nln = divide (ntfln, 9, 17, 0);
	     do i = 1 to nln;			/* convert nine to four */
		j = i * 2;
		cvfour.chr1 = bit (fixed (inptr -> nine_seg (j - 1), 4));
		cvfour.chr2 = bit (fixed (inptr -> nine_seg (j), 4));
		otptr -> nine_seg (i) = string (cvfour);
	     end;
	     ftnln = i * 9 / 2;			/* set up packed decimal segment length */
	     ftn_mas = "1"b;
	     return;
	end convert;

     end mvt_tst;
