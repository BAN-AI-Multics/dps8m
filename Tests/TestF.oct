!SIZE 000707
000000 xxxx 000000000000         bss     ,fv.fpair
000100 xxxx 000154702000 main:  tsx2     rd_clock
000101 xxxx 000152757000        staq     Date        " MM/DD HH:MM
000102 xxxx 000361701000        call    ioa(msgHello, Date, Date+1)
000103 xxxx 000110710000 
000104 xxxx 000000000000 
000105 xxxx 000117000000 
000106 xxxx 000152000000 
000107 xxxx 000153000000 
000110 xxxx 000150237000         ldaq    fltDiv_ip
000111 xxxx 000034757000         staq    FAULT_NO_DIV * 2
000112 xxxx 000677236000         ldq     =42     " load Q with 42
000113 xxxx 000700506000         div     =0      " ... and attempt a divide by 0
000114 xxxx 000701236000         ldq     =o400000000000
000115 xxxx 000702506000         div     =-1
000116 xxxx 000000616000         dis
000117 xxxx 050124150151 msgHello:   acc     "This is Fault Test (ABS mode) ... ^g^g\r\n"
000120 xxxx 163040151163 
000121 xxxx 040106141165 
000122 xxxx 154164040124 
000123 xxxx 145163164040 
000124 xxxx 050101102123 
000125 xxxx 040155157144 
000126 xxxx 145051040056 
000127 xxxx 056056040136 
000130 xxxx 147136147015 
000131 xxxx 012040040040 
000132 xxxx 024104151166 msgDivide:  acc     /Divide check fault\r\n/
000133 xxxx 151144145040 
000134 xxxx 143150145143 
000135 xxxx 153040146141 
000136 xxxx 165154164015 
000137 xxxx 012040040040 
000140 xxxx 000145742000 fltDiv:     stx2	fltDiv_x2
000141 xxxx 000361701000             call    ioa(msgDivide)
000142 xxxx 000145710000 
000143 xxxx 000000000000 
000144 xxxx 000132000000 
000145 xxxx 000145622000 fltDiv_x2:	eax2	*
000146 xxxx 000000710012             tra     0,2
000147 xxxx 000000011000             even "(allocating 1 nop)
000150 xxxx 000000011000 fltDiv_ip:  nop
000151 xxxx 000140702000             tsx2    fltDiv
000152 xxxx 000000000000 Date:   bss     2
000154 xxxx 000000633000 rd_clock:	rccl                " read the clock
000155 xxxx 000300757000 cv_clock:	staq	rdctime     " save clock reading
000156 xxxx 000250742000 	stx2	datx2               " save XR's
000157 xxxx 000251740000 	stx0	datx2+1             " ..
000160 xxxx 000034235007 	lda     28,dl               " Initialize montab
000161 xxxx 000303755000 	sta     montab+1			" to prime Feb
000162 xxxx 000300237000 	ldaq	rdctime             " Get clock reading
000163 xxxx 000001737000 	lls     1                   " Set for dvf
000164 xxxx 000703507000 	dvf     =1000000			" Get seconds since 1900.
000165 xxxx 000044777000 	llr     36                  " Into Q.
000166 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
000167 xxxx 000263755000 	sta     rdclock.sec         " Save for inspection.
000170 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
000171 xxxx 000262755000 	sta     rdclock.min
000172 xxxx 000006627000 	eax7	6
000173 xxxx 000253702000 	tsx2	datecv              " Convert the minutes.
000174 xxxx 000273176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
000175 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
000176 xxxx 000272756000 	stq     rdclock.day_of_century	" save for  later.
000177 xxxx 000261755000 	sta     rdclock.hr          " Hours since daybreak.
000200 xxxx 000253702000 	tsx2	datecv              " Convert the hours
000201 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
000202 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
000203 xxxx 000205604000 	tmi     *+2                 " no
000204 xxxx 000303054000 	aos     montab+1			" allow for feb 29
000205 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
000206 xxxx 003555036007 	adlq	1901,dl
000207 xxxx 000271756000 	stq     rdclock.year		" Save
000210 xxxx 000044777000 	llr     36
000211 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
000212 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
000213 xxxx 000216601000 	tnz     *+3                 " No.
000214 xxxx 000001176007 	sbq     1,dl                " Adjust year and
000215 xxxx 000555235007 	lda     365,dl              " day numbers.
000216 xxxx 000271056000 	asq     rdclock.year		" Add in years complete.
000217 xxxx 000000626000 	eax6	0                   " search for correct month
000220 xxxx 030220520201 	rpt     12,1,tmi			" ..
000221 xxxx 000302175016 	sba     montab,6			" subtract off days for each month
000222 xxxx 777777075016 	ada     -1,6                " put back last entry
000223 xxxx 000001075007 	ada     1,dl                " plus one more
000224 xxxx 000266755000 	sta     rdclock.day_of_month	" Day of month
000225 xxxx 000253702000 	tsx2	datecv              " convert day
000226 xxxx 000000635016 	eaa     0,6
000227 xxxx 000302135003 	sbla	montab,du			" get index into month table
000230 xxxx 000022771000 	arl     18                  "..
000231 xxxx 000264755000 	sta     rdclock.month		" Save month number
000232 xxxx 000327236005 	ldq     rdc.months-1,al		" Get name of month.
000233 xxxx 000265756000 	stq     rdclock.month_name
000234 xxxx 000253702000 	tsx2	datecv              " convert month
000235 xxxx 000000024400 	mvne	(),(),()			" edit the date and time
000236 xxxx 000276070010 	desc4ns	date,8
000237 xxxx 000316000014 	desc9a	datedit,12
000240 xxxx 000300020014 	desc6a	rdctime,12
000241 xxxx 000272236000 	ldq     rdclock.day_of_century
000242 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
000243 xxxx 000007506007 	div     7,dl
000244 xxxx 000267755000 	sta     rdclock.day_of_week
000245 xxxx 000321236005 	ldq     rdc.days,al         " Get name of day.
000246 xxxx 000270756000 	stq     rdclock.day_name
000247 xxxx 000300237000 	ldaq	rdctime             " get conversion in AQ
000250 xxxx 000250622000 datx2:	eax2	*			" restore XR's
000251 xxxx 000251620000 	eax0    *               " ..
000252 xxxx 000000710012 	tra     0,2             " return to caller
000253 xxxx 000275755000 datecv:	sta	datenum			" save number
000254 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
000255 xxxx 000275000004 	desc9a	datenum,4
000256 xxxx 000276070002 	desc4ns	date,2
000257 xxxx 777776627017 	eax7	-2,7			" move offset index
000260 xxxx 000000710012 	tra     0,2             " and return
000261 xxxx 000000000000 	bss	,1
000262 xxxx 000000000000 	bss	,1
000263 xxxx 000000000000 	bss	,1
000264 xxxx 000000000000 	bss	,1
000265 xxxx 000000000000 	bss	,1
000266 xxxx 000000000000 	bss	,1
000267 xxxx 000000000000 	bss	,1
000270 xxxx 000000000000 	bss	,1
000271 xxxx 000000000000 	bss	,1
000272 xxxx 000000000000 	bss	,1
000273 xxxx 000000000010     dec     8
000274 xxxx 160144164040     aci     'pdt '
000275 xxxx 000000000000 datenum:	bss	,1
000276 xxxx 000000000000 date:	bss	,1
000277 xxxx 000000011000 	even "(allocating 1 nop)
000300 xxxx 000000000000 rdctime:	bss	,2
000302 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
000303 xxxx 000000000034 
000304 xxxx 000000000037 
000305 xxxx 000000000036 
000306 xxxx 000000000037 
000307 xxxx 000000000036 
000310 xxxx 000000000037 
000311 xxxx 000000000037 
000312 xxxx 000000000036 
000313 xxxx 000000000037 
000314 xxxx 000000000036 
000315 xxxx 000000000037 
000316 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
000317 xxxx 061322021322 
000320 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
000321 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat '
000322 xxxx 155157156040 
000323 xxxx 164165145040 
000324 xxxx 167145144040 
000325 xxxx 164150165162 
000326 xxxx 146162151040 
000327 xxxx 163141164040 
000330 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec '
000331 xxxx 146145142040 
000332 xxxx 155141162040 
000333 xxxx 141160162040 
000334 xxxx 155141171040 
000335 xxxx 152165156040 
000336 xxxx 152165154040 
000337 xxxx 141165147040 
000340 xxxx 163145160164 
000341 xxxx 157143164040 
000342 xxxx 156157166040 
000343 xxxx 144145143040 
000344 xxxx 000347710000 crlf:	save
000345 xxxx 000000000000 
000346 xxxx 000345630000 
000347 xxxx 000345754000 
000350 xxxx 000345741000 
000351 xxxx 000360755000         sta     saveA
000352 xxxx 000704235000         lda     =012
000353 xxxx 000001420400         emCall  1
000354 xxxx 000705235000         lda     =015
000355 xxxx 000001420400         emcall  1
000356 xxxx 000360235000         lda     saveA
000357 xxxx 000346710000         return  crlf
000360 xxxx 000000000000 saveA:  bss     1
000361 xxxx 000370710000 ioa:    save    2, 4, 5, 6
000362 xxxx 000000000000 
000363 xxxx 000000222003 
000364 xxxx 000001224003 
000365 xxxx 000002225003 
000366 xxxx 000003226003 
000367 xxxx 000362630000 
000370 xxxx 000362754000 
000371 xxxx 000362741000 
000372 xxxx 000363742000 
000373 xxxx 000364744000 
000374 xxxx 000365745000 
000375 xxxx 000366746000 
000376 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
000377 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
000400 xxxx 000000626015         eax6    0, x5
000401 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
000402 xxxx 000417755000         sta     i29
000403 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
000404 xxxx 000033731000         ars     27      " determine word count
000405 xxxx 000006735000     	als     6       " count to upper word of tally
000406 xxxx 000417255000     	orsa    i29
000407 xxxx 000000626014     	eax6    0, x4   " address of string into X6
000410 xxxx 000417746000     	stx6    i29     " address to upper word of tally
000411 xxxx 000417235052 inext:  lda     i29, sc
000412 xxxx 000136115007         cmpa    =o000136,dl		" ^
000413 xxxx 000420600000         tze     iernot      " if so, go process it
000414 xxxx 000001420400 out1:  	emCall  1
000415 xxxx 000411607000     	ttf     inext
000416 xxxx 000363710000         return  ioa
000417 xxxx 000000000041 i29:	tallyb  0, 0, 1
000420 xxxx 000417235052 iernot: lda     i29, sc         " get next char ...
000421 xxxx 000136115007         cmpa    =o000136,dl     " is it another "^"?
000422 xxxx 000440600000         tze     i21             " No, just print it ...
000423 xxxx 000167115007         cmpa    =o000167,dl     " is it a "w"?
000424 xxxx 000442600000         tze     idoW            " do full word octal
000425 xxxx 000157115007         cmpa    =o000157,dl     " is it an "o"?
000426 xxxx 000470600000         tze     idoO            " print zero suppressed octal
000427 xxxx 000156115007         cmpa    =o000156,dl     " is it a "n"?
000430 xxxx 000513600000         tze     idoN            " octal w/ no spaces inserted
000431 xxxx 000144115007         cmpa    =o000144,dl     " is it a "d"?
000432 xxxx 000542600000         tze     idoD            " decimal
000433 xxxx 000141115007         cmpa    =o000141,dl     " is it a ^a?
000434 xxxx 000550600000         tze     idoA            " 4 char ascii display
000435 xxxx 000147115007         cmpa    =o000147,dl     " is it a ^g?
000436 xxxx 000561600000         tze     idoG            " 6 char GE BCD display
000437 xxxx 000414710000         tra     out1        " unknown just print it....
000440 xxxx 000001420400 i21:    emCall  1           " output A to console
000441 xxxx 000411710000         tra     inext
000442 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
000443 xxxx 000637702000         tsx2    octwd
000444 xxxx 000540757000         staq    ioaSafe     " bcd in AQ
000445 xxxx 000044773000         lrl     36          " A => Q
000446 xxxx 000006622000         eax2    6
000447 xxxx 000000235007 idoW2:  lda     =0, dl
000450 xxxx 000006737000         lls     6
000451 xxxx 000002420400         emCall  2           " output GE code char to console
000452 xxxx 777777622012         eax2    -1, 2
000453 xxxx 000447601000         tnz     idoW2
000454 xxxx 000540237000         ldaq    ioaSafe
000455 xxxx 000000235007         lda     =0, dl      " 0 => A
000456 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
000457 xxxx 000002420400         emcall  2
000460 xxxx 000006622000         eax2    6
000461 xxxx 000000235007 idoW3:  lda     =0,dl
000462 xxxx 000006737000         lls     6
000463 xxxx 000002420400         emCall  2
000464 xxxx 777777622012         eax2    -1, 2
000465 xxxx 000461601000         tnz     idoW3
000466 xxxx 000001065003         adx5    1,du
000467 xxxx 000411710000         tra     inext
000470 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
000471 xxxx 000637702000         tsx2    octwd
000472 xxxx 000540757000         staq    ioaSafe         " bcd in AQ
000473 xxxx 000511235000         lda     idOTly
000474 xxxx 000512755000         sta     idOT
000475 xxxx 000512235052 idO1:   lda     idOT, sc        " get char into A
000476 xxxx 000000115007         cmpa    =0, dl          " a zero?
000477 xxxx 000505601000         tnz     idONZ + 1       " nope
000500 xxxx 000475607000         ttf     idO1            " Yes, a Zero. Go for more
000501 xxxx 000002420400         emCall  2               " output a single 0
000502 xxxx 000001065003         adx5    1,du
000503 xxxx 000411710000         tra     inext
000504 xxxx 000512235052 idONZ:  lda     idOT, sc        " get char into A
000505 xxxx 000002420400         emCall  2
000506 xxxx 000504607000         ttf     idONZ           " Yes, a Zero. Go for more
000507 xxxx 000001065003         adx5    1,du
000510 xxxx 000411710000         tra     inext
000511 xxxx 000540001400 idOTly: tally   ioaSafe, 12, 0
000512 xxxx 000000000000 idOT:   bss     1
000513 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
000514 xxxx 000637702000         tsx2    octwd
000515 xxxx 000540757000         staq    ioaSafe     " bcd in AQ
000516 xxxx 000044773000         lrl     36          " A => Q
000517 xxxx 000006622000         eax2    6
000520 xxxx 000000235007 idoN2:  lda     =0,dl
000521 xxxx 000006737000         lls     6
000522 xxxx 000002420400         emCall  2           " output GE code char to console
000523 xxxx 777777622012         eax2    -1, 2
000524 xxxx 000520601000         tnz     idoN2
000525 xxxx 000540237000         ldaq    ioaSafe
000526 xxxx 000000235007         lda     =0, dl      " 0 => A
000527 xxxx 000006622000         eax2    6
000530 xxxx 000000235007 idoN3:  lda     =0, dl
000531 xxxx 000006737000         lls     6
000532 xxxx 000002420400         emCall  2
000533 xxxx 777777622012         eax2    -1, 2
000534 xxxx 000530601000         tnz     idoN3
000535 xxxx 000001065003         adx5    1,du
000536 xxxx 000411710000         tra     inext
000537 xxxx 000000011000         even "(allocating 1 nop)
000540 xxxx 000000000000 ioaSafe:  bss 2
000542 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
000543 xxxx 000572701000         call    toDec
000544 xxxx 000546710000 
000545 xxxx 000000000000 
000546 xxxx 000001065003         adx5    1,du
000547 xxxx 000411710000         tra     inext
000550 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
000551 xxxx 000004622000         eax2    4
000552 xxxx 000000235007 idoA2:  lda     =0,dl
000553 xxxx 000011737000         lls     9
000554 xxxx 000001420400         emCall  1
000555 xxxx 777777622012         eax2    -1, 2
000556 xxxx 000552601000         tnz     idoA2
000557 xxxx 000001065003         adx5    1,du        " into next argument
000560 xxxx 000411710000         tra     inext
000561 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
000562 xxxx 000006622000         eax2    6
000563 xxxx 000000235007 idoG2:  lda     =0,dl
000564 xxxx 000006737000         lls     6
000565 xxxx 000002420400         emCall  2
000566 xxxx 777777622012         eax2    -1, 2
000567 xxxx 000563601000         tnz     idoG2
000570 xxxx 000001065003         adx5    1,du        " into next argument
000571 xxxx 000411710000         tra     inext
000572 xxxx 000575710000 toDec:  save    "2,3,4,5,6,7
000573 xxxx 000000000000 
000574 xxxx 000573630000 
000575 xxxx 000573754000 
000576 xxxx 000573741000 
000577 xxxx 000706116000         cmpq    =-34359738368       " the weird one?
000600 xxxx 000604601000         tnz     toDec2
000601 xxxx 000636235000         lda     decMTly             " just print it and be done with it
000602 xxxx 000632755000         sta     decTly
000603 xxxx 000622710000         tra     toDec1
000604 xxxx 000626756000 toDec2: stq     decNo
000605 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
000606 xxxx 000610605000         tpl     toDec0      " No
000607 xxxx 000626336000         lcq     decNo       " -decNo => Q
000610 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
000611 xxxx 000060075007         ada     =o060,dl    " add ascii '0' (=1A0) to A
000612 xxxx 000632755045         sta     decTly, scr " start writing characters backwards
000613 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
000614 xxxx 000610601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
000615 xxxx 000626235000         lda     decNo
000616 xxxx 000000115007         cmpa    =0,dl
000617 xxxx 000622605000         tpl     toDec1
000620 xxxx 000055235007         lda     =o055,dl    " (-) => A
000621 xxxx 000632755045         sta     decTly, scr " write (-) sign
000622 xxxx 000632235052 toDec1: lda     decTly, sc
000623 xxxx 000001420400         emCall  1
000624 xxxx 000622607000         ttf     toDec1
000625 xxxx 000574710000         return  toDec
000626 xxxx 000000000000 decNo:  dec     0
000627 xxxx 000000000000 decBuf: bss     3
000632 xxxx 000631000040 decTly: tallyb  decBuf+2, , 0
000633 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35
000634 xxxx 065071067063 
000635 xxxx 070063066070 
000636 xxxx 000633001440 decMTly:tallyb  decMM, 12, 0
000637 xxxx 000654742000 octwd:	stx2	octx2
000640 xxxx 000006622000 	eax2	6
000641 xxxx 000003736000 	qls     3
000642 xxxx 000003777000 	llr     3
000643 xxxx 777777622012 	eax2	-1,2
000644 xxxx 000641605400 	tpnz	*-3
000645 xxxx 000676756000 	stq     octtemp
000646 xxxx 000006622000 	eax2	6
000647 xxxx 000003736000 	qls     3
000650 xxxx 000003777000 	llr     3
000651 xxxx 777777622012 	eax2	-1,2
000652 xxxx 000647605400 	tpnz	*-3
000653 xxxx 000676235000 	lda     octtemp
000654 xxxx 000654622000 octx2:	eax2	*
000655 xxxx 000000710012 	tra     0,2
000656 xxxx 000674742000 hexwd:	stx2	hexx2
000657 xxxx 000044773000 	lrl     36          "shift to Q
000660 xxxx 000006622000 	eax2	6           "	process 6 characters
000661 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
000662 xxxx 000004737000 	lls     4           "shift in 4 bits
000663 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
000664 xxxx 000666604400 	tmoz	*+2
000665 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
000666 xxxx 000006773000 	lrl     6
000667 xxxx 000676235000 	lda     octtemp		"get temporary
000670 xxxx 000006737000 	lls     6           "insert new character
000671 xxxx 000676755000 	sta     octtemp		"and store
000672 xxxx 777777622012 	eax2	-1,2		"decrement index
000673 xxxx 000661605400 	tpnz	hexloop
000674 xxxx 000674622000 hexx2:	eax2	*
000675 xxxx 000000710012 	tra     0,2		"return to caller
000676 xxxx 000000000000 octtemp:	oct	0
000677 xxxx 000000000052 decimal literal (=42)
000700 xxxx 000000000000 decimal literal (=0)
000701 xxxx 400000000000 octal literal (=o400000000000)
000702 xxxx 777777777777 decimal literal (=-1)
000703 xxxx 000003641100 decimal literal (=1000000)
000704 xxxx 000000000012 octal literal (=o12)
000705 xxxx 000000000015 octal literal (=o15)
000706 xxxx 400000000000 decimal literal (=-34359738368)
