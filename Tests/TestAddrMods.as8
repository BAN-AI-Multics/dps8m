"
" Test of address modifications for new CA stuff ...
"
"            

    eax0    _a
    eax1    u
    eax2    v
    eax3    w
    eax4    x
    eax5    y
    eax6    z
    
"
" R mods ...
"
    lda     u
    ldq     ,x1
    
    lda     2,x4
    ldq     y+10
    
    lda     t       " 000005 000004 => a
    ldq     y, au   " 5 => q
    ldq     z, al   " 017 => q
    
    ldq     t+1         
    lda     x,qu    " 3 => a
    lda     y,ql    " -2 => a

_a: lda     0,ic   " _a+3

    ldq  0123456,du   "0123456 => q -- none; operand has the form y || (00...0)18
    lda  0543210,dl   "0543210 => a --  none; operand has the form (00...0)18 || y
   
"
" RI mods ...
"

    lda q,n*        " -2 => a
    ldq q+1,*        " 042 => a

    lda     2, dl       " 2 => AL
    ldx1    2, du        " 2 => x1
    ldq     q, 1*       " C(q+x1 + C(A)0,17) => 616 => q
    
    lda     11, du      " 11 => AU
    ldx2    3, du        " 3 => x2
    ldq     q, 2*       " C(q+x2 + C(A)0,17) => 77 => q


    ldq     4, ic*      " 02102 => q
    tra     here        " jump over stuff ...
    bss     2           " just waste 2 words
    arg     m, *

here:

    ldx0    2, du       " 2 => x0
    ldx1    2, du       " 2 => x1
    ldq     l, 0*       " l + 2 => du(m) => q

    eaa     1
    eax1    2
    ldq     k, au*      " x+2 => q (-3)

    eaq     3
    lda     p,*         " y + 3 => 3

    eax3    3
    eax5    5
    ldq     h,*
    
"
" IR mods ....
"
    lda     g, *n   " -1 => a

    ldq    f, *dl   " &x => q

    eax4    13
    lda     c,  *1  " -0255 => a
    neg             " a = 0255

    eax1    4
a:  lxl0    b,1*    " a + 5 => x0
    tra     here_2
b:  oct     111,222,333,444
    arg     bb, *ic
bb: arg     5, dl


here_2:

" DH02-01 Ex 1 pg 5-12
    ldq     1, dl
    lda     ir0, *QL    " C(b+1) (222) => q

" DH02-01 Ex 2 pg 5-12
    eax3    2
    eax5    3
    lda     ir1, *3     " C(b+2) (333) => a

" DH02-01 Ex 3 pg 5-12
    eax3    4
    eax5    5
    eaq     9
    eax7    7
    lda     ir2, *3     " C(x+9) (42) => a

" DH02-01 Ex 4 pg 5-12
    eax3    8
    ldq     9, dl
    lda     ir3, *dl    " C(A) = &w

" DH02-01 Ex 5 pg 5-12
    lda     10, dl
    lda     ir5, *al    " C(x + 10) (616) => a

" DH02-01 Ex 6 pg 5-12
    eax3    11
    ldq     ir6, *n     " C(z) (13(8)) => q

" DH02-01 Ex 7 pg 5-12
    eax5    12
    lda     ir7, *n     " C(x + 12) (02012) => a

" DH02-01 Ex 8 pg 5-12
    eax5    13
    lda     ir8, *      " C(x + 13) (-255) => a
    neg                 " -a => a

" DH02-01 Ex 9 pg 5-12
    eax1    14
    ldq     ir9, *      " C(ir9c + 14) (7777777) => q
    

"
" IT mods ...
"

" AL39 - Subtract delta (Td = 4) Example
        "Reference Computed Tally value 
        "count     address
        "1          c-d         t+l 
        "2          c-2d        t+2 
        "3          c-3d        t+3
        " ...
        "n          c-nd        t+n

IT_1:   ldq it1
        lda it1,sd
        ttf IT_1
        
        tra IT_2
it1:    tallyd  it1b-1, -6, 2   "address, count, delta
it1a:   dec  0,1, 2, 3, 4, 5, 6, 7, 8, 9,10
        dec   11,12,13,14,15,16,17,18,19,20
        dec   21,22,23,24,25,26,27,28,29,30
        dec   31,32,33,34,35,36,37,38,39,40
it1b:

" AL39 - Add delta (Td = 13) Example
        "Reference Computed Tally value 
        "count     address
        "1          c           t-1
        "2          c+d         t-2
        "3          c+2d        t-3
        "...
        "n          c+(n-1)d    t-n
        
IT_2:   ldq it2
        lda it2,ad
        ttf IT_2
        
        tra IT_3

it2:    tallyd  it1a, 6, 2   "address, count, delta


" AL39 - Sequence character (Td = 12) Example

IT_3:   lda it3,sc
        ttf IT_3
        
        tra IT_4
it3:    tallyb  it3b, 5, 0   "address, count, byte offset
it3b:   acc /This is a test of scr.../
it3c:
" try with 6-bit chars when bcc/bci? is ready .....

" AL39 - Sequence character reverse (Td = 5) Example
IT_4:   lda it4,scr
        ttf IT_4
        
        tra IT_5
it4:    tallyb  it3c-1, -5, 1   "address, count, byte offset
" try with 6-bit chars when bcc/bci? is ready .....


" AL39 - Character indirect (Td = 10) Example
IT_5:   lda it5,ci  " 151 => a
        tra IT_6
it5:    tallyb  it3b, , 3


IT_6:   lda it6,i   " 042 => a
        tra IT_7
it6:    arg x+9


" AL39 - Decrement address, increment tally (Td = 14)
IT_7:   ldq it7, di
        ttf IT_7

        tra IT_8
it7:    tallyd  x+7, -7

" AL39 - Increment address, decrement tally (Td = 16)
IT_8:   lda it8, id
        ttf IT_8

        tra IT_9
it8:    tallyd  x, 7

" DH02 - Increment address, decrement tally, and continue (Td = 17)
IT_9:   lda     it9, idc
        ttf     IT_9
        
        tra     IT_9B
it9:    tallyc  it9b, 7, *
it9b:   arg     x + 0       " 1st ea
        arg     x + 1       " 2nd ea
        arg     x + 2       " 3rd ea
        arg     x + 3
        arg     x + 4
        arg     x + 5
        arg     x + 6

IT_9B:  lda     it9c, idc
        ttf     IT_9B
        
        tra     IT_10
it9c:   tallyc  it9d, 7, I
it9d:   arg     x + 15       " 1st ea
        arg     x + 16       " 2nd ea
        arg     x + 17       " 3rd ea
        arg     x + 18
        arg     x + 19
        arg     x + 20
        arg     x + 21


" DH02 pg 5-22 - Decrement address, increment tally, and continue (Td = 15)
IT_10:  lda     it10, dic   " x, y, z ...
        ttf     IT_10
        tra     IT_11
it10:   tallyc  it10b, -3, I
        arg     z
        arg     y
        arg     x
it10b:  null

" DH02 pg 5-22 - Decrement address, increment tally, and continue (Td = 15)
IT_11:  ldq     it11, dic       " aa1, aa2, c, aa4
        ttf     IT_11
        tra     IT_12
it11:   tallyc  adres3, -4, *n
        arg     ad4, *
        arg     c
        arg     ad2, *n
        arg     ad1, *n
adres3: bss     1
ad1:    arg     aa1
ad2:    arg     aa2
ad4:    arg     aa4

aa1:    oct     012
aa2:    oct     345
aa4:    oct     670

IT_12:
" exit simulator
    dis

"
" data .......
"
ir9:    arg ir9b, *1
ir9b:   arg ir9c, id
ir9c:   tally   _a,10      " doesn't really figure into the CA

ir8:    arg ir8b, *5
ir8b:   arg x, du

ir7:    arg ir7b, *5
ir7b:   arg x, du

ir6:    arg z,3 

ir5:    arg x, AD

ir3:    arg ir3b, 3*
ir3b:   oct 0,1,2,3,4,5,7777777,7 " was bss 8
        arg w, ql

ir2:    arg ir2b,*5
ir2b:   arg ir2c, *qu
ir2c:   arg x,7

ir1:    arg ir1b, 5*
ir1b:   bss 3
        arg b, IC
        
ir0:    arg b
c:      arg     d, n*
d:      arg     e, *4
e:      arg     x, ql

f:      arg     x, au

g:      arg     x,2

h:      arg     i,5*
i:      bss     5
        arg     j,3*
j:      bss     3
        zero    x+9 "m

k:      bss 1
        arg     x,1

l:      bss     2
        arg     l2,1*       " l2 + 2
l2:     bss     2
        arg     m, du

m:      arg     x+12
n:      arg     m, *

p:      arg     y,qu

q:      arg     x+1 " -2
        arg     x+9   " 042
        arg     x+8,al
        arg     x,au
r:      bss     1
s:      bss     1
t:      zero    5,4
        zero    6, -2
        zero    0123456, 0543210
u:      tally   3072,64,3   " should be 006000 0100 03
v:      TALLYB  2048,,1 " should be 004000 0000 41
        TALLYC  w,10,I
        TALLYD  512,4095,10 " should be 0 01000 7777 12
w:      bss	w2, 4
x:      oct -1,-2,-3,0,1,2,3,4,5,42,616,77, 02012, -255, 123, 100,200,300,400,500,600,700,800
y:      dec 0,1,2,3,4,5,6,7,8,9,10
z:      dec 11,12,13,14,15,16,17,18,19,20
    
