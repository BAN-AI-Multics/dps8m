!SIZE 000621
000000 xxxx 000070702000     tsx2    rd_clock
000001 xxxx 000062757000     staq    Date        "MM/DD HH:MM
000002 xxxx 000275701000     call    ioa(msgHello, Date, Date+1)
000003 xxxx 000010710000 
000004 xxxx 000000000000 
000005 xxxx 000032000000 
000006 xxxx 000062000000 
000007 xxxx 000063000000 
000010 xxxx 000064235000     lda     result1
000011 xxxx 000065236000     ldq     result2
000012 xxxx 000275701000     call    ioa(msg2a, result1, result2)
000013 xxxx 000020710000 
000014 xxxx 000000000000 
000015 xxxx 000041000000 
000016 xxxx 000064000000 
000017 xxxx 000065000000 
000020 xxxx 000066717000     xed     i1
000021 xxxx 000064755000     sta     result1
000022 xxxx 000065756000     stq     result2
000023 xxxx 000275701000     call    ioa(msg2b, result1, result2)
000024 xxxx 000031710000 
000025 xxxx 000000000000 
000026 xxxx 000051000000 
000027 xxxx 000064000000 
000030 xxxx 000065000000 
000031 xxxx 000000616000     dis
000032 xxxx 032124150151 msgHello:  acc         "This is TestXED ... ^g^g\r\n"
000033 xxxx 163040151163 
000034 xxxx 040124145163 
000035 xxxx 164130105104 
000036 xxxx 040056056056 
000037 xxxx 040136147136 
000040 xxxx 147015012040 
000041 xxxx 034122145163 msg2a:     acc         "Result (before): A=^d Q=^d\r\n"
000042 xxxx 165154164040 
000043 xxxx 050142145146 
000044 xxxx 157162145051 
000045 xxxx 072040101075 
000046 xxxx 136144040121 
000047 xxxx 075136144015 
000050 xxxx 012040040040 
000051 xxxx 034122145163 msg2b:     acc         "Result  (after): A=^d Q=^d\r\n"
000052 xxxx 165154164040 
000053 xxxx 040050141146 
000054 xxxx 164145162051 
000055 xxxx 072040101075 
000056 xxxx 136144040121 
000057 xxxx 075136144015 
000060 xxxx 012040040040 
000061 xxxx 000000011000             even "(allocating 1 nop)
000062 xxxx 000000000000 Date:       bss     2
000064 xxxx 000000000052 result1:    dec     42
000065 xxxx 777777777726 result2:    dec     -42
000066 xxxx 000613235000 i1:         lda     =123456
000067 xxxx 000614236000 i2:         ldq     =7891011
000070 xxxx 000000633000 rd_clock:	rccl                " read the clock
000071 xxxx 000214757000 cv_clock:	staq	rdctime     " save clock reading
000072 xxxx 000164742000 	stx2	datx2               " save XR's
000073 xxxx 000165740000 	stx0	datx2+1             " ..
000074 xxxx 000034235007 	lda     28,dl               " Initialize montab
000075 xxxx 000217755000 	sta     montab+1			" to prime Feb
000076 xxxx 000214237000 	ldaq	rdctime             " Get clock reading
000077 xxxx 000001737000 	lls     1                   " Set for dvf
000100 xxxx 000615507000 	dvf     =1000000			" Get seconds since 1900.
000101 xxxx 000044777000 	llr     36                  " Into Q.
000102 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
000103 xxxx 000177755000 	sta     rdclock.sec         " Save for inspection.
000104 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
000105 xxxx 000176755000 	sta     rdclock.min
000106 xxxx 000006627000 	eax7	6
000107 xxxx 000167702000 	tsx2	datecv              " Convert the minutes.
000110 xxxx 000207176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
000111 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
000112 xxxx 000206756000 	stq     rdclock.day_of_century	" save for  later.
000113 xxxx 000175755000 	sta     rdclock.hr          " Hours since daybreak.
000114 xxxx 000167702000 	tsx2	datecv              " Convert the hours
000115 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
000116 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
000117 xxxx 000121604000 	tmi     *+2                 " no
000120 xxxx 000217054000 	aos     montab+1			" allow for feb 29
000121 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
000122 xxxx 003555036007 	adlq	1901,dl
000123 xxxx 000205756000 	stq     rdclock.year		" Save
000124 xxxx 000044777000 	llr     36
000125 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
000126 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
000127 xxxx 000132601000 	tnz     *+3                 " No.
000130 xxxx 000001176007 	sbq     1,dl                " Adjust year and
000131 xxxx 000555235007 	lda     365,dl              " day numbers.
000132 xxxx 000205056000 	asq     rdclock.year		" Add in years complete.
000133 xxxx 000000626000 	eax6	0                   " search for correct month
000134 xxxx 030220520201 	rpt     12,1,tmi			" ..
000135 xxxx 000216175016 	sba     montab,6			" subtract off days for each month
000136 xxxx 777777075016 	ada     -1,6                " put back last entry
000137 xxxx 000001075007 	ada     1,dl                " plus one more
000140 xxxx 000202755000 	sta     rdclock.day_of_month	" Day of month
000141 xxxx 000167702000 	tsx2	datecv              " convert day
000142 xxxx 000000635016 	eaa     0,6
000143 xxxx 000216135003 	sbla	montab,du			" get index into month table
000144 xxxx 000022771000 	arl     18                  "..
000145 xxxx 000200755000 	sta     rdclock.month		" Save month number
000146 xxxx 000243236005 	ldq     rdc.months-1,al		" Get name of month.
000147 xxxx 000201756000 	stq     rdclock.month_name
000150 xxxx 000167702000 	tsx2	datecv              " convert month
000151 xxxx 000000024400 	mvne	(),(),()			" edit the date and time
000152 xxxx 000212070010 	desc4ns	date,8
000153 xxxx 000232000014 	desc9a	datedit,12
000154 xxxx 000214020014 	desc6a	rdctime,12
000155 xxxx 000206236000 	ldq     rdclock.day_of_century
000156 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
000157 xxxx 000007506007 	div     7,dl
000160 xxxx 000203755000 	sta     rdclock.day_of_week
000161 xxxx 000235236005 	ldq     rdc.days,al         " Get name of day.
000162 xxxx 000204756000 	stq     rdclock.day_name
000163 xxxx 000214237000 	ldaq	rdctime             " get conversion in AQ
000164 xxxx 000164622000 datx2:	eax2	*			" restore XR's
000165 xxxx 000165620000 	eax0    *               " ..
000166 xxxx 000000710012 	tra     0,2             " return to caller
000167 xxxx 000211755000 datecv:	sta	datenum			" save number
000170 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
000171 xxxx 000211000004 	desc9a	datenum,4
000172 xxxx 000212070002 	desc4ns	date,2
000173 xxxx 777776627017 	eax7	-2,7			" move offset index
000174 xxxx 000000710012 	tra     0,2             " and return
000175 xxxx 000000000000 	bss	,1
000176 xxxx 000000000000 	bss	,1
000177 xxxx 000000000000 	bss	,1
000200 xxxx 000000000000 	bss	,1
000201 xxxx 000000000000 	bss	,1
000202 xxxx 000000000000 	bss	,1
000203 xxxx 000000000000 	bss	,1
000204 xxxx 000000000000 	bss	,1
000205 xxxx 000000000000 	bss	,1
000206 xxxx 000000000000 	bss	,1
000207 xxxx 000000000007     dec     7   "8
000210 xxxx 160163164040     aci     'pst '
000211 xxxx 000000000000 datenum:	bss	,1
000212 xxxx 000000000000 date:	bss	,1
000213 xxxx 000000011000 	even "(allocating 1 nop)
000214 xxxx 000000000000 rdctime:	bss	,2
000216 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
000217 xxxx 000000000034 
000220 xxxx 000000000037 
000221 xxxx 000000000036 
000222 xxxx 000000000037 
000223 xxxx 000000000036 
000224 xxxx 000000000037 
000225 xxxx 000000000037 
000226 xxxx 000000000036 
000227 xxxx 000000000037 
000230 xxxx 000000000036 
000231 xxxx 000000000037 
000232 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
000233 xxxx 061322021322 
000234 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
000235 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat '
000236 xxxx 155157156040 
000237 xxxx 164165145040 
000240 xxxx 167145144040 
000241 xxxx 164150165162 
000242 xxxx 146162151040 
000243 xxxx 163141164040 
000244 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec '
000245 xxxx 146145142040 
000246 xxxx 155141162040 
000247 xxxx 141160162040 
000250 xxxx 155141171040 
000251 xxxx 152165156040 
000252 xxxx 152165154040 
000253 xxxx 141165147040 
000254 xxxx 163145160164 
000255 xxxx 157143164040 
000256 xxxx 156157166040 
000257 xxxx 144145143040 
000260 xxxx 000263710000 crlf:	save
000261 xxxx 000000000000 
000262 xxxx 000261630000 
000263 xxxx 000261754000 
000264 xxxx 000261741000 
000265 xxxx 000274755000         sta     saveA
000266 xxxx 000616235000         lda     =012
000267 xxxx 000001420400         emCall  1
000270 xxxx 000617235000         lda     =015
000271 xxxx 000001420400         emcall  1
000272 xxxx 000274235000         lda     saveA
000273 xxxx 000262710000         return  crlf
000274 xxxx 000000000000 saveA:  bss     1
000275 xxxx 000304710000 ioa:    save    2, 4, 5, 6
000276 xxxx 000000000000 
000277 xxxx 000000222003 
000300 xxxx 000001224003 
000301 xxxx 000002225003 
000302 xxxx 000003226003 
000303 xxxx 000276630000 
000304 xxxx 000276754000 
000305 xxxx 000276741000 
000306 xxxx 000277742000 
000307 xxxx 000300744000 
000310 xxxx 000301745000 
000311 xxxx 000302746000 
000312 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
000313 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
000314 xxxx 000000626015         eax6    0, x5
000315 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
000316 xxxx 000333755000         sta     i29
000317 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
000320 xxxx 000033731000         ars     27      " determine word count
000321 xxxx 000006735000     	als     6       " count to upper word of tally
000322 xxxx 000333255000     	orsa    i29
000323 xxxx 000000626014     	eax6    0, x4   " address of string into X6
000324 xxxx 000333746000     	stx6    i29     " address to upper word of tally
000325 xxxx 000333235052 inext:  lda     i29, sc
000326 xxxx 000136115007         cmpa    =o000136,dl		" ^
000327 xxxx 000334600000         tze     iernot      " if so, go process it
000330 xxxx 000001420400 out1:  	emCall  1
000331 xxxx 000325607000     	ttf     inext
000332 xxxx 000277710000         return  ioa
000333 xxxx 000000000041 i29:	tallyb  0, 0, 1
000334 xxxx 000333235052 iernot: lda     i29, sc         " get next char ...
000335 xxxx 000136115007         cmpa    =o000136,dl     " is it another "^"?
000336 xxxx 000354600000         tze     i21             " No, just print it ...
000337 xxxx 000167115007         cmpa    =o000167,dl     " is it a "w"?
000340 xxxx 000356600000         tze     idoW            " do full word octal
000341 xxxx 000157115007         cmpa    =o000157,dl     " is it an "o"?
000342 xxxx 000404600000         tze     idoO            " print zero suppressed octal
000343 xxxx 000156115007         cmpa    =o000156,dl     " is it a "n"?
000344 xxxx 000427600000         tze     idoN            " octal w/ no spaces inserted
000345 xxxx 000144115007         cmpa    =o000144,dl     " is it a "d"?
000346 xxxx 000456600000         tze     idoD            " decimal
000347 xxxx 000141115007         cmpa    =o000141,dl     " is it a ^a?
000350 xxxx 000464600000         tze     idoA            " 4 char ascii display
000351 xxxx 000147115007         cmpa    =o000147,dl     " is it a ^g?
000352 xxxx 000475600000         tze     idoG            " 6 char GE BCD display
000353 xxxx 000330710000         tra     out1        " unknown just print it....
000354 xxxx 000001420400 i21:    emCall  1           " output A to console
000355 xxxx 000325710000         tra     inext
000356 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
000357 xxxx 000553702000         tsx2    octwd
000360 xxxx 000454757000         staq    ioaSafe     " bcd in AQ
000361 xxxx 000044773000         lrl     36          " A => Q
000362 xxxx 000006622000         eax2    6
000363 xxxx 000000235007 idoW2:  lda     =0, dl
000364 xxxx 000006737000         lls     6
000365 xxxx 000002420400         emCall  2           " output GE code char to console
000366 xxxx 777777622012         eax2    -1, 2
000367 xxxx 000363601000         tnz     idoW2
000370 xxxx 000454237000         ldaq    ioaSafe
000371 xxxx 000000235007         lda     =0, dl      " 0 => A
000372 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
000373 xxxx 000002420400         emcall  2
000374 xxxx 000006622000         eax2    6
000375 xxxx 000000235007 idoW3:  lda     =0,dl
000376 xxxx 000006737000         lls     6
000377 xxxx 000002420400         emCall  2
000400 xxxx 777777622012         eax2    -1, 2
000401 xxxx 000375601000         tnz     idoW3
000402 xxxx 000001065003         adx5    1,du
000403 xxxx 000325710000         tra     inext
000404 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
000405 xxxx 000553702000         tsx2    octwd
000406 xxxx 000454757000         staq    ioaSafe         " bcd in AQ
000407 xxxx 000425235000         lda     idOTly
000410 xxxx 000426755000         sta     idOT
000411 xxxx 000426235052 idO1:   lda     idOT, sc        " get char into A
000412 xxxx 000000115007         cmpa    =0, dl          " a zero?
000413 xxxx 000421601000         tnz     idONZ + 1       " nope
000414 xxxx 000411607000         ttf     idO1            " Yes, a Zero. Go for more
000415 xxxx 000002420400         emCall  2               " output a single 0
000416 xxxx 000001065003         adx5    1,du
000417 xxxx 000325710000         tra     inext
000420 xxxx 000426235052 idONZ:  lda     idOT, sc        " get char into A
000421 xxxx 000002420400         emCall  2
000422 xxxx 000420607000         ttf     idONZ           " Yes, a Zero. Go for more
000423 xxxx 000001065003         adx5    1,du
000424 xxxx 000325710000         tra     inext
000425 xxxx 000454001400 idOTly: tally   ioaSafe, 12, 0
000426 xxxx 000000000000 idOT:   bss     1
000427 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
000430 xxxx 000553702000         tsx2    octwd
000431 xxxx 000454757000         staq    ioaSafe     " bcd in AQ
000432 xxxx 000044773000         lrl     36          " A => Q
000433 xxxx 000006622000         eax2    6
000434 xxxx 000000235007 idoN2:  lda     =0,dl
000435 xxxx 000006737000         lls     6
000436 xxxx 000002420400         emCall  2           " output GE code char to console
000437 xxxx 777777622012         eax2    -1, 2
000440 xxxx 000434601000         tnz     idoN2
000441 xxxx 000454237000         ldaq    ioaSafe
000442 xxxx 000000235007         lda     =0, dl      " 0 => A
000443 xxxx 000006622000         eax2    6
000444 xxxx 000000235007 idoN3:  lda     =0, dl
000445 xxxx 000006737000         lls     6
000446 xxxx 000002420400         emCall  2
000447 xxxx 777777622012         eax2    -1, 2
000450 xxxx 000444601000         tnz     idoN3
000451 xxxx 000001065003         adx5    1,du
000452 xxxx 000325710000         tra     inext
000453 xxxx 000000011000         even "(allocating 1 nop)
000454 xxxx 000000000000 ioaSafe:  bss 2
000456 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
000457 xxxx 000506701000         call    toDec
000460 xxxx 000462710000 
000461 xxxx 000000000000 
000462 xxxx 000001065003         adx5    1,du
000463 xxxx 000325710000         tra     inext
000464 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
000465 xxxx 000004622000         eax2    4
000466 xxxx 000000235007 idoA2:  lda     =0,dl
000467 xxxx 000011737000         lls     9
000470 xxxx 000001420400         emCall  1
000471 xxxx 777777622012         eax2    -1, 2
000472 xxxx 000466601000         tnz     idoA2
000473 xxxx 000001065003         adx5    1,du        " into next argument
000474 xxxx 000325710000         tra     inext
000475 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
000476 xxxx 000006622000         eax2    6
000477 xxxx 000000235007 idoG2:  lda     =0,dl
000500 xxxx 000006737000         lls     6
000501 xxxx 000002420400         emCall  2
000502 xxxx 777777622012         eax2    -1, 2
000503 xxxx 000477601000         tnz     idoG2
000504 xxxx 000001065003         adx5    1,du        " into next argument
000505 xxxx 000325710000         tra     inext
000506 xxxx 000511710000 toDec:  save    "2,3,4,5,6,7
000507 xxxx 000000000000 
000510 xxxx 000507630000 
000511 xxxx 000507754000 
000512 xxxx 000507741000 
000513 xxxx 000620116000         cmpq    =-34359738368       " the weird one?
000514 xxxx 000520601000         tnz     toDec2
000515 xxxx 000552235000         lda     decMTly             " just print it and be done with it
000516 xxxx 000546755000         sta     decTly
000517 xxxx 000536710000         tra     toDec1
000520 xxxx 000542756000 toDec2: stq     decNo
000521 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
000522 xxxx 000524605000         tpl     toDec0      " No
000523 xxxx 000542336000         lcq     decNo       " -decNo => Q
000524 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
000525 xxxx 000060075007         ada     =o060,dl    " add ascii '0' (=1A0) to A
000526 xxxx 000546755045         sta     decTly, scr " start writing characters backwards
000527 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
000530 xxxx 000524601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
000531 xxxx 000542235000         lda     decNo
000532 xxxx 000000115007         cmpa    =0,dl
000533 xxxx 000536605000         tpl     toDec1
000534 xxxx 000055235007         lda     =o055,dl    " (-) => A
000535 xxxx 000546755045         sta     decTly, scr " write (-) sign
000536 xxxx 000546235052 toDec1: lda     decTly, sc
000537 xxxx 000001420400         emCall  1
000540 xxxx 000536607000         ttf     toDec1
000541 xxxx 000510710000         return  toDec
000542 xxxx 000000000000 decNo:  dec     0
000543 xxxx 000000000000 decBuf: bss     3
000546 xxxx 000545000040 decTly: tallyb  decBuf+2, , 0
000547 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35
000550 xxxx 065071067063 
000551 xxxx 070063066070 
000552 xxxx 000547001440 decMTly:tallyb  decMM, 12, 0
000553 xxxx 000570742000 octwd:	stx2	octx2
000554 xxxx 000006622000 	eax2	6
000555 xxxx 000003736000 	qls     3
000556 xxxx 000003777000 	llr     3
000557 xxxx 777777622012 	eax2	-1,2
000560 xxxx 000555605400 	tpnz	*-3
000561 xxxx 000612756000 	stq     octtemp
000562 xxxx 000006622000 	eax2	6
000563 xxxx 000003736000 	qls     3
000564 xxxx 000003777000 	llr     3
000565 xxxx 777777622012 	eax2	-1,2
000566 xxxx 000563605400 	tpnz	*-3
000567 xxxx 000612235000 	lda     octtemp
000570 xxxx 000570622000 octx2:	eax2	*
000571 xxxx 000000710012 	tra     0,2
000572 xxxx 000610742000 hexwd:	stx2	hexx2
000573 xxxx 000044773000 	lrl     36          "shift to Q
000574 xxxx 000006622000 	eax2	6           "	process 6 characters
000575 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
000576 xxxx 000004737000 	lls     4           "shift in 4 bits
000577 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
000600 xxxx 000602604400 	tmoz	*+2
000601 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
000602 xxxx 000006773000 	lrl     6
000603 xxxx 000612235000 	lda     octtemp		"get temporary
000604 xxxx 000006737000 	lls     6           "insert new character
000605 xxxx 000612755000 	sta     octtemp		"and store
000606 xxxx 777777622012 	eax2	-1,2		"decrement index
000607 xxxx 000575605400 	tpnz	hexloop
000610 xxxx 000610622000 hexx2:	eax2	*
000611 xxxx 000000710012 	tra     0,2		"return to caller
000612 xxxx 000000000000 octtemp:	oct	0
000613 xxxx 000000361100 decimal literal (=123456)
000614 xxxx 000036064103 decimal literal (=7891011)
000615 xxxx 000003641100 decimal literal (=1000000)
000616 xxxx 000000000012 octal literal (=o12)
000617 xxxx 000000000015 octal literal (=o15)
000620 xxxx 400000000000 decimal literal (=-34359738368)
