!SIZE 003515
000000 xxxx 000012710000     tra     main_
000001 xxxx 030124150151 msgHello:   acc     "This is TestFP ...^g^g\r\n"
000002 xxxx 163040151163 
000003 xxxx 040124145163 
000004 xxxx 164106120040 
000005 xxxx 056056056136 
000006 xxxx 147136147015 
000007 xxxx 012040040040 
000010 xxxx 000000000000     bss     Date, 2
000012 xxxx 002172701000     call    arc_tangent_degrees_(=1.0)
000013 xxxx 000016710000 
000014 xxxx 000000000000 
000015 xxxx 003442000000 
000016 xxxx 000006420400     emCall  6
000017 xxxx 002720701000     call    crlf
000020 xxxx 000022710000 
000021 xxxx 000000000000 
000022 xxxx 002172701000     call    arc_tangent_degrees_(=18.0)
000023 xxxx 000026710000 
000024 xxxx 000000000000 
000025 xxxx 003443000000 
000026 xxxx 000006420400     emCall  6
000027 xxxx 002720701000     call    crlf
000030 xxxx 000032710000 
000031 xxxx 000000000000 
000032 xxxx 002172701000     call    arc_tangent_degrees_(=38.0)
000033 xxxx 000036710000 
000034 xxxx 000000000000 
000035 xxxx 003444000000 
000036 xxxx 000006420400     emCall  6
000037 xxxx 002720701000     call    crlf
000040 xxxx 000042710000 
000041 xxxx 000000000000 
000042 xxxx 002172701000     call    arc_tangent_degrees_(=58.0)
000043 xxxx 000046710000 
000044 xxxx 000000000000 
000045 xxxx 003445000000 
000046 xxxx 000006420400     emCall  6
000047 xxxx 002720701000     call    crlf
000050 xxxx 000052710000 
000051 xxxx 000000000000 
000052 xxxx 002172701000     call    arc_tangent_degrees_(=78.0)
000053 xxxx 000056710000 
000054 xxxx 000000000000 
000055 xxxx 003446000000 
000056 xxxx 000006420400     emCall  6
000057 xxxx 002720701000     call    crlf
000060 xxxx 000062710000 
000061 xxxx 000000000000 
000062 xxxx 002217701000     call    arc_tangent_degrees_2_(=123.456, =789.101112)
000063 xxxx 000067710000 
000064 xxxx 000000000000 
000065 xxxx 003447000000 
000066 xxxx 003450000000 
000067 xxxx 000006420400     emCall  6
000070 xxxx 002720701000     call    crlf
000071 xxxx 000073710000 
000072 xxxx 000000000000 
000073 xxxx 000000616000     dis
000074 xxxx 002054701000     call    exponential_(=1.0)
000075 xxxx 000100710000 
000076 xxxx 000000000000 
000077 xxxx 003451000000 
000100 xxxx 000006420400     emCall  6
000101 xxxx 002720701000     call    crlf
000102 xxxx 000104710000 
000103 xxxx 000000000000 
000104 xxxx 002054701000     call    exponential_(=1.23456)
000105 xxxx 000110710000 
000106 xxxx 000000000000 
000107 xxxx 003452000000 
000110 xxxx 000006420400     emCall  6
000111 xxxx 002720701000     call    crlf
000112 xxxx 000114710000 
000113 xxxx 000000000000 
000114 xxxx 002054701000     call    exponential_(=-6.54321)
000115 xxxx 000120710000 
000116 xxxx 000000000000 
000117 xxxx 003453000000 
000120 xxxx 000006420400     emCall  6
000121 xxxx 002720701000     call    crlf
000122 xxxx 000124710000 
000123 xxxx 000000000000 
000124 xxxx 001727701000     call    log_base_e_(=3.1415926535897932)
000125 xxxx 000130710000 
000126 xxxx 000000000000 
000127 xxxx 003454000000 
000130 xxxx 000006420400     emCall  6
000131 xxxx 002720701000     call    crlf
000132 xxxx 000134710000 
000133 xxxx 000000000000 
000134 xxxx 001670701000     call    log_base_10_(=3.1415926535897932)
000135 xxxx 000140710000 
000136 xxxx 000000000000 
000137 xxxx 003455000000 
000140 xxxx 000006420400     emCall  6
000141 xxxx 002720701000     call    crlf
000142 xxxx 000144710000 
000143 xxxx 000000000000 
000144 xxxx 001416701000     call    cotangent_degrees_(=34.0)
000145 xxxx 000150710000 
000146 xxxx 000000000000 
000147 xxxx 003456000000 
000150 xxxx 000006420400     emCall  6
000151 xxxx 002720701000     call    crlf
000152 xxxx 000154710000 
000153 xxxx 000000000000 
000154 xxxx 001416701000     call    cotangent_degrees_(=-34.0)
000155 xxxx 000160710000 
000156 xxxx 000000000000 
000157 xxxx 003457000000 
000160 xxxx 000006420400     emCall  6
000161 xxxx 002720701000     call    crlf
000162 xxxx 000164710000 
000163 xxxx 000000000000 
000164 xxxx 001475701000     call    tangent_degrees_(=60.0)
000165 xxxx 000170710000 
000166 xxxx 000000000000 
000167 xxxx 003460000000 
000170 xxxx 000006420400     emCall  6
000171 xxxx 002720701000     call    crlf
000172 xxxx 000174710000 
000173 xxxx 000000000000 
000174 xxxx 001475701000     call    tangent_degrees_(=45.0)
000175 xxxx 000200710000 
000176 xxxx 000000000000 
000177 xxxx 003461000000 
000200 xxxx 000006420400     emCall  6
000201 xxxx 002720701000     call    crlf
000202 xxxx 000204710000 
000203 xxxx 000000000000 
000204 xxxx 001475701000     call    tangent_degrees_(=12.34)
000205 xxxx 000210710000 
000206 xxxx 000000000000 
000207 xxxx 003462000000 
000210 xxxx 000006420400     emCall  6
000211 xxxx 002720701000     call    crlf
000212 xxxx 000214710000 
000213 xxxx 000000000000 
000214 xxxx 001475701000     call    tangent_degrees_(=-60.0)
000215 xxxx 000220710000 
000216 xxxx 000000000000 
000217 xxxx 003463000000 
000220 xxxx 000006420400     emCall  6
000221 xxxx 002720701000     call    crlf
000222 xxxx 000224710000 
000223 xxxx 000000000000 
000224 xxxx 001475701000     call    tangent_degrees_(=-45.0)
000225 xxxx 000230710000 
000226 xxxx 000000000000 
000227 xxxx 003464000000 
000230 xxxx 000006420400     emCall  6
000231 xxxx 002720701000     call    crlf
000232 xxxx 000234710000 
000233 xxxx 000000000000 
000234 xxxx 001475701000     call    tangent_degrees_(=-12.34)
000235 xxxx 000240710000 
000236 xxxx 000000000000 
000237 xxxx 003465000000 
000240 xxxx 000006420400     emCall  6
000241 xxxx 002720701000     call    crlf
000242 xxxx 000244710000 
000243 xxxx 000000000000 
000244 xxxx 000700701000     call    cosine_degrees_(=60.0)
000245 xxxx 000250710000 
000246 xxxx 000000000000 
000247 xxxx 003466000000 
000250 xxxx 000006420400     emCall  6
000251 xxxx 002720701000     call    crlf
000252 xxxx 000254710000 
000253 xxxx 000000000000 
000254 xxxx 000700701000     call    cosine_degrees_(=45.0)
000255 xxxx 000260710000 
000256 xxxx 000000000000 
000257 xxxx 003467000000 
000260 xxxx 000006420400     emCall  6
000261 xxxx 002720701000     call    crlf
000262 xxxx 000264710000 
000263 xxxx 000000000000 
000264 xxxx 000700701000     call    cosine_degrees_(=12.34)
000265 xxxx 000270710000 
000266 xxxx 000000000000 
000267 xxxx 003470000000 
000270 xxxx 000006420400     emCall  6
000271 xxxx 002720701000     call    crlf
000272 xxxx 000274710000 
000273 xxxx 000000000000 
000274 xxxx 000700701000     call    cosine_degrees_(=-60.0)
000275 xxxx 000300710000 
000276 xxxx 000000000000 
000277 xxxx 003471000000 
000300 xxxx 000006420400     emCall  6
000301 xxxx 002720701000     call    crlf
000302 xxxx 000304710000 
000303 xxxx 000000000000 
000304 xxxx 000700701000     call    cosine_degrees_(=-45.0)
000305 xxxx 000310710000 
000306 xxxx 000000000000 
000307 xxxx 003472000000 
000310 xxxx 000006420400     emCall  6
000311 xxxx 002720701000     call    crlf
000312 xxxx 000314710000 
000313 xxxx 000000000000 
000314 xxxx 000700701000     call    cosine_degrees_(=-12.34)
000315 xxxx 000320710000 
000316 xxxx 000000000000 
000317 xxxx 003473000000 
000320 xxxx 000006420400     emCall  6
000321 xxxx 002720701000     call    crlf
000322 xxxx 000324710000 
000323 xxxx 000000000000 
000324 xxxx 000735701000     call    sine_degrees_(=60.0)
000325 xxxx 000330710000 
000326 xxxx 000000000000 
000327 xxxx 003474000000 
000330 xxxx 000006420400     emCall  6
000331 xxxx 002720701000     call    crlf
000332 xxxx 000334710000 
000333 xxxx 000000000000 
000334 xxxx 000735701000     call    sine_degrees_(=45.0)
000335 xxxx 000340710000 
000336 xxxx 000000000000 
000337 xxxx 003475000000 
000340 xxxx 000006420400     emCall  6
000341 xxxx 002720701000     call    crlf
000342 xxxx 000344710000 
000343 xxxx 000000000000 
000344 xxxx 000735701000     call    sine_degrees_(=12.34)
000345 xxxx 000350710000 
000346 xxxx 000000000000 
000347 xxxx 003476000000 
000350 xxxx 000006420400     emCall  6
000351 xxxx 002720701000     call    crlf
000352 xxxx 000354710000 
000353 xxxx 000000000000 
000354 xxxx 000735701000     call    sine_degrees_(=-60.0)
000355 xxxx 000360710000 
000356 xxxx 000000000000 
000357 xxxx 003477000000 
000360 xxxx 000006420400     emCall  6
000361 xxxx 002720701000     call    crlf
000362 xxxx 000364710000 
000363 xxxx 000000000000 
000364 xxxx 000735701000     call    sine_degrees_(=-45.0)
000365 xxxx 000370710000 
000366 xxxx 000000000000 
000367 xxxx 003500000000 
000370 xxxx 000006420400     emCall  6
000371 xxxx 002720701000     call    crlf
000372 xxxx 000374710000 
000373 xxxx 000000000000 
000374 xxxx 000735701000     call    sine_degrees_(=-12.34)
000375 xxxx 000400710000 
000376 xxxx 000000000000 
000377 xxxx 003501000000 
000400 xxxx 000006420400     emCall  6
000401 xxxx 002720701000     call    crlf
000402 xxxx 000404710000 
000403 xxxx 000000000000 
000404 xxxx 000600701000     call    sqrt(=3.1415926535897932)   " 1.77245385091
000405 xxxx 000410710000 
000406 xxxx 000000000000 
000407 xxxx 003502000000 
000410 xxxx 000006420400     emCall  6
000411 xxxx 002720701000     call    crlf
000412 xxxx 000414710000 
000413 xxxx 000000000000 
000414 xxxx 000600701000     call    sqrt(=2.0)   " 1.414...
000415 xxxx 000420710000 
000416 xxxx 000000000000 
000417 xxxx 003503000000 
000420 xxxx 000006420400     emCall  6
000421 xxxx 002720701000     call    crlf
000422 xxxx 000424710000 
000423 xxxx 000000000000 
000424 xxxx 000542701000     call    ALOG10(=3.1415926535897932)     " .497149873
000425 xxxx 000430710000 
000426 xxxx 000000000000 
000427 xxxx 003504000000 
000430 xxxx 000006420400     emCall  6
000431 xxxx 002720701000     call    crlf
000432 xxxx 000434710000 
000433 xxxx 000000000000 
000434 xxxx 000546701000     call    ALOG(=3.1415926535897932)      " 1.144729886
000435 xxxx 000440710000 
000436 xxxx 000000000000 
000437 xxxx 003505000000 
000440 xxxx 000006420400     emCall  6
000441 xxxx 002720701000     call    crlf
000442 xxxx 000444710000 
000443 xxxx 000000000000 
000444 xxxx 000542701000     call    ALOG10(=2.71828182846)
000445 xxxx 000450710000 
000446 xxxx 000000000000 
000447 xxxx 003506000000 
000450 xxxx 000006420400     emCall  6
000451 xxxx 002720701000     call    crlf
000452 xxxx 000454710000 
000453 xxxx 000000000000 
000454 xxxx 000546701000     call    ALOG(=2.71828182846)
000455 xxxx 000460710000 
000456 xxxx 000000000000 
000457 xxxx 003507000000 
000460 xxxx 000006420400     emCall  6
000461 xxxx 002720701000     call    crlf
000462 xxxx 000464710000 
000463 xxxx 000000000000 
000464 xxxx 000000616000     dis
000465 xxxx 000470710000 LOGS:   SAVE    
000466 xxxx 000000000000 
000467 xxxx 000466630000 
000470 xxxx 000466754000 
000471 xxxx 000466741000 
000472 xxxx 000002431031         FLD     2, 1*       " X = (2**I) * F = ARGUMENT
000473 xxxx 000000573000         FNO
000474 xxxx 000524600000         TZE     ERR1        " ERROR IF X = 0
000475 xxxx 000532604000         TMI     ERR2        " ERROR IF X NEGATIVE
000476 xxxx 002400515003 BEGIN:  FCMP    =1.0,DU
000477 xxxx 000530600000         TZE     UNITY       " LOG(1) = 0
000500 xxxx 000515456000         STE     I           " STORE I AT BINARY POINT 7
000501 xxxx 000000411003         LDE     0, DU       " OBTAIN F
000502 xxxx 000562477000         DFAD    SRHLF
000503 xxxx 000566457000         DFST    Z
000504 xxxx 000564577000         DFSB    SRTWO
000505 xxxx 000566567000         DFDV    Z
000506 xxxx 000566457000         DFST    Z           " Z = (F - SQRT(1/2))/(F + SQRT(1/2))
000507 xxxx 000566463000         DFMP    Z           " Z^2
000510 xxxx 000560577000         DFSB    C           " Z^2-C
000511 xxxx 000556527000         DFDI    B           " B/(Z^2-C)
000512 xxxx 000554477000         DFAD    A           " A+B/(Z^2-C)
000513 xxxx 000566463000         DFMP    Z           " Z(A+B/(Z^2-C))
000514 xxxx 000566457000         DFST    Z           " Z = Z*(A+(B/(Z^2-C))) = LOG2 (F) + 1/2
000515 xxxx 000000235003 I:      LDA     0, DU       " ==== THIS GET CHANGED ====
000516 xxxx 000000236003         LDQ     0, DU
000517 xxxx 016000411003         LDE     =7B25, DU   " FLOAT I
000520 xxxx 000400575003         FSB     =0.5, DU
000521 xxxx 000566477000         DFAD    Z           " LOG2(X) = I + LOG2(F)
000522 xxxx 000522463000 INDIC:  DFMP    *           " CONVERT TO BASE 10 OR E
000523 xxxx 000467710000         RETURN  LOGS
000524 xxxx 000570701000 ERR1:   CALL    .FXEM.(EALN1)   " ERROR EXIT NUMBER 1 (X=0)
000525 xxxx 000530710000 
000526 xxxx 000000000000 
000527 xxxx 000552000000 
000530 xxxx 400000431003 UNITY:  FLD     =0.0, DU
000531 xxxx 000467710000         RETURN  LOGS
000532 xxxx 000570701000 ERR2:   CALL    .FXEM.(EALN2)   " ERROR EXIT NUMBER 2 (X IS NEGATIVE)
000533 xxxx 000536710000 
000534 xxxx 000000000000 
000535 xxxx 000553000000 
000536 xxxx 000000513000         FNEG
000537 xxxx 000476710000         TRA     BEGIN
000540 xxxx 000000616000         dis
000541 xxxx 000000011000         even "(allocating 1 nop)
000542 xxxx 000522750000 ALOG10: STC2    INDIC       " REAL COMMON LOGARITHM
000543 xxxx 000465710000         TRA     LOGS
000544 xxxx 776464202324         DEC     .301029996D0
000545 xxxx 175727157154 
000546 xxxx 000522750000 ALOG:   STC2    INDIC       " REAL NATURAL LOGARITHM
000547 xxxx 000465710000         TRA     LOGS
000550 xxxx 000542710277         DEC     6.93147180559D-1
000551 xxxx 575030531171 
000552 xxxx 010440000000 EALN1:  DEC     9.
000553 xxxx 010500000000 EALN2:  DEC     10.
000554 xxxx 002512601750 A:      DEC     .12920070987D1
000555 xxxx 530734427226 
000556 xxxx 005256062222 B:      DEC     -.26398577031D1
000557 xxxx 154274032423 
000560 xxxx 002650103142 C:      DEC     .16567626301D1
000561 xxxx 014073125631 
000562 xxxx 000552023631 SRHLF:  DEC     .707106781187D0     " sqrt(2) / 2
000563 xxxx 477513560151 
000564 xxxx 002552023631 SRTWO:  DEC     .1414213562374D1    " SQRT(2)
000565 xxxx 477513560151 
000566 xxxx 000000000000 Z:      BSS     2
000570 xxxx 000573710000 .FXEM.: save
000571 xxxx 000000000000 
000572 xxxx 000571630000 
000573 xxxx 000571754000 
000574 xxxx 000571741000 
000575 xxxx 000002235031         lda     2, 1*
000576 xxxx 000001420400         emcall  1
000577 xxxx 000000616000         dis
000600 xxxx 000605710000 sqrt:   save    0, 1
000601 xxxx 000000000000 
000602 xxxx 000000220003 
000603 xxxx 000001221003 
000604 xxxx 000601630000 
000605 xxxx 000601754000 
000606 xxxx 000601741000 
000607 xxxx 000602740000 
000610 xxxx 000603741000 
000611 xxxx 000002431031         FLD     2, 1*               " X = ARGUMENT
000612 xxxx 000000573000         FNO
000613 xxxx 000615601000         tnz     sqrt.1
000614 xxxx 000602710000         return  sqrt                " if x = 0 return (0)
000615 xxxx 000621605000 sqrt.1:	tpl     calc_square_root	" if x < 0:
000616 xxxx 000000513000         fneg	0                   "   x = -x
000617 xxxx 000660455000         fst     x
000620 xxxx 000660431000         fld     x		"   calculate sqrt (abs(x))
000621 xxxx 000660455000         fst     x           " store EA := input arg
000622 xxxx 000660220000         ldx0	x           " X0 := addr (x) -> expon
000623 xxxx 000000411003         lde     =0b25,du	" addr (m) -> expon = 0
000624 xxxx 002000300003         canx0	=1b25,du	" calculate mod (e, 2)
000625 xxxx 000002600004         tze     2,ic		" if mod (e, 2) = 1:
000626 xxxx 776000411003         lde     =-1b25,du	"   EA := m = .5*m
000627 xxxx 000660236000         ldq     x           " Q := 8/expon,28/garbage
000630 xxxx 000034732000         qrs     28          " Q := 28/0,8/expon
000631 xxxx 000001076007         adq     =1,dl		" calculate e+1
000632 xxxx 000001732000         qrs     1           " calculate divide (e+1, 2, 7)
000633 xxxx 000034736000         qls     28          " position result in exponent field
000634 xxxx 000664756000         stq     e           " store Q := e = divide (e+1, 2, 7)
000635 xxxx 003510236000         ldq     =0          " clear Q
000636 xxxx 000662457000         dfst	m           " store EAQ := m
000637 xxxx 000672461000         fmp     p2          " calculate root_m = p(m)
000640 xxxx 000670475000         fad     p1
000641 xxxx 000662461000         fmp     m
000642 xxxx 000666475000         fad     p0
000643 xxxx 000656455000         fst     root_m
000644 xxxx 000662525000         fdi     m           " calculate root_m = .5 * (root_m + m/root_m)
000645 xxxx 000656475000         fad     root_m
000646 xxxx 000400461003         fmp     =0.5,du
000647 xxxx 000656457000         dfst	root_m      " calculate root_m + float (m, 63)/root_m
000650 xxxx 000662527000         dfdi	m
000651 xxxx 000656477000         dfad	root_m
000652 xxxx 776000415003         ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
000653 xxxx 000664415000         ade     e           " calculate addr (root_x) -> expon =
000654 xxxx 000000471000         frd     0
000655 xxxx 000602710000         return  sqrt        " return (root_x)
000656 xxxx 000000000000         bss     root_m,2
000660 xxxx 000000000000         bss     x,2
000662 xxxx 000000000000         bss     m,2
000664 xxxx 000000000000         bss     e,2
000666 xxxx 776411377603 p0:     dec	2.5927688d-1
000667 xxxx 406536706351 
000670 xxxx 002415257502 p1:     dec	1.0521212d0
000671 xxxx 413332156142 
000672 xxxx 777274054062 p2:     dec	-3.1632214d-1
000673 xxxx 066300621037 
000674 xxxx 000400000000 scale:	oct	000400000000	" 0.5
000675 xxxx 000100000000         oct	000100000000	" 0.25*0.5 = 0.125
000676 xxxx 000200000000         oct	000200000000	" 0.25
000677 xxxx 000040000000         oct	000040000000	" 0.25*0.25 = 0.0625
000700 xxxx 000710710000     save    0,1,2,3,4
000701 xxxx 000000000000 
000702 xxxx 000000220003 
000703 xxxx 000001221003 
000704 xxxx 000002222003 
000705 xxxx 000003223003 
000706 xxxx 000004224003 
000707 xxxx 000701630000 
000710 xxxx 000701754000 
000711 xxxx 000701741000 
000712 xxxx 000702740000 
000713 xxxx 000703741000 
000714 xxxx 000704742000 
000715 xxxx 000705743000 
000716 xxxx 000706744000 
000717 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
000720 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
000721 xxxx 000000623000     eax3    0       " cosine return
000722 xxxx 400000475003 	fad     =0.0,du		" normalize input
000723 xxxx 001106425012 	fcmg	one_eighty,x2	" if abs_angle <= 180:
000724 xxxx 001022604000 	tmi     case1_degrees	" then no angle reduction is necessary
000725 xxxx 001164700000 	tsx0	principal_degrees_
000726 xxxx 001016710011 	tra     case_degrees+1,x1	" select appropriate case
000727 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
000730 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
000731 xxxx 001400425012 	fcmg	pi,x2		" if abs (angle) <= pi
000732 xxxx 000777604000 	tmi     case1_radians	" then no angle reduction is necessary
000733 xxxx 001204700000 	tsx0	principal_radians_
000734 xxxx 000773710011 	tra     case_radians+1,x1	" select appropriate case
000735 xxxx 000745710000     save    0,1,2,3,4
000736 xxxx 000000000000 
000737 xxxx 000000220003 
000740 xxxx 000001221003 
000741 xxxx 000002222003 
000742 xxxx 000003223003 
000743 xxxx 000004224003 
000744 xxxx 000736630000 
000745 xxxx 000736754000 
000746 xxxx 000736741000 
000747 xxxx 000737740000 
000750 xxxx 000740741000 
000751 xxxx 000741742000 
000752 xxxx 000742743000 
000753 xxxx 000743744000 
000754 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
000755 xxxx 000000622000 	eax2	BFP         " no offset for BFP constants
000756 xxxx 000001623000     eax3    1           " sine return
000757 xxxx 400000475003 	fad     =0.0,du         " normalize input
000760 xxxx 001104425012 	fcmg	ninety,x2		" if abs (angle) < pi/2
000761 xxxx 001035604000 	tmi     case0_degrees	" then no angle reduction is necessary
000762 xxxx 001164700000 	tsx0	principal_degrees_
000763 xxxx 001015710011 	tra     case_degrees,x1	" select appropriate case
000764 xxxx 000000622000 	eax2	BFP             " no offset for BFP constants
000765 xxxx 400000475003 	fad     =0.0,du         " normalize input
000766 xxxx 001356425012 	fcmg	half_pi,x2      " if abs (angle) <= pi/2
000767 xxxx 001041604400 	tmoz	case0_radians	" then no angle reduction is necessary
000770 xxxx 001204700000 	tsx0	principal_radians_
000771 xxxx 000772710011 	tra     case_radians,x1	" Case select appropriate case_radians
000772 xxxx 001041710000 	tra     case0_radians
000773 xxxx 000777710000 	tra     case1_radians
000774 xxxx 001005710000 	tra     case2_radians
000775 xxxx 001007710000 	tra     case3_radians
000776 xxxx 001041710000 	tra     case0_radians
000777 xxxx 400000475003 	fad     =0.0,du		" set indicators
001000 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001001 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001002 xxxx 001100477012 	dfad	half_pi1A,x2
001003 xxxx 001102477012 	dfad	half_pi2A,x2
001004 xxxx 001041710000 	tra     part_sine_radians
001005 xxxx 000000513000 	fneg	0
001006 xxxx 001041710000 	tra     part_sine_radians
001007 xxxx 400000475003 	fad     =0.0,du		" set indicators
001010 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001011 xxxx 000000513000     fneg	0
001012 xxxx 001100577012 	dfsb	half_pi1A,x2
001013 xxxx 001102577012 	dfsb	half_pi2A,x2
001014 xxxx 001041710000 	tra     part_sine_radians
001015 xxxx 001035710000 	tra     case0_degrees
001016 xxxx 001022710000 	tra     case1_degrees
001017 xxxx 001027710000 	tra     case2_degrees
001020 xxxx 001031710000 	tra     case3_degrees
001021 xxxx 001035710000 	tra     case0_degrees
001022 xxxx 400000475003 	fad     =0.0,du		" set indicators
001023 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001024 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001025 xxxx 001104475012 	fad     ninety,x2
001026 xxxx 001035710000 	tra     part_sine_degrees
001027 xxxx 000000513000 	fneg	0
001030 xxxx 001035710000 	tra     part_sine_degrees
001031 xxxx 400000475003 	fad     =0.0,du		" set indicators
001032 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001033 xxxx 000000513000 	fneg
001034 xxxx 001104575012 	fsb     ninety,x2
001035 xxxx 001074427012 	dfcmg	eps2,x2		" if conversion to radians underflows
001036 xxxx 000002605004 	tpl     2,ic
001037 xxxx 400000431003     fld     =0.0,du		" then use zero
001040 xxxx 001372463012 	dfmp	one_degree,x2	" convert to radians.
001041 xxxx 001076427012 	dfcmg	eps3,x2		" if abs (x) < 5e-10:
001042 xxxx 000003605004 	tpl     3,ic
001043 xxxx 000000471000     frd     0
001044 xxxx 001065710013     tra     rets, x3
001045 xxxx 000660457000 	dfst	x
001046 xxxx 000660463000 	dfmp	x           " calculate xx = x*x
001047 xxxx 001070457000 	dfst	xx
001050 xxxx 001122461012 	fmp     tp5,x2		" calculate p(xx)
001051 xxxx 001120477012 	dfad	tp4,x2
001052 xxxx 001070461000 	fmp     xx
001053 xxxx 001116477012 	dfad	tp3,x2
001054 xxxx 001070461000 	fmp     xx
001055 xxxx 001114477012 	dfad	tp2,x2
001056 xxxx 001070461000 	fmp     xx
001057 xxxx 001112477012 	dfad	tp1,x2
001060 xxxx 001070463000 	dfmp	xx
001061 xxxx 001110477012 	dfad	tp0,x2
001062 xxxx 000660463000 	dfmp	x		" return x*p(xx)
001063 xxxx 000000471000 	frd     0
001064 xxxx 001065710013     tra     rets, x3
001065 xxxx 000702710000     return  cosine_degrees_
001066 xxxx 000737710000     return  sine_degrees_
001067 xxxx 000000011000 	even "(allocating 1 nop)
001070 xxxx 000000000000     bss     xx,2
001072 xxxx 716504072231 eps1:       dec	1.886591d-8
001073 xxxx 175750642261 
001074 xxxx 412712273406 eps2:       dec	8.418858142948452884d-38
001075 xxxx 461701757347 
001076 xxxx 704422701372 eps3:       dec	5.0d-10
001077 xxxx 023326451313 
001100 xxxx 002622077325 half_pi1A:	oct	002622077325,042055060432	" 1.570796326794896619d0
001101 xxxx 042055060432 
001102 xxxx 602611431424 half_pi2A:	oct	602611431424,270033407150	" 8.333742918520878328d-20
001103 xxxx 270033407150 
001104 xxxx 016550000000 ninety:     dec	90.0d0
001105 xxxx 000000000000 
001106 xxxx 020550000000 one_eighty: dec	180.0d0
001107 xxxx 000000000000 
001110 xxxx 000777777777 tp0:        dec	 9.999999999788d-1
001111 xxxx 776426056601 
001112 xxxx 775252525252 tp1:        dec	-1.6666666608826d-1
001113 xxxx 764246126070 
001114 xxxx 764421042055 tp2:        dec	 8.333330720556d-3
001115 xxxx 645325433621 
001116 xxxx 751137720534 tp3:        dec	-1.98408328231d-4
001117 xxxx 017765224715 
001120 xxxx 734561327223 tp4:        dec	 2.7523971068d-6
001121 xxxx 742173067177 
001122 xxxx 717145743634 tp5:        dec	-2.386834641d-8
001123 xxxx 001005375050 
001124 xxxx 000000000000 angle:  bss     temp, 2
001126 xxxx 000000000000         bss     n1,1
001127 xxxx 000000000000         bss     n2,1
001130 xxxx 000000000000         bss     t1,4
001134 xxxx 000000000000         bss     t2,6
001142 xxxx 000000000000         bss     t3,8
001152 xxxx 000000000000         bss     t4,10
001164 xxxx 000000471000 	frd     0
001165 xxxx 001326425000 	fcmg	two_pwr_54	" is the EAQ too large
001166 xxxx 001312605400 	tpnz	angle_too_big	" Yup.
001167 xxxx 001124455000 	fst     angle
001170 xxxx 001104567000 	dfdv	ninety		" EAQ = EAQ/90
001171 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/90 + 0.5
001172 xxxx 001354437000 	dufa	almost_one
001173 xxxx 001354537000 	dufs	almost_one
001174 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/90 + 0.5 in integer form
001175 xxxx 000000621006 	eax1	0,ql
001176 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001177 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/90 + 0.5) in floating point form
001200 xxxx 016550461003 	fmp     =90.0,du	" EAQ = floor(EAQ/90 + 0.5)*90
001201 xxxx 000000513000 	fneg	0           " EAQ = -floor(EAQ/90 + 0.5)*90
001202 xxxx 001124475000 	fad     angle	" EAQ = angle-floor(EAQ/90 + 0.5)*90
001203 xxxx 000000710010 	tra     0,x0		" return to caller
001204 xxxx 000000471000 	frd     0
001205 xxxx 001124455000 	fst     angle
001206 xxxx 001324425000 	fcmg	two_pwr_27      " is the EAQ too large
001207 xxxx 001237605400 	tpnz	bfp_big_angle	" Yup.
001210 xxxx 001320463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001211 xxxx 000400475003 	fad     =0.5,du             " EAQ = EAQ/half_pi + 0.5
001212 xxxx 001354437000 	dufa	almost_one
001213 xxxx 001354537000 	dufs	almost_one
001214 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001215 xxxx 000000621006 	eax1	0,ql
001216 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001217 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001220 xxxx 001126455000 	fst     n1		" n1 = EAQ
001221 xxxx 001222710000 	tra     small_angle_join
001222 xxxx 001330461012 	fmp     half_pi1B,x2
001223 xxxx 001130457000 	dfst	t1		" t1 = n1*half_pi1
001224 xxxx 001126431000 	fld     n1
001225 xxxx 001334461012 	fmp     half_pi2B,x2
001226 xxxx 001134457000 	dfst	t2		" t2 = n1*half_pi2
001227 xxxx 001126431000 	fld     n1
001230 xxxx 001340461012 	fmp     half_pi3,x2
001231 xxxx 001142457000 	dfst	t3		" t3 = n1*half_pi3
001232 xxxx 001124431000 	fld     angle		" answer = angle - t1 - t2 - t3
001233 xxxx 001130577000 	dfsb	t1
001234 xxxx 001134577000 	dfsb	t2
001235 xxxx 001142577000 	dfsb	t3
001236 xxxx 000000710010 	tra     0,x0
001237 xxxx 001326425000 	fcmg	two_pwr_54	" is the EAQ too large?
001240 xxxx 001312605400 	tpnz	angle_too_big	" Yup.
001241 xxxx 001320463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001242 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/half_pi + 0.5
001243 xxxx 001354437000 	dufa	almost_one
001244 xxxx 001354537000 	dufs	almost_one
001245 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001246 xxxx 000000621006 	eax1	0,ql
001247 xxxx 000003361003 	anx1	=3,du		" X1 = mod(AQ,4)
001250 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001251 xxxx 001126455000 	fst     n1		" n1 = EAQ
001252 xxxx 001126575000 	fsb     n1
001253 xxxx 001127455000 	fst     n2		" n2 = n - n1
001254 xxxx 001126431000 	fld     n1
001255 xxxx 001330461012 	fmp     half_pi1B,x2
001256 xxxx 001130457000 	dfst	t1		" t1 = n1*half_pi1
001257 xxxx 001126431000 	fld     n1		" calculate n1*half_pi2 + n2*half_pi1
001260 xxxx 001334461012 	fmp     half_pi2B,x2
001261 xxxx 001134457000 	dfst	t2
001262 xxxx 001127431000 	fld     n2
001263 xxxx 001330461012 	fmp     half_pi1B,x2
001264 xxxx 001134477000 	dfad	t2
001265 xxxx 001134457000 	dfst	t2		" t2 = (n1*half_pi2 + n2*half_pi1)
001266 xxxx 001126431000 	fld     n1		" calculate n1*half_pi3 + n2*half_pi2
001267 xxxx 001340461012 	fmp     half_pi3,x2
001270 xxxx 001142457000 	dfst	t3
001271 xxxx 001127431000 	fld     n2
001272 xxxx 001334461012 	fmp     half_pi2B,x2
001273 xxxx 001142477000 	dfad	t3
001274 xxxx 001142457000 	dfst	t3		" t3 = (n1*half_pi3 + n2*half_pi2)
001275 xxxx 001126431000 	fld     n1		" calculate n1*half_pi4 + n2*half_pi3
001276 xxxx 001344461012 	fmp     half_pi4,x2
001277 xxxx 001152457000 	dfst	t4
001300 xxxx 001127431000 	fld     n2
001301 xxxx 001340461012 	fmp     half_pi3,x2
001302 xxxx 001152477000 	dfad	t4
001303 xxxx 001152457000 	dfst	t4		" t4 = (n1*half_pi4 + n2*half_pi3)
001304 xxxx 001124431000 	fld     angle		" answer = angle - t1 - t2 - t3
001305 xxxx 001130577000 	dfsb	t1
001306 xxxx 001134577000 	dfsb	t2
001307 xxxx 001142577000 	dfsb	t3
001310 xxxx 001152577000 	dfsb	t4
001311 xxxx 000000710010 	tra     0,x0		" return to caller
001312 xxxx 001350236012 	ldq     code,x2		" pick the appropriate error message
001313 xxxx 001124740000 	stx0	temp		" save X0
001314 xxxx 001124220000 	ldx0	temp		" restore X0
001315 xxxx 000000621000 	eax1	0		" X1 = 0
001316 xxxx 400000431003 	fld     =0.0,du		" EAQ = 0, set indicators
001317 xxxx 000000710010 	tra     0,x0		" return to caller
001320 xxxx 000505746033 	dec	6.3661977236758134307553d-1
001321 xxxx 344710405225 
001322 xxxx 000505746033 	oct	000505746033,344710405225
001323 xxxx 344710405225 
001324 xxxx 070400000000 	oct	070400000000,000000000000
001325 xxxx 000000000000 
001326 xxxx 156400000000 	oct	156400000000,000000000000
001327 xxxx 000000000000 
001330 xxxx 002622077325 half_pi1B:	oct	002622077325,000000000000
001331 xxxx 000000000000 
001332 xxxx 002062207732 	oct	002062207732,000000000000
001333 xxxx 000000000000 
001334 xxxx 706420550604 half_pi2B:	oct	706420550604,000000000000
001335 xxxx 000000000000 
001336 xxxx 766050420550 	oct	766050420550,000000000000
001337 xxxx 000000000000 
001340 xxxx 616646114314 half_pi3: oct	616646114314,000000000000
001341 xxxx 000000000000 
001342 xxxx 752060432304 	oct	752060432304,000000000000
001343 xxxx 000000000000 
001344 xxxx 526505600670 half_pi4: oct	526505600670,000000000000
001345 xxxx 000000000000 
001346 xxxx 736061461213 	oct	736061461213,000000000000
001347 xxxx 000000000000 
001350 xxxx 000000000106 code:	dec	70,0,71
001351 xxxx 000000000000 
001352 xxxx 000000000107 
001353 xxxx 000000011000     even "(allocating 1 nop)
001354 xxxx 000777777777 	oct	000777777777,777777777777
001355 xxxx 777777777777 
001356 xxxx 002622077325 	dec	1.570796326794896619231d+00
001357 xxxx 042055060432 
001360 xxxx 776464202324 	dec	3.010299956639811952137d-01
001361 xxxx 117571775714 
001362 xxxx 776674557305 	dec	4.342944819032518276511d-01
001363 xxxx 223345034312 
001364 xxxx 002561250731 	dec	1.442695040888963407359d+00
001365 xxxx 225602774136 
001366 xxxx 000542710277 	dec	6.931471805599453094172d-01
001367 xxxx 575071736326 
001370 xxxx 376777777777 	oct	376777777777,777777777777
001371 xxxx 777777777777 
001372 xxxx 766435750650 	dec	1.745329251994329576923d-02
001373 xxxx 451235162127 
001374 xxxx 776505746033 	dec	3.183098861837906715377d-01
001375 xxxx 344710405225 
001376 xxxx 014712273406 	dec	5.729577951308232087679d+01
001377 xxxx 461701757341 
001400 xxxx 004622077325 	dec	3.141592653589793238462d+00
001401 xxxx 042055060432 
001402 xxxx 000622077325 	dec	7.853981633974483096156d-01
001403 xxxx 042055060432 
001404 xxxx 000552023631 	dec	7.071067811865475244008d-01
001405 xxxx 477473631102 
001406 xxxx 002673317272 	dec	1.732050807568877293527d+00
001407 xxxx 054114524717 
001410 xxxx 002552023631 	dec	1.414213562373095048801d+00
001411 xxxx 477473631102 
001412 xxxx 000000000000     bss     q,2
001414 xxxx 000000000000     bss     sign,2
001416 xxxx 001426710000     save    0,1,2,3,4
001417 xxxx 000000000000 
001420 xxxx 000000220003 
001421 xxxx 000001221003 
001422 xxxx 000002222003 
001423 xxxx 000003223003 
001424 xxxx 000004224003 
001425 xxxx 001417630000 
001426 xxxx 001417754000 
001427 xxxx 001417741000 
001430 xxxx 001420740000 
001431 xxxx 001421741000 
001432 xxxx 001422742000 
001433 xxxx 001423743000 
001434 xxxx 001424744000 
001435 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001436 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001437 xxxx 000001624000     eax4    1
001440 xxxx 400000475003 	fad     =0.0,du		" normalize input
001441 xxxx 000000621000 	eax1	0           " initialize X1 := shift = 1
001442 xxxx 001634425012 	fcmg	forty_five,x2
001443 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
001444 xxxx 001164700000     tsx0	principal_degrees_	"   call principal_degrees_
001445 xxxx 001626427012 	dfcmg	Teps1,x2		" if conversion to degrees underflows
001446 xxxx 001613604000 	tmi     infinity	"   return (infinity (degrees))
001447 xxxx 001372463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
001450 xxxx 000001301003 	canx1	=1,du
001451 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001452 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
001453 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, degrees*one_degree))
001454 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent
001455 xxxx 000000513000 	fneg	0           "   EAQ := -degrees*one_degree
001456 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -(degrees*one_degree)))
001457 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001460 xxxx 400000475003 	fad     =0.0,du		" normalize input
001461 xxxx 001402425012 	fcmg	quarter_pi,x2
001462 xxxx 000003605004 	tpl     3,ic		" if abs (angle) > quarter_pi:
001463 xxxx 777777623000     eax3	Cotangent	"   X3 := Cotangent
001464 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians)
001465 xxxx 001204700000 	tsx0	principal_radians_	" call principal_radians_
001466 xxxx 000001301003 	canx1	=1,du
001467 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001470 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
001471 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians))
001472 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent (???)
001473 xxxx 000000513000 	fneg	0           "   EAQ := -radians
001474 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -radians))
001475 xxxx 001505710000     save    0,1,2,3,4
001476 xxxx 000000000000 
001477 xxxx 000000220003 
001500 xxxx 000001221003 
001501 xxxx 000002222003 
001502 xxxx 000003223003 
001503 xxxx 000004224003 
001504 xxxx 001476630000 
001505 xxxx 001476754000 
001506 xxxx 001476741000 
001507 xxxx 001477740000 
001510 xxxx 001500741000 
001511 xxxx 001501742000 
001512 xxxx 001502743000 
001513 xxxx 001503744000 
001514 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001515 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001516 xxxx 000000624000     eax4    0
001517 xxxx 400000475003 	fad     =0.0,du		" normalize input
001520 xxxx 000000621000 	eax1	0		" initialize X1 := shift = 1
001521 xxxx 001634425012 	fcmg	forty_five,x2
001522 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
001523 xxxx 001164700000     tsx0	principal_degrees_	"   call principal_degrees_
001524 xxxx 001626427012 	dfcmg	Teps1,x2		" if conversion to radians underflows
001525 xxxx 000002605004 	tpl     2,ic
001526 xxxx 400000431003     fld     =0.0,du     "   then use zero
001527 xxxx 001372463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
001530 xxxx 000001301003 	canx1	=1,du
001531 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001532 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
001533 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, degrees*one_degree))
001534 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
001535 xxxx 000000513000 	fneg	0           "   EAQ := -radians
001536 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, -(degrees*one_degree)))
001537 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001540 xxxx 400000475003 	fad     =0.0,du		" normalize input
001541 xxxx 001402425012 	fcmg	quarter_pi,x2
001542 xxxx 000003605004 	tpl     3,ic		" if abs (angle) <= quarter_pi:
001543 xxxx 000001623000     eax3	Tangent
001544 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
001545 xxxx 001204700000 	tsx0	principal_radians_	" call principal_radians_
001546 xxxx 000001301003 	canx1	=1,du
001547 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001550 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
001551 xxxx 001554710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
001552 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
001553 xxxx 000000513000 	fneg	0		"   EAQ := -radians
001554 xxxx 001630425000     fcmg	Teps2		" if abs(x) < 5e-10:
001555 xxxx 001566605000     tpl     use_polynomial
001556 xxxx 000001103003     cmpx3	Tangent,du	"   if function = Tangent
001557 xxxx 000003601004     tnz     3,ic
001560 xxxx 000000471000 	frd     0		"     then return (result)
001561 xxxx 001623710014     tra     TanRets,x4
001562 xxxx 001632427012 	dfcmg	Teps3,x2		"   else if (1/result) overflows
001563 xxxx 001613604400     tmoz	infinity		"     then return (infinity (result))
001564 xxxx 001636525012 	fdi     one,x2    	"     else return (1/result)
001565 xxxx 001623710014     tra     TanRets,x4
001566 xxxx 000660472000 	dfstr	x
001567 xxxx 000660463000 	dfmp	x		" calculate xx = x*x
001570 xxxx 001070472000 	dfstr	xx
001571 xxxx 001650477012 	dfad	q1,x2		" calculate q = q(xx)
001572 xxxx 001070463000 	dfmp	xx
001573 xxxx 001646477012 	dfad	q0,x2
001574 xxxx 001412472000 	dfstr	q
001575 xxxx 001070433000 	dfld	xx		" calculate p(xx)
001576 xxxx 001644463012 	dfmp	Tp2,x2
001577 xxxx 001642477012 	dfad	Tp1,x2
001600 xxxx 001070463000 	dfmp	xx
001601 xxxx 001640477012 	dfad	Tp0,x2
001602 xxxx 000660463000 	dfmp	x		" calculate p = x*p(xx)
001603 xxxx 000001103003 	cmpx3	Tangent,du
001604 xxxx 000004601004 	tnz     4,ic		" if function = Tangent
001605 xxxx 001412567000     dfdv	q		" then return (p/q)
001606 xxxx 000000471000 	frd     0
001607 xxxx 001623710014     tra     TanRets,x4
001610 xxxx 001412527000 	dfdi	q		" else return (q/p)
001611 xxxx 000000471000 	frd     0
001612 xxxx 001623710014     tra     TanRets,x4
001613 xxxx 001414455000 	fst     sign
001614 xxxx 001370431000 	fld     max_value
001615 xxxx 001370475000 	fad     max_value		" signal overflow
001616 xxxx 001370431000 	fld     max_value
001617 xxxx 001414430000 	fszn	sign		" if sign >= 0
001620 xxxx 001623710014     tra     TanRets,x4
001621 xxxx 000000513000 	fneg	0		" else return (-max_value)
001622 xxxx 001623710014     tra     TanRets,x4
001623 xxxx 001477710000     return  tangent_degrees_
001624 xxxx 001420710000     return  cotangent_degrees_
001625 xxxx 000000011000 	even "(allocating 1 nop)
001626 xxxx 412712273406 Teps1:	dec	8.418858142948452884d-38
001627 xxxx 461701757347 
001630 xxxx 704422701372 Teps2:	dec	5.0d-10
001631 xxxx 023326451313 
001632 xxxx 404400000000 Teps3:	oct	404400000000,000000000001
001633 xxxx 000000000001 
001634 xxxx 014550000000 	dec	45.0d0
001635 xxxx 000000000000 
001636 xxxx 002400000000 one:	dec  1.d0
001637 xxxx 000000000000 
001640 xxxx 014764652342 Tp0:	dec	 6.26041119547433196d1
001641 xxxx 460137304603 
001642 xxxx 007101637667 Tp1:	dec	-6.97168400629442048d0
001643 xxxx 425655210475 
001644 xxxx 772423545326 Tp2:	dec	 6.73091025875915d-2
001645 xxxx 453071362122 
001646 xxxx 014764652342 q0:     dec	 6.260411195336057284d1
001647 xxxx 456547154111 
001650 xxxx 013102441001 q1:     dec	-2.78397212200427089d1
001651 xxxx 733050625573 
001652 xxxx 000000000000     bss xe, 2
001654 xxxx 000000000000     bss xm, 2
001656 xxxx 000000000000     bss bias, 2
001660 xxxx 000000000000     bss shift, 2
001662 xxxx 000000000000     bss	x_plus_y,2
001664 xxxx 000000000000 	bss	z,2
001666 xxxx 000000000000 	bss	zz,2
001670 xxxx 001676710000     save    0,1,3
001671 xxxx 000000000000 
001672 xxxx 000000220003 
001673 xxxx 000001221003 
001674 xxxx 000002223003 
001675 xxxx 001671630000 
001676 xxxx 001671754000 
001677 xxxx 001671741000 
001700 xxxx 001672740000 
001701 xxxx 001673741000 
001702 xxxx 001674743000 
001703 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001704 xxxx 001757700000 	tsx0	log2		" calculate log2 (x)
001705 xxxx 001360463000 	dfmp	log_10_of_2	" EAQ := log_10_of_2 * log2 (x)
001706 xxxx 000000471000 	frd     0
001707 xxxx 001672710000     return  log_base_10_
001710 xxxx 001716710000     save    0,1,3
001711 xxxx 000000000000 
001712 xxxx 000000220003 
001713 xxxx 000001221003 
001714 xxxx 000002223003 
001715 xxxx 001711630000 
001716 xxxx 001711754000 
001717 xxxx 001711741000 
001720 xxxx 001712740000 
001721 xxxx 001713741000 
001722 xxxx 001714743000 
001723 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001724 xxxx 001757700000 	tsx0	log2		" calculate log2 (x)
001725 xxxx 000000471000 	frd     0
001726 xxxx 001712710000     return  log_base_2_
001727 xxxx 001735710000     save    0,1,3
001730 xxxx 000000000000 
001731 xxxx 000000220003 
001732 xxxx 000001221003 
001733 xxxx 000002223003 
001734 xxxx 001730630000 
001735 xxxx 001730754000 
001736 xxxx 001730741000 
001737 xxxx 001731740000 
001740 xxxx 001732741000 
001741 xxxx 001733743000 
001742 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001743 xxxx 001757700000 	tsx0	log2		" calculate log2 (x)
001744 xxxx 001366463000 	dfmp	log_e_of_2	" EAQ := log_e_of_2 * log2 (x)
001745 xxxx 000000471000 	frd     0
001746 xxxx 001731710000     return  log_base_e_
001747 xxxx 000012236007 	ldq     10,dl
001750 xxxx 001370431000 	fld     max_value
001751 xxxx 000000513000 	fneg	0
001752 xxxx 300000710100 	tra     pr3|0
001753 xxxx 000011236007 	ldq     9,dl
001754 xxxx 001370431000 	fld     max_value
001755 xxxx 000000513000 	fneg	0
001756 xxxx 300000710100 	tra     pr3|0
001757 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
001760 xxxx 001747604000 	tmi     log_of_negative
001761 xxxx 001753600000 	tze     log_of_zero
001762 xxxx 002050515000 	fcmp	Lsquare_root_two	" check for x in the range [.707,1.414]
001763 xxxx 000006605004 	tpl     6,ic
001764 xxxx 002046515000     fcmp	Lsquare_root_half
001765 xxxx 000004604004     tmi     4,ic		" if square_root_half >= x & x <= square_root_two
001766 xxxx 002034623000     eax3	Lone		"   X3 := addr (1.0)
001767 xxxx 000000621010 	eax1	0,x0		"   copy return address
001770 xxxx 002006710000 	tra     part_log2_of_ratio	"   result = part_log2_of_ratio (x, 1)
001771 xxxx 001652456000 	ste     xe          "   store addr (x) -> expon in xe
001772 xxxx 000000411003 	lde     =0,du		"   addr (xm) -> expon = 0
001773 xxxx 001654455000 	fst     xm
001774 xxxx 001652235000 	lda     xe          "   A := 8/xe,10/0,18/garbage
001775 xxxx 000066733000 	lrs     72-18		"   AQ := 62/xe,10/0
001776 xxxx 172000411003 	lde     =61b25,du		"   EAQ := unnormalized float(xe)
001777 xxxx 000400575003 	fsb     =0.5,du		"   EAQ := float(xe) - 0.5
002000 xxxx 001656455000 	fst     bias
002001 xxxx 001654431000 	fld     xm
002002 xxxx 002046623000 	eax3	Lsquare_root_half	"   X3 := addr (square_root_half)
002003 xxxx 002006701000 	tsx1	part_log2_of_ratio	"   EAQ := part_log2_of_ratio (x, square_root_half)
002004 xxxx 001656475000     fad     bias            "   EAQ := part_log2_of_ratio (x, square_root_half) + bias  (= log2(x))
002005 xxxx 000000710010 	tra     0,x0		"   return result
002006 xxxx 000000477013 	dfad	0,x3		" EAQ := x + y
002007 xxxx 001662457000 	dfst	x_plus_y
002010 xxxx 000000577013 	dfsb	0,x3		" EAQ := x
002011 xxxx 000000577013 	dfsb	0,x3		" EAQ := x - y
002012 xxxx 001662567000 	dfdv	x_plus_y	" calculate z = (x - y) / (x + y)
002013 xxxx 002032425000 	fcmg	Leps
002014 xxxx 000003605404 	tpnz	3,ic		" if abs(z) < 4.1968417d-11
002015 xxxx 002036463000     dfmp	Lp0         "   EAQ := z * p0
002016 xxxx 000000710011 	tra     0,x1		"   return to caller
002017 xxxx 001664457000 	dfst	z
002020 xxxx 001664461000 	fmp     z           " calculate zz = z*z
002021 xxxx 001666455000 	fst     zz          " calculate p(zz)
002022 xxxx 002044461000 	fmp     Lp3
002023 xxxx 002042477000 	dfad	Lp2
002024 xxxx 001666461000 	fmp     zz
002025 xxxx 002040477000 	dfad	Lp1
002026 xxxx 001666461000 	fmp     zz
002027 xxxx 002036477000 	dfad	Lp0
002030 xxxx 001664463000 	dfmp	z           " calculate z*p(zz)
002031 xxxx 000000710011 	tra     0,x1		" return to caller
002032 xxxx 674561120744 Leps:	dec     4.1968417d-11
002033 xxxx 744762611260 
002034 xxxx 002400000000 Lone:	dec     1.0d0
002035 xxxx 000000000000 
002036 xxxx 004561250730 Lp0:    dec     .288539007275213810d01
002037 xxxx 772543241373 
002040 xxxx 000754342230 Lp1:    dec     .961800759210250522d00
002041 xxxx 541156441462 
002042 xxxx 000447154133 Lp2:    dec     .576584541348266310d00
002043 xxxx 107411741772 
002044 xxxx 776674533133 Lp3:    dec     .434255940790007142d0
002045 xxxx 371132642555 
002046 xxxx 000552023631         dec     7.071067811865475244008d-01
002047 xxxx 477473631102 
002050 xxxx 002552023631         dec     1.414213562373095048801d+00
002051 xxxx 477473631102 
002052 xxxx 000000000000     bss iy, 2
002054 xxxx 002061710000     save    0, 1
002055 xxxx 000000000000 
002056 xxxx 000000220003 
002057 xxxx 000001221003 
002060 xxxx 002055630000 
002061 xxxx 002055754000 
002062 xxxx 002055741000 
002063 xxxx 002056740000 
002064 xxxx 002057741000 
002065 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002066 xxxx 002162515000 	fcmp	lb          " if x <= -89.415987: 
002067 xxxx 002072605400     tpnz    e3
002070 xxxx 400000431003     fld     =0.0,du     "    result = 0
002071 xxxx 002056710000     return  exponential_
002072 xxxx 002160515000 e3:	fcmp	ub          " if x >= 88.0296926 goto overflow_error
002073 xxxx 002131605000 	tpl     overflow_error
002074 xxxx 001364463000 	dfmp	log_2_of_e	" y = x*log_2_of_e
002075 xxxx 002400475003 	fad     =1.0,du		" EAQ := y + 1
002076 xxxx 016000435003 	ufa     =7b25,du	" AQ := 8/floor(y+1),64/fraction part of y
002077 xxxx 002052755000 	sta     iy
002100 xxxx 776000275003 	ora     =o776000,du	" AQ := 8/-1,64/fraction part of y
002101 xxxx 016000411003 	lde     =7b25,du	" EAQ := ry = unnormalized y - floor(y+1)
002102 xxxx 400000475003 	fad     =0.0,du		" EAQ := ry = normalized y - floor(y+1)
002103 xxxx 002136425000 	fcmg	Eeps
002104 xxxx 002107605000     tpl     pe2
002105 xxxx 002400431003     fld     =1.0,du     "    result = 1.0
002106 xxxx 002056710000     return  exponential_
002107 xxxx 000000471000 pe2:frd     0
002110 xxxx 001664455000 	fst     z
002111 xxxx 002156461000 	fmp     Ep7		" result = p(z)
002112 xxxx 002154477000 	dfad	Ep6
002113 xxxx 001664461000 	fmp     z
002114 xxxx 002152477000 	dfad	Ep5
002115 xxxx 001664461000 	fmp     z
002116 xxxx 002150477000 	dfad	Ep4
002117 xxxx 001664461000 	fmp     z
002120 xxxx 002146477000 	dfad	Ep3
002121 xxxx 001664461000 	fmp     z
002122 xxxx 002144477000 	dfad	Ep2
002123 xxxx 001664461000 	fmp     z
002124 xxxx 002142477000 	dfad	Ep1
002125 xxxx 001664461000 	fmp     z
002126 xxxx 002140477000 	dfad	Ep0
002127 xxxx 002052415000 	ade     iy		" addr (result) -> expon = addr (result) -> expon + iy
002130 xxxx 002056710000     return  exponential_
002131 xxxx 001370431000 	fld     max_value
002132 xxxx 001370475000 	fad     max_value		" cause an overflow
002133 xxxx 001370431000 	fld     max_value
002134 xxxx 002056710000     return  exponential_
002135 xxxx 000000011000 	even "(allocating 1 nop)
002136 xxxx 604561250730 Eeps:	dec	1.56417309d-19
002137 xxxx 645767466564 
002140 xxxx 000777777777 Ep0:	dec	0.999999999959788989221d00
002141 xxxx 775171146647 
002142 xxxx 000542710277 Ep1:	dec	0.693147175773076184335d00
002143 xxxx 064122746305 
002144 xxxx 774753767514 Ep2:	dec	0.240226411617528907564d00
002145 xxxx 542060151212 
002146 xxxx 770706536015 Ep3:	dec	0.555033746338694398430d-01
002147 xxxx 336576334575 
002150 xxxx 764473046222 Ep4:	dec	0.961531912935043645900d-02
002151 xxxx 315773407052 
002152 xxxx 756533765571 Ep5:	dec	0.132743818109838796600d-02
002153 xxxx 150540215277 
002154 xxxx 750464227646 Ep6:	dec	0.147007243118869978000d-03
002155 xxxx 455135010071 
002156 xxxx 740550540762 Ep7:	dec	0.107493818486964670000d-04
002157 xxxx 530201244720 
002160 xxxx 016540074637 ub:	dec	8.802969265d01		" 2**127 - 2**100 = e**88.0296926
002161 xxxx 000053475651 
002162 xxxx 017232254036 lb:	dec	-8.9415987d01		" 2**(-129) = e**-89.415987
002163 xxxx 007734054130 
002164 xxxx 000000000000     bss     arctan_z,2
002166 xxxx 000000000000 	bss     y,2
002170 xxxx 000000000000 	bss     indicators,2
002172 xxxx 002202710000     save    0,1,2,3,4    
002173 xxxx 000000000000 
002174 xxxx 000000220003 
002175 xxxx 000001221003 
002176 xxxx 000002222003 
002177 xxxx 000003223003 
002200 xxxx 000004224003 
002201 xxxx 002173630000 
002202 xxxx 002173754000 
002203 xxxx 002173741000 
002204 xxxx 002174740000 
002205 xxxx 002175741000 
002206 xxxx 002176742000 
002207 xxxx 002177743000 
002210 xxxx 002200744000 
002211 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002212 xxxx 000000622000 	eax2        BFP		" no offset for BFP constants
002213 xxxx 002320700000 	tsx0        arctan		" EAQ := arctan (x)
002214 xxxx 001376463000 	dfmp        one_radian	" convert radians to degrees
002215 xxxx 000000471000 	frd         0
002216 xxxx 002174710000     return  arc_tangent_degrees_
002217 xxxx 002227710000     save    0,1,2,3,4    
002220 xxxx 000000000000 
002221 xxxx 000000220003 
002222 xxxx 000001221003 
002223 xxxx 000002222003 
002224 xxxx 000003223003 
002225 xxxx 000004224003 
002226 xxxx 002220630000 
002227 xxxx 002220754000 
002230 xxxx 002220741000 
002231 xxxx 002221740000 
002232 xxxx 002222741000 
002233 xxxx 002223742000 
002234 xxxx 002224743000 
002235 xxxx 002225744000 
002236 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002237 xxxx 002166470000     fstr    y
002240 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002241 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002242 xxxx 002430701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002243 xxxx 001376463000 	dfmp      one_radian	" convert radians to degrees
002244 xxxx 000000471000 	frd       0
002245 xxxx 002221710000     return  arc_tangent_degrees_2_
002246 xxxx 002256710000     save    0,1,2,3,4    
002247 xxxx 000000000000 
002250 xxxx 000000220003 
002251 xxxx 000001221003 
002252 xxxx 000002222003 
002253 xxxx 000003223003 
002254 xxxx 000004224003 
002255 xxxx 002247630000 
002256 xxxx 002247754000 
002257 xxxx 002247741000 
002260 xxxx 002250740000 
002261 xxxx 002251741000 
002262 xxxx 002252742000 
002263 xxxx 002253743000 
002264 xxxx 002254744000 
002265 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002266 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002267 xxxx 002320700000 	tsx0      arctan		" EAQ := arctan (x)
002270 xxxx 000000471000 	frd     0
002271 xxxx 002250710000     return  arc_tangent_radians_
002272 xxxx 002302710000     save    0,1,2,3,4    
002273 xxxx 000000000000 
002274 xxxx 000000220003 
002275 xxxx 000001221003 
002276 xxxx 000002222003 
002277 xxxx 000003223003 
002300 xxxx 000004224003 
002301 xxxx 002273630000 
002302 xxxx 002273754000 
002303 xxxx 002273741000 
002304 xxxx 002274740000 
002305 xxxx 002275741000 
002306 xxxx 002276742000 
002307 xxxx 002277743000 
002310 xxxx 002300744000 
002311 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002312 xxxx 002166470000     fstr    y
002313 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002314 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002315 xxxx 002430701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002316 xxxx 000000471000 	frd	0
002317 xxxx 002274710000     return  arc_tangent_radians_2_
002320 xxxx 400000475003 	fad     =0.0,du		" normalize input
002321 xxxx 002164455000 	fst     arctan_z	" store argument z
002322 xxxx 000000624012 	eax4	0,x2		" initialize the table index with BFP or HFP offset
002323 xxxx 002530425012 	fcmg	tan_7_pi_by_32,x2
002324 xxxx 002360604000 	tmi     range_0_to_3
002325 xxxx 002544425012 	fcmg	tan_13_pi_by_32,x2
002326 xxxx 002346604000 	tmi     range_4_to_6
002327 xxxx 002550425012 	fcmg	tan_15_pi_by_32,x2
002330 xxxx 002344604000 	tmi     range_7
002331 xxxx 002500425012 	fcmg	ATeps1,x2
002332 xxxx 000003604004 	tmi     3,ic		" if abs (z) < 1e71b:
002333 xxxx 001356431012     fld     half_pi,x2      "   EAQ := radians = half_pi
002334 xxxx 002407710000 	tra     set_to_quadrant_1_or_4
002335 xxxx 400000515003 	fcmp	=0.0,du
002336 xxxx 000002605004 	tpl     2,ic
002337 xxxx 000000513000     fneg	0		"   EAQ := abs (z)
002340 xxxx 003400525003 	fdi     =-1.0,du		"   EAQ := -1/abs_z
002341 xxxx 002413703000 	tsx3	part_arctan	"   calculate part_arctan (-1/abs_z)
002342 xxxx 001356475012 	fad     half_pi,x2	"   EAQ := radians = half_pi - part_arctan (1/abs_z)
002343 xxxx 002407710000 	tra     set_to_quadrant_1_or_4
002344 xxxx 000030064003 	adx4	=24,du		" range = 7, tan_13_pi_by_32 <= abs (z) < tan_15_pi_by_32
002345 xxxx 002377710000 	tra     calculate_for_range_1_to_7
002346 xxxx 002540425012 	fcmg	tan_11_pi_by_32,x2
002347 xxxx 002352604000 	tmi     range_4_to_5
002350 xxxx 000024064003 	adx4	=20,du		" range = 6, tan_11_pi_by_32 <= abs (z) < tan_13_pi_by_32
002351 xxxx 002377710000 	tra     calculate_for_range_1_to_7
002352 xxxx 002534425012 	fcmg	tan_9_pi_by_32,x2
002353 xxxx 002356604000 	tmi     range_4
002354 xxxx 000020064003 	adx4	=16,du		" range = 5, tan_9_pi_by_32 <= abs (z) < tan_11_pi_by_32
002355 xxxx 002377710000 	tra     calculate_for_range_1_to_7
002356 xxxx 000014064003 	adx4	=12,du		" range = 4, tan_7_pi_by_32 <= abs (z) < tan_9_pi_by_32
002357 xxxx 002377710000 	tra     calculate_for_range_1_to_7
002360 xxxx 002520425012 	fcmg	tan_3_pi_by_32,x2
002361 xxxx 002370604000 	tmi     range_0_to_1
002362 xxxx 002524425012 	fcmg	tan_5_pi_by_32,x2
002363 xxxx 002366604000 	tmi     range_2
002364 xxxx 000010064003 	adx4	=8,du		" range = 3, tan_5_pi_by_32 <= abs (z) < tan_7_pi_by_32
002365 xxxx 002377710000 	tra     calculate_for_range_1_to_7
002366 xxxx 000004064003 	adx4	=4,du		" range = 2, tan_3_pi_by_32 <= abs (z) < tan_5_pi_by_32
002367 xxxx 002377710000 	tra     calculate_for_range_1_to_7
002370 xxxx 002514425012 	fcmg	tan_pi_by_32,x2
002371 xxxx 002377605000 	tpl	calculate_for_range_1_to_7
002372 xxxx 400000515003 	fcmp	=0.0,du
002373 xxxx 000002605004 	tpl     2,ic
002374 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002375 xxxx 002413703000 	tsx3	part_arctan	" EAQ := part_arctan (abs_z)
002376 xxxx 002407710000 	tra     set_to_quadrant_1_or_4
002377 xxxx 400000515003 	fcmp	=0.0,du
002400 xxxx 000002605004 	tpl     2,ic
002401 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002402 xxxx 002554477014 	dfad	one_over_u,x4	" EAQ := t = 1/u(range) - (1/(u(range)**2)+1) / (1/u(range) + abs_z)
002403 xxxx 002610527014 	dfdi	one_plus_one_over_u_squared,x4
002404 xxxx 002554477014 	dfad	one_over_u,x4
002405 xxxx 002413703000 	tsx3	part_arctan	" EAQ := part_arctan (t)
002406 xxxx 002644477014 	dfad	arctan_of_u,x4	" EAQ := radians = part_arctan (t) + arctan(u(range))
002407 xxxx 002164430000 	fszn	arctan_z	" set indicators
002410 xxxx 000000605010 	tpl     0,x0		" if z >= 0 then return (radians)
002411 xxxx 000000513000     fneg	0		" else return (-radians)
002412 xxxx 000000710010 	tra     0,x0
002413 xxxx 002504425012 	fcmg	ATeps2,x2		" if abs (z) < 5.7031627e10
002414 xxxx 000000604013 	tmi     0,x3		" then return (z)
002415 xxxx 001664472000 	dfstr	z
002416 xxxx 001664463000 	dfmp	z		" calculate zz = z*z
002417 xxxx 001666470000 	fstr	zz
002420 xxxx 002714461012 	fmp     ATp3,x2		" calculate p(zz)
002421 xxxx 002710477012 	dfad	ATp2,x2
002422 xxxx 001666461000 	fmp     zz
002423 xxxx 002704477012 	dfad	ATp1,x2
002424 xxxx 001666461000 	fmp     zz
002425 xxxx 002700477012 	dfad	ATp0,x2
002426 xxxx 001664461000 	fmp     z		" calculate z*p(zz)
002427 xxxx 000000710013 	tra     0,x3		" return
002430 xxxx 400000475003 	fad     =0.0,du		" normalize x
002431 xxxx 000660455000 	fst     x		" save normalized x for quadrant check
002432 xxxx 002166431000 	fld     y   	" load y
002433 xxxx 400000475003 	fad     =0.0,du		" normalize y
002434 xxxx 002166455000 	fst     y		" save normalized y for quadrant check
002435 xxxx 002445601000 	tnz     y_not_zero
002436 xxxx 000660430000 	fszn	x		" test if x = 0 also
002437 xxxx 002467600000 	tze     arctan2_domain_err	" 0/0 is error
002440 xxxx 001356433012 	dfld	half_pi,x2	" atan(x/0) =  + or - (half_pi)
002441 xxxx 000660430000 	fszn	x
002442 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
002443 xxxx 000000513000     fneg	0		" else return (-radians)
002444 xxxx 000000710011 	tra     0,x1
002445 xxxx 002170754000 	sti     indicators	" save indicators
002446 xxxx 002510634012 	ldi     no_overflow,x2
002447 xxxx 000660525000 	fdi     x		" EAQ := x/y
002450 xxxx 002475614000 	teo     quotient_too_large	" if overflow, atan(x,y) = pi/2 or -pi/2
002451 xxxx 002472615000 	teu     quotient_too_small	" if underflow, atan(x,y) = 0
002452 xxxx 002170634000 	ldi     indicators	" restore previous indicators
002453 xxxx 400000475003 	fad     =0.0,du		" set indicators
002454 xxxx 000002605004 	tpl     2,ic		" calculate z = abs (x,y)
002455 xxxx 000000513000     fneg	0
002456 xxxx 002320700000 	tsx0	arctan		" EAQ := arctan(z)
002457 xxxx 002166430000 	fszn	y		" set the quadrant
002460 xxxx 000003605004 	tpl     3,ic		" if y < 0 then
002461 xxxx 000000513000     fneg	0		"   radians = pi-radians
002462 xxxx 001400477012 	dfad	pi,x2
002463 xxxx 000660430000 	fszn	x
002464 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
002465 xxxx 000000513000     fneg	0		" else return (-radians)
002466 xxxx 000000710011 	tra     0,x1
002467 xxxx 000013236007 	ldq     11,dl
002470 xxxx 400000431003 	fld     =0.0,du
002471 xxxx 300000710100 	tra     pr3|0		" return to caller
002472 xxxx 002170634000 	ldi     indicators	" restore indicators
002473 xxxx 400000431003 	fld     =0.0,du		" radians = 0.0
002474 xxxx 002457710000 	tra     set_quadrant
002475 xxxx 002170634000 	ldi     indicators	" restore indicators
002476 xxxx 001356433012 	dfld	half_pi,x2	" radians = half_pi
002477 xxxx 002457710000 	tra     set_quadrant
002500 xxxx 220400000000 ATeps1:	oct	220400000000,000000000000	" 2**71 = 2.36e21
002501 xxxx 000000000000 
002502 xxxx 044400000000 	oct	044400000000,000000000000
002503 xxxx 000000000000 
002504 xxxx 704471421604 ATeps2:	dec	5.7031627d-10
002505 xxxx 407031702277 
002506 xxxx 762116304341 	oct	762116304341,000000000000
002507 xxxx 000000000000 
002510 xxxx 000000004000 	oct	000000004000,000000000000	" bit 25 is the overflow mask
002511 xxxx 000000000000 
002512 xxxx 000000004010 	oct	000000004010,000000000000	" bit 33 is the hex indicator
002513 xxxx 000000000000 
002514 xxxx 772623327342 	dec	.98491403d-1		" tan(pi/32)
002515 xxxx 551170653204 
002516 xxxx 000062332734 	oct	000062332734,000000000000
002517 xxxx 000000000000 
002520 xxxx 776466501014 	dec	.30334668d00		" tan(3*pi/32)
002521 xxxx 276317550567 
002522 xxxx 000233240406 	oct	000233240406,000000000000
002523 xxxx 000000000000 
002524 xxxx 000421526706 	dec	.53451114d00		" tan(5*pi/32)
002525 xxxx 632271614047 
002526 xxxx 000421526707 	oct	000421526707,000000000000
002527 xxxx 000000000000 
002530 xxxx 000644140012 	dec	.82067879d00		" tan(7*pi/32)
002531 xxxx 471104326120 
002532 xxxx 000644140013 	oct	000644140013,000000000000
002533 xxxx 000000000000 
002534 xxxx 002467737541 	dec	1.2185035d00		" tan(9*pi/32)
002535 xxxx 524374032261 
002536 xxxx 002046773754 	oct	002046773754,000000000000
002537 xxxx 000000000000 
002540 xxxx 002736742355 	dec	1.8708684d00		" tan(11*pi/32)
002541 xxxx 010752710074 
002542 xxxx 002073674236 	oct	002073674236,000000000000
002543 xxxx 000000000000 
002544 xxxx 004645753171 	dec	3.2965582d00		" tan(13*pi/32)
002545 xxxx 751342441016 
002546 xxxx 002151372636 	oct	002151372636,000000000000
002547 xxxx 000000000000 
002550 xxxx 010504715423 	dec	10.153170d00		" tan(15*pi/32)
002551 xxxx 054564714557 
002552 xxxx 002504715423 	oct	002504715423,000000000000
002553 xxxx 000000000000 
002554 xxxx 006501577670 	dec	5.0273394921258481045d0	" 1/tan(pi/16)
002555 xxxx 441107342042 
002556 xxxx 002240677734 	oct	002240677734,220443561021
002557 xxxx 220443561021 
002560 xxxx 004465011714 	dec	2.4142135623730950488d0	" 1/tan(2*pi/16)
002561 xxxx 637635714441 
002562 xxxx 002115202363 	oct	002115202363,147747363110
002563 xxxx 147747363110 
002564 xxxx 002577103070 	dec	1.4966057626654890176d0	" 1/tan(3*pi/16)
002565 xxxx 455164302501 
002566 xxxx 002057710307 	oct	002057710307,045516430250
002567 xxxx 045516430250 
002570 xxxx 002400000000 	dec	1.0d0			" 1/tan(4*pi/16)
002571 xxxx 000000000000 
002572 xxxx 002040000000 	oct	002040000000,000000000000
002573 xxxx 000000000000 
002574 xxxx 000526067012 	dec	.66817863791929891999d0	" 1/tan(5*pi/16)
002575 xxxx 533771440572 
002576 xxxx 000526067012 	oct	000526067012,533771440572
002577 xxxx 533771440572 
002600 xxxx 776650117146 	dec	.41421356237309504880d0	" 1/tan(6*pi/16)
002601 xxxx 376357144410 
002602 xxxx 000324047463 	oct	000324047463,177167462204
002603 xxxx 177167462204 
002604 xxxx 774627276570 	dec	.19891236737965800691d0	" 1/tan(7*pi/16)
002605 xxxx 052461260037 
002606 xxxx 000145657536 	oct	000145657536,012514254010
002607 xxxx 012514254010 
002610 xxxx 013133472163 	dec	-.26274142369088180356d02
002611 xxxx 441121370576 
002612 xxxx 005713347216 	oct	005713347216,344112137060
002613 xxxx 344112137060 
002614 xxxx 007112766063 	dec	-.68284271247461900976d01
002615 xxxx 140142063337 
002616 xxxx 003445373031 	oct	003445373031,460061031557
002617 xxxx 460061031557 
002620 xxxx 005141232450 	dec	-.32398288088435500410d01
002621 xxxx 425406626076 
002622 xxxx 003630246512 	oct	003630246512,105301545417
002623 xxxx 105301545417 
002624 xxxx 005400000000 	dec	-.20d1
002625 xxxx 000000000000 
002626 xxxx 003700000000 	oct	003700000000,000000000000
002627 xxxx 000000000000 
002630 xxxx 003215551173 	dec	-.14464626921716895685d01
002631 xxxx 721720634630 
002632 xxxx 003721555117 	oct	003721555117,372172063463
002633 xxxx 372172063463 
002634 xxxx 003324047463 	dec	-.11715728752538099024d01
002635 xxxx 177167462205 
002636 xxxx 003732404746 	oct	003732404746,317716746221
002637 xxxx 317716746221 
002640 xxxx 003365675771 	dec	-.10395661298965800348d01
002641 xxxx 760411653016 
002642 xxxx 003736567577 	oct	003736567577,176041165302
002643 xxxx 176041165302 
002644 xxxx 774622077325 	dec	.19634954084936207740d00	" pi/16
002645 xxxx 042055060432 
002646 xxxx 000144417665 	oct	000144417665,210413214107
002647 xxxx 210413214107 
002650 xxxx 776622077325 	dec	.39269908169872415481d00	" 2*pi/16
002651 xxxx 042055060432 
002652 xxxx 000311037552 	oct	000311037552,421026430215
002653 xxxx 421026430215 
002654 xxxx 000455457437 	dec	.58904862254808623221d00	" 3*pi/16
002655 xxxx 631441644324 
002656 xxxx 000455457437 	oct	000455457437,631441644324
002657 xxxx 631441644324 
002660 xxxx 000622077325 	dec	.78539816339744830962d00	" 4*pi/16
002661 xxxx 042055060432 
002662 xxxx 000622077325 	oct	000622077325,042055060432
002663 xxxx 042055060432 
002664 xxxx 000766517212 	dec	.98174770424681038702d00	" 5*pi/16
002665 xxxx 252470274541 
002666 xxxx 000766517212 	oct	000766517212,252470274541
002667 xxxx 252470274541 
002670 xxxx 002455457437 	dec	1.17809724509617246442d00	" 6*pi/16
002671 xxxx 631441644324 
002672 xxxx 002045545743 	oct	002045545743,763144164432
002673 xxxx 763144164432 
002674 xxxx 002537667372 	dec	1.37444678594553454182d00	" 7*pi/16
002675 xxxx 335647352367 
002676 xxxx 002053766737 	oct	002053766737,233564735237
002677 xxxx 233564735237 
002700 xxxx 000777777777 ATp0:	dec	.9999999999924517d00
002701 xxxx 777366325725 
002702 xxxx 000777777777 	oct	000777777777,777366325725
002703 xxxx 777366325725 
002704 xxxx 777252525261 ATp1:	dec	-.33333330840148d00
002705 xxxx 267741700306 
002706 xxxx 001525252530 	oct	001525252530,533760740143
002707 xxxx 533760740143 
002710 xxxx 774631445545 ATp2:	dec	.199987124164d00
002711 xxxx 571746370206 
002712 xxxx 000146311331 	oct	000146311331,336371476042
002713 xxxx 336371476042 
002714 xxxx 775337626574 ATp3:	dec	-.14072538d00
002715 xxxx 713546710627 
002716 xxxx 001667745537 	oct	001667745537,162731562146
002717 xxxx 162731562146 
002720 xxxx 002723710000 crlf:	save
002721 xxxx 000000000000 
002722 xxxx 002721630000 
002723 xxxx 002721754000 
002724 xxxx 002721741000 
002725 xxxx 002734755000         sta     saveA
002726 xxxx 003511235000         lda     =012
002727 xxxx 000001420400         emCall  1
002730 xxxx 003512235000         lda     =015
002731 xxxx 000001420400         emcall  1
002732 xxxx 002734235000         lda     saveA
002733 xxxx 002722710000         return  crlf
002734 xxxx 000000000000 saveA:  bss     1
002735 xxxx 002744710000 ioa:    save    2, 4, 5, 6
002736 xxxx 000000000000 
002737 xxxx 000000222003 
002740 xxxx 000001224003 
002741 xxxx 000002225003 
002742 xxxx 000003226003 
002743 xxxx 002736630000 
002744 xxxx 002736754000 
002745 xxxx 002736741000 
002746 xxxx 002737742000 
002747 xxxx 002740744000 
002750 xxxx 002741745000 
002751 xxxx 002742746000 
002752 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
002753 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
002754 xxxx 000000626015         eax6    0, x5
002755 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
002756 xxxx 002773755000         sta     i29
002757 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
002760 xxxx 000033731000         ars     27      " determine word count
002761 xxxx 000006735000     	als     6       " count to upper word of tally
002762 xxxx 002773255000     	orsa    i29
002763 xxxx 000000626014     	eax6    0, x4   " address of string into X6
002764 xxxx 002773746000     	stx6    i29     " address to upper word of tally
002765 xxxx 002773235052 inext:  lda     i29, sc
002766 xxxx 000136115007         cmpa    =o000136,dl		" ^
002767 xxxx 002774600000         tze     iernot      " if so, go process it
002770 xxxx 000001420400 out1:  	emCall  1
002771 xxxx 002765607000     	ttf     inext
002772 xxxx 002737710000         return  ioa
002773 xxxx 000000000041 i29:	tallyb  0, 0, 1
002774 xxxx 002773235052 iernot: lda     i29, sc         " get next char ...
002775 xxxx 000136115007         cmpa    =o000136,dl     " is it another "^"?
002776 xxxx 003014600000         tze     i21             " No, just print it ...
002777 xxxx 000167115007         cmpa    =o000167,dl     " is it a "w"?
003000 xxxx 003016600000         tze     idoW            " do full word octal
003001 xxxx 000157115007         cmpa    =o000157,dl     " is it an "o"?
003002 xxxx 003044600000         tze     idoO            " print zero suppressed octal
003003 xxxx 000156115007         cmpa    =o000156,dl     " is it a "n"?
003004 xxxx 003067600000         tze     idoN            " octal w/ no spaces inserted
003005 xxxx 000144115007         cmpa    =o000144,dl     " is it a "d"?
003006 xxxx 003116600000         tze     idoD            " decimal
003007 xxxx 000141115007         cmpa    =o000141,dl     " is it a ^a?
003010 xxxx 003124600000         tze     idoA            " 4 char ascii display
003011 xxxx 000147115007         cmpa    =o000147,dl     " is it a ^g?
003012 xxxx 003135600000         tze     idoG            " 6 char GE BCD display
003013 xxxx 002770710000         tra     out1        " unknown just print it....
003014 xxxx 000001420400 i21:    emCall  1           " output A to console
003015 xxxx 002765710000         tra     inext
003016 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
003017 xxxx 003213702000         tsx2    octwd
003020 xxxx 003114757000         staq    ioaSafe     " bcd in AQ
003021 xxxx 000044773000         lrl     36          " A => Q
003022 xxxx 000006622000         eax2    6
003023 xxxx 000000235007 idoW2:  lda     =0, dl
003024 xxxx 000006737000         lls     6
003025 xxxx 000002420400         emCall  2           " output GE code char to console
003026 xxxx 777777622012         eax2    -1, 2
003027 xxxx 003023601000         tnz     idoW2
003030 xxxx 003114237000         ldaq    ioaSafe
003031 xxxx 000000235007         lda     =0, dl      " 0 => A
003032 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
003033 xxxx 000002420400         emcall  2
003034 xxxx 000006622000         eax2    6
003035 xxxx 000000235007 idoW3:  lda     =0,dl
003036 xxxx 000006737000         lls     6
003037 xxxx 000002420400         emCall  2
003040 xxxx 777777622012         eax2    -1, 2
003041 xxxx 003035601000         tnz     idoW3
003042 xxxx 000001065003         adx5    1,du
003043 xxxx 002765710000         tra     inext
003044 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
003045 xxxx 003213702000         tsx2    octwd
003046 xxxx 003114757000         staq    ioaSafe         " bcd in AQ
003047 xxxx 003065235000         lda     idOTly
003050 xxxx 003066755000         sta     idOT
003051 xxxx 003066235052 idO1:   lda     idOT, sc        " get char into A
003052 xxxx 000000115007         cmpa    =0, dl          " a zero?
003053 xxxx 003061601000         tnz     idONZ + 1       " nope
003054 xxxx 003051607000         ttf     idO1            " Yes, a Zero. Go for more
003055 xxxx 000002420400         emCall  2               " output a single 0
003056 xxxx 000001065003         adx5    1,du
003057 xxxx 002765710000         tra     inext
003060 xxxx 003066235052 idONZ:  lda     idOT, sc        " get char into A
003061 xxxx 000002420400         emCall  2
003062 xxxx 003060607000         ttf     idONZ           " Yes, a Zero. Go for more
003063 xxxx 000001065003         adx5    1,du
003064 xxxx 002765710000         tra     inext
003065 xxxx 003114001400 idOTly: tally   ioaSafe, 12, 0
003066 xxxx 000000000000 idOT:   bss     1
003067 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
003070 xxxx 003213702000         tsx2    octwd
003071 xxxx 003114757000         staq    ioaSafe     " bcd in AQ
003072 xxxx 000044773000         lrl     36          " A => Q
003073 xxxx 000006622000         eax2    6
003074 xxxx 000000235007 idoN2:  lda     =0,dl
003075 xxxx 000006737000         lls     6
003076 xxxx 000002420400         emCall  2           " output GE code char to console
003077 xxxx 777777622012         eax2    -1, 2
003100 xxxx 003074601000         tnz     idoN2
003101 xxxx 003114237000         ldaq    ioaSafe
003102 xxxx 000000235007         lda     =0, dl      " 0 => A
003103 xxxx 000006622000         eax2    6
003104 xxxx 000000235007 idoN3:  lda     =0, dl
003105 xxxx 000006737000         lls     6
003106 xxxx 000002420400         emCall  2
003107 xxxx 777777622012         eax2    -1, 2
003110 xxxx 003104601000         tnz     idoN3
003111 xxxx 000001065003         adx5    1,du
003112 xxxx 002765710000         tra     inext
003113 xxxx 000000011000         even "(allocating 1 nop)
003114 xxxx 000000000000 ioaSafe:  bss 2
003116 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
003117 xxxx 003146701000         call    toDec
003120 xxxx 003122710000 
003121 xxxx 000000000000 
003122 xxxx 000001065003         adx5    1,du
003123 xxxx 002765710000         tra     inext
003124 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
003125 xxxx 000004622000         eax2    4
003126 xxxx 000000235007 idoA2:  lda     =0,dl
003127 xxxx 000011737000         lls     9
003130 xxxx 000001420400         emCall  1
003131 xxxx 777777622012         eax2    -1, 2
003132 xxxx 003126601000         tnz     idoA2
003133 xxxx 000001065003         adx5    1,du        " into next argument
003134 xxxx 002765710000         tra     inext
003135 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
003136 xxxx 000006622000         eax2    6
003137 xxxx 000000235007 idoG2:  lda     =0,dl
003140 xxxx 000006737000         lls     6
003141 xxxx 000002420400         emCall  2
003142 xxxx 777777622012         eax2    -1, 2
003143 xxxx 003137601000         tnz     idoG2
003144 xxxx 000001065003         adx5    1,du        " into next argument
003145 xxxx 002765710000         tra     inext
003146 xxxx 003151710000 toDec:  save    "2,3,4,5,6,7
003147 xxxx 000000000000 
003150 xxxx 003147630000 
003151 xxxx 003147754000 
003152 xxxx 003147741000 
003153 xxxx 003513116000         cmpq    =-34359738368       " the weird one?
003154 xxxx 003160601000         tnz     toDec2
003155 xxxx 003212235000         lda     decMTly             " just print it and be done with it
003156 xxxx 003206755000         sta     decTly
003157 xxxx 003176710000         tra     toDec1
003160 xxxx 003202756000 toDec2: stq     decNo
003161 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
003162 xxxx 003164605000         tpl     toDec0      " No
003163 xxxx 003202336000         lcq     decNo       " -decNo => Q
003164 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
003165 xxxx 000060075007         ada     =o060,dl    " add ascii '0' (=1A0) to A
003166 xxxx 003206755045         sta     decTly, scr " start writing characters backwards
003167 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
003170 xxxx 003164601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
003171 xxxx 003202235000         lda     decNo
003172 xxxx 000000115007         cmpa    =0,dl
003173 xxxx 003176605000         tpl     toDec1
003174 xxxx 000055235007         lda     =o055,dl    " (-) => A
003175 xxxx 003206755045         sta     decTly, scr " write (-) sign
003176 xxxx 003206235052 toDec1: lda     decTly, sc
003177 xxxx 000001420400         emCall  1
003200 xxxx 003176607000         ttf     toDec1
003201 xxxx 003150710000         return  toDec
003202 xxxx 000000000000 decNo:  dec     0
003203 xxxx 000000000000 decBuf: bss     3
003206 xxxx 003205000040 decTly: tallyb  decBuf+2, , 0
003207 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35
003210 xxxx 065071067063 
003211 xxxx 070063066070 
003212 xxxx 003207001440 decMTly:tallyb  decMM, 12, 0
003213 xxxx 003230742000 octwd:	stx2	octx2
003214 xxxx 000006622000 	eax2	6
003215 xxxx 000003736000 	qls     3
003216 xxxx 000003777000 	llr     3
003217 xxxx 777777622012 	eax2	-1,2
003220 xxxx 003215605400 	tpnz	*-3
003221 xxxx 003252756000 	stq     octtemp
003222 xxxx 000006622000 	eax2	6
003223 xxxx 000003736000 	qls     3
003224 xxxx 000003777000 	llr     3
003225 xxxx 777777622012 	eax2	-1,2
003226 xxxx 003223605400 	tpnz	*-3
003227 xxxx 003252235000 	lda     octtemp
003230 xxxx 003230622000 octx2:	eax2	*
003231 xxxx 000000710012 	tra     0,2
003232 xxxx 003250742000 hexwd:	stx2	hexx2
003233 xxxx 000044773000 	lrl     36          "shift to Q
003234 xxxx 000006622000 	eax2	6           "	process 6 characters
003235 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
003236 xxxx 000004737000 	lls     4           "shift in 4 bits
003237 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
003240 xxxx 003242604400 	tmoz	*+2
003241 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
003242 xxxx 000006773000 	lrl     6
003243 xxxx 003252235000 	lda     octtemp		"get temporary
003244 xxxx 000006737000 	lls     6           "insert new character
003245 xxxx 003252755000 	sta     octtemp		"and store
003246 xxxx 777777622012 	eax2	-1,2		"decrement index
003247 xxxx 003235605400 	tpnz	hexloop
003250 xxxx 003250622000 hexx2:	eax2	*
003251 xxxx 000000710012 	tra     0,2		"return to caller
003252 xxxx 000000000000 octtemp:	oct	0
003253 xxxx 000000633000 rd_clock:	rccl                " read the clock
003254 xxxx 003376757000 cv_clock:	staq	rdctime     " save clock reading
003255 xxxx 003347742000 	stx2	datx2               " save XR's
003256 xxxx 003350740000 	stx0	datx2+1             " ..
003257 xxxx 000034235007 	lda     28,dl               " Initialize montab
003260 xxxx 003401755000 	sta     montab+1			" to prime Feb
003261 xxxx 003376237000 	ldaq	rdctime             " Get clock reading
003262 xxxx 000001737000 	lls     1                   " Set for dvf
003263 xxxx 003514507000 	dvf     =1000000			" Get seconds since 1900.
003264 xxxx 000044777000 	llr     36                  " Into Q.
003265 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
003266 xxxx 003362755000 	sta     rdclock.sec         " Save for inspection.
003267 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
003270 xxxx 003361755000 	sta     rdclock.min
003271 xxxx 000006627000 	eax7	6
003272 xxxx 003352702000 	tsx2	datecv              " Convert the minutes.
003273 xxxx 003372176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
003274 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
003275 xxxx 003371756000 	stq     rdclock.day_of_century	" save for  later.
003276 xxxx 003360755000 	sta     rdclock.hr          " Hours since daybreak.
003277 xxxx 003352702000 	tsx2	datecv              " Convert the hours
003300 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
003301 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
003302 xxxx 003304604000 	tmi     *+2                 " no
003303 xxxx 003401054000 	aos     montab+1			" allow for feb 29
003304 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
003305 xxxx 003555036007 	adlq	1901,dl
003306 xxxx 003370756000 	stq     rdclock.year		" Save
003307 xxxx 000044777000 	llr     36
003310 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
003311 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
003312 xxxx 003315601000 	tnz     *+3                 " No.
003313 xxxx 000001176007 	sbq     1,dl                " Adjust year and
003314 xxxx 000555235007 	lda     365,dl              " day numbers.
003315 xxxx 003370056000 	asq     rdclock.year		" Add in years complete.
003316 xxxx 000000626000 	eax6	0                   " search for correct month
003317 xxxx 030220520201 	rpt     12,1,tmi			" ..
003320 xxxx 003400175016 	sba     montab,6			" subtract off days for each month
003321 xxxx 777777075016 	ada     -1,6                " put back last entry
003322 xxxx 000001075007 	ada     1,dl                " plus one more
003323 xxxx 003365755000 	sta     rdclock.day_of_month	" Day of month
003324 xxxx 003352702000 	tsx2	datecv              " convert day
003325 xxxx 000000635016 	eaa     0,6
003326 xxxx 003400135003 	sbla	montab,du			" get index into month table
003327 xxxx 000022771000 	arl     18                  "..
003330 xxxx 003363755000 	sta     rdclock.month		" Save month number
003331 xxxx 003425236005 	ldq     rdc.months-1,al		" Get name of month.
003332 xxxx 003364756000 	stq     rdclock.month_name
003333 xxxx 003352702000 	tsx2	datecv              " convert month
003334 xxxx 000000024400 	mvne	(),(),()			" edit the date and time
003335 xxxx 003375070010 	desc4ns	date,8
003336 xxxx 003414000014 	desc9a	datedit,12
003337 xxxx 003376020014 	desc6a	rdctime,12
003340 xxxx 003371236000 	ldq     rdclock.day_of_century
003341 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
003342 xxxx 000007506007 	div     7,dl
003343 xxxx 003366755000 	sta     rdclock.day_of_week
003344 xxxx 003417236005 	ldq     rdc.days,al         " Get name of day.
003345 xxxx 003367756000 	stq     rdclock.day_name
003346 xxxx 003376237000 	ldaq	rdctime             " get conversion in AQ
003347 xxxx 003347622000 datx2:	eax2	*			" restore XR's
003350 xxxx 003350620000 	eax0    *               " ..
003351 xxxx 000000710012 	tra     0,2             " return to caller
003352 xxxx 003374755000 datecv:	sta	datenum			" save number
003353 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
003354 xxxx 003374000004 	desc9a	datenum,4
003355 xxxx 003375070002 	desc4ns	date,2
003356 xxxx 777776627017 	eax7	-2,7			" move offset index
003357 xxxx 000000710012 	tra     0,2             " and return
003360 xxxx 000000000000 	bss	,1
003361 xxxx 000000000000 	bss	,1
003362 xxxx 000000000000 	bss	,1
003363 xxxx 000000000000 	bss	,1
003364 xxxx 000000000000 	bss	,1
003365 xxxx 000000000000 	bss	,1
003366 xxxx 000000000000 	bss	,1
003367 xxxx 000000000000 	bss	,1
003370 xxxx 000000000000 	bss	,1
003371 xxxx 000000000000 	bss	,1
003372 xxxx 000000000007     dec     7   "8
003373 xxxx 160163164040     aci     'pst '
003374 xxxx 000000000000 datenum:	bss	,1
003375 xxxx 000000000000 date:	bss	,1
003376 xxxx 000000000000 rdctime:	bss	,2
003400 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
003401 xxxx 000000000034 
003402 xxxx 000000000037 
003403 xxxx 000000000036 
003404 xxxx 000000000037 
003405 xxxx 000000000036 
003406 xxxx 000000000037 
003407 xxxx 000000000037 
003410 xxxx 000000000036 
003411 xxxx 000000000037 
003412 xxxx 000000000036 
003413 xxxx 000000000037 
003414 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
003415 xxxx 061322021322 
003416 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
003417 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat '
003420 xxxx 155157156040 
003421 xxxx 164165145040 
003422 xxxx 167145144040 
003423 xxxx 164150165162 
003424 xxxx 146162151040 
003425 xxxx 163141164040 
003426 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec '
003427 xxxx 146145142040 
003430 xxxx 155141162040 
003431 xxxx 141160162040 
003432 xxxx 155141171040 
003433 xxxx 152165156040 
003434 xxxx 152165154040 
003435 xxxx 141165147040 
003436 xxxx 163145160164 
003437 xxxx 157143164040 
003440 xxxx 156157166040 
003441 xxxx 144145143040 
003442 xxxx 002400000000 single-precision literal (=1.000000)
003443 xxxx 012440000000 single-precision literal (=18.000000)
003444 xxxx 014460000000 single-precision literal (=38.000000)
003445 xxxx 014720000000 single-precision literal (=58.000000)
003446 xxxx 016470000000 single-precision literal (=78.000000)
003447 xxxx 016755645706 single-precision literal (=123.456000)
003450 xxxx 024612431704 single-precision literal (=789.101112)
003451 xxxx 002400000000 single-precision literal (=1.000000)
003452 xxxx 002474030177 single-precision literal (=1.234560)
003453 xxxx 007135170060 single-precision literal (=-6.543210)
003454 xxxx 004622077325 single-precision literal (=3.141593)
003455 xxxx 004622077325 single-precision literal (=3.141593)
003456 xxxx 014420000000 single-precision literal (=34.000000)
003457 xxxx 015360000000 single-precision literal (=-34.000000)
003460 xxxx 014740000000 single-precision literal (=60.000000)
003461 xxxx 014550000000 single-precision literal (=45.000000)
003462 xxxx 010612702436 single-precision literal (=12.340000)
003463 xxxx 015040000000 single-precision literal (=-60.000000)
003464 xxxx 015230000000 single-precision literal (=-45.000000)
003465 xxxx 011165075341 single-precision literal (=-12.340000)
003466 xxxx 014740000000 single-precision literal (=60.000000)
003467 xxxx 014550000000 single-precision literal (=45.000000)
003470 xxxx 010612702436 single-precision literal (=12.340000)
003471 xxxx 015040000000 single-precision literal (=-60.000000)
003472 xxxx 015230000000 single-precision literal (=-45.000000)
003473 xxxx 011165075341 single-precision literal (=-12.340000)
003474 xxxx 014740000000 single-precision literal (=60.000000)
003475 xxxx 014550000000 single-precision literal (=45.000000)
003476 xxxx 010612702436 single-precision literal (=12.340000)
003477 xxxx 015040000000 single-precision literal (=-60.000000)
003500 xxxx 015230000000 single-precision literal (=-45.000000)
003501 xxxx 011165075341 single-precision literal (=-12.340000)
003502 xxxx 004622077325 single-precision literal (=3.141593)
003503 xxxx 004400000000 single-precision literal (=2.000000)
003504 xxxx 004622077325 single-precision literal (=3.141593)
003505 xxxx 004622077325 single-precision literal (=3.141593)
003506 xxxx 004533741242 single-precision literal (=2.718282)
003507 xxxx 004533741242 single-precision literal (=2.718282)
003510 xxxx 000000000000 decimal literal (=0)
003511 xxxx 000000000012 octal literal (=o12)
003512 xxxx 000000000015 octal literal (=o15)
003513 xxxx 400000000000 decimal literal (=-34359738368)
003514 xxxx 000003641100 decimal literal (=1000000)
