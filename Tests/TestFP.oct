!SIZE 004422
000000 xxxx 400000352120     short_call  main_
000001 xxxx 700036670120 
000002 xxxx 600030370120 
000003 xxxx 700044710120     short_return
000004 xxxx 700042710120     return
000005 xxxx 000040627000     push    32
000006 xxxx 700040272120 
000007 xxxx 000360627000     push
000010 xxxx 700040272120 
000011 xxxx 700046272120     getlp
000012 xxxx 004141702000     tsx2	rd_clock
000013 xxxx 000032757000     staq	Date        "MM/DD HH:MM
000014 xxxx 003624701000     call    ioa(msgHello, Date, Date+1)
000015 xxxx 000022710000 
000016 xxxx 000000000000 
000017 xxxx 000023000000 
000020 xxxx 000032000000 
000021 xxxx 000033000000 
000022 xxxx 000034710000     tra     main_
000023 xxxx 030124150151 msgHello:   acc     "This is TestFP ...^g^g\r\n"
000024 xxxx 163040151163 
000025 xxxx 040124145163 
000026 xxxx 164106120040 
000027 xxxx 056056056136 
000030 xxxx 147136147015 
000031 xxxx 012040040040 
000032 xxxx 000000000000     bss     Date, 2
000034 xxxx 003624701000     call    ioa(msgArcsin)
000035 xxxx 000040710000 
000036 xxxx 000000000000 
000037 xxxx 000721000000 
000040 xxxx 003352701000     call    arc_sine_degrees_(=.1)
000041 xxxx 000044710000 
000042 xxxx 000000000000 
000043 xxxx 004330000000 
000044 xxxx 000006420400     emCall  6
000045 xxxx 003607701000     call    crlf
000046 xxxx 000050710000 
000047 xxxx 000000000000 
000050 xxxx 003352701000     call    arc_sine_degrees_(=.2)
000051 xxxx 000054710000 
000052 xxxx 000000000000 
000053 xxxx 004331000000 
000054 xxxx 000006420400     emCall  6
000055 xxxx 003607701000     call    crlf
000056 xxxx 000060710000 
000057 xxxx 000000000000 
000060 xxxx 003352701000     call    arc_sine_degrees_(=.499999)
000061 xxxx 000064710000 
000062 xxxx 000000000000 
000063 xxxx 004332000000 
000064 xxxx 000006420400     emCall  6
000065 xxxx 003607701000     call    crlf
000066 xxxx 000070710000 
000067 xxxx 000000000000 
000070 xxxx 003352701000     call    arc_sine_degrees_(=.5)
000071 xxxx 000074710000 
000072 xxxx 000000000000 
000073 xxxx 004333000000 
000074 xxxx 000006420400     emCall  6
000075 xxxx 003607701000     call    crlf
000076 xxxx 000100710000 
000077 xxxx 000000000000 
000100 xxxx 003352701000     call    arc_sine_degrees_(=.500001)
000101 xxxx 000104710000 
000102 xxxx 000000000000 
000103 xxxx 004334000000 
000104 xxxx 000006420400     emCall  6
000105 xxxx 003607701000     call    crlf
000106 xxxx 000110710000 
000107 xxxx 000000000000 
000110 xxxx 003352701000     call    arc_sine_degrees_(=.51823962601)
000111 xxxx 000114710000 
000112 xxxx 000000000000 
000113 xxxx 004335000000 
000114 xxxx 000006420400     emCall  6
000115 xxxx 003607701000     call    crlf
000116 xxxx 000120710000 
000117 xxxx 000000000000 
000120 xxxx 003352701000     call    arc_sine_degrees_(=.7)
000121 xxxx 000124710000 
000122 xxxx 000000000000 
000123 xxxx 004336000000 
000124 xxxx 000006420400     emCall  6
000125 xxxx 003607701000     call    crlf
000126 xxxx 000130710000 
000127 xxxx 000000000000 
000130 xxxx 003352701000     call    arc_sine_degrees_(=.91)
000131 xxxx 000134710000 
000132 xxxx 000000000000 
000133 xxxx 004337000000 
000134 xxxx 000006420400     emCall  6
000135 xxxx 003607701000     call    crlf
000136 xxxx 000140710000 
000137 xxxx 000000000000 
000140 xxxx 003352701000     call    arc_sine_degrees_(=.9985096709)
000141 xxxx 000144710000 
000142 xxxx 000000000000 
000143 xxxx 004340000000 
000144 xxxx 000006420400     emCall  6
000145 xxxx 003607701000     call    crlf
000146 xxxx 000150710000 
000147 xxxx 000000000000 
000150 xxxx 003352701000     call    arc_sine_degrees_(=.99999999)
000151 xxxx 000154710000 
000152 xxxx 000000000000 
000153 xxxx 004341000000 
000154 xxxx 000006420400     emCall  6
000155 xxxx 003607701000     call    crlf
000156 xxxx 000160710000 
000157 xxxx 000000000000 
000160 xxxx 003352701000     call    arc_sine_degrees_(=1.0) " 90
000161 xxxx 000164710000 
000162 xxxx 000000000000 
000163 xxxx 004342000000 
000164 xxxx 000006420400     emCall  6
000165 xxxx 003607701000     call    crlf
000166 xxxx 000170710000 
000167 xxxx 000000000000 
000170 xxxx 004344433000     dfld     =3.1415926535897932d0   " 1.77245385091
000171 xxxx 003230707000     tsx7    double_square_root_
000172 xxxx 000006420400     emCall  6
000173 xxxx 003607701000     call    crlf
000174 xxxx 000176710000 
000175 xxxx 000000000000 
000176 xxxx 003624701000     call    ioa(msgArctan)
000177 xxxx 000202710000 
000200 xxxx 000000000000 
000201 xxxx 000726000000 
000202 xxxx 002556701000     call    arc_tangent_radians_(=1.0)
000203 xxxx 000206710000 
000204 xxxx 000000000000 
000205 xxxx 004346000000 
000206 xxxx 006400461003     fmp     =4.0,du
000207 xxxx 000006420400     emCall  6
000210 xxxx 003607701000     call    crlf
000211 xxxx 000213710000 
000212 xxxx 000000000000 
000213 xxxx 002502701000     call    arc_tangent_degrees_(=1.0)
000214 xxxx 000217710000 
000215 xxxx 000000000000 
000216 xxxx 004347000000 
000217 xxxx 000006420400     emCall  6
000220 xxxx 003607701000     call    crlf
000221 xxxx 000223710000 
000222 xxxx 000000000000 
000223 xxxx 002502701000     call    arc_tangent_degrees_(=18.0)
000224 xxxx 000227710000 
000225 xxxx 000000000000 
000226 xxxx 004350000000 
000227 xxxx 000006420400     emCall  6
000230 xxxx 003607701000     call    crlf
000231 xxxx 000233710000 
000232 xxxx 000000000000 
000233 xxxx 002502701000     call    arc_tangent_degrees_(=38.0)
000234 xxxx 000237710000 
000235 xxxx 000000000000 
000236 xxxx 004351000000 
000237 xxxx 000006420400     emCall  6
000240 xxxx 003607701000     call    crlf
000241 xxxx 000243710000 
000242 xxxx 000000000000 
000243 xxxx 002502701000     call    arc_tangent_degrees_(=58.0)
000244 xxxx 000247710000 
000245 xxxx 000000000000 
000246 xxxx 004352000000 
000247 xxxx 000006420400     emCall  6
000250 xxxx 003607701000     call    crlf
000251 xxxx 000253710000 
000252 xxxx 000000000000 
000253 xxxx 002502701000     call    arc_tangent_degrees_(=78.0)
000254 xxxx 000257710000 
000255 xxxx 000000000000 
000256 xxxx 004353000000 
000257 xxxx 000006420400     emCall  6
000260 xxxx 003607701000     call    crlf
000261 xxxx 000263710000 
000262 xxxx 000000000000 
000263 xxxx 002527701000     call    arc_tangent_degrees_2_(=123.456, =789.101112)
000264 xxxx 000270710000 
000265 xxxx 000000000000 
000266 xxxx 004354000000 
000267 xxxx 004355000000 
000270 xxxx 000006420400     emCall  6
000271 xxxx 003607701000     call    crlf
000272 xxxx 000274710000 
000273 xxxx 000000000000 
000274 xxxx 003624701000     call    ioa(msgExp)
000275 xxxx 000300710000 
000276 xxxx 000000000000 
000277 xxxx 000733000000 
000300 xxxx 002364701000     call    exponential_(=1.0)
000301 xxxx 000304710000 
000302 xxxx 000000000000 
000303 xxxx 004356000000 
000304 xxxx 000006420400     emCall  6
000305 xxxx 003607701000     call    crlf
000306 xxxx 000310710000 
000307 xxxx 000000000000 
000310 xxxx 002364701000     call    exponential_(=1.23456)
000311 xxxx 000314710000 
000312 xxxx 000000000000 
000313 xxxx 004357000000 
000314 xxxx 000006420400     emCall  6
000315 xxxx 003607701000     call    crlf
000316 xxxx 000320710000 
000317 xxxx 000000000000 
000320 xxxx 002364701000     call    exponential_(=-6.54321)
000321 xxxx 000324710000 
000322 xxxx 000000000000 
000323 xxxx 004360000000 
000324 xxxx 000006420400     emCall  6
000325 xxxx 003607701000     call    crlf
000326 xxxx 000330710000 
000327 xxxx 000000000000 
000330 xxxx 003624701000     call    ioa(msgCotan)
000331 xxxx 000334710000 
000332 xxxx 000000000000 
000333 xxxx 000747000000 
000334 xxxx 001726701000     call    cotangent_degrees_(=34.0)
000335 xxxx 000340710000 
000336 xxxx 000000000000 
000337 xxxx 004361000000 
000340 xxxx 000006420400     emCall  6
000341 xxxx 003607701000     call    crlf
000342 xxxx 000344710000 
000343 xxxx 000000000000 
000344 xxxx 001726701000     call    cotangent_degrees_(=-34.0)
000345 xxxx 000350710000 
000346 xxxx 000000000000 
000347 xxxx 004362000000 
000350 xxxx 000006420400     emCall  6
000351 xxxx 003607701000     call    crlf
000352 xxxx 000354710000 
000353 xxxx 000000000000 
000354 xxxx 003624701000     call    ioa(msgTan);
000355 xxxx 000360710000 
000356 xxxx 000000000000 
000357 xxxx 000765000000 
000360 xxxx 002005701000     call    tangent_degrees_(=60.0)
000361 xxxx 000364710000 
000362 xxxx 000000000000 
000363 xxxx 004363000000 
000364 xxxx 000006420400     emCall  6
000365 xxxx 003607701000     call    crlf
000366 xxxx 000370710000 
000367 xxxx 000000000000 
000370 xxxx 002005701000     call    tangent_degrees_(=45.0)
000371 xxxx 000374710000 
000372 xxxx 000000000000 
000373 xxxx 004364000000 
000374 xxxx 000006420400     emCall  6
000375 xxxx 003607701000     call    crlf
000376 xxxx 000400710000 
000377 xxxx 000000000000 
000400 xxxx 002005701000     call    tangent_degrees_(=12.34)
000401 xxxx 000404710000 
000402 xxxx 000000000000 
000403 xxxx 004365000000 
000404 xxxx 000006420400     emCall  6
000405 xxxx 003607701000     call    crlf
000406 xxxx 000410710000 
000407 xxxx 000000000000 
000410 xxxx 002005701000     call    tangent_degrees_(=-60.0)
000411 xxxx 000414710000 
000412 xxxx 000000000000 
000413 xxxx 004366000000 
000414 xxxx 000006420400     emCall  6
000415 xxxx 003607701000     call    crlf
000416 xxxx 000420710000 
000417 xxxx 000000000000 
000420 xxxx 002005701000     call    tangent_degrees_(=-45.0)
000421 xxxx 000424710000 
000422 xxxx 000000000000 
000423 xxxx 004367000000 
000424 xxxx 000006420400     emCall  6
000425 xxxx 003607701000     call    crlf
000426 xxxx 000430710000 
000427 xxxx 000000000000 
000430 xxxx 002005701000     call    tangent_degrees_(=-12.34)
000431 xxxx 000434710000 
000432 xxxx 000000000000 
000433 xxxx 004370000000 
000434 xxxx 000006420400     emCall  6
000435 xxxx 003607701000     call    crlf
000436 xxxx 000440710000 
000437 xxxx 000000000000 
000440 xxxx 003624701000     call    ioa(msgCos)
000441 xxxx 000444710000 
000442 xxxx 000000000000 
000443 xxxx 000761000000 
000444 xxxx 001210701000     call    cosine_degrees_(=60.0)
000445 xxxx 000450710000 
000446 xxxx 000000000000 
000447 xxxx 004371000000 
000450 xxxx 000006420400     emCall  6
000451 xxxx 003607701000     call    crlf
000452 xxxx 000454710000 
000453 xxxx 000000000000 
000454 xxxx 001210701000     call    cosine_degrees_(=45.0)
000455 xxxx 000460710000 
000456 xxxx 000000000000 
000457 xxxx 004372000000 
000460 xxxx 000006420400     emCall  6
000461 xxxx 003607701000     call    crlf
000462 xxxx 000464710000 
000463 xxxx 000000000000 
000464 xxxx 001210701000     call    cosine_degrees_(=12.34)
000465 xxxx 000470710000 
000466 xxxx 000000000000 
000467 xxxx 004373000000 
000470 xxxx 000006420400     emCall  6
000471 xxxx 003607701000     call    crlf
000472 xxxx 000474710000 
000473 xxxx 000000000000 
000474 xxxx 001210701000     call    cosine_degrees_(=-60.0)
000475 xxxx 000500710000 
000476 xxxx 000000000000 
000477 xxxx 004374000000 
000500 xxxx 000006420400     emCall  6
000501 xxxx 003607701000     call    crlf
000502 xxxx 000504710000 
000503 xxxx 000000000000 
000504 xxxx 001210701000     call    cosine_degrees_(=-45.0)
000505 xxxx 000510710000 
000506 xxxx 000000000000 
000507 xxxx 004375000000 
000510 xxxx 000006420400     emCall  6
000511 xxxx 003607701000     call    crlf
000512 xxxx 000514710000 
000513 xxxx 000000000000 
000514 xxxx 001210701000     call    cosine_degrees_(=-12.34)
000515 xxxx 000520710000 
000516 xxxx 000000000000 
000517 xxxx 004376000000 
000520 xxxx 000006420400     emCall  6
000521 xxxx 003607701000     call    crlf
000522 xxxx 000524710000 
000523 xxxx 000000000000 
000524 xxxx 003624701000     call    ioa(msgSin)
000525 xxxx 000530710000 
000526 xxxx 000000000000 
000527 xxxx 000755000000 
000530 xxxx 001245701000     call    sine_degrees_(=60.0)
000531 xxxx 000534710000 
000532 xxxx 000000000000 
000533 xxxx 004377000000 
000534 xxxx 000006420400     emCall  6
000535 xxxx 003607701000     call    crlf
000536 xxxx 000540710000 
000537 xxxx 000000000000 
000540 xxxx 001245701000     call    sine_degrees_(=45.0)
000541 xxxx 000544710000 
000542 xxxx 000000000000 
000543 xxxx 004400000000 
000544 xxxx 000006420400     emCall  6
000545 xxxx 003607701000     call    crlf
000546 xxxx 000550710000 
000547 xxxx 000000000000 
000550 xxxx 001245701000     call    sine_degrees_(=12.34)
000551 xxxx 000554710000 
000552 xxxx 000000000000 
000553 xxxx 004401000000 
000554 xxxx 000006420400     emCall  6
000555 xxxx 003607701000     call    crlf
000556 xxxx 000560710000 
000557 xxxx 000000000000 
000560 xxxx 001245701000     call    sine_degrees_(=-60.0)
000561 xxxx 000564710000 
000562 xxxx 000000000000 
000563 xxxx 004402000000 
000564 xxxx 000006420400     emCall  6
000565 xxxx 003607701000     call    crlf
000566 xxxx 000570710000 
000567 xxxx 000000000000 
000570 xxxx 001245701000     call    sine_degrees_(=-45.0)
000571 xxxx 000574710000 
000572 xxxx 000000000000 
000573 xxxx 004403000000 
000574 xxxx 000006420400     emCall  6
000575 xxxx 003607701000     call    crlf
000576 xxxx 000600710000 
000577 xxxx 000000000000 
000600 xxxx 001245701000     call    sine_degrees_(=-12.34)
000601 xxxx 000604710000 
000602 xxxx 000000000000 
000603 xxxx 004404000000 
000604 xxxx 000006420400     emCall  6
000605 xxxx 003607701000     call    crlf
000606 xxxx 000610710000 
000607 xxxx 000000000000 
000610 xxxx 003624701000     call    ioa(msgSqrt)
000611 xxxx 000614710000 
000612 xxxx 000000000000 
000613 xxxx 000771000000 
000614 xxxx 001110701000     call    sqrt(=3.1415926535897932)   " 1.77245385091
000615 xxxx 000620710000 
000616 xxxx 000000000000 
000617 xxxx 004405000000 
000620 xxxx 000006420400     emCall  6
000621 xxxx 003607701000     call    crlf
000622 xxxx 000624710000 
000623 xxxx 000000000000 
000624 xxxx 001110701000     call    sqrt(=2.0)   " 1.414...
000625 xxxx 000630710000 
000626 xxxx 000000000000 
000627 xxxx 004406000000 
000630 xxxx 000006420400     emCall  6
000631 xxxx 003607701000     call    crlf
000632 xxxx 000634710000 
000633 xxxx 000000000000 
000634 xxxx 003624701000     call    ioa(msgLog)
000635 xxxx 000640710000 
000636 xxxx 000000000000 
000637 xxxx 000741000000 
000640 xxxx 002237701000     call    log_base_e_(=3.1415926535897932)
000641 xxxx 000644710000 
000642 xxxx 000000000000 
000643 xxxx 004407000000 
000644 xxxx 000006420400     emCall  6
000645 xxxx 003607701000     call    crlf
000646 xxxx 000650710000 
000647 xxxx 000000000000 
000650 xxxx 002200701000     call    log_base_10_(=3.1415926535897932)
000651 xxxx 000654710000 
000652 xxxx 000000000000 
000653 xxxx 004410000000 
000654 xxxx 000006420400     emCall  6
000655 xxxx 003607701000     call    crlf
000656 xxxx 000660710000 
000657 xxxx 000000000000 
000660 xxxx 001052701000     call    ALOG10(=3.1415926535897932)     " .497149873
000661 xxxx 000664710000 
000662 xxxx 000000000000 
000663 xxxx 004411000000 
000664 xxxx 000006420400     emCall  6
000665 xxxx 003607701000     call    crlf
000666 xxxx 000670710000 
000667 xxxx 000000000000 
000670 xxxx 001056701000     call    ALOG(=3.1415926535897932)      " 1.144729886
000671 xxxx 000674710000 
000672 xxxx 000000000000 
000673 xxxx 004412000000 
000674 xxxx 000006420400     emCall  6
000675 xxxx 003607701000     call    crlf
000676 xxxx 000700710000 
000677 xxxx 000000000000 
000700 xxxx 001052701000     call    ALOG10(=2.71828182846)
000701 xxxx 000704710000 
000702 xxxx 000000000000 
000703 xxxx 004413000000 
000704 xxxx 000006420400     emCall  6
000705 xxxx 003607701000     call    crlf
000706 xxxx 000710710000 
000707 xxxx 000000000000 
000710 xxxx 001056701000     call    ALOG(=2.71828182846)
000711 xxxx 000714710000 
000712 xxxx 000000000000 
000713 xxxx 004414000000 
000714 xxxx 000006420400     emCall  6
000715 xxxx 003607701000     call    crlf
000716 xxxx 000720710000 
000717 xxxx 000000000000 
000720 xxxx 000000616000     dis
000721 xxxx 022101162143 msgArcsin:  acc     /Arcsin tests ...\r\n/
000722 xxxx 163151156040 
000723 xxxx 164145163164 
000724 xxxx 163040056056 
000725 xxxx 056015012040 
000726 xxxx 022101162143 msgArctan:  acc     /Arctan tests ...\r\n/
000727 xxxx 164141156040 
000730 xxxx 164145163164 
000731 xxxx 163040056056 
000732 xxxx 056015012040 
000733 xxxx 027105170160 msgExp:     acc     /Exponential tests ...\r\n/
000734 xxxx 157156145156 
000735 xxxx 164151141154 
000736 xxxx 040164145163 
000737 xxxx 164163040056 
000740 xxxx 056056015012 
000741 xxxx 025114157147 msgLog:     acc     /Logarithm tests ...\r\n/
000742 xxxx 141162151164 
000743 xxxx 150155040164 
000744 xxxx 145163164163 
000745 xxxx 040056056056 
000746 xxxx 015012040040 
000747 xxxx 025103157164 msgCotan:   acc     /Cotangent tests ...\r\n/
000750 xxxx 141156147145 
000751 xxxx 156164040164 
000752 xxxx 145163164163 
000753 xxxx 040056056056 
000754 xxxx 015012040040 
000755 xxxx 017123151156 msgSin:     acc     /Sin tests ...\r\n/
000756 xxxx 040164145163 
000757 xxxx 164163040056 
000760 xxxx 056056015012 
000761 xxxx 017103157163 msgCos:     acc     /Cos tests ...\r\n/
000762 xxxx 040164145163 
000763 xxxx 164163040056 
000764 xxxx 056056015012 
000765 xxxx 017124141156 msgTan:     acc     /Tan tests ...\r\n/
000766 xxxx 040164145163 
000767 xxxx 164163040056 
000770 xxxx 056056015012 
000771 xxxx 020123161162 msgSqrt:    acc     /Sqrt tests ...\r\n/
000772 xxxx 164040164145 
000773 xxxx 163164163040 
000774 xxxx 056056056015 
000775 xxxx 012040040040 
000776 xxxx 001001710000 LOGS:   SAVE    
000777 xxxx 000000000000 
001000 xxxx 000777630000 
001001 xxxx 000777754000 
001002 xxxx 000777741000 
001003 xxxx 000002431031         FLD     2, 1*       " X = (2**I) * F = ARGUMENT
001004 xxxx 000000573000         FNO
001005 xxxx 001035600000         TZE     ERR1        " ERROR IF X = 0
001006 xxxx 001043604000         TMI     ERR2        " ERROR IF X NEGATIVE
001007 xxxx 002400515003 BEGIN:  FCMP    =1.0,DU
001010 xxxx 001041600000         TZE     UNITY       " LOG(1) = 0
001011 xxxx 001026456000         STE     I           " STORE I AT BINARY POINT 7
001012 xxxx 000000411003         LDE     0, DU       " OBTAIN F
001013 xxxx 001072477000         DFAD    SRHLF
001014 xxxx 001076457000         DFST    Z
001015 xxxx 001074577000         DFSB    SRTWO
001016 xxxx 001076567000         DFDV    Z
001017 xxxx 001076457000         DFST    Z           " Z = (F - SQRT(1/2))/(F + SQRT(1/2))
001020 xxxx 001076463000         DFMP    Z           " Z^2
001021 xxxx 001070577000         DFSB    C           " Z^2-C
001022 xxxx 001066527000         DFDI    B           " B/(Z^2-C)
001023 xxxx 001064477000         DFAD    A           " A+B/(Z^2-C)
001024 xxxx 001076463000         DFMP    Z           " Z(A+B/(Z^2-C))
001025 xxxx 001076457000         DFST    Z           " Z = Z*(A+(B/(Z^2-C))) = LOG2 (F) + 1/2
001026 xxxx 000000235003 I:      LDA     0, DU       " ==== THIS GET CHANGED ====
001027 xxxx 000000236003         LDQ     0, DU
001030 xxxx 016000411003         LDE     =7B25, DU   " FLOAT I
001031 xxxx 000400575003         FSB     =0.5, DU
001032 xxxx 001076477000         DFAD    Z           " LOG2(X) = I + LOG2(F)
001033 xxxx 001033463000 INDIC:  DFMP    *           " CONVERT TO BASE 10 OR E
001034 xxxx 001000710000         RETURN  LOGS
001035 xxxx 001100701000 ERR1:   CALL    .FXEM.(EALN1)   " ERROR EXIT NUMBER 1 (X=0)
001036 xxxx 001041710000 
001037 xxxx 000000000000 
001040 xxxx 001062000000 
001041 xxxx 400000431003 UNITY:  FLD     =0.0, DU
001042 xxxx 001000710000         RETURN  LOGS
001043 xxxx 001100701000 ERR2:   CALL    .FXEM.(EALN2)   " ERROR EXIT NUMBER 2 (X IS NEGATIVE)
001044 xxxx 001047710000 
001045 xxxx 000000000000 
001046 xxxx 001063000000 
001047 xxxx 000000513000         FNEG
001050 xxxx 001007710000         TRA     BEGIN
001051 xxxx 000000616000         dis
001052 xxxx 001033750000 ALOG10: STC2    INDIC       " REAL COMMON LOGARITHM
001053 xxxx 000776710000         TRA     LOGS
001054 xxxx 776464202324         DEC     .301029996D0
001055 xxxx 175727157154 
001056 xxxx 001033750000 ALOG:   STC2    INDIC       " REAL NATURAL LOGARITHM
001057 xxxx 000776710000         TRA     LOGS
001060 xxxx 000542710277         DEC     6.93147180559D-1
001061 xxxx 575030531171 
001062 xxxx 010440000000 EALN1:  DEC     9.
001063 xxxx 010500000000 EALN2:  DEC     10.
001064 xxxx 002512601750 A:      DEC     .12920070987D1
001065 xxxx 530734427226 
001066 xxxx 005256062222 B:      DEC     -.26398577031D1
001067 xxxx 154274032423 
001070 xxxx 002650103142 C:      DEC     .16567626301D1
001071 xxxx 014073125631 
001072 xxxx 000552023631 SRHLF:  DEC     .707106781187D0     " sqrt(2) / 2
001073 xxxx 477513560151 
001074 xxxx 002552023631 SRTWO:  DEC     .1414213562374D1    " SQRT(2)
001075 xxxx 477513560151 
001076 xxxx 000000000000 Z:      BSS     2
001100 xxxx 001103710000 .FXEM.: save
001101 xxxx 000000000000 
001102 xxxx 001101630000 
001103 xxxx 001101754000 
001104 xxxx 001101741000 
001105 xxxx 000002235031         lda     2, 1*
001106 xxxx 000001420400         emcall  1
001107 xxxx 000000616000         dis
001110 xxxx 001115710000 sqrt:   save    0, 1
001111 xxxx 000000000000 
001112 xxxx 000000220003 
001113 xxxx 000001221003 
001114 xxxx 001111630000 
001115 xxxx 001111754000 
001116 xxxx 001111741000 
001117 xxxx 001112740000 
001120 xxxx 001113741000 
001121 xxxx 000002431031         FLD     2, 1*               " X = ARGUMENT
001122 xxxx 000000573000         FNO
001123 xxxx 001125601000         tnz     sqrt.1
001124 xxxx 001112710000         return  sqrt                " if x = 0 return (0)
001125 xxxx 001131605000 sqrt.1:	tpl     calc_square_root	" if x < 0:
001126 xxxx 000000513000         fneg	0                   "   x = -x
001127 xxxx 001170455000         fst     x
001130 xxxx 001170431000         fld     x		"   calculate sqrt (abs(x))
001131 xxxx 001170455000         fst     x           " store EA := input arg
001132 xxxx 001170220000         ldx0	x           " X0 := addr (x) -> expon
001133 xxxx 000000411003         lde     =0b25,du	" addr (m) -> expon = 0
001134 xxxx 002000300003         canx0	=1b25,du	" calculate mod (e, 2)
001135 xxxx 000002600004         tze     2,ic		" if mod (e, 2) = 1:
001136 xxxx 776000411003         lde     =-1b25,du	"   EA := m = .5*m
001137 xxxx 001170236000         ldq     x           " Q := 8/expon,28/garbage
001140 xxxx 000034732000         qrs     28          " Q := 28/0,8/expon
001141 xxxx 000001076007         adq     =1,dl		" calculate e+1
001142 xxxx 000001732000         qrs     1           " calculate divide (e+1, 2, 7)
001143 xxxx 000034736000         qls     28          " position result in exponent field
001144 xxxx 001174756000         stq     e           " store Q := e = divide (e+1, 2, 7)
001145 xxxx 004415236000         ldq     =0          " clear Q
001146 xxxx 001172457000         dfst	m           " store EAQ := m
001147 xxxx 001202461000         fmp     SQp2          " calculate root_m = p(m)
001150 xxxx 001200475000         fad     SQp1
001151 xxxx 001172461000         fmp     m
001152 xxxx 001176475000         fad     SQp0
001153 xxxx 001166455000         fst     root_m
001154 xxxx 001172525000         fdi     m           " calculate root_m = .5 * (root_m + m/root_m)
001155 xxxx 001166475000         fad     root_m
001156 xxxx 000400461003         fmp     =0.5,du
001157 xxxx 001166457000         dfst	root_m      " calculate root_m + float (m, 63)/root_m
001160 xxxx 001172527000         dfdi	m
001161 xxxx 001166477000         dfad	root_m
001162 xxxx 776000415003         ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
001163 xxxx 001174415000         ade     e           " calculate addr (root_x) -> expon =
001164 xxxx 000000471000         frd     0
001165 xxxx 001112710000         return  sqrt        " return (root_x)
001166 xxxx 000000000000         bss     root_m,2
001170 xxxx 000000000000         bss     x,2
001172 xxxx 000000000000         bss     m,2
001174 xxxx 000000000000         bss     e,2
001176 xxxx 776411377603 SQp0:   dec     2.5927688d-1
001177 xxxx 406536706351 
001200 xxxx 002415257502 SQp1:   dec     1.0521212d0
001201 xxxx 413332156142 
001202 xxxx 777274054062 SQp2:   dec     -3.1632214d-1
001203 xxxx 066300621037 
001204 xxxx 000400000000 scale:	oct     000400000000	" 0.5
001205 xxxx 000100000000         oct     000100000000	" 0.25*0.5 = 0.125
001206 xxxx 000200000000         oct     000200000000	" 0.25
001207 xxxx 000040000000         oct     000040000000	" 0.25*0.25 = 0.0625
001210 xxxx 001220710000     save    0,1,2,3,4
001211 xxxx 000000000000 
001212 xxxx 000000220003 
001213 xxxx 000001221003 
001214 xxxx 000002222003 
001215 xxxx 000003223003 
001216 xxxx 000004224003 
001217 xxxx 001211630000 
001220 xxxx 001211754000 
001221 xxxx 001211741000 
001222 xxxx 001212740000 
001223 xxxx 001213741000 
001224 xxxx 001214742000 
001225 xxxx 001215743000 
001226 xxxx 001216744000 
001227 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001230 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001231 xxxx 000000623000     eax3    0       " cosine return
001232 xxxx 400000475003 	fad     =0.0,du		" normalize input
001233 xxxx 001416425012 	fcmg	one_eighty,x2	" if abs_angle <= 180:
001234 xxxx 001332604000 	tmi     case1_degrees	" then no angle reduction is necessary
001235 xxxx 001474700000 	tsx0	principal_degrees_
001236 xxxx 001326710011 	tra     case_degrees+1,x1	" select appropriate case
001237 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001240 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
001241 xxxx 001710425012 	fcmg	pi,x2		" if abs (angle) <= pi
001242 xxxx 001307604000 	tmi     case1_radians	" then no angle reduction is necessary
001243 xxxx 001514700000 	tsx0	principal_radians_
001244 xxxx 001303710011 	tra     case_radians+1,x1	" select appropriate case
001245 xxxx 001255710000     save    0,1,2,3,4
001246 xxxx 000000000000 
001247 xxxx 000000220003 
001250 xxxx 000001221003 
001251 xxxx 000002222003 
001252 xxxx 000003223003 
001253 xxxx 000004224003 
001254 xxxx 001246630000 
001255 xxxx 001246754000 
001256 xxxx 001246741000 
001257 xxxx 001247740000 
001260 xxxx 001250741000 
001261 xxxx 001251742000 
001262 xxxx 001252743000 
001263 xxxx 001253744000 
001264 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001265 xxxx 000000622000 	eax2	BFP         " no offset for BFP constants
001266 xxxx 000001623000     eax3    1           " sine return
001267 xxxx 400000475003 	fad     =0.0,du         " normalize input
001270 xxxx 001414425012 	fcmg	ninety,x2		" if abs (angle) < pi/2
001271 xxxx 001345604000 	tmi     case0_degrees	" then no angle reduction is necessary
001272 xxxx 001474700000 	tsx0	principal_degrees_
001273 xxxx 001325710011 	tra     case_degrees,x1	" select appropriate case
001274 xxxx 000000622000 	eax2	BFP             " no offset for BFP constants
001275 xxxx 400000475003 	fad     =0.0,du         " normalize input
001276 xxxx 001666425012 	fcmg	half_pi,x2      " if abs (angle) <= pi/2
001277 xxxx 001351604400 	tmoz	case0_radians	" then no angle reduction is necessary
001300 xxxx 001514700000 	tsx0	principal_radians_
001301 xxxx 001302710011 	tra     case_radians,x1	" Case select appropriate case_radians
001302 xxxx 001351710000 	tra     case0_radians
001303 xxxx 001307710000 	tra     case1_radians
001304 xxxx 001315710000 	tra     case2_radians
001305 xxxx 001317710000 	tra     case3_radians
001306 xxxx 001351710000 	tra     case0_radians
001307 xxxx 400000475003 	fad     =0.0,du		" set indicators
001310 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001311 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001312 xxxx 001410477012 	dfad	half_pi1A,x2
001313 xxxx 001412477012 	dfad	half_pi2A,x2
001314 xxxx 001351710000 	tra     part_sine_radians
001315 xxxx 000000513000 	fneg	0
001316 xxxx 001351710000 	tra     part_sine_radians
001317 xxxx 400000475003 	fad     =0.0,du		" set indicators
001320 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001321 xxxx 000000513000     fneg	0
001322 xxxx 001410577012 	dfsb	half_pi1A,x2
001323 xxxx 001412577012 	dfsb	half_pi2A,x2
001324 xxxx 001351710000 	tra     part_sine_radians
001325 xxxx 001345710000 	tra     case0_degrees
001326 xxxx 001332710000 	tra     case1_degrees
001327 xxxx 001337710000 	tra     case2_degrees
001330 xxxx 001341710000 	tra     case3_degrees
001331 xxxx 001345710000 	tra     case0_degrees
001332 xxxx 400000475003 	fad     =0.0,du		" set indicators
001333 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001334 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001335 xxxx 001414475012 	fad     ninety,x2
001336 xxxx 001345710000 	tra     part_sine_degrees
001337 xxxx 000000513000 	fneg	0
001340 xxxx 001345710000 	tra     part_sine_degrees
001341 xxxx 400000475003 	fad     =0.0,du		" set indicators
001342 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001343 xxxx 000000513000 	fneg
001344 xxxx 001414575012 	fsb     ninety,x2
001345 xxxx 001404427012 	dfcmg	eps2,x2		" if conversion to radians underflows
001346 xxxx 000002605004 	tpl     2,ic
001347 xxxx 400000431003     fld     =0.0,du		" then use zero
001350 xxxx 001702463012 	dfmp	one_degree,x2	" convert to radians.
001351 xxxx 001406427012 	dfcmg	eps3,x2		" if abs (x) < 5e-10:
001352 xxxx 000003605004 	tpl     3,ic
001353 xxxx 000000471000     frd     0
001354 xxxx 001375710013     tra     rets, x3
001355 xxxx 001170457000 	dfst	x
001356 xxxx 001170463000 	dfmp	x           " calculate xx = x*x
001357 xxxx 001400457000 	dfst	xx
001360 xxxx 001432461012 	fmp     tp5,x2		" calculate p(xx)
001361 xxxx 001430477012 	dfad	tp4,x2
001362 xxxx 001400461000 	fmp     xx
001363 xxxx 001426477012 	dfad	tp3,x2
001364 xxxx 001400461000 	fmp     xx
001365 xxxx 001424477012 	dfad	tp2,x2
001366 xxxx 001400461000 	fmp     xx
001367 xxxx 001422477012 	dfad	tp1,x2
001370 xxxx 001400463000 	dfmp	xx
001371 xxxx 001420477012 	dfad	tp0,x2
001372 xxxx 001170463000 	dfmp	x		" return x*p(xx)
001373 xxxx 000000471000 	frd     0
001374 xxxx 001375710013     tra     rets, x3
001375 xxxx 001212710000     return  cosine_degrees_
001376 xxxx 001247710000     return  sine_degrees_
001377 xxxx 000000011000 	even "(allocating 1 nop)
001400 xxxx 000000000000     bss     xx,2
001402 xxxx 716504072231 eps1:       dec	1.886591d-8
001403 xxxx 175750642261 
001404 xxxx 412712273406 eps2:       dec	8.418858142948452884d-38
001405 xxxx 461701757347 
001406 xxxx 704422701372 eps3:       dec	5.0d-10
001407 xxxx 023326451313 
001410 xxxx 002622077325 half_pi1A:	oct	002622077325,042055060432	" 1.570796326794896619d0
001411 xxxx 042055060432 
001412 xxxx 602611431424 half_pi2A:	oct	602611431424,270033407150	" 8.333742918520878328d-20
001413 xxxx 270033407150 
001414 xxxx 016550000000 ninety:     dec	90.0d0
001415 xxxx 000000000000 
001416 xxxx 020550000000 one_eighty: dec	180.0d0
001417 xxxx 000000000000 
001420 xxxx 000777777777 tp0:        dec	 9.999999999788d-1
001421 xxxx 776426056601 
001422 xxxx 775252525252 tp1:        dec	-1.6666666608826d-1
001423 xxxx 764246126070 
001424 xxxx 764421042055 tp2:        dec	 8.333330720556d-3
001425 xxxx 645325433621 
001426 xxxx 751137720534 tp3:        dec	-1.98408328231d-4
001427 xxxx 017765224715 
001430 xxxx 734561327223 tp4:        dec	 2.7523971068d-6
001431 xxxx 742173067177 
001432 xxxx 717145743634 tp5:        dec	-2.386834641d-8
001433 xxxx 001005375050 
001434 xxxx 000000000000 angle:  bss     temp, 2
001436 xxxx 000000000000         bss     n1,1
001437 xxxx 000000000000         bss     n2,1
001440 xxxx 000000000000         bss     t1,4
001444 xxxx 000000000000         bss     t2,6
001452 xxxx 000000000000         bss     t3,8
001462 xxxx 000000000000         bss     t4,10
001474 xxxx 000000471000 	frd     0
001475 xxxx 001636425000 	fcmg	two_pwr_54	" is the EAQ too large
001476 xxxx 001622605400 	tpnz	angle_too_big	" Yup.
001477 xxxx 001434455000 	fst     angle
001500 xxxx 001414567000 	dfdv	ninety		" EAQ = EAQ/90
001501 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/90 + 0.5
001502 xxxx 001664437000 	dufa	almost_one
001503 xxxx 001664537000 	dufs	almost_one
001504 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/90 + 0.5 in integer form
001505 xxxx 000000621006 	eax1	0,ql
001506 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001507 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/90 + 0.5) in floating point form
001510 xxxx 016550461003 	fmp     =90.0,du	" EAQ = floor(EAQ/90 + 0.5)*90
001511 xxxx 000000513000 	fneg	0           " EAQ = -floor(EAQ/90 + 0.5)*90
001512 xxxx 001434475000 	fad     angle	" EAQ = angle-floor(EAQ/90 + 0.5)*90
001513 xxxx 000000710010 	tra     0,x0		" return to caller
001514 xxxx 000000471000 	frd     0
001515 xxxx 001434455000 	fst     angle
001516 xxxx 001634425000 	fcmg	two_pwr_27      " is the EAQ too large
001517 xxxx 001547605400 	tpnz	bfp_big_angle	" Yup.
001520 xxxx 001630463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001521 xxxx 000400475003 	fad     =0.5,du             " EAQ = EAQ/half_pi + 0.5
001522 xxxx 001664437000 	dufa	almost_one
001523 xxxx 001664537000 	dufs	almost_one
001524 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001525 xxxx 000000621006 	eax1	0,ql
001526 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001527 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001530 xxxx 001436455000 	fst     n1		" n1 = EAQ
001531 xxxx 001532710000 	tra     small_angle_join
001532 xxxx 001640461012 	fmp     half_pi1B,x2
001533 xxxx 001440457000 	dfst	t1		" t1 = n1*half_pi1
001534 xxxx 001436431000 	fld     n1
001535 xxxx 001644461012 	fmp     half_pi2B,x2
001536 xxxx 001444457000 	dfst	t2		" t2 = n1*half_pi2
001537 xxxx 001436431000 	fld     n1
001540 xxxx 001650461012 	fmp     half_pi3,x2
001541 xxxx 001452457000 	dfst	t3		" t3 = n1*half_pi3
001542 xxxx 001434431000 	fld     angle		" answer = angle - t1 - t2 - t3
001543 xxxx 001440577000 	dfsb	t1
001544 xxxx 001444577000 	dfsb	t2
001545 xxxx 001452577000 	dfsb	t3
001546 xxxx 000000710010 	tra     0,x0
001547 xxxx 001636425000 	fcmg	two_pwr_54	" is the EAQ too large?
001550 xxxx 001622605400 	tpnz	angle_too_big	" Yup.
001551 xxxx 001630463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001552 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/half_pi + 0.5
001553 xxxx 001664437000 	dufa	almost_one
001554 xxxx 001664537000 	dufs	almost_one
001555 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001556 xxxx 000000621006 	eax1	0,ql
001557 xxxx 000003361003 	anx1	=3,du		" X1 = mod(AQ,4)
001560 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001561 xxxx 001436455000 	fst     n1		" n1 = EAQ
001562 xxxx 001436575000 	fsb     n1
001563 xxxx 001437455000 	fst     n2		" n2 = n - n1
001564 xxxx 001436431000 	fld     n1
001565 xxxx 001640461012 	fmp     half_pi1B,x2
001566 xxxx 001440457000 	dfst	t1		" t1 = n1*half_pi1
001567 xxxx 001436431000 	fld     n1		" calculate n1*half_pi2 + n2*half_pi1
001570 xxxx 001644461012 	fmp     half_pi2B,x2
001571 xxxx 001444457000 	dfst	t2
001572 xxxx 001437431000 	fld     n2
001573 xxxx 001640461012 	fmp     half_pi1B,x2
001574 xxxx 001444477000 	dfad	t2
001575 xxxx 001444457000 	dfst	t2		" t2 = (n1*half_pi2 + n2*half_pi1)
001576 xxxx 001436431000 	fld     n1		" calculate n1*half_pi3 + n2*half_pi2
001577 xxxx 001650461012 	fmp     half_pi3,x2
001600 xxxx 001452457000 	dfst	t3
001601 xxxx 001437431000 	fld     n2
001602 xxxx 001644461012 	fmp     half_pi2B,x2
001603 xxxx 001452477000 	dfad	t3
001604 xxxx 001452457000 	dfst	t3		" t3 = (n1*half_pi3 + n2*half_pi2)
001605 xxxx 001436431000 	fld     n1		" calculate n1*half_pi4 + n2*half_pi3
001606 xxxx 001654461012 	fmp     half_pi4,x2
001607 xxxx 001462457000 	dfst	t4
001610 xxxx 001437431000 	fld     n2
001611 xxxx 001650461012 	fmp     half_pi3,x2
001612 xxxx 001462477000 	dfad	t4
001613 xxxx 001462457000 	dfst	t4		" t4 = (n1*half_pi4 + n2*half_pi3)
001614 xxxx 001434431000 	fld     angle		" answer = angle - t1 - t2 - t3
001615 xxxx 001440577000 	dfsb	t1
001616 xxxx 001444577000 	dfsb	t2
001617 xxxx 001452577000 	dfsb	t3
001620 xxxx 001462577000 	dfsb	t4
001621 xxxx 000000710010 	tra     0,x0		" return to caller
001622 xxxx 001660236012 	ldq     code,x2		" pick the appropriate error message
001623 xxxx 001434740000 	stx0	temp		" save X0
001624 xxxx 001434220000 	ldx0	temp		" restore X0
001625 xxxx 000000621000 	eax1	0		" X1 = 0
001626 xxxx 400000431003 	fld     =0.0,du		" EAQ = 0, set indicators
001627 xxxx 000000710010 	tra     0,x0		" return to caller
001630 xxxx 000505746033 	dec	6.3661977236758134307553d-1
001631 xxxx 344710405225 
001632 xxxx 000505746033 	oct	000505746033,344710405225
001633 xxxx 344710405225 
001634 xxxx 070400000000 	oct	070400000000,000000000000
001635 xxxx 000000000000 
001636 xxxx 156400000000 	oct	156400000000,000000000000
001637 xxxx 000000000000 
001640 xxxx 002622077325 half_pi1B:	oct	002622077325,000000000000
001641 xxxx 000000000000 
001642 xxxx 002062207732 	oct	002062207732,000000000000
001643 xxxx 000000000000 
001644 xxxx 706420550604 half_pi2B:	oct	706420550604,000000000000
001645 xxxx 000000000000 
001646 xxxx 766050420550 	oct	766050420550,000000000000
001647 xxxx 000000000000 
001650 xxxx 616646114314 half_pi3: oct	616646114314,000000000000
001651 xxxx 000000000000 
001652 xxxx 752060432304 	oct	752060432304,000000000000
001653 xxxx 000000000000 
001654 xxxx 526505600670 half_pi4: oct	526505600670,000000000000
001655 xxxx 000000000000 
001656 xxxx 736061461213 	oct	736061461213,000000000000
001657 xxxx 000000000000 
001660 xxxx 000000000106 code:	dec	70,0,71
001661 xxxx 000000000000 
001662 xxxx 000000000107 
001663 xxxx 000000011000     even "(allocating 1 nop)
001664 xxxx 000777777777 	oct	000777777777,777777777777
001665 xxxx 777777777777 
001666 xxxx 002622077325 	dec	1.570796326794896619231d+00
001667 xxxx 042055060432 
001670 xxxx 776464202324 	dec	3.010299956639811952137d-01
001671 xxxx 117571775714 
001672 xxxx 776674557305 	dec	4.342944819032518276511d-01
001673 xxxx 223345034312 
001674 xxxx 002561250731 	dec	1.442695040888963407359d+00
001675 xxxx 225602774136 
001676 xxxx 000542710277 	dec	6.931471805599453094172d-01
001677 xxxx 575071736326 
001700 xxxx 376777777777 	oct	376777777777,777777777777
001701 xxxx 777777777777 
001702 xxxx 766435750650 	dec	1.745329251994329576923d-02
001703 xxxx 451235162127 
001704 xxxx 776505746033 	dec	3.183098861837906715377d-01
001705 xxxx 344710405225 
001706 xxxx 014712273406 	dec	5.729577951308232087679d+01
001707 xxxx 461701757341 
001710 xxxx 004622077325 	dec	3.141592653589793238462d+00
001711 xxxx 042055060432 
001712 xxxx 000622077325 	dec	7.853981633974483096156d-01
001713 xxxx 042055060432 
001714 xxxx 000552023631 	dec	7.071067811865475244008d-01
001715 xxxx 477473631102 
001716 xxxx 002673317272 	dec	1.732050807568877293527d+00
001717 xxxx 054114524717 
001720 xxxx 002552023631 	dec	1.414213562373095048801d+00
001721 xxxx 477473631102 
001722 xxxx 000000000000     bss     q,2
001724 xxxx 000000000000     bss     sign,2
001726 xxxx 001736710000     save    0,1,2,3,4
001727 xxxx 000000000000 
001730 xxxx 000000220003 
001731 xxxx 000001221003 
001732 xxxx 000002222003 
001733 xxxx 000003223003 
001734 xxxx 000004224003 
001735 xxxx 001727630000 
001736 xxxx 001727754000 
001737 xxxx 001727741000 
001740 xxxx 001730740000 
001741 xxxx 001731741000 
001742 xxxx 001732742000 
001743 xxxx 001733743000 
001744 xxxx 001734744000 
001745 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001746 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001747 xxxx 000001624000     eax4    1
001750 xxxx 400000475003 	fad     =0.0,du		" normalize input
001751 xxxx 000000621000 	eax1	0           " initialize X1 := shift = 1
001752 xxxx 002144425012 	fcmg	forty_five,x2
001753 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
001754 xxxx 001474700000     tsx0	principal_degrees_	"   call principal_degrees_
001755 xxxx 002136427012 	dfcmg	Teps1,x2		" if conversion to degrees underflows
001756 xxxx 002123604000 	tmi     infinity	"   return (infinity (degrees))
001757 xxxx 001702463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
001760 xxxx 000001301003 	canx1	=1,du
001761 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001762 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
001763 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, degrees*one_degree))
001764 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent
001765 xxxx 000000513000 	fneg	0           "   EAQ := -degrees*one_degree
001766 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -(degrees*one_degree)))
001767 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001770 xxxx 400000475003 	fad     =0.0,du		" normalize input
001771 xxxx 001712425012 	fcmg	quarter_pi,x2
001772 xxxx 000003605004 	tpl     3,ic		" if abs (angle) > quarter_pi:
001773 xxxx 777777623000     eax3	Cotangent	"   X3 := Cotangent
001774 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians)
001775 xxxx 001514700000 	tsx0	principal_radians_	" call principal_radians_
001776 xxxx 000001301003 	canx1	=1,du
001777 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002000 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
002001 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians))
002002 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent (???)
002003 xxxx 000000513000 	fneg	0           "   EAQ := -radians
002004 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -radians))
002005 xxxx 002015710000     save    0,1,2,3,4
002006 xxxx 000000000000 
002007 xxxx 000000220003 
002010 xxxx 000001221003 
002011 xxxx 000002222003 
002012 xxxx 000003223003 
002013 xxxx 000004224003 
002014 xxxx 002006630000 
002015 xxxx 002006754000 
002016 xxxx 002006741000 
002017 xxxx 002007740000 
002020 xxxx 002010741000 
002021 xxxx 002011742000 
002022 xxxx 002012743000 
002023 xxxx 002013744000 
002024 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002025 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
002026 xxxx 000000624000     eax4    0
002027 xxxx 400000475003 	fad     =0.0,du		" normalize input
002030 xxxx 000000621000 	eax1	0		" initialize X1 := shift = 1
002031 xxxx 002144425012 	fcmg	forty_five,x2
002032 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
002033 xxxx 001474700000     tsx0	principal_degrees_	"   call principal_degrees_
002034 xxxx 002136427012 	dfcmg	Teps1,x2		" if conversion to radians underflows
002035 xxxx 000002605004 	tpl     2,ic
002036 xxxx 400000431003     fld     =0.0,du     "   then use zero
002037 xxxx 001702463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
002040 xxxx 000001301003 	canx1	=1,du
002041 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002042 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
002043 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, degrees*one_degree))
002044 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
002045 xxxx 000000513000 	fneg	0           "   EAQ := -radians
002046 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, -(degrees*one_degree)))
002047 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
002050 xxxx 400000475003 	fad     =0.0,du		" normalize input
002051 xxxx 001712425012 	fcmg	quarter_pi,x2
002052 xxxx 000003605004 	tpl     3,ic		" if abs (angle) <= quarter_pi:
002053 xxxx 000001623000     eax3	Tangent
002054 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
002055 xxxx 001514700000 	tsx0	principal_radians_	" call principal_radians_
002056 xxxx 000001301003 	canx1	=1,du
002057 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002060 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
002061 xxxx 002064710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
002062 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
002063 xxxx 000000513000 	fneg	0		"   EAQ := -radians
002064 xxxx 002140425000     fcmg	Teps2		" if abs(x) < 5e-10:
002065 xxxx 002076605000     tpl     use_polynomial
002066 xxxx 000001103003     cmpx3	Tangent,du	"   if function = Tangent
002067 xxxx 000003601004     tnz     3,ic
002070 xxxx 000000471000 	frd     0		"     then return (result)
002071 xxxx 002133710014     tra     TanRets,x4
002072 xxxx 002142427012 	dfcmg	Teps3,x2		"   else if (1/result) overflows
002073 xxxx 002123604400     tmoz	infinity		"     then return (infinity (result))
002074 xxxx 002146525012 	fdi     one,x2    	"     else return (1/result)
002075 xxxx 002133710014     tra     TanRets,x4
002076 xxxx 001170472000 	dfstr	x
002077 xxxx 001170463000 	dfmp	x		" calculate xx = x*x
002100 xxxx 001400472000 	dfstr	xx
002101 xxxx 002160477012 	dfad	q1,x2		" calculate q = q(xx)
002102 xxxx 001400463000 	dfmp	xx
002103 xxxx 002156477012 	dfad	q0,x2
002104 xxxx 001722472000 	dfstr	q
002105 xxxx 001400433000 	dfld	xx		" calculate p(xx)
002106 xxxx 002154463012 	dfmp	Tp2,x2
002107 xxxx 002152477012 	dfad	Tp1,x2
002110 xxxx 001400463000 	dfmp	xx
002111 xxxx 002150477012 	dfad	Tp0,x2
002112 xxxx 001170463000 	dfmp	x		" calculate p = x*p(xx)
002113 xxxx 000001103003 	cmpx3	Tangent,du
002114 xxxx 000004601004 	tnz     4,ic		" if function = Tangent
002115 xxxx 001722567000     dfdv	q		" then return (p/q)
002116 xxxx 000000471000 	frd     0
002117 xxxx 002133710014     tra     TanRets,x4
002120 xxxx 001722527000 	dfdi	q		" else return (q/p)
002121 xxxx 000000471000 	frd     0
002122 xxxx 002133710014     tra     TanRets,x4
002123 xxxx 001724455000 	fst     sign
002124 xxxx 001700431000 	fld     max_value
002125 xxxx 001700475000 	fad     max_value		" signal overflow
002126 xxxx 001700431000 	fld     max_value
002127 xxxx 001724430000 	fszn	sign		" if sign >= 0
002130 xxxx 002133710014     tra     TanRets,x4
002131 xxxx 000000513000 	fneg	0		" else return (-max_value)
002132 xxxx 002133710014     tra     TanRets,x4
002133 xxxx 002007710000     return  tangent_degrees_
002134 xxxx 001730710000     return  cotangent_degrees_
002135 xxxx 000000011000 	even "(allocating 1 nop)
002136 xxxx 412712273406 Teps1:	dec	8.418858142948452884d-38
002137 xxxx 461701757347 
002140 xxxx 704422701372 Teps2:	dec	5.0d-10
002141 xxxx 023326451313 
002142 xxxx 404400000000 Teps3:	oct	404400000000,000000000001
002143 xxxx 000000000001 
002144 xxxx 014550000000 	dec	45.0d0
002145 xxxx 000000000000 
002146 xxxx 002400000000 one:	dec  1.d0
002147 xxxx 000000000000 
002150 xxxx 014764652342 Tp0:	dec	 6.26041119547433196d1
002151 xxxx 460137304603 
002152 xxxx 007101637667 Tp1:	dec	-6.97168400629442048d0
002153 xxxx 425655210475 
002154 xxxx 772423545326 Tp2:	dec	 6.73091025875915d-2
002155 xxxx 453071362122 
002156 xxxx 014764652342 q0:     dec	 6.260411195336057284d1
002157 xxxx 456547154111 
002160 xxxx 013102441001 q1:     dec	-2.78397212200427089d1
002161 xxxx 733050625573 
002162 xxxx 000000000000     bss xe, 2
002164 xxxx 000000000000     bss xm, 2
002166 xxxx 000000000000     bss bias, 2
002170 xxxx 000000000000     bss shift, 2
002172 xxxx 000000000000     bss	x_plus_y,2
002174 xxxx 000000000000 	bss	z,2
002176 xxxx 000000000000 	bss	zz,2
002200 xxxx 002206710000     save    0,1,3
002201 xxxx 000000000000 
002202 xxxx 000000220003 
002203 xxxx 000001221003 
002204 xxxx 000002223003 
002205 xxxx 002201630000 
002206 xxxx 002201754000 
002207 xxxx 002201741000 
002210 xxxx 002202740000 
002211 xxxx 002203741000 
002212 xxxx 002204743000 
002213 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002214 xxxx 002267700000 	tsx0	log2		" calculate log2 (x)
002215 xxxx 001670463000 	dfmp	log_10_of_2	" EAQ := log_10_of_2 * log2 (x)
002216 xxxx 000000471000 	frd     0
002217 xxxx 002202710000     return  log_base_10_
002220 xxxx 002226710000     save    0,1,3
002221 xxxx 000000000000 
002222 xxxx 000000220003 
002223 xxxx 000001221003 
002224 xxxx 000002223003 
002225 xxxx 002221630000 
002226 xxxx 002221754000 
002227 xxxx 002221741000 
002230 xxxx 002222740000 
002231 xxxx 002223741000 
002232 xxxx 002224743000 
002233 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002234 xxxx 002267700000 	tsx0	log2		" calculate log2 (x)
002235 xxxx 000000471000 	frd     0
002236 xxxx 002222710000     return  log_base_2_
002237 xxxx 002245710000     save    0,1,3
002240 xxxx 000000000000 
002241 xxxx 000000220003 
002242 xxxx 000001221003 
002243 xxxx 000002223003 
002244 xxxx 002240630000 
002245 xxxx 002240754000 
002246 xxxx 002240741000 
002247 xxxx 002241740000 
002250 xxxx 002242741000 
002251 xxxx 002243743000 
002252 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002253 xxxx 002267700000 	tsx0	log2		" calculate log2 (x)
002254 xxxx 001676463000 	dfmp	log_e_of_2	" EAQ := log_e_of_2 * log2 (x)
002255 xxxx 000000471000 	frd     0
002256 xxxx 002241710000     return  log_base_e_
002257 xxxx 000012236007 	ldq     10,dl
002260 xxxx 001700431000 	fld     max_value
002261 xxxx 000000513000 	fneg	0
002262 xxxx 300000710100 	tra     pr3|0
002263 xxxx 000011236007 	ldq     9,dl
002264 xxxx 001700431000 	fld     max_value
002265 xxxx 000000513000 	fneg	0
002266 xxxx 300000710100 	tra     pr3|0
002267 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
002270 xxxx 002257604000 	tmi     log_of_negative
002271 xxxx 002263600000 	tze     log_of_zero
002272 xxxx 002360515000 	fcmp	Lsquare_root_two	" check for x in the range [.707,1.414]
002273 xxxx 000006605004 	tpl     6,ic
002274 xxxx 002356515000     fcmp	Lsquare_root_half
002275 xxxx 000004604004     tmi     4,ic		" if square_root_half >= x & x <= square_root_two
002276 xxxx 002344623000     eax3	Lone		"   X3 := addr (1.0)
002277 xxxx 000000621010 	eax1	0,x0		"   copy return address
002300 xxxx 002316710000 	tra     part_log2_of_ratio	"   result = part_log2_of_ratio (x, 1)
002301 xxxx 002162456000 	ste     xe          "   store addr (x) -> expon in xe
002302 xxxx 000000411003 	lde     =0,du		"   addr (xm) -> expon = 0
002303 xxxx 002164455000 	fst     xm
002304 xxxx 002162235000 	lda     xe          "   A := 8/xe,10/0,18/garbage
002305 xxxx 000066733000 	lrs     72-18		"   AQ := 62/xe,10/0
002306 xxxx 172000411003 	lde     =61b25,du		"   EAQ := unnormalized float(xe)
002307 xxxx 000400575003 	fsb     =0.5,du		"   EAQ := float(xe) - 0.5
002310 xxxx 002166455000 	fst     bias
002311 xxxx 002164431000 	fld     xm
002312 xxxx 002356623000 	eax3	Lsquare_root_half	"   X3 := addr (square_root_half)
002313 xxxx 002316701000 	tsx1	part_log2_of_ratio	"   EAQ := part_log2_of_ratio (x, square_root_half)
002314 xxxx 002166475000     fad     bias            "   EAQ := part_log2_of_ratio (x, square_root_half) + bias  (= log2(x))
002315 xxxx 000000710010 	tra     0,x0		"   return result
002316 xxxx 000000477013 	dfad	0,x3		" EAQ := x + y
002317 xxxx 002172457000 	dfst	x_plus_y
002320 xxxx 000000577013 	dfsb	0,x3		" EAQ := x
002321 xxxx 000000577013 	dfsb	0,x3		" EAQ := x - y
002322 xxxx 002172567000 	dfdv	x_plus_y	" calculate z = (x - y) / (x + y)
002323 xxxx 002342425000 	fcmg	Leps
002324 xxxx 000003605404 	tpnz	3,ic		" if abs(z) < 4.1968417d-11
002325 xxxx 002346463000     dfmp	Lp0         "   EAQ := z * p0
002326 xxxx 000000710011 	tra     0,x1		"   return to caller
002327 xxxx 002174457000 	dfst	z
002330 xxxx 002174461000 	fmp     z           " calculate zz = z*z
002331 xxxx 002176455000 	fst     zz          " calculate p(zz)
002332 xxxx 002354461000 	fmp     Lp3
002333 xxxx 002352477000 	dfad	Lp2
002334 xxxx 002176461000 	fmp     zz
002335 xxxx 002350477000 	dfad	Lp1
002336 xxxx 002176461000 	fmp     zz
002337 xxxx 002346477000 	dfad	Lp0
002340 xxxx 002174463000 	dfmp	z           " calculate z*p(zz)
002341 xxxx 000000710011 	tra     0,x1		" return to caller
002342 xxxx 674561120744 Leps:	dec     4.1968417d-11
002343 xxxx 744762611260 
002344 xxxx 002400000000 Lone:	dec     1.0d0
002345 xxxx 000000000000 
002346 xxxx 004561250730 Lp0:    dec     .288539007275213810d01
002347 xxxx 772543241373 
002350 xxxx 000754342230 Lp1:    dec     .961800759210250522d00
002351 xxxx 541156441462 
002352 xxxx 000447154133 Lp2:    dec     .576584541348266310d00
002353 xxxx 107411741772 
002354 xxxx 776674533133 Lp3:    dec     .434255940790007142d0
002355 xxxx 371132642555 
002356 xxxx 000552023631         dec     7.071067811865475244008d-01
002357 xxxx 477473631102 
002360 xxxx 002552023631         dec     1.414213562373095048801d+00
002361 xxxx 477473631102 
002362 xxxx 000000000000     bss iy, 2
002364 xxxx 002371710000     save    0, 1
002365 xxxx 000000000000 
002366 xxxx 000000220003 
002367 xxxx 000001221003 
002370 xxxx 002365630000 
002371 xxxx 002365754000 
002372 xxxx 002365741000 
002373 xxxx 002366740000 
002374 xxxx 002367741000 
002375 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002376 xxxx 002472515000 	fcmp	lb          " if x <= -89.415987: 
002377 xxxx 002402605400     tpnz    e3
002400 xxxx 400000431003     fld     =0.0,du     "    result = 0
002401 xxxx 002366710000     return  exponential_
002402 xxxx 002470515000 e3:	fcmp	ub          " if x >= 88.0296926 goto overflow_error
002403 xxxx 002441605000 	tpl     overflow_error
002404 xxxx 001674463000 	dfmp	log_2_of_e	" y = x*log_2_of_e
002405 xxxx 002400475003 	fad     =1.0,du		" EAQ := y + 1
002406 xxxx 016000435003 	ufa     =7b25,du	" AQ := 8/floor(y+1),64/fraction part of y
002407 xxxx 002362755000 	sta     iy
002410 xxxx 776000275003 	ora     =o776000,du	" AQ := 8/-1,64/fraction part of y
002411 xxxx 016000411003 	lde     =7b25,du	" EAQ := ry = unnormalized y - floor(y+1)
002412 xxxx 400000475003 	fad     =0.0,du		" EAQ := ry = normalized y - floor(y+1)
002413 xxxx 002446425000 	fcmg	Eeps
002414 xxxx 002417605000     tpl     pe2
002415 xxxx 002400431003     fld     =1.0,du     "    result = 1.0
002416 xxxx 002366710000     return  exponential_
002417 xxxx 000000471000 pe2:frd     0
002420 xxxx 002174455000 	fst     z
002421 xxxx 002466461000 	fmp     Ep7		" result = p(z)
002422 xxxx 002464477000 	dfad	Ep6
002423 xxxx 002174461000 	fmp     z
002424 xxxx 002462477000 	dfad	Ep5
002425 xxxx 002174461000 	fmp     z
002426 xxxx 002460477000 	dfad	Ep4
002427 xxxx 002174461000 	fmp     z
002430 xxxx 002456477000 	dfad	Ep3
002431 xxxx 002174461000 	fmp     z
002432 xxxx 002454477000 	dfad	Ep2
002433 xxxx 002174461000 	fmp     z
002434 xxxx 002452477000 	dfad	Ep1
002435 xxxx 002174461000 	fmp     z
002436 xxxx 002450477000 	dfad	Ep0
002437 xxxx 002362415000 	ade     iy		" addr (result) -> expon = addr (result) -> expon + iy
002440 xxxx 002366710000     return  exponential_
002441 xxxx 001700431000 	fld     max_value
002442 xxxx 001700475000 	fad     max_value		" cause an overflow
002443 xxxx 001700431000 	fld     max_value
002444 xxxx 002366710000     return  exponential_
002445 xxxx 000000011000 	even "(allocating 1 nop)
002446 xxxx 604561250730 Eeps:	dec	1.56417309d-19
002447 xxxx 645767466564 
002450 xxxx 000777777777 Ep0:	dec	0.999999999959788989221d00
002451 xxxx 775171146647 
002452 xxxx 000542710277 Ep1:	dec	0.693147175773076184335d00
002453 xxxx 064122746305 
002454 xxxx 774753767514 Ep2:	dec	0.240226411617528907564d00
002455 xxxx 542060151212 
002456 xxxx 770706536015 Ep3:	dec	0.555033746338694398430d-01
002457 xxxx 336576334575 
002460 xxxx 764473046222 Ep4:	dec	0.961531912935043645900d-02
002461 xxxx 315773407052 
002462 xxxx 756533765571 Ep5:	dec	0.132743818109838796600d-02
002463 xxxx 150540215277 
002464 xxxx 750464227646 Ep6:	dec	0.147007243118869978000d-03
002465 xxxx 455135010071 
002466 xxxx 740550540762 Ep7:	dec	0.107493818486964670000d-04
002467 xxxx 530201244720 
002470 xxxx 016540074637 ub:	dec	8.802969265d01		" 2**127 - 2**100 = e**88.0296926
002471 xxxx 000053475651 
002472 xxxx 017232254036 lb:	dec	-8.9415987d01		" 2**(-129) = e**-89.415987
002473 xxxx 007734054130 
002474 xxxx 000000000000     bss     arctan_z,2
002476 xxxx 000000000000 	bss     y,2
002500 xxxx 000000000000 	bss     indicators,2
002502 xxxx 002512710000     save    0,1,2,3,4    
002503 xxxx 000000000000 
002504 xxxx 000000220003 
002505 xxxx 000001221003 
002506 xxxx 000002222003 
002507 xxxx 000003223003 
002510 xxxx 000004224003 
002511 xxxx 002503630000 
002512 xxxx 002503754000 
002513 xxxx 002503741000 
002514 xxxx 002504740000 
002515 xxxx 002505741000 
002516 xxxx 002506742000 
002517 xxxx 002507743000 
002520 xxxx 002510744000 
002521 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002522 xxxx 000000622000 	eax2        BFP		" no offset for BFP constants
002523 xxxx 002630700000 	tsx0        arctan		" EAQ := arctan (x)
002524 xxxx 001706463000 	dfmp        one_radian	" convert radians to degrees
002525 xxxx 000000471000 	frd         0
002526 xxxx 002504710000     return  arc_tangent_degrees_
002527 xxxx 002537710000     save    0,1,2,3,4
002530 xxxx 000000000000 
002531 xxxx 000000220003 
002532 xxxx 000001221003 
002533 xxxx 000002222003 
002534 xxxx 000003223003 
002535 xxxx 000004224003 
002536 xxxx 002530630000 
002537 xxxx 002530754000 
002540 xxxx 002530741000 
002541 xxxx 002531740000 
002542 xxxx 002532741000 
002543 xxxx 002533742000 
002544 xxxx 002534743000 
002545 xxxx 002535744000 
002546 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002547 xxxx 002476470000     fstr    y
002550 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002551 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002552 xxxx 002740701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002553 xxxx 001706463000 	dfmp      one_radian	" convert radians to degrees
002554 xxxx 000000471000 	frd       0
002555 xxxx 002531710000     return  arc_tangent_degrees_2_
002556 xxxx 002566710000     save    0,1,2,3,4    
002557 xxxx 000000000000 
002560 xxxx 000000220003 
002561 xxxx 000001221003 
002562 xxxx 000002222003 
002563 xxxx 000003223003 
002564 xxxx 000004224003 
002565 xxxx 002557630000 
002566 xxxx 002557754000 
002567 xxxx 002557741000 
002570 xxxx 002560740000 
002571 xxxx 002561741000 
002572 xxxx 002562742000 
002573 xxxx 002563743000 
002574 xxxx 002564744000 
002575 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002576 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002577 xxxx 002630700000 	tsx0      arctan		" EAQ := arctan (x)
002600 xxxx 000000471000 	frd     0
002601 xxxx 002560710000     return  arc_tangent_radians_
002602 xxxx 002612710000     save    0,1,2,3,4    
002603 xxxx 000000000000 
002604 xxxx 000000220003 
002605 xxxx 000001221003 
002606 xxxx 000002222003 
002607 xxxx 000003223003 
002610 xxxx 000004224003 
002611 xxxx 002603630000 
002612 xxxx 002603754000 
002613 xxxx 002603741000 
002614 xxxx 002604740000 
002615 xxxx 002605741000 
002616 xxxx 002606742000 
002617 xxxx 002607743000 
002620 xxxx 002610744000 
002621 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002622 xxxx 002476470000     fstr    y
002623 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002624 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002625 xxxx 002740701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002626 xxxx 000000471000 	frd	0
002627 xxxx 002604710000     return  arc_tangent_radians_2_
002630 xxxx 400000475003 	fad     =0.0,du		" normalize input
002631 xxxx 002474455000 	fst     arctan_z	" store argument z
002632 xxxx 000000624012 	eax4	0,x2		" initialize the table index with BFP or HFP offset
002633 xxxx 003040425012 	fcmg	tan_7_pi_by_32,x2
002634 xxxx 002670604000 	tmi     range_0_to_3
002635 xxxx 003054425012 	fcmg	tan_13_pi_by_32,x2
002636 xxxx 002656604000 	tmi     range_4_to_6
002637 xxxx 003060425012 	fcmg	tan_15_pi_by_32,x2
002640 xxxx 002654604000 	tmi     range_7
002641 xxxx 003010425012 	fcmg	ATeps1,x2
002642 xxxx 000003604004 	tmi     3,ic		" if abs (z) < 1e71b:
002643 xxxx 001666431012     fld     half_pi,x2      "   EAQ := radians = half_pi
002644 xxxx 002717710000 	tra     set_to_quadrant_1_or_4
002645 xxxx 400000515003 	fcmp	=0.0,du
002646 xxxx 000002605004 	tpl     2,ic
002647 xxxx 000000513000     fneg	0		"   EAQ := abs (z)
002650 xxxx 001000525003 	fdi     =-1.0,du		"   EAQ := -1/abs_z
002651 xxxx 002723703000 	tsx3	part_arctan	"   calculate part_arctan (-1/abs_z)
002652 xxxx 001666475012 	fad     half_pi,x2	"   EAQ := radians = half_pi - part_arctan (1/abs_z)
002653 xxxx 002717710000 	tra     set_to_quadrant_1_or_4
002654 xxxx 000030064003 	adx4	=24,du		" range = 7, tan_13_pi_by_32 <= abs (z) < tan_15_pi_by_32
002655 xxxx 002707710000 	tra     calculate_for_range_1_to_7
002656 xxxx 003050425012 	fcmg	tan_11_pi_by_32,x2
002657 xxxx 002662604000 	tmi     range_4_to_5
002660 xxxx 000024064003 	adx4	=20,du		" range = 6, tan_11_pi_by_32 <= abs (z) < tan_13_pi_by_32
002661 xxxx 002707710000 	tra     calculate_for_range_1_to_7
002662 xxxx 003044425012 	fcmg	tan_9_pi_by_32,x2
002663 xxxx 002666604000 	tmi     range_4
002664 xxxx 000020064003 	adx4	=16,du		" range = 5, tan_9_pi_by_32 <= abs (z) < tan_11_pi_by_32
002665 xxxx 002707710000 	tra     calculate_for_range_1_to_7
002666 xxxx 000014064003 	adx4	=12,du		" range = 4, tan_7_pi_by_32 <= abs (z) < tan_9_pi_by_32
002667 xxxx 002707710000 	tra     calculate_for_range_1_to_7
002670 xxxx 003030425012 	fcmg	tan_3_pi_by_32,x2
002671 xxxx 002700604000 	tmi     range_0_to_1
002672 xxxx 003034425012 	fcmg	tan_5_pi_by_32,x2
002673 xxxx 002676604000 	tmi     range_2
002674 xxxx 000010064003 	adx4	=8,du		" range = 3, tan_5_pi_by_32 <= abs (z) < tan_7_pi_by_32
002675 xxxx 002707710000 	tra     calculate_for_range_1_to_7
002676 xxxx 000004064003 	adx4	=4,du		" range = 2, tan_3_pi_by_32 <= abs (z) < tan_5_pi_by_32
002677 xxxx 002707710000 	tra     calculate_for_range_1_to_7
002700 xxxx 003024425012 	fcmg	tan_pi_by_32,x2
002701 xxxx 002707605000 	tpl	calculate_for_range_1_to_7
002702 xxxx 400000515003 	fcmp	=0.0,du
002703 xxxx 000002605004 	tpl     2,ic
002704 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002705 xxxx 002723703000 	tsx3	part_arctan	" EAQ := part_arctan (abs_z)
002706 xxxx 002717710000 	tra     set_to_quadrant_1_or_4
002707 xxxx 400000515003 	fcmp	=0.0,du
002710 xxxx 000002605004 	tpl     2,ic
002711 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002712 xxxx 003064477014 	dfad	one_over_u,x4	" EAQ := t = 1/u(range) - (1/(u(range)**2)+1) / (1/u(range) + abs_z)
002713 xxxx 003120527014 	dfdi	one_plus_one_over_u_squared,x4
002714 xxxx 003064477014 	dfad	one_over_u,x4
002715 xxxx 002723703000 	tsx3	part_arctan	" EAQ := part_arctan (t)
002716 xxxx 003154477014 	dfad	arctan_of_u,x4	" EAQ := radians = part_arctan (t) + arctan(u(range))
002717 xxxx 002474430000 	fszn	arctan_z	" set indicators
002720 xxxx 000000605010 	tpl     0,x0		" if z >= 0 then return (radians)
002721 xxxx 000000513000     fneg	0		" else return (-radians)
002722 xxxx 000000710010 	tra     0,x0
002723 xxxx 003014425012 	fcmg	ATeps2,x2		" if abs (z) < 5.7031627e10
002724 xxxx 000000604013 	tmi     0,x3		" then return (z)
002725 xxxx 002174472000 	dfstr	z
002726 xxxx 002174463000 	dfmp	z		" calculate zz = z*z
002727 xxxx 002176470000 	fstr	zz
002730 xxxx 003224461012 	fmp     ATp3,x2		" calculate p(zz)
002731 xxxx 003220477012 	dfad	ATp2,x2
002732 xxxx 002176461000 	fmp     zz
002733 xxxx 003214477012 	dfad	ATp1,x2
002734 xxxx 002176461000 	fmp     zz
002735 xxxx 003210477012 	dfad	ATp0,x2
002736 xxxx 002174461000 	fmp     z		" calculate z*p(zz)
002737 xxxx 000000710013 	tra     0,x3		" return
002740 xxxx 400000475003 	fad     =0.0,du		" normalize x
002741 xxxx 001170455000 	fst     x		" save normalized x for quadrant check
002742 xxxx 002476431000 	fld     y   	" load y
002743 xxxx 400000475003 	fad     =0.0,du		" normalize y
002744 xxxx 002476455000 	fst     y		" save normalized y for quadrant check
002745 xxxx 002755601000 	tnz     y_not_zero
002746 xxxx 001170430000 	fszn	x		" test if x = 0 also
002747 xxxx 002777600000 	tze     arctan2_domain_err	" 0/0 is error
002750 xxxx 001666433012 	dfld	half_pi,x2	" atan(x/0) =  + or - (half_pi)
002751 xxxx 001170430000 	fszn	x
002752 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
002753 xxxx 000000513000     fneg	0		" else return (-radians)
002754 xxxx 000000710011 	tra     0,x1
002755 xxxx 002500754000 	sti     indicators	" save indicators
002756 xxxx 003020634012 	ldi     no_overflow,x2
002757 xxxx 001170525000 	fdi     x		" EAQ := x/y
002760 xxxx 003005614000 	teo     quotient_too_large	" if overflow, atan(x,y) = pi/2 or -pi/2
002761 xxxx 003002615000 	teu     quotient_too_small	" if underflow, atan(x,y) = 0
002762 xxxx 002500634000 	ldi     indicators	" restore previous indicators
002763 xxxx 400000475003 	fad     =0.0,du		" set indicators
002764 xxxx 000002605004 	tpl     2,ic		" calculate z = abs (x,y)
002765 xxxx 000000513000     fneg	0
002766 xxxx 002630700000 	tsx0	arctan		" EAQ := arctan(z)
002767 xxxx 002476430000 	fszn	y		" set the quadrant
002770 xxxx 000003605004 	tpl     3,ic		" if y < 0 then
002771 xxxx 000000513000     fneg	0		"   radians = pi-radians
002772 xxxx 001710477012 	dfad	pi,x2
002773 xxxx 001170430000 	fszn	x
002774 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
002775 xxxx 000000513000     fneg	0		" else return (-radians)
002776 xxxx 000000710011 	tra     0,x1
002777 xxxx 000013236007 	ldq     11,dl
003000 xxxx 400000431003 	fld     =0.0,du
003001 xxxx 300000710100 	tra     pr3|0		" return to caller
003002 xxxx 002500634000 	ldi     indicators	" restore indicators
003003 xxxx 400000431003 	fld     =0.0,du		" radians = 0.0
003004 xxxx 002767710000 	tra     set_quadrant
003005 xxxx 002500634000 	ldi     indicators	" restore indicators
003006 xxxx 001666433012 	dfld	half_pi,x2	" radians = half_pi
003007 xxxx 002767710000 	tra     set_quadrant
003010 xxxx 220400000000 ATeps1:	oct	220400000000,000000000000	" 2**71 = 2.36e21
003011 xxxx 000000000000 
003012 xxxx 044400000000 	oct	044400000000,000000000000
003013 xxxx 000000000000 
003014 xxxx 704471421604 ATeps2:	dec	5.7031627d-10
003015 xxxx 407031702277 
003016 xxxx 762116304341 	oct	762116304341,000000000000
003017 xxxx 000000000000 
003020 xxxx 000000004000 	oct	000000004000,000000000000	" bit 25 is the overflow mask
003021 xxxx 000000000000 
003022 xxxx 000000004010 	oct	000000004010,000000000000	" bit 33 is the hex indicator
003023 xxxx 000000000000 
003024 xxxx 772623327342 	dec	.98491403d-1		" tan(pi/32)
003025 xxxx 551170653204 
003026 xxxx 000062332734 	oct	000062332734,000000000000
003027 xxxx 000000000000 
003030 xxxx 776466501014 	dec	.30334668d00		" tan(3*pi/32)
003031 xxxx 276317550567 
003032 xxxx 000233240406 	oct	000233240406,000000000000
003033 xxxx 000000000000 
003034 xxxx 000421526706 	dec	.53451114d00		" tan(5*pi/32)
003035 xxxx 632271614047 
003036 xxxx 000421526707 	oct	000421526707,000000000000
003037 xxxx 000000000000 
003040 xxxx 000644140012 	dec	.82067879d00		" tan(7*pi/32)
003041 xxxx 471104326120 
003042 xxxx 000644140013 	oct	000644140013,000000000000
003043 xxxx 000000000000 
003044 xxxx 002467737541 	dec	1.2185035d00		" tan(9*pi/32)
003045 xxxx 524374032261 
003046 xxxx 002046773754 	oct	002046773754,000000000000
003047 xxxx 000000000000 
003050 xxxx 002736742355 	dec	1.8708684d00		" tan(11*pi/32)
003051 xxxx 010752710074 
003052 xxxx 002073674236 	oct	002073674236,000000000000
003053 xxxx 000000000000 
003054 xxxx 004645753171 	dec	3.2965582d00		" tan(13*pi/32)
003055 xxxx 751342441016 
003056 xxxx 002151372636 	oct	002151372636,000000000000
003057 xxxx 000000000000 
003060 xxxx 010504715423 	dec	10.153170d00		" tan(15*pi/32)
003061 xxxx 054564714557 
003062 xxxx 002504715423 	oct	002504715423,000000000000
003063 xxxx 000000000000 
003064 xxxx 006501577670 	dec	5.0273394921258481045d0	" 1/tan(pi/16)
003065 xxxx 441107342042 
003066 xxxx 002240677734 	oct	002240677734,220443561021
003067 xxxx 220443561021 
003070 xxxx 004465011714 	dec	2.4142135623730950488d0	" 1/tan(2*pi/16)
003071 xxxx 637635714441 
003072 xxxx 002115202363 	oct	002115202363,147747363110
003073 xxxx 147747363110 
003074 xxxx 002577103070 	dec	1.4966057626654890176d0	" 1/tan(3*pi/16)
003075 xxxx 455164302501 
003076 xxxx 002057710307 	oct	002057710307,045516430250
003077 xxxx 045516430250 
003100 xxxx 002400000000 	dec	1.0d0			" 1/tan(4*pi/16)
003101 xxxx 000000000000 
003102 xxxx 002040000000 	oct	002040000000,000000000000
003103 xxxx 000000000000 
003104 xxxx 000526067012 	dec	.66817863791929891999d0	" 1/tan(5*pi/16)
003105 xxxx 533771440572 
003106 xxxx 000526067012 	oct	000526067012,533771440572
003107 xxxx 533771440572 
003110 xxxx 776650117146 	dec	.41421356237309504880d0	" 1/tan(6*pi/16)
003111 xxxx 376357144410 
003112 xxxx 000324047463 	oct	000324047463,177167462204
003113 xxxx 177167462204 
003114 xxxx 774627276570 	dec	.19891236737965800691d0	" 1/tan(7*pi/16)
003115 xxxx 052461260037 
003116 xxxx 000145657536 	oct	000145657536,012514254010
003117 xxxx 012514254010 
003120 xxxx 013133472163 	dec	-.26274142369088180356d02
003121 xxxx 441121370576 
003122 xxxx 005713347216 	oct	005713347216,344112137060
003123 xxxx 344112137060 
003124 xxxx 007112766063 	dec	-.68284271247461900976d01
003125 xxxx 140142063337 
003126 xxxx 003445373031 	oct	003445373031,460061031557
003127 xxxx 460061031557 
003130 xxxx 005141232450 	dec	-.32398288088435500410d01
003131 xxxx 425406626076 
003132 xxxx 003630246512 	oct	003630246512,105301545417
003133 xxxx 105301545417 
003134 xxxx 003000000000 	dec	-.20d1
003135 xxxx 000000000000 
003136 xxxx 003700000000 	oct	003700000000,000000000000
003137 xxxx 000000000000 
003140 xxxx 003215551173 	dec	-.14464626921716895685d01
003141 xxxx 721720634630 
003142 xxxx 003721555117 	oct	003721555117,372172063463
003143 xxxx 372172063463 
003144 xxxx 003324047463 	dec	-.11715728752538099024d01
003145 xxxx 177167462205 
003146 xxxx 003732404746 	oct	003732404746,317716746221
003147 xxxx 317716746221 
003150 xxxx 003365675771 	dec	-.10395661298965800348d01
003151 xxxx 760411653016 
003152 xxxx 003736567577 	oct	003736567577,176041165302
003153 xxxx 176041165302 
003154 xxxx 774622077325 	dec	.19634954084936207740d00	" pi/16
003155 xxxx 042055060432 
003156 xxxx 000144417665 	oct	000144417665,210413214107
003157 xxxx 210413214107 
003160 xxxx 776622077325 	dec	.39269908169872415481d00	" 2*pi/16
003161 xxxx 042055060432 
003162 xxxx 000311037552 	oct	000311037552,421026430215
003163 xxxx 421026430215 
003164 xxxx 000455457437 	dec	.58904862254808623221d00	" 3*pi/16
003165 xxxx 631441644324 
003166 xxxx 000455457437 	oct	000455457437,631441644324
003167 xxxx 631441644324 
003170 xxxx 000622077325 	dec	.78539816339744830962d00	" 4*pi/16
003171 xxxx 042055060432 
003172 xxxx 000622077325 	oct	000622077325,042055060432
003173 xxxx 042055060432 
003174 xxxx 000766517212 	dec	.98174770424681038702d00	" 5*pi/16
003175 xxxx 252470274541 
003176 xxxx 000766517212 	oct	000766517212,252470274541
003177 xxxx 252470274541 
003200 xxxx 002455457437 	dec	1.17809724509617246442d00	" 6*pi/16
003201 xxxx 631441644324 
003202 xxxx 002045545743 	oct	002045545743,763144164432
003203 xxxx 763144164432 
003204 xxxx 002537667372 	dec	1.37444678594553454182d00	" 7*pi/16
003205 xxxx 335647352367 
003206 xxxx 002053766737 	oct	002053766737,233564735237
003207 xxxx 233564735237 
003210 xxxx 000777777777 ATp0:	dec	.9999999999924517d00
003211 xxxx 777366325725 
003212 xxxx 000777777777 	oct	000777777777,777366325725
003213 xxxx 777366325725 
003214 xxxx 777252525261 ATp1:	dec	-.33333330840148d00
003215 xxxx 267741700306 
003216 xxxx 001525252530 	oct	001525252530,533760740143
003217 xxxx 533760740143 
003220 xxxx 774631445545 ATp2:	dec	.199987124164d00
003221 xxxx 571746370206 
003222 xxxx 000146311331 	oct	000146311331,336371476042
003223 xxxx 336371476042 
003224 xxxx 775337626574 ATp3:	dec	-.14072538d00
003225 xxxx 713546710627 
003226 xxxx 001667745537 	oct	001667745537,162731562146
003227 xxxx 162731562146 
003230 xxxx 400000475003     fad     =0.0,du		" normalize input arg
003231 xxxx 000000600017     tze     0,x7        " if x = 0 return (0)
003232 xxxx 003237605000 	tpl     calc_dsquare_root	" if x < 0:
003233 xxxx 000000513000     fneg	0           "   x = -x
003234 xxxx 001170457000 	dfst	x
003235 xxxx 000026236007 	ldq     22,dl
003236 xxxx 001170433000 	dfld	x
003237 xxxx 001170457000 	dfst	x           " store EAQ := input arg
003240 xxxx 001170220000 	ldx0	x           " X0 := addr (x) -> expon
003241 xxxx 000000411003 	lde     =0b25,du	" addr (m) -> expon = 0
003242 xxxx 002000300003 	canx0	=1b25,du	" calculate mod (e, 2)
003243 xxxx 000002600004 	tze     2,ic		" if mod (e, 2) = 1:
003244 xxxx 776000411003 	lde     =-1b25,du	"   EAQ := m = .5*m
003245 xxxx 001172457000 	dfst	m           " store EAQ := m
003246 xxxx 001170236000 	ldq     x           " Q := 8/expon,28/garbage
003247 xxxx 000034732000 	qrs     28          " Q := 28/0,8/expon
003250 xxxx 000001076007 	adq     =1,dl		" calculate e+1
003251 xxxx 000001732000 	qrs     1           " calculate divide (e+1, 2, 7)
003252 xxxx 000034736000 	qls     28          " position result in exponent field
003253 xxxx 001174756000 	stq     e           " store Q := e = divide (e+1, 2, 7)
003254 xxxx 001172433000 	dfld	m
003255 xxxx 003310461000 	fmp     DSp2		" calculate root_m_top = p(m)
003256 xxxx 003306475000 	fad     DSp1
003257 xxxx 001172461000 	fmp     m
003260 xxxx 003304475000 	fad     DSp0
003261 xxxx 001166455000 	fst     root_m
003262 xxxx 001172525000 	fdi     m           " calculate root_m = .5 * (root_m_top + m_top/root_m_top)
003263 xxxx 001166475000 	fad     root_m
003264 xxxx 000400461003 	fmp     =0.5,du
003265 xxxx 000000473000 	dfrd	0
003266 xxxx 001166457000 	dfst	root_m
003267 xxxx 001172527000 	dfdi	m           " calculate root_m = .5 * (root_m + m/root_m)
003270 xxxx 001166477000 	dfad	root_m
003271 xxxx 000400461003 	fmp     =0.5,du
003272 xxxx 000000473000 	dfrd	0
003273 xxxx 001166457000 	dfst	root_m      " calculate root_m + m/root_m
003274 xxxx 001172527000 	dfdi	m
003275 xxxx 001166477000 	dfad	root_m
003276 xxxx 776000415003 	ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
003277 xxxx 001174415000 	ade     e           " calculate addr (root_x) -> expon =
003300 xxxx 000000473000 	dfrd	0
003301 xxxx 000000710017 	tra     0,x7        " return (root_x)
003302 xxxx 000200000000 	oct	000200000000,000000000000	" 0.25
003303 xxxx 000000000000 
003304 xxxx 776411377603 DSp0:	dec	2.5927688d-1
003305 xxxx 406536706351 
003306 xxxx 002415257502 DSp1:	dec	1.0521212d0
003307 xxxx 413332156142 
003310 xxxx 777274054062 DSp2:	dec	-3.1632214d-1
003311 xxxx 066300621037 
003312 xxxx 000000000000 	bss     abs_x,2
003314 xxxx 000000000000 	bss     arg_x,2
003316 xxxx 000000000000     bss     yy, 2
003320 xxxx 000000000000 	bss     p,2
003322 xxxx 000000000000 	bss     space_used,2
003324 xxxx 003335710000     save    0,1,2,3,4,7    
003325 xxxx 000000000000 
003326 xxxx 000000220003 
003327 xxxx 000001221003 
003330 xxxx 000002222003 
003331 xxxx 000003223003 
003332 xxxx 000004224003 
003333 xxxx 000005227003 
003334 xxxx 003325630000 
003335 xxxx 003325754000 
003336 xxxx 003325741000 
003337 xxxx 003326740000 
003340 xxxx 003327741000 
003341 xxxx 003330742000 
003342 xxxx 003331743000 
003343 xxxx 003332744000 
003344 xxxx 003333747000 
003345 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
003346 xxxx 000000622000 	eax2	BFP
003347 xxxx 003417703000 	tsx3	arcsine
003350 xxxx 000000471000 	frd	0
003351 xxxx 003326710000     return  arc_sine_radians_
003352 xxxx 003363710000     save    0,1,2,3,4,7    
003353 xxxx 000000000000 
003354 xxxx 000000220003 
003355 xxxx 000001221003 
003356 xxxx 000002222003 
003357 xxxx 000003223003 
003360 xxxx 000004224003 
003361 xxxx 000005227003 
003362 xxxx 003353630000 
003363 xxxx 003353754000 
003364 xxxx 003353741000 
003365 xxxx 003354740000 
003366 xxxx 003355741000 
003367 xxxx 003356742000 
003370 xxxx 003357743000 
003371 xxxx 003360744000 
003372 xxxx 003361747000 
003373 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
003374 xxxx 000000622000 	eax2	BFP
003375 xxxx 003417703000 	tsx3	arcsine
003376 xxxx 001706463000 	dfmp	one_radian	" Convert to degrees
003377 xxxx 000000471000 	frd     0
003400 xxxx 003354710000     return  arc_sine_degrees_
003401 xxxx 000000622000 	eax2	BFP
003402 xxxx 003417703000 	tsx3	arcsine
003403 xxxx 000000513000 	fneg	0
003404 xxxx 001666477000 	dfad	half_pi		" convert to cosine
003405 xxxx 000000471000 	frd     0
003406 xxxx 300000710100 	tra	pr3|0		" Return to caller
003407 xxxx 000000622000 	eax2	BFP
003410 xxxx 003417703000 	tsx3	arcsine
003411 xxxx 001706463012 	dfmp	one_radian,x2	" convert to degrees
003412 xxxx 000000513000 	fneg	0
003413 xxxx 000000473000 	dfrd	0		" clean out unnecessary bottom bits
003414 xxxx 016550475003 	fad     =90.0,du		" convert to cosine
003415 xxxx 000000471000 	frd     0
003416 xxxx 300000710100 	tra	pr3|0		" Return to caller
003417 xxxx 000000471000 	frd     0           " round and normalize input ("arg_x")
003420 xxxx 003314455000 	fst     arg_x		" store sign of arg_x.
003421 xxxx 000002605004 	tpl     2,ic		" abs_x=abs(arg_x)
003422 xxxx 000000513000     fneg	0
003423 xxxx 003312455000 	fst     abs_x
003424 xxxx 000400425003 	fcmg	=0.5,du         " is abs_x in the range [0,.5)
003425 xxxx 003431605000 	tpl     above_bound_1	" no, find the correct range
003426 xxxx 003314431000 	fld     arg_x
003427 xxxx 003507704000 	tsx4	part_arcsine
003430 xxxx 000000710013 	tra     0,x3            " Return to entry
003431 xxxx 003566425012 	fcmg	bound_2,x2      " is abs_x in the range [.5, .866)
003432 xxxx 003445605000 	tpl     above_bound_2	" no, find correct range
003433 xxxx 003312461000 	fmp     abs_x           " EAQ = abs_x**2
003434 xxxx 003576461012 	fmp     two,x2          " EAQ = 2 * abs_x**2
003435 xxxx 002146575012 	fsb     one,x2          " EAQ = 2 * abs_x**2 - 1
003436 xxxx 003507704000 	tsx4	part_arcsine
003437 xxxx 001666477012 	dfad	half_pi,x2      " EAQ = part_asin + pi/2
003440 xxxx 000400461003 	fmp     =0.5,du         " EAQ = .5*part_asin + pi/4
003441 xxxx 003314430000 	fszn	arg_x           " was arg_x negative
003442 xxxx 000000605013 	tpl     0,x3            " no, return to entry
003443 xxxx 000000513000 	fneg	0               " EAQ = -EAQ
003444 xxxx 000000710013 	tra     0,x3            " Return to entry
003445 xxxx 003570425012 	fcmg	bound_3,x2      " is abs_x in the range [.866, .966)
003446 xxxx 003464605000 	tpl     above_bound_3	" no, find correct range
003447 xxxx 003312461000 	fmp     abs_x           " EAQ = abs_x**2
003450 xxxx 003312457000 	dfst	AStemp          " why not just abs_x?
003451 xxxx 003600461012 	fmp     eight8,x2       " EAQ = 8*abs_x**2
003452 xxxx 003600575012 	fsb     eight8,x2       " EAQ = 8*abs_x**2 - 8
003453 xxxx 003312463000 	dfmp	AStemp          " EAQ = 8*abs_x**4 - 8*abs_x**2
003454 xxxx 002146475012 	fad     one,x2          " EAQ = 8*abs_x**4 - 8*abs_x**2 + 1
003455 xxxx 003507704000 	tsx4	part_arcsine
003456 xxxx 003574477012 	dfad	three_pi_by_two,x2	" EAQ = part_asin + 3*pi/2
003457 xxxx 003302463012 	dfmp	one_quarter,x2	" EAQ = part_asin/4 + 3*pi/8
003460 xxxx 003314430000 	fszn	arg_x           " was arg_x negative
003461 xxxx 000000605013 	tpl     0,x3            " no, return to entry
003462 xxxx 000000513000 	fneg	0               " EAQ = -EAQ
003463 xxxx 000000710013 	tra     0,x3            " return to entry
003464 xxxx 003572425012 	fcmg	bound_4,x2	" is abs_x in the range [.966, 1]
003465 xxxx 003504605400 	tpnz	arcsine_domain_error
003466 xxxx 000400461003 	fmp     =0.5,du		" EAQ = abs_x/2
003467 xxxx 000000513000 	fneg	0           " EAQ = - abs_x/2
003470 xxxx 000400475003 	fad     =0.5,du		" EAQ = .5 - abs_x/2 or (1-abs_x)/2
003471 xxxx 003502707012     tsx7	square_root,x2	" call sqrt function
003472 xxxx 003507704000 	tsx4	part_arcsine	" EAQ = sqrt ((1 - abs_x)/2)
003473 xxxx 003576461012 	fmp     two,x2		" EAQ = 2*part_asin
003474 xxxx 000000513000 	fneg	0           " EAQ = - 2*part_asin
003475 xxxx 001666477012 	dfad	half_pi,x2	" EAQ = pi/2 - 2*part_asin
003476 xxxx 003314430000 	fszn	arg_x		" was arg_x negative
003477 xxxx 000000605013 	tpl     0,x3		" no, return to entry
003500 xxxx 000000513000 	fneg	0           " EAQ = -EAQ
003501 xxxx 000000710013 	tra     0,x3		" return to entry
003502 xxxx 003230710000     tra double_square_root_
003503 xxxx 000000011000 	nop
003504 xxxx 000072236007 	ldq	58,dl
003505 xxxx 400000431003 	fld	=0.0,du
003506 xxxx 300000710100 	tra	pr3|0		" return to caller
003507 xxxx 003602425012 	fcmg	formula_bound,x2	" Can we use a short polynomial?
003510 xxxx 003530604000 	tmi     small_formula       " Yup.
003511 xxxx 002476457000 	dfst	y
003512 xxxx 002476463000 	dfmp	y
003513 xxxx 003316457000 	dfst	yy          " yy = y*y
003514 xxxx 003552463012 	dfmp	ACp2,x2		" EAQ = yy*p2
003515 xxxx 003550477012 	dfad	ACp1,x2		" EAQ = p1 + yy*p2
003516 xxxx 003316463000 	dfmp	yy          " EAQ = yy*(p1 + yy*p2)
003517 xxxx 003546477012 	dfad	ACp0,x2		" EAQ = p0 + yy*(p1 + yy*p2)
003520 xxxx 003320457000 	dfst	p
003521 xxxx 003316433000 	dfld	yy          " EAQ = yy
003522 xxxx 003562477012 	dfad	ACq1,x2		" EAQ = q1 + yy
003523 xxxx 003316463000 	dfmp	yy          " EAQ = yy*(q1 + yy)
003524 xxxx 003560477012 	dfad	ACq0,x2		" EAQ = q0 + yy*(q1 + yy)
003525 xxxx 003320527000 	dfdi	p           " EAQ = p/q
003526 xxxx 002476463000 	dfmp	y           " EAQ = y*p/q
003527 xxxx 000000710014 	tra     0,x4		" Return from part_arcsine
003530 xxxx 003604425012 	fcmg	ACepsilon,x2	" Is any calculation necessary?
003531 xxxx 000000604014 	tmi     0,x4            " No. Small number. Just return.
003532 xxxx 002476457000 	dfst	y
003533 xxxx 002476463000 	dfmp	y
003534 xxxx 003316457000 	dfst	yy          " yy = y*y
003535 xxxx 003556463012 	dfmp	ACpp1,x2	" EAQ = yy*pp1
003536 xxxx 003554477012 	dfad	ACpp0,x2	" EAQ = pp0 + yy*pp1
003537 xxxx 003320457000 	dfst	pp
003540 xxxx 003316433000 	dfld	yy
003541 xxxx 003564477012 	dfad	ACqq0,x2	" EAQ = qq0 + yy
003542 xxxx 003320527000 	dfdi	pp          " EAQ = pp/qq
003543 xxxx 002476463000 	dfmp	y           " EAQ = y*pp/qq
003544 xxxx 000000710014 	tra     0,x4		" Return from part_arcsine
003545 xxxx 000000011000 	even "(allocating 1 nop)
003546 xxxx 006546503556 ACp0:       dec	.5603629044813127d01
003547 xxxx 674615323460 
003550 xxxx 007330527031 ACp1:       dec	-.46145309466645d01
003551 xxxx 443310603646 
003552 xxxx 776773374667 ACp2:       dec	.49559947478731d00
003553 xxxx 004024666576 
003554 xxxx 005344473435 ACpp0:      dec	-2.21393498174243d00
003555 xxxx 147621156306 
003556 xxxx 000503050602 ACpp1:      dec	.63101484054356d00
003557 xxxx 166633467044 
003560 xxxx 006546503556 ACq0:       dec	.5603629030606043d01
003561 xxxx 502571776373 
003562 xxxx 007234713661 ACq1:       dec	-.554846659934668d01
003563 xxxx 311556204324 
003564 xxxx 005344473435 ACqq0:      dec	-2.21393497792717d00
003565 xxxx 251250461716 
003566 xxxx 000673317272 bound_2:	dec	.866025404d0
003567 xxxx 072755035014 
003570 xxxx 000756433521 bound_3:	dec	.965925826d0
003571 xxxx 620404312164 
003572 xxxx 002400000000 bound_4:	dec	1.0d0
003573 xxxx 000000000000 
003574 xxxx 006455457437 	dec 	.471238898038468985787763d01
003575 xxxx 631441644324 
003576 xxxx 004400000000 two:	dec	2.0d0
003577 xxxx 000000000000 
003600 xxxx 010400000000 eight8:	dec	8d0
003601 xxxx 000000000000 
003602 xxxx 774413242502 	dec	0.13052619d0
003603 xxxx 524446250766 
003604 xxxx 704471421604 ACepsilon:	dec	5.7031627d-10
003605 xxxx 407031702277 
003606 xxxx 777777777000 	oct	777777777000
003607 xxxx 003612710000 crlf:	save
003610 xxxx 000000000000 
003611 xxxx 003610630000 
003612 xxxx 003610754000 
003613 xxxx 003610741000 
003614 xxxx 003623755000         sta     saveA
003615 xxxx 004416235000         lda     =012
003616 xxxx 000001420400         emCall  1
003617 xxxx 004417235000         lda     =015
003620 xxxx 000001420400         emcall  1
003621 xxxx 003623235000         lda     saveA
003622 xxxx 003611710000         return  crlf
003623 xxxx 000000000000 saveA:  bss     1
003624 xxxx 003633710000 ioa:    save    2, 4, 5, 6
003625 xxxx 000000000000 
003626 xxxx 000000222003 
003627 xxxx 000001224003 
003630 xxxx 000002225003 
003631 xxxx 000003226003 
003632 xxxx 003625630000 
003633 xxxx 003625754000 
003634 xxxx 003625741000 
003635 xxxx 003626742000 
003636 xxxx 003627744000 
003637 xxxx 003630745000 
003640 xxxx 003631746000 
003641 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
003642 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
003643 xxxx 000000626015         eax6    0, x5
003644 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
003645 xxxx 003662755000         sta     i29
003646 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
003647 xxxx 000033731000         ars     27      " determine word count
003650 xxxx 000006735000     	als     6       " count to upper word of tally
003651 xxxx 003662255000     	orsa    i29
003652 xxxx 000000626014     	eax6    0, x4   " address of string into X6
003653 xxxx 003662746000     	stx6    i29     " address to upper word of tally
003654 xxxx 003662235052 inext:  lda     i29, sc
003655 xxxx 000136115007         cmpa    =o000136,dl		" ^
003656 xxxx 003663600000         tze     iernot      " if so, go process it
003657 xxxx 000001420400 out1:  	emCall  1
003660 xxxx 003654607000     	ttf     inext
003661 xxxx 003626710000         return  ioa
003662 xxxx 000000000041 i29:	tallyb  0, 0, 1
003663 xxxx 003662235052 iernot: lda     i29, sc         " get next char ...
003664 xxxx 000136115007         cmpa    =o000136,dl     " is it another "^"?
003665 xxxx 003703600000         tze     i21             " No, just print it ...
003666 xxxx 000167115007         cmpa    =o000167,dl     " is it a "w"?
003667 xxxx 003705600000         tze     idoW            " do full word octal
003670 xxxx 000157115007         cmpa    =o000157,dl     " is it an "o"?
003671 xxxx 003733600000         tze     idoO            " print zero suppressed octal
003672 xxxx 000156115007         cmpa    =o000156,dl     " is it a "n"?
003673 xxxx 003756600000         tze     idoN            " octal w/ no spaces inserted
003674 xxxx 000144115007         cmpa    =o000144,dl     " is it a "d"?
003675 xxxx 004004600000         tze     idoD            " decimal
003676 xxxx 000141115007         cmpa    =o000141,dl     " is it a ^a?
003677 xxxx 004012600000         tze     idoA            " 4 char ascii display
003700 xxxx 000147115007         cmpa    =o000147,dl     " is it a ^g?
003701 xxxx 004023600000         tze     idoG            " 6 char GE BCD display
003702 xxxx 003657710000         tra     out1        " unknown just print it....
003703 xxxx 000001420400 i21:    emCall  1           " output A to console
003704 xxxx 003654710000         tra     inext
003705 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
003706 xxxx 004101702000         tsx2    octwd
003707 xxxx 004002757000         staq    ioaSafe     " bcd in AQ
003710 xxxx 000044773000         lrl     36          " A => Q
003711 xxxx 000006622000         eax2    6
003712 xxxx 000000235007 idoW2:  lda     =0, dl
003713 xxxx 000006737000         lls     6
003714 xxxx 000002420400         emCall  2           " output GE code char to console
003715 xxxx 777777622012         eax2    -1, 2
003716 xxxx 003712601000         tnz     idoW2
003717 xxxx 004002237000         ldaq    ioaSafe
003720 xxxx 000000235007         lda     =0, dl      " 0 => A
003721 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
003722 xxxx 000002420400         emcall  2
003723 xxxx 000006622000         eax2    6
003724 xxxx 000000235007 idoW3:  lda     =0,dl
003725 xxxx 000006737000         lls     6
003726 xxxx 000002420400         emCall  2
003727 xxxx 777777622012         eax2    -1, 2
003730 xxxx 003724601000         tnz     idoW3
003731 xxxx 000001065003         adx5    1,du
003732 xxxx 003654710000         tra     inext
003733 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
003734 xxxx 004101702000         tsx2    octwd
003735 xxxx 004002757000         staq    ioaSafe         " bcd in AQ
003736 xxxx 003754235000         lda     idOTly
003737 xxxx 003755755000         sta     idOT
003740 xxxx 003755235052 idO1:   lda     idOT, sc        " get char into A
003741 xxxx 000000115007         cmpa    =0, dl          " a zero?
003742 xxxx 003750601000         tnz     idONZ + 1       " nope
003743 xxxx 003740607000         ttf     idO1            " Yes, a Zero. Go for more
003744 xxxx 000002420400         emCall  2               " output a single 0
003745 xxxx 000001065003         adx5    1,du
003746 xxxx 003654710000         tra     inext
003747 xxxx 003755235052 idONZ:  lda     idOT, sc        " get char into A
003750 xxxx 000002420400         emCall  2
003751 xxxx 003747607000         ttf     idONZ           " Yes, a Zero. Go for more
003752 xxxx 000001065003         adx5    1,du
003753 xxxx 003654710000         tra     inext
003754 xxxx 004002001400 idOTly: tally   ioaSafe, 12, 0
003755 xxxx 000000000000 idOT:   bss     1
003756 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
003757 xxxx 004101702000         tsx2    octwd
003760 xxxx 004002757000         staq    ioaSafe     " bcd in AQ
003761 xxxx 000044773000         lrl     36          " A => Q
003762 xxxx 000006622000         eax2    6
003763 xxxx 000000235007 idoN2:  lda     =0,dl
003764 xxxx 000006737000         lls     6
003765 xxxx 000002420400         emCall  2           " output GE code char to console
003766 xxxx 777777622012         eax2    -1, 2
003767 xxxx 003763601000         tnz     idoN2
003770 xxxx 004002237000         ldaq    ioaSafe
003771 xxxx 000000235007         lda     =0, dl      " 0 => A
003772 xxxx 000006622000         eax2    6
003773 xxxx 000000235007 idoN3:  lda     =0, dl
003774 xxxx 000006737000         lls     6
003775 xxxx 000002420400         emCall  2
003776 xxxx 777777622012         eax2    -1, 2
003777 xxxx 003773601000         tnz     idoN3
004000 xxxx 000001065003         adx5    1,du
004001 xxxx 003654710000         tra     inext
004002 xxxx 000000000000 ioaSafe:  bss 2
004004 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
004005 xxxx 004034701000         call    toDec
004006 xxxx 004010710000 
004007 xxxx 000000000000 
004010 xxxx 000001065003         adx5    1,du
004011 xxxx 003654710000         tra     inext
004012 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
004013 xxxx 000004622000         eax2    4
004014 xxxx 000000235007 idoA2:  lda     =0,dl
004015 xxxx 000011737000         lls     9
004016 xxxx 000001420400         emCall  1
004017 xxxx 777777622012         eax2    -1, 2
004020 xxxx 004014601000         tnz     idoA2
004021 xxxx 000001065003         adx5    1,du        " into next argument
004022 xxxx 003654710000         tra     inext
004023 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
004024 xxxx 000006622000         eax2    6
004025 xxxx 000000235007 idoG2:  lda     =0,dl
004026 xxxx 000006737000         lls     6
004027 xxxx 000002420400         emCall  2
004030 xxxx 777777622012         eax2    -1, 2
004031 xxxx 004025601000         tnz     idoG2
004032 xxxx 000001065003         adx5    1,du        " into next argument
004033 xxxx 003654710000         tra     inext
004034 xxxx 004037710000 toDec:  save    "2,3,4,5,6,7
004035 xxxx 000000000000 
004036 xxxx 004035630000 
004037 xxxx 004035754000 
004040 xxxx 004035741000 
004041 xxxx 004420116000         cmpq    =-34359738368       " the weird one?
004042 xxxx 004046601000         tnz     toDec2
004043 xxxx 004100235000         lda     decMTly             " just print it and be done with it
004044 xxxx 004074755000         sta     decTly
004045 xxxx 004064710000         tra     toDec1
004046 xxxx 004070756000 toDec2: stq     decNo
004047 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
004050 xxxx 004052605000         tpl     toDec0      " No
004051 xxxx 004070336000         lcq     decNo       " -decNo => Q
004052 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
004053 xxxx 000060075007         ada     =o060,dl    " add ascii '0' (=1A0) to A
004054 xxxx 004074755045         sta     decTly, scr " start writing characters backwards
004055 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
004056 xxxx 004052601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
004057 xxxx 004070235000         lda     decNo
004060 xxxx 000000115007         cmpa    =0,dl
004061 xxxx 004064605000         tpl     toDec1
004062 xxxx 000055235007         lda     =o055,dl    " (-) => A
004063 xxxx 004074755045         sta     decTly, scr " write (-) sign
004064 xxxx 004074235052 toDec1: lda     decTly, sc
004065 xxxx 000001420400         emCall  1
004066 xxxx 004064607000         ttf     toDec1
004067 xxxx 004036710000         return  toDec
004070 xxxx 000000000000 decNo:  dec     0
004071 xxxx 000000000000 decBuf: bss     3
004074 xxxx 004073000040 decTly: tallyb  decBuf+2, , 0
004075 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35
004076 xxxx 065071067063 
004077 xxxx 070063066070 
004100 xxxx 004075001440 decMTly:tallyb  decMM, 12, 0
004101 xxxx 004116742000 octwd:	stx2	octx2
004102 xxxx 000006622000 	eax2	6
004103 xxxx 000003736000 	qls     3
004104 xxxx 000003777000 	llr     3
004105 xxxx 777777622012 	eax2	-1,2
004106 xxxx 004103605400 	tpnz	*-3
004107 xxxx 004140756000 	stq     octtemp
004110 xxxx 000006622000 	eax2	6
004111 xxxx 000003736000 	qls     3
004112 xxxx 000003777000 	llr     3
004113 xxxx 777777622012 	eax2	-1,2
004114 xxxx 004111605400 	tpnz	*-3
004115 xxxx 004140235000 	lda     octtemp
004116 xxxx 004116622000 octx2:	eax2	*
004117 xxxx 000000710012 	tra     0,2
004120 xxxx 004136742000 hexwd:	stx2	hexx2
004121 xxxx 000044773000 	lrl     36          "shift to Q
004122 xxxx 000006622000 	eax2	6           "	process 6 characters
004123 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
004124 xxxx 000004737000 	lls     4           "shift in 4 bits
004125 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
004126 xxxx 004130604400 	tmoz	*+2
004127 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
004130 xxxx 000006773000 	lrl     6
004131 xxxx 004140235000 	lda     octtemp		"get temporary
004132 xxxx 000006737000 	lls     6           "insert new character
004133 xxxx 004140755000 	sta     octtemp		"and store
004134 xxxx 777777622012 	eax2	-1,2		"decrement index
004135 xxxx 004123605400 	tpnz	hexloop
004136 xxxx 004136622000 hexx2:	eax2	*
004137 xxxx 000000710012 	tra     0,2		"return to caller
004140 xxxx 000000000000 octtemp:	oct	0
004141 xxxx 000000633000 rd_clock:	rccl                " read the clock
004142 xxxx 004264757000 cv_clock:	staq	rdctime     " save clock reading
004143 xxxx 004235742000 	stx2	datx2               " save XR's
004144 xxxx 004236740000 	stx0	datx2+1             " ..
004145 xxxx 000034235007 	lda     28,dl               " Initialize montab
004146 xxxx 004267755000 	sta     montab+1			" to prime Feb
004147 xxxx 004264237000 	ldaq	rdctime             " Get clock reading
004150 xxxx 000001737000 	lls     1                   " Set for dvf
004151 xxxx 004421507000 	dvf     =1000000			" Get seconds since 1900.
004152 xxxx 000044777000 	llr     36                  " Into Q.
004153 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
004154 xxxx 004250755000 	sta     rdclock.sec         " Save for inspection.
004155 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
004156 xxxx 004247755000 	sta     rdclock.min
004157 xxxx 000006627000 	eax7	6
004160 xxxx 004240702000 	tsx2	datecv              " Convert the minutes.
004161 xxxx 004260176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
004162 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
004163 xxxx 004257756000 	stq     rdclock.day_of_century	" save for  later.
004164 xxxx 004246755000 	sta     rdclock.hr          " Hours since daybreak.
004165 xxxx 004240702000 	tsx2	datecv              " Convert the hours
004166 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
004167 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
004170 xxxx 004172604000 	tmi     *+2                 " no
004171 xxxx 004267054000 	aos     montab+1			" allow for feb 29
004172 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
004173 xxxx 003555036007 	adlq	1901,dl
004174 xxxx 004256756000 	stq     rdclock.year		" Save
004175 xxxx 000044777000 	llr     36
004176 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
004177 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
004200 xxxx 004203601000 	tnz     *+3                 " No.
004201 xxxx 000001176007 	sbq     1,dl                " Adjust year and
004202 xxxx 000555235007 	lda     365,dl              " day numbers.
004203 xxxx 004256056000 	asq     rdclock.year		" Add in years complete.
004204 xxxx 000000626000 	eax6	0                   " search for correct month
004205 xxxx 030220520201 	rpt     12,1,tmi			" ..
004206 xxxx 004266175016 	sba     montab,6			" subtract off days for each month
004207 xxxx 777777075016 	ada     -1,6                " put back last entry
004210 xxxx 000001075007 	ada     1,dl                " plus one more
004211 xxxx 004253755000 	sta     rdclock.day_of_month	" Day of month
004212 xxxx 004240702000 	tsx2	datecv              " convert day
004213 xxxx 000000635016 	eaa     0,6
004214 xxxx 004266135003 	sbla	montab,du			" get index into month table
004215 xxxx 000022771000 	arl     18                  "..
004216 xxxx 004251755000 	sta     rdclock.month		" Save month number
004217 xxxx 004313236005 	ldq     rdc.months-1,al		" Get name of month.
004220 xxxx 004252756000 	stq     rdclock.month_name
004221 xxxx 004240702000 	tsx2	datecv              " convert month
004222 xxxx 000000024400 	mvne	(),(),()			" edit the date and time
004223 xxxx 004263070010 	desc4ns	date,8
004224 xxxx 004302000014 	desc9a	datedit,12
004225 xxxx 004264020014 	desc6a	rdctime,12
004226 xxxx 004257236000 	ldq     rdclock.day_of_century
004227 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
004230 xxxx 000007506007 	div     7,dl
004231 xxxx 004254755000 	sta     rdclock.day_of_week
004232 xxxx 004305236005 	ldq     rdc.days,al         " Get name of day.
004233 xxxx 004255756000 	stq     rdclock.day_name
004234 xxxx 004264237000 	ldaq	rdctime             " get conversion in AQ
004235 xxxx 004235622000 datx2:	eax2	*			" restore XR's
004236 xxxx 004236620000 	eax0    *               " ..
004237 xxxx 000000710012 	tra     0,2             " return to caller
004240 xxxx 004262755000 datecv:	sta	datenum			" save number
004241 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
004242 xxxx 004262000004 	desc9a	datenum,4
004243 xxxx 004263070002 	desc4ns	date,2
004244 xxxx 777776627017 	eax7	-2,7			" move offset index
004245 xxxx 000000710012 	tra     0,2             " and return
004246 xxxx 000000000000 	bss	,1
004247 xxxx 000000000000 	bss	,1
004250 xxxx 000000000000 	bss	,1
004251 xxxx 000000000000 	bss	,1
004252 xxxx 000000000000 	bss	,1
004253 xxxx 000000000000 	bss	,1
004254 xxxx 000000000000 	bss	,1
004255 xxxx 000000000000 	bss	,1
004256 xxxx 000000000000 	bss	,1
004257 xxxx 000000000000 	bss	,1
004260 xxxx 000000000007     dec     7   "8
004261 xxxx 160163164040     aci     'pst '
004262 xxxx 000000000000 datenum:	bss	,1
004263 xxxx 000000000000 date:	bss	,1
004264 xxxx 000000000000 rdctime:	bss	,2
004266 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
004267 xxxx 000000000034 
004270 xxxx 000000000037 
004271 xxxx 000000000036 
004272 xxxx 000000000037 
004273 xxxx 000000000036 
004274 xxxx 000000000037 
004275 xxxx 000000000037 
004276 xxxx 000000000036 
004277 xxxx 000000000037 
004300 xxxx 000000000036 
004301 xxxx 000000000037 
004302 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
004303 xxxx 061322021322 
004304 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
004305 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat '
004306 xxxx 155157156040 
004307 xxxx 164165145040 
004310 xxxx 167145144040 
004311 xxxx 164150165162 
004312 xxxx 146162151040 
004313 xxxx 163141164040 
004314 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec '
004315 xxxx 146145142040 
004316 xxxx 155141162040 
004317 xxxx 141160162040 
004320 xxxx 155141171040 
004321 xxxx 152165156040 
004322 xxxx 152165154040 
004323 xxxx 141165147040 
004324 xxxx 163145160164 
004325 xxxx 157143164040 
004326 xxxx 156157166040 
004327 xxxx 144145143040 
004330 xxxx 772631463146 single-precision literal (=0.100000)
004331 xxxx 774631463146 single-precision literal (=0.200000)
004332 xxxx 776777777363 single-precision literal (=0.499999)
004333 xxxx 000400000000 single-precision literal (=0.500000)
004334 xxxx 000400000206 single-precision literal (=0.500001)
004335 xxxx 000411255321 single-precision literal (=0.518240)
004336 xxxx 000546314631 single-precision literal (=0.700000)
004337 xxxx 000721727024 single-precision literal (=0.910000)
004340 xxxx 000777171243 single-precision literal (=0.998510)
004341 xxxx 000777777776 single-precision literal (=1.000000)
004342 xxxx 002400000000 single-precision literal (=1.000000)
004344 xxxx 004622077325 double-precision literal (=3.141593)
004345 xxxx 042055060301 
004346 xxxx 002400000000 single-precision literal (=1.000000)
004347 xxxx 002400000000 single-precision literal (=1.000000)
004350 xxxx 012440000000 single-precision literal (=18.000000)
004351 xxxx 014460000000 single-precision literal (=38.000000)
004352 xxxx 014720000000 single-precision literal (=58.000000)
004353 xxxx 016470000000 single-precision literal (=78.000000)
004354 xxxx 016755645706 single-precision literal (=123.456000)
004355 xxxx 024612431704 single-precision literal (=789.101112)
004356 xxxx 002400000000 single-precision literal (=1.000000)
004357 xxxx 002474030177 single-precision literal (=1.234560)
004360 xxxx 007135170060 single-precision literal (=-6.543210)
004361 xxxx 014420000000 single-precision literal (=34.000000)
004362 xxxx 015360000000 single-precision literal (=-34.000000)
004363 xxxx 014740000000 single-precision literal (=60.000000)
004364 xxxx 014550000000 single-precision literal (=45.000000)
004365 xxxx 010612702436 single-precision literal (=12.340000)
004366 xxxx 015040000000 single-precision literal (=-60.000000)
004367 xxxx 015230000000 single-precision literal (=-45.000000)
004370 xxxx 011165075341 single-precision literal (=-12.340000)
004371 xxxx 014740000000 single-precision literal (=60.000000)
004372 xxxx 014550000000 single-precision literal (=45.000000)
004373 xxxx 010612702436 single-precision literal (=12.340000)
004374 xxxx 015040000000 single-precision literal (=-60.000000)
004375 xxxx 015230000000 single-precision literal (=-45.000000)
004376 xxxx 011165075341 single-precision literal (=-12.340000)
004377 xxxx 014740000000 single-precision literal (=60.000000)
004400 xxxx 014550000000 single-precision literal (=45.000000)
004401 xxxx 010612702436 single-precision literal (=12.340000)
004402 xxxx 015040000000 single-precision literal (=-60.000000)
004403 xxxx 015230000000 single-precision literal (=-45.000000)
004404 xxxx 011165075341 single-precision literal (=-12.340000)
004405 xxxx 004622077325 single-precision literal (=3.141593)
004406 xxxx 004400000000 single-precision literal (=2.000000)
004407 xxxx 004622077325 single-precision literal (=3.141593)
004410 xxxx 004622077325 single-precision literal (=3.141593)
004411 xxxx 004622077325 single-precision literal (=3.141593)
004412 xxxx 004622077325 single-precision literal (=3.141593)
004413 xxxx 004533741242 single-precision literal (=2.718282)
004414 xxxx 004533741242 single-precision literal (=2.718282)
004415 xxxx 000000000000 decimal literal (=0)
004416 xxxx 000000000012 octal literal (=o12)
004417 xxxx 000000000015 octal literal (=o15)
004420 xxxx 400000000000 decimal literal (=-34359738368)
004421 xxxx 000003641100 decimal literal (=1000000)
