!SIZE 004270
000000 xxxx 004007702000     tsx2	rd_clock
000001 xxxx 000020757000     staq	Date        "MM/DD HH:MM
000002 xxxx 003472701000     call    ioa(msgHello, Date, Date+1)
000003 xxxx 000010710000 
000004 xxxx 000000000000 
000005 xxxx 000011000000 
000006 xxxx 000020000000 
000007 xxxx 000021000000 
000010 xxxx 000022710000     tra     main_
000011 xxxx 030124150151 msgHello:   acc     "This is TestFP ...^g^g\r\n"
000012 xxxx 163040151163 
000013 xxxx 040124145163 
000014 xxxx 164106120040 
000015 xxxx 056056056136 
000016 xxxx 147136147015 
000017 xxxx 012040040040 
000020 xxxx 000000000000     bss     Date, 2
000022 xxxx 003220701000     call    arc_sine_degrees_(=.1)
000023 xxxx 000026710000 
000024 xxxx 000000000000 
000025 xxxx 004176000000 
000026 xxxx 000006420400     emCall  6
000027 xxxx 003455701000     call    crlf
000030 xxxx 000032710000 
000031 xxxx 000000000000 
000032 xxxx 003220701000     call    arc_sine_degrees_(=.2)
000033 xxxx 000036710000 
000034 xxxx 000000000000 
000035 xxxx 004177000000 
000036 xxxx 000006420400     emCall  6
000037 xxxx 003455701000     call    crlf
000040 xxxx 000042710000 
000041 xxxx 000000000000 
000042 xxxx 003220701000     call    arc_sine_degrees_(=.499999)
000043 xxxx 000046710000 
000044 xxxx 000000000000 
000045 xxxx 004200000000 
000046 xxxx 000006420400     emCall  6
000047 xxxx 003455701000     call    crlf
000050 xxxx 000052710000 
000051 xxxx 000000000000 
000052 xxxx 003220701000     call    arc_sine_degrees_(=.5)
000053 xxxx 000056710000 
000054 xxxx 000000000000 
000055 xxxx 004201000000 
000056 xxxx 000006420400     emCall  6
000057 xxxx 003455701000     call    crlf
000060 xxxx 000062710000 
000061 xxxx 000000000000 
000062 xxxx 003220701000     call    arc_sine_degrees_(=.500001)
000063 xxxx 000066710000 
000064 xxxx 000000000000 
000065 xxxx 004202000000 
000066 xxxx 000006420400     emCall  6
000067 xxxx 003455701000     call    crlf
000070 xxxx 000072710000 
000071 xxxx 000000000000 
000072 xxxx 003220701000     call    arc_sine_degrees_(=.51823962601)
000073 xxxx 000076710000 
000074 xxxx 000000000000 
000075 xxxx 004203000000 
000076 xxxx 000006420400     emCall  6
000077 xxxx 003455701000     call    crlf
000100 xxxx 000102710000 
000101 xxxx 000000000000 
000102 xxxx 003220701000     call    arc_sine_degrees_(=.7)
000103 xxxx 000106710000 
000104 xxxx 000000000000 
000105 xxxx 004204000000 
000106 xxxx 000006420400     emCall  6
000107 xxxx 003455701000     call    crlf
000110 xxxx 000112710000 
000111 xxxx 000000000000 
000112 xxxx 003220701000     call    arc_sine_degrees_(=.91)
000113 xxxx 000116710000 
000114 xxxx 000000000000 
000115 xxxx 004205000000 
000116 xxxx 000006420400     emCall  6
000117 xxxx 003455701000     call    crlf
000120 xxxx 000122710000 
000121 xxxx 000000000000 
000122 xxxx 003220701000     call    arc_sine_degrees_(=.9985096709)
000123 xxxx 000126710000 
000124 xxxx 000000000000 
000125 xxxx 004206000000 
000126 xxxx 000006420400     emCall  6
000127 xxxx 003455701000     call    crlf
000130 xxxx 000132710000 
000131 xxxx 000000000000 
000132 xxxx 003220701000     call    arc_sine_degrees_(=.99999999)
000133 xxxx 000136710000 
000134 xxxx 000000000000 
000135 xxxx 004207000000 
000136 xxxx 000006420400     emCall  6
000137 xxxx 003455701000     call    crlf
000140 xxxx 000142710000 
000141 xxxx 000000000000 
000142 xxxx 003220701000     call    arc_sine_degrees_(=1.0) " 90
000143 xxxx 000146710000 
000144 xxxx 000000000000 
000145 xxxx 004210000000 
000146 xxxx 000006420400     emCall  6
000147 xxxx 003455701000     call    crlf
000150 xxxx 000152710000 
000151 xxxx 000000000000 
000152 xxxx 004212433000     dfld     =3.1415926535897932d0   " 1.77245385091
000153 xxxx 003076707000     tsx7    double_square_root_
000154 xxxx 000006420400     emCall  6
000155 xxxx 003455701000     call    crlf
000156 xxxx 000160710000 
000157 xxxx 000000000000 
000160 xxxx 002424701000     call    arc_tangent_radians_(=1.0)
000161 xxxx 000164710000 
000162 xxxx 000000000000 
000163 xxxx 004214000000 
000164 xxxx 006400461003     fmp     =4.0,du
000165 xxxx 000006420400     emCall  6
000166 xxxx 003455701000     call    crlf
000167 xxxx 000171710000 
000170 xxxx 000000000000 
000171 xxxx 002350701000     call    arc_tangent_degrees_(=1.0)
000172 xxxx 000175710000 
000173 xxxx 000000000000 
000174 xxxx 004215000000 
000175 xxxx 000006420400     emCall  6
000176 xxxx 003455701000     call    crlf
000177 xxxx 000201710000 
000200 xxxx 000000000000 
000201 xxxx 002350701000     call    arc_tangent_degrees_(=18.0)
000202 xxxx 000205710000 
000203 xxxx 000000000000 
000204 xxxx 004216000000 
000205 xxxx 000006420400     emCall  6
000206 xxxx 003455701000     call    crlf
000207 xxxx 000211710000 
000210 xxxx 000000000000 
000211 xxxx 002350701000     call    arc_tangent_degrees_(=38.0)
000212 xxxx 000215710000 
000213 xxxx 000000000000 
000214 xxxx 004217000000 
000215 xxxx 000006420400     emCall  6
000216 xxxx 003455701000     call    crlf
000217 xxxx 000221710000 
000220 xxxx 000000000000 
000221 xxxx 002350701000     call    arc_tangent_degrees_(=58.0)
000222 xxxx 000225710000 
000223 xxxx 000000000000 
000224 xxxx 004220000000 
000225 xxxx 000006420400     emCall  6
000226 xxxx 003455701000     call    crlf
000227 xxxx 000231710000 
000230 xxxx 000000000000 
000231 xxxx 002350701000     call    arc_tangent_degrees_(=78.0)
000232 xxxx 000235710000 
000233 xxxx 000000000000 
000234 xxxx 004221000000 
000235 xxxx 000006420400     emCall  6
000236 xxxx 003455701000     call    crlf
000237 xxxx 000241710000 
000240 xxxx 000000000000 
000241 xxxx 002375701000     call    arc_tangent_degrees_2_(=123.456, =789.101112)
000242 xxxx 000246710000 
000243 xxxx 000000000000 
000244 xxxx 004222000000 
000245 xxxx 004223000000 
000246 xxxx 000006420400     emCall  6
000247 xxxx 003455701000     call    crlf
000250 xxxx 000252710000 
000251 xxxx 000000000000 
000252 xxxx 002232701000     call    exponential_(=1.0)
000253 xxxx 000256710000 
000254 xxxx 000000000000 
000255 xxxx 004224000000 
000256 xxxx 000006420400     emCall  6
000257 xxxx 003455701000     call    crlf
000260 xxxx 000262710000 
000261 xxxx 000000000000 
000262 xxxx 002232701000     call    exponential_(=1.23456)
000263 xxxx 000266710000 
000264 xxxx 000000000000 
000265 xxxx 004225000000 
000266 xxxx 000006420400     emCall  6
000267 xxxx 003455701000     call    crlf
000270 xxxx 000272710000 
000271 xxxx 000000000000 
000272 xxxx 002232701000     call    exponential_(=-6.54321)
000273 xxxx 000276710000 
000274 xxxx 000000000000 
000275 xxxx 004226000000 
000276 xxxx 000006420400     emCall  6
000277 xxxx 003455701000     call    crlf
000300 xxxx 000302710000 
000301 xxxx 000000000000 
000302 xxxx 002105701000     call    log_base_e_(=3.1415926535897932)
000303 xxxx 000306710000 
000304 xxxx 000000000000 
000305 xxxx 004227000000 
000306 xxxx 000006420400     emCall  6
000307 xxxx 003455701000     call    crlf
000310 xxxx 000312710000 
000311 xxxx 000000000000 
000312 xxxx 002046701000     call    log_base_10_(=3.1415926535897932)
000313 xxxx 000316710000 
000314 xxxx 000000000000 
000315 xxxx 004230000000 
000316 xxxx 000006420400     emCall  6
000317 xxxx 003455701000     call    crlf
000320 xxxx 000322710000 
000321 xxxx 000000000000 
000322 xxxx 001574701000     call    cotangent_degrees_(=34.0)
000323 xxxx 000326710000 
000324 xxxx 000000000000 
000325 xxxx 004231000000 
000326 xxxx 000006420400     emCall  6
000327 xxxx 003455701000     call    crlf
000330 xxxx 000332710000 
000331 xxxx 000000000000 
000332 xxxx 001574701000     call    cotangent_degrees_(=-34.0)
000333 xxxx 000336710000 
000334 xxxx 000000000000 
000335 xxxx 004232000000 
000336 xxxx 000006420400     emCall  6
000337 xxxx 003455701000     call    crlf
000340 xxxx 000342710000 
000341 xxxx 000000000000 
000342 xxxx 001653701000     call    tangent_degrees_(=60.0)
000343 xxxx 000346710000 
000344 xxxx 000000000000 
000345 xxxx 004233000000 
000346 xxxx 000006420400     emCall  6
000347 xxxx 003455701000     call    crlf
000350 xxxx 000352710000 
000351 xxxx 000000000000 
000352 xxxx 001653701000     call    tangent_degrees_(=45.0)
000353 xxxx 000356710000 
000354 xxxx 000000000000 
000355 xxxx 004234000000 
000356 xxxx 000006420400     emCall  6
000357 xxxx 003455701000     call    crlf
000360 xxxx 000362710000 
000361 xxxx 000000000000 
000362 xxxx 001653701000     call    tangent_degrees_(=12.34)
000363 xxxx 000366710000 
000364 xxxx 000000000000 
000365 xxxx 004235000000 
000366 xxxx 000006420400     emCall  6
000367 xxxx 003455701000     call    crlf
000370 xxxx 000372710000 
000371 xxxx 000000000000 
000372 xxxx 001653701000     call    tangent_degrees_(=-60.0)
000373 xxxx 000376710000 
000374 xxxx 000000000000 
000375 xxxx 004236000000 
000376 xxxx 000006420400     emCall  6
000377 xxxx 003455701000     call    crlf
000400 xxxx 000402710000 
000401 xxxx 000000000000 
000402 xxxx 001653701000     call    tangent_degrees_(=-45.0)
000403 xxxx 000406710000 
000404 xxxx 000000000000 
000405 xxxx 004237000000 
000406 xxxx 000006420400     emCall  6
000407 xxxx 003455701000     call    crlf
000410 xxxx 000412710000 
000411 xxxx 000000000000 
000412 xxxx 001653701000     call    tangent_degrees_(=-12.34)
000413 xxxx 000416710000 
000414 xxxx 000000000000 
000415 xxxx 004240000000 
000416 xxxx 000006420400     emCall  6
000417 xxxx 003455701000     call    crlf
000420 xxxx 000422710000 
000421 xxxx 000000000000 
000422 xxxx 001056701000     call    cosine_degrees_(=60.0)
000423 xxxx 000426710000 
000424 xxxx 000000000000 
000425 xxxx 004241000000 
000426 xxxx 000006420400     emCall  6
000427 xxxx 003455701000     call    crlf
000430 xxxx 000432710000 
000431 xxxx 000000000000 
000432 xxxx 001056701000     call    cosine_degrees_(=45.0)
000433 xxxx 000436710000 
000434 xxxx 000000000000 
000435 xxxx 004242000000 
000436 xxxx 000006420400     emCall  6
000437 xxxx 003455701000     call    crlf
000440 xxxx 000442710000 
000441 xxxx 000000000000 
000442 xxxx 001056701000     call    cosine_degrees_(=12.34)
000443 xxxx 000446710000 
000444 xxxx 000000000000 
000445 xxxx 004243000000 
000446 xxxx 000006420400     emCall  6
000447 xxxx 003455701000     call    crlf
000450 xxxx 000452710000 
000451 xxxx 000000000000 
000452 xxxx 001056701000     call    cosine_degrees_(=-60.0)
000453 xxxx 000456710000 
000454 xxxx 000000000000 
000455 xxxx 004244000000 
000456 xxxx 000006420400     emCall  6
000457 xxxx 003455701000     call    crlf
000460 xxxx 000462710000 
000461 xxxx 000000000000 
000462 xxxx 001056701000     call    cosine_degrees_(=-45.0)
000463 xxxx 000466710000 
000464 xxxx 000000000000 
000465 xxxx 004245000000 
000466 xxxx 000006420400     emCall  6
000467 xxxx 003455701000     call    crlf
000470 xxxx 000472710000 
000471 xxxx 000000000000 
000472 xxxx 001056701000     call    cosine_degrees_(=-12.34)
000473 xxxx 000476710000 
000474 xxxx 000000000000 
000475 xxxx 004246000000 
000476 xxxx 000006420400     emCall  6
000477 xxxx 003455701000     call    crlf
000500 xxxx 000502710000 
000501 xxxx 000000000000 
000502 xxxx 001113701000     call    sine_degrees_(=60.0)
000503 xxxx 000506710000 
000504 xxxx 000000000000 
000505 xxxx 004247000000 
000506 xxxx 000006420400     emCall  6
000507 xxxx 003455701000     call    crlf
000510 xxxx 000512710000 
000511 xxxx 000000000000 
000512 xxxx 001113701000     call    sine_degrees_(=45.0)
000513 xxxx 000516710000 
000514 xxxx 000000000000 
000515 xxxx 004250000000 
000516 xxxx 000006420400     emCall  6
000517 xxxx 003455701000     call    crlf
000520 xxxx 000522710000 
000521 xxxx 000000000000 
000522 xxxx 001113701000     call    sine_degrees_(=12.34)
000523 xxxx 000526710000 
000524 xxxx 000000000000 
000525 xxxx 004251000000 
000526 xxxx 000006420400     emCall  6
000527 xxxx 003455701000     call    crlf
000530 xxxx 000532710000 
000531 xxxx 000000000000 
000532 xxxx 001113701000     call    sine_degrees_(=-60.0)
000533 xxxx 000536710000 
000534 xxxx 000000000000 
000535 xxxx 004252000000 
000536 xxxx 000006420400     emCall  6
000537 xxxx 003455701000     call    crlf
000540 xxxx 000542710000 
000541 xxxx 000000000000 
000542 xxxx 001113701000     call    sine_degrees_(=-45.0)
000543 xxxx 000546710000 
000544 xxxx 000000000000 
000545 xxxx 004253000000 
000546 xxxx 000006420400     emCall  6
000547 xxxx 003455701000     call    crlf
000550 xxxx 000552710000 
000551 xxxx 000000000000 
000552 xxxx 001113701000     call    sine_degrees_(=-12.34)
000553 xxxx 000556710000 
000554 xxxx 000000000000 
000555 xxxx 004254000000 
000556 xxxx 000006420400     emCall  6
000557 xxxx 003455701000     call    crlf
000560 xxxx 000562710000 
000561 xxxx 000000000000 
000562 xxxx 000756701000     call    sqrt(=3.1415926535897932)   " 1.77245385091
000563 xxxx 000566710000 
000564 xxxx 000000000000 
000565 xxxx 004255000000 
000566 xxxx 000006420400     emCall  6
000567 xxxx 003455701000     call    crlf
000570 xxxx 000572710000 
000571 xxxx 000000000000 
000572 xxxx 000756701000     call    sqrt(=2.0)   " 1.414...
000573 xxxx 000576710000 
000574 xxxx 000000000000 
000575 xxxx 004256000000 
000576 xxxx 000006420400     emCall  6
000577 xxxx 003455701000     call    crlf
000600 xxxx 000602710000 
000601 xxxx 000000000000 
000602 xxxx 000720701000     call    ALOG10(=3.1415926535897932)     " .497149873
000603 xxxx 000606710000 
000604 xxxx 000000000000 
000605 xxxx 004257000000 
000606 xxxx 000006420400     emCall  6
000607 xxxx 003455701000     call    crlf
000610 xxxx 000612710000 
000611 xxxx 000000000000 
000612 xxxx 000724701000     call    ALOG(=3.1415926535897932)      " 1.144729886
000613 xxxx 000616710000 
000614 xxxx 000000000000 
000615 xxxx 004260000000 
000616 xxxx 000006420400     emCall  6
000617 xxxx 003455701000     call    crlf
000620 xxxx 000622710000 
000621 xxxx 000000000000 
000622 xxxx 000720701000     call    ALOG10(=2.71828182846)
000623 xxxx 000626710000 
000624 xxxx 000000000000 
000625 xxxx 004261000000 
000626 xxxx 000006420400     emCall  6
000627 xxxx 003455701000     call    crlf
000630 xxxx 000632710000 
000631 xxxx 000000000000 
000632 xxxx 000724701000     call    ALOG(=2.71828182846)
000633 xxxx 000636710000 
000634 xxxx 000000000000 
000635 xxxx 004262000000 
000636 xxxx 000006420400     emCall  6
000637 xxxx 003455701000     call    crlf
000640 xxxx 000642710000 
000641 xxxx 000000000000 
000642 xxxx 000000616000     dis
000643 xxxx 000646710000 LOGS:   SAVE    
000644 xxxx 000000000000 
000645 xxxx 000644630000 
000646 xxxx 000644754000 
000647 xxxx 000644741000 
000650 xxxx 000002431031         FLD     2, 1*       " X = (2**I) * F = ARGUMENT
000651 xxxx 000000573000         FNO
000652 xxxx 000702600000         TZE     ERR1        " ERROR IF X = 0
000653 xxxx 000710604000         TMI     ERR2        " ERROR IF X NEGATIVE
000654 xxxx 002400515003 BEGIN:  FCMP    =1.0,DU
000655 xxxx 000706600000         TZE     UNITY       " LOG(1) = 0
000656 xxxx 000673456000         STE     I           " STORE I AT BINARY POINT 7
000657 xxxx 000000411003         LDE     0, DU       " OBTAIN F
000660 xxxx 000740477000         DFAD    SRHLF
000661 xxxx 000744457000         DFST    Z
000662 xxxx 000742577000         DFSB    SRTWO
000663 xxxx 000744567000         DFDV    Z
000664 xxxx 000744457000         DFST    Z           " Z = (F - SQRT(1/2))/(F + SQRT(1/2))
000665 xxxx 000744463000         DFMP    Z           " Z^2
000666 xxxx 000736577000         DFSB    C           " Z^2-C
000667 xxxx 000734527000         DFDI    B           " B/(Z^2-C)
000670 xxxx 000732477000         DFAD    A           " A+B/(Z^2-C)
000671 xxxx 000744463000         DFMP    Z           " Z(A+B/(Z^2-C))
000672 xxxx 000744457000         DFST    Z           " Z = Z*(A+(B/(Z^2-C))) = LOG2 (F) + 1/2
000673 xxxx 000000235003 I:      LDA     0, DU       " ==== THIS GET CHANGED ====
000674 xxxx 000000236003         LDQ     0, DU
000675 xxxx 016000411003         LDE     =7B25, DU   " FLOAT I
000676 xxxx 000400575003         FSB     =0.5, DU
000677 xxxx 000744477000         DFAD    Z           " LOG2(X) = I + LOG2(F)
000700 xxxx 000700463000 INDIC:  DFMP    *           " CONVERT TO BASE 10 OR E
000701 xxxx 000645710000         RETURN  LOGS
000702 xxxx 000746701000 ERR1:   CALL    .FXEM.(EALN1)   " ERROR EXIT NUMBER 1 (X=0)
000703 xxxx 000706710000 
000704 xxxx 000000000000 
000705 xxxx 000730000000 
000706 xxxx 400000431003 UNITY:  FLD     =0.0, DU
000707 xxxx 000645710000         RETURN  LOGS
000710 xxxx 000746701000 ERR2:   CALL    .FXEM.(EALN2)   " ERROR EXIT NUMBER 2 (X IS NEGATIVE)
000711 xxxx 000714710000 
000712 xxxx 000000000000 
000713 xxxx 000731000000 
000714 xxxx 000000513000         FNEG
000715 xxxx 000654710000         TRA     BEGIN
000716 xxxx 000000616000         dis
000717 xxxx 000000011000         even "(allocating 1 nop)
000720 xxxx 000700750000 ALOG10: STC2    INDIC       " REAL COMMON LOGARITHM
000721 xxxx 000643710000         TRA     LOGS
000722 xxxx 776464202324         DEC     .301029996D0
000723 xxxx 175727157154 
000724 xxxx 000700750000 ALOG:   STC2    INDIC       " REAL NATURAL LOGARITHM
000725 xxxx 000643710000         TRA     LOGS
000726 xxxx 000542710277         DEC     6.93147180559D-1
000727 xxxx 575030531171 
000730 xxxx 010440000000 EALN1:  DEC     9.
000731 xxxx 010500000000 EALN2:  DEC     10.
000732 xxxx 002512601750 A:      DEC     .12920070987D1
000733 xxxx 530734427226 
000734 xxxx 005256062222 B:      DEC     -.26398577031D1
000735 xxxx 154274032423 
000736 xxxx 002650103142 C:      DEC     .16567626301D1
000737 xxxx 014073125631 
000740 xxxx 000552023631 SRHLF:  DEC     .707106781187D0     " sqrt(2) / 2
000741 xxxx 477513560151 
000742 xxxx 002552023631 SRTWO:  DEC     .1414213562374D1    " SQRT(2)
000743 xxxx 477513560151 
000744 xxxx 000000000000 Z:      BSS     2
000746 xxxx 000751710000 .FXEM.: save
000747 xxxx 000000000000 
000750 xxxx 000747630000 
000751 xxxx 000747754000 
000752 xxxx 000747741000 
000753 xxxx 000002235031         lda     2, 1*
000754 xxxx 000001420400         emcall  1
000755 xxxx 000000616000         dis
000756 xxxx 000763710000 sqrt:   save    0, 1
000757 xxxx 000000000000 
000760 xxxx 000000220003 
000761 xxxx 000001221003 
000762 xxxx 000757630000 
000763 xxxx 000757754000 
000764 xxxx 000757741000 
000765 xxxx 000760740000 
000766 xxxx 000761741000 
000767 xxxx 000002431031         FLD     2, 1*               " X = ARGUMENT
000770 xxxx 000000573000         FNO
000771 xxxx 000773601000         tnz     sqrt.1
000772 xxxx 000760710000         return  sqrt                " if x = 0 return (0)
000773 xxxx 000777605000 sqrt.1:	tpl     calc_square_root	" if x < 0:
000774 xxxx 000000513000         fneg	0                   "   x = -x
000775 xxxx 001036455000         fst     x
000776 xxxx 001036431000         fld     x		"   calculate sqrt (abs(x))
000777 xxxx 001036455000         fst     x           " store EA := input arg
001000 xxxx 001036220000         ldx0	x           " X0 := addr (x) -> expon
001001 xxxx 000000411003         lde     =0b25,du	" addr (m) -> expon = 0
001002 xxxx 002000300003         canx0	=1b25,du	" calculate mod (e, 2)
001003 xxxx 000002600004         tze     2,ic		" if mod (e, 2) = 1:
001004 xxxx 776000411003         lde     =-1b25,du	"   EA := m = .5*m
001005 xxxx 001036236000         ldq     x           " Q := 8/expon,28/garbage
001006 xxxx 000034732000         qrs     28          " Q := 28/0,8/expon
001007 xxxx 000001076007         adq     =1,dl		" calculate e+1
001010 xxxx 000001732000         qrs     1           " calculate divide (e+1, 2, 7)
001011 xxxx 000034736000         qls     28          " position result in exponent field
001012 xxxx 001042756000         stq     e           " store Q := e = divide (e+1, 2, 7)
001013 xxxx 004263236000         ldq     =0          " clear Q
001014 xxxx 001040457000         dfst	m           " store EAQ := m
001015 xxxx 001050461000         fmp     p2          " calculate root_m = p(m)
001016 xxxx 001046475000         fad     p1
001017 xxxx 001040461000         fmp     m
001020 xxxx 001044475000         fad     p0
001021 xxxx 001034455000         fst     root_m
001022 xxxx 001040525000         fdi     m           " calculate root_m = .5 * (root_m + m/root_m)
001023 xxxx 001034475000         fad     root_m
001024 xxxx 000400461003         fmp     =0.5,du
001025 xxxx 001034457000         dfst	root_m      " calculate root_m + float (m, 63)/root_m
001026 xxxx 001040527000         dfdi	m
001027 xxxx 001034477000         dfad	root_m
001030 xxxx 776000415003         ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
001031 xxxx 001042415000         ade     e           " calculate addr (root_x) -> expon =
001032 xxxx 000000471000         frd     0
001033 xxxx 000760710000         return  sqrt        " return (root_x)
001034 xxxx 000000000000         bss     root_m,2
001036 xxxx 000000000000         bss     x,2
001040 xxxx 000000000000         bss     m,2
001042 xxxx 000000000000         bss     e,2
001044 xxxx 776411377603 p0:     dec	2.5927688d-1
001045 xxxx 406536706351 
001046 xxxx 002415257502 p1:     dec	1.0521212d0
001047 xxxx 413332156142 
001050 xxxx 777274054062 p2:     dec	-3.1632214d-1
001051 xxxx 066300621037 
001052 xxxx 000400000000 scale:	oct	000400000000	" 0.5
001053 xxxx 000100000000         oct	000100000000	" 0.25*0.5 = 0.125
001054 xxxx 000200000000         oct	000200000000	" 0.25
001055 xxxx 000040000000         oct	000040000000	" 0.25*0.25 = 0.0625
001056 xxxx 001066710000     save    0,1,2,3,4
001057 xxxx 000000000000 
001060 xxxx 000000220003 
001061 xxxx 000001221003 
001062 xxxx 000002222003 
001063 xxxx 000003223003 
001064 xxxx 000004224003 
001065 xxxx 001057630000 
001066 xxxx 001057754000 
001067 xxxx 001057741000 
001070 xxxx 001060740000 
001071 xxxx 001061741000 
001072 xxxx 001062742000 
001073 xxxx 001063743000 
001074 xxxx 001064744000 
001075 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001076 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001077 xxxx 000000623000     eax3    0       " cosine return
001100 xxxx 400000475003 	fad     =0.0,du		" normalize input
001101 xxxx 001264425012 	fcmg	one_eighty,x2	" if abs_angle <= 180:
001102 xxxx 001200604000 	tmi     case1_degrees	" then no angle reduction is necessary
001103 xxxx 001342700000 	tsx0	principal_degrees_
001104 xxxx 001174710011 	tra     case_degrees+1,x1	" select appropriate case
001105 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001106 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
001107 xxxx 001556425012 	fcmg	pi,x2		" if abs (angle) <= pi
001110 xxxx 001155604000 	tmi     case1_radians	" then no angle reduction is necessary
001111 xxxx 001362700000 	tsx0	principal_radians_
001112 xxxx 001151710011 	tra     case_radians+1,x1	" select appropriate case
001113 xxxx 001123710000     save    0,1,2,3,4
001114 xxxx 000000000000 
001115 xxxx 000000220003 
001116 xxxx 000001221003 
001117 xxxx 000002222003 
001120 xxxx 000003223003 
001121 xxxx 000004224003 
001122 xxxx 001114630000 
001123 xxxx 001114754000 
001124 xxxx 001114741000 
001125 xxxx 001115740000 
001126 xxxx 001116741000 
001127 xxxx 001117742000 
001130 xxxx 001120743000 
001131 xxxx 001121744000 
001132 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001133 xxxx 000000622000 	eax2	BFP         " no offset for BFP constants
001134 xxxx 000001623000     eax3    1           " sine return
001135 xxxx 400000475003 	fad     =0.0,du         " normalize input
001136 xxxx 001262425012 	fcmg	ninety,x2		" if abs (angle) < pi/2
001137 xxxx 001213604000 	tmi     case0_degrees	" then no angle reduction is necessary
001140 xxxx 001342700000 	tsx0	principal_degrees_
001141 xxxx 001173710011 	tra     case_degrees,x1	" select appropriate case
001142 xxxx 000000622000 	eax2	BFP             " no offset for BFP constants
001143 xxxx 400000475003 	fad     =0.0,du         " normalize input
001144 xxxx 001534425012 	fcmg	half_pi,x2      " if abs (angle) <= pi/2
001145 xxxx 001217604400 	tmoz	case0_radians	" then no angle reduction is necessary
001146 xxxx 001362700000 	tsx0	principal_radians_
001147 xxxx 001150710011 	tra     case_radians,x1	" Case select appropriate case_radians
001150 xxxx 001217710000 	tra     case0_radians
001151 xxxx 001155710000 	tra     case1_radians
001152 xxxx 001163710000 	tra     case2_radians
001153 xxxx 001165710000 	tra     case3_radians
001154 xxxx 001217710000 	tra     case0_radians
001155 xxxx 400000475003 	fad     =0.0,du		" set indicators
001156 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001157 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001160 xxxx 001256477012 	dfad	half_pi1A,x2
001161 xxxx 001260477012 	dfad	half_pi2A,x2
001162 xxxx 001217710000 	tra     part_sine_radians
001163 xxxx 000000513000 	fneg	0
001164 xxxx 001217710000 	tra     part_sine_radians
001165 xxxx 400000475003 	fad     =0.0,du		" set indicators
001166 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001167 xxxx 000000513000     fneg	0
001170 xxxx 001256577012 	dfsb	half_pi1A,x2
001171 xxxx 001260577012 	dfsb	half_pi2A,x2
001172 xxxx 001217710000 	tra     part_sine_radians
001173 xxxx 001213710000 	tra     case0_degrees
001174 xxxx 001200710000 	tra     case1_degrees
001175 xxxx 001205710000 	tra     case2_degrees
001176 xxxx 001207710000 	tra     case3_degrees
001177 xxxx 001213710000 	tra     case0_degrees
001200 xxxx 400000475003 	fad     =0.0,du		" set indicators
001201 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001202 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001203 xxxx 001262475012 	fad     ninety,x2
001204 xxxx 001213710000 	tra     part_sine_degrees
001205 xxxx 000000513000 	fneg	0
001206 xxxx 001213710000 	tra     part_sine_degrees
001207 xxxx 400000475003 	fad     =0.0,du		" set indicators
001210 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001211 xxxx 000000513000 	fneg
001212 xxxx 001262575012 	fsb     ninety,x2
001213 xxxx 001252427012 	dfcmg	eps2,x2		" if conversion to radians underflows
001214 xxxx 000002605004 	tpl     2,ic
001215 xxxx 400000431003     fld     =0.0,du		" then use zero
001216 xxxx 001550463012 	dfmp	one_degree,x2	" convert to radians.
001217 xxxx 001254427012 	dfcmg	eps3,x2		" if abs (x) < 5e-10:
001220 xxxx 000003605004 	tpl     3,ic
001221 xxxx 000000471000     frd     0
001222 xxxx 001243710013     tra     rets, x3
001223 xxxx 001036457000 	dfst	x
001224 xxxx 001036463000 	dfmp	x           " calculate xx = x*x
001225 xxxx 001246457000 	dfst	xx
001226 xxxx 001300461012 	fmp     tp5,x2		" calculate p(xx)
001227 xxxx 001276477012 	dfad	tp4,x2
001230 xxxx 001246461000 	fmp     xx
001231 xxxx 001274477012 	dfad	tp3,x2
001232 xxxx 001246461000 	fmp     xx
001233 xxxx 001272477012 	dfad	tp2,x2
001234 xxxx 001246461000 	fmp     xx
001235 xxxx 001270477012 	dfad	tp1,x2
001236 xxxx 001246463000 	dfmp	xx
001237 xxxx 001266477012 	dfad	tp0,x2
001240 xxxx 001036463000 	dfmp	x		" return x*p(xx)
001241 xxxx 000000471000 	frd     0
001242 xxxx 001243710013     tra     rets, x3
001243 xxxx 001060710000     return  cosine_degrees_
001244 xxxx 001115710000     return  sine_degrees_
001245 xxxx 000000011000 	even "(allocating 1 nop)
001246 xxxx 000000000000     bss     xx,2
001250 xxxx 716504072231 eps1:       dec	1.886591d-8
001251 xxxx 175750642261 
001252 xxxx 412712273406 eps2:       dec	8.418858142948452884d-38
001253 xxxx 461701757347 
001254 xxxx 704422701372 eps3:       dec	5.0d-10
001255 xxxx 023326451313 
001256 xxxx 002622077325 half_pi1A:	oct	002622077325,042055060432	" 1.570796326794896619d0
001257 xxxx 042055060432 
001260 xxxx 602611431424 half_pi2A:	oct	602611431424,270033407150	" 8.333742918520878328d-20
001261 xxxx 270033407150 
001262 xxxx 016550000000 ninety:     dec	90.0d0
001263 xxxx 000000000000 
001264 xxxx 020550000000 one_eighty: dec	180.0d0
001265 xxxx 000000000000 
001266 xxxx 000777777777 tp0:        dec	 9.999999999788d-1
001267 xxxx 776426056601 
001270 xxxx 775252525252 tp1:        dec	-1.6666666608826d-1
001271 xxxx 764246126070 
001272 xxxx 764421042055 tp2:        dec	 8.333330720556d-3
001273 xxxx 645325433621 
001274 xxxx 751137720534 tp3:        dec	-1.98408328231d-4
001275 xxxx 017765224715 
001276 xxxx 734561327223 tp4:        dec	 2.7523971068d-6
001277 xxxx 742173067177 
001300 xxxx 717145743634 tp5:        dec	-2.386834641d-8
001301 xxxx 001005375050 
001302 xxxx 000000000000 angle:  bss     temp, 2
001304 xxxx 000000000000         bss     n1,1
001305 xxxx 000000000000         bss     n2,1
001306 xxxx 000000000000         bss     t1,4
001312 xxxx 000000000000         bss     t2,6
001320 xxxx 000000000000         bss     t3,8
001330 xxxx 000000000000         bss     t4,10
001342 xxxx 000000471000 	frd     0
001343 xxxx 001504425000 	fcmg	two_pwr_54	" is the EAQ too large
001344 xxxx 001470605400 	tpnz	angle_too_big	" Yup.
001345 xxxx 001302455000 	fst     angle
001346 xxxx 001262567000 	dfdv	ninety		" EAQ = EAQ/90
001347 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/90 + 0.5
001350 xxxx 001532437000 	dufa	almost_one
001351 xxxx 001532537000 	dufs	almost_one
001352 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/90 + 0.5 in integer form
001353 xxxx 000000621006 	eax1	0,ql
001354 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001355 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/90 + 0.5) in floating point form
001356 xxxx 016550461003 	fmp     =90.0,du	" EAQ = floor(EAQ/90 + 0.5)*90
001357 xxxx 000000513000 	fneg	0           " EAQ = -floor(EAQ/90 + 0.5)*90
001360 xxxx 001302475000 	fad     angle	" EAQ = angle-floor(EAQ/90 + 0.5)*90
001361 xxxx 000000710010 	tra     0,x0		" return to caller
001362 xxxx 000000471000 	frd     0
001363 xxxx 001302455000 	fst     angle
001364 xxxx 001502425000 	fcmg	two_pwr_27      " is the EAQ too large
001365 xxxx 001415605400 	tpnz	bfp_big_angle	" Yup.
001366 xxxx 001476463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001367 xxxx 000400475003 	fad     =0.5,du             " EAQ = EAQ/half_pi + 0.5
001370 xxxx 001532437000 	dufa	almost_one
001371 xxxx 001532537000 	dufs	almost_one
001372 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001373 xxxx 000000621006 	eax1	0,ql
001374 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001375 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001376 xxxx 001304455000 	fst     n1		" n1 = EAQ
001377 xxxx 001400710000 	tra     small_angle_join
001400 xxxx 001506461012 	fmp     half_pi1B,x2
001401 xxxx 001306457000 	dfst	t1		" t1 = n1*half_pi1
001402 xxxx 001304431000 	fld     n1
001403 xxxx 001512461012 	fmp     half_pi2B,x2
001404 xxxx 001312457000 	dfst	t2		" t2 = n1*half_pi2
001405 xxxx 001304431000 	fld     n1
001406 xxxx 001516461012 	fmp     half_pi3,x2
001407 xxxx 001320457000 	dfst	t3		" t3 = n1*half_pi3
001410 xxxx 001302431000 	fld     angle		" answer = angle - t1 - t2 - t3
001411 xxxx 001306577000 	dfsb	t1
001412 xxxx 001312577000 	dfsb	t2
001413 xxxx 001320577000 	dfsb	t3
001414 xxxx 000000710010 	tra     0,x0
001415 xxxx 001504425000 	fcmg	two_pwr_54	" is the EAQ too large?
001416 xxxx 001470605400 	tpnz	angle_too_big	" Yup.
001417 xxxx 001476463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001420 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/half_pi + 0.5
001421 xxxx 001532437000 	dufa	almost_one
001422 xxxx 001532537000 	dufs	almost_one
001423 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001424 xxxx 000000621006 	eax1	0,ql
001425 xxxx 000003361003 	anx1	=3,du		" X1 = mod(AQ,4)
001426 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001427 xxxx 001304455000 	fst     n1		" n1 = EAQ
001430 xxxx 001304575000 	fsb     n1
001431 xxxx 001305455000 	fst     n2		" n2 = n - n1
001432 xxxx 001304431000 	fld     n1
001433 xxxx 001506461012 	fmp     half_pi1B,x2
001434 xxxx 001306457000 	dfst	t1		" t1 = n1*half_pi1
001435 xxxx 001304431000 	fld     n1		" calculate n1*half_pi2 + n2*half_pi1
001436 xxxx 001512461012 	fmp     half_pi2B,x2
001437 xxxx 001312457000 	dfst	t2
001440 xxxx 001305431000 	fld     n2
001441 xxxx 001506461012 	fmp     half_pi1B,x2
001442 xxxx 001312477000 	dfad	t2
001443 xxxx 001312457000 	dfst	t2		" t2 = (n1*half_pi2 + n2*half_pi1)
001444 xxxx 001304431000 	fld     n1		" calculate n1*half_pi3 + n2*half_pi2
001445 xxxx 001516461012 	fmp     half_pi3,x2
001446 xxxx 001320457000 	dfst	t3
001447 xxxx 001305431000 	fld     n2
001450 xxxx 001512461012 	fmp     half_pi2B,x2
001451 xxxx 001320477000 	dfad	t3
001452 xxxx 001320457000 	dfst	t3		" t3 = (n1*half_pi3 + n2*half_pi2)
001453 xxxx 001304431000 	fld     n1		" calculate n1*half_pi4 + n2*half_pi3
001454 xxxx 001522461012 	fmp     half_pi4,x2
001455 xxxx 001330457000 	dfst	t4
001456 xxxx 001305431000 	fld     n2
001457 xxxx 001516461012 	fmp     half_pi3,x2
001460 xxxx 001330477000 	dfad	t4
001461 xxxx 001330457000 	dfst	t4		" t4 = (n1*half_pi4 + n2*half_pi3)
001462 xxxx 001302431000 	fld     angle		" answer = angle - t1 - t2 - t3
001463 xxxx 001306577000 	dfsb	t1
001464 xxxx 001312577000 	dfsb	t2
001465 xxxx 001320577000 	dfsb	t3
001466 xxxx 001330577000 	dfsb	t4
001467 xxxx 000000710010 	tra     0,x0		" return to caller
001470 xxxx 001526236012 	ldq     code,x2		" pick the appropriate error message
001471 xxxx 001302740000 	stx0	temp		" save X0
001472 xxxx 001302220000 	ldx0	temp		" restore X0
001473 xxxx 000000621000 	eax1	0		" X1 = 0
001474 xxxx 400000431003 	fld     =0.0,du		" EAQ = 0, set indicators
001475 xxxx 000000710010 	tra     0,x0		" return to caller
001476 xxxx 000505746033 	dec	6.3661977236758134307553d-1
001477 xxxx 344710405225 
001500 xxxx 000505746033 	oct	000505746033,344710405225
001501 xxxx 344710405225 
001502 xxxx 070400000000 	oct	070400000000,000000000000
001503 xxxx 000000000000 
001504 xxxx 156400000000 	oct	156400000000,000000000000
001505 xxxx 000000000000 
001506 xxxx 002622077325 half_pi1B:	oct	002622077325,000000000000
001507 xxxx 000000000000 
001510 xxxx 002062207732 	oct	002062207732,000000000000
001511 xxxx 000000000000 
001512 xxxx 706420550604 half_pi2B:	oct	706420550604,000000000000
001513 xxxx 000000000000 
001514 xxxx 766050420550 	oct	766050420550,000000000000
001515 xxxx 000000000000 
001516 xxxx 616646114314 half_pi3: oct	616646114314,000000000000
001517 xxxx 000000000000 
001520 xxxx 752060432304 	oct	752060432304,000000000000
001521 xxxx 000000000000 
001522 xxxx 526505600670 half_pi4: oct	526505600670,000000000000
001523 xxxx 000000000000 
001524 xxxx 736061461213 	oct	736061461213,000000000000
001525 xxxx 000000000000 
001526 xxxx 000000000106 code:	dec	70,0,71
001527 xxxx 000000000000 
001530 xxxx 000000000107 
001531 xxxx 000000011000     even "(allocating 1 nop)
001532 xxxx 000777777777 	oct	000777777777,777777777777
001533 xxxx 777777777777 
001534 xxxx 002622077325 	dec	1.570796326794896619231d+00
001535 xxxx 042055060432 
001536 xxxx 776464202324 	dec	3.010299956639811952137d-01
001537 xxxx 117571775714 
001540 xxxx 776674557305 	dec	4.342944819032518276511d-01
001541 xxxx 223345034312 
001542 xxxx 002561250731 	dec	1.442695040888963407359d+00
001543 xxxx 225602774136 
001544 xxxx 000542710277 	dec	6.931471805599453094172d-01
001545 xxxx 575071736326 
001546 xxxx 376777777777 	oct	376777777777,777777777777
001547 xxxx 777777777777 
001550 xxxx 766435750650 	dec	1.745329251994329576923d-02
001551 xxxx 451235162127 
001552 xxxx 776505746033 	dec	3.183098861837906715377d-01
001553 xxxx 344710405225 
001554 xxxx 014712273406 	dec	5.729577951308232087679d+01
001555 xxxx 461701757341 
001556 xxxx 004622077325 	dec	3.141592653589793238462d+00
001557 xxxx 042055060432 
001560 xxxx 000622077325 	dec	7.853981633974483096156d-01
001561 xxxx 042055060432 
001562 xxxx 000552023631 	dec	7.071067811865475244008d-01
001563 xxxx 477473631102 
001564 xxxx 002673317272 	dec	1.732050807568877293527d+00
001565 xxxx 054114524717 
001566 xxxx 002552023631 	dec	1.414213562373095048801d+00
001567 xxxx 477473631102 
001570 xxxx 000000000000     bss     q,2
001572 xxxx 000000000000     bss     sign,2
001574 xxxx 001604710000     save    0,1,2,3,4
001575 xxxx 000000000000 
001576 xxxx 000000220003 
001577 xxxx 000001221003 
001600 xxxx 000002222003 
001601 xxxx 000003223003 
001602 xxxx 000004224003 
001603 xxxx 001575630000 
001604 xxxx 001575754000 
001605 xxxx 001575741000 
001606 xxxx 001576740000 
001607 xxxx 001577741000 
001610 xxxx 001600742000 
001611 xxxx 001601743000 
001612 xxxx 001602744000 
001613 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001614 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001615 xxxx 000001624000     eax4    1
001616 xxxx 400000475003 	fad     =0.0,du		" normalize input
001617 xxxx 000000621000 	eax1	0           " initialize X1 := shift = 1
001620 xxxx 002012425012 	fcmg	forty_five,x2
001621 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
001622 xxxx 001342700000     tsx0	principal_degrees_	"   call principal_degrees_
001623 xxxx 002004427012 	dfcmg	Teps1,x2		" if conversion to degrees underflows
001624 xxxx 001771604000 	tmi     infinity	"   return (infinity (degrees))
001625 xxxx 001550463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
001626 xxxx 000001301003 	canx1	=1,du
001627 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001630 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
001631 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, degrees*one_degree))
001632 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent
001633 xxxx 000000513000 	fneg	0           "   EAQ := -degrees*one_degree
001634 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -(degrees*one_degree)))
001635 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001636 xxxx 400000475003 	fad     =0.0,du		" normalize input
001637 xxxx 001560425012 	fcmg	quarter_pi,x2
001640 xxxx 000003605004 	tpl     3,ic		" if abs (angle) > quarter_pi:
001641 xxxx 777777623000     eax3	Cotangent	"   X3 := Cotangent
001642 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians)
001643 xxxx 001362700000 	tsx0	principal_radians_	" call principal_radians_
001644 xxxx 000001301003 	canx1	=1,du
001645 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001646 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
001647 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians))
001650 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent (???)
001651 xxxx 000000513000 	fneg	0           "   EAQ := -radians
001652 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -radians))
001653 xxxx 001663710000     save    0,1,2,3,4
001654 xxxx 000000000000 
001655 xxxx 000000220003 
001656 xxxx 000001221003 
001657 xxxx 000002222003 
001660 xxxx 000003223003 
001661 xxxx 000004224003 
001662 xxxx 001654630000 
001663 xxxx 001654754000 
001664 xxxx 001654741000 
001665 xxxx 001655740000 
001666 xxxx 001656741000 
001667 xxxx 001657742000 
001670 xxxx 001660743000 
001671 xxxx 001661744000 
001672 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001673 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001674 xxxx 000000624000     eax4    0
001675 xxxx 400000475003 	fad     =0.0,du		" normalize input
001676 xxxx 000000621000 	eax1	0		" initialize X1 := shift = 1
001677 xxxx 002012425012 	fcmg	forty_five,x2
001700 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
001701 xxxx 001342700000     tsx0	principal_degrees_	"   call principal_degrees_
001702 xxxx 002004427012 	dfcmg	Teps1,x2		" if conversion to radians underflows
001703 xxxx 000002605004 	tpl     2,ic
001704 xxxx 400000431003     fld     =0.0,du     "   then use zero
001705 xxxx 001550463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
001706 xxxx 000001301003 	canx1	=1,du
001707 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001710 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
001711 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, degrees*one_degree))
001712 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
001713 xxxx 000000513000 	fneg	0           "   EAQ := -radians
001714 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, -(degrees*one_degree)))
001715 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001716 xxxx 400000475003 	fad     =0.0,du		" normalize input
001717 xxxx 001560425012 	fcmg	quarter_pi,x2
001720 xxxx 000003605004 	tpl     3,ic		" if abs (angle) <= quarter_pi:
001721 xxxx 000001623000     eax3	Tangent
001722 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
001723 xxxx 001362700000 	tsx0	principal_radians_	" call principal_radians_
001724 xxxx 000001301003 	canx1	=1,du
001725 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
001726 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
001727 xxxx 001732710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
001730 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
001731 xxxx 000000513000 	fneg	0		"   EAQ := -radians
001732 xxxx 002006425000     fcmg	Teps2		" if abs(x) < 5e-10:
001733 xxxx 001744605000     tpl     use_polynomial
001734 xxxx 000001103003     cmpx3	Tangent,du	"   if function = Tangent
001735 xxxx 000003601004     tnz     3,ic
001736 xxxx 000000471000 	frd     0		"     then return (result)
001737 xxxx 002001710014     tra     TanRets,x4
001740 xxxx 002010427012 	dfcmg	Teps3,x2		"   else if (1/result) overflows
001741 xxxx 001771604400     tmoz	infinity		"     then return (infinity (result))
001742 xxxx 002014525012 	fdi     one,x2    	"     else return (1/result)
001743 xxxx 002001710014     tra     TanRets,x4
001744 xxxx 001036472000 	dfstr	x
001745 xxxx 001036463000 	dfmp	x		" calculate xx = x*x
001746 xxxx 001246472000 	dfstr	xx
001747 xxxx 002026477012 	dfad	q1,x2		" calculate q = q(xx)
001750 xxxx 001246463000 	dfmp	xx
001751 xxxx 002024477012 	dfad	q0,x2
001752 xxxx 001570472000 	dfstr	q
001753 xxxx 001246433000 	dfld	xx		" calculate p(xx)
001754 xxxx 002022463012 	dfmp	Tp2,x2
001755 xxxx 002020477012 	dfad	Tp1,x2
001756 xxxx 001246463000 	dfmp	xx
001757 xxxx 002016477012 	dfad	Tp0,x2
001760 xxxx 001036463000 	dfmp	x		" calculate p = x*p(xx)
001761 xxxx 000001103003 	cmpx3	Tangent,du
001762 xxxx 000004601004 	tnz     4,ic		" if function = Tangent
001763 xxxx 001570567000     dfdv	q		" then return (p/q)
001764 xxxx 000000471000 	frd     0
001765 xxxx 002001710014     tra     TanRets,x4
001766 xxxx 001570527000 	dfdi	q		" else return (q/p)
001767 xxxx 000000471000 	frd     0
001770 xxxx 002001710014     tra     TanRets,x4
001771 xxxx 001572455000 	fst     sign
001772 xxxx 001546431000 	fld     max_value
001773 xxxx 001546475000 	fad     max_value		" signal overflow
001774 xxxx 001546431000 	fld     max_value
001775 xxxx 001572430000 	fszn	sign		" if sign >= 0
001776 xxxx 002001710014     tra     TanRets,x4
001777 xxxx 000000513000 	fneg	0		" else return (-max_value)
002000 xxxx 002001710014     tra     TanRets,x4
002001 xxxx 001655710000     return  tangent_degrees_
002002 xxxx 001576710000     return  cotangent_degrees_
002003 xxxx 000000011000 	even "(allocating 1 nop)
002004 xxxx 412712273406 Teps1:	dec	8.418858142948452884d-38
002005 xxxx 461701757347 
002006 xxxx 704422701372 Teps2:	dec	5.0d-10
002007 xxxx 023326451313 
002010 xxxx 404400000000 Teps3:	oct	404400000000,000000000001
002011 xxxx 000000000001 
002012 xxxx 014550000000 	dec	45.0d0
002013 xxxx 000000000000 
002014 xxxx 002400000000 one:	dec  1.d0
002015 xxxx 000000000000 
002016 xxxx 014764652342 Tp0:	dec	 6.26041119547433196d1
002017 xxxx 460137304603 
002020 xxxx 007101637667 Tp1:	dec	-6.97168400629442048d0
002021 xxxx 425655210475 
002022 xxxx 772423545326 Tp2:	dec	 6.73091025875915d-2
002023 xxxx 453071362122 
002024 xxxx 014764652342 q0:     dec	 6.260411195336057284d1
002025 xxxx 456547154111 
002026 xxxx 013102441001 q1:     dec	-2.78397212200427089d1
002027 xxxx 733050625573 
002030 xxxx 000000000000     bss xe, 2
002032 xxxx 000000000000     bss xm, 2
002034 xxxx 000000000000     bss bias, 2
002036 xxxx 000000000000     bss shift, 2
002040 xxxx 000000000000     bss	x_plus_y,2
002042 xxxx 000000000000 	bss	z,2
002044 xxxx 000000000000 	bss	zz,2
002046 xxxx 002054710000     save    0,1,3
002047 xxxx 000000000000 
002050 xxxx 000000220003 
002051 xxxx 000001221003 
002052 xxxx 000002223003 
002053 xxxx 002047630000 
002054 xxxx 002047754000 
002055 xxxx 002047741000 
002056 xxxx 002050740000 
002057 xxxx 002051741000 
002060 xxxx 002052743000 
002061 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002062 xxxx 002135700000 	tsx0	log2		" calculate log2 (x)
002063 xxxx 001536463000 	dfmp	log_10_of_2	" EAQ := log_10_of_2 * log2 (x)
002064 xxxx 000000471000 	frd     0
002065 xxxx 002050710000     return  log_base_10_
002066 xxxx 002074710000     save    0,1,3
002067 xxxx 000000000000 
002070 xxxx 000000220003 
002071 xxxx 000001221003 
002072 xxxx 000002223003 
002073 xxxx 002067630000 
002074 xxxx 002067754000 
002075 xxxx 002067741000 
002076 xxxx 002070740000 
002077 xxxx 002071741000 
002100 xxxx 002072743000 
002101 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002102 xxxx 002135700000 	tsx0	log2		" calculate log2 (x)
002103 xxxx 000000471000 	frd     0
002104 xxxx 002070710000     return  log_base_2_
002105 xxxx 002113710000     save    0,1,3
002106 xxxx 000000000000 
002107 xxxx 000000220003 
002110 xxxx 000001221003 
002111 xxxx 000002223003 
002112 xxxx 002106630000 
002113 xxxx 002106754000 
002114 xxxx 002106741000 
002115 xxxx 002107740000 
002116 xxxx 002110741000 
002117 xxxx 002111743000 
002120 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002121 xxxx 002135700000 	tsx0	log2		" calculate log2 (x)
002122 xxxx 001544463000 	dfmp	log_e_of_2	" EAQ := log_e_of_2 * log2 (x)
002123 xxxx 000000471000 	frd     0
002124 xxxx 002107710000     return  log_base_e_
002125 xxxx 000012236007 	ldq     10,dl
002126 xxxx 001546431000 	fld     max_value
002127 xxxx 000000513000 	fneg	0
002130 xxxx 300000710100 	tra     pr3|0
002131 xxxx 000011236007 	ldq     9,dl
002132 xxxx 001546431000 	fld     max_value
002133 xxxx 000000513000 	fneg	0
002134 xxxx 300000710100 	tra     pr3|0
002135 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
002136 xxxx 002125604000 	tmi     log_of_negative
002137 xxxx 002131600000 	tze     log_of_zero
002140 xxxx 002226515000 	fcmp	Lsquare_root_two	" check for x in the range [.707,1.414]
002141 xxxx 000006605004 	tpl     6,ic
002142 xxxx 002224515000     fcmp	Lsquare_root_half
002143 xxxx 000004604004     tmi     4,ic		" if square_root_half >= x & x <= square_root_two
002144 xxxx 002212623000     eax3	Lone		"   X3 := addr (1.0)
002145 xxxx 000000621010 	eax1	0,x0		"   copy return address
002146 xxxx 002164710000 	tra     part_log2_of_ratio	"   result = part_log2_of_ratio (x, 1)
002147 xxxx 002030456000 	ste     xe          "   store addr (x) -> expon in xe
002150 xxxx 000000411003 	lde     =0,du		"   addr (xm) -> expon = 0
002151 xxxx 002032455000 	fst     xm
002152 xxxx 002030235000 	lda     xe          "   A := 8/xe,10/0,18/garbage
002153 xxxx 000066733000 	lrs     72-18		"   AQ := 62/xe,10/0
002154 xxxx 172000411003 	lde     =61b25,du		"   EAQ := unnormalized float(xe)
002155 xxxx 000400575003 	fsb     =0.5,du		"   EAQ := float(xe) - 0.5
002156 xxxx 002034455000 	fst     bias
002157 xxxx 002032431000 	fld     xm
002160 xxxx 002224623000 	eax3	Lsquare_root_half	"   X3 := addr (square_root_half)
002161 xxxx 002164701000 	tsx1	part_log2_of_ratio	"   EAQ := part_log2_of_ratio (x, square_root_half)
002162 xxxx 002034475000     fad     bias            "   EAQ := part_log2_of_ratio (x, square_root_half) + bias  (= log2(x))
002163 xxxx 000000710010 	tra     0,x0		"   return result
002164 xxxx 000000477013 	dfad	0,x3		" EAQ := x + y
002165 xxxx 002040457000 	dfst	x_plus_y
002166 xxxx 000000577013 	dfsb	0,x3		" EAQ := x
002167 xxxx 000000577013 	dfsb	0,x3		" EAQ := x - y
002170 xxxx 002040567000 	dfdv	x_plus_y	" calculate z = (x - y) / (x + y)
002171 xxxx 002210425000 	fcmg	Leps
002172 xxxx 000003605404 	tpnz	3,ic		" if abs(z) < 4.1968417d-11
002173 xxxx 002214463000     dfmp	Lp0         "   EAQ := z * p0
002174 xxxx 000000710011 	tra     0,x1		"   return to caller
002175 xxxx 002042457000 	dfst	z
002176 xxxx 002042461000 	fmp     z           " calculate zz = z*z
002177 xxxx 002044455000 	fst     zz          " calculate p(zz)
002200 xxxx 002222461000 	fmp     Lp3
002201 xxxx 002220477000 	dfad	Lp2
002202 xxxx 002044461000 	fmp     zz
002203 xxxx 002216477000 	dfad	Lp1
002204 xxxx 002044461000 	fmp     zz
002205 xxxx 002214477000 	dfad	Lp0
002206 xxxx 002042463000 	dfmp	z           " calculate z*p(zz)
002207 xxxx 000000710011 	tra     0,x1		" return to caller
002210 xxxx 674561120744 Leps:	dec     4.1968417d-11
002211 xxxx 744762611260 
002212 xxxx 002400000000 Lone:	dec     1.0d0
002213 xxxx 000000000000 
002214 xxxx 004561250730 Lp0:    dec     .288539007275213810d01
002215 xxxx 772543241373 
002216 xxxx 000754342230 Lp1:    dec     .961800759210250522d00
002217 xxxx 541156441462 
002220 xxxx 000447154133 Lp2:    dec     .576584541348266310d00
002221 xxxx 107411741772 
002222 xxxx 776674533133 Lp3:    dec     .434255940790007142d0
002223 xxxx 371132642555 
002224 xxxx 000552023631         dec     7.071067811865475244008d-01
002225 xxxx 477473631102 
002226 xxxx 002552023631         dec     1.414213562373095048801d+00
002227 xxxx 477473631102 
002230 xxxx 000000000000     bss iy, 2
002232 xxxx 002237710000     save    0, 1
002233 xxxx 000000000000 
002234 xxxx 000000220003 
002235 xxxx 000001221003 
002236 xxxx 002233630000 
002237 xxxx 002233754000 
002240 xxxx 002233741000 
002241 xxxx 002234740000 
002242 xxxx 002235741000 
002243 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002244 xxxx 002340515000 	fcmp	lb          " if x <= -89.415987: 
002245 xxxx 002250605400     tpnz    e3
002246 xxxx 400000431003     fld     =0.0,du     "    result = 0
002247 xxxx 002234710000     return  exponential_
002250 xxxx 002336515000 e3:	fcmp	ub          " if x >= 88.0296926 goto overflow_error
002251 xxxx 002307605000 	tpl     overflow_error
002252 xxxx 001542463000 	dfmp	log_2_of_e	" y = x*log_2_of_e
002253 xxxx 002400475003 	fad     =1.0,du		" EAQ := y + 1
002254 xxxx 016000435003 	ufa     =7b25,du	" AQ := 8/floor(y+1),64/fraction part of y
002255 xxxx 002230755000 	sta     iy
002256 xxxx 776000275003 	ora     =o776000,du	" AQ := 8/-1,64/fraction part of y
002257 xxxx 016000411003 	lde     =7b25,du	" EAQ := ry = unnormalized y - floor(y+1)
002260 xxxx 400000475003 	fad     =0.0,du		" EAQ := ry = normalized y - floor(y+1)
002261 xxxx 002314425000 	fcmg	Eeps
002262 xxxx 002265605000     tpl     pe2
002263 xxxx 002400431003     fld     =1.0,du     "    result = 1.0
002264 xxxx 002234710000     return  exponential_
002265 xxxx 000000471000 pe2:frd     0
002266 xxxx 002042455000 	fst     z
002267 xxxx 002334461000 	fmp     Ep7		" result = p(z)
002270 xxxx 002332477000 	dfad	Ep6
002271 xxxx 002042461000 	fmp     z
002272 xxxx 002330477000 	dfad	Ep5
002273 xxxx 002042461000 	fmp     z
002274 xxxx 002326477000 	dfad	Ep4
002275 xxxx 002042461000 	fmp     z
002276 xxxx 002324477000 	dfad	Ep3
002277 xxxx 002042461000 	fmp     z
002300 xxxx 002322477000 	dfad	Ep2
002301 xxxx 002042461000 	fmp     z
002302 xxxx 002320477000 	dfad	Ep1
002303 xxxx 002042461000 	fmp     z
002304 xxxx 002316477000 	dfad	Ep0
002305 xxxx 002230415000 	ade     iy		" addr (result) -> expon = addr (result) -> expon + iy
002306 xxxx 002234710000     return  exponential_
002307 xxxx 001546431000 	fld     max_value
002310 xxxx 001546475000 	fad     max_value		" cause an overflow
002311 xxxx 001546431000 	fld     max_value
002312 xxxx 002234710000     return  exponential_
002313 xxxx 000000011000 	even "(allocating 1 nop)
002314 xxxx 604561250730 Eeps:	dec	1.56417309d-19
002315 xxxx 645767466564 
002316 xxxx 000777777777 Ep0:	dec	0.999999999959788989221d00
002317 xxxx 775171146647 
002320 xxxx 000542710277 Ep1:	dec	0.693147175773076184335d00
002321 xxxx 064122746305 
002322 xxxx 774753767514 Ep2:	dec	0.240226411617528907564d00
002323 xxxx 542060151212 
002324 xxxx 770706536015 Ep3:	dec	0.555033746338694398430d-01
002325 xxxx 336576334575 
002326 xxxx 764473046222 Ep4:	dec	0.961531912935043645900d-02
002327 xxxx 315773407052 
002330 xxxx 756533765571 Ep5:	dec	0.132743818109838796600d-02
002331 xxxx 150540215277 
002332 xxxx 750464227646 Ep6:	dec	0.147007243118869978000d-03
002333 xxxx 455135010071 
002334 xxxx 740550540762 Ep7:	dec	0.107493818486964670000d-04
002335 xxxx 530201244720 
002336 xxxx 016540074637 ub:	dec	8.802969265d01		" 2**127 - 2**100 = e**88.0296926
002337 xxxx 000053475651 
002340 xxxx 017232254036 lb:	dec	-8.9415987d01		" 2**(-129) = e**-89.415987
002341 xxxx 007734054130 
002342 xxxx 000000000000     bss     arctan_z,2
002344 xxxx 000000000000 	bss     y,2
002346 xxxx 000000000000 	bss     indicators,2
002350 xxxx 002360710000     save    0,1,2,3,4    
002351 xxxx 000000000000 
002352 xxxx 000000220003 
002353 xxxx 000001221003 
002354 xxxx 000002222003 
002355 xxxx 000003223003 
002356 xxxx 000004224003 
002357 xxxx 002351630000 
002360 xxxx 002351754000 
002361 xxxx 002351741000 
002362 xxxx 002352740000 
002363 xxxx 002353741000 
002364 xxxx 002354742000 
002365 xxxx 002355743000 
002366 xxxx 002356744000 
002367 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002370 xxxx 000000622000 	eax2        BFP		" no offset for BFP constants
002371 xxxx 002476700000 	tsx0        arctan		" EAQ := arctan (x)
002372 xxxx 001554463000 	dfmp        one_radian	" convert radians to degrees
002373 xxxx 000000471000 	frd         0
002374 xxxx 002352710000     return  arc_tangent_degrees_
002375 xxxx 002405710000     save    0,1,2,3,4
002376 xxxx 000000000000 
002377 xxxx 000000220003 
002400 xxxx 000001221003 
002401 xxxx 000002222003 
002402 xxxx 000003223003 
002403 xxxx 000004224003 
002404 xxxx 002376630000 
002405 xxxx 002376754000 
002406 xxxx 002376741000 
002407 xxxx 002377740000 
002410 xxxx 002400741000 
002411 xxxx 002401742000 
002412 xxxx 002402743000 
002413 xxxx 002403744000 
002414 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002415 xxxx 002344470000     fstr    y
002416 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002417 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002420 xxxx 002606701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002421 xxxx 001554463000 	dfmp      one_radian	" convert radians to degrees
002422 xxxx 000000471000 	frd       0
002423 xxxx 002377710000     return  arc_tangent_degrees_2_
002424 xxxx 002434710000     save    0,1,2,3,4    
002425 xxxx 000000000000 
002426 xxxx 000000220003 
002427 xxxx 000001221003 
002430 xxxx 000002222003 
002431 xxxx 000003223003 
002432 xxxx 000004224003 
002433 xxxx 002425630000 
002434 xxxx 002425754000 
002435 xxxx 002425741000 
002436 xxxx 002426740000 
002437 xxxx 002427741000 
002440 xxxx 002430742000 
002441 xxxx 002431743000 
002442 xxxx 002432744000 
002443 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002444 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002445 xxxx 002476700000 	tsx0      arctan		" EAQ := arctan (x)
002446 xxxx 000000471000 	frd     0
002447 xxxx 002426710000     return  arc_tangent_radians_
002450 xxxx 002460710000     save    0,1,2,3,4    
002451 xxxx 000000000000 
002452 xxxx 000000220003 
002453 xxxx 000001221003 
002454 xxxx 000002222003 
002455 xxxx 000003223003 
002456 xxxx 000004224003 
002457 xxxx 002451630000 
002460 xxxx 002451754000 
002461 xxxx 002451741000 
002462 xxxx 002452740000 
002463 xxxx 002453741000 
002464 xxxx 002454742000 
002465 xxxx 002455743000 
002466 xxxx 002456744000 
002467 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002470 xxxx 002344470000     fstr    y
002471 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002472 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002473 xxxx 002606701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002474 xxxx 000000471000 	frd	0
002475 xxxx 002452710000     return  arc_tangent_radians_2_
002476 xxxx 400000475003 	fad     =0.0,du		" normalize input
002477 xxxx 002342455000 	fst     arctan_z	" store argument z
002500 xxxx 000000624012 	eax4	0,x2		" initialize the table index with BFP or HFP offset
002501 xxxx 002706425012 	fcmg	tan_7_pi_by_32,x2
002502 xxxx 002536604000 	tmi     range_0_to_3
002503 xxxx 002722425012 	fcmg	tan_13_pi_by_32,x2
002504 xxxx 002524604000 	tmi     range_4_to_6
002505 xxxx 002726425012 	fcmg	tan_15_pi_by_32,x2
002506 xxxx 002522604000 	tmi     range_7
002507 xxxx 002656425012 	fcmg	ATeps1,x2
002510 xxxx 000003604004 	tmi     3,ic		" if abs (z) < 1e71b:
002511 xxxx 001534431012     fld     half_pi,x2      "   EAQ := radians = half_pi
002512 xxxx 002565710000 	tra     set_to_quadrant_1_or_4
002513 xxxx 400000515003 	fcmp	=0.0,du
002514 xxxx 000002605004 	tpl     2,ic
002515 xxxx 000000513000     fneg	0		"   EAQ := abs (z)
002516 xxxx 001000525003 	fdi     =-1.0,du		"   EAQ := -1/abs_z
002517 xxxx 002571703000 	tsx3	part_arctan	"   calculate part_arctan (-1/abs_z)
002520 xxxx 001534475012 	fad     half_pi,x2	"   EAQ := radians = half_pi - part_arctan (1/abs_z)
002521 xxxx 002565710000 	tra     set_to_quadrant_1_or_4
002522 xxxx 000030064003 	adx4	=24,du		" range = 7, tan_13_pi_by_32 <= abs (z) < tan_15_pi_by_32
002523 xxxx 002555710000 	tra     calculate_for_range_1_to_7
002524 xxxx 002716425012 	fcmg	tan_11_pi_by_32,x2
002525 xxxx 002530604000 	tmi     range_4_to_5
002526 xxxx 000024064003 	adx4	=20,du		" range = 6, tan_11_pi_by_32 <= abs (z) < tan_13_pi_by_32
002527 xxxx 002555710000 	tra     calculate_for_range_1_to_7
002530 xxxx 002712425012 	fcmg	tan_9_pi_by_32,x2
002531 xxxx 002534604000 	tmi     range_4
002532 xxxx 000020064003 	adx4	=16,du		" range = 5, tan_9_pi_by_32 <= abs (z) < tan_11_pi_by_32
002533 xxxx 002555710000 	tra     calculate_for_range_1_to_7
002534 xxxx 000014064003 	adx4	=12,du		" range = 4, tan_7_pi_by_32 <= abs (z) < tan_9_pi_by_32
002535 xxxx 002555710000 	tra     calculate_for_range_1_to_7
002536 xxxx 002676425012 	fcmg	tan_3_pi_by_32,x2
002537 xxxx 002546604000 	tmi     range_0_to_1
002540 xxxx 002702425012 	fcmg	tan_5_pi_by_32,x2
002541 xxxx 002544604000 	tmi     range_2
002542 xxxx 000010064003 	adx4	=8,du		" range = 3, tan_5_pi_by_32 <= abs (z) < tan_7_pi_by_32
002543 xxxx 002555710000 	tra     calculate_for_range_1_to_7
002544 xxxx 000004064003 	adx4	=4,du		" range = 2, tan_3_pi_by_32 <= abs (z) < tan_5_pi_by_32
002545 xxxx 002555710000 	tra     calculate_for_range_1_to_7
002546 xxxx 002672425012 	fcmg	tan_pi_by_32,x2
002547 xxxx 002555605000 	tpl	calculate_for_range_1_to_7
002550 xxxx 400000515003 	fcmp	=0.0,du
002551 xxxx 000002605004 	tpl     2,ic
002552 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002553 xxxx 002571703000 	tsx3	part_arctan	" EAQ := part_arctan (abs_z)
002554 xxxx 002565710000 	tra     set_to_quadrant_1_or_4
002555 xxxx 400000515003 	fcmp	=0.0,du
002556 xxxx 000002605004 	tpl     2,ic
002557 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002560 xxxx 002732477014 	dfad	one_over_u,x4	" EAQ := t = 1/u(range) - (1/(u(range)**2)+1) / (1/u(range) + abs_z)
002561 xxxx 002766527014 	dfdi	one_plus_one_over_u_squared,x4
002562 xxxx 002732477014 	dfad	one_over_u,x4
002563 xxxx 002571703000 	tsx3	part_arctan	" EAQ := part_arctan (t)
002564 xxxx 003022477014 	dfad	arctan_of_u,x4	" EAQ := radians = part_arctan (t) + arctan(u(range))
002565 xxxx 002342430000 	fszn	arctan_z	" set indicators
002566 xxxx 000000605010 	tpl     0,x0		" if z >= 0 then return (radians)
002567 xxxx 000000513000     fneg	0		" else return (-radians)
002570 xxxx 000000710010 	tra     0,x0
002571 xxxx 002662425012 	fcmg	ATeps2,x2		" if abs (z) < 5.7031627e10
002572 xxxx 000000604013 	tmi     0,x3		" then return (z)
002573 xxxx 002042472000 	dfstr	z
002574 xxxx 002042463000 	dfmp	z		" calculate zz = z*z
002575 xxxx 002044470000 	fstr	zz
002576 xxxx 003072461012 	fmp     ATp3,x2		" calculate p(zz)
002577 xxxx 003066477012 	dfad	ATp2,x2
002600 xxxx 002044461000 	fmp     zz
002601 xxxx 003062477012 	dfad	ATp1,x2
002602 xxxx 002044461000 	fmp     zz
002603 xxxx 003056477012 	dfad	ATp0,x2
002604 xxxx 002042461000 	fmp     z		" calculate z*p(zz)
002605 xxxx 000000710013 	tra     0,x3		" return
002606 xxxx 400000475003 	fad     =0.0,du		" normalize x
002607 xxxx 001036455000 	fst     x		" save normalized x for quadrant check
002610 xxxx 002344431000 	fld     y   	" load y
002611 xxxx 400000475003 	fad     =0.0,du		" normalize y
002612 xxxx 002344455000 	fst     y		" save normalized y for quadrant check
002613 xxxx 002623601000 	tnz     y_not_zero
002614 xxxx 001036430000 	fszn	x		" test if x = 0 also
002615 xxxx 002645600000 	tze     arctan2_domain_err	" 0/0 is error
002616 xxxx 001534433012 	dfld	half_pi,x2	" atan(x/0) =  + or - (half_pi)
002617 xxxx 001036430000 	fszn	x
002620 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
002621 xxxx 000000513000     fneg	0		" else return (-radians)
002622 xxxx 000000710011 	tra     0,x1
002623 xxxx 002346754000 	sti     indicators	" save indicators
002624 xxxx 002666634012 	ldi     no_overflow,x2
002625 xxxx 001036525000 	fdi     x		" EAQ := x/y
002626 xxxx 002653614000 	teo     quotient_too_large	" if overflow, atan(x,y) = pi/2 or -pi/2
002627 xxxx 002650615000 	teu     quotient_too_small	" if underflow, atan(x,y) = 0
002630 xxxx 002346634000 	ldi     indicators	" restore previous indicators
002631 xxxx 400000475003 	fad     =0.0,du		" set indicators
002632 xxxx 000002605004 	tpl     2,ic		" calculate z = abs (x,y)
002633 xxxx 000000513000     fneg	0
002634 xxxx 002476700000 	tsx0	arctan		" EAQ := arctan(z)
002635 xxxx 002344430000 	fszn	y		" set the quadrant
002636 xxxx 000003605004 	tpl     3,ic		" if y < 0 then
002637 xxxx 000000513000     fneg	0		"   radians = pi-radians
002640 xxxx 001556477012 	dfad	pi,x2
002641 xxxx 001036430000 	fszn	x
002642 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
002643 xxxx 000000513000     fneg	0		" else return (-radians)
002644 xxxx 000000710011 	tra     0,x1
002645 xxxx 000013236007 	ldq     11,dl
002646 xxxx 400000431003 	fld     =0.0,du
002647 xxxx 300000710100 	tra     pr3|0		" return to caller
002650 xxxx 002346634000 	ldi     indicators	" restore indicators
002651 xxxx 400000431003 	fld     =0.0,du		" radians = 0.0
002652 xxxx 002635710000 	tra     set_quadrant
002653 xxxx 002346634000 	ldi     indicators	" restore indicators
002654 xxxx 001534433012 	dfld	half_pi,x2	" radians = half_pi
002655 xxxx 002635710000 	tra     set_quadrant
002656 xxxx 220400000000 ATeps1:	oct	220400000000,000000000000	" 2**71 = 2.36e21
002657 xxxx 000000000000 
002660 xxxx 044400000000 	oct	044400000000,000000000000
002661 xxxx 000000000000 
002662 xxxx 704471421604 ATeps2:	dec	5.7031627d-10
002663 xxxx 407031702277 
002664 xxxx 762116304341 	oct	762116304341,000000000000
002665 xxxx 000000000000 
002666 xxxx 000000004000 	oct	000000004000,000000000000	" bit 25 is the overflow mask
002667 xxxx 000000000000 
002670 xxxx 000000004010 	oct	000000004010,000000000000	" bit 33 is the hex indicator
002671 xxxx 000000000000 
002672 xxxx 772623327342 	dec	.98491403d-1		" tan(pi/32)
002673 xxxx 551170653204 
002674 xxxx 000062332734 	oct	000062332734,000000000000
002675 xxxx 000000000000 
002676 xxxx 776466501014 	dec	.30334668d00		" tan(3*pi/32)
002677 xxxx 276317550567 
002700 xxxx 000233240406 	oct	000233240406,000000000000
002701 xxxx 000000000000 
002702 xxxx 000421526706 	dec	.53451114d00		" tan(5*pi/32)
002703 xxxx 632271614047 
002704 xxxx 000421526707 	oct	000421526707,000000000000
002705 xxxx 000000000000 
002706 xxxx 000644140012 	dec	.82067879d00		" tan(7*pi/32)
002707 xxxx 471104326120 
002710 xxxx 000644140013 	oct	000644140013,000000000000
002711 xxxx 000000000000 
002712 xxxx 002467737541 	dec	1.2185035d00		" tan(9*pi/32)
002713 xxxx 524374032261 
002714 xxxx 002046773754 	oct	002046773754,000000000000
002715 xxxx 000000000000 
002716 xxxx 002736742355 	dec	1.8708684d00		" tan(11*pi/32)
002717 xxxx 010752710074 
002720 xxxx 002073674236 	oct	002073674236,000000000000
002721 xxxx 000000000000 
002722 xxxx 004645753171 	dec	3.2965582d00		" tan(13*pi/32)
002723 xxxx 751342441016 
002724 xxxx 002151372636 	oct	002151372636,000000000000
002725 xxxx 000000000000 
002726 xxxx 010504715423 	dec	10.153170d00		" tan(15*pi/32)
002727 xxxx 054564714557 
002730 xxxx 002504715423 	oct	002504715423,000000000000
002731 xxxx 000000000000 
002732 xxxx 006501577670 	dec	5.0273394921258481045d0	" 1/tan(pi/16)
002733 xxxx 441107342042 
002734 xxxx 002240677734 	oct	002240677734,220443561021
002735 xxxx 220443561021 
002736 xxxx 004465011714 	dec	2.4142135623730950488d0	" 1/tan(2*pi/16)
002737 xxxx 637635714441 
002740 xxxx 002115202363 	oct	002115202363,147747363110
002741 xxxx 147747363110 
002742 xxxx 002577103070 	dec	1.4966057626654890176d0	" 1/tan(3*pi/16)
002743 xxxx 455164302501 
002744 xxxx 002057710307 	oct	002057710307,045516430250
002745 xxxx 045516430250 
002746 xxxx 002400000000 	dec	1.0d0			" 1/tan(4*pi/16)
002747 xxxx 000000000000 
002750 xxxx 002040000000 	oct	002040000000,000000000000
002751 xxxx 000000000000 
002752 xxxx 000526067012 	dec	.66817863791929891999d0	" 1/tan(5*pi/16)
002753 xxxx 533771440572 
002754 xxxx 000526067012 	oct	000526067012,533771440572
002755 xxxx 533771440572 
002756 xxxx 776650117146 	dec	.41421356237309504880d0	" 1/tan(6*pi/16)
002757 xxxx 376357144410 
002760 xxxx 000324047463 	oct	000324047463,177167462204
002761 xxxx 177167462204 
002762 xxxx 774627276570 	dec	.19891236737965800691d0	" 1/tan(7*pi/16)
002763 xxxx 052461260037 
002764 xxxx 000145657536 	oct	000145657536,012514254010
002765 xxxx 012514254010 
002766 xxxx 013133472163 	dec	-.26274142369088180356d02
002767 xxxx 441121370576 
002770 xxxx 005713347216 	oct	005713347216,344112137060
002771 xxxx 344112137060 
002772 xxxx 007112766063 	dec	-.68284271247461900976d01
002773 xxxx 140142063337 
002774 xxxx 003445373031 	oct	003445373031,460061031557
002775 xxxx 460061031557 
002776 xxxx 005141232450 	dec	-.32398288088435500410d01
002777 xxxx 425406626076 
003000 xxxx 003630246512 	oct	003630246512,105301545417
003001 xxxx 105301545417 
003002 xxxx 003000000000 	dec	-.20d1
003003 xxxx 000000000000 
003004 xxxx 003700000000 	oct	003700000000,000000000000
003005 xxxx 000000000000 
003006 xxxx 003215551173 	dec	-.14464626921716895685d01
003007 xxxx 721720634630 
003010 xxxx 003721555117 	oct	003721555117,372172063463
003011 xxxx 372172063463 
003012 xxxx 003324047463 	dec	-.11715728752538099024d01
003013 xxxx 177167462205 
003014 xxxx 003732404746 	oct	003732404746,317716746221
003015 xxxx 317716746221 
003016 xxxx 003365675771 	dec	-.10395661298965800348d01
003017 xxxx 760411653016 
003020 xxxx 003736567577 	oct	003736567577,176041165302
003021 xxxx 176041165302 
003022 xxxx 774622077325 	dec	.19634954084936207740d00	" pi/16
003023 xxxx 042055060432 
003024 xxxx 000144417665 	oct	000144417665,210413214107
003025 xxxx 210413214107 
003026 xxxx 776622077325 	dec	.39269908169872415481d00	" 2*pi/16
003027 xxxx 042055060432 
003030 xxxx 000311037552 	oct	000311037552,421026430215
003031 xxxx 421026430215 
003032 xxxx 000455457437 	dec	.58904862254808623221d00	" 3*pi/16
003033 xxxx 631441644324 
003034 xxxx 000455457437 	oct	000455457437,631441644324
003035 xxxx 631441644324 
003036 xxxx 000622077325 	dec	.78539816339744830962d00	" 4*pi/16
003037 xxxx 042055060432 
003040 xxxx 000622077325 	oct	000622077325,042055060432
003041 xxxx 042055060432 
003042 xxxx 000766517212 	dec	.98174770424681038702d00	" 5*pi/16
003043 xxxx 252470274541 
003044 xxxx 000766517212 	oct	000766517212,252470274541
003045 xxxx 252470274541 
003046 xxxx 002455457437 	dec	1.17809724509617246442d00	" 6*pi/16
003047 xxxx 631441644324 
003050 xxxx 002045545743 	oct	002045545743,763144164432
003051 xxxx 763144164432 
003052 xxxx 002537667372 	dec	1.37444678594553454182d00	" 7*pi/16
003053 xxxx 335647352367 
003054 xxxx 002053766737 	oct	002053766737,233564735237
003055 xxxx 233564735237 
003056 xxxx 000777777777 ATp0:	dec	.9999999999924517d00
003057 xxxx 777366325725 
003060 xxxx 000777777777 	oct	000777777777,777366325725
003061 xxxx 777366325725 
003062 xxxx 777252525261 ATp1:	dec	-.33333330840148d00
003063 xxxx 267741700306 
003064 xxxx 001525252530 	oct	001525252530,533760740143
003065 xxxx 533760740143 
003066 xxxx 774631445545 ATp2:	dec	.199987124164d00
003067 xxxx 571746370206 
003070 xxxx 000146311331 	oct	000146311331,336371476042
003071 xxxx 336371476042 
003072 xxxx 775337626574 ATp3:	dec	-.14072538d00
003073 xxxx 713546710627 
003074 xxxx 001667745537 	oct	001667745537,162731562146
003075 xxxx 162731562146 
003076 xxxx 400000475003     fad     =0.0,du		" normalize input arg
003077 xxxx 000000600017     tze     0,x7        " if x = 0 return (0)
003100 xxxx 003105605000 	tpl     calc_dsquare_root	" if x < 0:
003101 xxxx 000000513000     fneg	0           "   x = -x
003102 xxxx 001036457000 	dfst	x
003103 xxxx 000026236007 	ldq     22,dl
003104 xxxx 001036433000 	dfld	x
003105 xxxx 001036457000 	dfst	x           " store EAQ := input arg
003106 xxxx 001036220000 	ldx0	x           " X0 := addr (x) -> expon
003107 xxxx 000000411003 	lde     =0b25,du	" addr (m) -> expon = 0
003110 xxxx 002000300003 	canx0	=1b25,du	" calculate mod (e, 2)
003111 xxxx 000002600004 	tze     2,ic		" if mod (e, 2) = 1:
003112 xxxx 776000411003 	lde     =-1b25,du	"   EAQ := m = .5*m
003113 xxxx 001040457000 	dfst	m           " store EAQ := m
003114 xxxx 001036236000 	ldq     x           " Q := 8/expon,28/garbage
003115 xxxx 000034732000 	qrs     28          " Q := 28/0,8/expon
003116 xxxx 000001076007 	adq     =1,dl		" calculate e+1
003117 xxxx 000001732000 	qrs     1           " calculate divide (e+1, 2, 7)
003120 xxxx 000034736000 	qls     28          " position result in exponent field
003121 xxxx 001042756000 	stq     e           " store Q := e = divide (e+1, 2, 7)
003122 xxxx 001040433000 	dfld	m
003123 xxxx 003156461000 	fmp     DSp2		" calculate root_m_top = p(m)
003124 xxxx 003154475000 	fad     DSp1
003125 xxxx 001040461000 	fmp     m
003126 xxxx 003152475000 	fad     DSp0
003127 xxxx 001034455000 	fst     root_m
003130 xxxx 001040525000 	fdi     m           " calculate root_m = .5 * (root_m_top + m_top/root_m_top)
003131 xxxx 001034475000 	fad     root_m
003132 xxxx 000400461003 	fmp     =0.5,du
003133 xxxx 000000473000 	dfrd	0
003134 xxxx 001034457000 	dfst	root_m
003135 xxxx 001040527000 	dfdi	m           " calculate root_m = .5 * (root_m + m/root_m)
003136 xxxx 001034477000 	dfad	root_m
003137 xxxx 000400461003 	fmp     =0.5,du
003140 xxxx 000000473000 	dfrd	0
003141 xxxx 001034457000 	dfst	root_m      " calculate root_m + m/root_m
003142 xxxx 001040527000 	dfdi	m
003143 xxxx 001034477000 	dfad	root_m
003144 xxxx 776000415003 	ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
003145 xxxx 001042415000 	ade     e           " calculate addr (root_x) -> expon =
003146 xxxx 000000473000 	dfrd	0
003147 xxxx 000000710017 	tra     0,x7        " return (root_x)
003150 xxxx 000200000000 	oct	000200000000,000000000000	" 0.25
003151 xxxx 000000000000 
003152 xxxx 776411377603 DSp0:	dec	2.5927688d-1
003153 xxxx 406536706351 
003154 xxxx 002415257502 DSp1:	dec	1.0521212d0
003155 xxxx 413332156142 
003156 xxxx 777274054062 DSp2:	dec	-3.1632214d-1
003157 xxxx 066300621037 
003160 xxxx 000000000000 	bss     abs_x,2
003162 xxxx 000000000000 	bss     arg_x,2
003164 xxxx 000000000000     bss     yy, 2
003166 xxxx 000000000000 	bss     p,2
003170 xxxx 000000000000 	bss     space_used,2
003172 xxxx 003203710000     save    0,1,2,3,4,7    
003173 xxxx 000000000000 
003174 xxxx 000000220003 
003175 xxxx 000001221003 
003176 xxxx 000002222003 
003177 xxxx 000003223003 
003200 xxxx 000004224003 
003201 xxxx 000005227003 
003202 xxxx 003173630000 
003203 xxxx 003173754000 
003204 xxxx 003173741000 
003205 xxxx 003174740000 
003206 xxxx 003175741000 
003207 xxxx 003176742000 
003210 xxxx 003177743000 
003211 xxxx 003200744000 
003212 xxxx 003201747000 
003213 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
003214 xxxx 000000622000 	eax2	BFP
003215 xxxx 003265703000 	tsx3	arcsine
003216 xxxx 000000471000 	frd	0
003217 xxxx 003174710000     return  arc_sine_radians_
003220 xxxx 003231710000     save    0,1,2,3,4,7    
003221 xxxx 000000000000 
003222 xxxx 000000220003 
003223 xxxx 000001221003 
003224 xxxx 000002222003 
003225 xxxx 000003223003 
003226 xxxx 000004224003 
003227 xxxx 000005227003 
003230 xxxx 003221630000 
003231 xxxx 003221754000 
003232 xxxx 003221741000 
003233 xxxx 003222740000 
003234 xxxx 003223741000 
003235 xxxx 003224742000 
003236 xxxx 003225743000 
003237 xxxx 003226744000 
003240 xxxx 003227747000 
003241 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
003242 xxxx 000000622000 	eax2	BFP
003243 xxxx 003265703000 	tsx3	arcsine
003244 xxxx 001554463000 	dfmp	one_radian	" Convert to degrees
003245 xxxx 000000471000 	frd     0
003246 xxxx 003222710000     return  arc_sine_degrees_
003247 xxxx 000000622000 	eax2	BFP
003250 xxxx 003265703000 	tsx3	arcsine
003251 xxxx 000000513000 	fneg	0
003252 xxxx 001534477000 	dfad	half_pi		" convert to cosine
003253 xxxx 000000471000 	frd     0
003254 xxxx 300000710100 	tra	pr3|0		" Return to caller
003255 xxxx 000000622000 	eax2	BFP
003256 xxxx 003265703000 	tsx3	arcsine
003257 xxxx 001554463012 	dfmp	one_radian,x2	" convert to degrees
003260 xxxx 000000513000 	fneg	0
003261 xxxx 000000473000 	dfrd	0		" clean out unnecessary bottom bits
003262 xxxx 016550475003 	fad     =90.0,du		" convert to cosine
003263 xxxx 000000471000 	frd     0
003264 xxxx 300000710100 	tra	pr3|0		" Return to caller
003265 xxxx 000000471000 	frd     0           " round and normalize input ("arg_x")
003266 xxxx 003162455000 	fst     arg_x		" store sign of arg_x.
003267 xxxx 000002605004 	tpl     2,ic		" abs_x=abs(arg_x)
003270 xxxx 000000513000     fneg	0
003271 xxxx 003160455000 	fst     abs_x
003272 xxxx 000400425003 	fcmg	=0.5,du         " is abs_x in the range [0,.5)
003273 xxxx 003277605000 	tpl     above_bound_1	" no, find the correct range
003274 xxxx 003162431000 	fld     arg_x
003275 xxxx 003355704000 	tsx4	part_arcsine
003276 xxxx 000000710013 	tra     0,x3            " Return to entry
003277 xxxx 003434425012 	fcmg	bound_2,x2      " is abs_x in the range [.5, .866)
003300 xxxx 003313605000 	tpl     above_bound_2	" no, find correct range
003301 xxxx 003160461000 	fmp     abs_x           " EAQ = abs_x**2
003302 xxxx 003444461012 	fmp     two,x2          " EAQ = 2 * abs_x**2
003303 xxxx 002014575012 	fsb     one,x2          " EAQ = 2 * abs_x**2 - 1
003304 xxxx 003355704000 	tsx4	part_arcsine
003305 xxxx 001534477012 	dfad	half_pi,x2      " EAQ = part_asin + pi/2
003306 xxxx 000400461003 	fmp     =0.5,du         " EAQ = .5*part_asin + pi/4
003307 xxxx 003162430000 	fszn	arg_x           " was arg_x negative
003310 xxxx 000000605013 	tpl     0,x3            " no, return to entry
003311 xxxx 000000513000 	fneg	0               " EAQ = -EAQ
003312 xxxx 000000710013 	tra     0,x3            " Return to entry
003313 xxxx 003436425012 	fcmg	bound_3,x2      " is abs_x in the range [.866, .966)
003314 xxxx 003332605000 	tpl     above_bound_3	" no, find correct range
003315 xxxx 003160461000 	fmp     abs_x           " EAQ = abs_x**2
003316 xxxx 003160457000 	dfst	AStemp          " why not just abs_x?
003317 xxxx 003446461012 	fmp     eight8,x2       " EAQ = 8*abs_x**2
003320 xxxx 003446575012 	fsb     eight8,x2       " EAQ = 8*abs_x**2 - 8
003321 xxxx 003160463000 	dfmp	AStemp          " EAQ = 8*abs_x**4 - 8*abs_x**2
003322 xxxx 002014475012 	fad     one,x2          " EAQ = 8*abs_x**4 - 8*abs_x**2 + 1
003323 xxxx 003355704000 	tsx4	part_arcsine
003324 xxxx 003442477012 	dfad	three_pi_by_two,x2	" EAQ = part_asin + 3*pi/2
003325 xxxx 003150463012 	dfmp	one_quarter,x2	" EAQ = part_asin/4 + 3*pi/8
003326 xxxx 003162430000 	fszn	arg_x           " was arg_x negative
003327 xxxx 000000605013 	tpl     0,x3            " no, return to entry
003330 xxxx 000000513000 	fneg	0               " EAQ = -EAQ
003331 xxxx 000000710013 	tra     0,x3            " return to entry
003332 xxxx 003440425012 	fcmg	bound_4,x2	" is abs_x in the range [.966, 1]
003333 xxxx 003352605400 	tpnz	arcsine_domain_error
003334 xxxx 000400461003 	fmp     =0.5,du		" EAQ = abs_x/2
003335 xxxx 000000513000 	fneg	0           " EAQ = - abs_x/2
003336 xxxx 000400475003 	fad     =0.5,du		" EAQ = .5 - abs_x/2 or (1-abs_x)/2
003337 xxxx 003350707012     tsx7	square_root,x2	" call sqrt function
003340 xxxx 003355704000 	tsx4	part_arcsine	" EAQ = sqrt ((1 - abs_x)/2)
003341 xxxx 003444461012 	fmp     two,x2		" EAQ = 2*part_asin
003342 xxxx 000000513000 	fneg	0           " EAQ = - 2*part_asin
003343 xxxx 001534477012 	dfad	half_pi,x2	" EAQ = pi/2 - 2*part_asin
003344 xxxx 003162430000 	fszn	arg_x		" was arg_x negative
003345 xxxx 000000605013 	tpl     0,x3		" no, return to entry
003346 xxxx 000000513000 	fneg	0           " EAQ = -EAQ
003347 xxxx 000000710013 	tra     0,x3		" return to entry
003350 xxxx 003076710000     tra double_square_root_
003351 xxxx 000000011000 	nop
003352 xxxx 000072236007 	ldq	58,dl
003353 xxxx 400000431003 	fld	=0.0,du
003354 xxxx 300000710100 	tra	pr3|0		" return to caller
003355 xxxx 003450425012 	fcmg	formula_bound,x2	" Can we use a short polynomial?
003356 xxxx 003376604000 	tmi     small_formula       " Yup.
003357 xxxx 002344457000 	dfst	y
003360 xxxx 002344463000 	dfmp	y
003361 xxxx 003164457000 	dfst	yy          " yy = y*y
003362 xxxx 003420463012 	dfmp	ACp2,x2		" EAQ = yy*p2
003363 xxxx 003416477012 	dfad	ACp1,x2		" EAQ = p1 + yy*p2
003364 xxxx 003164463000 	dfmp	yy          " EAQ = yy*(p1 + yy*p2)
003365 xxxx 003414477012 	dfad	ACp0,x2		" EAQ = p0 + yy*(p1 + yy*p2)
003366 xxxx 003166457000 	dfst	p
003367 xxxx 003164433000 	dfld	yy          " EAQ = yy
003370 xxxx 003430477012 	dfad	ACq1,x2		" EAQ = q1 + yy
003371 xxxx 003164463000 	dfmp	yy          " EAQ = yy*(q1 + yy)
003372 xxxx 003426477012 	dfad	ACq0,x2		" EAQ = q0 + yy*(q1 + yy)
003373 xxxx 003166527000 	dfdi	p           " EAQ = p/q
003374 xxxx 002344463000 	dfmp	y           " EAQ = y*p/q
003375 xxxx 000000710014 	tra     0,x4		" Return from part_arcsine
003376 xxxx 003452425012 	fcmg	ACepsilon,x2	" Is any calculation necessary?
003377 xxxx 000000604014 	tmi     0,x4            " No. Small number. Just return.
003400 xxxx 002344457000 	dfst	y
003401 xxxx 002344463000 	dfmp	y
003402 xxxx 003164457000 	dfst	yy          " yy = y*y
003403 xxxx 003424463012 	dfmp	ACpp1,x2	" EAQ = yy*pp1
003404 xxxx 003422477012 	dfad	ACpp0,x2	" EAQ = pp0 + yy*pp1
003405 xxxx 003166457000 	dfst	pp
003406 xxxx 003164433000 	dfld	yy
003407 xxxx 003432477012 	dfad	ACqq0,x2	" EAQ = qq0 + yy
003410 xxxx 003166527000 	dfdi	pp          " EAQ = pp/qq
003411 xxxx 002344463000 	dfmp	y           " EAQ = y*pp/qq
003412 xxxx 000000710014 	tra     0,x4		" Return from part_arcsine
003413 xxxx 000000011000 	even "(allocating 1 nop)
003414 xxxx 006546503556 ACp0:       dec	.5603629044813127d01
003415 xxxx 674615323460 
003416 xxxx 007330527031 ACp1:       dec	-.46145309466645d01
003417 xxxx 443310603646 
003420 xxxx 776773374667 ACp2:       dec	.49559947478731d00
003421 xxxx 004024666576 
003422 xxxx 005344473435 ACpp0:      dec	-2.21393498174243d00
003423 xxxx 147621156306 
003424 xxxx 000503050602 ACpp1:      dec	.63101484054356d00
003425 xxxx 166633467044 
003426 xxxx 006546503556 ACq0:       dec	.5603629030606043d01
003427 xxxx 502571776373 
003430 xxxx 007234713661 ACq1:       dec	-.554846659934668d01
003431 xxxx 311556204324 
003432 xxxx 005344473435 ACqq0:      dec	-2.21393497792717d00
003433 xxxx 251250461716 
003434 xxxx 000673317272 bound_2:	dec	.866025404d0
003435 xxxx 072755035014 
003436 xxxx 000756433521 bound_3:	dec	.965925826d0
003437 xxxx 620404312164 
003440 xxxx 002400000000 bound_4:	dec	1.0d0
003441 xxxx 000000000000 
003442 xxxx 006455457437 	dec 	.471238898038468985787763d01
003443 xxxx 631441644324 
003444 xxxx 004400000000 two:	dec	2.0d0
003445 xxxx 000000000000 
003446 xxxx 010400000000 eight8:	dec	8d0
003447 xxxx 000000000000 
003450 xxxx 774413242502 	dec	0.13052619d0
003451 xxxx 524446250766 
003452 xxxx 704471421604 ACepsilon:	dec	5.7031627d-10
003453 xxxx 407031702277 
003454 xxxx 777777777000 	oct	777777777000
003455 xxxx 003460710000 crlf:	save
003456 xxxx 000000000000 
003457 xxxx 003456630000 
003460 xxxx 003456754000 
003461 xxxx 003456741000 
003462 xxxx 003471755000         sta     saveA
003463 xxxx 004264235000         lda     =012
003464 xxxx 000001420400         emCall  1
003465 xxxx 004265235000         lda     =015
003466 xxxx 000001420400         emcall  1
003467 xxxx 003471235000         lda     saveA
003470 xxxx 003457710000         return  crlf
003471 xxxx 000000000000 saveA:  bss     1
003472 xxxx 003501710000 ioa:    save    2, 4, 5, 6
003473 xxxx 000000000000 
003474 xxxx 000000222003 
003475 xxxx 000001224003 
003476 xxxx 000002225003 
003477 xxxx 000003226003 
003500 xxxx 003473630000 
003501 xxxx 003473754000 
003502 xxxx 003473741000 
003503 xxxx 003474742000 
003504 xxxx 003475744000 
003505 xxxx 003476745000 
003506 xxxx 003477746000 
003507 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
003510 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
003511 xxxx 000000626015         eax6    0, x5
003512 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
003513 xxxx 003530755000         sta     i29
003514 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
003515 xxxx 000033731000         ars     27      " determine word count
003516 xxxx 000006735000     	als     6       " count to upper word of tally
003517 xxxx 003530255000     	orsa    i29
003520 xxxx 000000626014     	eax6    0, x4   " address of string into X6
003521 xxxx 003530746000     	stx6    i29     " address to upper word of tally
003522 xxxx 003530235052 inext:  lda     i29, sc
003523 xxxx 000136115007         cmpa    =o000136,dl		" ^
003524 xxxx 003531600000         tze     iernot      " if so, go process it
003525 xxxx 000001420400 out1:  	emCall  1
003526 xxxx 003522607000     	ttf     inext
003527 xxxx 003474710000         return  ioa
003530 xxxx 000000000041 i29:	tallyb  0, 0, 1
003531 xxxx 003530235052 iernot: lda     i29, sc         " get next char ...
003532 xxxx 000136115007         cmpa    =o000136,dl     " is it another "^"?
003533 xxxx 003551600000         tze     i21             " No, just print it ...
003534 xxxx 000167115007         cmpa    =o000167,dl     " is it a "w"?
003535 xxxx 003553600000         tze     idoW            " do full word octal
003536 xxxx 000157115007         cmpa    =o000157,dl     " is it an "o"?
003537 xxxx 003601600000         tze     idoO            " print zero suppressed octal
003540 xxxx 000156115007         cmpa    =o000156,dl     " is it a "n"?
003541 xxxx 003624600000         tze     idoN            " octal w/ no spaces inserted
003542 xxxx 000144115007         cmpa    =o000144,dl     " is it a "d"?
003543 xxxx 003652600000         tze     idoD            " decimal
003544 xxxx 000141115007         cmpa    =o000141,dl     " is it a ^a?
003545 xxxx 003660600000         tze     idoA            " 4 char ascii display
003546 xxxx 000147115007         cmpa    =o000147,dl     " is it a ^g?
003547 xxxx 003671600000         tze     idoG            " 6 char GE BCD display
003550 xxxx 003525710000         tra     out1        " unknown just print it....
003551 xxxx 000001420400 i21:    emCall  1           " output A to console
003552 xxxx 003522710000         tra     inext
003553 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
003554 xxxx 003747702000         tsx2    octwd
003555 xxxx 003650757000         staq    ioaSafe     " bcd in AQ
003556 xxxx 000044773000         lrl     36          " A => Q
003557 xxxx 000006622000         eax2    6
003560 xxxx 000000235007 idoW2:  lda     =0, dl
003561 xxxx 000006737000         lls     6
003562 xxxx 000002420400         emCall  2           " output GE code char to console
003563 xxxx 777777622012         eax2    -1, 2
003564 xxxx 003560601000         tnz     idoW2
003565 xxxx 003650237000         ldaq    ioaSafe
003566 xxxx 000000235007         lda     =0, dl      " 0 => A
003567 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
003570 xxxx 000002420400         emcall  2
003571 xxxx 000006622000         eax2    6
003572 xxxx 000000235007 idoW3:  lda     =0,dl
003573 xxxx 000006737000         lls     6
003574 xxxx 000002420400         emCall  2
003575 xxxx 777777622012         eax2    -1, 2
003576 xxxx 003572601000         tnz     idoW3
003577 xxxx 000001065003         adx5    1,du
003600 xxxx 003522710000         tra     inext
003601 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
003602 xxxx 003747702000         tsx2    octwd
003603 xxxx 003650757000         staq    ioaSafe         " bcd in AQ
003604 xxxx 003622235000         lda     idOTly
003605 xxxx 003623755000         sta     idOT
003606 xxxx 003623235052 idO1:   lda     idOT, sc        " get char into A
003607 xxxx 000000115007         cmpa    =0, dl          " a zero?
003610 xxxx 003616601000         tnz     idONZ + 1       " nope
003611 xxxx 003606607000         ttf     idO1            " Yes, a Zero. Go for more
003612 xxxx 000002420400         emCall  2               " output a single 0
003613 xxxx 000001065003         adx5    1,du
003614 xxxx 003522710000         tra     inext
003615 xxxx 003623235052 idONZ:  lda     idOT, sc        " get char into A
003616 xxxx 000002420400         emCall  2
003617 xxxx 003615607000         ttf     idONZ           " Yes, a Zero. Go for more
003620 xxxx 000001065003         adx5    1,du
003621 xxxx 003522710000         tra     inext
003622 xxxx 003650001400 idOTly: tally   ioaSafe, 12, 0
003623 xxxx 000000000000 idOT:   bss     1
003624 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
003625 xxxx 003747702000         tsx2    octwd
003626 xxxx 003650757000         staq    ioaSafe     " bcd in AQ
003627 xxxx 000044773000         lrl     36          " A => Q
003630 xxxx 000006622000         eax2    6
003631 xxxx 000000235007 idoN2:  lda     =0,dl
003632 xxxx 000006737000         lls     6
003633 xxxx 000002420400         emCall  2           " output GE code char to console
003634 xxxx 777777622012         eax2    -1, 2
003635 xxxx 003631601000         tnz     idoN2
003636 xxxx 003650237000         ldaq    ioaSafe
003637 xxxx 000000235007         lda     =0, dl      " 0 => A
003640 xxxx 000006622000         eax2    6
003641 xxxx 000000235007 idoN3:  lda     =0, dl
003642 xxxx 000006737000         lls     6
003643 xxxx 000002420400         emCall  2
003644 xxxx 777777622012         eax2    -1, 2
003645 xxxx 003641601000         tnz     idoN3
003646 xxxx 000001065003         adx5    1,du
003647 xxxx 003522710000         tra     inext
003650 xxxx 000000000000 ioaSafe:  bss 2
003652 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
003653 xxxx 003702701000         call    toDec
003654 xxxx 003656710000 
003655 xxxx 000000000000 
003656 xxxx 000001065003         adx5    1,du
003657 xxxx 003522710000         tra     inext
003660 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
003661 xxxx 000004622000         eax2    4
003662 xxxx 000000235007 idoA2:  lda     =0,dl
003663 xxxx 000011737000         lls     9
003664 xxxx 000001420400         emCall  1
003665 xxxx 777777622012         eax2    -1, 2
003666 xxxx 003662601000         tnz     idoA2
003667 xxxx 000001065003         adx5    1,du        " into next argument
003670 xxxx 003522710000         tra     inext
003671 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
003672 xxxx 000006622000         eax2    6
003673 xxxx 000000235007 idoG2:  lda     =0,dl
003674 xxxx 000006737000         lls     6
003675 xxxx 000002420400         emCall  2
003676 xxxx 777777622012         eax2    -1, 2
003677 xxxx 003673601000         tnz     idoG2
003700 xxxx 000001065003         adx5    1,du        " into next argument
003701 xxxx 003522710000         tra     inext
003702 xxxx 003705710000 toDec:  save    "2,3,4,5,6,7
003703 xxxx 000000000000 
003704 xxxx 003703630000 
003705 xxxx 003703754000 
003706 xxxx 003703741000 
003707 xxxx 004266116000         cmpq    =-34359738368       " the weird one?
003710 xxxx 003714601000         tnz     toDec2
003711 xxxx 003746235000         lda     decMTly             " just print it and be done with it
003712 xxxx 003742755000         sta     decTly
003713 xxxx 003732710000         tra     toDec1
003714 xxxx 003736756000 toDec2: stq     decNo
003715 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
003716 xxxx 003720605000         tpl     toDec0      " No
003717 xxxx 003736336000         lcq     decNo       " -decNo => Q
003720 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
003721 xxxx 000060075007         ada     =o060,dl    " add ascii '0' (=1A0) to A
003722 xxxx 003742755045         sta     decTly, scr " start writing characters backwards
003723 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
003724 xxxx 003720601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
003725 xxxx 003736235000         lda     decNo
003726 xxxx 000000115007         cmpa    =0,dl
003727 xxxx 003732605000         tpl     toDec1
003730 xxxx 000055235007         lda     =o055,dl    " (-) => A
003731 xxxx 003742755045         sta     decTly, scr " write (-) sign
003732 xxxx 003742235052 toDec1: lda     decTly, sc
003733 xxxx 000001420400         emCall  1
003734 xxxx 003732607000         ttf     toDec1
003735 xxxx 003704710000         return  toDec
003736 xxxx 000000000000 decNo:  dec     0
003737 xxxx 000000000000 decBuf: bss     3
003742 xxxx 003741000040 decTly: tallyb  decBuf+2, , 0
003743 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35
003744 xxxx 065071067063 
003745 xxxx 070063066070 
003746 xxxx 003743001440 decMTly:tallyb  decMM, 12, 0
003747 xxxx 003764742000 octwd:	stx2	octx2
003750 xxxx 000006622000 	eax2	6
003751 xxxx 000003736000 	qls     3
003752 xxxx 000003777000 	llr     3
003753 xxxx 777777622012 	eax2	-1,2
003754 xxxx 003751605400 	tpnz	*-3
003755 xxxx 004006756000 	stq     octtemp
003756 xxxx 000006622000 	eax2	6
003757 xxxx 000003736000 	qls     3
003760 xxxx 000003777000 	llr     3
003761 xxxx 777777622012 	eax2	-1,2
003762 xxxx 003757605400 	tpnz	*-3
003763 xxxx 004006235000 	lda     octtemp
003764 xxxx 003764622000 octx2:	eax2	*
003765 xxxx 000000710012 	tra     0,2
003766 xxxx 004004742000 hexwd:	stx2	hexx2
003767 xxxx 000044773000 	lrl     36          "shift to Q
003770 xxxx 000006622000 	eax2	6           "	process 6 characters
003771 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
003772 xxxx 000004737000 	lls     4           "shift in 4 bits
003773 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
003774 xxxx 003776604400 	tmoz	*+2
003775 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
003776 xxxx 000006773000 	lrl     6
003777 xxxx 004006235000 	lda     octtemp		"get temporary
004000 xxxx 000006737000 	lls     6           "insert new character
004001 xxxx 004006755000 	sta     octtemp		"and store
004002 xxxx 777777622012 	eax2	-1,2		"decrement index
004003 xxxx 003771605400 	tpnz	hexloop
004004 xxxx 004004622000 hexx2:	eax2	*
004005 xxxx 000000710012 	tra     0,2		"return to caller
004006 xxxx 000000000000 octtemp:	oct	0
004007 xxxx 000000633000 rd_clock:	rccl                " read the clock
004010 xxxx 004132757000 cv_clock:	staq	rdctime     " save clock reading
004011 xxxx 004103742000 	stx2	datx2               " save XR's
004012 xxxx 004104740000 	stx0	datx2+1             " ..
004013 xxxx 000034235007 	lda     28,dl               " Initialize montab
004014 xxxx 004135755000 	sta     montab+1			" to prime Feb
004015 xxxx 004132237000 	ldaq	rdctime             " Get clock reading
004016 xxxx 000001737000 	lls     1                   " Set for dvf
004017 xxxx 004267507000 	dvf     =1000000			" Get seconds since 1900.
004020 xxxx 000044777000 	llr     36                  " Into Q.
004021 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
004022 xxxx 004116755000 	sta     rdclock.sec         " Save for inspection.
004023 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
004024 xxxx 004115755000 	sta     rdclock.min
004025 xxxx 000006627000 	eax7	6
004026 xxxx 004106702000 	tsx2	datecv              " Convert the minutes.
004027 xxxx 004126176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
004030 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
004031 xxxx 004125756000 	stq     rdclock.day_of_century	" save for  later.
004032 xxxx 004114755000 	sta     rdclock.hr          " Hours since daybreak.
004033 xxxx 004106702000 	tsx2	datecv              " Convert the hours
004034 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
004035 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
004036 xxxx 004040604000 	tmi     *+2                 " no
004037 xxxx 004135054000 	aos     montab+1			" allow for feb 29
004040 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
004041 xxxx 003555036007 	adlq	1901,dl
004042 xxxx 004124756000 	stq     rdclock.year		" Save
004043 xxxx 000044777000 	llr     36
004044 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
004045 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
004046 xxxx 004051601000 	tnz     *+3                 " No.
004047 xxxx 000001176007 	sbq     1,dl                " Adjust year and
004050 xxxx 000555235007 	lda     365,dl              " day numbers.
004051 xxxx 004124056000 	asq     rdclock.year		" Add in years complete.
004052 xxxx 000000626000 	eax6	0                   " search for correct month
004053 xxxx 030220520201 	rpt     12,1,tmi			" ..
004054 xxxx 004134175016 	sba     montab,6			" subtract off days for each month
004055 xxxx 777777075016 	ada     -1,6                " put back last entry
004056 xxxx 000001075007 	ada     1,dl                " plus one more
004057 xxxx 004121755000 	sta     rdclock.day_of_month	" Day of month
004060 xxxx 004106702000 	tsx2	datecv              " convert day
004061 xxxx 000000635016 	eaa     0,6
004062 xxxx 004134135003 	sbla	montab,du			" get index into month table
004063 xxxx 000022771000 	arl     18                  "..
004064 xxxx 004117755000 	sta     rdclock.month		" Save month number
004065 xxxx 004161236005 	ldq     rdc.months-1,al		" Get name of month.
004066 xxxx 004120756000 	stq     rdclock.month_name
004067 xxxx 004106702000 	tsx2	datecv              " convert month
004070 xxxx 000000024400 	mvne	(),(),()			" edit the date and time
004071 xxxx 004131070010 	desc4ns	date,8
004072 xxxx 004150000014 	desc9a	datedit,12
004073 xxxx 004132020014 	desc6a	rdctime,12
004074 xxxx 004125236000 	ldq     rdclock.day_of_century
004075 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
004076 xxxx 000007506007 	div     7,dl
004077 xxxx 004122755000 	sta     rdclock.day_of_week
004100 xxxx 004153236005 	ldq     rdc.days,al         " Get name of day.
004101 xxxx 004123756000 	stq     rdclock.day_name
004102 xxxx 004132237000 	ldaq	rdctime             " get conversion in AQ
004103 xxxx 004103622000 datx2:	eax2	*			" restore XR's
004104 xxxx 004104620000 	eax0    *               " ..
004105 xxxx 000000710012 	tra     0,2             " return to caller
004106 xxxx 004130755000 datecv:	sta	datenum			" save number
004107 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
004110 xxxx 004130000004 	desc9a	datenum,4
004111 xxxx 004131070002 	desc4ns	date,2
004112 xxxx 777776627017 	eax7	-2,7			" move offset index
004113 xxxx 000000710012 	tra     0,2             " and return
004114 xxxx 000000000000 	bss	,1
004115 xxxx 000000000000 	bss	,1
004116 xxxx 000000000000 	bss	,1
004117 xxxx 000000000000 	bss	,1
004120 xxxx 000000000000 	bss	,1
004121 xxxx 000000000000 	bss	,1
004122 xxxx 000000000000 	bss	,1
004123 xxxx 000000000000 	bss	,1
004124 xxxx 000000000000 	bss	,1
004125 xxxx 000000000000 	bss	,1
004126 xxxx 000000000007     dec     7   "8
004127 xxxx 160163164040     aci     'pst '
004130 xxxx 000000000000 datenum:	bss	,1
004131 xxxx 000000000000 date:	bss	,1
004132 xxxx 000000000000 rdctime:	bss	,2
004134 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
004135 xxxx 000000000034 
004136 xxxx 000000000037 
004137 xxxx 000000000036 
004140 xxxx 000000000037 
004141 xxxx 000000000036 
004142 xxxx 000000000037 
004143 xxxx 000000000037 
004144 xxxx 000000000036 
004145 xxxx 000000000037 
004146 xxxx 000000000036 
004147 xxxx 000000000037 
004150 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
004151 xxxx 061322021322 
004152 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
004153 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat '
004154 xxxx 155157156040 
004155 xxxx 164165145040 
004156 xxxx 167145144040 
004157 xxxx 164150165162 
004160 xxxx 146162151040 
004161 xxxx 163141164040 
004162 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec '
004163 xxxx 146145142040 
004164 xxxx 155141162040 
004165 xxxx 141160162040 
004166 xxxx 155141171040 
004167 xxxx 152165156040 
004170 xxxx 152165154040 
004171 xxxx 141165147040 
004172 xxxx 163145160164 
004173 xxxx 157143164040 
004174 xxxx 156157166040 
004175 xxxx 144145143040 
004176 xxxx 772631463146 single-precision literal (=0.100000)
004177 xxxx 774631463146 single-precision literal (=0.200000)
004200 xxxx 776777777363 single-precision literal (=0.499999)
004201 xxxx 000400000000 single-precision literal (=0.500000)
004202 xxxx 000400000206 single-precision literal (=0.500001)
004203 xxxx 000411255321 single-precision literal (=0.518240)
004204 xxxx 000546314631 single-precision literal (=0.700000)
004205 xxxx 000721727024 single-precision literal (=0.910000)
004206 xxxx 000777171243 single-precision literal (=0.998510)
004207 xxxx 000777777776 single-precision literal (=1.000000)
004210 xxxx 002400000000 single-precision literal (=1.000000)
004212 xxxx 004622077325 double-precision literal (=3.141593)
004213 xxxx 042055060301 
004214 xxxx 002400000000 single-precision literal (=1.000000)
004215 xxxx 002400000000 single-precision literal (=1.000000)
004216 xxxx 012440000000 single-precision literal (=18.000000)
004217 xxxx 014460000000 single-precision literal (=38.000000)
004220 xxxx 014720000000 single-precision literal (=58.000000)
004221 xxxx 016470000000 single-precision literal (=78.000000)
004222 xxxx 016755645706 single-precision literal (=123.456000)
004223 xxxx 024612431704 single-precision literal (=789.101112)
004224 xxxx 002400000000 single-precision literal (=1.000000)
004225 xxxx 002474030177 single-precision literal (=1.234560)
004226 xxxx 007135170060 single-precision literal (=-6.543210)
004227 xxxx 004622077325 single-precision literal (=3.141593)
004230 xxxx 004622077325 single-precision literal (=3.141593)
004231 xxxx 014420000000 single-precision literal (=34.000000)
004232 xxxx 015360000000 single-precision literal (=-34.000000)
004233 xxxx 014740000000 single-precision literal (=60.000000)
004234 xxxx 014550000000 single-precision literal (=45.000000)
004235 xxxx 010612702436 single-precision literal (=12.340000)
004236 xxxx 015040000000 single-precision literal (=-60.000000)
004237 xxxx 015230000000 single-precision literal (=-45.000000)
004240 xxxx 011165075341 single-precision literal (=-12.340000)
004241 xxxx 014740000000 single-precision literal (=60.000000)
004242 xxxx 014550000000 single-precision literal (=45.000000)
004243 xxxx 010612702436 single-precision literal (=12.340000)
004244 xxxx 015040000000 single-precision literal (=-60.000000)
004245 xxxx 015230000000 single-precision literal (=-45.000000)
004246 xxxx 011165075341 single-precision literal (=-12.340000)
004247 xxxx 014740000000 single-precision literal (=60.000000)
004250 xxxx 014550000000 single-precision literal (=45.000000)
004251 xxxx 010612702436 single-precision literal (=12.340000)
004252 xxxx 015040000000 single-precision literal (=-60.000000)
004253 xxxx 015230000000 single-precision literal (=-45.000000)
004254 xxxx 011165075341 single-precision literal (=-12.340000)
004255 xxxx 004622077325 single-precision literal (=3.141593)
004256 xxxx 004400000000 single-precision literal (=2.000000)
004257 xxxx 004622077325 single-precision literal (=3.141593)
004260 xxxx 004622077325 single-precision literal (=3.141593)
004261 xxxx 004533741242 single-precision literal (=2.718282)
004262 xxxx 004533741242 single-precision literal (=2.718282)
004263 xxxx 000000000000 decimal literal (=0)
004264 xxxx 000000000012 octal literal (=o12)
004265 xxxx 000000000015 octal literal (=o15)
004266 xxxx 400000000000 decimal literal (=-34359738368)
004267 xxxx 000003641100 decimal literal (=1000000)
