!SIZE 004466
!SEGNAME TestFP
!SEGDEF msgHello 000040
!ENTRY main_ 000052 004356
!ENTRY FPtests_ 000062 004360
!LINKAGE 004456 4
!SEGREF UtilsA Aone 004456
!SEGREF UtilsB Bone 004460
!SEGREF UtilsB Btwo 004462
!SEGREF UtilsB Bthree 004464
000000 xxxx 000052710000     tra     main_
000001 xxxx 400000352120     short_call  main_
000002 xxxx 700036670120 
000003 xxxx 600030370120 
000004 xxxx 700044710120     short_return
000005 xxxx 700042710120     return
000006 xxxx 000040627000     push    32
000007 xxxx 700040272120 
000010 xxxx 000563627000     push
000011 xxxx 700040272120 
000012 xxxx 700046272120     getlp
000013 xxxx 600616235100     lda     temp3
000014 xxxx 600266237100     ldaq    pad
000015 xxxx 600056236100     ldq     .on_unit
000016 xxxx 600000254100     call	pr1|0,*(pr2|0)
000017 xxxx 200000350100 
000020 xxxx 100000352120 
000021 xxxx 600040753100 
000022 xxxx 700036670120 
000023 xxxx 600000173100 
000024 xxxx 600040073100 
000025 xxxx 600000254100     call	bp|0(=v18/0,18/4,18/0,18/0)
000026 xxxx 004362350000 
000027 xxxx 200000352100 
000030 xxxx 600040753100 
000031 xxxx 700036670120 
000032 xxxx 600000173100 
000033 xxxx 600040073100 
000034 xxxx 400000235120     lda     Aone
000035 xxxx 400006236120     ldq     Bthree
000036 xxxx 400004756120     stq     Btwo
000037 xxxx 400002755120     sta     Bone
000040 xxxx 030124150151 msgHello:   acc     "This is TestFP ...^g^g\r\n"
000041 xxxx 163040151163 
000042 xxxx 040124145163 
000043 xxxx 164106120040 
000044 xxxx 056056056136 
000045 xxxx 147136147015 
000046 xxxx 012040040040 
000047 xxxx 000000011000             even "(allocating 1 nop)
000050 xxxx 000000000000             bss     Date, 2
000052 xxxx 004167702200     tsx2	rd_clock
000053 xxxx 000050757200     staq	Date        "MM/DD HH:MM
000054 xxxx 003652701000     call    ioa(msgHello, Date, Date+1)
000055 xxxx 000062710000 
000056 xxxx 000000000000 
000057 xxxx 000040000000 
000060 xxxx 000050000000 
000061 xxxx 000051000000 
000062 xxxx 003652701000     call    ioa(msgArcsin)
000063 xxxx 000066710000 
000064 xxxx 000000000000 
000065 xxxx 000747000000 
000066 xxxx 003400701000     call    arc_sine_degrees_(=.1)
000067 xxxx 000072710000 
000070 xxxx 000000000000 
000071 xxxx 004364000000 
000072 xxxx 000006420400     emCall  6
000073 xxxx 003635701000     call    crlf
000074 xxxx 000076710000 
000075 xxxx 000000000000 
000076 xxxx 003400701000     call    arc_sine_degrees_(=.2)
000077 xxxx 000102710000 
000100 xxxx 000000000000 
000101 xxxx 004365000000 
000102 xxxx 000006420400     emCall  6
000103 xxxx 003635701000     call    crlf
000104 xxxx 000106710000 
000105 xxxx 000000000000 
000106 xxxx 003400701000     call    arc_sine_degrees_(=.499999)
000107 xxxx 000112710000 
000110 xxxx 000000000000 
000111 xxxx 004366000000 
000112 xxxx 000006420400     emCall  6
000113 xxxx 003635701000     call    crlf
000114 xxxx 000116710000 
000115 xxxx 000000000000 
000116 xxxx 003400701000     call    arc_sine_degrees_(=.5)
000117 xxxx 000122710000 
000120 xxxx 000000000000 
000121 xxxx 004367000000 
000122 xxxx 000006420400     emCall  6
000123 xxxx 003635701000     call    crlf
000124 xxxx 000126710000 
000125 xxxx 000000000000 
000126 xxxx 003400701000     call    arc_sine_degrees_(=.500001)
000127 xxxx 000132710000 
000130 xxxx 000000000000 
000131 xxxx 004370000000 
000132 xxxx 000006420400     emCall  6
000133 xxxx 003635701000     call    crlf
000134 xxxx 000136710000 
000135 xxxx 000000000000 
000136 xxxx 003400701000     call    arc_sine_degrees_(=.51823962601)
000137 xxxx 000142710000 
000140 xxxx 000000000000 
000141 xxxx 004371000000 
000142 xxxx 000006420400     emCall  6
000143 xxxx 003635701000     call    crlf
000144 xxxx 000146710000 
000145 xxxx 000000000000 
000146 xxxx 003400701000     call    arc_sine_degrees_(=.7)
000147 xxxx 000152710000 
000150 xxxx 000000000000 
000151 xxxx 004372000000 
000152 xxxx 000006420400     emCall  6
000153 xxxx 003635701000     call    crlf
000154 xxxx 000156710000 
000155 xxxx 000000000000 
000156 xxxx 003400701000     call    arc_sine_degrees_(=.91)
000157 xxxx 000162710000 
000160 xxxx 000000000000 
000161 xxxx 004373000000 
000162 xxxx 000006420400     emCall  6
000163 xxxx 003635701000     call    crlf
000164 xxxx 000166710000 
000165 xxxx 000000000000 
000166 xxxx 003400701000     call    arc_sine_degrees_(=.9985096709)
000167 xxxx 000172710000 
000170 xxxx 000000000000 
000171 xxxx 004374000000 
000172 xxxx 000006420400     emCall  6
000173 xxxx 003635701000     call    crlf
000174 xxxx 000176710000 
000175 xxxx 000000000000 
000176 xxxx 003400701000     call    arc_sine_degrees_(=.99999999)
000177 xxxx 000202710000 
000200 xxxx 000000000000 
000201 xxxx 004375000000 
000202 xxxx 000006420400     emCall  6
000203 xxxx 003635701000     call    crlf
000204 xxxx 000206710000 
000205 xxxx 000000000000 
000206 xxxx 003400701000     call    arc_sine_degrees_(=1.0) " 90
000207 xxxx 000212710000 
000210 xxxx 000000000000 
000211 xxxx 004376000000 
000212 xxxx 000006420400     emCall  6
000213 xxxx 003635701000     call    crlf
000214 xxxx 000216710000 
000215 xxxx 000000000000 
000216 xxxx 004400433000     dfld     =3.1415926535897932d0   " 1.77245385091
000217 xxxx 003256707000     tsx7    double_square_root_
000220 xxxx 000006420400     emCall  6
000221 xxxx 003635701000     call    crlf
000222 xxxx 000224710000 
000223 xxxx 000000000000 
000224 xxxx 003652701000     call    ioa(msgArctan)
000225 xxxx 000230710000 
000226 xxxx 000000000000 
000227 xxxx 000754000000 
000230 xxxx 002604701000     call    arc_tangent_radians_(=1.0)
000231 xxxx 000234710000 
000232 xxxx 000000000000 
000233 xxxx 004402000000 
000234 xxxx 006400461003     fmp     =4.0,du
000235 xxxx 000006420400     emCall  6
000236 xxxx 003635701000     call    crlf
000237 xxxx 000241710000 
000240 xxxx 000000000000 
000241 xxxx 002530701000     call    arc_tangent_degrees_(=1.0)
000242 xxxx 000245710000 
000243 xxxx 000000000000 
000244 xxxx 004403000000 
000245 xxxx 000006420400     emCall  6
000246 xxxx 003635701000     call    crlf
000247 xxxx 000251710000 
000250 xxxx 000000000000 
000251 xxxx 002530701000     call    arc_tangent_degrees_(=18.0)
000252 xxxx 000255710000 
000253 xxxx 000000000000 
000254 xxxx 004404000000 
000255 xxxx 000006420400     emCall  6
000256 xxxx 003635701000     call    crlf
000257 xxxx 000261710000 
000260 xxxx 000000000000 
000261 xxxx 002530701000     call    arc_tangent_degrees_(=38.0)
000262 xxxx 000265710000 
000263 xxxx 000000000000 
000264 xxxx 004405000000 
000265 xxxx 000006420400     emCall  6
000266 xxxx 003635701000     call    crlf
000267 xxxx 000271710000 
000270 xxxx 000000000000 
000271 xxxx 002530701000     call    arc_tangent_degrees_(=58.0)
000272 xxxx 000275710000 
000273 xxxx 000000000000 
000274 xxxx 004406000000 
000275 xxxx 000006420400     emCall  6
000276 xxxx 003635701000     call    crlf
000277 xxxx 000301710000 
000300 xxxx 000000000000 
000301 xxxx 002530701000     call    arc_tangent_degrees_(=78.0)
000302 xxxx 000305710000 
000303 xxxx 000000000000 
000304 xxxx 004407000000 
000305 xxxx 000006420400     emCall  6
000306 xxxx 003635701000     call    crlf
000307 xxxx 000311710000 
000310 xxxx 000000000000 
000311 xxxx 002555701000     call    arc_tangent_degrees_2_(=123.456, =789.101112)
000312 xxxx 000316710000 
000313 xxxx 000000000000 
000314 xxxx 004410000000 
000315 xxxx 004411000000 
000316 xxxx 000006420400     emCall  6
000317 xxxx 003635701000     call    crlf
000320 xxxx 000322710000 
000321 xxxx 000000000000 
000322 xxxx 003652701000     call    ioa(msgExp)
000323 xxxx 000326710000 
000324 xxxx 000000000000 
000325 xxxx 000761000000 
000326 xxxx 002412701000     call    exponential_(=1.0)
000327 xxxx 000332710000 
000330 xxxx 000000000000 
000331 xxxx 004412000000 
000332 xxxx 000006420400     emCall  6
000333 xxxx 003635701000     call    crlf
000334 xxxx 000336710000 
000335 xxxx 000000000000 
000336 xxxx 002412701000     call    exponential_(=1.23456)
000337 xxxx 000342710000 
000340 xxxx 000000000000 
000341 xxxx 004413000000 
000342 xxxx 000006420400     emCall  6
000343 xxxx 003635701000     call    crlf
000344 xxxx 000346710000 
000345 xxxx 000000000000 
000346 xxxx 002412701000     call    exponential_(=-6.54321)
000347 xxxx 000352710000 
000350 xxxx 000000000000 
000351 xxxx 004414000000 
000352 xxxx 000006420400     emCall  6
000353 xxxx 003635701000     call    crlf
000354 xxxx 000356710000 
000355 xxxx 000000000000 
000356 xxxx 003652701000     call    ioa(msgCotan)
000357 xxxx 000362710000 
000360 xxxx 000000000000 
000361 xxxx 000775000000 
000362 xxxx 001754701000     call    cotangent_degrees_(=34.0)
000363 xxxx 000366710000 
000364 xxxx 000000000000 
000365 xxxx 004415000000 
000366 xxxx 000006420400     emCall  6
000367 xxxx 003635701000     call    crlf
000370 xxxx 000372710000 
000371 xxxx 000000000000 
000372 xxxx 001754701000     call    cotangent_degrees_(=-34.0)
000373 xxxx 000376710000 
000374 xxxx 000000000000 
000375 xxxx 004416000000 
000376 xxxx 000006420400     emCall  6
000377 xxxx 003635701000     call    crlf
000400 xxxx 000402710000 
000401 xxxx 000000000000 
000402 xxxx 003652701000     call    ioa(msgTan);
000403 xxxx 000406710000 
000404 xxxx 000000000000 
000405 xxxx 001013000000 
000406 xxxx 002033701000     call    tangent_degrees_(=60.0)
000407 xxxx 000412710000 
000410 xxxx 000000000000 
000411 xxxx 004417000000 
000412 xxxx 000006420400     emCall  6
000413 xxxx 003635701000     call    crlf
000414 xxxx 000416710000 
000415 xxxx 000000000000 
000416 xxxx 002033701000     call    tangent_degrees_(=45.0)
000417 xxxx 000422710000 
000420 xxxx 000000000000 
000421 xxxx 004420000000 
000422 xxxx 000006420400     emCall  6
000423 xxxx 003635701000     call    crlf
000424 xxxx 000426710000 
000425 xxxx 000000000000 
000426 xxxx 002033701000     call    tangent_degrees_(=12.34)
000427 xxxx 000432710000 
000430 xxxx 000000000000 
000431 xxxx 004421000000 
000432 xxxx 000006420400     emCall  6
000433 xxxx 003635701000     call    crlf
000434 xxxx 000436710000 
000435 xxxx 000000000000 
000436 xxxx 002033701000     call    tangent_degrees_(=-60.0)
000437 xxxx 000442710000 
000440 xxxx 000000000000 
000441 xxxx 004422000000 
000442 xxxx 000006420400     emCall  6
000443 xxxx 003635701000     call    crlf
000444 xxxx 000446710000 
000445 xxxx 000000000000 
000446 xxxx 002033701000     call    tangent_degrees_(=-45.0)
000447 xxxx 000452710000 
000450 xxxx 000000000000 
000451 xxxx 004423000000 
000452 xxxx 000006420400     emCall  6
000453 xxxx 003635701000     call    crlf
000454 xxxx 000456710000 
000455 xxxx 000000000000 
000456 xxxx 002033701000     call    tangent_degrees_(=-12.34)
000457 xxxx 000462710000 
000460 xxxx 000000000000 
000461 xxxx 004424000000 
000462 xxxx 000006420400     emCall  6
000463 xxxx 003635701000     call    crlf
000464 xxxx 000466710000 
000465 xxxx 000000000000 
000466 xxxx 003652701000     call    ioa(msgCos)
000467 xxxx 000472710000 
000470 xxxx 000000000000 
000471 xxxx 001007000000 
000472 xxxx 001236701000     call    cosine_degrees_(=60.0)
000473 xxxx 000476710000 
000474 xxxx 000000000000 
000475 xxxx 004425000000 
000476 xxxx 000006420400     emCall  6
000477 xxxx 003635701000     call    crlf
000500 xxxx 000502710000 
000501 xxxx 000000000000 
000502 xxxx 001236701000     call    cosine_degrees_(=45.0)
000503 xxxx 000506710000 
000504 xxxx 000000000000 
000505 xxxx 004426000000 
000506 xxxx 000006420400     emCall  6
000507 xxxx 003635701000     call    crlf
000510 xxxx 000512710000 
000511 xxxx 000000000000 
000512 xxxx 001236701000     call    cosine_degrees_(=12.34)
000513 xxxx 000516710000 
000514 xxxx 000000000000 
000515 xxxx 004427000000 
000516 xxxx 000006420400     emCall  6
000517 xxxx 003635701000     call    crlf
000520 xxxx 000522710000 
000521 xxxx 000000000000 
000522 xxxx 001236701000     call    cosine_degrees_(=-60.0)
000523 xxxx 000526710000 
000524 xxxx 000000000000 
000525 xxxx 004430000000 
000526 xxxx 000006420400     emCall  6
000527 xxxx 003635701000     call    crlf
000530 xxxx 000532710000 
000531 xxxx 000000000000 
000532 xxxx 001236701000     call    cosine_degrees_(=-45.0)
000533 xxxx 000536710000 
000534 xxxx 000000000000 
000535 xxxx 004431000000 
000536 xxxx 000006420400     emCall  6
000537 xxxx 003635701000     call    crlf
000540 xxxx 000542710000 
000541 xxxx 000000000000 
000542 xxxx 001236701000     call    cosine_degrees_(=-12.34)
000543 xxxx 000546710000 
000544 xxxx 000000000000 
000545 xxxx 004432000000 
000546 xxxx 000006420400     emCall  6
000547 xxxx 003635701000     call    crlf
000550 xxxx 000552710000 
000551 xxxx 000000000000 
000552 xxxx 003652701000     call    ioa(msgSin)
000553 xxxx 000556710000 
000554 xxxx 000000000000 
000555 xxxx 001003000000 
000556 xxxx 001273701000     call    sine_degrees_(=60.0)
000557 xxxx 000562710000 
000560 xxxx 000000000000 
000561 xxxx 004433000000 
000562 xxxx 000006420400     emCall  6
000563 xxxx 003635701000     call    crlf
000564 xxxx 000566710000 
000565 xxxx 000000000000 
000566 xxxx 001273701000     call    sine_degrees_(=45.0)
000567 xxxx 000572710000 
000570 xxxx 000000000000 
000571 xxxx 004434000000 
000572 xxxx 000006420400     emCall  6
000573 xxxx 003635701000     call    crlf
000574 xxxx 000576710000 
000575 xxxx 000000000000 
000576 xxxx 001273701000     call    sine_degrees_(=12.34)
000577 xxxx 000602710000 
000600 xxxx 000000000000 
000601 xxxx 004435000000 
000602 xxxx 000006420400     emCall  6
000603 xxxx 003635701000     call    crlf
000604 xxxx 000606710000 
000605 xxxx 000000000000 
000606 xxxx 001273701000     call    sine_degrees_(=-60.0)
000607 xxxx 000612710000 
000610 xxxx 000000000000 
000611 xxxx 004436000000 
000612 xxxx 000006420400     emCall  6
000613 xxxx 003635701000     call    crlf
000614 xxxx 000616710000 
000615 xxxx 000000000000 
000616 xxxx 001273701000     call    sine_degrees_(=-45.0)
000617 xxxx 000622710000 
000620 xxxx 000000000000 
000621 xxxx 004437000000 
000622 xxxx 000006420400     emCall  6
000623 xxxx 003635701000     call    crlf
000624 xxxx 000626710000 
000625 xxxx 000000000000 
000626 xxxx 001273701000     call    sine_degrees_(=-12.34)
000627 xxxx 000632710000 
000630 xxxx 000000000000 
000631 xxxx 004440000000 
000632 xxxx 000006420400     emCall  6
000633 xxxx 003635701000     call    crlf
000634 xxxx 000636710000 
000635 xxxx 000000000000 
000636 xxxx 003652701000     call    ioa(msgSqrt)
000637 xxxx 000642710000 
000640 xxxx 000000000000 
000641 xxxx 001017000000 
000642 xxxx 001136701000     call    sqrt(=3.1415926535897932)   " 1.77245385091
000643 xxxx 000646710000 
000644 xxxx 000000000000 
000645 xxxx 004441000000 
000646 xxxx 000006420400     emCall  6
000647 xxxx 003635701000     call    crlf
000650 xxxx 000652710000 
000651 xxxx 000000000000 
000652 xxxx 001136701000     call    sqrt(=2.0)   " 1.414...
000653 xxxx 000656710000 
000654 xxxx 000000000000 
000655 xxxx 004442000000 
000656 xxxx 000006420400     emCall  6
000657 xxxx 003635701000     call    crlf
000660 xxxx 000662710000 
000661 xxxx 000000000000 
000662 xxxx 003652701000     call    ioa(msgLog)
000663 xxxx 000666710000 
000664 xxxx 000000000000 
000665 xxxx 000767000000 
000666 xxxx 002265701000     call    log_base_e_(=3.1415926535897932)
000667 xxxx 000672710000 
000670 xxxx 000000000000 
000671 xxxx 004443000000 
000672 xxxx 000006420400     emCall  6
000673 xxxx 003635701000     call    crlf
000674 xxxx 000676710000 
000675 xxxx 000000000000 
000676 xxxx 002226701000     call    log_base_10_(=3.1415926535897932)
000677 xxxx 000702710000 
000700 xxxx 000000000000 
000701 xxxx 004444000000 
000702 xxxx 000006420400     emCall  6
000703 xxxx 003635701000     call    crlf
000704 xxxx 000706710000 
000705 xxxx 000000000000 
000706 xxxx 001100701000     call    ALOG10(=3.1415926535897932)     " .497149873
000707 xxxx 000712710000 
000710 xxxx 000000000000 
000711 xxxx 004445000000 
000712 xxxx 000006420400     emCall  6
000713 xxxx 003635701000     call    crlf
000714 xxxx 000716710000 
000715 xxxx 000000000000 
000716 xxxx 001104701000     call    ALOG(=3.1415926535897932)      " 1.144729886
000717 xxxx 000722710000 
000720 xxxx 000000000000 
000721 xxxx 004446000000 
000722 xxxx 000006420400     emCall  6
000723 xxxx 003635701000     call    crlf
000724 xxxx 000726710000 
000725 xxxx 000000000000 
000726 xxxx 001100701000     call    ALOG10(=2.71828182846)
000727 xxxx 000732710000 
000730 xxxx 000000000000 
000731 xxxx 004447000000 
000732 xxxx 000006420400     emCall  6
000733 xxxx 003635701000     call    crlf
000734 xxxx 000736710000 
000735 xxxx 000000000000 
000736 xxxx 001104701000     call    ALOG(=2.71828182846)
000737 xxxx 000742710000 
000740 xxxx 000000000000 
000741 xxxx 004450000000 
000742 xxxx 000006420400     emCall  6
000743 xxxx 003635701000     call    crlf
000744 xxxx 000746710000 
000745 xxxx 000000000000 
000746 xxxx 000000616000     dis
000747 xxxx 022101162143 msgArcsin:  acc     /Arcsin tests ...\r\n/
000750 xxxx 163151156040 
000751 xxxx 164145163164 
000752 xxxx 163040056056 
000753 xxxx 056015012040 
000754 xxxx 022101162143 msgArctan:  acc     /Arctan tests ...\r\n/
000755 xxxx 164141156040 
000756 xxxx 164145163164 
000757 xxxx 163040056056 
000760 xxxx 056015012040 
000761 xxxx 027105170160 msgExp:     acc     /Exponential tests ...\r\n/
000762 xxxx 157156145156 
000763 xxxx 164151141154 
000764 xxxx 040164145163 
000765 xxxx 164163040056 
000766 xxxx 056056015012 
000767 xxxx 025114157147 msgLog:     acc     /Logarithm tests ...\r\n/
000770 xxxx 141162151164 
000771 xxxx 150155040164 
000772 xxxx 145163164163 
000773 xxxx 040056056056 
000774 xxxx 015012040040 
000775 xxxx 025103157164 msgCotan:   acc     /Cotangent tests ...\r\n/
000776 xxxx 141156147145 
000777 xxxx 156164040164 
001000 xxxx 145163164163 
001001 xxxx 040056056056 
001002 xxxx 015012040040 
001003 xxxx 017123151156 msgSin:     acc     /Sin tests ...\r\n/
001004 xxxx 040164145163 
001005 xxxx 164163040056 
001006 xxxx 056056015012 
001007 xxxx 017103157163 msgCos:     acc     /Cos tests ...\r\n/
001010 xxxx 040164145163 
001011 xxxx 164163040056 
001012 xxxx 056056015012 
001013 xxxx 017124141156 msgTan:     acc     /Tan tests ...\r\n/
001014 xxxx 040164145163 
001015 xxxx 164163040056 
001016 xxxx 056056015012 
001017 xxxx 020123161162 msgSqrt:    acc     /Sqrt tests ...\r\n/
001020 xxxx 164040164145 
001021 xxxx 163164163040 
001022 xxxx 056056056015 
001023 xxxx 012040040040 
001024 xxxx 001027710000 LOGS:   SAVE    
001025 xxxx 000000000000 
001026 xxxx 001025630000 
001027 xxxx 001025754000 
001030 xxxx 001025741000 
001031 xxxx 000002431031         FLD     2, 1*       " X = (2**I) * F = ARGUMENT
001032 xxxx 000000573000         FNO
001033 xxxx 001063600000         TZE     ERR1        " ERROR IF X = 0
001034 xxxx 001071604000         TMI     ERR2        " ERROR IF X NEGATIVE
001035 xxxx 002400515003 BEGIN:  FCMP    =1.0,DU
001036 xxxx 001067600000         TZE     UNITY       " LOG(1) = 0
001037 xxxx 001054456000         STE     I           " STORE I AT BINARY POINT 7
001040 xxxx 000000411003         LDE     0, DU       " OBTAIN F
001041 xxxx 001120477000         DFAD    SRHLF
001042 xxxx 001124457000         DFST    Z
001043 xxxx 001122577000         DFSB    SRTWO
001044 xxxx 001124567000         DFDV    Z
001045 xxxx 001124457000         DFST    Z           " Z = (F - SQRT(1/2))/(F + SQRT(1/2))
001046 xxxx 001124463000         DFMP    Z           " Z^2
001047 xxxx 001116577000         DFSB    C           " Z^2-C
001050 xxxx 001114527000         DFDI    B           " B/(Z^2-C)
001051 xxxx 001112477000         DFAD    A           " A+B/(Z^2-C)
001052 xxxx 001124463000         DFMP    Z           " Z(A+B/(Z^2-C))
001053 xxxx 001124457000         DFST    Z           " Z = Z*(A+(B/(Z^2-C))) = LOG2 (F) + 1/2
001054 xxxx 000000235003 I:      LDA     0, DU       " ==== THIS GET CHANGED ====
001055 xxxx 000000236003         LDQ     0, DU
001056 xxxx 016000411003         LDE     =7B25, DU   " FLOAT I
001057 xxxx 000400575003         FSB     =0.5, DU
001060 xxxx 001124477000         DFAD    Z           " LOG2(X) = I + LOG2(F)
001061 xxxx 001061463000 INDIC:  DFMP    *           " CONVERT TO BASE 10 OR E
001062 xxxx 001026710000         RETURN  LOGS
001063 xxxx 001126701000 ERR1:   CALL    .FXEM.(EALN1)   " ERROR EXIT NUMBER 1 (X=0)
001064 xxxx 001067710000 
001065 xxxx 000000000000 
001066 xxxx 001110000000 
001067 xxxx 400000431003 UNITY:  FLD     =0.0, DU
001070 xxxx 001026710000         RETURN  LOGS
001071 xxxx 001126701000 ERR2:   CALL    .FXEM.(EALN2)   " ERROR EXIT NUMBER 2 (X IS NEGATIVE)
001072 xxxx 001075710000 
001073 xxxx 000000000000 
001074 xxxx 001111000000 
001075 xxxx 000000513000         FNEG
001076 xxxx 001035710000         TRA     BEGIN
001077 xxxx 000000616000         dis
001100 xxxx 001061750000 ALOG10: STC2    INDIC       " REAL COMMON LOGARITHM
001101 xxxx 001024710000         TRA     LOGS
001102 xxxx 776464202324         DEC     .301029996D0
001103 xxxx 175727157154 
001104 xxxx 001061750000 ALOG:   STC2    INDIC       " REAL NATURAL LOGARITHM
001105 xxxx 001024710000         TRA     LOGS
001106 xxxx 000542710277         DEC     6.93147180559D-1
001107 xxxx 575030531171 
001110 xxxx 010440000000 EALN1:  DEC     9.
001111 xxxx 010500000000 EALN2:  DEC     10.
001112 xxxx 002512601750 A:      DEC     .12920070987D1
001113 xxxx 530734427226 
001114 xxxx 005256062222 B:      DEC     -.26398577031D1
001115 xxxx 154274032423 
001116 xxxx 002650103142 C:      DEC     .16567626301D1
001117 xxxx 014073125631 
001120 xxxx 000552023631 SRHLF:  DEC     .707106781187D0     " sqrt(2) / 2
001121 xxxx 477513560151 
001122 xxxx 002552023631 SRTWO:  DEC     .1414213562374D1    " SQRT(2)
001123 xxxx 477513560151 
001124 xxxx 000000000000 Z:      BSS     2
001126 xxxx 001131710000 .FXEM.: save
001127 xxxx 000000000000 
001130 xxxx 001127630000 
001131 xxxx 001127754000 
001132 xxxx 001127741000 
001133 xxxx 000002235031         lda     2, 1*
001134 xxxx 000001420400         emcall  1
001135 xxxx 000000616000         dis
001136 xxxx 001143710000 sqrt:   save    0, 1
001137 xxxx 000000000000 
001140 xxxx 000000220003 
001141 xxxx 000001221003 
001142 xxxx 001137630000 
001143 xxxx 001137754000 
001144 xxxx 001137741000 
001145 xxxx 001140740000 
001146 xxxx 001141741000 
001147 xxxx 000002431031         FLD     2, 1*               " X = ARGUMENT
001150 xxxx 000000573000         FNO
001151 xxxx 001153601000         tnz     sqrt.1
001152 xxxx 001140710000         return  sqrt                " if x = 0 return (0)
001153 xxxx 001157605000 sqrt.1:	tpl     calc_square_root	" if x < 0:
001154 xxxx 000000513000         fneg	0                   "   x = -x
001155 xxxx 001216455000         fst     x
001156 xxxx 001216431000         fld     x		"   calculate sqrt (abs(x))
001157 xxxx 001216455000         fst     x           " store EA := input arg
001160 xxxx 001216220000         ldx0	x           " X0 := addr (x) -> expon
001161 xxxx 000000411003         lde     =0b25,du	" addr (m) -> expon = 0
001162 xxxx 002000300003         canx0	=1b25,du	" calculate mod (e, 2)
001163 xxxx 000002600004         tze     2,ic		" if mod (e, 2) = 1:
001164 xxxx 776000411003         lde     =-1b25,du	"   EA := m = .5*m
001165 xxxx 001216236000         ldq     x           " Q := 8/expon,28/garbage
001166 xxxx 000034732000         qrs     28          " Q := 28/0,8/expon
001167 xxxx 000001076007         adq     =1,dl		" calculate e+1
001170 xxxx 000001732000         qrs     1           " calculate divide (e+1, 2, 7)
001171 xxxx 000034736000         qls     28          " position result in exponent field
001172 xxxx 001222756000         stq     e           " store Q := e = divide (e+1, 2, 7)
001173 xxxx 004451236000         ldq     =0          " clear Q
001174 xxxx 001220457000         dfst	m           " store EAQ := m
001175 xxxx 001230461000         fmp     SQp2          " calculate root_m = p(m)
001176 xxxx 001226475000         fad     SQp1
001177 xxxx 001220461000         fmp     m
001200 xxxx 001224475000         fad     SQp0
001201 xxxx 001214455000         fst     root_m
001202 xxxx 001220525000         fdi     m           " calculate root_m = .5 * (root_m + m/root_m)
001203 xxxx 001214475000         fad     root_m
001204 xxxx 000400461003         fmp     =0.5,du
001205 xxxx 001214457000         dfst	root_m      " calculate root_m + float (m, 63)/root_m
001206 xxxx 001220527000         dfdi	m
001207 xxxx 001214477000         dfad	root_m
001210 xxxx 776000415003         ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
001211 xxxx 001222415000         ade     e           " calculate addr (root_x) -> expon =
001212 xxxx 000000471000         frd     0
001213 xxxx 001140710000         return  sqrt        " return (root_x)
001214 xxxx 000000000000         bss     root_m,2
001216 xxxx 000000000000         bss     x,2
001220 xxxx 000000000000         bss     m,2
001222 xxxx 000000000000         bss     e,2
001224 xxxx 776411377603 SQp0:   dec     2.5927688d-1
001225 xxxx 406536706351 
001226 xxxx 002415257502 SQp1:   dec     1.0521212d0
001227 xxxx 413332156142 
001230 xxxx 777274054062 SQp2:   dec     -3.1632214d-1
001231 xxxx 066300621037 
001232 xxxx 000400000000 scale:	oct     000400000000	" 0.5
001233 xxxx 000100000000         oct     000100000000	" 0.25*0.5 = 0.125
001234 xxxx 000200000000         oct     000200000000	" 0.25
001235 xxxx 000040000000         oct     000040000000	" 0.25*0.25 = 0.0625
001236 xxxx 001246710000     save    0,1,2,3,4
001237 xxxx 000000000000 
001240 xxxx 000000220003 
001241 xxxx 000001221003 
001242 xxxx 000002222003 
001243 xxxx 000003223003 
001244 xxxx 000004224003 
001245 xxxx 001237630000 
001246 xxxx 001237754000 
001247 xxxx 001237741000 
001250 xxxx 001240740000 
001251 xxxx 001241741000 
001252 xxxx 001242742000 
001253 xxxx 001243743000 
001254 xxxx 001244744000 
001255 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001256 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001257 xxxx 000000623000     eax3    0       " cosine return
001260 xxxx 400000475003 	fad     =0.0,du		" normalize input
001261 xxxx 001444425012 	fcmg	one_eighty,x2	" if abs_angle <= 180:
001262 xxxx 001360604000 	tmi     case1_degrees	" then no angle reduction is necessary
001263 xxxx 001522700000 	tsx0	principal_degrees_
001264 xxxx 001354710011 	tra     case_degrees+1,x1	" select appropriate case
001265 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001266 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
001267 xxxx 001736425012 	fcmg	pi,x2		" if abs (angle) <= pi
001270 xxxx 001335604000 	tmi     case1_radians	" then no angle reduction is necessary
001271 xxxx 001542700000 	tsx0	principal_radians_
001272 xxxx 001331710011 	tra     case_radians+1,x1	" select appropriate case
001273 xxxx 001303710000     save    0,1,2,3,4
001274 xxxx 000000000000 
001275 xxxx 000000220003 
001276 xxxx 000001221003 
001277 xxxx 000002222003 
001300 xxxx 000003223003 
001301 xxxx 000004224003 
001302 xxxx 001274630000 
001303 xxxx 001274754000 
001304 xxxx 001274741000 
001305 xxxx 001275740000 
001306 xxxx 001276741000 
001307 xxxx 001277742000 
001310 xxxx 001300743000 
001311 xxxx 001301744000 
001312 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001313 xxxx 000000622000 	eax2	BFP         " no offset for BFP constants
001314 xxxx 000001623000     eax3    1           " sine return
001315 xxxx 400000475003 	fad     =0.0,du         " normalize input
001316 xxxx 001442425012 	fcmg	ninety,x2		" if abs (angle) < pi/2
001317 xxxx 001373604000 	tmi     case0_degrees	" then no angle reduction is necessary
001320 xxxx 001522700000 	tsx0	principal_degrees_
001321 xxxx 001353710011 	tra     case_degrees,x1	" select appropriate case
001322 xxxx 000000622000 	eax2	BFP             " no offset for BFP constants
001323 xxxx 400000475003 	fad     =0.0,du         " normalize input
001324 xxxx 001714425012 	fcmg	half_pi,x2      " if abs (angle) <= pi/2
001325 xxxx 001377604400 	tmoz	case0_radians	" then no angle reduction is necessary
001326 xxxx 001542700000 	tsx0	principal_radians_
001327 xxxx 001330710011 	tra     case_radians,x1	" Case select appropriate case_radians
001330 xxxx 001377710000 	tra     case0_radians
001331 xxxx 001335710000 	tra     case1_radians
001332 xxxx 001343710000 	tra     case2_radians
001333 xxxx 001345710000 	tra     case3_radians
001334 xxxx 001377710000 	tra     case0_radians
001335 xxxx 400000475003 	fad     =0.0,du		" set indicators
001336 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001337 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001340 xxxx 001436477012 	dfad	half_pi1A,x2
001341 xxxx 001440477012 	dfad	half_pi2A,x2
001342 xxxx 001377710000 	tra     part_sine_radians
001343 xxxx 000000513000 	fneg	0
001344 xxxx 001377710000 	tra     part_sine_radians
001345 xxxx 400000475003 	fad     =0.0,du		" set indicators
001346 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001347 xxxx 000000513000     fneg	0
001350 xxxx 001436577012 	dfsb	half_pi1A,x2
001351 xxxx 001440577012 	dfsb	half_pi2A,x2
001352 xxxx 001377710000 	tra     part_sine_radians
001353 xxxx 001373710000 	tra     case0_degrees
001354 xxxx 001360710000 	tra     case1_degrees
001355 xxxx 001365710000 	tra     case2_degrees
001356 xxxx 001367710000 	tra     case3_degrees
001357 xxxx 001373710000 	tra     case0_degrees
001360 xxxx 400000475003 	fad     =0.0,du		" set indicators
001361 xxxx 000002604004 	tmi     2,ic		" EAQ = - abs (EAQ)
001362 xxxx 000000533000     negl	0           " fneg underflows at o400400000000
001363 xxxx 001442475012 	fad     ninety,x2
001364 xxxx 001373710000 	tra     part_sine_degrees
001365 xxxx 000000513000 	fneg	0
001366 xxxx 001373710000 	tra     part_sine_degrees
001367 xxxx 400000475003 	fad     =0.0,du		" set indicators
001370 xxxx 000002605004 	tpl     2,ic		" EAQ = abs (EAQ)
001371 xxxx 000000513000 	fneg
001372 xxxx 001442575012 	fsb     ninety,x2
001373 xxxx 001432427012 	dfcmg	eps2,x2		" if conversion to radians underflows
001374 xxxx 000002605004 	tpl     2,ic
001375 xxxx 400000431003     fld     =0.0,du		" then use zero
001376 xxxx 001730463012 	dfmp	one_degree,x2	" convert to radians.
001377 xxxx 001434427012 	dfcmg	eps3,x2		" if abs (x) < 5e-10:
001400 xxxx 000003605004 	tpl     3,ic
001401 xxxx 000000471000     frd     0
001402 xxxx 001423710013     tra     rets, x3
001403 xxxx 001216457000 	dfst	x
001404 xxxx 001216463000 	dfmp	x           " calculate xx = x*x
001405 xxxx 001426457000 	dfst	xx
001406 xxxx 001460461012 	fmp     tp5,x2		" calculate p(xx)
001407 xxxx 001456477012 	dfad	tp4,x2
001410 xxxx 001426461000 	fmp     xx
001411 xxxx 001454477012 	dfad	tp3,x2
001412 xxxx 001426461000 	fmp     xx
001413 xxxx 001452477012 	dfad	tp2,x2
001414 xxxx 001426461000 	fmp     xx
001415 xxxx 001450477012 	dfad	tp1,x2
001416 xxxx 001426463000 	dfmp	xx
001417 xxxx 001446477012 	dfad	tp0,x2
001420 xxxx 001216463000 	dfmp	x		" return x*p(xx)
001421 xxxx 000000471000 	frd     0
001422 xxxx 001423710013     tra     rets, x3
001423 xxxx 001240710000     return  cosine_degrees_
001424 xxxx 001275710000     return  sine_degrees_
001425 xxxx 000000011000 	even "(allocating 1 nop)
001426 xxxx 000000000000     bss     xx,2
001430 xxxx 716504072231 eps1:       dec	1.886591d-8
001431 xxxx 175750642261 
001432 xxxx 412712273406 eps2:       dec	8.418858142948452884d-38
001433 xxxx 461701757347 
001434 xxxx 704422701372 eps3:       dec	5.0d-10
001435 xxxx 023326451313 
001436 xxxx 002622077325 half_pi1A:	oct	002622077325,042055060432	" 1.570796326794896619d0
001437 xxxx 042055060432 
001440 xxxx 602611431424 half_pi2A:	oct	602611431424,270033407150	" 8.333742918520878328d-20
001441 xxxx 270033407150 
001442 xxxx 016550000000 ninety:     dec	90.0d0
001443 xxxx 000000000000 
001444 xxxx 020550000000 one_eighty: dec	180.0d0
001445 xxxx 000000000000 
001446 xxxx 000777777777 tp0:        dec	 9.999999999788d-1
001447 xxxx 776426056601 
001450 xxxx 775252525252 tp1:        dec	-1.6666666608826d-1
001451 xxxx 764246126070 
001452 xxxx 764421042055 tp2:        dec	 8.333330720556d-3
001453 xxxx 645325433621 
001454 xxxx 751137720534 tp3:        dec	-1.98408328231d-4
001455 xxxx 017765224715 
001456 xxxx 734561327223 tp4:        dec	 2.7523971068d-6
001457 xxxx 742173067177 
001460 xxxx 717145743634 tp5:        dec	-2.386834641d-8
001461 xxxx 001005375050 
001462 xxxx 000000000000 angle:  bss     temp, 2
001464 xxxx 000000000000         bss     n1,1
001465 xxxx 000000000000         bss     n2,1
001466 xxxx 000000000000         bss     t1,4
001472 xxxx 000000000000         bss     t2,6
001500 xxxx 000000000000         bss     t3,8
001510 xxxx 000000000000         bss     t4,10
001522 xxxx 000000471000 	frd     0
001523 xxxx 001664425000 	fcmg	two_pwr_54	" is the EAQ too large
001524 xxxx 001650605400 	tpnz	angle_too_big	" Yup.
001525 xxxx 001462455000 	fst     angle
001526 xxxx 001442567000 	dfdv	ninety		" EAQ = EAQ/90
001527 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/90 + 0.5
001530 xxxx 001712437000 	dufa	almost_one
001531 xxxx 001712537000 	dufs	almost_one
001532 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/90 + 0.5 in integer form
001533 xxxx 000000621006 	eax1	0,ql
001534 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001535 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/90 + 0.5) in floating point form
001536 xxxx 016550461003 	fmp     =90.0,du	" EAQ = floor(EAQ/90 + 0.5)*90
001537 xxxx 000000513000 	fneg	0           " EAQ = -floor(EAQ/90 + 0.5)*90
001540 xxxx 001462475000 	fad     angle	" EAQ = angle-floor(EAQ/90 + 0.5)*90
001541 xxxx 000000710010 	tra     0,x0		" return to caller
001542 xxxx 000000471000 	frd     0
001543 xxxx 001462455000 	fst     angle
001544 xxxx 001662425000 	fcmg	two_pwr_27      " is the EAQ too large
001545 xxxx 001575605400 	tpnz	bfp_big_angle	" Yup.
001546 xxxx 001656463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001547 xxxx 000400475003 	fad     =0.5,du             " EAQ = EAQ/half_pi + 0.5
001550 xxxx 001712437000 	dufa	almost_one
001551 xxxx 001712537000 	dufs	almost_one
001552 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001553 xxxx 000000621006 	eax1	0,ql
001554 xxxx 000003361003 	anx1	3,du		" X1 = mod(AQ,4)
001555 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001556 xxxx 001464455000 	fst     n1		" n1 = EAQ
001557 xxxx 001560710000 	tra     small_angle_join
001560 xxxx 001666461012 	fmp     half_pi1B,x2
001561 xxxx 001466457000 	dfst	t1		" t1 = n1*half_pi1
001562 xxxx 001464431000 	fld     n1
001563 xxxx 001672461012 	fmp     half_pi2B,x2
001564 xxxx 001472457000 	dfst	t2		" t2 = n1*half_pi2
001565 xxxx 001464431000 	fld     n1
001566 xxxx 001676461012 	fmp     half_pi3,x2
001567 xxxx 001500457000 	dfst	t3		" t3 = n1*half_pi3
001570 xxxx 001462431000 	fld     angle		" answer = angle - t1 - t2 - t3
001571 xxxx 001466577000 	dfsb	t1
001572 xxxx 001472577000 	dfsb	t2
001573 xxxx 001500577000 	dfsb	t3
001574 xxxx 000000710010 	tra     0,x0
001575 xxxx 001664425000 	fcmg	two_pwr_54	" is the EAQ too large?
001576 xxxx 001650605400 	tpnz	angle_too_big	" Yup.
001577 xxxx 001656463000 	dfmp	one_over_half_pi	" EAQ = EAQ/half_pi
001600 xxxx 000400475003 	fad     =0.5,du		" EAQ = EAQ/half_pi + 0.5
001601 xxxx 001712437000 	dufa	almost_one
001602 xxxx 001712537000 	dufs	almost_one
001603 xxxx 216000435003 	ufa     =71b25,du		" AQ = EAQ/half_pi + 0.5 in integer form
001604 xxxx 000000621006 	eax1	0,ql
001605 xxxx 000003361003 	anx1	=3,du		" X1 = mod(AQ,4)
001606 xxxx 400000475003 	fad     =0.0,du		" EAQ = floor(EAQ/half_pi + 0.5) in floating point form
001607 xxxx 001464455000 	fst     n1		" n1 = EAQ
001610 xxxx 001464575000 	fsb     n1
001611 xxxx 001465455000 	fst     n2		" n2 = n - n1
001612 xxxx 001464431000 	fld     n1
001613 xxxx 001666461012 	fmp     half_pi1B,x2
001614 xxxx 001466457000 	dfst	t1		" t1 = n1*half_pi1
001615 xxxx 001464431000 	fld     n1		" calculate n1*half_pi2 + n2*half_pi1
001616 xxxx 001672461012 	fmp     half_pi2B,x2
001617 xxxx 001472457000 	dfst	t2
001620 xxxx 001465431000 	fld     n2
001621 xxxx 001666461012 	fmp     half_pi1B,x2
001622 xxxx 001472477000 	dfad	t2
001623 xxxx 001472457000 	dfst	t2		" t2 = (n1*half_pi2 + n2*half_pi1)
001624 xxxx 001464431000 	fld     n1		" calculate n1*half_pi3 + n2*half_pi2
001625 xxxx 001676461012 	fmp     half_pi3,x2
001626 xxxx 001500457000 	dfst	t3
001627 xxxx 001465431000 	fld     n2
001630 xxxx 001672461012 	fmp     half_pi2B,x2
001631 xxxx 001500477000 	dfad	t3
001632 xxxx 001500457000 	dfst	t3		" t3 = (n1*half_pi3 + n2*half_pi2)
001633 xxxx 001464431000 	fld     n1		" calculate n1*half_pi4 + n2*half_pi3
001634 xxxx 001702461012 	fmp     half_pi4,x2
001635 xxxx 001510457000 	dfst	t4
001636 xxxx 001465431000 	fld     n2
001637 xxxx 001676461012 	fmp     half_pi3,x2
001640 xxxx 001510477000 	dfad	t4
001641 xxxx 001510457000 	dfst	t4		" t4 = (n1*half_pi4 + n2*half_pi3)
001642 xxxx 001462431000 	fld     angle		" answer = angle - t1 - t2 - t3
001643 xxxx 001466577000 	dfsb	t1
001644 xxxx 001472577000 	dfsb	t2
001645 xxxx 001500577000 	dfsb	t3
001646 xxxx 001510577000 	dfsb	t4
001647 xxxx 000000710010 	tra     0,x0		" return to caller
001650 xxxx 001706236012 	ldq     code,x2		" pick the appropriate error message
001651 xxxx 001462740000 	stx0	temp		" save X0
001652 xxxx 001462220000 	ldx0	temp		" restore X0
001653 xxxx 000000621000 	eax1	0		" X1 = 0
001654 xxxx 400000431003 	fld     =0.0,du		" EAQ = 0, set indicators
001655 xxxx 000000710010 	tra     0,x0		" return to caller
001656 xxxx 000505746033 	dec	6.3661977236758134307553d-1
001657 xxxx 344710405225 
001660 xxxx 000505746033 	oct	000505746033,344710405225
001661 xxxx 344710405225 
001662 xxxx 070400000000 	oct	070400000000,000000000000
001663 xxxx 000000000000 
001664 xxxx 156400000000 	oct	156400000000,000000000000
001665 xxxx 000000000000 
001666 xxxx 002622077325 half_pi1B:	oct	002622077325,000000000000
001667 xxxx 000000000000 
001670 xxxx 002062207732 	oct	002062207732,000000000000
001671 xxxx 000000000000 
001672 xxxx 706420550604 half_pi2B:	oct	706420550604,000000000000
001673 xxxx 000000000000 
001674 xxxx 766050420550 	oct	766050420550,000000000000
001675 xxxx 000000000000 
001676 xxxx 616646114314 half_pi3: oct	616646114314,000000000000
001677 xxxx 000000000000 
001700 xxxx 752060432304 	oct	752060432304,000000000000
001701 xxxx 000000000000 
001702 xxxx 526505600670 half_pi4: oct	526505600670,000000000000
001703 xxxx 000000000000 
001704 xxxx 736061461213 	oct	736061461213,000000000000
001705 xxxx 000000000000 
001706 xxxx 000000000106 code:	dec	70,0,71
001707 xxxx 000000000000 
001710 xxxx 000000000107 
001711 xxxx 000000011000     even "(allocating 1 nop)
001712 xxxx 000777777777 	oct	000777777777,777777777777
001713 xxxx 777777777777 
001714 xxxx 002622077325 	dec	1.570796326794896619231d+00
001715 xxxx 042055060432 
001716 xxxx 776464202324 	dec	3.010299956639811952137d-01
001717 xxxx 117571775714 
001720 xxxx 776674557305 	dec	4.342944819032518276511d-01
001721 xxxx 223345034312 
001722 xxxx 002561250731 	dec	1.442695040888963407359d+00
001723 xxxx 225602774136 
001724 xxxx 000542710277 	dec	6.931471805599453094172d-01
001725 xxxx 575071736326 
001726 xxxx 376777777777 	oct	376777777777,777777777777
001727 xxxx 777777777777 
001730 xxxx 766435750650 	dec	1.745329251994329576923d-02
001731 xxxx 451235162127 
001732 xxxx 776505746033 	dec	3.183098861837906715377d-01
001733 xxxx 344710405225 
001734 xxxx 014712273406 	dec	5.729577951308232087679d+01
001735 xxxx 461701757341 
001736 xxxx 004622077325 	dec	3.141592653589793238462d+00
001737 xxxx 042055060432 
001740 xxxx 000622077325 	dec	7.853981633974483096156d-01
001741 xxxx 042055060432 
001742 xxxx 000552023631 	dec	7.071067811865475244008d-01
001743 xxxx 477473631102 
001744 xxxx 002673317272 	dec	1.732050807568877293527d+00
001745 xxxx 054114524717 
001746 xxxx 002552023631 	dec	1.414213562373095048801d+00
001747 xxxx 477473631102 
001750 xxxx 000000000000     bss     q,2
001752 xxxx 000000000000     bss     sign,2
001754 xxxx 001764710000     save    0,1,2,3,4
001755 xxxx 000000000000 
001756 xxxx 000000220003 
001757 xxxx 000001221003 
001760 xxxx 000002222003 
001761 xxxx 000003223003 
001762 xxxx 000004224003 
001763 xxxx 001755630000 
001764 xxxx 001755754000 
001765 xxxx 001755741000 
001766 xxxx 001756740000 
001767 xxxx 001757741000 
001770 xxxx 001760742000 
001771 xxxx 001761743000 
001772 xxxx 001762744000 
001773 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
001774 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
001775 xxxx 000001624000     eax4    1
001776 xxxx 400000475003 	fad     =0.0,du		" normalize input
001777 xxxx 000000621000 	eax1	0           " initialize X1 := shift = 1
002000 xxxx 002172425012 	fcmg	forty_five,x2
002001 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
002002 xxxx 001522700000     tsx0	principal_degrees_	"   call principal_degrees_
002003 xxxx 002164427012 	dfcmg	Teps1,x2		" if conversion to degrees underflows
002004 xxxx 002151604000 	tmi     infinity	"   return (infinity (degrees))
002005 xxxx 001730463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
002006 xxxx 000001301003 	canx1	=1,du
002007 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002010 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
002011 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, degrees*one_degree))
002012 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent
002013 xxxx 000000513000 	fneg	0           "   EAQ := -degrees*one_degree
002014 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -(degrees*one_degree)))
002015 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
002016 xxxx 400000475003 	fad     =0.0,du		" normalize input
002017 xxxx 001740425012 	fcmg	quarter_pi,x2
002020 xxxx 000003605004 	tpl     3,ic		" if abs (angle) > quarter_pi:
002021 xxxx 777777623000     eax3	Cotangent	"   X3 := Cotangent
002022 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians)
002023 xxxx 001542700000 	tsx0	principal_radians_	" call principal_radians_
002024 xxxx 000001301003 	canx1	=1,du
002025 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002026 xxxx 777777623000     eax3	Cotangent		"   X3 := Cotangent
002027 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, radians))
002030 xxxx 000001623000 	eax3	Tangent		"   X3 := Cotangent (???)
002031 xxxx 000000513000 	fneg	0           "   EAQ := -radians
002032 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, -radians))
002033 xxxx 002043710000     save    0,1,2,3,4
002034 xxxx 000000000000 
002035 xxxx 000000220003 
002036 xxxx 000001221003 
002037 xxxx 000002222003 
002040 xxxx 000003223003 
002041 xxxx 000004224003 
002042 xxxx 002034630000 
002043 xxxx 002034754000 
002044 xxxx 002034741000 
002045 xxxx 002035740000 
002046 xxxx 002036741000 
002047 xxxx 002037742000 
002050 xxxx 002040743000 
002051 xxxx 002041744000 
002052 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002053 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
002054 xxxx 000000624000     eax4    0
002055 xxxx 400000475003 	fad     =0.0,du		" normalize input
002056 xxxx 000000621000 	eax1	0		" initialize X1 := shift = 1
002057 xxxx 002172425012 	fcmg	forty_five,x2
002060 xxxx 000002604404 	tmoz	2,ic		" if abs (angle) > 45:
002061 xxxx 001522700000     tsx0	principal_degrees_	"   call principal_degrees_
002062 xxxx 002164427012 	dfcmg	Teps1,x2		" if conversion to radians underflows
002063 xxxx 000002605004 	tpl     2,ic
002064 xxxx 400000431003     fld     =0.0,du     "   then use zero
002065 xxxx 001730463012 	dfmp	one_degree,x2	"   EAQ := degrees * one_degree
002066 xxxx 000001301003 	canx1	=1,du
002067 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002070 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
002071 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, degrees*one_degree))
002072 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
002073 xxxx 000000513000 	fneg	0           "   EAQ := -radians
002074 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Cotangent, -(degrees*one_degree)))
002075 xxxx 000000622000 	eax2	BFP		" no offset for BFP constants
002076 xxxx 400000475003 	fad     =0.0,du		" normalize input
002077 xxxx 001740425012 	fcmg	quarter_pi,x2
002100 xxxx 000003605004 	tpl     3,ic		" if abs (angle) <= quarter_pi:
002101 xxxx 000001623000     eax3	Tangent
002102 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
002103 xxxx 001542700000 	tsx0	principal_radians_	" call principal_radians_
002104 xxxx 000001301003 	canx1	=1,du
002105 xxxx 000003601004 	tnz     3,ic		" if shift = 0 | shift = 2:
002106 xxxx 000001623000     eax3	Tangent		"   X3 := Tangent
002107 xxxx 002112710000 	tra     part_tan_or_cot	"   return (part_tan_or_cot (Tangent, radians))
002110 xxxx 777777623000 	eax3	Cotangent		"   X3 := Cotangent
002111 xxxx 000000513000 	fneg	0		"   EAQ := -radians
002112 xxxx 002166425000     fcmg	Teps2		" if abs(x) < 5e-10:
002113 xxxx 002124605000     tpl     use_polynomial
002114 xxxx 000001103003     cmpx3	Tangent,du	"   if function = Tangent
002115 xxxx 000003601004     tnz     3,ic
002116 xxxx 000000471000 	frd     0		"     then return (result)
002117 xxxx 002161710014     tra     TanRets,x4
002120 xxxx 002170427012 	dfcmg	Teps3,x2		"   else if (1/result) overflows
002121 xxxx 002151604400     tmoz	infinity		"     then return (infinity (result))
002122 xxxx 002174525012 	fdi     one,x2    	"     else return (1/result)
002123 xxxx 002161710014     tra     TanRets,x4
002124 xxxx 001216472000 	dfstr	x
002125 xxxx 001216463000 	dfmp	x		" calculate xx = x*x
002126 xxxx 001426472000 	dfstr	xx
002127 xxxx 002206477012 	dfad	q1,x2		" calculate q = q(xx)
002130 xxxx 001426463000 	dfmp	xx
002131 xxxx 002204477012 	dfad	q0,x2
002132 xxxx 001750472000 	dfstr	q
002133 xxxx 001426433000 	dfld	xx		" calculate p(xx)
002134 xxxx 002202463012 	dfmp	Tp2,x2
002135 xxxx 002200477012 	dfad	Tp1,x2
002136 xxxx 001426463000 	dfmp	xx
002137 xxxx 002176477012 	dfad	Tp0,x2
002140 xxxx 001216463000 	dfmp	x		" calculate p = x*p(xx)
002141 xxxx 000001103003 	cmpx3	Tangent,du
002142 xxxx 000004601004 	tnz     4,ic		" if function = Tangent
002143 xxxx 001750567000     dfdv	q		" then return (p/q)
002144 xxxx 000000471000 	frd     0
002145 xxxx 002161710014     tra     TanRets,x4
002146 xxxx 001750527000 	dfdi	q		" else return (q/p)
002147 xxxx 000000471000 	frd     0
002150 xxxx 002161710014     tra     TanRets,x4
002151 xxxx 001752455000 	fst     sign
002152 xxxx 001726431000 	fld     max_value
002153 xxxx 001726475000 	fad     max_value		" signal overflow
002154 xxxx 001726431000 	fld     max_value
002155 xxxx 001752430000 	fszn	sign		" if sign >= 0
002156 xxxx 002161710014     tra     TanRets,x4
002157 xxxx 000000513000 	fneg	0		" else return (-max_value)
002160 xxxx 002161710014     tra     TanRets,x4
002161 xxxx 002035710000     return  tangent_degrees_
002162 xxxx 001756710000     return  cotangent_degrees_
002163 xxxx 000000011000 	even "(allocating 1 nop)
002164 xxxx 412712273406 Teps1:	dec	8.418858142948452884d-38
002165 xxxx 461701757347 
002166 xxxx 704422701372 Teps2:	dec	5.0d-10
002167 xxxx 023326451313 
002170 xxxx 404400000000 Teps3:	oct	404400000000,000000000001
002171 xxxx 000000000001 
002172 xxxx 014550000000 	dec	45.0d0
002173 xxxx 000000000000 
002174 xxxx 002400000000 one:	dec  1.d0
002175 xxxx 000000000000 
002176 xxxx 014764652342 Tp0:	dec	 6.26041119547433196d1
002177 xxxx 460137304603 
002200 xxxx 007101637667 Tp1:	dec	-6.97168400629442048d0
002201 xxxx 425655210475 
002202 xxxx 772423545326 Tp2:	dec	 6.73091025875915d-2
002203 xxxx 453071362122 
002204 xxxx 014764652342 q0:     dec	 6.260411195336057284d1
002205 xxxx 456547154111 
002206 xxxx 013102441001 q1:     dec	-2.78397212200427089d1
002207 xxxx 733050625573 
002210 xxxx 000000000000     bss xe, 2
002212 xxxx 000000000000     bss xm, 2
002214 xxxx 000000000000     bss bias, 2
002216 xxxx 000000000000     bss shift, 2
002220 xxxx 000000000000     bss	x_plus_y,2
002222 xxxx 000000000000 	bss	z,2
002224 xxxx 000000000000 	bss	zz,2
002226 xxxx 002234710000     save    0,1,3
002227 xxxx 000000000000 
002230 xxxx 000000220003 
002231 xxxx 000001221003 
002232 xxxx 000002223003 
002233 xxxx 002227630000 
002234 xxxx 002227754000 
002235 xxxx 002227741000 
002236 xxxx 002230740000 
002237 xxxx 002231741000 
002240 xxxx 002232743000 
002241 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002242 xxxx 002315700000 	tsx0	log2		" calculate log2 (x)
002243 xxxx 001716463000 	dfmp	log_10_of_2	" EAQ := log_10_of_2 * log2 (x)
002244 xxxx 000000471000 	frd     0
002245 xxxx 002230710000     return  log_base_10_
002246 xxxx 002254710000     save    0,1,3
002247 xxxx 000000000000 
002250 xxxx 000000220003 
002251 xxxx 000001221003 
002252 xxxx 000002223003 
002253 xxxx 002247630000 
002254 xxxx 002247754000 
002255 xxxx 002247741000 
002256 xxxx 002250740000 
002257 xxxx 002251741000 
002260 xxxx 002252743000 
002261 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002262 xxxx 002315700000 	tsx0	log2		" calculate log2 (x)
002263 xxxx 000000471000 	frd     0
002264 xxxx 002250710000     return  log_base_2_
002265 xxxx 002273710000     save    0,1,3
002266 xxxx 000000000000 
002267 xxxx 000000220003 
002270 xxxx 000001221003 
002271 xxxx 000002223003 
002272 xxxx 002266630000 
002273 xxxx 002266754000 
002274 xxxx 002266741000 
002275 xxxx 002267740000 
002276 xxxx 002270741000 
002277 xxxx 002271743000 
002300 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002301 xxxx 002315700000 	tsx0	log2		" calculate log2 (x)
002302 xxxx 001724463000 	dfmp	log_e_of_2	" EAQ := log_e_of_2 * log2 (x)
002303 xxxx 000000471000 	frd     0
002304 xxxx 002267710000     return  log_base_e_
002305 xxxx 000012236007 	ldq     10,dl
002306 xxxx 001726431000 	fld     max_value
002307 xxxx 000000513000 	fneg	0
002310 xxxx 300000710100 	tra     pr3|0
002311 xxxx 000011236007 	ldq     9,dl
002312 xxxx 001726431000 	fld     max_value
002313 xxxx 000000513000 	fneg	0
002314 xxxx 300000710100 	tra     pr3|0
002315 xxxx 400000475003 	fad     =0.0,du		" normalize input and set indicators
002316 xxxx 002305604000 	tmi     log_of_negative
002317 xxxx 002311600000 	tze     log_of_zero
002320 xxxx 002406515000 	fcmp	Lsquare_root_two	" check for x in the range [.707,1.414]
002321 xxxx 000006605004 	tpl     6,ic
002322 xxxx 002404515000     fcmp	Lsquare_root_half
002323 xxxx 000004604004     tmi     4,ic		" if square_root_half >= x & x <= square_root_two
002324 xxxx 002372623000     eax3	Lone		"   X3 := addr (1.0)
002325 xxxx 000000621010 	eax1	0,x0		"   copy return address
002326 xxxx 002344710000 	tra     part_log2_of_ratio	"   result = part_log2_of_ratio (x, 1)
002327 xxxx 002210456000 	ste     xe          "   store addr (x) -> expon in xe
002330 xxxx 000000411003 	lde     =0,du		"   addr (xm) -> expon = 0
002331 xxxx 002212455000 	fst     xm
002332 xxxx 002210235000 	lda     xe          "   A := 8/xe,10/0,18/garbage
002333 xxxx 000066733000 	lrs     72-18		"   AQ := 62/xe,10/0
002334 xxxx 172000411003 	lde     =61b25,du		"   EAQ := unnormalized float(xe)
002335 xxxx 000400575003 	fsb     =0.5,du		"   EAQ := float(xe) - 0.5
002336 xxxx 002214455000 	fst     bias
002337 xxxx 002212431000 	fld     xm
002340 xxxx 002404623000 	eax3	Lsquare_root_half	"   X3 := addr (square_root_half)
002341 xxxx 002344701000 	tsx1	part_log2_of_ratio	"   EAQ := part_log2_of_ratio (x, square_root_half)
002342 xxxx 002214475000     fad     bias            "   EAQ := part_log2_of_ratio (x, square_root_half) + bias  (= log2(x))
002343 xxxx 000000710010 	tra     0,x0		"   return result
002344 xxxx 000000477013 	dfad	0,x3		" EAQ := x + y
002345 xxxx 002220457000 	dfst	x_plus_y
002346 xxxx 000000577013 	dfsb	0,x3		" EAQ := x
002347 xxxx 000000577013 	dfsb	0,x3		" EAQ := x - y
002350 xxxx 002220567000 	dfdv	x_plus_y	" calculate z = (x - y) / (x + y)
002351 xxxx 002370425000 	fcmg	Leps
002352 xxxx 000003605404 	tpnz	3,ic		" if abs(z) < 4.1968417d-11
002353 xxxx 002374463000     dfmp	Lp0         "   EAQ := z * p0
002354 xxxx 000000710011 	tra     0,x1		"   return to caller
002355 xxxx 002222457000 	dfst	z
002356 xxxx 002222461000 	fmp     z           " calculate zz = z*z
002357 xxxx 002224455000 	fst     zz          " calculate p(zz)
002360 xxxx 002402461000 	fmp     Lp3
002361 xxxx 002400477000 	dfad	Lp2
002362 xxxx 002224461000 	fmp     zz
002363 xxxx 002376477000 	dfad	Lp1
002364 xxxx 002224461000 	fmp     zz
002365 xxxx 002374477000 	dfad	Lp0
002366 xxxx 002222463000 	dfmp	z           " calculate z*p(zz)
002367 xxxx 000000710011 	tra     0,x1		" return to caller
002370 xxxx 674561120744 Leps:	dec     4.1968417d-11
002371 xxxx 744762611260 
002372 xxxx 002400000000 Lone:	dec     1.0d0
002373 xxxx 000000000000 
002374 xxxx 004561250730 Lp0:    dec     .288539007275213810d01
002375 xxxx 772543241373 
002376 xxxx 000754342230 Lp1:    dec     .961800759210250522d00
002377 xxxx 541156441462 
002400 xxxx 000447154133 Lp2:    dec     .576584541348266310d00
002401 xxxx 107411741772 
002402 xxxx 776674533133 Lp3:    dec     .434255940790007142d0
002403 xxxx 371132642555 
002404 xxxx 000552023631         dec     7.071067811865475244008d-01
002405 xxxx 477473631102 
002406 xxxx 002552023631         dec     1.414213562373095048801d+00
002407 xxxx 477473631102 
002410 xxxx 000000000000     bss iy, 2
002412 xxxx 002417710000     save    0, 1
002413 xxxx 000000000000 
002414 xxxx 000000220003 
002415 xxxx 000001221003 
002416 xxxx 002413630000 
002417 xxxx 002413754000 
002420 xxxx 002413741000 
002421 xxxx 002414740000 
002422 xxxx 002415741000 
002423 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002424 xxxx 002520515000 	fcmp	lb          " if x <= -89.415987: 
002425 xxxx 002430605400     tpnz    e3
002426 xxxx 400000431003     fld     =0.0,du     "    result = 0
002427 xxxx 002414710000     return  exponential_
002430 xxxx 002516515000 e3:	fcmp	ub          " if x >= 88.0296926 goto overflow_error
002431 xxxx 002467605000 	tpl     overflow_error
002432 xxxx 001722463000 	dfmp	log_2_of_e	" y = x*log_2_of_e
002433 xxxx 002400475003 	fad     =1.0,du		" EAQ := y + 1
002434 xxxx 016000435003 	ufa     =7b25,du	" AQ := 8/floor(y+1),64/fraction part of y
002435 xxxx 002410755000 	sta     iy
002436 xxxx 776000275003 	ora     =o776000,du	" AQ := 8/-1,64/fraction part of y
002437 xxxx 016000411003 	lde     =7b25,du	" EAQ := ry = unnormalized y - floor(y+1)
002440 xxxx 400000475003 	fad     =0.0,du		" EAQ := ry = normalized y - floor(y+1)
002441 xxxx 002474425000 	fcmg	Eeps
002442 xxxx 002445605000     tpl     pe2
002443 xxxx 002400431003     fld     =1.0,du     "    result = 1.0
002444 xxxx 002414710000     return  exponential_
002445 xxxx 000000471000 pe2:frd     0
002446 xxxx 002222455000 	fst     z
002447 xxxx 002514461000 	fmp     Ep7		" result = p(z)
002450 xxxx 002512477000 	dfad	Ep6
002451 xxxx 002222461000 	fmp     z
002452 xxxx 002510477000 	dfad	Ep5
002453 xxxx 002222461000 	fmp     z
002454 xxxx 002506477000 	dfad	Ep4
002455 xxxx 002222461000 	fmp     z
002456 xxxx 002504477000 	dfad	Ep3
002457 xxxx 002222461000 	fmp     z
002460 xxxx 002502477000 	dfad	Ep2
002461 xxxx 002222461000 	fmp     z
002462 xxxx 002500477000 	dfad	Ep1
002463 xxxx 002222461000 	fmp     z
002464 xxxx 002476477000 	dfad	Ep0
002465 xxxx 002410415000 	ade     iy		" addr (result) -> expon = addr (result) -> expon + iy
002466 xxxx 002414710000     return  exponential_
002467 xxxx 001726431000 	fld     max_value
002470 xxxx 001726475000 	fad     max_value		" cause an overflow
002471 xxxx 001726431000 	fld     max_value
002472 xxxx 002414710000     return  exponential_
002473 xxxx 000000011000 	even "(allocating 1 nop)
002474 xxxx 604561250730 Eeps:	dec	1.56417309d-19
002475 xxxx 645767466564 
002476 xxxx 000777777777 Ep0:	dec	0.999999999959788989221d00
002477 xxxx 775171146647 
002500 xxxx 000542710277 Ep1:	dec	0.693147175773076184335d00
002501 xxxx 064122746305 
002502 xxxx 774753767514 Ep2:	dec	0.240226411617528907564d00
002503 xxxx 542060151212 
002504 xxxx 770706536015 Ep3:	dec	0.555033746338694398430d-01
002505 xxxx 336576334575 
002506 xxxx 764473046222 Ep4:	dec	0.961531912935043645900d-02
002507 xxxx 315773407052 
002510 xxxx 756533765571 Ep5:	dec	0.132743818109838796600d-02
002511 xxxx 150540215277 
002512 xxxx 750464227646 Ep6:	dec	0.147007243118869978000d-03
002513 xxxx 455135010071 
002514 xxxx 740550540762 Ep7:	dec	0.107493818486964670000d-04
002515 xxxx 530201244720 
002516 xxxx 016540074637 ub:	dec	8.802969265d01		" 2**127 - 2**100 = e**88.0296926
002517 xxxx 000053475651 
002520 xxxx 017232254036 lb:	dec	-8.9415987d01		" 2**(-129) = e**-89.415987
002521 xxxx 007734054130 
002522 xxxx 000000000000     bss     arctan_z,2
002524 xxxx 000000000000 	bss     y,2
002526 xxxx 000000000000 	bss     indicators,2
002530 xxxx 002540710000     save    0,1,2,3,4    
002531 xxxx 000000000000 
002532 xxxx 000000220003 
002533 xxxx 000001221003 
002534 xxxx 000002222003 
002535 xxxx 000003223003 
002536 xxxx 000004224003 
002537 xxxx 002531630000 
002540 xxxx 002531754000 
002541 xxxx 002531741000 
002542 xxxx 002532740000 
002543 xxxx 002533741000 
002544 xxxx 002534742000 
002545 xxxx 002535743000 
002546 xxxx 002536744000 
002547 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002550 xxxx 000000622000 	eax2        BFP		" no offset for BFP constants
002551 xxxx 002656700000 	tsx0        arctan		" EAQ := arctan (x)
002552 xxxx 001734463000 	dfmp        one_radian	" convert radians to degrees
002553 xxxx 000000471000 	frd         0
002554 xxxx 002532710000     return  arc_tangent_degrees_
002555 xxxx 002565710000     save    0,1,2,3,4
002556 xxxx 000000000000 
002557 xxxx 000000220003 
002560 xxxx 000001221003 
002561 xxxx 000002222003 
002562 xxxx 000003223003 
002563 xxxx 000004224003 
002564 xxxx 002556630000 
002565 xxxx 002556754000 
002566 xxxx 002556741000 
002567 xxxx 002557740000 
002570 xxxx 002560741000 
002571 xxxx 002561742000 
002572 xxxx 002562743000 
002573 xxxx 002563744000 
002574 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002575 xxxx 002524470000     fstr    y
002576 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002577 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002600 xxxx 002766701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002601 xxxx 001734463000 	dfmp      one_radian	" convert radians to degrees
002602 xxxx 000000471000 	frd       0
002603 xxxx 002557710000     return  arc_tangent_degrees_2_
002604 xxxx 002614710000     save    0,1,2,3,4    
002605 xxxx 000000000000 
002606 xxxx 000000220003 
002607 xxxx 000001221003 
002610 xxxx 000002222003 
002611 xxxx 000003223003 
002612 xxxx 000004224003 
002613 xxxx 002605630000 
002614 xxxx 002605754000 
002615 xxxx 002605741000 
002616 xxxx 002606740000 
002617 xxxx 002607741000 
002620 xxxx 002610742000 
002621 xxxx 002611743000 
002622 xxxx 002612744000 
002623 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
002624 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002625 xxxx 002656700000 	tsx0      arctan		" EAQ := arctan (x)
002626 xxxx 000000471000 	frd     0
002627 xxxx 002606710000     return  arc_tangent_radians_
002630 xxxx 002640710000     save    0,1,2,3,4    
002631 xxxx 000000000000 
002632 xxxx 000000220003 
002633 xxxx 000001221003 
002634 xxxx 000002222003 
002635 xxxx 000003223003 
002636 xxxx 000004224003 
002637 xxxx 002631630000 
002640 xxxx 002631754000 
002641 xxxx 002631741000 
002642 xxxx 002632740000 
002643 xxxx 002633741000 
002644 xxxx 002634742000 
002645 xxxx 002635743000 
002646 xxxx 002636744000 
002647 xxxx 000003431031     FLD     3, 1*               " Y = ARGUMENT
002650 xxxx 002524470000     fstr    y
002651 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT => EAQ
002652 xxxx 000000622000 	eax2      BFP		" no offset for BFP constants
002653 xxxx 002766701000 	tsx1      arctan2		" EAQ := arctan2 (x,y)
002654 xxxx 000000471000 	frd	0
002655 xxxx 002632710000     return  arc_tangent_radians_2_
002656 xxxx 400000475003 	fad     =0.0,du		" normalize input
002657 xxxx 002522455000 	fst     arctan_z	" store argument z
002660 xxxx 000000624012 	eax4	0,x2		" initialize the table index with BFP or HFP offset
002661 xxxx 003066425012 	fcmg	tan_7_pi_by_32,x2
002662 xxxx 002716604000 	tmi     range_0_to_3
002663 xxxx 003102425012 	fcmg	tan_13_pi_by_32,x2
002664 xxxx 002704604000 	tmi     range_4_to_6
002665 xxxx 003106425012 	fcmg	tan_15_pi_by_32,x2
002666 xxxx 002702604000 	tmi     range_7
002667 xxxx 003036425012 	fcmg	ATeps1,x2
002670 xxxx 000003604004 	tmi     3,ic		" if abs (z) < 1e71b:
002671 xxxx 001714431012     fld     half_pi,x2      "   EAQ := radians = half_pi
002672 xxxx 002745710000 	tra     set_to_quadrant_1_or_4
002673 xxxx 400000515003 	fcmp	=0.0,du
002674 xxxx 000002605004 	tpl     2,ic
002675 xxxx 000000513000     fneg	0		"   EAQ := abs (z)
002676 xxxx 001000525003 	fdi     =-1.0,du		"   EAQ := -1/abs_z
002677 xxxx 002751703000 	tsx3	part_arctan	"   calculate part_arctan (-1/abs_z)
002700 xxxx 001714475012 	fad     half_pi,x2	"   EAQ := radians = half_pi - part_arctan (1/abs_z)
002701 xxxx 002745710000 	tra     set_to_quadrant_1_or_4
002702 xxxx 000030064003 	adx4	=24,du		" range = 7, tan_13_pi_by_32 <= abs (z) < tan_15_pi_by_32
002703 xxxx 002735710000 	tra     calculate_for_range_1_to_7
002704 xxxx 003076425012 	fcmg	tan_11_pi_by_32,x2
002705 xxxx 002710604000 	tmi     range_4_to_5
002706 xxxx 000024064003 	adx4	=20,du		" range = 6, tan_11_pi_by_32 <= abs (z) < tan_13_pi_by_32
002707 xxxx 002735710000 	tra     calculate_for_range_1_to_7
002710 xxxx 003072425012 	fcmg	tan_9_pi_by_32,x2
002711 xxxx 002714604000 	tmi     range_4
002712 xxxx 000020064003 	adx4	=16,du		" range = 5, tan_9_pi_by_32 <= abs (z) < tan_11_pi_by_32
002713 xxxx 002735710000 	tra     calculate_for_range_1_to_7
002714 xxxx 000014064003 	adx4	=12,du		" range = 4, tan_7_pi_by_32 <= abs (z) < tan_9_pi_by_32
002715 xxxx 002735710000 	tra     calculate_for_range_1_to_7
002716 xxxx 003056425012 	fcmg	tan_3_pi_by_32,x2
002717 xxxx 002726604000 	tmi     range_0_to_1
002720 xxxx 003062425012 	fcmg	tan_5_pi_by_32,x2
002721 xxxx 002724604000 	tmi     range_2
002722 xxxx 000010064003 	adx4	=8,du		" range = 3, tan_5_pi_by_32 <= abs (z) < tan_7_pi_by_32
002723 xxxx 002735710000 	tra     calculate_for_range_1_to_7
002724 xxxx 000004064003 	adx4	=4,du		" range = 2, tan_3_pi_by_32 <= abs (z) < tan_5_pi_by_32
002725 xxxx 002735710000 	tra     calculate_for_range_1_to_7
002726 xxxx 003052425012 	fcmg	tan_pi_by_32,x2
002727 xxxx 002735605000 	tpl	calculate_for_range_1_to_7
002730 xxxx 400000515003 	fcmp	=0.0,du
002731 xxxx 000002605004 	tpl     2,ic
002732 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002733 xxxx 002751703000 	tsx3	part_arctan	" EAQ := part_arctan (abs_z)
002734 xxxx 002745710000 	tra     set_to_quadrant_1_or_4
002735 xxxx 400000515003 	fcmp	=0.0,du
002736 xxxx 000002605004 	tpl     2,ic
002737 xxxx 000000513000     fneg	0		" EAQ := abs (z)
002740 xxxx 003112477014 	dfad	one_over_u,x4	" EAQ := t = 1/u(range) - (1/(u(range)**2)+1) / (1/u(range) + abs_z)
002741 xxxx 003146527014 	dfdi	one_plus_one_over_u_squared,x4
002742 xxxx 003112477014 	dfad	one_over_u,x4
002743 xxxx 002751703000 	tsx3	part_arctan	" EAQ := part_arctan (t)
002744 xxxx 003202477014 	dfad	arctan_of_u,x4	" EAQ := radians = part_arctan (t) + arctan(u(range))
002745 xxxx 002522430000 	fszn	arctan_z	" set indicators
002746 xxxx 000000605010 	tpl     0,x0		" if z >= 0 then return (radians)
002747 xxxx 000000513000     fneg	0		" else return (-radians)
002750 xxxx 000000710010 	tra     0,x0
002751 xxxx 003042425012 	fcmg	ATeps2,x2		" if abs (z) < 5.7031627e10
002752 xxxx 000000604013 	tmi     0,x3		" then return (z)
002753 xxxx 002222472000 	dfstr	z
002754 xxxx 002222463000 	dfmp	z		" calculate zz = z*z
002755 xxxx 002224470000 	fstr	zz
002756 xxxx 003252461012 	fmp     ATp3,x2		" calculate p(zz)
002757 xxxx 003246477012 	dfad	ATp2,x2
002760 xxxx 002224461000 	fmp     zz
002761 xxxx 003242477012 	dfad	ATp1,x2
002762 xxxx 002224461000 	fmp     zz
002763 xxxx 003236477012 	dfad	ATp0,x2
002764 xxxx 002222461000 	fmp     z		" calculate z*p(zz)
002765 xxxx 000000710013 	tra     0,x3		" return
002766 xxxx 400000475003 	fad     =0.0,du		" normalize x
002767 xxxx 001216455000 	fst     x		" save normalized x for quadrant check
002770 xxxx 002524431000 	fld     y   	" load y
002771 xxxx 400000475003 	fad     =0.0,du		" normalize y
002772 xxxx 002524455000 	fst     y		" save normalized y for quadrant check
002773 xxxx 003003601000 	tnz     y_not_zero
002774 xxxx 001216430000 	fszn	x		" test if x = 0 also
002775 xxxx 003025600000 	tze     arctan2_domain_err	" 0/0 is error
002776 xxxx 001714433012 	dfld	half_pi,x2	" atan(x/0) =  + or - (half_pi)
002777 xxxx 001216430000 	fszn	x
003000 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
003001 xxxx 000000513000     fneg	0		" else return (-radians)
003002 xxxx 000000710011 	tra     0,x1
003003 xxxx 002526754000 	sti     indicators	" save indicators
003004 xxxx 003046634012 	ldi     no_overflow,x2
003005 xxxx 001216525000 	fdi     x		" EAQ := x/y
003006 xxxx 003033614000 	teo     quotient_too_large	" if overflow, atan(x,y) = pi/2 or -pi/2
003007 xxxx 003030615000 	teu     quotient_too_small	" if underflow, atan(x,y) = 0
003010 xxxx 002526634000 	ldi     indicators	" restore previous indicators
003011 xxxx 400000475003 	fad     =0.0,du		" set indicators
003012 xxxx 000002605004 	tpl     2,ic		" calculate z = abs (x,y)
003013 xxxx 000000513000     fneg	0
003014 xxxx 002656700000 	tsx0	arctan		" EAQ := arctan(z)
003015 xxxx 002524430000 	fszn	y		" set the quadrant
003016 xxxx 000003605004 	tpl     3,ic		" if y < 0 then
003017 xxxx 000000513000     fneg	0		"   radians = pi-radians
003020 xxxx 001736477012 	dfad	pi,x2
003021 xxxx 001216430000 	fszn	x
003022 xxxx 000000605011 	tpl     0,x1		" if x >= 0 then return (radians)
003023 xxxx 000000513000     fneg	0		" else return (-radians)
003024 xxxx 000000710011 	tra     0,x1
003025 xxxx 000013236007 	ldq     11,dl
003026 xxxx 400000431003 	fld     =0.0,du
003027 xxxx 300000710100 	tra     pr3|0		" return to caller
003030 xxxx 002526634000 	ldi     indicators	" restore indicators
003031 xxxx 400000431003 	fld     =0.0,du		" radians = 0.0
003032 xxxx 003015710000 	tra     set_quadrant
003033 xxxx 002526634000 	ldi     indicators	" restore indicators
003034 xxxx 001714433012 	dfld	half_pi,x2	" radians = half_pi
003035 xxxx 003015710000 	tra     set_quadrant
003036 xxxx 220400000000 ATeps1:	oct	220400000000,000000000000	" 2**71 = 2.36e21
003037 xxxx 000000000000 
003040 xxxx 044400000000 	oct	044400000000,000000000000
003041 xxxx 000000000000 
003042 xxxx 704471421604 ATeps2:	dec	5.7031627d-10
003043 xxxx 407031702277 
003044 xxxx 762116304341 	oct	762116304341,000000000000
003045 xxxx 000000000000 
003046 xxxx 000000004000 	oct	000000004000,000000000000	" bit 25 is the overflow mask
003047 xxxx 000000000000 
003050 xxxx 000000004010 	oct	000000004010,000000000000	" bit 33 is the hex indicator
003051 xxxx 000000000000 
003052 xxxx 772623327342 	dec	.98491403d-1		" tan(pi/32)
003053 xxxx 551170653204 
003054 xxxx 000062332734 	oct	000062332734,000000000000
003055 xxxx 000000000000 
003056 xxxx 776466501014 	dec	.30334668d00		" tan(3*pi/32)
003057 xxxx 276317550567 
003060 xxxx 000233240406 	oct	000233240406,000000000000
003061 xxxx 000000000000 
003062 xxxx 000421526706 	dec	.53451114d00		" tan(5*pi/32)
003063 xxxx 632271614047 
003064 xxxx 000421526707 	oct	000421526707,000000000000
003065 xxxx 000000000000 
003066 xxxx 000644140012 	dec	.82067879d00		" tan(7*pi/32)
003067 xxxx 471104326120 
003070 xxxx 000644140013 	oct	000644140013,000000000000
003071 xxxx 000000000000 
003072 xxxx 002467737541 	dec	1.2185035d00		" tan(9*pi/32)
003073 xxxx 524374032261 
003074 xxxx 002046773754 	oct	002046773754,000000000000
003075 xxxx 000000000000 
003076 xxxx 002736742355 	dec	1.8708684d00		" tan(11*pi/32)
003077 xxxx 010752710074 
003100 xxxx 002073674236 	oct	002073674236,000000000000
003101 xxxx 000000000000 
003102 xxxx 004645753171 	dec	3.2965582d00		" tan(13*pi/32)
003103 xxxx 751342441016 
003104 xxxx 002151372636 	oct	002151372636,000000000000
003105 xxxx 000000000000 
003106 xxxx 010504715423 	dec	10.153170d00		" tan(15*pi/32)
003107 xxxx 054564714557 
003110 xxxx 002504715423 	oct	002504715423,000000000000
003111 xxxx 000000000000 
003112 xxxx 006501577670 	dec	5.0273394921258481045d0	" 1/tan(pi/16)
003113 xxxx 441107342042 
003114 xxxx 002240677734 	oct	002240677734,220443561021
003115 xxxx 220443561021 
003116 xxxx 004465011714 	dec	2.4142135623730950488d0	" 1/tan(2*pi/16)
003117 xxxx 637635714441 
003120 xxxx 002115202363 	oct	002115202363,147747363110
003121 xxxx 147747363110 
003122 xxxx 002577103070 	dec	1.4966057626654890176d0	" 1/tan(3*pi/16)
003123 xxxx 455164302501 
003124 xxxx 002057710307 	oct	002057710307,045516430250
003125 xxxx 045516430250 
003126 xxxx 002400000000 	dec	1.0d0			" 1/tan(4*pi/16)
003127 xxxx 000000000000 
003130 xxxx 002040000000 	oct	002040000000,000000000000
003131 xxxx 000000000000 
003132 xxxx 000526067012 	dec	.66817863791929891999d0	" 1/tan(5*pi/16)
003133 xxxx 533771440572 
003134 xxxx 000526067012 	oct	000526067012,533771440572
003135 xxxx 533771440572 
003136 xxxx 776650117146 	dec	.41421356237309504880d0	" 1/tan(6*pi/16)
003137 xxxx 376357144410 
003140 xxxx 000324047463 	oct	000324047463,177167462204
003141 xxxx 177167462204 
003142 xxxx 774627276570 	dec	.19891236737965800691d0	" 1/tan(7*pi/16)
003143 xxxx 052461260037 
003144 xxxx 000145657536 	oct	000145657536,012514254010
003145 xxxx 012514254010 
003146 xxxx 013133472163 	dec	-.26274142369088180356d02
003147 xxxx 441121370576 
003150 xxxx 005713347216 	oct	005713347216,344112137060
003151 xxxx 344112137060 
003152 xxxx 007112766063 	dec	-.68284271247461900976d01
003153 xxxx 140142063337 
003154 xxxx 003445373031 	oct	003445373031,460061031557
003155 xxxx 460061031557 
003156 xxxx 005141232450 	dec	-.32398288088435500410d01
003157 xxxx 425406626076 
003160 xxxx 003630246512 	oct	003630246512,105301545417
003161 xxxx 105301545417 
003162 xxxx 003000000000 	dec	-.20d1
003163 xxxx 000000000000 
003164 xxxx 003700000000 	oct	003700000000,000000000000
003165 xxxx 000000000000 
003166 xxxx 003215551173 	dec	-.14464626921716895685d01
003167 xxxx 721720634630 
003170 xxxx 003721555117 	oct	003721555117,372172063463
003171 xxxx 372172063463 
003172 xxxx 003324047463 	dec	-.11715728752538099024d01
003173 xxxx 177167462205 
003174 xxxx 003732404746 	oct	003732404746,317716746221
003175 xxxx 317716746221 
003176 xxxx 003365675771 	dec	-.10395661298965800348d01
003177 xxxx 760411653016 
003200 xxxx 003736567577 	oct	003736567577,176041165302
003201 xxxx 176041165302 
003202 xxxx 774622077325 	dec	.19634954084936207740d00	" pi/16
003203 xxxx 042055060432 
003204 xxxx 000144417665 	oct	000144417665,210413214107
003205 xxxx 210413214107 
003206 xxxx 776622077325 	dec	.39269908169872415481d00	" 2*pi/16
003207 xxxx 042055060432 
003210 xxxx 000311037552 	oct	000311037552,421026430215
003211 xxxx 421026430215 
003212 xxxx 000455457437 	dec	.58904862254808623221d00	" 3*pi/16
003213 xxxx 631441644324 
003214 xxxx 000455457437 	oct	000455457437,631441644324
003215 xxxx 631441644324 
003216 xxxx 000622077325 	dec	.78539816339744830962d00	" 4*pi/16
003217 xxxx 042055060432 
003220 xxxx 000622077325 	oct	000622077325,042055060432
003221 xxxx 042055060432 
003222 xxxx 000766517212 	dec	.98174770424681038702d00	" 5*pi/16
003223 xxxx 252470274541 
003224 xxxx 000766517212 	oct	000766517212,252470274541
003225 xxxx 252470274541 
003226 xxxx 002455457437 	dec	1.17809724509617246442d00	" 6*pi/16
003227 xxxx 631441644324 
003230 xxxx 002045545743 	oct	002045545743,763144164432
003231 xxxx 763144164432 
003232 xxxx 002537667372 	dec	1.37444678594553454182d00	" 7*pi/16
003233 xxxx 335647352367 
003234 xxxx 002053766737 	oct	002053766737,233564735237
003235 xxxx 233564735237 
003236 xxxx 000777777777 ATp0:	dec	.9999999999924517d00
003237 xxxx 777366325725 
003240 xxxx 000777777777 	oct	000777777777,777366325725
003241 xxxx 777366325725 
003242 xxxx 777252525261 ATp1:	dec	-.33333330840148d00
003243 xxxx 267741700306 
003244 xxxx 001525252530 	oct	001525252530,533760740143
003245 xxxx 533760740143 
003246 xxxx 774631445545 ATp2:	dec	.199987124164d00
003247 xxxx 571746370206 
003250 xxxx 000146311331 	oct	000146311331,336371476042
003251 xxxx 336371476042 
003252 xxxx 775337626574 ATp3:	dec	-.14072538d00
003253 xxxx 713546710627 
003254 xxxx 001667745537 	oct	001667745537,162731562146
003255 xxxx 162731562146 
003256 xxxx 400000475003     fad     =0.0,du		" normalize input arg
003257 xxxx 000000600017     tze     0,x7        " if x = 0 return (0)
003260 xxxx 003265605000 	tpl     calc_dsquare_root	" if x < 0:
003261 xxxx 000000513000     fneg	0           "   x = -x
003262 xxxx 001216457000 	dfst	x
003263 xxxx 000026236007 	ldq     22,dl
003264 xxxx 001216433000 	dfld	x
003265 xxxx 001216457000 	dfst	x           " store EAQ := input arg
003266 xxxx 001216220000 	ldx0	x           " X0 := addr (x) -> expon
003267 xxxx 000000411003 	lde     =0b25,du	" addr (m) -> expon = 0
003270 xxxx 002000300003 	canx0	=1b25,du	" calculate mod (e, 2)
003271 xxxx 000002600004 	tze     2,ic		" if mod (e, 2) = 1:
003272 xxxx 776000411003 	lde     =-1b25,du	"   EAQ := m = .5*m
003273 xxxx 001220457000 	dfst	m           " store EAQ := m
003274 xxxx 001216236000 	ldq     x           " Q := 8/expon,28/garbage
003275 xxxx 000034732000 	qrs     28          " Q := 28/0,8/expon
003276 xxxx 000001076007 	adq     =1,dl		" calculate e+1
003277 xxxx 000001732000 	qrs     1           " calculate divide (e+1, 2, 7)
003300 xxxx 000034736000 	qls     28          " position result in exponent field
003301 xxxx 001222756000 	stq     e           " store Q := e = divide (e+1, 2, 7)
003302 xxxx 001220433000 	dfld	m
003303 xxxx 003336461000 	fmp     DSp2		" calculate root_m_top = p(m)
003304 xxxx 003334475000 	fad     DSp1
003305 xxxx 001220461000 	fmp     m
003306 xxxx 003332475000 	fad     DSp0
003307 xxxx 001214455000 	fst     root_m
003310 xxxx 001220525000 	fdi     m           " calculate root_m = .5 * (root_m_top + m_top/root_m_top)
003311 xxxx 001214475000 	fad     root_m
003312 xxxx 000400461003 	fmp     =0.5,du
003313 xxxx 000000473000 	dfrd	0
003314 xxxx 001214457000 	dfst	root_m
003315 xxxx 001220527000 	dfdi	m           " calculate root_m = .5 * (root_m + m/root_m)
003316 xxxx 001214477000 	dfad	root_m
003317 xxxx 000400461003 	fmp     =0.5,du
003320 xxxx 000000473000 	dfrd	0
003321 xxxx 001214457000 	dfst	root_m      " calculate root_m + m/root_m
003322 xxxx 001220527000 	dfdi	m
003323 xxxx 001214477000 	dfad	root_m
003324 xxxx 776000415003 	ade     =-1b25,du	" root_m = .5 * (root_m + float (m, 63)/root_m)
003325 xxxx 001222415000 	ade     e           " calculate addr (root_x) -> expon =
003326 xxxx 000000473000 	dfrd	0
003327 xxxx 000000710017 	tra     0,x7        " return (root_x)
003330 xxxx 000200000000 	oct	000200000000,000000000000	" 0.25
003331 xxxx 000000000000 
003332 xxxx 776411377603 DSp0:	dec	2.5927688d-1
003333 xxxx 406536706351 
003334 xxxx 002415257502 DSp1:	dec	1.0521212d0
003335 xxxx 413332156142 
003336 xxxx 777274054062 DSp2:	dec	-3.1632214d-1
003337 xxxx 066300621037 
003340 xxxx 000000000000 	bss     abs_x,2
003342 xxxx 000000000000 	bss     arg_x,2
003344 xxxx 000000000000     bss     yy, 2
003346 xxxx 000000000000 	bss     p,2
003350 xxxx 000000000000 	bss     space_used,2
003352 xxxx 003363710000     save    0,1,2,3,4,7    
003353 xxxx 000000000000 
003354 xxxx 000000220003 
003355 xxxx 000001221003 
003356 xxxx 000002222003 
003357 xxxx 000003223003 
003360 xxxx 000004224003 
003361 xxxx 000005227003 
003362 xxxx 003353630000 
003363 xxxx 003353754000 
003364 xxxx 003353741000 
003365 xxxx 003354740000 
003366 xxxx 003355741000 
003367 xxxx 003356742000 
003370 xxxx 003357743000 
003371 xxxx 003360744000 
003372 xxxx 003361747000 
003373 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
003374 xxxx 000000622000 	eax2	BFP
003375 xxxx 003445703000 	tsx3	arcsine
003376 xxxx 000000471000 	frd	0
003377 xxxx 003354710000     return  arc_sine_radians_
003400 xxxx 003411710000     save    0,1,2,3,4,7    
003401 xxxx 000000000000 
003402 xxxx 000000220003 
003403 xxxx 000001221003 
003404 xxxx 000002222003 
003405 xxxx 000003223003 
003406 xxxx 000004224003 
003407 xxxx 000005227003 
003410 xxxx 003401630000 
003411 xxxx 003401754000 
003412 xxxx 003401741000 
003413 xxxx 003402740000 
003414 xxxx 003403741000 
003415 xxxx 003404742000 
003416 xxxx 003405743000 
003417 xxxx 003406744000 
003420 xxxx 003407747000 
003421 xxxx 000002431031     FLD     2, 1*               " X = ARGUMENT
003422 xxxx 000000622000 	eax2	BFP
003423 xxxx 003445703000 	tsx3	arcsine
003424 xxxx 001734463000 	dfmp	one_radian	" Convert to degrees
003425 xxxx 000000471000 	frd     0
003426 xxxx 003402710000     return  arc_sine_degrees_
003427 xxxx 000000622000 	eax2	BFP
003430 xxxx 003445703000 	tsx3	arcsine
003431 xxxx 000000513000 	fneg	0
003432 xxxx 001714477000 	dfad	half_pi		" convert to cosine
003433 xxxx 000000471000 	frd     0
003434 xxxx 300000710100 	tra	pr3|0		" Return to caller
003435 xxxx 000000622000 	eax2	BFP
003436 xxxx 003445703000 	tsx3	arcsine
003437 xxxx 001734463012 	dfmp	one_radian,x2	" convert to degrees
003440 xxxx 000000513000 	fneg	0
003441 xxxx 000000473000 	dfrd	0		" clean out unnecessary bottom bits
003442 xxxx 016550475003 	fad     =90.0,du		" convert to cosine
003443 xxxx 000000471000 	frd     0
003444 xxxx 300000710100 	tra	pr3|0		" Return to caller
003445 xxxx 000000471000 	frd     0           " round and normalize input ("arg_x")
003446 xxxx 003342455000 	fst     arg_x		" store sign of arg_x.
003447 xxxx 000002605004 	tpl     2,ic		" abs_x=abs(arg_x)
003450 xxxx 000000513000     fneg	0
003451 xxxx 003340455000 	fst     abs_x
003452 xxxx 000400425003 	fcmg	=0.5,du         " is abs_x in the range [0,.5)
003453 xxxx 003457605000 	tpl     above_bound_1	" no, find the correct range
003454 xxxx 003342431000 	fld     arg_x
003455 xxxx 003535704000 	tsx4	part_arcsine
003456 xxxx 000000710013 	tra     0,x3            " Return to entry
003457 xxxx 003614425012 	fcmg	bound_2,x2      " is abs_x in the range [.5, .866)
003460 xxxx 003473605000 	tpl     above_bound_2	" no, find correct range
003461 xxxx 003340461000 	fmp     abs_x           " EAQ = abs_x**2
003462 xxxx 003624461012 	fmp     two,x2          " EAQ = 2 * abs_x**2
003463 xxxx 002174575012 	fsb     one,x2          " EAQ = 2 * abs_x**2 - 1
003464 xxxx 003535704000 	tsx4	part_arcsine
003465 xxxx 001714477012 	dfad	half_pi,x2      " EAQ = part_asin + pi/2
003466 xxxx 000400461003 	fmp     =0.5,du         " EAQ = .5*part_asin + pi/4
003467 xxxx 003342430000 	fszn	arg_x           " was arg_x negative
003470 xxxx 000000605013 	tpl     0,x3            " no, return to entry
003471 xxxx 000000513000 	fneg	0               " EAQ = -EAQ
003472 xxxx 000000710013 	tra     0,x3            " Return to entry
003473 xxxx 003616425012 	fcmg	bound_3,x2      " is abs_x in the range [.866, .966)
003474 xxxx 003512605000 	tpl     above_bound_3	" no, find correct range
003475 xxxx 003340461000 	fmp     abs_x           " EAQ = abs_x**2
003476 xxxx 003340457000 	dfst	AStemp          " why not just abs_x?
003477 xxxx 003626461012 	fmp     eight8,x2       " EAQ = 8*abs_x**2
003500 xxxx 003626575012 	fsb     eight8,x2       " EAQ = 8*abs_x**2 - 8
003501 xxxx 003340463000 	dfmp	AStemp          " EAQ = 8*abs_x**4 - 8*abs_x**2
003502 xxxx 002174475012 	fad     one,x2          " EAQ = 8*abs_x**4 - 8*abs_x**2 + 1
003503 xxxx 003535704000 	tsx4	part_arcsine
003504 xxxx 003622477012 	dfad	three_pi_by_two,x2	" EAQ = part_asin + 3*pi/2
003505 xxxx 003330463012 	dfmp	one_quarter,x2	" EAQ = part_asin/4 + 3*pi/8
003506 xxxx 003342430000 	fszn	arg_x           " was arg_x negative
003507 xxxx 000000605013 	tpl     0,x3            " no, return to entry
003510 xxxx 000000513000 	fneg	0               " EAQ = -EAQ
003511 xxxx 000000710013 	tra     0,x3            " return to entry
003512 xxxx 003620425012 	fcmg	bound_4,x2	" is abs_x in the range [.966, 1]
003513 xxxx 003532605400 	tpnz	arcsine_domain_error
003514 xxxx 000400461003 	fmp     =0.5,du		" EAQ = abs_x/2
003515 xxxx 000000513000 	fneg	0           " EAQ = - abs_x/2
003516 xxxx 000400475003 	fad     =0.5,du		" EAQ = .5 - abs_x/2 or (1-abs_x)/2
003517 xxxx 003530707012     tsx7	square_root,x2	" call sqrt function
003520 xxxx 003535704000 	tsx4	part_arcsine	" EAQ = sqrt ((1 - abs_x)/2)
003521 xxxx 003624461012 	fmp     two,x2		" EAQ = 2*part_asin
003522 xxxx 000000513000 	fneg	0           " EAQ = - 2*part_asin
003523 xxxx 001714477012 	dfad	half_pi,x2	" EAQ = pi/2 - 2*part_asin
003524 xxxx 003342430000 	fszn	arg_x		" was arg_x negative
003525 xxxx 000000605013 	tpl     0,x3		" no, return to entry
003526 xxxx 000000513000 	fneg	0           " EAQ = -EAQ
003527 xxxx 000000710013 	tra     0,x3		" return to entry
003530 xxxx 003256710000     tra double_square_root_
003531 xxxx 000000011000 	nop
003532 xxxx 000072236007 	ldq	58,dl
003533 xxxx 400000431003 	fld	=0.0,du
003534 xxxx 300000710100 	tra	pr3|0		" return to caller
003535 xxxx 003630425012 	fcmg	formula_bound,x2	" Can we use a short polynomial?
003536 xxxx 003556604000 	tmi     small_formula       " Yup.
003537 xxxx 002524457000 	dfst	y
003540 xxxx 002524463000 	dfmp	y
003541 xxxx 003344457000 	dfst	yy          " yy = y*y
003542 xxxx 003600463012 	dfmp	ACp2,x2		" EAQ = yy*p2
003543 xxxx 003576477012 	dfad	ACp1,x2		" EAQ = p1 + yy*p2
003544 xxxx 003344463000 	dfmp	yy          " EAQ = yy*(p1 + yy*p2)
003545 xxxx 003574477012 	dfad	ACp0,x2		" EAQ = p0 + yy*(p1 + yy*p2)
003546 xxxx 003346457000 	dfst	p
003547 xxxx 003344433000 	dfld	yy          " EAQ = yy
003550 xxxx 003610477012 	dfad	ACq1,x2		" EAQ = q1 + yy
003551 xxxx 003344463000 	dfmp	yy          " EAQ = yy*(q1 + yy)
003552 xxxx 003606477012 	dfad	ACq0,x2		" EAQ = q0 + yy*(q1 + yy)
003553 xxxx 003346527000 	dfdi	p           " EAQ = p/q
003554 xxxx 002524463000 	dfmp	y           " EAQ = y*p/q
003555 xxxx 000000710014 	tra     0,x4		" Return from part_arcsine
003556 xxxx 003632425012 	fcmg	ACepsilon,x2	" Is any calculation necessary?
003557 xxxx 000000604014 	tmi     0,x4            " No. Small number. Just return.
003560 xxxx 002524457000 	dfst	y
003561 xxxx 002524463000 	dfmp	y
003562 xxxx 003344457000 	dfst	yy          " yy = y*y
003563 xxxx 003604463012 	dfmp	ACpp1,x2	" EAQ = yy*pp1
003564 xxxx 003602477012 	dfad	ACpp0,x2	" EAQ = pp0 + yy*pp1
003565 xxxx 003346457000 	dfst	pp
003566 xxxx 003344433000 	dfld	yy
003567 xxxx 003612477012 	dfad	ACqq0,x2	" EAQ = qq0 + yy
003570 xxxx 003346527000 	dfdi	pp          " EAQ = pp/qq
003571 xxxx 002524463000 	dfmp	y           " EAQ = y*pp/qq
003572 xxxx 000000710014 	tra     0,x4		" Return from part_arcsine
003573 xxxx 000000011000 	even "(allocating 1 nop)
003574 xxxx 006546503556 ACp0:       dec	.5603629044813127d01
003575 xxxx 674615323460 
003576 xxxx 007330527031 ACp1:       dec	-.46145309466645d01
003577 xxxx 443310603646 
003600 xxxx 776773374667 ACp2:       dec	.49559947478731d00
003601 xxxx 004024666576 
003602 xxxx 005344473435 ACpp0:      dec	-2.21393498174243d00
003603 xxxx 147621156306 
003604 xxxx 000503050602 ACpp1:      dec	.63101484054356d00
003605 xxxx 166633467044 
003606 xxxx 006546503556 ACq0:       dec	.5603629030606043d01
003607 xxxx 502571776373 
003610 xxxx 007234713661 ACq1:       dec	-.554846659934668d01
003611 xxxx 311556204324 
003612 xxxx 005344473435 ACqq0:      dec	-2.21393497792717d00
003613 xxxx 251250461716 
003614 xxxx 000673317272 bound_2:	dec	.866025404d0
003615 xxxx 072755035014 
003616 xxxx 000756433521 bound_3:	dec	.965925826d0
003617 xxxx 620404312164 
003620 xxxx 002400000000 bound_4:	dec	1.0d0
003621 xxxx 000000000000 
003622 xxxx 006455457437 	dec 	.471238898038468985787763d01
003623 xxxx 631441644324 
003624 xxxx 004400000000 two:	dec	2.0d0
003625 xxxx 000000000000 
003626 xxxx 010400000000 eight8:	dec	8d0
003627 xxxx 000000000000 
003630 xxxx 774413242502 	dec	0.13052619d0
003631 xxxx 524446250766 
003632 xxxx 704471421604 ACepsilon:	dec	5.7031627d-10
003633 xxxx 407031702277 
003634 xxxx 777777777000 	oct	777777777000
003635 xxxx 003640710000 crlf:	save
003636 xxxx 000000000000 
003637 xxxx 003636630000 
003640 xxxx 003636754000 
003641 xxxx 003636741000 
003642 xxxx 003651755000         sta     saveA
003643 xxxx 004452235000         lda     =012
003644 xxxx 000001420400         emCall  1
003645 xxxx 004453235000         lda     =015
003646 xxxx 000001420400         emcall  1
003647 xxxx 003651235000         lda     saveA
003650 xxxx 003637710000         return  crlf
003651 xxxx 000000000000 saveA:  bss     1
003652 xxxx 003661710000 ioa:    save    2, 4, 5, 6
003653 xxxx 000000000000 
003654 xxxx 000000222003 
003655 xxxx 000001224003 
003656 xxxx 000002225003 
003657 xxxx 000003226003 
003660 xxxx 003653630000 
003661 xxxx 003653754000 
003662 xxxx 003653741000 
003663 xxxx 003654742000 
003664 xxxx 003655744000 
003665 xxxx 003656745000 
003666 xxxx 003657746000 
003667 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
003670 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
003671 xxxx 000000626015         eax6    0, x5
003672 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
003673 xxxx 003710755000         sta     i29
003674 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
003675 xxxx 000033731000         ars     27      " determine word count
003676 xxxx 000006735000     	als     6       " count to upper word of tally
003677 xxxx 003710255000     	orsa    i29
003700 xxxx 000000626014     	eax6    0, x4   " address of string into X6
003701 xxxx 003710746000     	stx6    i29     " address to upper word of tally
003702 xxxx 003710235052 inext:  lda     i29, sc
003703 xxxx 000136115007         cmpa    =o000136,dl		" ^
003704 xxxx 003711600000         tze     iernot      " if so, go process it
003705 xxxx 000001420400 out1:  	emCall  1
003706 xxxx 003702607000     	ttf     inext
003707 xxxx 003654710000         return  ioa
003710 xxxx 000000000041 i29:	tallyb  0, 0, 1
003711 xxxx 003710235052 iernot: lda     i29, sc         " get next char ...
003712 xxxx 000136115007         cmpa    =o000136,dl     " is it another "^"?
003713 xxxx 003731600000         tze     i21             " No, just print it ...
003714 xxxx 000167115007         cmpa    =o000167,dl     " is it a "w"?
003715 xxxx 003733600000         tze     idoW            " do full word octal
003716 xxxx 000157115007         cmpa    =o000157,dl     " is it an "o"?
003717 xxxx 003761600000         tze     idoO            " print zero suppressed octal
003720 xxxx 000156115007         cmpa    =o000156,dl     " is it a "n"?
003721 xxxx 004004600000         tze     idoN            " octal w/ no spaces inserted
003722 xxxx 000144115007         cmpa    =o000144,dl     " is it a "d"?
003723 xxxx 004032600000         tze     idoD            " decimal
003724 xxxx 000141115007         cmpa    =o000141,dl     " is it a ^a?
003725 xxxx 004040600000         tze     idoA            " 4 char ascii display
003726 xxxx 000147115007         cmpa    =o000147,dl     " is it a ^g?
003727 xxxx 004051600000         tze     idoG            " 6 char GE BCD display
003730 xxxx 003705710000         tra     out1        " unknown just print it....
003731 xxxx 000001420400 i21:    emCall  1           " output A to console
003732 xxxx 003702710000         tra     inext
003733 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
003734 xxxx 004127702000         tsx2    octwd
003735 xxxx 004030757000         staq    ioaSafe     " bcd in AQ
003736 xxxx 000044773000         lrl     36          " A => Q
003737 xxxx 000006622000         eax2    6
003740 xxxx 000000235007 idoW2:  lda     =0, dl
003741 xxxx 000006737000         lls     6
003742 xxxx 000002420400         emCall  2           " output GE code char to console
003743 xxxx 777777622012         eax2    -1, 2
003744 xxxx 003740601000         tnz     idoW2
003745 xxxx 004030237000         ldaq    ioaSafe
003746 xxxx 000000235007         lda     =0, dl      " 0 => A
003747 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
003750 xxxx 000002420400         emcall  2
003751 xxxx 000006622000         eax2    6
003752 xxxx 000000235007 idoW3:  lda     =0,dl
003753 xxxx 000006737000         lls     6
003754 xxxx 000002420400         emCall  2
003755 xxxx 777777622012         eax2    -1, 2
003756 xxxx 003752601000         tnz     idoW3
003757 xxxx 000001065003         adx5    1,du
003760 xxxx 003702710000         tra     inext
003761 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
003762 xxxx 004127702000         tsx2    octwd
003763 xxxx 004030757000         staq    ioaSafe         " bcd in AQ
003764 xxxx 004002235000         lda     idOTly
003765 xxxx 004003755000         sta     idOT
003766 xxxx 004003235052 idO1:   lda     idOT, sc        " get char into A
003767 xxxx 000000115007         cmpa    =0, dl          " a zero?
003770 xxxx 003776601000         tnz     idONZ + 1       " nope
003771 xxxx 003766607000         ttf     idO1            " Yes, a Zero. Go for more
003772 xxxx 000002420400         emCall  2               " output a single 0
003773 xxxx 000001065003         adx5    1,du
003774 xxxx 003702710000         tra     inext
003775 xxxx 004003235052 idONZ:  lda     idOT, sc        " get char into A
003776 xxxx 000002420400         emCall  2
003777 xxxx 003775607000         ttf     idONZ           " Yes, a Zero. Go for more
004000 xxxx 000001065003         adx5    1,du
004001 xxxx 003702710000         tra     inext
004002 xxxx 004030001400 idOTly: tally   ioaSafe, 12, 0
004003 xxxx 000000000000 idOT:   bss     1
004004 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
004005 xxxx 004127702000         tsx2    octwd
004006 xxxx 004030757000         staq    ioaSafe     " bcd in AQ
004007 xxxx 000044773000         lrl     36          " A => Q
004010 xxxx 000006622000         eax2    6
004011 xxxx 000000235007 idoN2:  lda     =0,dl
004012 xxxx 000006737000         lls     6
004013 xxxx 000002420400         emCall  2           " output GE code char to console
004014 xxxx 777777622012         eax2    -1, 2
004015 xxxx 004011601000         tnz     idoN2
004016 xxxx 004030237000         ldaq    ioaSafe
004017 xxxx 000000235007         lda     =0, dl      " 0 => A
004020 xxxx 000006622000         eax2    6
004021 xxxx 000000235007 idoN3:  lda     =0, dl
004022 xxxx 000006737000         lls     6
004023 xxxx 000002420400         emCall  2
004024 xxxx 777777622012         eax2    -1, 2
004025 xxxx 004021601000         tnz     idoN3
004026 xxxx 000001065003         adx5    1,du
004027 xxxx 003702710000         tra     inext
004030 xxxx 000000000000 ioaSafe:  bss 2
004032 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
004033 xxxx 004062701000         call    toDec
004034 xxxx 004036710000 
004035 xxxx 000000000000 
004036 xxxx 000001065003         adx5    1,du
004037 xxxx 003702710000         tra     inext
004040 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
004041 xxxx 000004622000         eax2    4
004042 xxxx 000000235007 idoA2:  lda     =0,dl
004043 xxxx 000011737000         lls     9
004044 xxxx 000001420400         emCall  1
004045 xxxx 777777622012         eax2    -1, 2
004046 xxxx 004042601000         tnz     idoA2
004047 xxxx 000001065003         adx5    1,du        " into next argument
004050 xxxx 003702710000         tra     inext
004051 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
004052 xxxx 000006622000         eax2    6
004053 xxxx 000000235007 idoG2:  lda     =0,dl
004054 xxxx 000006737000         lls     6
004055 xxxx 000002420400         emCall  2
004056 xxxx 777777622012         eax2    -1, 2
004057 xxxx 004053601000         tnz     idoG2
004060 xxxx 000001065003         adx5    1,du        " into next argument
004061 xxxx 003702710000         tra     inext
004062 xxxx 004065710000 toDec:  save    "2,3,4,5,6,7
004063 xxxx 000000000000 
004064 xxxx 004063630000 
004065 xxxx 004063754000 
004066 xxxx 004063741000 
004067 xxxx 004454116000         cmpq    =-34359738368       " the weird one?
004070 xxxx 004074601000         tnz     toDec2
004071 xxxx 004126235000         lda     decMTly             " just print it and be done with it
004072 xxxx 004122755000         sta     decTly
004073 xxxx 004112710000         tra     toDec1
004074 xxxx 004116756000 toDec2: stq     decNo
004075 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
004076 xxxx 004100605000         tpl     toDec0      " No
004077 xxxx 004116336000         lcq     decNo       " -decNo => Q
004100 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
004101 xxxx 000060075007         ada     =o060,dl    " add ascii '0' (=1A0) to A
004102 xxxx 004122755045         sta     decTly, scr " start writing characters backwards
004103 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
004104 xxxx 004100601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
004105 xxxx 004116235000         lda     decNo
004106 xxxx 000000115007         cmpa    =0,dl
004107 xxxx 004112605000         tpl     toDec1
004110 xxxx 000055235007         lda     =o055,dl    " (-) => A
004111 xxxx 004122755045         sta     decTly, scr " write (-) sign
004112 xxxx 004122235052 toDec1: lda     decTly, sc
004113 xxxx 000001420400         emCall  1
004114 xxxx 004112607000         ttf     toDec1
004115 xxxx 004064710000         return  toDec
004116 xxxx 000000000000 decNo:  dec     0
004117 xxxx 000000000000 decBuf: bss     3
004122 xxxx 004121000040 decTly: tallyb  decBuf+2, , 0
004123 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35
004124 xxxx 065071067063 
004125 xxxx 070063066070 
004126 xxxx 004123001440 decMTly:tallyb  decMM, 12, 0
004127 xxxx 004144742000 octwd:	stx2	octx2
004130 xxxx 000006622000 	eax2	6
004131 xxxx 000003736000 	qls     3
004132 xxxx 000003777000 	llr     3
004133 xxxx 777777622012 	eax2	-1,2
004134 xxxx 004131605400 	tpnz	*-3
004135 xxxx 004166756000 	stq     octtemp
004136 xxxx 000006622000 	eax2	6
004137 xxxx 000003736000 	qls     3
004140 xxxx 000003777000 	llr     3
004141 xxxx 777777622012 	eax2	-1,2
004142 xxxx 004137605400 	tpnz	*-3
004143 xxxx 004166235000 	lda     octtemp
004144 xxxx 004144622000 octx2:	eax2	*
004145 xxxx 000000710012 	tra     0,2
004146 xxxx 004164742000 hexwd:	stx2	hexx2
004147 xxxx 000044773000 	lrl     36          "shift to Q
004150 xxxx 000006622000 	eax2	6           "	process 6 characters
004151 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
004152 xxxx 000004737000 	lls     4           "shift in 4 bits
004153 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
004154 xxxx 004156604400 	tmoz	*+2
004155 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
004156 xxxx 000006773000 	lrl     6
004157 xxxx 004166235000 	lda     octtemp		"get temporary
004160 xxxx 000006737000 	lls     6           "insert new character
004161 xxxx 004166755000 	sta     octtemp		"and store
004162 xxxx 777777622012 	eax2	-1,2		"decrement index
004163 xxxx 004151605400 	tpnz	hexloop
004164 xxxx 004164622000 hexx2:	eax2	*
004165 xxxx 000000710012 	tra     0,2		"return to caller
004166 xxxx 000000000000 octtemp:	oct	0
004167 xxxx 000000633000 rd_clock:	rccl                " read the clock
004170 xxxx 004312757000 cv_clock:	staq	rdctime     " save clock reading
004171 xxxx 004263742000 	stx2	datx2               " save XR's
004172 xxxx 004264740000 	stx0	datx2+1             " ..
004173 xxxx 000034235007 	lda     28,dl               " Initialize montab
004174 xxxx 004315755000 	sta     montab+1			" to prime Feb
004175 xxxx 004312237000 	ldaq	rdctime             " Get clock reading
004176 xxxx 000001737000 	lls     1                   " Set for dvf
004177 xxxx 004455507000 	dvf     =1000000			" Get seconds since 1900.
004200 xxxx 000044777000 	llr     36                  " Into Q.
004201 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
004202 xxxx 004276755000 	sta     rdclock.sec         " Save for inspection.
004203 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
004204 xxxx 004275755000 	sta     rdclock.min
004205 xxxx 000006627000 	eax7	6
004206 xxxx 004266702000 	tsx2	datecv              " Convert the minutes.
004207 xxxx 004306176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
004210 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
004211 xxxx 004305756000 	stq     rdclock.day_of_century	" save for  later.
004212 xxxx 004274755000 	sta     rdclock.hr          " Hours since daybreak.
004213 xxxx 004266702000 	tsx2	datecv              " Convert the hours
004214 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
004215 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
004216 xxxx 004220604000 	tmi     *+2                 " no
004217 xxxx 004315054000 	aos     montab+1			" allow for feb 29
004220 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
004221 xxxx 003555036007 	adlq	1901,dl
004222 xxxx 004304756000 	stq     rdclock.year		" Save
004223 xxxx 000044777000 	llr     36
004224 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
004225 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
004226 xxxx 004231601000 	tnz     *+3                 " No.
004227 xxxx 000001176007 	sbq     1,dl                " Adjust year and
004230 xxxx 000555235007 	lda     365,dl              " day numbers.
004231 xxxx 004304056000 	asq     rdclock.year		" Add in years complete.
004232 xxxx 000000626000 	eax6	0                   " search for correct month
004233 xxxx 030220520201 	rpt     12,1,tmi			" ..
004234 xxxx 004314175016 	sba     montab,6			" subtract off days for each month
004235 xxxx 777777075016 	ada     -1,6                " put back last entry
004236 xxxx 000001075007 	ada     1,dl                " plus one more
004237 xxxx 004301755000 	sta     rdclock.day_of_month	" Day of month
004240 xxxx 004266702000 	tsx2	datecv              " convert day
004241 xxxx 000000635016 	eaa     0,6
004242 xxxx 004314135003 	sbla	montab,du			" get index into month table
004243 xxxx 000022771000 	arl     18                  "..
004244 xxxx 004277755000 	sta     rdclock.month		" Save month number
004245 xxxx 004341236005 	ldq     rdc.months-1,al		" Get name of month.
004246 xxxx 004300756000 	stq     rdclock.month_name
004247 xxxx 004266702000 	tsx2	datecv              " convert month
004250 xxxx 000000024400 	mvne	(),(),()			" edit the date and time
004251 xxxx 004311070010 	desc4ns	date,8
004252 xxxx 004330000014 	desc9a	datedit,12
004253 xxxx 004312020014 	desc6a	rdctime,12
004254 xxxx 004305236000 	ldq     rdclock.day_of_century
004255 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
004256 xxxx 000007506007 	div     7,dl
004257 xxxx 004302755000 	sta     rdclock.day_of_week
004260 xxxx 004333236005 	ldq     rdc.days,al         " Get name of day.
004261 xxxx 004303756000 	stq     rdclock.day_name
004262 xxxx 004312237000 	ldaq	rdctime             " get conversion in AQ
004263 xxxx 004263622000 datx2:	eax2	*			" restore XR's
004264 xxxx 004264620000 	eax0    *               " ..
004265 xxxx 000000710012 	tra     0,2             " return to caller
004266 xxxx 004310755000 datecv:	sta	datenum			" save number
004267 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
004270 xxxx 004310000004 	desc9a	datenum,4
004271 xxxx 004311070002 	desc4ns	date,2
004272 xxxx 777776627017 	eax7	-2,7			" move offset index
004273 xxxx 000000710012 	tra     0,2             " and return
004274 xxxx 000000000000 	bss	,1
004275 xxxx 000000000000 	bss	,1
004276 xxxx 000000000000 	bss	,1
004277 xxxx 000000000000 	bss	,1
004300 xxxx 000000000000 	bss	,1
004301 xxxx 000000000000 	bss	,1
004302 xxxx 000000000000 	bss	,1
004303 xxxx 000000000000 	bss	,1
004304 xxxx 000000000000 	bss	,1
004305 xxxx 000000000000 	bss	,1
004306 xxxx 000000000007     dec     7   "8
004307 xxxx 160163164040     aci     'pst '
004310 xxxx 000000000000 datenum:	bss	,1
004311 xxxx 000000000000 date:	bss	,1
004312 xxxx 000000000000 rdctime:	bss	,2
004314 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
004315 xxxx 000000000034 
004316 xxxx 000000000037 
004317 xxxx 000000000036 
004320 xxxx 000000000037 
004321 xxxx 000000000036 
004322 xxxx 000000000037 
004323 xxxx 000000000037 
004324 xxxx 000000000036 
004325 xxxx 000000000037 
004326 xxxx 000000000036 
004327 xxxx 000000000037 
004330 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
004331 xxxx 061322021322 
004332 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
004333 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat '
004334 xxxx 155157156040 
004335 xxxx 164165145040 
004336 xxxx 167145144040 
004337 xxxx 164150165162 
004340 xxxx 146162151040 
004341 xxxx 163141164040 
004342 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec '
004343 xxxx 146145142040 
004344 xxxx 155141162040 
004345 xxxx 141160162040 
004346 xxxx 155141171040 
004347 xxxx 152165156040 
004350 xxxx 152165154040 
004351 xxxx 141165147040 
004352 xxxx 163145160164 
004353 xxxx 157143164040 
004354 xxxx 156157166040 
004355 xxxx 144145143040 
004356 xxxx 700046272120 Entry Sequence for main_ (000052)
004357 xxxx 000052710000 
004360 xxxx 700046272120 Entry Sequence for FPtests_ (000062)
004361 xxxx 000062710000 
004362 xxxx 000000000004 =v
004363 xxxx 000000000000 
004364 xxxx 772631463146 single-precision literal (=0.100000)
004365 xxxx 774631463146 single-precision literal (=0.200000)
004366 xxxx 776777777363 single-precision literal (=0.499999)
004367 xxxx 000400000000 single-precision literal (=0.500000)
004370 xxxx 000400000206 single-precision literal (=0.500001)
004371 xxxx 000411255321 single-precision literal (=0.518240)
004372 xxxx 000546314631 single-precision literal (=0.700000)
004373 xxxx 000721727024 single-precision literal (=0.910000)
004374 xxxx 000777171243 single-precision literal (=0.998510)
004375 xxxx 000777777776 single-precision literal (=1.000000)
004376 xxxx 002400000000 single-precision literal (=1.000000)
004400 xxxx 004622077325 double-precision literal (=3.141593)
004401 xxxx 042055060301 
004402 xxxx 002400000000 single-precision literal (=1.000000)
004403 xxxx 002400000000 single-precision literal (=1.000000)
004404 xxxx 012440000000 single-precision literal (=18.000000)
004405 xxxx 014460000000 single-precision literal (=38.000000)
004406 xxxx 014720000000 single-precision literal (=58.000000)
004407 xxxx 016470000000 single-precision literal (=78.000000)
004410 xxxx 016755645706 single-precision literal (=123.456000)
004411 xxxx 024612431704 single-precision literal (=789.101112)
004412 xxxx 002400000000 single-precision literal (=1.000000)
004413 xxxx 002474030177 single-precision literal (=1.234560)
004414 xxxx 007135170060 single-precision literal (=-6.543210)
004415 xxxx 014420000000 single-precision literal (=34.000000)
004416 xxxx 015360000000 single-precision literal (=-34.000000)
004417 xxxx 014740000000 single-precision literal (=60.000000)
004420 xxxx 014550000000 single-precision literal (=45.000000)
004421 xxxx 010612702436 single-precision literal (=12.340000)
004422 xxxx 015040000000 single-precision literal (=-60.000000)
004423 xxxx 015230000000 single-precision literal (=-45.000000)
004424 xxxx 011165075341 single-precision literal (=-12.340000)
004425 xxxx 014740000000 single-precision literal (=60.000000)
004426 xxxx 014550000000 single-precision literal (=45.000000)
004427 xxxx 010612702436 single-precision literal (=12.340000)
004430 xxxx 015040000000 single-precision literal (=-60.000000)
004431 xxxx 015230000000 single-precision literal (=-45.000000)
004432 xxxx 011165075341 single-precision literal (=-12.340000)
004433 xxxx 014740000000 single-precision literal (=60.000000)
004434 xxxx 014550000000 single-precision literal (=45.000000)
004435 xxxx 010612702436 single-precision literal (=12.340000)
004436 xxxx 015040000000 single-precision literal (=-60.000000)
004437 xxxx 015230000000 single-precision literal (=-45.000000)
004440 xxxx 011165075341 single-precision literal (=-12.340000)
004441 xxxx 004622077325 single-precision literal (=3.141593)
004442 xxxx 004400000000 single-precision literal (=2.000000)
004443 xxxx 004622077325 single-precision literal (=3.141593)
004444 xxxx 004622077325 single-precision literal (=3.141593)
004445 xxxx 004622077325 single-precision literal (=3.141593)
004446 xxxx 004622077325 single-precision literal (=3.141593)
004447 xxxx 004533741242 single-precision literal (=2.718282)
004450 xxxx 004533741242 single-precision literal (=2.718282)
004451 xxxx 000000000000 decimal literal (=0)
004452 xxxx 000000000012 octal literal (=o12)
004453 xxxx 000000000015 octal literal (=o15)
004454 xxxx 400000000000 decimal literal (=-34359738368)
004455 xxxx 000003641100 decimal literal (=1000000)
004456 xxxx 000000000043 link UtilsA$Aone
004457 xxxx 000000000000 
004460 xxxx 000000000043 link UtilsB$Bone
004461 xxxx 000000000000 
004462 xxxx 000000000043 link UtilsB$Btwo
004463 xxxx 000000000000 
004464 xxxx 000000000043 link UtilsB$Bthree
004465 xxxx 000000000000 
