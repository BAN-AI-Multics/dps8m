"
" print a <CR><LF> to console ...
"
"
" call  crlf
"

crlf:	save
        lda     =012
        emCall  1
        lda     =015
        emcall      1
        return  crlf

"	call ioa (msg, A1, A2, A3, ... An)   to print messages
"	^w	 full word octal xxxxxx xxxxxx
"	^o	 zero suppressed octal ...x
"	^n	 octal with no spaces inserted xxxxxxxxxxxx
"	^d	 decimal dddddd
"	^a	 ASCII (4 char)
"	^g	 GE code (6 char)
ioa:    save    2, 4, 5, 6

ioa1:   eax4    2, 1*   " 1st arg is control string
        eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
        eax6    0, x5

        lda     041, dl " make a blank tallyb word .....
        sta     i29

    	lda     0, x4   " get 1st data word into A

        ars     27      " determine word count
    	als     6       " count to upper word of tally
    	orsa    i29

    	eax6    0, x4   " address of string into X6
    	stx6    i29     " address to upper word of tally

    	" make a tallyb word with this address, length, offset = 1
    	" address / tally / byte type / offset
inext:  lda     i29, sc
        cmpa    =o000136,dl		" ^
        tze     iernot      " if so, go process it
out1:  	emCall  1
    	ttf     inext
        
        return  ioa
        
i29:	tallyb  0, 0, 1

iernot: lda     i29, sc         " get next char ...
        cmpa    =o000136,dl     " is it another "^"?
        tze     i21             " No, just print it ...
        cmpa    =o000167,dl     " is it a "w"?
        tze     idoW            " do full word octal
        cmpa    =o000157,dl     " is it an "o"?
        tze     idoO            " print zero suppressed octal
        cmpa    =o000156,dl     " is it a "n"?
        tze     idoN            " octal w/ no spaces inserted
        cmpa    =o000144,dl     " is it a "d"?
        tze     idoD            " decimal
        cmpa    =o000141,dl     " is it a ^a?
        tze     idoA            " 4 char ascii display
        cmpa    =o000147,dl     " is it a ^g?
        tze     idoG            " 6 char GE BCD display
        
        tra     out1        " unknown just print it....
    
i21:    emCall  1           " output A to console
        tra     inext

idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
        "emCall  3
        
        tsx2    octwd
        staq    ioaSafe     " bcd in AQ

        lrl     36          " A => Q

        eax2    6
idoW2:  lda     =0, dl
        lls     6
        emCall  2           " output GE code char to console
        eax2    -1, 2
        tnz     idoW2

        ldaq    ioaSafe
        lda     =0, dl      " 0 => A

        "lda     =1h ,dl     " bcd ' ' => A
        lda     =020 ,dl     " bcd ' ' => A
        emcall  2

        eax2    6
idoW3:  lda     =0,dl
        lls     6
        emCall  2
        eax2    -1, 2
        tnz     idoW3

        adx5    1,du
        tra     inext
        
idoO:   lda     0, 5*           " ^o - Zero-suppressed octal

        tsx2    octwd
        staq    ioaSafe         " bcd in AQ

        lda     idOTly
        sta     idOT

idO1:   lda     idOT, sc        " get char into A
        cmpa    =0, dl          " a zero?
        tnz     idONZ + 1       " nope
        ttf     idO1            " Yes, a Zero. Go for more
        
        emCall  2               " output a single 0
        adx5    1,du
        tra     inext

idONZ:  lda     idOT, sc        " get char into A
        emCall  2
        ttf     idONZ           " Yes, a Zero. Go for more
 
        adx5    1,du
        tra     inext


idOTly: tally   ioaSafe, 12, 0
idOT:   bss     1

idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
        "emCall  3
        
        " print A in octal .....
        tsx2    octwd
        staq    ioaSafe     " bcd in AQ

        lrl     36          " A => Q

        eax2    6
idoN2:  lda     =0,dl
        lls     6
        emCall  2           " output GE code char to console
        eax2    -1, 2
        tnz     idoN2

        ldaq    ioaSafe
        lda     =0, dl      " 0 => A

        eax2    6
idoN3:  lda     =0, dl
        lls     6
        emCall  2
        eax2    -1, 2
        tnz     idoN3

        adx5    1,du
        tra     inext

        even
ioaSafe:  bss 2

idoD:   ldq     0, 5*       " ^d
        call    toDec
        adx5    1,du
        tra     inext

idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)

        eax2    4
idoA2:  lda     =0,dl
        lls     9
        emCall  1
        eax2    -1, 2
        tnz     idoA2

        adx5    1,du        " into next argument
        tra     inext

idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)

        eax2    6
idoG2:  lda     =0,dl
        lls     6
        emCall  2
        eax2    -1, 2
        tnz     idoG2

        adx5    1,du        " into next argument
        tra     inext

"
" display decimal value of Q on console ...
"

toDec:  save    "2,3,4,5,6,7
        cmpq    =-34359738368       " the weird one?
        tnz     toDec2

        lda     decMTly             " just print it and be done with it
        sta     decTly
        tra     toDec1
        
toDec2: stq     decNo
        cmpq    =0,dl       " Q < 0?
        tpl     toDec0      " No
        lcq     decNo       " -decNo => Q
toDec0: div     =10,dl      " divide Q by 10, remainder in A
        ada     =o060,dl    " add ascii '0' (=1A0) to A
        sta     decTly, scr " start writing characters backwards
        adq     =0,dl       " set flags to test if Q == 0
        tnz     toDec0      " if Q == 0 then we're essentially done with conversion
        
        lda     decNo
        cmpa    =0,dl
        tpl     toDec1
        
        lda     =o055,dl    " (-) => A
        sta     decTly, scr " write (-) sign

toDec1: lda     decTly, sc
        emCall  1
        ttf     toDec1
        
        return  toDec
decNo:  dec     0
decBuf: bss     3
decTly: tallyb  decBuf+2, , 0
decMM:  aci     "-34359738368"  " -2^^35
decMTly:tallyb  decMM, 12, 0

        include     octwd.incl.alm

