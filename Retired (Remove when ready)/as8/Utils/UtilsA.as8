    
" Begin include file ...... UtilsA.as8

" Begin include file ...... error.incl.alm
" Last modified 5/3/77 by Noel I. Morris
" Modified November 1981 by C. Hornig to not use IOM rel mode.
" Modified February 2013 by H. Reed to work with as8 under dps8/simh simulator

        null name        Utils
        null segdef      A0, A1, rd_clockA, ioa, typeA

        dec	1.414213562373095048801d+00     

        tra     A0
        tra     A1
        tra     ioa
        tra     rd_clockA
        tra     typeA

        dec     1.886591d-8, 8.418858142948452884d-38, 5.0d-10, 90.0d0

        dec     22.5b5, .3012056b-1, .301205b-1, 1.2E-1B32
        dec     1B27, -1B17, 8e9b35, 64e8b35, 512e7b35, 4096e6b35
        dec     1.95d1b37, 1.2D1B68

        zero    =1.95d1b37, =1.2D1B68
        lda     =3.14159, du
        
        lda     =O-3, dl
        lda     =O-3
        
        call    rd_clockA (=1, =4, =8) " need to handle >1 literals/line creation before this will work. 

        zero    =123, =o456
        zero    =aQwEr,=hqwerty
        
        zero    =v(18/1,18/2),=v(18/3,18/4)
        zero    =v18/5,18/6
        zero    ,=v18/7,18/8
        
        mod     10
        dvf     =1000000 
        lda     =o12345
        
        lda     =1a1,du
        lda     =2a12,dl
        
        lda     =1a1
        lda     =2a12
        lda     =3a123
        lda     =4a1234

        ldq     =1h1,du
        ldq     =2h12,dl
        ldq     =3h123,du

        ldq     =1h1
        ldq     =2h12
        ldq     =3h123
        ldq     =4h1234
        ldq     =5h12345
        ldq     =6h123456

        lda     =1a,,dl     " Ha!
        lda     =7hTHE END
        ldq     =1000000
        
        vfd     o9/123, 9o/321
        "vfd     9a/a, a9/b, 24h/abcd, h24/1235
        vfd     9a/a, a9/b, 27h/abc, h27/123
        
        
        cmpaq	=v18/0,18/2,36/0
        cmpaq	=v36/-1,o36/400000000000
        ldq     =v18/-1,18/2
        ldaq	=vo36/777666333222,o36/444000111555
        stba    *+1,64

        arg     =v(3/-1,6/-(1+1),9/-(4-1),18/-4)
        ldq     =v(3/1,6/(1+1),9/(4-1),18/4),*1


        lda     =2b25, DU           " 004000 ......
        lda     =5b17               " 000005 000000
        "ldq     =22.5b5             " 264000 000000
z1:     lde     =7b25,du            " 016000 4110 03
z2:     ufa     =2b25,du            " 004000 4350 03
z3:     ufa     =18b25,du           " 044000 4350 03
        adla	=1b32,du            " 000010 0350 03
        adla	=63b23,dl           " 770000 0350 07
        fld     =1b24,dl            " 004000 4310 07
        lde     =26b25,du           " 064000 4112 03
        lde     =72b25,du           " 220000 4110 03
        lde     =71b25,du           " 216000 4110 03
        ufa     =18b25,du           " 044000 4350 03
        lde     =61b25,du           " 172000 4110 03
        lda		=5b24,du            " 024000 2350 03
        lda		=65b24,du           " 404000 2350 03     	=o404000
        lda		=33b24,du           " 204000 2350 03     	=o204000
        lda		=17b24,du           " 104000 2350 03     	=o104000
        lda		=9b24,du            " 044000 2350 03
        lda		=5b28,du            " 001200 2350 03     	=o001200
        lda		=3b28,du            " 000600 2350 03
        
        call    rd_clockA (z1,z2,z3)
s1:     save
s2:     save    1,2,3,4,5,6,7

        return  s1
        return  s2,4

        oct     10, 11, 12, 13
        dec     -1,-2,-3
        
         BTD     (),()
         btd     (),()
         SZTR     (),(),bool(3),enablefault 
         dec    0,1,2,3,4,5,6,7

        lda     =3.1415926535897932
        lda     =3.1415926535897932d0
        ldq     =2.718281828
        ldq     =2.718281828D0

        dec     3.1415926535897932, 3.1415926535897932d0
        dec     2.718281828, 2.718281828D0

        epp3	=its(-1,1),*	"006404  aa   077777 000043
                                "006405  aa   000001 000000

        include PlayA.as8

A0:     spri2   save2
        rtcd    save2

            even
save2:      bss     ,2
save2p:     bss     ,2
save3p:     bss     ,2


A1:     spri2   save2
        rtcd    save2


rd_clockA:
        spri2   save2
        tsx2	rd_clock
        rtcd    save2


"   tsp2	typeA		to type line on oprs console
"   zero	buf,n
typeA:  spri2   save2
        
        sprp2   save2p      " save a packed version of pr2
        sprp3   save3p      " save a packed version of pr3
        lprp3   save2p      " get PR2's segment number into PR3

        sreg    saveX       " save registers
        
        lda     pr2|0       " get descriptor ADDR=au, CNT=al
        
        eawp3   0,au        " put address into PR3's WORDNO
        ana     =o77,dl     " only 6-bits

        stca    typeA2, 3   " save 6-bits of length in descriptor
        stca    typeA3, 3   " save 6-bits of length in descriptor

        eax6    1
        asx6    save2+1		"set correct pr2 return value ere we meet a horrible death

        mlr     (pr),(id)   " grab all characters
typeA2: desc9a  pr3|0,0     " ... from descriptor following the tsp2 call
        arg     typeA3      " ... and save for descriptor

        tsx2    type        " write it out
typeA3: desc9a  typeChr,0

        lreg    saveX       " restore regsiters

        lprp3   save3p      " restore PR3
        lprp2   save2p      " restore PR2

        rtcd    save2

typeChr:bss     ,16

        eight
saveX:  bss     ,8



"	tsp2	snr|ioa     " to print messages
"	acc	'message'
"	nop	a,t "	parameters
"	^w	 full word octal
"	^o	 zero suppressed octal
"	^n	 octal with no spaces inserted
"	^d	 decimal
"	^a	 ASCII (4 char)
"	^g	 GE code (6 char)
"   ^S   arbitrary alphanumeric descriptor
"   ^A   ASCII (9-bit) descriptor
"   ^G   GEBCD (6-bit) descriptor
"   ^4   decimal (4-bit) descroptor

ioa:    spri2   save2       " save pr2 for return to caller
        sprp2   save2p      " save a packed version of pr2
        sprp3   save3p      " save a packed version of pr3
        lprp3   save2p      " get PR2's segment number into PR3
        
        stx3	ioax3       " save X3
        stx6	ioax6       " save X6

        lda     pr2|0       " get character count from string
        arl     27          " ..
        eax7    0,al		" length of string in X7
        stx7    erlen		" save length
        eax6    1           " X6 is offset into input string

        arl     2           " divide character count by 4
        eax3    1,al		" round

"

ioaloop:cmpx6	erlen		"is input string exhausted?
        tpnz    ioaend      "if so, exit

        mlr     (pr,x6),()  " grab one character
        desc9a  pr2|0,1
        desc9a	errarg,4

        eax6    1,6         "step offset over character

        lda     errarg      "pick up character
        cmpa    =1a^,du		"is it "^"?
        tze     ioa2		"if so, go process it

        tsx2    type
        zero    errarg,1    " write char to console

        tra     ioaloop     " and loop

ioa2:	scm     (),(pr,x6)  "search table of keys
        desc9a	ioakey,11
        desc9a  pr2|0,1
        arg     ertally
        
        ttn     ioaloop		" tra if not legal key

        eax6    1,6         " step over key

        lda     pr2|0,3     " pick up argument pointer
        eawp3   0,au        " put address into PR3's WORDNO
        lda     pr3|0       " ****** THIS INSTRUCTION NO LONGER GETS MODIFIED ******
        sta     errarg      " and save for conversion
        eax3    1,3         " step to next parameter
        ldq     ertally		" get character key index
        tra     ioatbl,ql*  " dispatch on key

ioa_pc: eax3    -1,3        " no parameter.
        tsx2    type        " just print a single ^
        zero    =1a^, 1
        tra     ioaloop
        

ioa_4:  lda     errarg      " desc4a descriptor is in errarg. Adjust PR3 to point to the strings contents
        eawp3   0,au        " put address into PR3's WORDNO
        ana     =o77,dl     " only 6-bit
        "eax4    0,al        " put count into X4
        stca    ioa_4d, 3   " save length in desc4a output descriptor

        mvt     (pr,rl),()  " copy 4-bit decimal and translate to ASCII
        desc4a  pr3|0,al
        desc9a	errtemp,64
        arg     decastab


        tsx2    type
ioa_4d: desc9a  errtemp,64

        tra     ioaloop

ioa_A:  lda     errarg              " desc9a descriptor is in errarg. Adjust PR3 to point to the strings contents
        eawp3   0,au                " put address into PR3's WORDNO
        ana     =o77,dl             " only 6-bits
        "eax4    0,al                " put count into X4
        mlr     (pr,rl),(),fill(040)" copy ASCII string
        desc9a  pr3|0,al
        desc9a	errtemp,64
        
ioastrip:	tsx2	stripa              " strip trailing blanks
        desc9a	errtemp,64
        tra     ioatrim                 " and trim leading blanks

ioa_G:	lda     errarg                  " desc6a descriptor is in errarg. Adjust PR3 to point to the strings contents
        eawp3   0,au                    " put address into PR3's WORDNO
        ana     =o77,dl                 " only 12-bits
        "eax4    0,al                    " put count into X4

        mvt     (pr,rl),(),fill(020)    " copy GEBCD and translate to ASCII
        desc6a  pr3|0,al
        desc9a	errtemp,64
        arg     geastabu

        tra     ioastrip	"join common code

ioa_a:  tsx2    type
        zero    errarg,4    " write 4 chars to console

        tra     ioaloop

ioa_g:  mvt     (),()
        desc6a	errarg,6
        desc9a	errtemp,6
        arg     geastabu

        tsx2    type
        zero    errtemp, 6

        tra     ioaloop

ioa_d:	btd     (),()       " convert decimal number
        desc9a	errarg,4    " 36-bit integer
        desc4ls	errnum,12   " max 12-digits (incl sign)

        mvne	(),(),()	" edit the output
        desc4ls	errnum,12
        desc9a	eredit_d,9
        desc9a	errtemp,12  " max 12-digits

        lda     =12,dl      "length of output is 12 characters
        tra     ioatrim     "trim leading blanks from output

ioa_n:	eax7    (eredit_n-eredit_o)*4  "set offset for conversion with no blank
        tra     ioa_ow		"join common code

ioa_o:	eax7    1           "set offset of 1 to skip ses micro-op
        tra     ioa_ow		"common code for "^o" and "^w"

ioa_S:  ldq     errarg      " get string descriptor
        anq     =o060000,dl " mask off everything but TA
        tze     ioa_A       " 00 => 9-bit
        cmpq    =o020000,dl
        tze     ioa_G       " 01 => 6-bit
        cmpq    =o040000,dl
        tze     ioa_4       " 10 => 4-bit
        
        tra     ioaloop

ioa_w:	eax7    0           "offset of 0 to turn off zero suppression

ioa_ow:	tsx2	octwd		"convert octal
        staq	errnum		"save word

        mve     (),(x7),()  "insert a blank in the middle
        desc6a	errnum,12
        desc9a	eredit_o,7
        desc6a	errtempo,13

        mvt     (),()
        desc6a	errtempo,13
        desc9a	errtemp,13
        arg     geastab

        lda     13,dl		"length is 13
        tra     ioatrim		"copy into output

ioatrim:tct     (rl)        "search for last non-blank
        desc9a	errtemp,al
        arg     abtable
        arg     ertally

        ldq     ertally		"offset of first non-blank in Q
        sba     ertally		"compute # of non-blank characters

ioamov:	als     18          "place in AU
        sta     ertally		"and save
        tze     ioanomov	"skip zero length move

        mlr     (rl,ql),(rl,x5)	"copy the string
        desc9a	errtemp,au
        desc9a	erbuf,au

ioanomov:
        " construct a tally word suitable for type

        lda     ertally     " get count
        alr     18          " shift into al
        stca	ioact,07    " store in erct

        tsx2	type		" print output
ioact:	desc9a	erbuf,*

        tra     ioaloop		" and loop

ioaend: asx3	save2+1		"set correct X3 return value 
ioax6:	eax6	*           "restore X6
ioax3:	eax3	*           "restore X3
        lprp3   save3p
        lprp2   save2p
        rtcd    save2       " and return

ioakey: aci	"AGwondagS4^"

ioatbl: tra     ioa_A
        tra     ioa_G
        tra     ioa_w
        tra     ioa_o
        tra     ioa_n
        tra     ioa_d
        tra     ioa_a
        tra     ioa_g
        tra     ioa_S
        tra     ioa_4
        tra     ioa_pc
        
ioatmp:	bss	,16


"   tsx2	type		to type line on oprs console
"   zero	buf,n

type:   stx2	typex2          "here to write tty
        ldq     0,2             "get address and length

        stcq	tlydesc,070      "place address into tally descriptor

        anq     =o7777,dl       "mask the length
        qls     6
        orq     =o40,dl
        stcq	tlydesc,07      "and place in tally word

type2:  lda     tlydesc, sc
        emcall  1
        ttf     type2

typex2:	eax2	*
        tra     1,2

tally:  vfd 18/0, 12/0, 1/1, 5/0        " addr/count

tallySC:    bss ,1
tlydesc:    bss ,1


eredit_d:	vfd	9/lte+1,o9/40,9/lte+3,o9/40,9/lte+4,o9/55,9/mfls+10,9/enf
            vfd	9/mvc+1
eredit_o:	vfd	9/ses+if0,9/lte+1,o9/20,9/mvzb+6,9/insm+1,9/mvzb+5,9/mvc+1,9/ses+if0
eredit_n:	vfd	9/lte+1,o9/20,9/insm+1,9/mvzb+11,9/mvc+1,9/ses+if0,9/ses+if0


erbuf:      bss	,16
            even
errnum:     bss	,2
errtemp:	bss	,16
errtempo:	bss	,16
ertally:	bss	,1
errarg:     bss	,1
errin:      desc9a	*,1
erlen:      bss	,1


"	lda	ascii code
"	tsx2	asge	to convert to GE code
"	sta	GE code

asge:	ana     =o177177177177	"make it  legit ASCII
        sta     wd9             "setup to loop through word

        mvt     (),(),fill(040)	"move and translate
        desc9a	wd9,4
        desc6a	wd6,6
        arg     asgetab

        lda     wd6             "get ge word
        tra     0,2

wd4:    oct     0
wd6:	oct     0
        even
wd9:	oct     0, 0


asgetab:	
    oct	020020020020,020020020020   "00
	oct	020020020020,020020020020   "10
	oct	020020020020,020020020020   "20
	oct	020020020020,020020020020   "30
	oct	020057076013,053074032057   "40
	oct	035055054060,073052033061   "50
	oct	000001002003,004005006007   "60
	oct	010011015056,036075016020   "70
	oct	014021022023,024025026027   "100
	oct	030031041042,043044045046   "110
	oct	047050051062,063064065066   "120
	oct	067070071012,020034020072   "130
	oct	037021022023,024025026027   "140
	oct	030031041042,043044045046   "150
	oct	047050051062,063064065066   "160
	oct	067070071020,040020020020   "170


"	lda	 decimal code
"	tsx2	decas	to convert to ASCII
"	sta	ASCII code

decas:	sta	wd4		"setup char tally words

	mvt	(),()
	desc4a	wd4,8
	desc9a	wd9,8
	arg     decastab

	lda     wd9		 "get converted word
	tra     0,2

decastab:	aci	/0123456789+++-++/

    include     alm/bosequ.incl.alm
    include     alm/rdclock.incl.alm

" for rdclock.incl.alm
getconf:	tra     0,2		"if found return

    include     alm/octwd.incl.alm
    include     alm/eis_micro_ops.incl.alm
    include     alm/conv.incl.alm
    include     alm/strip.incl.alm
