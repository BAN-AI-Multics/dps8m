" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" ***********************************************************
" TIME - Calendar Clock Maintenance Routine.
"	last modified 12/11/75 by N. I. Morris to set 4MW SCU.
"	Modified 04/30/80 by Mike Grady to use rdclock package.


"  ******************************************************
"  *                                                    *
"  *                                                    *
"  * Copyright (c) 1972 by Massachusetts Institute of   *
"  * Technology and Honeywell Information Systems, Inc. *
"  *                                                    *
"  *                                                    *
"  ******************************************************

	name	time


	include	bosequ

" 

	stx2	x2

	tsx2	initint		Initialize utilities.
	arg	execint
	tsx2	init_io
	tsx2	ttyinit
	arg	ttyrequest

	lda	=aclok		Find clock config card.
	tsx2	getconf
	tra	not_clok		None, this will not be permitted.

	ldq	com|1,7
	stq	tzone		Store offset from GMT.

ttyrequest:
execint:	null
cycle:	tsx2	readtty		Here after req from tty.
	tra	quit
	tsx2	scan

	lca	=1,dl
	cmpa	arg		If no args,
	tze	cycle		ignore.
	cmpa	arg+1
	tze	one		Handle one or two specially.
	cmpa	arg+2
	tze	two

"				Otherwise must be a date/time like:
"				  mm dd yy hh mm ss
	eax7	6		Pick up date and time.
gloop:	lda	darg-1,7		Use decimal numbers.
	cmpa	=-1
	tnz	*+2		If none specified, use 0.
	lda	=0,dl
	sta	month-1,7		Store in variables.
	eax7	-1,7
	tnz	gloop		Loop for 6 values, mm dd yy hh mm ss.

	tsx2	datecl		Convert to a clock reading

	ldaq	clockr		Shift to clock setting.
	lrl	16
	stq	clocks

	tsx2	cldate		Convert back to be sure.
	tsx2	print		And print it out.
	tra	cycle		

" 

one:	ldq	arg		only 1 arg.
	cmpq	=h     r		If r, read clock.
	tze	read
	cmpq	=h     s		If s, set clock.
	tze	set
	cmpq	=h     q		If q, quit.
	tze	quit

	stq	clocks		Octal clock value supplied (36 bits).
	lda	=0,dl
	lls	16
	staq	clockr

	tsx2	cldate		Convert to date,
	tsx2	print		and print it out.
	tra	cycle

two:	lda	arg		72 bit clock value supplied.
	ldq	arg+1
	staq	clockr
	lrl	16
	stq	clocks

	tsx2	cldate		Convert it to a date,
	tsx2	print		and print it out.
	tra	cycle

"
read:	rscr	4*8		Read clock from low-order memory.
	lrl	0		RSCR doesn't set indicators.
	tze	clockflt

	staq	clockr		Convert to clock setting.
	lrl	16
	stq	clocks

	tsx2	cldate		Convert to date,
	tsx2	print		and print it.
	tra	cycle


set:	rscr	0*8		Read SCU mode register.
	qrl	18		Shift type code into ql.
	anq	=o17,dl		Mask out all but type bits.
	cmpq	2,dl		Is it 4-MW SCU?
	tmi	not_4mw		No, can't set clock in this SCU.

	ldaq	clockr		Get clock reading in AQ.
	sscr	4*8		Set the clock.
	tra	cycle


quit:	szn	com|corearea	If entered from bos, return.
	tze	cycle
	lca	=1,dl
x2:	eax2	*
	tra	mem|1,2

	even
clockr:	oct	0,0		clock reading
clocks:	oct	0

" 

datecl:	ldq	year		Subroutine to convert date to clockvalue.
	sbq	=1,dl
	anq	=o3,dl		Get days within leap year cycle.
	mpy	=365,dl
	lxl7	month
	adq	montable-1,7
	adq	days
	sbq	=1,dl		now have days within leap year cycle

	lda	year
	cana	=o3,dl		if leapyear after feb 29
	tnz	*+4
	cmpx7	=3,du
	tmi	*+2
	adq	=1,dl
	stq	clockr

	ldq	year		get days before leap year cycle
	sbq	=1,dl
	qrl	2
	mpy	=1461,dl		days in 4 years
	adq	clockr
	mpy	=24,dl		go to hr, min,sec
	adq	hr
	adq	tzone
	mpy	=60,dl
	adq	min
	mpy	=60,dl
	adq	sec
	mpy	=1000000		go to usec
	staq	clockr
	tra	0,2

montable:	dec	0,31,59,90,120,151
	dec	181,212,243,273,304,334

tzone:	dec	5
clloc:	oct	0
month:	oct	0
days:	oct	0
year:	oct	0
hr:	oct	0
min:	oct	0
sec:	oct	0
temp:	oct	0

" 

cldate:	stx2	clret		Save return addr.
	ldaq	clockr		Get clock value to be converted.
	tsx2	cv_clock		Use rdclock pkg to convert it.
clret:	tra	*




print:	stx2	pret
	tsx2	erpt		Print line with clock reading, setting, and date.
	acc	'^o,^w ^w ^a, ^d ^a ^d ^d:^d:^d ^a'
	arg	clockr
	arg	clockr+1
	arg	clocks
	arg	rdclock.day_name
	arg	rdclock.day_of_month
	arg	rdclock.month_name
	arg	rdclock.year
	arg	rdclock.hr
	arg	rdclock.min
	arg	rdclock.sec
	arg	rdclock.zone_name
pret:	tra	*


" 

clockflt:	tsx2	erpt
	acc	'error reading clock.'
	tra	cycle

not_clok:
	tsx2	erpt
	acc	'clok card not found in config deck.'
	tra	quit


not_4mw:	tsx2	erpt
	acc	'unable to set clock in a 6000-type scu.'
	tra	cycle

	include	rdclock
	include	eis_micro_ops
	include	bos_tv
	include	bos_common

	end
"
"
"                                          -----------------------------------------------------------
"
"
"
" Historical Background
"
" This edition of the Multics software materials and documentation is provided and donated
" to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
" as a contribution to computer science knowledge.  
" This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
" Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
" and Bull HN Information Systems Inc. to the development of this operating system. 
" Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
" renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
" of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for
" managing computer hardware properly and for executing programs. Many subsequent operating systems
" incorporated Multics principles.
" Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
" as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .
"
"                                          -----------------------------------------------------------
"
" Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
" fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
" and that both the copyright notice and historical background and this permission notice appear in supporting
" documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
" to distribution of the programs without specific prior written permission.
"    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
"    Copyright 2006 by Bull HN Information Systems Inc.
"    Copyright 2006 by Bull SAS
"    All Rights Reserved
"
"