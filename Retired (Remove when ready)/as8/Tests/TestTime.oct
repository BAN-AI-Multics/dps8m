000000 xxxx 000102702000     	tsx2	rd_clock
000001 xxxx 000100757000         staq	TimeODay        "MM/DD HH:MM
000002 xxxx 000304701000         call    ioa(MSGtime, rdclock.day_name, TimeODay, TimeODay+1, rdclock.month_name, rdclock.year)
000003 xxxx 000013710000
000004 xxxx 000000000000
000005 xxxx 000053000000
000006 xxxx 000216000000
000007 xxxx 000100000000
000010 xxxx 000101000000
000011 xxxx 000213000000
000012 xxxx 000217000000
000013 xxxx 000304701000         call    ioa(MSGtime2, rdclock.day_name, rdclock.month_name, rdclock.hr, rdclock.min, rdclock.sec, rdclock.zone_name,  rdclock.year, TimeODay, TimeODay+1)
000014 xxxx 000030710000
000015 xxxx 000000000000
000016 xxxx 000063000000
000017 xxxx 000216000000
000020 xxxx 000213000000
000021 xxxx 000207000000
000022 xxxx 000210000000
000023 xxxx 000211000000
000024 xxxx 000222000000
000025 xxxx 000217000000
000026 xxxx 000100000000
000027 xxxx 000101000000
000030 xxxx 000000616000         dis
000032 xxxx 000000000000 dividend:   dec 0, 123000000
000033 xxxx 000725152300
000034 xxxx 000003641100 divisor:    dec 1000000
000035 xxxx 000000000000 quot:       bss 1
000036 xxxx 017121165157 msgQ:       acc     "Quotient = ^d\r\n" 
000037 xxxx 164151145156  
000040 xxxx 164040075040  
000041 xxxx 136144015012  
000042 xxxx 015104141164 msg1:      acc         "Date: ^g^g \r\n" 
000043 xxxx 145072040136  
000044 xxxx 147136147040  
000045 xxxx 015012040040  
000046 xxxx 021122145163 msg2:      acc         "Result: ^n (^a)\r\n" 
000047 xxxx 165154164072  
000050 xxxx 040136156040  
000051 xxxx 050136141051  
000052 xxxx 015012040040  
000053 xxxx 034124150145 MSGtime:    acc     "The date is: ^a ^g^g ^a ^d\r\n" 
000054 xxxx 040144141164  
000055 xxxx 145040151163  
000056 xxxx 072040136141  
000057 xxxx 040136147136  
000060 xxxx 147040136141  
000061 xxxx 040136144015  
000062 xxxx 012040040040  
000063 xxxx 052124150145 MSGtime2:   acc     "The date is: ^a ^a ^d:^d:^d ^a ^d (^g^g)\r\n" 
000064 xxxx 040144141164  
000065 xxxx 145040151163  
000066 xxxx 072040136141  
000067 xxxx 040136141040  
000070 xxxx 136144072136  
000071 xxxx 144072136144  
000072 xxxx 040136141040  
000073 xxxx 136144040050  
000074 xxxx 136147136147  
000075 xxxx 051015012040  
000076 xxxx 000000000000 Date:   bss     2
000100 xxxx 000000000000 TimeODay:   bss     2
000102 xxxx 000000633000 rd_clock:	rccl                "read the clock
000103 xxxx 000226757000 cv_clock:	staq	rdctime     " save clock reading
000104 xxxx 000176742000 	stx2	datx2               " save XR's
000105 xxxx 000177740000 	stx0	datx2+1             " ..
000106 xxxx 000034235007 	lda     28,dl               " Initialize montab
000107 xxxx 000231755000 	sta     montab+1			" to prime Feb
000110 xxxx 000226237000 	ldaq	rdctime             " Get clock reading
000111 xxxx 000001737000 	lls     1                   " Set for dvf
000112 xxxx 000621507000 	dvf     =1000000			" Get seconds since 1900.
000113 xxxx 000044777000 	llr     36                  " Into Q.
000114 xxxx 000074506007 	div     60,dl               " Seconds since min to A, mins to Q.
000115 xxxx 000211755000 	sta     rdclock.sec         " Save for inspection.
000116 xxxx 000074506007 	div     60,dl               " Min since hr to A, hrs to Q.
000117 xxxx 000210755000 	sta     rdclock.min
000120 xxxx 000006627000 	eax7	6
000121 xxxx 000201702000 	tsx2	datecv              " Convert the minutes.
000122 xxxx 000221176000 	sbq     rdclock.zone_temp	" Adjust for GMT.
000123 xxxx 000030506007 	div     24,dl               " Days since 1900 in q.
000124 xxxx 000220756000 	stq     rdclock.day_of_century	" save for  later.
000125 xxxx 000207755000 	sta     rdclock.hr          " Hours since daybreak.
000126 xxxx 000201702000 	tsx2	datecv              " Convert the hours
000127 xxxx 002665506007 	div     365*4+1,dl          " get leap year cycle
000130 xxxx 002110115007 	cmpa	365*3+1,dl          " if in last year of cycle (the leap year)
000131 xxxx 000133604000 	tmi     *+2                 " no
000132 xxxx 000231054000 	aos     montab+1			" allow for feb 29
000133 xxxx 000002736000 	qls     2                   " 4*# leap year cycles
000134 xxxx 003555036007 	adlq	1901,dl
000135 xxxx 000217756000 	stq     rdclock.year		" Save
000136 xxxx 000044777000 	llr     36
000137 xxxx 000555506007 	div     365,dl              " Years complete since l.y.c. =>Q
000140 xxxx 000004116007 	cmpq	4,dl                " Dec 31st of leap year?
000141 xxxx 000144601000 	tnz     *+3                 " No.
000142 xxxx 000001176007 	sbq     1,dl                " Adjust year and
000143 xxxx 000555235007 	lda     365,dl              " day numbers.
000144 xxxx 000217056000 	asq     rdclock.year		" Add in years complete.
000145 xxxx 000000626000 	eax6	0                   " search for correct month
000146 xxxx 030220520201 	rpt     12,1,tmi			" .. 
000147 xxxx 000230175016 	sba     montab,6			" subtract off days for each month
000150 xxxx 777777075016 	ada     -1,6                " put back last entry
000151 xxxx 000001075007 	ada     1,dl                " plus one more
000152 xxxx 000214755000 	sta     rdclock.day_of_month	" Day of month
000153 xxxx 000201702000 	tsx2	datecv              " convert day
000154 xxxx 000000635016 	eaa     0,6
000155 xxxx 000230135003 	sbla	montab,du			" get index into month table
000156 xxxx 000022771000 	arl     18                  "..
000157 xxxx 000212755000 	sta     rdclock.month		" Save month number
000160 xxxx 000255236005 	ldq     rdc.months-1,al		" Get name of month.
000161 xxxx 000213756000 	stq     rdclock.month_name
000162 xxxx 000201702000 	tsx2	datecv              " convert month
000163 xxxx 000000024400     mvne	(),(),()			" edit the date and time
000164 xxxx 000224070010 	desc4ns	date,8 
000165 xxxx 000244000014 	desc9a	datedit,12 
000166 xxxx 000226020014 	desc6a	rdctime,12 
000167 xxxx 000220236000 	ldq     rdclock.day_of_century
000170 xxxx 000002076007 	adq     2,dl                " Bump Tuesday into place.
000171 xxxx 000007506007 	div     7,dl
000172 xxxx 000215755000 	sta     rdclock.day_of_week
000173 xxxx 000247236005 	ldq     rdc.days,al         " Get name of day.
000174 xxxx 000216756000 	stq     rdclock.day_name
000175 xxxx 000226237000 	ldaq	rdctime             " get conversion in AQ
000176 xxxx 000176622000 datx2:	eax2	*			" restore XR's
000177 xxxx 000177620000 	eax0    *               " ..
000200 xxxx 000000710012 	tra     0,2             " return to caller
000201 xxxx 000223755000 datecv:	sta	datenum			" save number
000202 xxxx 000017301400 	btd     (),(x7)         " convert into proper place
000203 xxxx 000223000004 	desc9a	datenum,4 
000204 xxxx 000224070002 	desc4ns	date,2 
000205 xxxx 777776627017 	eax7	-2,7			" move offset index
000206 xxxx 000000710012 	tra     0,2             " and return
000207 xxxx 000000000000 	bss	,1
000210 xxxx 000000000000 	bss	,1
000211 xxxx 000000000000 	bss	,1
000212 xxxx 000000000000 	bss	,1
000213 xxxx 000000000000 	bss	,1
000214 xxxx 000000000000 	bss	,1
000215 xxxx 000000000000 	bss	,1
000216 xxxx 000000000000 	bss	,1
000217 xxxx 000000000000 	bss	,1
000220 xxxx 000000000000 	bss	,1
000221 xxxx 000000000010     dec    8       "were PST here!
000222 xxxx 160163164040     aci	'pst ' 
000223 xxxx 000000000000 datenum:	bss	,1
000224 xxxx 000000000000 date:	bss	,1
000226 xxxx 000000000000 rdctime:	bss	,2
000230 xxxx 000000000037 montab:	dec	31,28,31,30,31,30,31,31,30,31,30,31
000231 xxxx 000000000034
000232 xxxx 000000000037
000233 xxxx 000000000036
000234 xxxx 000000000037
000235 xxxx 000000000036
000236 xxxx 000000000037
000237 xxxx 000000000037
000240 xxxx 000000000036
000241 xxxx 000000000037
000242 xxxx 000000000036
000243 xxxx 000000000037
000244 xxxx 401020102260 datedit:	vfd	9/lte+1,o9/20,9/mvzb+2,9/insp,o9/61,9/mvc+2,9/insm+1,9/mvc+2
000245 xxxx 061322021322 
000246 xxxx 260015322021 	vfd	9/insp,o9/15,9/mvc+2,9/insm+1
000247 xxxx 163165156040 rdc.days: aci	'sun mon tue wed thurfri sat ' 
000250 xxxx 155157156040  
000251 xxxx 164165145040  
000252 xxxx 167145144040  
000253 xxxx 164150165162  
000254 xxxx 146162151040  
000255 xxxx 163141164040  
000256 xxxx 152141156040 	aci	'jan feb mar apr may jun jul aug septoct nov dec ' 
000257 xxxx 146145142040  
000260 xxxx 155141162040  
000261 xxxx 141160162040  
000262 xxxx 155141171040  
000263 xxxx 152165156040  
000264 xxxx 152165154040  
000265 xxxx 141165147040  
000266 xxxx 163145160164  
000267 xxxx 157143164040  
000270 xxxx 156157166040  
000271 xxxx 144145143040  
000272 xxxx 000275710000 crlf:	save
000273 xxxx 000000000000
000274 xxxx 000273630000
000275 xxxx 000273754000
000276 xxxx 000273741000
000277 xxxx 000622235000         lda     =012
000300 xxxx 000001420400         emCall  1
000301 xxxx 000623235000         lda     =015
000302 xxxx 000001420400         emcall      1
000303 xxxx 000274710000         return  crlf
000304 xxxx 000313710000 ioa:    save    2, 4, 5, 6
000305 xxxx 000000000000
000306 xxxx 000000222003
000307 xxxx 000001224003
000310 xxxx 000002225003
000311 xxxx 000003226003
000312 xxxx 000305630000
000313 xxxx 000305754000
000314 xxxx 000305741000
000315 xxxx 000306742000
000316 xxxx 000307744000
000317 xxxx 000310745000
000320 xxxx 000311746000
000321 xxxx 000002624031 ioa1:   eax4    2, 1*   " 1st arg is control string
000322 xxxx 000003625011         eax5    3, 1    " next arg is the 1st of the numeric args. x5 points to next argument
000323 xxxx 000000626015         eax6    0, x5
000324 xxxx 000041235007         lda     041, dl " make a blank tallyb word .....
000325 xxxx 000342755000         sta     i29
000326 xxxx 000000235014     	lda     0, x4   " get 1st data word into A
000327 xxxx 000033731000         ars     27      " determine word count
000330 xxxx 000006735000     	als     6       " count to upper word of tally
000331 xxxx 000342255000     	orsa    i29
000332 xxxx 000000626014     	eax6    0, x4   " address of string into X6
000333 xxxx 000342746000     	stx6    i29     " address to upper word of tally
000334 xxxx 000342235052 inext:  lda     i29, sc
000335 xxxx 000136115007         cmpa    =1a^, dl
000336 xxxx 000343600000         tze     iernot      " if so, go process it
000337 xxxx 000001420400 out1:  	emCall  1
000340 xxxx 000334607000     	ttf     inext
000341 xxxx 000306710000         return  ioa
000342 xxxx 000000000041 i29:	tallyb  0, 0, 1 
000343 xxxx 000342235052 iernot: lda     i29, sc     " get next char ...
000344 xxxx 000136115007         cmpa    =1a^, dl    " is it another "^"?
000345 xxxx 000363600000         tze     i21         " No, just print it ...
000346 xxxx 000167115007         cmpa    =1aw, dl    " is it a "w"?
000347 xxxx 000365600000         tze     idoW        " do full word octal
000350 xxxx 000157115007         cmpa    =1ao, dl    " is it an "o"?
000351 xxxx 000413600000         tze     idoO        " print zero suppressed octal
000352 xxxx 000156115007         cmpa    =1an, dl    " is it a "n"?
000353 xxxx 000436600000         tze     idoN        " octal w/ no spaces inserted
000354 xxxx 000144115007         cmpa    =1ad, dl    " is it a "d"?
000355 xxxx 000464600000         tze     idoD        " decimal
000356 xxxx 000141115007         cmpa    =1aa, dl    " is it a ^a?
000357 xxxx 000472600000         tze     idoA        " 4 char ascii display
000360 xxxx 000147115007         cmpa    =1ag, dl    " is it a ^g?
000361 xxxx 000503600000         tze     idoG        " 6 char GE BCD display
000362 xxxx 000337710000         tra     out1        " unknown just print it....
000363 xxxx 000001420400 i21:    emCall  1           " output A to console
000364 xxxx 000334710000         tra     inext
000365 xxxx 000000235035 idoW:   lda     0, 5*       " ^w - full-word octal xxxxxx xxxxxx
000366 xxxx 000561702000         tsx2    octwd
000367 xxxx 000462757000         staq    ioaSafe     " bcd in AQ
000370 xxxx 000044773000         lrl     36          " A => Q
000371 xxxx 000006622000         eax2    6
000372 xxxx 000000235007 idoW2:  lda     =0, dl
000373 xxxx 000006737000         lls     6
000374 xxxx 000002420400         emCall  2           " output GE code char to console
000375 xxxx 777777622012         eax2    -1, 2
000376 xxxx 000372601000         tnz     idoW2
000377 xxxx 000462237000         ldaq    ioaSafe
000400 xxxx 000000235007         lda     =0, dl      " 0 => A
000401 xxxx 000020235007         lda     =020 ,dl     " bcd ' ' => A
000402 xxxx 000002420400         emcall  2
000403 xxxx 000006622000         eax2    6
000404 xxxx 000000235007 idoW3:  lda     =0,dl
000405 xxxx 000006737000         lls     6
000406 xxxx 000002420400         emCall  2
000407 xxxx 777777622012         eax2    -1, 2
000410 xxxx 000404601000         tnz     idoW3
000411 xxxx 000001065003         adx5    1,du
000412 xxxx 000334710000         tra     inext
000413 xxxx 000000235035 idoO:   lda     0, 5*           " ^o - Zero-suppressed octal
000414 xxxx 000561702000         tsx2    octwd
000415 xxxx 000462757000         staq    ioaSafe         " bcd in AQ
000416 xxxx 000434235000         lda     idOTly
000417 xxxx 000435755000         sta     idOT
000420 xxxx 000435235052 idO1:   lda     idOT, sc        " get char into A
000421 xxxx 000000115007         cmpa    =0, dl          " a zero?
000422 xxxx 000430601000         tnz     idONZ + 1       " nope
000423 xxxx 000420607000         ttf     idO1            " Yes, a Zero. Go for more
000424 xxxx 000002420400         emCall  2               " output a single 0
000425 xxxx 000001065003         adx5    1,du
000426 xxxx 000334710000         tra     inext
000427 xxxx 000435235052 idONZ:  lda     idOT, sc        " get char into A
000430 xxxx 000002420400         emCall  2
000431 xxxx 000427607000         ttf     idONZ           " Yes, a Zero. Go for more
000432 xxxx 000001065003         adx5    1,du
000433 xxxx 000334710000         tra     inext
000434 xxxx 000462001400 idOTly: tally   ioaSafe, 12, 0 
000435 xxxx 000000000000 idOT:   bss     1
000436 xxxx 000000235035 idoN:   lda     0, 5*       " ^n - octal w/ no spaces inserted
000437 xxxx 000561702000         tsx2    octwd
000440 xxxx 000462757000         staq    ioaSafe     " bcd in AQ
000441 xxxx 000044773000         lrl     36          " A => Q
000442 xxxx 000006622000         eax2    6
000443 xxxx 000000235007 idoN2:  lda     =0,dl
000444 xxxx 000006737000         lls     6
000445 xxxx 000002420400         emCall  2           " output GE code char to console
000446 xxxx 777777622012         eax2    -1, 2
000447 xxxx 000443601000         tnz     idoN2
000450 xxxx 000462237000         ldaq    ioaSafe
000451 xxxx 000000235007         lda     =0, dl      " 0 => A
000452 xxxx 000006622000         eax2    6
000453 xxxx 000000235007 idoN3:  lda     =0, dl
000454 xxxx 000006737000         lls     6
000455 xxxx 000002420400         emCall  2
000456 xxxx 777777622012         eax2    -1, 2
000457 xxxx 000453601000         tnz     idoN3
000460 xxxx 000001065003         adx5    1,du
000461 xxxx 000334710000         tra     inext
000462 xxxx 000000000000 ioaSafe:  bss 2
000464 xxxx 000000236035 idoD:   ldq     0, 5*       " ^d
000465 xxxx 000514701000         call    toDec
000466 xxxx 000470710000
000467 xxxx 000000000000
000470 xxxx 000001065003         adx5    1,du
000471 xxxx 000334710000         tra     inext
000472 xxxx 000000236035 idoA:   ldq     0, 5*      " ^a (4 ascii chars into Q)
000473 xxxx 000004622000         eax2    4
000474 xxxx 000000235007 idoA2:  lda     =0,dl
000475 xxxx 000011737000         lls     9
000476 xxxx 000001420400         emCall  1
000477 xxxx 777777622012         eax2    -1, 2
000500 xxxx 000474601000         tnz     idoA2
000501 xxxx 000001065003         adx5    1,du        " into next argument
000502 xxxx 000334710000         tra     inext
000503 xxxx 000000236035 idoG:   ldq     0, 5*        " ^g (6 GE BCD chars into Q)
000504 xxxx 000006622000         eax2    6
000505 xxxx 000000235007 idoG2:  lda     =0,dl
000506 xxxx 000006737000         lls     6
000507 xxxx 000002420400         emCall  2
000510 xxxx 777777622012         eax2    -1, 2
000511 xxxx 000505601000         tnz     idoG2
000512 xxxx 000001065003         adx5    1,du        " into next argument
000513 xxxx 000334710000         tra     inext
000514 xxxx 000517710000 toDec:  save    "2,3,4,5,6,7
000515 xxxx 000000000000
000516 xxxx 000515630000
000517 xxxx 000515754000
000520 xxxx 000515741000
000521 xxxx 000624116000         cmpq    =-34359738368       " the weird one?
000522 xxxx 000526601000         tnz     toDec2
000523 xxxx 000560235000         lda     decMTly             " just print it and be done with it
000524 xxxx 000554755000         sta     decTly
000525 xxxx 000544710000         tra     toDec1
000526 xxxx 000550756000 toDec2: stq     decNo
000527 xxxx 000000116007         cmpq    =0,dl       " Q < 0?
000530 xxxx 000532605000         tpl     toDec0      " No
000531 xxxx 000550336000         lcq     decNo       " -decNo => Q
000532 xxxx 000012506007 toDec0: div     =10,dl      " divide Q by 10, remainder in A
000533 xxxx 000060075007         ada     =1a0,dl     " add ascii '0' (=1A0) to A
000534 xxxx 000554755045         sta     decTly, scr " start writing characters backwards
000535 xxxx 000000076007         adq     =0,dl       " set flags to test if Q == 0
000536 xxxx 000532601000         tnz     toDec0      " if Q == 0 then we're essentially done with conversion
000537 xxxx 000550235000         lda     decNo
000540 xxxx 000000115007         cmpa    =0,dl
000541 xxxx 000544605000         tpl     toDec1
000542 xxxx 000055235007         lda     =1a-,dl     " (-) => A
000543 xxxx 000554755045         sta     decTly, scr " write (-) sign
000544 xxxx 000554235052 toDec1: lda     decTly, sc
000545 xxxx 000001420400         emCall  1
000546 xxxx 000544607000         ttf     toDec1
000547 xxxx 000516710000         return  toDec
000550 xxxx 000000000000 decNo:  dec     0
000551 xxxx 000000000000 decBuf: bss     3
000554 xxxx 000553000040 decTly: tallyb  decBuf+2, , 0 
000555 xxxx 055063064063 decMM:  aci     "-34359738368"  " -2^^35 
000556 xxxx 065071067063  
000557 xxxx 070063066070  
000560 xxxx 000555001440 decMTly:tallyb  decMM, 12, 0 
000561 xxxx 000576742000 octwd:	stx2	octx2
000562 xxxx 000006622000 	eax2	6
000563 xxxx 000003736000 	qls     3
000564 xxxx 000003777000 	llr     3
000565 xxxx 777777622012 	eax2	-1,2
000566 xxxx 000563605400 	tpnz	*-3
000567 xxxx 000620756000 	stq     octtemp
000570 xxxx 000006622000 	eax2	6
000571 xxxx 000003736000 	qls     3
000572 xxxx 000003777000 	llr     3
000573 xxxx 777777622012 	eax2	-1,2
000574 xxxx 000571605400 	tpnz	*-3
000575 xxxx 000620235000 	lda     octtemp
000576 xxxx 000576622000 octx2:	eax2	*
000577 xxxx 000000710012 	tra     0,2
000600 xxxx 000616742000 hexwd:	stx2	hexx2
000601 xxxx 000044773000 	lrl     36          "shift to Q
000602 xxxx 000006622000 	eax2	6           "	process 6 characters
000603 xxxx 000000235007 hexloop:	lda	=0,dl	"	clear A
000604 xxxx 000004737000 	lls     4           "shift in 4 bits
000605 xxxx 000011115007 	cmpa	=9,dl		"greater than 9?
000606 xxxx 000610604400 	tmoz	*+2
000607 xxxx 000007035007 	adla	=7,dl       "if so, change to letter
000610 xxxx 000006773000 	lrl     6
000611 xxxx 000620235000 	lda     octtemp		"get temporary
000612 xxxx 000006737000 	lls     6           "insert new character
000613 xxxx 000620755000 	sta     octtemp		"and store
000614 xxxx 777777622012 	eax2	-1,2		"decrement index
000615 xxxx 000603605400 	tpnz	hexloop
000616 xxxx 000616622000 hexx2:	eax2	*
000617 xxxx 000000710012 	tra     0,2		"return to caller
000620 xxxx 000000000000 octtemp:	oct	0
000621 xxxx 000003641100 lit Lit000112 (=1000000)
000622 xxxx 000000000012 lit Lit000277 (=012)
000623 xxxx 000000000015 lit Lit000301 (=015)
000624 xxxx 400000000000 lit Lit000521 (=-34359738368)
