" Begin include file ...... Utils(New).as8

" Begin include file ...... error.incl.alm
" Last modified 5/3/77 by Noel I. Morris
" Modified November 1981 by C. Hornig to not use IOM rel mode.
" Modified February 2013 by H. Reed to work with as8 under dps8/simh simulator

"	tsx2	erpt	to print error messages
"	acc	'message'
"	nop	a,t "	parameters
"	^w	 full word octal
"	^o	 zero suppressed octal
"	^n	 octal with no spaces inserted
"	^d	 decimal
"	^a	 ASCII (4 char)
"	^g	 GE code (6 char)
"   ^S   arbitrary alphanumeric descriptor
"   ^A   ASCII (9-bit) descriptor
"   ^G   GEBCD (6-bit) descriptor
"   ^4   decimal (4-bit) descroptor

erpt:	stx3	errx3       "save X3

        stx2    errin		"set address of message descriptor
        lda     0,2         "get character count from string
        arl     27          " ..
        eax7    0,al		"length of string in X7
        stx7    erlen		"save length
        eax6    1           "X6 is offset into input string

        arl     2           "divide character count by 4
        eax3    1,al		"round
        adlx3	errin		"X3 -> first parameter

"

erloop:	cmpx6	erlen		"is input string exhausted?
        tpnz    erpend      "if so, print completed message

        mlr     (id,x6),(),fill(0)      " grab one character
        arg     errin
        desc9a	errarg,4

        eax6    1,6         "step offset over character

        lda     errarg      "pick up character
        cmpa    =1a^,du		"is it "^"?
        tze     ernot		"if so, go process it

        tsx2    type
        zero    errarg,1    " write char to console

        tra     erloop      "and loop

ernot:	scm     (),(rl,id,x6)   "search table of keys
        desc9a	erkey,10
        arg     errin
        arg     ertally
        
        ttn     erloop		" tra if not legal key
"        ttf     erok		" tra if legal key
"
"
" just so we can write a ^ with ^^
"
"        tsx2    type
"        zero    errin,1     " write illegal key to console
"        tra     erloop
"
"erok:
        eax6    1,6         " step over key

        lda     0,3         " pick up argument pointer
        stba	*+1,64      " set following lda instruction
        lda     0           " ****** THIS INSTRUCTION GETS MODIFIED ******
        sta     errarg      " and save for conversion
        eax3    1,3         " step to next parameter

        ldq     ertally		" get character key index
        tra     ertable,ql* " dispatch on key

" 
err_4:  tsx2	setar		"set AR bit if necessary
        mvt     (id),()
        arg     errarg
        desc9a	errtemp,64
        arg     decastab

        lda     errarg
        ana     =o7777,dl	"	extract string length
        stca    err_4d, 3
        
        tsx2    type
err_4d: desc9a  errtemp,64

        tra     erloop

err_A:	tsx2	setar               "set AR bit if necessary
        mlr     (id),(),fill(40)	"copy ASCII string
        arg     errarg
        desc9a	errtemp,64
        
errstrip:	tsx2	stripa          "strip trailing blanks
        desc9a	errtemp,64
        tra     errtrim             "and trim leading blanks

err_G:	tsx2	setar		"set AR bit if necessary
        mvt     (id),(),fill(020)	"copy GEBCD and translate to ASCII
        arg     errarg
        desc9a	errtemp,64
        arg     geastabu

        tra     errstrip	"join common code


err_a:  tsx2    type
        zero    errarg,4    " write 4 chars to console

        tra     erloop
        
err_g:  mvt     (),()
        desc6a	errarg,6
        desc9a	errtemp,6
        arg     geastabu

        tsx2    type
        zero    errtemp, 6
        
        tra     erloop

err_d:	btd     (),()       " convert decimal number
        desc9a	errarg,4    " 36-bit integer
        desc4ls	errnum,12   " max 12-digits (incl sign)

        mvne	(),(),()	" edit the output
        desc4ls	errnum,12
        desc9a	eredit_d,9
        desc9a	errtemp,12  " max 12-digits

        lda     =12,dl      "length of output is 12 characters
        tra     errtrim     "trim leading blanks from output

err_n:	eax7    (eredit_n-eredit_o)*4  "set offset for conversion with no blank
        tra     err_ow		"join common code

err_o:	eax7    1           "set offset of 1 to skip ses micro-op
        tra     err_ow		"common code for "^o" and "^w"

err_S:  ldq     errarg      " get string descriptor
        anq     =o060000,dl " mask off everything but TA
        tze     err_A       " 00 => 9-bit
        cmpq    =o020000,dl
        tze     err_G       " 01 => 6-bit
        cmpq    =o040000,dl
        tze     err_4       " 10 => 4-bit
        
        tra     erloop

err_w:	eax7    0           "offset of 0 to turn off zero suppression

err_ow:	tsx2	octwd		"convert octal
        staq	errnum		"save word

        mve     (),(x7),()  "insert a blank in the middle
        desc6a	errnum,12
        desc9a	eredit_o,7
        desc6a	errtempo,13

        mvt     (),()
        desc6a	errtempo,13
        desc9a	errtemp,13
        arg     geastab

        lda     13,dl		"length is 13
        tra     errtrim		"copy into output

errtrim:tct     (rl)        "search for last non-blank
        desc9a	errtemp,al
        arg     abtable
        arg     ertally

        ldq     ertally		"offset of first non-blank in Q
        sba     ertally		"compute # of non-blank characters

errmov:	als     18          "place in AU
        sta     ertally		"and save
        tze     ernomov		"skip zero length move

        mlr     (rl,ql),(rl,x5)	"copy the string
        desc9a	errtemp,au
        desc9a	erbuf,au

ernomov:
        " construct a tally word suitable for type

        lda     ertally     " get count
        alr     18          " shift into al
        stca	erct,07     " store in erct

        tsx2	type		" print output
erct:	zero	erbuf,*

        tra     erloop		" and loop

erpend:	eax2	0,3         "set correct X2 return value
errx3:	eax3	*           "restore X3
        tra     0,2         "and return


"   tsx2	type		to type line on oprs console
"   zero	buf,n

type:   stx2	typex2          "here to write tty
        ldq     0,2             "get address and length

        stcq	tlydesc,70      "place address into tally descriptor

        anq     =o7777,dl       "mask the length
        qls     6
        orq     =o40,dl
        stcq	tlydesc,07      "and place in tally word

type2:  lda     tlydesc, sc
        emcall  1
        ttf     type2

typex2:	eax2	*
        tra     1,2

tally:  vfd 18/0, 12/0, 1/1, 5/0        " addr/count

tallySC:    bss ,1
tlydesc:    bss ,1


eredit_d:	vfd	9/lte+1,o9/40,9/lte+3,o9/40,9/lte+4,o9/55,9/mfls+10,9/enf
            vfd	9/mvc+1
eredit_o:	vfd	9/ses+if0,9/lte+1,o9/20,9/mvzb+6,9/insm+1,9/mvzb+5,9/mvc+1,9/ses+if0
eredit_n:	vfd	9/lte+1,o9/20,9/insm+1,9/mvzb+11,9/mvc+1,9/ses+if0,9/ses+if0


erbuf:      bss	,16
            even
errnum:     bss	,2
errtemp:	bss	,16
errtempo:	bss	,16
ertally:	bss	,1
errarg:     bss	,1
errin:      desc9a	*,1
erlen:      bss	,1

erkey:      aci	"AGwondagS4"

ertable:tra     err_A
        tra     err_G
        tra     err_w
        tra     err_o
        tra     err_n
        tra     err_d
        tra     err_a
        tra     err_g
        tra     err_S
        tra     err_4
        

setar:	ldq     =o100,dl    "get AR bit for MF1
        cana	=o700000,du	"high-order bits ON
        tze     resetar		"if not, reset AR bit
        orsq	0,2         "if so, set AR bit
        tra     0,2         "and return

resetar:erq     =-1         "complement Q
        ansq	0,2         "reset AR bit
        tra     0,2         "and return

" 


"	lda	ascii code
"	tsx2	asge	to convert to GE code
"	sta	GE code

asge:	ana     =o177177177177	"make it  legit ASCII
        sta     wd9         "setup to loop through word

        mvt     (),(),fill(040)	"move and translate
        desc9a	wd9,4
        desc6a	wd6,6
        arg     asgetab

        lda     wd6         "get ge word
        tra     0,2

wd4:    oct 0
wd6:	oct	0
        even
wd9:	oct	0, 0


asgetab:	
    oct	020020020020,020020020020   "00
	oct	020020020020,020020020020   "10
	oct	020020020020,020020020020   "20
	oct	020020020020,020020020020   "30
	oct	020057076013,053074032057   "40
	oct	035055054060,073052033061   "50
	oct	000001002003,004005006007   "60
	oct	010011015056,036075016020   "70
	oct	014021022023,024025026027   "100
	oct	030031041042,043044045046   "110
	oct	047050051062,063064065066   "120
	oct	067070071012,020034020072   "130
	oct	037021022023,024025026027   "140
	oct	030031041042,043044045046   "150
	oct	047050051062,063064065066   "160
	oct	067070071020,040020020020   "170


"	lda	 decimal code
"	tsx2	decas	to convert to ASCII
"	sta	ASCII code

decas:	sta	wd4		"setup char tally words

	mvt	(),()
	desc4a	wd4,8
	desc9a	wd9,8
	arg     decastab

	lda     wd9		 "get comverted word
	tra     0,2

decastab:	aci	/0123456789+++-++/




    include     alm/bosequ.incl.alm
    include     alm/rdclock.incl.alm

" for rdclock.incl.alm
getconf:	tra     0,2		"if found return

    include     alm/octwd.incl.alm
    include     alm/eis_micro_ops.incl.alm
    include     alm/conv.incl.alm
    include     alm/strip.incl.alm
