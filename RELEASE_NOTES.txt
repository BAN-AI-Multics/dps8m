2016-12-13

Building under MSYS2 

    Downloaded https://msys2.github.io/ x86_64 installer

       pacman -Sy pacman
       ^D

    Start -> All programs -> MSYS2 64 bit -> MSYS2 MSYS

       pacman -Syu
        ^D

    Start -> All programs -> MSYS2 64 bit -> MSYS2 MSYS

       pacman -Su

       pacman -S git

       git clone ssh://git.code.sf.net/p/dps8m/code dps8m-code
       git clone https://github.com/libuv/libuv.git

       pacman -S mingw-w64-x86_64-gcc
       pacman -S mingw-w64-x86_64-binutils
       pacman -S mingw-w64-x86_64-libtool
       pacman -S mingw-w64-x86_64-make
       pacman -S mingw-w64-x86_64-dlfcn
       pacman -S mingw-w64-x86_64-diffutils
       pacman -S mingw-w64-x86_64-gettext
       pacman -S mingw-w64-x86_64-libgnurx
       pacman -S mingw-w64-x86_64-binutils
       pacman -S automake
       pacman -S autoconf
       ^D

    Start -> All programs -> MSYS2 64 bit -> MSYS2 MINGW 64 bit

      cd libuv
      sh autogen.sh
      ./configure
      <Edit Makefile; at line 4460, change $(MAKE) to mingw32-make.exe>
      mingw32-make.exe

      cd dps8-code
      git checkout rc7
      git pull
      mingw32-make.exe

    In a Command shell:

      cd <wherever>\QuickStart_MR12.6e_rc7a1
      c:\msys64\home\Admin\dps8m-code\src\dps8\dps8.exe MR12.6e_boot.ini



2016-12-08

Crossbuild for MinGW64 from Fedora 23

   git clone git@github.com:libuv/libuv.git
   cd libuv
   sh autogen.sh
   #./configure --build=x86_64-w64-mingw32-gcc
   mingw64-configure
   sudo make install

   cd
   git clone ssh://git.code.sf.net/p/dps8m/code dps8m-code
   cd dps8m-code
   make clean all CROSS=MINGW64


2014-11-11

Alpha 1.0

See MR12.3_install.notes.txt

4Jan14: The ini files were rename to .ini files
    dps8.ini.20184.tap -> 20184.ini
    dps8.ini.base_system -> base_system.ini
    dps8.ini.t4d_b.2.tap -> t4d_b.2.ini

16Feb14: Many simulator commands have been added or enhanced. The file
         'docs/ImplementationNotes.ps' has been updated to reflect the changes.

15July2014:

  The FXE subsystem requires an installed Multics tape image tree.

  The MR12.3 tree can be found at:

  https://drive.google.com/file/d/0BxMJyk--V8yWZXJlYWpXTDAzQ28/edit?usp=sharing

  Download the file and untar it in the src/dps8 directory, or whatever
  directory you execute FXE from. The uncompressed tree will occupy ~ 245MB
  of disk space.

27July2014:

  The faults branch can now successfully boot to "bce (boot)". The tarball is
  built from the faults branch.

  Building:

    A 64 bit processor and OS is needed.

    The build environment used by unused0 is:

        Fedora Core 20.
        clang 3.4
        (gcc 4.8 also works)

    The build enviroment used by doon386 is Eclipse, running under MacOS.

  Building from git:

    git checkout fault
    cd src/dps8
    make

  Building from the tarball:

    cd src/dps8
    make

  Booting Multics:

    From the directory src/dps8:

    1). Fetch the Multics tapes:

        make tapes

    2). Format a boot disk

       ./dps8 format.ini

    3). Initialize the RPV with a cold boot: (takes about 3 1/2 minutes on
        a 2GHz laptop).

        ./dps8 cold.ini

    4). Add a config deck

       ./dps8 establish_config_deck.ini

    5). Start "bce(boot)"

       ./dps8 bce.ini

        Use the bce command "die" to exit bce and the emulator.


    Notes:

      The created disk will occupy ~ 1GB of disk space.
      The tape image files will occupy ~ .5 GB of disk space.

28July20124

Notes on building:

   Electric Fence is a malloc debugging tool; it has been removed from 
   the default build process as it hasn't detected an issue in months.

   ctags is a utility that builds a data base of definition locations 
   from the C code base to aid in debugging; removing 'tags' from the
   'all:' line in the src/dps8/Makefile will allow building without
   having to install the ctags package.

   Bison and flex are needed to build the as8+ assembler, which is not
   needed for the Multics boot process. 

   The Makefiles default to the clang C compiler, but they can be edited
   to use gcc; there are not any known issues with gcc.

   Ubuntu/Debian users have reported the need to install 'binutils-avr'
   to get the ar command.

31Oct2014

Additional notes on building under 64-bit Debian 7.5 Linux (provided by Harvey Berenberg)

    Here's what I did to get the dps8 simulator to work on Debian 7.5:

    I downloaded the dps8 code from git on sourceforge
    goto: sourceforge.net/
    search for: dps8m
    click on "git"
    click "RO"
    copy the RO command, omitting the "git clone" at the beginning of the line
    From the linux commandline:
    ~$ git://git.code.sf.net/p/dps8m/code dps8m-code
    Unzip the zip file. It will create a directory "dps8m-code"
    Follow the directions in the RELEASE_NOTES.txt file.

    I had to install the following to get the code to compile
    bison 2.5
    flex 2.5.35
    debian clang 3.0-6.2
    LibParse-exuberantctags-perl 1.01-1+b2
    exuberant-ctags 5.9  /* note: this wouldn't install w/o LibParse-exuberantctags-perl */

    In the src/Makefile.mk file:
    I chgd: LDFLAGS = -g
    TO:      LDFLAGS = -g -lrt
    /* this adds librt.so which contains "clock_gettime" to the linker search */






